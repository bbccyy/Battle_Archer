// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SkillData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SkillData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* SkillEffectData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillEffectData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillHitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillHitData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillEnergyDrawData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillEnergyDrawData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillEnergyAssistData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillEnergyAssistData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillLifeStealData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillLifeStealData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillSpeicalAdjust_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillSpeicalAdjust_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDamageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDamageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillHealData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillHealData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillSummonObstacleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillSummonObstacleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillSummonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillSummonData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillRebornData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillRebornData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillGrabData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillGrabData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillEnergyRecoverData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillEnergyRecoverData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillSubSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillSubSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSkillData_2eproto() {
  protobuf_AddDesc_module_2fSkillData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SkillData.proto");
  GOOGLE_CHECK(file != NULL);
  SkillEffectData_descriptor_ = file->message_type(0);
  static const int SkillEffectData_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, effecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, origintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, effectparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, effectparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, isbysection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, effectdelay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, effectinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, effectcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, effecttarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, spebuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, targetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, addbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, effecttargetincludeself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, recordeffecttarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, effectpriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, effectparam3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, levelsubbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, levelrangegrowth_),
  };
  SkillEffectData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillEffectData_descriptor_,
      SkillEffectData::default_instance_,
      SkillEffectData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEffectData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillEffectData));
  SkillHitData_descriptor_ = file->message_type(1);
  static const int SkillHitData_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, hitforsure_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, effectparent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, hiteffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, hitsound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, hiteffectplaytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, hiteffectplayparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, hiteffectfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, hiteffectflip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, refeffectparent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, refeffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, refsound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, refeffectfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, refeffectflip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, playdownanim_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, hiteffectrotaterandom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, hiteffectrotaterangex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, hiteffectrotaterangey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, hiteffectdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, playlayereffect_),
  };
  SkillHitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillHitData_descriptor_,
      SkillHitData::default_instance_,
      SkillHitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillHitData));
  SkillEnergyDrawData_descriptor_ = file->message_type(2);
  static const int SkillEnergyDrawData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyDrawData, drawtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyDrawData, drwaparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyDrawData, drawparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyDrawData, recovertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyDrawData, recoverparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyDrawData, recoverparam2_),
  };
  SkillEnergyDrawData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillEnergyDrawData_descriptor_,
      SkillEnergyDrawData::default_instance_,
      SkillEnergyDrawData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyDrawData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyDrawData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillEnergyDrawData));
  SkillEnergyAssistData_descriptor_ = file->message_type(3);
  static const int SkillEnergyAssistData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyAssistData, assisttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyAssistData, assistparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyAssistData, assistparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyAssistData, addtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyAssistData, addparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyAssistData, addparam2_),
  };
  SkillEnergyAssistData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillEnergyAssistData_descriptor_,
      SkillEnergyAssistData::default_instance_,
      SkillEnergyAssistData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyAssistData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyAssistData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillEnergyAssistData));
  SkillLifeStealData_descriptor_ = file->message_type(4);
  static const int SkillLifeStealData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillLifeStealData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillLifeStealData, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillLifeStealData, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillLifeStealData, upperlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillLifeStealData, upperlimitparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillLifeStealData, buffsubtypefilter_),
  };
  SkillLifeStealData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillLifeStealData_descriptor_,
      SkillLifeStealData::default_instance_,
      SkillLifeStealData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillLifeStealData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillLifeStealData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillLifeStealData));
  SkillSpeicalAdjust_descriptor_ = file->message_type(5);
  static const int SkillSpeicalAdjust_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpeicalAdjust, enable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpeicalAdjust, effecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpeicalAdjust, targetbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpeicalAdjust, bufftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpeicalAdjust, buffparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpeicalAdjust, adjustdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpeicalAdjust, adjusttarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpeicalAdjust, isusestateadjust_),
  };
  SkillSpeicalAdjust_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillSpeicalAdjust_descriptor_,
      SkillSpeicalAdjust::default_instance_,
      SkillSpeicalAdjust_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpeicalAdjust, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSpeicalAdjust, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillSpeicalAdjust));
  SkillDamageData_descriptor_ = file->message_type(6);
  static const int SkillDamageData_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, damagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, typeparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, typeparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, typeparam3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, crittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, critparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, critparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, extraarmourpiercing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, extraparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, extraparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, isignoreblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, adjustbytargetcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, adjustdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, skipdamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, upperlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, upperlimitparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, specialadjust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, isusestateadjust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, stateadjusttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, skilltunnel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, lowerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, lowerlimittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, lowerlimitparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, ignoreshield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, ignorebedamagerage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, healbyeffnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, healcoefficient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, buffid2_),
  };
  SkillDamageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDamageData_descriptor_,
      SkillDamageData::default_instance_,
      SkillDamageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDamageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDamageData));
  SkillHealData_descriptor_ = file->message_type(7);
  static const int SkillHealData_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, healtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, typeparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, typeparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, typeparam3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, crittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, critparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, extraparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, extraparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, isignoreblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, adjustbytargetcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, adjustdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, upperlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, upperlimitparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, specialadjust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, lowerlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, lowerlimittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, lowerlimitparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, critparam2_),
  };
  SkillHealData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillHealData_descriptor_,
      SkillHealData::default_instance_,
      SkillHealData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillHealData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillHealData));
  SkillSummonObstacleData_descriptor_ = file->message_type(8);
  static const int SkillSummonObstacleData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonObstacleData, shapetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonObstacleData, shapeparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonObstacleData, shapeparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonObstacleData, positiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonObstacleData, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonObstacleData, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonObstacleData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonObstacleData, targettype_),
  };
  SkillSummonObstacleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillSummonObstacleData_descriptor_,
      SkillSummonObstacleData::default_instance_,
      SkillSummonObstacleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonObstacleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonObstacleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillSummonObstacleData));
  SkillSummonData_descriptor_ = file->message_type(9);
  static const int SkillSummonData_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, positon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, mindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, borneffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, bornsound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, leveltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, levelparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, lasttimetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, lasttimeparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, canoverscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, maxsameidunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, deletesameidunit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, addbuffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, inheritattribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, inheritpercentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, usereftargetasblueprint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, inheritattributefromreftarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, inheritattributefromancestor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, verticalposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, isnokillragebonus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, positionvectorarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, usefixedrate_),
  };
  SkillSummonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillSummonData_descriptor_,
      SkillSummonData::default_instance_,
      SkillSummonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSummonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillSummonData));
  SkillRebornData_descriptor_ = file->message_type(10);
  static const int SkillRebornData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, lifetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, lifeparam1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, lifeparam2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, positon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, mindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, borneffect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, bornsound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, lasttimetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, lasttimeparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, canoverscreen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, resetcooldown_),
  };
  SkillRebornData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillRebornData_descriptor_,
      SkillRebornData::default_instance_,
      SkillRebornData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillRebornData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillRebornData));
  SkillGrabData_descriptor_ = file->message_type(11);
  static const int SkillGrabData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGrabData, selfgrabsocket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGrabData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGrabData, canbereftarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGrabData, canbeeffecttarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGrabData, animonplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGrabData, damagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGrabData, offsetofslot_),
  };
  SkillGrabData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillGrabData_descriptor_,
      SkillGrabData::default_instance_,
      SkillGrabData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGrabData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGrabData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillGrabData));
  SkillEnergyRecoverData_descriptor_ = file->message_type(12);
  static const int SkillEnergyRecoverData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyRecoverData, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyRecoverData, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyRecoverData, adjustbytargetcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyRecoverData, adjustdata_),
  };
  SkillEnergyRecoverData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillEnergyRecoverData_descriptor_,
      SkillEnergyRecoverData::default_instance_,
      SkillEnergyRecoverData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyRecoverData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillEnergyRecoverData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillEnergyRecoverData));
  SkillSubSkillData_descriptor_ = file->message_type(13);
  static const int SkillSubSkillData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, leveltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, levelparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, islistenbreak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, delaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, isfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, isfollowrealtarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, useprobabilisticsubskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, probabilisticparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, probabilisticskills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, levelsubskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, levelprobskill_),
  };
  SkillSubSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillSubSkillData_descriptor_,
      SkillSubSkillData::default_instance_,
      SkillSubSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillSubSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillSubSkillData));
  SkillData_descriptor_ = file->message_type(14);
  static const int SkillData_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, basedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, effectdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, hitdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, movedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, energydrawdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, energyassisdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, lifestealdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, damagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, healdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, summondata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, reborndata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, energyrecoverdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, subskilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, curvadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, grabdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, summonobstacledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, musourecoverdata_),
  };
  SkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillData_descriptor_,
      SkillData::default_instance_,
      SkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSkillData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillEffectData_descriptor_, &SkillEffectData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillHitData_descriptor_, &SkillHitData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillEnergyDrawData_descriptor_, &SkillEnergyDrawData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillEnergyAssistData_descriptor_, &SkillEnergyAssistData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillLifeStealData_descriptor_, &SkillLifeStealData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillSpeicalAdjust_descriptor_, &SkillSpeicalAdjust::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDamageData_descriptor_, &SkillDamageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillHealData_descriptor_, &SkillHealData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillSummonObstacleData_descriptor_, &SkillSummonObstacleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillSummonData_descriptor_, &SkillSummonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillRebornData_descriptor_, &SkillRebornData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillGrabData_descriptor_, &SkillGrabData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillEnergyRecoverData_descriptor_, &SkillEnergyRecoverData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillSubSkillData_descriptor_, &SkillSubSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillData_descriptor_, &SkillData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSkillData_2eproto() {
  delete SkillEffectData::default_instance_;
  delete SkillEffectData_reflection_;
  delete SkillHitData::default_instance_;
  delete SkillHitData_reflection_;
  delete SkillEnergyDrawData::default_instance_;
  delete SkillEnergyDrawData_reflection_;
  delete SkillEnergyAssistData::default_instance_;
  delete SkillEnergyAssistData_reflection_;
  delete SkillLifeStealData::default_instance_;
  delete SkillLifeStealData_reflection_;
  delete SkillSpeicalAdjust::default_instance_;
  delete SkillSpeicalAdjust_reflection_;
  delete SkillDamageData::default_instance_;
  delete SkillDamageData_reflection_;
  delete SkillHealData::default_instance_;
  delete SkillHealData_reflection_;
  delete SkillSummonObstacleData::default_instance_;
  delete SkillSummonObstacleData_reflection_;
  delete SkillSummonData::default_instance_;
  delete SkillSummonData_reflection_;
  delete SkillRebornData::default_instance_;
  delete SkillRebornData_reflection_;
  delete SkillGrabData::default_instance_;
  delete SkillGrabData_reflection_;
  delete SkillEnergyRecoverData::default_instance_;
  delete SkillEnergyRecoverData_reflection_;
  delete SkillSubSkillData::default_instance_;
  delete SkillSubSkillData_reflection_;
  delete SkillData::default_instance_;
  delete SkillData_reflection_;
}

void protobuf_AddDesc_module_2fSkillData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fSkillBaseData_2eproto();
  ::pb::protobuf_AddDesc_module_2fSkillBaseData2_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026module/SkillData.proto\022\002pb\032\032module/Ski"
    "llBaseData.proto\032\033module/SkillBaseData2."
    "proto\"\326\003\n\017SkillEffectData\022\022\n\nEffectType\030"
    "\001 \001(\005\022\022\n\nOriginType\030\002 \001(\005\022\024\n\014EffectParam"
    "1\030\003 \001(\005\022\024\n\014EffectParam2\030\004 \001(\005\022\023\n\013IsBySec"
    "tion\030\005 \001(\010\022\023\n\013EffectDelay\030\006 \001(\005\022\026\n\016Effec"
    "tInterval\030\007 \001(\005\022\023\n\013EffectCount\030\010 \001(\005\022\024\n\014"
    "EffectTarget\030\t \001(\005\022\021\n\tSpeBuffID\030\n \001(\005\022\021\n"
    "\tTargetNum\030\013 \001(\005\022\021\n\tAddBuffID\030\014 \003(\005\022\037\n\027E"
    "ffectTargetIncludeSelf\030\r \001(\010\022\032\n\022RecordEf"
    "fectTarget\030\016 \001(\010\022/\n\016EffectPriority\030\017 \001(\013"
    "2\027.pb.SkillTargetPriority\022\024\n\014EffectParam"
    "3\030\020 \001(\005\022+\n\014LevelSubBuff\030\021 \003(\0132\025.pb.Skill"
    "LevelSubBuff\022\030\n\020LevelRangeGrowth\030\022 \001(\005\"\350"
    "\003\n\014SkillHitData\022\022\n\nHitForSure\030\001 \001(\010\022\024\n\014E"
    "ffectParent\030\003 \001(\005\022\021\n\tHitEffect\030\004 \001(\t\022\020\n\010"
    "HitSound\030\005 \001(\t\022\031\n\021HitEffectPlayType\030\006 \001("
    "\005\022\032\n\022HitEffectPlayParam\030\007 \001(\005\022\027\n\017HitEffe"
    "ctFollow\030\010 \001(\010\022\025\n\rHitEffectFlip\030\t \001(\010\022\027\n"
    "\017RefEffectParent\030\n \001(\005\022\021\n\tRefEffect\030\013 \001("
    "\t\022\020\n\010RefSound\030\014 \001(\t\022\027\n\017RefEffectFollow\030\r"
    " \001(\010\022\025\n\rRefEffectFlip\030\016 \001(\010\022\024\n\014PlayDownA"
    "nim\030\017 \001(\010\022\035\n\025HitEffectRotateRandom\030\020 \001(\010"
    "\022\035\n\025HitEffectRotateRangeX\030\021 \003(\005\022\035\n\025HitEf"
    "fectRotateRangeY\030\022 \003(\005\022(\n\rHitEffectData\030"
    "\023 \003(\0132\021.pb.HitEffectData\022\027\n\017PlayLayerEff"
    "ect\030\024 \001(\010\"\222\001\n\023SkillEnergyDrawData\022\020\n\010Dra"
    "wType\030\001 \001(\005\022\022\n\nDrwaParam1\030\002 \001(\005\022\022\n\nDrawP"
    "aram2\030\003 \001(\005\022\023\n\013RecoverType\030\004 \001(\005\022\025\n\rReco"
    "verParam1\030\005 \001(\005\022\025\n\rRecoverParam2\030\006 \001(\005\"\216"
    "\001\n\025SkillEnergyAssistData\022\022\n\nAssistType\030\001"
    " \001(\005\022\024\n\014AssistParam1\030\002 \001(\005\022\024\n\014AssistPara"
    "m2\030\003 \001(\005\022\017\n\007AddType\030\004 \001(\005\022\021\n\tAddParam1\030\005"
    " \001(\005\022\021\n\tAddParam2\030\006 \001(\005\"\212\001\n\022SkillLifeSte"
    "alData\022\014\n\004Type\030\001 \001(\005\022\016\n\006Param1\030\002 \001(\005\022\016\n\006"
    "Param2\030\003 \001(\005\022\022\n\nUpperLimit\030\004 \001(\010\022\027\n\017Uppe"
    "rLimitParam\030\005 \001(\005\022\031\n\021BuffSubTypeFilter\030\006"
    " \003(\005\"\267\001\n\022SkillSpeicalAdjust\022\016\n\006Enable\030\001 "
    "\001(\010\022\022\n\nEffectType\030\002 \001(\005\022\024\n\014TargetBuffId\030"
    "\003 \001(\005\022\020\n\010BuffType\030\004 \001(\005\022\021\n\tBuffParam\030\005 \003"
    "(\005\022\022\n\nAdjustData\030\006 \003(\005\022\024\n\014AdjustTarget\030\007"
    " \001(\005\022\030\n\020IsUseStateAdjust\030\010 \001(\010\"\250\005\n\017Skill"
    "DamageData\022\022\n\nDamageType\030\001 \001(\005\022\022\n\nTypePa"
    "ram1\030\002 \001(\005\022\022\n\nTypeParam2\030\003 \001(\005\022\022\n\nTypePa"
    "ram3\030\004 \001(\005\022\020\n\010CritType\030\005 \001(\005\022\021\n\tCritPara"
    "m\030\006 \001(\005\022\022\n\nCritParam2\030\007 \001(\005\022\033\n\023ExtraArmo"
    "urPiercing\030\010 \001(\005\022\023\n\013ExtraParam1\030\t \001(\005\022\023\n"
    "\013ExtraParam2\030\n \001(\005\022\025\n\rIsIgnoreBlock\030\016 \001("
    "\010\022\033\n\023AdjustByTargetCount\030\017 \001(\010\022\022\n\nAdjust"
    "Data\030\020 \003(\005\022\022\n\nSkipDamage\030\021 \001(\010\022\022\n\nUpperL"
    "imit\030\022 \001(\010\022\027\n\017UpperLimitParam\030\023 \001(\005\022-\n\rS"
    "pecialAdjust\030\024 \001(\0132\026.pb.SkillSpeicalAdju"
    "st\022\030\n\020IsUseStateAdjust\030\025 \001(\010\022\027\n\017StateAdj"
    "ustType\030\026 \001(\005\022\023\n\013SkillTunnel\030\027 \001(\005\022\022\n\nLo"
    "werLimit\030\030 \001(\010\022\026\n\016LowerLimitType\030\031 \001(\005\022\027"
    "\n\017LowerLimitParam\030\032 \001(\005\022\024\n\014IgnoreShield\030"
    "\033 \001(\010\022\032\n\022IgnoreBeDamageRage\030\034 \001(\010\022\016\n\006Buf"
    "fId\030\035 \001(\005\022\024\n\014HealByEffNum\030\036 \001(\010\022\027\n\017HealC"
    "oefficient\030\037 \001(\005\022\017\n\007BuffId2\030  \001(\005\"\271\003\n\rSk"
    "illHealData\022\020\n\010HealType\030\001 \001(\005\022\022\n\nTypePar"
    "am1\030\002 \001(\005\022\022\n\nTypeParam2\030\003 \001(\005\022\022\n\nTypePar"
    "am3\030\004 \001(\005\022\020\n\010CritType\030\005 \001(\005\022\021\n\tCritParam"
    "\030\006 \001(\005\022\023\n\013ExtraParam1\030\010 \001(\005\022\023\n\013ExtraPara"
    "m2\030\t \001(\005\022\025\n\rIsIgnoreBlock\030\r \001(\010\022\033\n\023Adjus"
    "tByTargetCount\030\016 \001(\010\022\022\n\nAdjustData\030\017 \003(\005"
    "\022\022\n\nUpperLimit\030\020 \001(\010\022\027\n\017UpperLimitParam\030"
    "\021 \001(\005\022-\n\rSpecialAdjust\030\022 \001(\0132\026.pb.SkillS"
    "peicalAdjust\022\022\n\nLowerLimit\030\023 \001(\010\022\026\n\016Lowe"
    "rLimitType\030\024 \001(\005\022\027\n\017LowerLimitParam\030\025 \001("
    "\005\022\016\n\006BuffId\030\026 \001(\005\022\022\n\nCritParam2\030\027 \001(\005\"\264\001"
    "\n\027SkillSummonObstacleData\022\021\n\tShapeType\030\001"
    " \001(\005\022\023\n\013ShapeParam1\030\002 \001(\005\022\023\n\013ShapeParam2"
    "\030\003 \001(\005\022\024\n\014PositionType\030\004 \001(\005\022\020\n\010Distance"
    "\030\005 \001(\005\022\016\n\006BuffId\030\006 \001(\005\022\020\n\010LastTime\030\007 \001(\005"
    "\022\022\n\nTargetType\030\t \001(\005\"\302\004\n\017SkillSummonData"
    "\022\n\n\002ID\030\001 \003(\005\022\013\n\003Num\030\002 \003(\005\022\017\n\007Positon\030\003 \001"
    "(\005\022\021\n\tFormation\030\004 \001(\005\022\023\n\013MinDistance\030\005 \001"
    "(\005\022\022\n\nBornEffect\030\006 \001(\t\022\021\n\tBornSound\030\007 \001("
    "\t\022\021\n\tLevelType\030\010 \001(\005\022\022\n\nLevelParam\030\t \001(\005"
    "\022\024\n\014LastTimeType\030\n \001(\005\022\025\n\rLastTimeParam\030"
    "\013 \001(\005\022\025\n\rCanOverScreen\030\014 \001(\010\022\025\n\rMaxSameI"
    "DUnit\030\r \001(\005\022\030\n\020DeleteSameIDUnit\030\016 \001(\010\022\021\n"
    "\tAddBuffID\030\017 \003(\005\022\030\n\020InheritAttribute\030\020 \001"
    "(\010\022\031\n\021InheritPercentage\030\021 \001(\005\022\037\n\027UseRefT"
    "argetAsBlueprint\030\022 \001(\010\022%\n\035InheritAttribu"
    "teFromRefTarget\030\023 \001(\010\022$\n\034InheritAttribut"
    "eFromAncestor\030\024 \001(\010\022\030\n\020VerticalPosition\030"
    "\025 \001(\005\022\031\n\021IsNoKillRageBonus\030\026 \001(\010\022\031\n\021Posi"
    "tionVectorArr\030\027 \003(\005\022\024\n\014UseFixedRate\030\030 \001("
    "\010\"\206\002\n\017SkillRebornData\022\020\n\010LifeType\030\001 \001(\005\022"
    "\022\n\nLifeParam1\030\002 \001(\005\022\022\n\nLifeParam2\030\003 \001(\005\022"
    "\017\n\007Positon\030\004 \001(\005\022\021\n\tFormation\030\005 \001(\005\022\023\n\013M"
    "inDistance\030\006 \001(\005\022\022\n\nBornEffect\030\007 \001(\t\022\021\n\t"
    "BornSound\030\010 \001(\t\022\024\n\014LastTimeType\030\t \001(\005\022\025\n"
    "\rLastTimeParam\030\n \001(\005\022\025\n\rCanOverScreen\030\013 "
    "\001(\010\022\025\n\rResetCooldown\030\r \001(\010\"\252\001\n\rSkillGrab"
    "Data\022\026\n\016SelfGrabSocket\030\001 \001(\t\022\020\n\010LastTime"
    "\030\003 \001(\005\022\026\n\016CanBeRefTarget\030\004 \001(\010\022\031\n\021CanBeE"
    "ffectTarget\030\005 \001(\010\022\022\n\nAnimOnPlay\030\006 \001(\t\022\022\n"
    "\nDamageTime\030\007 \001(\005\022\024\n\014OffsetOfSlot\030\010 \003(\005\""
    "i\n\026SkillEnergyRecoverData\022\016\n\006Param1\030\001 \001("
    "\005\022\016\n\006Param2\030\002 \001(\005\022\033\n\023AdjustByTargetCount"
    "\030\003 \001(\010\022\022\n\nAdjustData\030\004 \003(\005\"\332\002\n\021SkillSubS"
    "killData\022\n\n\002ID\030\001 \003(\005\022\021\n\tLevelType\030\003 \001(\005\022"
    "\022\n\nLevelParam\030\004 \001(\005\022\025\n\rIsListenBreak\030\005 \001"
    "(\010\022\021\n\tDelayTime\030\006 \001(\005\022\020\n\010IsFollow\030\007 \001(\010\022"
    "\032\n\022IsFollowRealTarget\030\010 \001(\010\022 \n\030UseProbab"
    "ilisticSubSkill\030\t \001(\010\022\033\n\023ProbabilisticPa"
    "rams\030\n \003(\005\022\033\n\023ProbabilisticSkills\030\013 \003(\005\022"
    "-\n\rLevelSubSkill\030\014 \003(\0132\026.pb.SkillLevelSu"
    "bSkill\022/\n\016LevelProbSkill\030\r \003(\0132\027.pb.Skil"
    "lLevelProbSkill\"\200\006\n\tSkillData\022\n\n\002ID\030\001 \001("
    "\005\022#\n\010BaseData\030\002 \001(\0132\021.pb.SkillBaseData\022\'"
    "\n\nEffectData\030\003 \001(\0132\023.pb.SkillEffectData\022"
    "!\n\007HitData\030\004 \001(\0132\020.pb.SkillHitData\022#\n\010Mo"
    "veData\030\005 \001(\0132\021.pb.SkillMoveData\022/\n\016Energ"
    "yDrawData\030\006 \001(\0132\027.pb.SkillEnergyDrawData"
    "\0222\n\017EnergyAssisData\030\007 \001(\0132\031.pb.SkillEner"
    "gyAssistData\022-\n\rLifeStealData\030\010 \001(\0132\026.pb"
    ".SkillLifeStealData\022\'\n\nDamageData\030\t \001(\0132"
    "\023.pb.SkillDamageData\022#\n\010HealData\030\n \001(\0132\021"
    ".pb.SkillHealData\022\'\n\nSummonData\030\013 \001(\0132\023."
    "pb.SkillSummonData\022\'\n\nRebornData\030\014 \001(\0132\023"
    ".pb.SkillRebornData\0225\n\021EnergyRecoverData"
    "\030\r \001(\0132\032.pb.SkillEnergyRecoverData\022+\n\014Su"
    "bSkillData\030\016 \001(\0132\025.pb.SkillSubSkillData\022"
    "%\n\tCurvaData\030\017 \001(\0132\022.pb.SkillCurveData\022#"
    "\n\010GrabData\030\020 \001(\0132\021.pb.SkillGrabData\0227\n\022S"
    "ummonObstacleData\030\021 \001(\0132\033.pb.SkillSummon"
    "ObstacleData\0224\n\020MusouRecoverData\030\022 \001(\0132\032"
    ".pb.SkillEnergyRecoverData", 5226);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SkillData.proto", &protobuf_RegisterTypes);
  SkillEffectData::default_instance_ = new SkillEffectData();
  SkillHitData::default_instance_ = new SkillHitData();
  SkillEnergyDrawData::default_instance_ = new SkillEnergyDrawData();
  SkillEnergyAssistData::default_instance_ = new SkillEnergyAssistData();
  SkillLifeStealData::default_instance_ = new SkillLifeStealData();
  SkillSpeicalAdjust::default_instance_ = new SkillSpeicalAdjust();
  SkillDamageData::default_instance_ = new SkillDamageData();
  SkillHealData::default_instance_ = new SkillHealData();
  SkillSummonObstacleData::default_instance_ = new SkillSummonObstacleData();
  SkillSummonData::default_instance_ = new SkillSummonData();
  SkillRebornData::default_instance_ = new SkillRebornData();
  SkillGrabData::default_instance_ = new SkillGrabData();
  SkillEnergyRecoverData::default_instance_ = new SkillEnergyRecoverData();
  SkillSubSkillData::default_instance_ = new SkillSubSkillData();
  SkillData::default_instance_ = new SkillData();
  SkillEffectData::default_instance_->InitAsDefaultInstance();
  SkillHitData::default_instance_->InitAsDefaultInstance();
  SkillEnergyDrawData::default_instance_->InitAsDefaultInstance();
  SkillEnergyAssistData::default_instance_->InitAsDefaultInstance();
  SkillLifeStealData::default_instance_->InitAsDefaultInstance();
  SkillSpeicalAdjust::default_instance_->InitAsDefaultInstance();
  SkillDamageData::default_instance_->InitAsDefaultInstance();
  SkillHealData::default_instance_->InitAsDefaultInstance();
  SkillSummonObstacleData::default_instance_->InitAsDefaultInstance();
  SkillSummonData::default_instance_->InitAsDefaultInstance();
  SkillRebornData::default_instance_->InitAsDefaultInstance();
  SkillGrabData::default_instance_->InitAsDefaultInstance();
  SkillEnergyRecoverData::default_instance_->InitAsDefaultInstance();
  SkillSubSkillData::default_instance_->InitAsDefaultInstance();
  SkillData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSkillData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSkillData_2eproto {
  StaticDescriptorInitializer_module_2fSkillData_2eproto() {
    protobuf_AddDesc_module_2fSkillData_2eproto();
  }
} static_descriptor_initializer_module_2fSkillData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SkillEffectData::kEffectTypeFieldNumber;
const int SkillEffectData::kOriginTypeFieldNumber;
const int SkillEffectData::kEffectParam1FieldNumber;
const int SkillEffectData::kEffectParam2FieldNumber;
const int SkillEffectData::kIsBySectionFieldNumber;
const int SkillEffectData::kEffectDelayFieldNumber;
const int SkillEffectData::kEffectIntervalFieldNumber;
const int SkillEffectData::kEffectCountFieldNumber;
const int SkillEffectData::kEffectTargetFieldNumber;
const int SkillEffectData::kSpeBuffIDFieldNumber;
const int SkillEffectData::kTargetNumFieldNumber;
const int SkillEffectData::kAddBuffIDFieldNumber;
const int SkillEffectData::kEffectTargetIncludeSelfFieldNumber;
const int SkillEffectData::kRecordEffectTargetFieldNumber;
const int SkillEffectData::kEffectPriorityFieldNumber;
const int SkillEffectData::kEffectParam3FieldNumber;
const int SkillEffectData::kLevelSubBuffFieldNumber;
const int SkillEffectData::kLevelRangeGrowthFieldNumber;
#endif  // !_MSC_VER

SkillEffectData::SkillEffectData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillEffectData)
}

void SkillEffectData::InitAsDefaultInstance() {
  effectpriority_ = const_cast< ::pb::SkillTargetPriority*>(&::pb::SkillTargetPriority::default_instance());
}

SkillEffectData::SkillEffectData(const SkillEffectData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillEffectData)
}

void SkillEffectData::SharedCtor() {
  _cached_size_ = 0;
  effecttype_ = 0;
  origintype_ = 0;
  effectparam1_ = 0;
  effectparam2_ = 0;
  isbysection_ = false;
  effectdelay_ = 0;
  effectinterval_ = 0;
  effectcount_ = 0;
  effecttarget_ = 0;
  spebuffid_ = 0;
  targetnum_ = 0;
  effecttargetincludeself_ = false;
  recordeffecttarget_ = false;
  effectpriority_ = NULL;
  effectparam3_ = 0;
  levelrangegrowth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillEffectData::~SkillEffectData() {
  // @@protoc_insertion_point(destructor:pb.SkillEffectData)
  SharedDtor();
}

void SkillEffectData::SharedDtor() {
  if (this != default_instance_) {
    delete effectpriority_;
  }
}

void SkillEffectData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillEffectData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillEffectData_descriptor_;
}

const SkillEffectData& SkillEffectData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillEffectData* SkillEffectData::default_instance_ = NULL;

SkillEffectData* SkillEffectData::New() const {
  return new SkillEffectData;
}

void SkillEffectData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillEffectData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(effecttype_, effectcount_);
    isbysection_ = false;
  }
  if (_has_bits_[8 / 32] & 63232) {
    ZR_(effecttarget_, spebuffid_);
    ZR_(effecttargetincludeself_, recordeffecttarget_);
    ZR_(targetnum_, effectparam3_);
    if (has_effectpriority()) {
      if (effectpriority_ != NULL) effectpriority_->::pb::SkillTargetPriority::Clear();
    }
  }
  levelrangegrowth_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  addbuffid_.Clear();
  levelsubbuff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillEffectData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillEffectData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 EffectType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effecttype_)));
          set_has_effecttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OriginType;
        break;
      }

      // optional int32 OriginType = 2;
      case 2: {
        if (tag == 16) {
         parse_OriginType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &origintype_)));
          set_has_origintype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EffectParam1;
        break;
      }

      // optional int32 EffectParam1 = 3;
      case 3: {
        if (tag == 24) {
         parse_EffectParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectparam1_)));
          set_has_effectparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_EffectParam2;
        break;
      }

      // optional int32 EffectParam2 = 4;
      case 4: {
        if (tag == 32) {
         parse_EffectParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectparam2_)));
          set_has_effectparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsBySection;
        break;
      }

      // optional bool IsBySection = 5;
      case 5: {
        if (tag == 40) {
         parse_IsBySection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbysection_)));
          set_has_isbysection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_EffectDelay;
        break;
      }

      // optional int32 EffectDelay = 6;
      case 6: {
        if (tag == 48) {
         parse_EffectDelay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectdelay_)));
          set_has_effectdelay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_EffectInterval;
        break;
      }

      // optional int32 EffectInterval = 7;
      case 7: {
        if (tag == 56) {
         parse_EffectInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectinterval_)));
          set_has_effectinterval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_EffectCount;
        break;
      }

      // optional int32 EffectCount = 8;
      case 8: {
        if (tag == 64) {
         parse_EffectCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectcount_)));
          set_has_effectcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_EffectTarget;
        break;
      }

      // optional int32 EffectTarget = 9;
      case 9: {
        if (tag == 72) {
         parse_EffectTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effecttarget_)));
          set_has_effecttarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_SpeBuffID;
        break;
      }

      // optional int32 SpeBuffID = 10;
      case 10: {
        if (tag == 80) {
         parse_SpeBuffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spebuffid_)));
          set_has_spebuffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_TargetNum;
        break;
      }

      // optional int32 TargetNum = 11;
      case 11: {
        if (tag == 88) {
         parse_TargetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetnum_)));
          set_has_targetnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_AddBuffID;
        break;
      }

      // repeated int32 AddBuffID = 12;
      case 12: {
        if (tag == 96) {
         parse_AddBuffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_addbuffid())));
        } else if (tag == 98) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_addbuffid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_AddBuffID;
        if (input->ExpectTag(104)) goto parse_EffectTargetIncludeSelf;
        break;
      }

      // optional bool EffectTargetIncludeSelf = 13;
      case 13: {
        if (tag == 104) {
         parse_EffectTargetIncludeSelf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &effecttargetincludeself_)));
          set_has_effecttargetincludeself();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_RecordEffectTarget;
        break;
      }

      // optional bool RecordEffectTarget = 14;
      case 14: {
        if (tag == 112) {
         parse_RecordEffectTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recordeffecttarget_)));
          set_has_recordeffecttarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_EffectPriority;
        break;
      }

      // optional .pb.SkillTargetPriority EffectPriority = 15;
      case 15: {
        if (tag == 122) {
         parse_EffectPriority:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effectpriority()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_EffectParam3;
        break;
      }

      // optional int32 EffectParam3 = 16;
      case 16: {
        if (tag == 128) {
         parse_EffectParam3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectparam3_)));
          set_has_effectparam3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_LevelSubBuff;
        break;
      }

      // repeated .pb.SkillLevelSubBuff LevelSubBuff = 17;
      case 17: {
        if (tag == 138) {
         parse_LevelSubBuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelsubbuff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_LevelSubBuff;
        if (input->ExpectTag(144)) goto parse_LevelRangeGrowth;
        break;
      }

      // optional int32 LevelRangeGrowth = 18;
      case 18: {
        if (tag == 144) {
         parse_LevelRangeGrowth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelrangegrowth_)));
          set_has_levelrangegrowth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillEffectData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillEffectData)
  return false;
#undef DO_
}

void SkillEffectData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillEffectData)
  // optional int32 EffectType = 1;
  if (has_effecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->effecttype(), output);
  }

  // optional int32 OriginType = 2;
  if (has_origintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->origintype(), output);
  }

  // optional int32 EffectParam1 = 3;
  if (has_effectparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->effectparam1(), output);
  }

  // optional int32 EffectParam2 = 4;
  if (has_effectparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->effectparam2(), output);
  }

  // optional bool IsBySection = 5;
  if (has_isbysection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isbysection(), output);
  }

  // optional int32 EffectDelay = 6;
  if (has_effectdelay()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->effectdelay(), output);
  }

  // optional int32 EffectInterval = 7;
  if (has_effectinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->effectinterval(), output);
  }

  // optional int32 EffectCount = 8;
  if (has_effectcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->effectcount(), output);
  }

  // optional int32 EffectTarget = 9;
  if (has_effecttarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->effecttarget(), output);
  }

  // optional int32 SpeBuffID = 10;
  if (has_spebuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->spebuffid(), output);
  }

  // optional int32 TargetNum = 11;
  if (has_targetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->targetnum(), output);
  }

  // repeated int32 AddBuffID = 12;
  for (int i = 0; i < this->addbuffid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->addbuffid(i), output);
  }

  // optional bool EffectTargetIncludeSelf = 13;
  if (has_effecttargetincludeself()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->effecttargetincludeself(), output);
  }

  // optional bool RecordEffectTarget = 14;
  if (has_recordeffecttarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->recordeffecttarget(), output);
  }

  // optional .pb.SkillTargetPriority EffectPriority = 15;
  if (has_effectpriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->effectpriority(), output);
  }

  // optional int32 EffectParam3 = 16;
  if (has_effectparam3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->effectparam3(), output);
  }

  // repeated .pb.SkillLevelSubBuff LevelSubBuff = 17;
  for (int i = 0; i < this->levelsubbuff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->levelsubbuff(i), output);
  }

  // optional int32 LevelRangeGrowth = 18;
  if (has_levelrangegrowth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->levelrangegrowth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillEffectData)
}

::google::protobuf::uint8* SkillEffectData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillEffectData)
  // optional int32 EffectType = 1;
  if (has_effecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->effecttype(), target);
  }

  // optional int32 OriginType = 2;
  if (has_origintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->origintype(), target);
  }

  // optional int32 EffectParam1 = 3;
  if (has_effectparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->effectparam1(), target);
  }

  // optional int32 EffectParam2 = 4;
  if (has_effectparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->effectparam2(), target);
  }

  // optional bool IsBySection = 5;
  if (has_isbysection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isbysection(), target);
  }

  // optional int32 EffectDelay = 6;
  if (has_effectdelay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->effectdelay(), target);
  }

  // optional int32 EffectInterval = 7;
  if (has_effectinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->effectinterval(), target);
  }

  // optional int32 EffectCount = 8;
  if (has_effectcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->effectcount(), target);
  }

  // optional int32 EffectTarget = 9;
  if (has_effecttarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->effecttarget(), target);
  }

  // optional int32 SpeBuffID = 10;
  if (has_spebuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->spebuffid(), target);
  }

  // optional int32 TargetNum = 11;
  if (has_targetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->targetnum(), target);
  }

  // repeated int32 AddBuffID = 12;
  for (int i = 0; i < this->addbuffid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->addbuffid(i), target);
  }

  // optional bool EffectTargetIncludeSelf = 13;
  if (has_effecttargetincludeself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->effecttargetincludeself(), target);
  }

  // optional bool RecordEffectTarget = 14;
  if (has_recordeffecttarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->recordeffecttarget(), target);
  }

  // optional .pb.SkillTargetPriority EffectPriority = 15;
  if (has_effectpriority()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->effectpriority(), target);
  }

  // optional int32 EffectParam3 = 16;
  if (has_effectparam3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->effectparam3(), target);
  }

  // repeated .pb.SkillLevelSubBuff LevelSubBuff = 17;
  for (int i = 0; i < this->levelsubbuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->levelsubbuff(i), target);
  }

  // optional int32 LevelRangeGrowth = 18;
  if (has_levelrangegrowth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->levelrangegrowth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillEffectData)
  return target;
}

int SkillEffectData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 EffectType = 1;
    if (has_effecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effecttype());
    }

    // optional int32 OriginType = 2;
    if (has_origintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->origintype());
    }

    // optional int32 EffectParam1 = 3;
    if (has_effectparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectparam1());
    }

    // optional int32 EffectParam2 = 4;
    if (has_effectparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectparam2());
    }

    // optional bool IsBySection = 5;
    if (has_isbysection()) {
      total_size += 1 + 1;
    }

    // optional int32 EffectDelay = 6;
    if (has_effectdelay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectdelay());
    }

    // optional int32 EffectInterval = 7;
    if (has_effectinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectinterval());
    }

    // optional int32 EffectCount = 8;
    if (has_effectcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 EffectTarget = 9;
    if (has_effecttarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effecttarget());
    }

    // optional int32 SpeBuffID = 10;
    if (has_spebuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spebuffid());
    }

    // optional int32 TargetNum = 11;
    if (has_targetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetnum());
    }

    // optional bool EffectTargetIncludeSelf = 13;
    if (has_effecttargetincludeself()) {
      total_size += 1 + 1;
    }

    // optional bool RecordEffectTarget = 14;
    if (has_recordeffecttarget()) {
      total_size += 1 + 1;
    }

    // optional .pb.SkillTargetPriority EffectPriority = 15;
    if (has_effectpriority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effectpriority());
    }

    // optional int32 EffectParam3 = 16;
    if (has_effectparam3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectparam3());
    }

  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional int32 LevelRangeGrowth = 18;
    if (has_levelrangegrowth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelrangegrowth());
    }

  }
  // repeated int32 AddBuffID = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->addbuffid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->addbuffid(i));
    }
    total_size += 1 * this->addbuffid_size() + data_size;
  }

  // repeated .pb.SkillLevelSubBuff LevelSubBuff = 17;
  total_size += 2 * this->levelsubbuff_size();
  for (int i = 0; i < this->levelsubbuff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelsubbuff(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillEffectData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillEffectData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillEffectData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillEffectData::MergeFrom(const SkillEffectData& from) {
  GOOGLE_CHECK_NE(&from, this);
  addbuffid_.MergeFrom(from.addbuffid_);
  levelsubbuff_.MergeFrom(from.levelsubbuff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_effecttype()) {
      set_effecttype(from.effecttype());
    }
    if (from.has_origintype()) {
      set_origintype(from.origintype());
    }
    if (from.has_effectparam1()) {
      set_effectparam1(from.effectparam1());
    }
    if (from.has_effectparam2()) {
      set_effectparam2(from.effectparam2());
    }
    if (from.has_isbysection()) {
      set_isbysection(from.isbysection());
    }
    if (from.has_effectdelay()) {
      set_effectdelay(from.effectdelay());
    }
    if (from.has_effectinterval()) {
      set_effectinterval(from.effectinterval());
    }
    if (from.has_effectcount()) {
      set_effectcount(from.effectcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_effecttarget()) {
      set_effecttarget(from.effecttarget());
    }
    if (from.has_spebuffid()) {
      set_spebuffid(from.spebuffid());
    }
    if (from.has_targetnum()) {
      set_targetnum(from.targetnum());
    }
    if (from.has_effecttargetincludeself()) {
      set_effecttargetincludeself(from.effecttargetincludeself());
    }
    if (from.has_recordeffecttarget()) {
      set_recordeffecttarget(from.recordeffecttarget());
    }
    if (from.has_effectpriority()) {
      mutable_effectpriority()->::pb::SkillTargetPriority::MergeFrom(from.effectpriority());
    }
    if (from.has_effectparam3()) {
      set_effectparam3(from.effectparam3());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_levelrangegrowth()) {
      set_levelrangegrowth(from.levelrangegrowth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillEffectData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillEffectData::CopyFrom(const SkillEffectData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillEffectData::IsInitialized() const {

  return true;
}

void SkillEffectData::Swap(SkillEffectData* other) {
  if (other != this) {
    std::swap(effecttype_, other->effecttype_);
    std::swap(origintype_, other->origintype_);
    std::swap(effectparam1_, other->effectparam1_);
    std::swap(effectparam2_, other->effectparam2_);
    std::swap(isbysection_, other->isbysection_);
    std::swap(effectdelay_, other->effectdelay_);
    std::swap(effectinterval_, other->effectinterval_);
    std::swap(effectcount_, other->effectcount_);
    std::swap(effecttarget_, other->effecttarget_);
    std::swap(spebuffid_, other->spebuffid_);
    std::swap(targetnum_, other->targetnum_);
    addbuffid_.Swap(&other->addbuffid_);
    std::swap(effecttargetincludeself_, other->effecttargetincludeself_);
    std::swap(recordeffecttarget_, other->recordeffecttarget_);
    std::swap(effectpriority_, other->effectpriority_);
    std::swap(effectparam3_, other->effectparam3_);
    levelsubbuff_.Swap(&other->levelsubbuff_);
    std::swap(levelrangegrowth_, other->levelrangegrowth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillEffectData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillEffectData_descriptor_;
  metadata.reflection = SkillEffectData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillHitData::kHitForSureFieldNumber;
const int SkillHitData::kEffectParentFieldNumber;
const int SkillHitData::kHitEffectFieldNumber;
const int SkillHitData::kHitSoundFieldNumber;
const int SkillHitData::kHitEffectPlayTypeFieldNumber;
const int SkillHitData::kHitEffectPlayParamFieldNumber;
const int SkillHitData::kHitEffectFollowFieldNumber;
const int SkillHitData::kHitEffectFlipFieldNumber;
const int SkillHitData::kRefEffectParentFieldNumber;
const int SkillHitData::kRefEffectFieldNumber;
const int SkillHitData::kRefSoundFieldNumber;
const int SkillHitData::kRefEffectFollowFieldNumber;
const int SkillHitData::kRefEffectFlipFieldNumber;
const int SkillHitData::kPlayDownAnimFieldNumber;
const int SkillHitData::kHitEffectRotateRandomFieldNumber;
const int SkillHitData::kHitEffectRotateRangeXFieldNumber;
const int SkillHitData::kHitEffectRotateRangeYFieldNumber;
const int SkillHitData::kHitEffectDataFieldNumber;
const int SkillHitData::kPlayLayerEffectFieldNumber;
#endif  // !_MSC_VER

SkillHitData::SkillHitData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillHitData)
}

void SkillHitData::InitAsDefaultInstance() {
}

SkillHitData::SkillHitData(const SkillHitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillHitData)
}

void SkillHitData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  hitforsure_ = false;
  effectparent_ = 0;
  hiteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hitsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hiteffectplaytype_ = 0;
  hiteffectplayparam_ = 0;
  hiteffectfollow_ = false;
  hiteffectflip_ = false;
  refeffectparent_ = 0;
  refeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  refeffectfollow_ = false;
  refeffectflip_ = false;
  playdownanim_ = false;
  hiteffectrotaterandom_ = false;
  playlayereffect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillHitData::~SkillHitData() {
  // @@protoc_insertion_point(destructor:pb.SkillHitData)
  SharedDtor();
}

void SkillHitData::SharedDtor() {
  if (hiteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hiteffect_;
  }
  if (hitsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete hitsound_;
  }
  if (refeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete refeffect_;
  }
  if (refsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete refsound_;
  }
  if (this != default_instance_) {
  }
}

void SkillHitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillHitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillHitData_descriptor_;
}

const SkillHitData& SkillHitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillHitData* SkillHitData::default_instance_ = NULL;

SkillHitData* SkillHitData::New() const {
  return new SkillHitData;
}

void SkillHitData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillHitData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(effectparent_, hiteffectplaytype_);
    ZR_(hiteffectplayparam_, hiteffectflip_);
    if (has_hiteffect()) {
      if (hiteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hiteffect_->clear();
      }
    }
    if (has_hitsound()) {
      if (hitsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        hitsound_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(refeffectparent_, hiteffectrotaterandom_);
    if (has_refeffect()) {
      if (refeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        refeffect_->clear();
      }
    }
    if (has_refsound()) {
      if (refsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        refsound_->clear();
      }
    }
    refeffectfollow_ = false;
  }
  playlayereffect_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  hiteffectrotaterangex_.Clear();
  hiteffectrotaterangey_.Clear();
  hiteffectdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillHitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillHitData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool HitForSure = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hitforsure_)));
          set_has_hitforsure();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EffectParent;
        break;
      }

      // optional int32 EffectParent = 3;
      case 3: {
        if (tag == 24) {
         parse_EffectParent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effectparent_)));
          set_has_effectparent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_HitEffect;
        break;
      }

      // optional string HitEffect = 4;
      case 4: {
        if (tag == 34) {
         parse_HitEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hiteffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hiteffect().data(), this->hiteffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hiteffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_HitSound;
        break;
      }

      // optional string HitSound = 5;
      case 5: {
        if (tag == 42) {
         parse_HitSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hitsound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hitsound().data(), this->hitsound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hitsound");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_HitEffectPlayType;
        break;
      }

      // optional int32 HitEffectPlayType = 6;
      case 6: {
        if (tag == 48) {
         parse_HitEffectPlayType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hiteffectplaytype_)));
          set_has_hiteffectplaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_HitEffectPlayParam;
        break;
      }

      // optional int32 HitEffectPlayParam = 7;
      case 7: {
        if (tag == 56) {
         parse_HitEffectPlayParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hiteffectplayparam_)));
          set_has_hiteffectplayparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_HitEffectFollow;
        break;
      }

      // optional bool HitEffectFollow = 8;
      case 8: {
        if (tag == 64) {
         parse_HitEffectFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hiteffectfollow_)));
          set_has_hiteffectfollow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_HitEffectFlip;
        break;
      }

      // optional bool HitEffectFlip = 9;
      case 9: {
        if (tag == 72) {
         parse_HitEffectFlip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hiteffectflip_)));
          set_has_hiteffectflip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_RefEffectParent;
        break;
      }

      // optional int32 RefEffectParent = 10;
      case 10: {
        if (tag == 80) {
         parse_RefEffectParent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refeffectparent_)));
          set_has_refeffectparent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_RefEffect;
        break;
      }

      // optional string RefEffect = 11;
      case 11: {
        if (tag == 90) {
         parse_RefEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refeffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->refeffect().data(), this->refeffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "refeffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_RefSound;
        break;
      }

      // optional string RefSound = 12;
      case 12: {
        if (tag == 98) {
         parse_RefSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refsound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->refsound().data(), this->refsound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "refsound");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_RefEffectFollow;
        break;
      }

      // optional bool RefEffectFollow = 13;
      case 13: {
        if (tag == 104) {
         parse_RefEffectFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refeffectfollow_)));
          set_has_refeffectfollow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_RefEffectFlip;
        break;
      }

      // optional bool RefEffectFlip = 14;
      case 14: {
        if (tag == 112) {
         parse_RefEffectFlip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &refeffectflip_)));
          set_has_refeffectflip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_PlayDownAnim;
        break;
      }

      // optional bool PlayDownAnim = 15;
      case 15: {
        if (tag == 120) {
         parse_PlayDownAnim:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playdownanim_)));
          set_has_playdownanim();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_HitEffectRotateRandom;
        break;
      }

      // optional bool HitEffectRotateRandom = 16;
      case 16: {
        if (tag == 128) {
         parse_HitEffectRotateRandom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hiteffectrotaterandom_)));
          set_has_hiteffectrotaterandom();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_HitEffectRotateRangeX;
        break;
      }

      // repeated int32 HitEffectRotateRangeX = 17;
      case 17: {
        if (tag == 136) {
         parse_HitEffectRotateRangeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_hiteffectrotaterangex())));
        } else if (tag == 138) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hiteffectrotaterangex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_HitEffectRotateRangeX;
        if (input->ExpectTag(144)) goto parse_HitEffectRotateRangeY;
        break;
      }

      // repeated int32 HitEffectRotateRangeY = 18;
      case 18: {
        if (tag == 144) {
         parse_HitEffectRotateRangeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_hiteffectrotaterangey())));
        } else if (tag == 146) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hiteffectrotaterangey())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_HitEffectRotateRangeY;
        if (input->ExpectTag(154)) goto parse_HitEffectData;
        break;
      }

      // repeated .pb.HitEffectData HitEffectData = 19;
      case 19: {
        if (tag == 154) {
         parse_HitEffectData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hiteffectdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_HitEffectData;
        if (input->ExpectTag(160)) goto parse_PlayLayerEffect;
        break;
      }

      // optional bool PlayLayerEffect = 20;
      case 20: {
        if (tag == 160) {
         parse_PlayLayerEffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &playlayereffect_)));
          set_has_playlayereffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillHitData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillHitData)
  return false;
#undef DO_
}

void SkillHitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillHitData)
  // optional bool HitForSure = 1;
  if (has_hitforsure()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hitforsure(), output);
  }

  // optional int32 EffectParent = 3;
  if (has_effectparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->effectparent(), output);
  }

  // optional string HitEffect = 4;
  if (has_hiteffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hiteffect().data(), this->hiteffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hiteffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->hiteffect(), output);
  }

  // optional string HitSound = 5;
  if (has_hitsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hitsound().data(), this->hitsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hitsound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->hitsound(), output);
  }

  // optional int32 HitEffectPlayType = 6;
  if (has_hiteffectplaytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hiteffectplaytype(), output);
  }

  // optional int32 HitEffectPlayParam = 7;
  if (has_hiteffectplayparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hiteffectplayparam(), output);
  }

  // optional bool HitEffectFollow = 8;
  if (has_hiteffectfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hiteffectfollow(), output);
  }

  // optional bool HitEffectFlip = 9;
  if (has_hiteffectflip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->hiteffectflip(), output);
  }

  // optional int32 RefEffectParent = 10;
  if (has_refeffectparent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->refeffectparent(), output);
  }

  // optional string RefEffect = 11;
  if (has_refeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refeffect().data(), this->refeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "refeffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->refeffect(), output);
  }

  // optional string RefSound = 12;
  if (has_refsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refsound().data(), this->refsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "refsound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->refsound(), output);
  }

  // optional bool RefEffectFollow = 13;
  if (has_refeffectfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->refeffectfollow(), output);
  }

  // optional bool RefEffectFlip = 14;
  if (has_refeffectflip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->refeffectflip(), output);
  }

  // optional bool PlayDownAnim = 15;
  if (has_playdownanim()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->playdownanim(), output);
  }

  // optional bool HitEffectRotateRandom = 16;
  if (has_hiteffectrotaterandom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->hiteffectrotaterandom(), output);
  }

  // repeated int32 HitEffectRotateRangeX = 17;
  for (int i = 0; i < this->hiteffectrotaterangex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->hiteffectrotaterangex(i), output);
  }

  // repeated int32 HitEffectRotateRangeY = 18;
  for (int i = 0; i < this->hiteffectrotaterangey_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->hiteffectrotaterangey(i), output);
  }

  // repeated .pb.HitEffectData HitEffectData = 19;
  for (int i = 0; i < this->hiteffectdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->hiteffectdata(i), output);
  }

  // optional bool PlayLayerEffect = 20;
  if (has_playlayereffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->playlayereffect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillHitData)
}

::google::protobuf::uint8* SkillHitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillHitData)
  // optional bool HitForSure = 1;
  if (has_hitforsure()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hitforsure(), target);
  }

  // optional int32 EffectParent = 3;
  if (has_effectparent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->effectparent(), target);
  }

  // optional string HitEffect = 4;
  if (has_hiteffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hiteffect().data(), this->hiteffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hiteffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->hiteffect(), target);
  }

  // optional string HitSound = 5;
  if (has_hitsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hitsound().data(), this->hitsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hitsound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->hitsound(), target);
  }

  // optional int32 HitEffectPlayType = 6;
  if (has_hiteffectplaytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hiteffectplaytype(), target);
  }

  // optional int32 HitEffectPlayParam = 7;
  if (has_hiteffectplayparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hiteffectplayparam(), target);
  }

  // optional bool HitEffectFollow = 8;
  if (has_hiteffectfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hiteffectfollow(), target);
  }

  // optional bool HitEffectFlip = 9;
  if (has_hiteffectflip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->hiteffectflip(), target);
  }

  // optional int32 RefEffectParent = 10;
  if (has_refeffectparent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->refeffectparent(), target);
  }

  // optional string RefEffect = 11;
  if (has_refeffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refeffect().data(), this->refeffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "refeffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->refeffect(), target);
  }

  // optional string RefSound = 12;
  if (has_refsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->refsound().data(), this->refsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "refsound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->refsound(), target);
  }

  // optional bool RefEffectFollow = 13;
  if (has_refeffectfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->refeffectfollow(), target);
  }

  // optional bool RefEffectFlip = 14;
  if (has_refeffectflip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->refeffectflip(), target);
  }

  // optional bool PlayDownAnim = 15;
  if (has_playdownanim()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->playdownanim(), target);
  }

  // optional bool HitEffectRotateRandom = 16;
  if (has_hiteffectrotaterandom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->hiteffectrotaterandom(), target);
  }

  // repeated int32 HitEffectRotateRangeX = 17;
  for (int i = 0; i < this->hiteffectrotaterangex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->hiteffectrotaterangex(i), target);
  }

  // repeated int32 HitEffectRotateRangeY = 18;
  for (int i = 0; i < this->hiteffectrotaterangey_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->hiteffectrotaterangey(i), target);
  }

  // repeated .pb.HitEffectData HitEffectData = 19;
  for (int i = 0; i < this->hiteffectdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->hiteffectdata(i), target);
  }

  // optional bool PlayLayerEffect = 20;
  if (has_playlayereffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->playlayereffect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillHitData)
  return target;
}

int SkillHitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool HitForSure = 1;
    if (has_hitforsure()) {
      total_size += 1 + 1;
    }

    // optional int32 EffectParent = 3;
    if (has_effectparent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effectparent());
    }

    // optional string HitEffect = 4;
    if (has_hiteffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hiteffect());
    }

    // optional string HitSound = 5;
    if (has_hitsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hitsound());
    }

    // optional int32 HitEffectPlayType = 6;
    if (has_hiteffectplaytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hiteffectplaytype());
    }

    // optional int32 HitEffectPlayParam = 7;
    if (has_hiteffectplayparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hiteffectplayparam());
    }

    // optional bool HitEffectFollow = 8;
    if (has_hiteffectfollow()) {
      total_size += 1 + 1;
    }

    // optional bool HitEffectFlip = 9;
    if (has_hiteffectflip()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 RefEffectParent = 10;
    if (has_refeffectparent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refeffectparent());
    }

    // optional string RefEffect = 11;
    if (has_refeffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refeffect());
    }

    // optional string RefSound = 12;
    if (has_refsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refsound());
    }

    // optional bool RefEffectFollow = 13;
    if (has_refeffectfollow()) {
      total_size += 1 + 1;
    }

    // optional bool RefEffectFlip = 14;
    if (has_refeffectflip()) {
      total_size += 1 + 1;
    }

    // optional bool PlayDownAnim = 15;
    if (has_playdownanim()) {
      total_size += 1 + 1;
    }

    // optional bool HitEffectRotateRandom = 16;
    if (has_hiteffectrotaterandom()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional bool PlayLayerEffect = 20;
    if (has_playlayereffect()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 HitEffectRotateRangeX = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->hiteffectrotaterangex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hiteffectrotaterangex(i));
    }
    total_size += 2 * this->hiteffectrotaterangex_size() + data_size;
  }

  // repeated int32 HitEffectRotateRangeY = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->hiteffectrotaterangey_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hiteffectrotaterangey(i));
    }
    total_size += 2 * this->hiteffectrotaterangey_size() + data_size;
  }

  // repeated .pb.HitEffectData HitEffectData = 19;
  total_size += 2 * this->hiteffectdata_size();
  for (int i = 0; i < this->hiteffectdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hiteffectdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillHitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillHitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillHitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillHitData::MergeFrom(const SkillHitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  hiteffectrotaterangex_.MergeFrom(from.hiteffectrotaterangex_);
  hiteffectrotaterangey_.MergeFrom(from.hiteffectrotaterangey_);
  hiteffectdata_.MergeFrom(from.hiteffectdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hitforsure()) {
      set_hitforsure(from.hitforsure());
    }
    if (from.has_effectparent()) {
      set_effectparent(from.effectparent());
    }
    if (from.has_hiteffect()) {
      set_hiteffect(from.hiteffect());
    }
    if (from.has_hitsound()) {
      set_hitsound(from.hitsound());
    }
    if (from.has_hiteffectplaytype()) {
      set_hiteffectplaytype(from.hiteffectplaytype());
    }
    if (from.has_hiteffectplayparam()) {
      set_hiteffectplayparam(from.hiteffectplayparam());
    }
    if (from.has_hiteffectfollow()) {
      set_hiteffectfollow(from.hiteffectfollow());
    }
    if (from.has_hiteffectflip()) {
      set_hiteffectflip(from.hiteffectflip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_refeffectparent()) {
      set_refeffectparent(from.refeffectparent());
    }
    if (from.has_refeffect()) {
      set_refeffect(from.refeffect());
    }
    if (from.has_refsound()) {
      set_refsound(from.refsound());
    }
    if (from.has_refeffectfollow()) {
      set_refeffectfollow(from.refeffectfollow());
    }
    if (from.has_refeffectflip()) {
      set_refeffectflip(from.refeffectflip());
    }
    if (from.has_playdownanim()) {
      set_playdownanim(from.playdownanim());
    }
    if (from.has_hiteffectrotaterandom()) {
      set_hiteffectrotaterandom(from.hiteffectrotaterandom());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_playlayereffect()) {
      set_playlayereffect(from.playlayereffect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillHitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillHitData::CopyFrom(const SkillHitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillHitData::IsInitialized() const {

  return true;
}

void SkillHitData::Swap(SkillHitData* other) {
  if (other != this) {
    std::swap(hitforsure_, other->hitforsure_);
    std::swap(effectparent_, other->effectparent_);
    std::swap(hiteffect_, other->hiteffect_);
    std::swap(hitsound_, other->hitsound_);
    std::swap(hiteffectplaytype_, other->hiteffectplaytype_);
    std::swap(hiteffectplayparam_, other->hiteffectplayparam_);
    std::swap(hiteffectfollow_, other->hiteffectfollow_);
    std::swap(hiteffectflip_, other->hiteffectflip_);
    std::swap(refeffectparent_, other->refeffectparent_);
    std::swap(refeffect_, other->refeffect_);
    std::swap(refsound_, other->refsound_);
    std::swap(refeffectfollow_, other->refeffectfollow_);
    std::swap(refeffectflip_, other->refeffectflip_);
    std::swap(playdownanim_, other->playdownanim_);
    std::swap(hiteffectrotaterandom_, other->hiteffectrotaterandom_);
    hiteffectrotaterangex_.Swap(&other->hiteffectrotaterangex_);
    hiteffectrotaterangey_.Swap(&other->hiteffectrotaterangey_);
    hiteffectdata_.Swap(&other->hiteffectdata_);
    std::swap(playlayereffect_, other->playlayereffect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillHitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillHitData_descriptor_;
  metadata.reflection = SkillHitData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillEnergyDrawData::kDrawTypeFieldNumber;
const int SkillEnergyDrawData::kDrwaParam1FieldNumber;
const int SkillEnergyDrawData::kDrawParam2FieldNumber;
const int SkillEnergyDrawData::kRecoverTypeFieldNumber;
const int SkillEnergyDrawData::kRecoverParam1FieldNumber;
const int SkillEnergyDrawData::kRecoverParam2FieldNumber;
#endif  // !_MSC_VER

SkillEnergyDrawData::SkillEnergyDrawData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillEnergyDrawData)
}

void SkillEnergyDrawData::InitAsDefaultInstance() {
}

SkillEnergyDrawData::SkillEnergyDrawData(const SkillEnergyDrawData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillEnergyDrawData)
}

void SkillEnergyDrawData::SharedCtor() {
  _cached_size_ = 0;
  drawtype_ = 0;
  drwaparam1_ = 0;
  drawparam2_ = 0;
  recovertype_ = 0;
  recoverparam1_ = 0;
  recoverparam2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillEnergyDrawData::~SkillEnergyDrawData() {
  // @@protoc_insertion_point(destructor:pb.SkillEnergyDrawData)
  SharedDtor();
}

void SkillEnergyDrawData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillEnergyDrawData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillEnergyDrawData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillEnergyDrawData_descriptor_;
}

const SkillEnergyDrawData& SkillEnergyDrawData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillEnergyDrawData* SkillEnergyDrawData::default_instance_ = NULL;

SkillEnergyDrawData* SkillEnergyDrawData::New() const {
  return new SkillEnergyDrawData;
}

void SkillEnergyDrawData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillEnergyDrawData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(drawtype_, recoverparam2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillEnergyDrawData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillEnergyDrawData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 DrawType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drawtype_)));
          set_has_drawtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DrwaParam1;
        break;
      }

      // optional int32 DrwaParam1 = 2;
      case 2: {
        if (tag == 16) {
         parse_DrwaParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drwaparam1_)));
          set_has_drwaparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DrawParam2;
        break;
      }

      // optional int32 DrawParam2 = 3;
      case 3: {
        if (tag == 24) {
         parse_DrawParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drawparam2_)));
          set_has_drawparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RecoverType;
        break;
      }

      // optional int32 RecoverType = 4;
      case 4: {
        if (tag == 32) {
         parse_RecoverType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recovertype_)));
          set_has_recovertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_RecoverParam1;
        break;
      }

      // optional int32 RecoverParam1 = 5;
      case 5: {
        if (tag == 40) {
         parse_RecoverParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recoverparam1_)));
          set_has_recoverparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RecoverParam2;
        break;
      }

      // optional int32 RecoverParam2 = 6;
      case 6: {
        if (tag == 48) {
         parse_RecoverParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recoverparam2_)));
          set_has_recoverparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillEnergyDrawData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillEnergyDrawData)
  return false;
#undef DO_
}

void SkillEnergyDrawData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillEnergyDrawData)
  // optional int32 DrawType = 1;
  if (has_drawtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->drawtype(), output);
  }

  // optional int32 DrwaParam1 = 2;
  if (has_drwaparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->drwaparam1(), output);
  }

  // optional int32 DrawParam2 = 3;
  if (has_drawparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->drawparam2(), output);
  }

  // optional int32 RecoverType = 4;
  if (has_recovertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->recovertype(), output);
  }

  // optional int32 RecoverParam1 = 5;
  if (has_recoverparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->recoverparam1(), output);
  }

  // optional int32 RecoverParam2 = 6;
  if (has_recoverparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->recoverparam2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillEnergyDrawData)
}

::google::protobuf::uint8* SkillEnergyDrawData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillEnergyDrawData)
  // optional int32 DrawType = 1;
  if (has_drawtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->drawtype(), target);
  }

  // optional int32 DrwaParam1 = 2;
  if (has_drwaparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->drwaparam1(), target);
  }

  // optional int32 DrawParam2 = 3;
  if (has_drawparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->drawparam2(), target);
  }

  // optional int32 RecoverType = 4;
  if (has_recovertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->recovertype(), target);
  }

  // optional int32 RecoverParam1 = 5;
  if (has_recoverparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->recoverparam1(), target);
  }

  // optional int32 RecoverParam2 = 6;
  if (has_recoverparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->recoverparam2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillEnergyDrawData)
  return target;
}

int SkillEnergyDrawData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 DrawType = 1;
    if (has_drawtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drawtype());
    }

    // optional int32 DrwaParam1 = 2;
    if (has_drwaparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drwaparam1());
    }

    // optional int32 DrawParam2 = 3;
    if (has_drawparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drawparam2());
    }

    // optional int32 RecoverType = 4;
    if (has_recovertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recovertype());
    }

    // optional int32 RecoverParam1 = 5;
    if (has_recoverparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recoverparam1());
    }

    // optional int32 RecoverParam2 = 6;
    if (has_recoverparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recoverparam2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillEnergyDrawData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillEnergyDrawData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillEnergyDrawData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillEnergyDrawData::MergeFrom(const SkillEnergyDrawData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_drawtype()) {
      set_drawtype(from.drawtype());
    }
    if (from.has_drwaparam1()) {
      set_drwaparam1(from.drwaparam1());
    }
    if (from.has_drawparam2()) {
      set_drawparam2(from.drawparam2());
    }
    if (from.has_recovertype()) {
      set_recovertype(from.recovertype());
    }
    if (from.has_recoverparam1()) {
      set_recoverparam1(from.recoverparam1());
    }
    if (from.has_recoverparam2()) {
      set_recoverparam2(from.recoverparam2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillEnergyDrawData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillEnergyDrawData::CopyFrom(const SkillEnergyDrawData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillEnergyDrawData::IsInitialized() const {

  return true;
}

void SkillEnergyDrawData::Swap(SkillEnergyDrawData* other) {
  if (other != this) {
    std::swap(drawtype_, other->drawtype_);
    std::swap(drwaparam1_, other->drwaparam1_);
    std::swap(drawparam2_, other->drawparam2_);
    std::swap(recovertype_, other->recovertype_);
    std::swap(recoverparam1_, other->recoverparam1_);
    std::swap(recoverparam2_, other->recoverparam2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillEnergyDrawData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillEnergyDrawData_descriptor_;
  metadata.reflection = SkillEnergyDrawData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillEnergyAssistData::kAssistTypeFieldNumber;
const int SkillEnergyAssistData::kAssistParam1FieldNumber;
const int SkillEnergyAssistData::kAssistParam2FieldNumber;
const int SkillEnergyAssistData::kAddTypeFieldNumber;
const int SkillEnergyAssistData::kAddParam1FieldNumber;
const int SkillEnergyAssistData::kAddParam2FieldNumber;
#endif  // !_MSC_VER

SkillEnergyAssistData::SkillEnergyAssistData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillEnergyAssistData)
}

void SkillEnergyAssistData::InitAsDefaultInstance() {
}

SkillEnergyAssistData::SkillEnergyAssistData(const SkillEnergyAssistData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillEnergyAssistData)
}

void SkillEnergyAssistData::SharedCtor() {
  _cached_size_ = 0;
  assisttype_ = 0;
  assistparam1_ = 0;
  assistparam2_ = 0;
  addtype_ = 0;
  addparam1_ = 0;
  addparam2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillEnergyAssistData::~SkillEnergyAssistData() {
  // @@protoc_insertion_point(destructor:pb.SkillEnergyAssistData)
  SharedDtor();
}

void SkillEnergyAssistData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillEnergyAssistData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillEnergyAssistData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillEnergyAssistData_descriptor_;
}

const SkillEnergyAssistData& SkillEnergyAssistData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillEnergyAssistData* SkillEnergyAssistData::default_instance_ = NULL;

SkillEnergyAssistData* SkillEnergyAssistData::New() const {
  return new SkillEnergyAssistData;
}

void SkillEnergyAssistData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillEnergyAssistData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(assisttype_, addparam2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillEnergyAssistData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillEnergyAssistData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 AssistType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assisttype_)));
          set_has_assisttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AssistParam1;
        break;
      }

      // optional int32 AssistParam1 = 2;
      case 2: {
        if (tag == 16) {
         parse_AssistParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assistparam1_)));
          set_has_assistparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AssistParam2;
        break;
      }

      // optional int32 AssistParam2 = 3;
      case 3: {
        if (tag == 24) {
         parse_AssistParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &assistparam2_)));
          set_has_assistparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AddType;
        break;
      }

      // optional int32 AddType = 4;
      case 4: {
        if (tag == 32) {
         parse_AddType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addtype_)));
          set_has_addtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AddParam1;
        break;
      }

      // optional int32 AddParam1 = 5;
      case 5: {
        if (tag == 40) {
         parse_AddParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addparam1_)));
          set_has_addparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AddParam2;
        break;
      }

      // optional int32 AddParam2 = 6;
      case 6: {
        if (tag == 48) {
         parse_AddParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addparam2_)));
          set_has_addparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillEnergyAssistData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillEnergyAssistData)
  return false;
#undef DO_
}

void SkillEnergyAssistData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillEnergyAssistData)
  // optional int32 AssistType = 1;
  if (has_assisttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->assisttype(), output);
  }

  // optional int32 AssistParam1 = 2;
  if (has_assistparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->assistparam1(), output);
  }

  // optional int32 AssistParam2 = 3;
  if (has_assistparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->assistparam2(), output);
  }

  // optional int32 AddType = 4;
  if (has_addtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addtype(), output);
  }

  // optional int32 AddParam1 = 5;
  if (has_addparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->addparam1(), output);
  }

  // optional int32 AddParam2 = 6;
  if (has_addparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->addparam2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillEnergyAssistData)
}

::google::protobuf::uint8* SkillEnergyAssistData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillEnergyAssistData)
  // optional int32 AssistType = 1;
  if (has_assisttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->assisttype(), target);
  }

  // optional int32 AssistParam1 = 2;
  if (has_assistparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->assistparam1(), target);
  }

  // optional int32 AssistParam2 = 3;
  if (has_assistparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->assistparam2(), target);
  }

  // optional int32 AddType = 4;
  if (has_addtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->addtype(), target);
  }

  // optional int32 AddParam1 = 5;
  if (has_addparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->addparam1(), target);
  }

  // optional int32 AddParam2 = 6;
  if (has_addparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->addparam2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillEnergyAssistData)
  return target;
}

int SkillEnergyAssistData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 AssistType = 1;
    if (has_assisttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assisttype());
    }

    // optional int32 AssistParam1 = 2;
    if (has_assistparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assistparam1());
    }

    // optional int32 AssistParam2 = 3;
    if (has_assistparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->assistparam2());
    }

    // optional int32 AddType = 4;
    if (has_addtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addtype());
    }

    // optional int32 AddParam1 = 5;
    if (has_addparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addparam1());
    }

    // optional int32 AddParam2 = 6;
    if (has_addparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addparam2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillEnergyAssistData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillEnergyAssistData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillEnergyAssistData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillEnergyAssistData::MergeFrom(const SkillEnergyAssistData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_assisttype()) {
      set_assisttype(from.assisttype());
    }
    if (from.has_assistparam1()) {
      set_assistparam1(from.assistparam1());
    }
    if (from.has_assistparam2()) {
      set_assistparam2(from.assistparam2());
    }
    if (from.has_addtype()) {
      set_addtype(from.addtype());
    }
    if (from.has_addparam1()) {
      set_addparam1(from.addparam1());
    }
    if (from.has_addparam2()) {
      set_addparam2(from.addparam2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillEnergyAssistData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillEnergyAssistData::CopyFrom(const SkillEnergyAssistData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillEnergyAssistData::IsInitialized() const {

  return true;
}

void SkillEnergyAssistData::Swap(SkillEnergyAssistData* other) {
  if (other != this) {
    std::swap(assisttype_, other->assisttype_);
    std::swap(assistparam1_, other->assistparam1_);
    std::swap(assistparam2_, other->assistparam2_);
    std::swap(addtype_, other->addtype_);
    std::swap(addparam1_, other->addparam1_);
    std::swap(addparam2_, other->addparam2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillEnergyAssistData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillEnergyAssistData_descriptor_;
  metadata.reflection = SkillEnergyAssistData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillLifeStealData::kTypeFieldNumber;
const int SkillLifeStealData::kParam1FieldNumber;
const int SkillLifeStealData::kParam2FieldNumber;
const int SkillLifeStealData::kUpperLimitFieldNumber;
const int SkillLifeStealData::kUpperLimitParamFieldNumber;
const int SkillLifeStealData::kBuffSubTypeFilterFieldNumber;
#endif  // !_MSC_VER

SkillLifeStealData::SkillLifeStealData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillLifeStealData)
}

void SkillLifeStealData::InitAsDefaultInstance() {
}

SkillLifeStealData::SkillLifeStealData(const SkillLifeStealData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillLifeStealData)
}

void SkillLifeStealData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  param1_ = 0;
  param2_ = 0;
  upperlimit_ = false;
  upperlimitparam_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillLifeStealData::~SkillLifeStealData() {
  // @@protoc_insertion_point(destructor:pb.SkillLifeStealData)
  SharedDtor();
}

void SkillLifeStealData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillLifeStealData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillLifeStealData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillLifeStealData_descriptor_;
}

const SkillLifeStealData& SkillLifeStealData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillLifeStealData* SkillLifeStealData::default_instance_ = NULL;

SkillLifeStealData* SkillLifeStealData::New() const {
  return new SkillLifeStealData;
}

void SkillLifeStealData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillLifeStealData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, upperlimit_);
    upperlimitparam_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  buffsubtypefilter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillLifeStealData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillLifeStealData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Param1;
        break;
      }

      // optional int32 Param1 = 2;
      case 2: {
        if (tag == 16) {
         parse_Param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Param2;
        break;
      }

      // optional int32 Param2 = 3;
      case 3: {
        if (tag == 24) {
         parse_Param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_UpperLimit;
        break;
      }

      // optional bool UpperLimit = 4;
      case 4: {
        if (tag == 32) {
         parse_UpperLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upperlimit_)));
          set_has_upperlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UpperLimitParam;
        break;
      }

      // optional int32 UpperLimitParam = 5;
      case 5: {
        if (tag == 40) {
         parse_UpperLimitParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upperlimitparam_)));
          set_has_upperlimitparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BuffSubTypeFilter;
        break;
      }

      // repeated int32 BuffSubTypeFilter = 6;
      case 6: {
        if (tag == 48) {
         parse_BuffSubTypeFilter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_buffsubtypefilter())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffsubtypefilter())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BuffSubTypeFilter;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillLifeStealData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillLifeStealData)
  return false;
#undef DO_
}

void SkillLifeStealData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillLifeStealData)
  // optional int32 Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 Param1 = 2;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param1(), output);
  }

  // optional int32 Param2 = 3;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param2(), output);
  }

  // optional bool UpperLimit = 4;
  if (has_upperlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->upperlimit(), output);
  }

  // optional int32 UpperLimitParam = 5;
  if (has_upperlimitparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->upperlimitparam(), output);
  }

  // repeated int32 BuffSubTypeFilter = 6;
  for (int i = 0; i < this->buffsubtypefilter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->buffsubtypefilter(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillLifeStealData)
}

::google::protobuf::uint8* SkillLifeStealData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillLifeStealData)
  // optional int32 Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 Param1 = 2;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->param1(), target);
  }

  // optional int32 Param2 = 3;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param2(), target);
  }

  // optional bool UpperLimit = 4;
  if (has_upperlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->upperlimit(), target);
  }

  // optional int32 UpperLimitParam = 5;
  if (has_upperlimitparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->upperlimitparam(), target);
  }

  // repeated int32 BuffSubTypeFilter = 6;
  for (int i = 0; i < this->buffsubtypefilter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->buffsubtypefilter(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillLifeStealData)
  return target;
}

int SkillLifeStealData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Param1 = 2;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

    // optional int32 Param2 = 3;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }

    // optional bool UpperLimit = 4;
    if (has_upperlimit()) {
      total_size += 1 + 1;
    }

    // optional int32 UpperLimitParam = 5;
    if (has_upperlimitparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upperlimitparam());
    }

  }
  // repeated int32 BuffSubTypeFilter = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffsubtypefilter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buffsubtypefilter(i));
    }
    total_size += 1 * this->buffsubtypefilter_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillLifeStealData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillLifeStealData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillLifeStealData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillLifeStealData::MergeFrom(const SkillLifeStealData& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffsubtypefilter_.MergeFrom(from.buffsubtypefilter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_upperlimit()) {
      set_upperlimit(from.upperlimit());
    }
    if (from.has_upperlimitparam()) {
      set_upperlimitparam(from.upperlimitparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillLifeStealData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillLifeStealData::CopyFrom(const SkillLifeStealData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillLifeStealData::IsInitialized() const {

  return true;
}

void SkillLifeStealData::Swap(SkillLifeStealData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(upperlimit_, other->upperlimit_);
    std::swap(upperlimitparam_, other->upperlimitparam_);
    buffsubtypefilter_.Swap(&other->buffsubtypefilter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillLifeStealData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillLifeStealData_descriptor_;
  metadata.reflection = SkillLifeStealData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillSpeicalAdjust::kEnableFieldNumber;
const int SkillSpeicalAdjust::kEffectTypeFieldNumber;
const int SkillSpeicalAdjust::kTargetBuffIdFieldNumber;
const int SkillSpeicalAdjust::kBuffTypeFieldNumber;
const int SkillSpeicalAdjust::kBuffParamFieldNumber;
const int SkillSpeicalAdjust::kAdjustDataFieldNumber;
const int SkillSpeicalAdjust::kAdjustTargetFieldNumber;
const int SkillSpeicalAdjust::kIsUseStateAdjustFieldNumber;
#endif  // !_MSC_VER

SkillSpeicalAdjust::SkillSpeicalAdjust()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillSpeicalAdjust)
}

void SkillSpeicalAdjust::InitAsDefaultInstance() {
}

SkillSpeicalAdjust::SkillSpeicalAdjust(const SkillSpeicalAdjust& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillSpeicalAdjust)
}

void SkillSpeicalAdjust::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
  effecttype_ = 0;
  targetbuffid_ = 0;
  bufftype_ = 0;
  adjusttarget_ = 0;
  isusestateadjust_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillSpeicalAdjust::~SkillSpeicalAdjust() {
  // @@protoc_insertion_point(destructor:pb.SkillSpeicalAdjust)
  SharedDtor();
}

void SkillSpeicalAdjust::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillSpeicalAdjust::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillSpeicalAdjust::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillSpeicalAdjust_descriptor_;
}

const SkillSpeicalAdjust& SkillSpeicalAdjust::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillSpeicalAdjust* SkillSpeicalAdjust::default_instance_ = NULL;

SkillSpeicalAdjust* SkillSpeicalAdjust::New() const {
  return new SkillSpeicalAdjust;
}

void SkillSpeicalAdjust::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillSpeicalAdjust*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(effecttype_, isusestateadjust_);
    adjusttarget_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  buffparam_.Clear();
  adjustdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillSpeicalAdjust::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillSpeicalAdjust)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Enable = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EffectType;
        break;
      }

      // optional int32 EffectType = 2;
      case 2: {
        if (tag == 16) {
         parse_EffectType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &effecttype_)));
          set_has_effecttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TargetBuffId;
        break;
      }

      // optional int32 TargetBuffId = 3;
      case 3: {
        if (tag == 24) {
         parse_TargetBuffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetbuffid_)));
          set_has_targetbuffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BuffType;
        break;
      }

      // optional int32 BuffType = 4;
      case 4: {
        if (tag == 32) {
         parse_BuffType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bufftype_)));
          set_has_bufftype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BuffParam;
        break;
      }

      // repeated int32 BuffParam = 5;
      case 5: {
        if (tag == 40) {
         parse_BuffParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_buffparam())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_buffparam())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BuffParam;
        if (input->ExpectTag(48)) goto parse_AdjustData;
        break;
      }

      // repeated int32 AdjustData = 6;
      case 6: {
        if (tag == 48) {
         parse_AdjustData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_adjustdata())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_adjustdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AdjustData;
        if (input->ExpectTag(56)) goto parse_AdjustTarget;
        break;
      }

      // optional int32 AdjustTarget = 7;
      case 7: {
        if (tag == 56) {
         parse_AdjustTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &adjusttarget_)));
          set_has_adjusttarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsUseStateAdjust;
        break;
      }

      // optional bool IsUseStateAdjust = 8;
      case 8: {
        if (tag == 64) {
         parse_IsUseStateAdjust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusestateadjust_)));
          set_has_isusestateadjust();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillSpeicalAdjust)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillSpeicalAdjust)
  return false;
#undef DO_
}

void SkillSpeicalAdjust::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillSpeicalAdjust)
  // optional bool Enable = 1;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // optional int32 EffectType = 2;
  if (has_effecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->effecttype(), output);
  }

  // optional int32 TargetBuffId = 3;
  if (has_targetbuffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->targetbuffid(), output);
  }

  // optional int32 BuffType = 4;
  if (has_bufftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bufftype(), output);
  }

  // repeated int32 BuffParam = 5;
  for (int i = 0; i < this->buffparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->buffparam(i), output);
  }

  // repeated int32 AdjustData = 6;
  for (int i = 0; i < this->adjustdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->adjustdata(i), output);
  }

  // optional int32 AdjustTarget = 7;
  if (has_adjusttarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->adjusttarget(), output);
  }

  // optional bool IsUseStateAdjust = 8;
  if (has_isusestateadjust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isusestateadjust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillSpeicalAdjust)
}

::google::protobuf::uint8* SkillSpeicalAdjust::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillSpeicalAdjust)
  // optional bool Enable = 1;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable(), target);
  }

  // optional int32 EffectType = 2;
  if (has_effecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->effecttype(), target);
  }

  // optional int32 TargetBuffId = 3;
  if (has_targetbuffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->targetbuffid(), target);
  }

  // optional int32 BuffType = 4;
  if (has_bufftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bufftype(), target);
  }

  // repeated int32 BuffParam = 5;
  for (int i = 0; i < this->buffparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->buffparam(i), target);
  }

  // repeated int32 AdjustData = 6;
  for (int i = 0; i < this->adjustdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->adjustdata(i), target);
  }

  // optional int32 AdjustTarget = 7;
  if (has_adjusttarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->adjusttarget(), target);
  }

  // optional bool IsUseStateAdjust = 8;
  if (has_isusestateadjust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isusestateadjust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillSpeicalAdjust)
  return target;
}

int SkillSpeicalAdjust::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Enable = 1;
    if (has_enable()) {
      total_size += 1 + 1;
    }

    // optional int32 EffectType = 2;
    if (has_effecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->effecttype());
    }

    // optional int32 TargetBuffId = 3;
    if (has_targetbuffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetbuffid());
    }

    // optional int32 BuffType = 4;
    if (has_bufftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bufftype());
    }

    // optional int32 AdjustTarget = 7;
    if (has_adjusttarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->adjusttarget());
    }

    // optional bool IsUseStateAdjust = 8;
    if (has_isusestateadjust()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 BuffParam = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->buffparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->buffparam(i));
    }
    total_size += 1 * this->buffparam_size() + data_size;
  }

  // repeated int32 AdjustData = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->adjustdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->adjustdata(i));
    }
    total_size += 1 * this->adjustdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillSpeicalAdjust::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillSpeicalAdjust* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillSpeicalAdjust*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillSpeicalAdjust::MergeFrom(const SkillSpeicalAdjust& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffparam_.MergeFrom(from.buffparam_);
  adjustdata_.MergeFrom(from.adjustdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enable()) {
      set_enable(from.enable());
    }
    if (from.has_effecttype()) {
      set_effecttype(from.effecttype());
    }
    if (from.has_targetbuffid()) {
      set_targetbuffid(from.targetbuffid());
    }
    if (from.has_bufftype()) {
      set_bufftype(from.bufftype());
    }
    if (from.has_adjusttarget()) {
      set_adjusttarget(from.adjusttarget());
    }
    if (from.has_isusestateadjust()) {
      set_isusestateadjust(from.isusestateadjust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillSpeicalAdjust::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillSpeicalAdjust::CopyFrom(const SkillSpeicalAdjust& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillSpeicalAdjust::IsInitialized() const {

  return true;
}

void SkillSpeicalAdjust::Swap(SkillSpeicalAdjust* other) {
  if (other != this) {
    std::swap(enable_, other->enable_);
    std::swap(effecttype_, other->effecttype_);
    std::swap(targetbuffid_, other->targetbuffid_);
    std::swap(bufftype_, other->bufftype_);
    buffparam_.Swap(&other->buffparam_);
    adjustdata_.Swap(&other->adjustdata_);
    std::swap(adjusttarget_, other->adjusttarget_);
    std::swap(isusestateadjust_, other->isusestateadjust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillSpeicalAdjust::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillSpeicalAdjust_descriptor_;
  metadata.reflection = SkillSpeicalAdjust_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDamageData::kDamageTypeFieldNumber;
const int SkillDamageData::kTypeParam1FieldNumber;
const int SkillDamageData::kTypeParam2FieldNumber;
const int SkillDamageData::kTypeParam3FieldNumber;
const int SkillDamageData::kCritTypeFieldNumber;
const int SkillDamageData::kCritParamFieldNumber;
const int SkillDamageData::kCritParam2FieldNumber;
const int SkillDamageData::kExtraArmourPiercingFieldNumber;
const int SkillDamageData::kExtraParam1FieldNumber;
const int SkillDamageData::kExtraParam2FieldNumber;
const int SkillDamageData::kIsIgnoreBlockFieldNumber;
const int SkillDamageData::kAdjustByTargetCountFieldNumber;
const int SkillDamageData::kAdjustDataFieldNumber;
const int SkillDamageData::kSkipDamageFieldNumber;
const int SkillDamageData::kUpperLimitFieldNumber;
const int SkillDamageData::kUpperLimitParamFieldNumber;
const int SkillDamageData::kSpecialAdjustFieldNumber;
const int SkillDamageData::kIsUseStateAdjustFieldNumber;
const int SkillDamageData::kStateAdjustTypeFieldNumber;
const int SkillDamageData::kSkillTunnelFieldNumber;
const int SkillDamageData::kLowerLimitFieldNumber;
const int SkillDamageData::kLowerLimitTypeFieldNumber;
const int SkillDamageData::kLowerLimitParamFieldNumber;
const int SkillDamageData::kIgnoreShieldFieldNumber;
const int SkillDamageData::kIgnoreBeDamageRageFieldNumber;
const int SkillDamageData::kBuffIdFieldNumber;
const int SkillDamageData::kHealByEffNumFieldNumber;
const int SkillDamageData::kHealCoefficientFieldNumber;
const int SkillDamageData::kBuffId2FieldNumber;
#endif  // !_MSC_VER

SkillDamageData::SkillDamageData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillDamageData)
}

void SkillDamageData::InitAsDefaultInstance() {
  specialadjust_ = const_cast< ::pb::SkillSpeicalAdjust*>(&::pb::SkillSpeicalAdjust::default_instance());
}

SkillDamageData::SkillDamageData(const SkillDamageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillDamageData)
}

void SkillDamageData::SharedCtor() {
  _cached_size_ = 0;
  damagetype_ = 0;
  typeparam1_ = 0;
  typeparam2_ = 0;
  typeparam3_ = 0;
  crittype_ = 0;
  critparam_ = 0;
  critparam2_ = 0;
  extraarmourpiercing_ = 0;
  extraparam1_ = 0;
  extraparam2_ = 0;
  isignoreblock_ = false;
  adjustbytargetcount_ = false;
  skipdamage_ = false;
  upperlimit_ = false;
  upperlimitparam_ = 0;
  specialadjust_ = NULL;
  isusestateadjust_ = false;
  stateadjusttype_ = 0;
  skilltunnel_ = 0;
  lowerlimit_ = false;
  lowerlimittype_ = 0;
  lowerlimitparam_ = 0;
  ignoreshield_ = false;
  ignorebedamagerage_ = false;
  buffid_ = 0;
  healbyeffnum_ = false;
  healcoefficient_ = 0;
  buffid2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDamageData::~SkillDamageData() {
  // @@protoc_insertion_point(destructor:pb.SkillDamageData)
  SharedDtor();
}

void SkillDamageData::SharedDtor() {
  if (this != default_instance_) {
    delete specialadjust_;
  }
}

void SkillDamageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDamageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDamageData_descriptor_;
}

const SkillDamageData& SkillDamageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillDamageData* SkillDamageData::default_instance_ = NULL;

SkillDamageData* SkillDamageData::New() const {
  return new SkillDamageData;
}

void SkillDamageData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillDamageData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(damagetype_, extraarmourpiercing_);
  }
  if (_has_bits_[8 / 32] & 61184) {
    ZR_(extraparam1_, extraparam2_);
    ZR_(isignoreblock_, upperlimitparam_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(stateadjusttype_, ignoreshield_);
    if (has_specialadjust()) {
      if (specialadjust_ != NULL) specialadjust_->::pb::SkillSpeicalAdjust::Clear();
    }
    lowerlimitparam_ = 0;
  }
  if (_has_bits_[24 / 32] & 520093696) {
    ZR_(buffid_, buffid2_);
    ignorebedamagerage_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  adjustdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDamageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillDamageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 DamageType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagetype_)));
          set_has_damagetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TypeParam1;
        break;
      }

      // optional int32 TypeParam1 = 2;
      case 2: {
        if (tag == 16) {
         parse_TypeParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeparam1_)));
          set_has_typeparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TypeParam2;
        break;
      }

      // optional int32 TypeParam2 = 3;
      case 3: {
        if (tag == 24) {
         parse_TypeParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeparam2_)));
          set_has_typeparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TypeParam3;
        break;
      }

      // optional int32 TypeParam3 = 4;
      case 4: {
        if (tag == 32) {
         parse_TypeParam3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeparam3_)));
          set_has_typeparam3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CritType;
        break;
      }

      // optional int32 CritType = 5;
      case 5: {
        if (tag == 40) {
         parse_CritType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crittype_)));
          set_has_crittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CritParam;
        break;
      }

      // optional int32 CritParam = 6;
      case 6: {
        if (tag == 48) {
         parse_CritParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &critparam_)));
          set_has_critparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_CritParam2;
        break;
      }

      // optional int32 CritParam2 = 7;
      case 7: {
        if (tag == 56) {
         parse_CritParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &critparam2_)));
          set_has_critparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ExtraArmourPiercing;
        break;
      }

      // optional int32 ExtraArmourPiercing = 8;
      case 8: {
        if (tag == 64) {
         parse_ExtraArmourPiercing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extraarmourpiercing_)));
          set_has_extraarmourpiercing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ExtraParam1;
        break;
      }

      // optional int32 ExtraParam1 = 9;
      case 9: {
        if (tag == 72) {
         parse_ExtraParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extraparam1_)));
          set_has_extraparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ExtraParam2;
        break;
      }

      // optional int32 ExtraParam2 = 10;
      case 10: {
        if (tag == 80) {
         parse_ExtraParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extraparam2_)));
          set_has_extraparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_IsIgnoreBlock;
        break;
      }

      // optional bool IsIgnoreBlock = 14;
      case 14: {
        if (tag == 112) {
         parse_IsIgnoreBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isignoreblock_)));
          set_has_isignoreblock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_AdjustByTargetCount;
        break;
      }

      // optional bool AdjustByTargetCount = 15;
      case 15: {
        if (tag == 120) {
         parse_AdjustByTargetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adjustbytargetcount_)));
          set_has_adjustbytargetcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_AdjustData;
        break;
      }

      // repeated int32 AdjustData = 16;
      case 16: {
        if (tag == 128) {
         parse_AdjustData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_adjustdata())));
        } else if (tag == 130) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_adjustdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_AdjustData;
        if (input->ExpectTag(136)) goto parse_SkipDamage;
        break;
      }

      // optional bool SkipDamage = 17;
      case 17: {
        if (tag == 136) {
         parse_SkipDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skipdamage_)));
          set_has_skipdamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_UpperLimit;
        break;
      }

      // optional bool UpperLimit = 18;
      case 18: {
        if (tag == 144) {
         parse_UpperLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upperlimit_)));
          set_has_upperlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_UpperLimitParam;
        break;
      }

      // optional int32 UpperLimitParam = 19;
      case 19: {
        if (tag == 152) {
         parse_UpperLimitParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upperlimitparam_)));
          set_has_upperlimitparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_SpecialAdjust;
        break;
      }

      // optional .pb.SkillSpeicalAdjust SpecialAdjust = 20;
      case 20: {
        if (tag == 162) {
         parse_SpecialAdjust:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specialadjust()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_IsUseStateAdjust;
        break;
      }

      // optional bool IsUseStateAdjust = 21;
      case 21: {
        if (tag == 168) {
         parse_IsUseStateAdjust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isusestateadjust_)));
          set_has_isusestateadjust();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_StateAdjustType;
        break;
      }

      // optional int32 StateAdjustType = 22;
      case 22: {
        if (tag == 176) {
         parse_StateAdjustType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stateadjusttype_)));
          set_has_stateadjusttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_SkillTunnel;
        break;
      }

      // optional int32 SkillTunnel = 23;
      case 23: {
        if (tag == 184) {
         parse_SkillTunnel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilltunnel_)));
          set_has_skilltunnel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_LowerLimit;
        break;
      }

      // optional bool LowerLimit = 24;
      case 24: {
        if (tag == 192) {
         parse_LowerLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lowerlimit_)));
          set_has_lowerlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_LowerLimitType;
        break;
      }

      // optional int32 LowerLimitType = 25;
      case 25: {
        if (tag == 200) {
         parse_LowerLimitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowerlimittype_)));
          set_has_lowerlimittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_LowerLimitParam;
        break;
      }

      // optional int32 LowerLimitParam = 26;
      case 26: {
        if (tag == 208) {
         parse_LowerLimitParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowerlimitparam_)));
          set_has_lowerlimitparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_IgnoreShield;
        break;
      }

      // optional bool IgnoreShield = 27;
      case 27: {
        if (tag == 216) {
         parse_IgnoreShield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignoreshield_)));
          set_has_ignoreshield();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_IgnoreBeDamageRage;
        break;
      }

      // optional bool IgnoreBeDamageRage = 28;
      case 28: {
        if (tag == 224) {
         parse_IgnoreBeDamageRage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignorebedamagerage_)));
          set_has_ignorebedamagerage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_BuffId;
        break;
      }

      // optional int32 BuffId = 29;
      case 29: {
        if (tag == 232) {
         parse_BuffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(240)) goto parse_HealByEffNum;
        break;
      }

      // optional bool HealByEffNum = 30;
      case 30: {
        if (tag == 240) {
         parse_HealByEffNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &healbyeffnum_)));
          set_has_healbyeffnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_HealCoefficient;
        break;
      }

      // optional int32 HealCoefficient = 31;
      case 31: {
        if (tag == 248) {
         parse_HealCoefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &healcoefficient_)));
          set_has_healcoefficient();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_BuffId2;
        break;
      }

      // optional int32 BuffId2 = 32;
      case 32: {
        if (tag == 256) {
         parse_BuffId2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid2_)));
          set_has_buffid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillDamageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillDamageData)
  return false;
#undef DO_
}

void SkillDamageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillDamageData)
  // optional int32 DamageType = 1;
  if (has_damagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->damagetype(), output);
  }

  // optional int32 TypeParam1 = 2;
  if (has_typeparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeparam1(), output);
  }

  // optional int32 TypeParam2 = 3;
  if (has_typeparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typeparam2(), output);
  }

  // optional int32 TypeParam3 = 4;
  if (has_typeparam3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->typeparam3(), output);
  }

  // optional int32 CritType = 5;
  if (has_crittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->crittype(), output);
  }

  // optional int32 CritParam = 6;
  if (has_critparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->critparam(), output);
  }

  // optional int32 CritParam2 = 7;
  if (has_critparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->critparam2(), output);
  }

  // optional int32 ExtraArmourPiercing = 8;
  if (has_extraarmourpiercing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->extraarmourpiercing(), output);
  }

  // optional int32 ExtraParam1 = 9;
  if (has_extraparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->extraparam1(), output);
  }

  // optional int32 ExtraParam2 = 10;
  if (has_extraparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->extraparam2(), output);
  }

  // optional bool IsIgnoreBlock = 14;
  if (has_isignoreblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isignoreblock(), output);
  }

  // optional bool AdjustByTargetCount = 15;
  if (has_adjustbytargetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->adjustbytargetcount(), output);
  }

  // repeated int32 AdjustData = 16;
  for (int i = 0; i < this->adjustdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->adjustdata(i), output);
  }

  // optional bool SkipDamage = 17;
  if (has_skipdamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->skipdamage(), output);
  }

  // optional bool UpperLimit = 18;
  if (has_upperlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->upperlimit(), output);
  }

  // optional int32 UpperLimitParam = 19;
  if (has_upperlimitparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->upperlimitparam(), output);
  }

  // optional .pb.SkillSpeicalAdjust SpecialAdjust = 20;
  if (has_specialadjust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->specialadjust(), output);
  }

  // optional bool IsUseStateAdjust = 21;
  if (has_isusestateadjust()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->isusestateadjust(), output);
  }

  // optional int32 StateAdjustType = 22;
  if (has_stateadjusttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->stateadjusttype(), output);
  }

  // optional int32 SkillTunnel = 23;
  if (has_skilltunnel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->skilltunnel(), output);
  }

  // optional bool LowerLimit = 24;
  if (has_lowerlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->lowerlimit(), output);
  }

  // optional int32 LowerLimitType = 25;
  if (has_lowerlimittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->lowerlimittype(), output);
  }

  // optional int32 LowerLimitParam = 26;
  if (has_lowerlimitparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->lowerlimitparam(), output);
  }

  // optional bool IgnoreShield = 27;
  if (has_ignoreshield()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->ignoreshield(), output);
  }

  // optional bool IgnoreBeDamageRage = 28;
  if (has_ignorebedamagerage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->ignorebedamagerage(), output);
  }

  // optional int32 BuffId = 29;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->buffid(), output);
  }

  // optional bool HealByEffNum = 30;
  if (has_healbyeffnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->healbyeffnum(), output);
  }

  // optional int32 HealCoefficient = 31;
  if (has_healcoefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->healcoefficient(), output);
  }

  // optional int32 BuffId2 = 32;
  if (has_buffid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->buffid2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillDamageData)
}

::google::protobuf::uint8* SkillDamageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillDamageData)
  // optional int32 DamageType = 1;
  if (has_damagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->damagetype(), target);
  }

  // optional int32 TypeParam1 = 2;
  if (has_typeparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeparam1(), target);
  }

  // optional int32 TypeParam2 = 3;
  if (has_typeparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typeparam2(), target);
  }

  // optional int32 TypeParam3 = 4;
  if (has_typeparam3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->typeparam3(), target);
  }

  // optional int32 CritType = 5;
  if (has_crittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->crittype(), target);
  }

  // optional int32 CritParam = 6;
  if (has_critparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->critparam(), target);
  }

  // optional int32 CritParam2 = 7;
  if (has_critparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->critparam2(), target);
  }

  // optional int32 ExtraArmourPiercing = 8;
  if (has_extraarmourpiercing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->extraarmourpiercing(), target);
  }

  // optional int32 ExtraParam1 = 9;
  if (has_extraparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->extraparam1(), target);
  }

  // optional int32 ExtraParam2 = 10;
  if (has_extraparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->extraparam2(), target);
  }

  // optional bool IsIgnoreBlock = 14;
  if (has_isignoreblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isignoreblock(), target);
  }

  // optional bool AdjustByTargetCount = 15;
  if (has_adjustbytargetcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->adjustbytargetcount(), target);
  }

  // repeated int32 AdjustData = 16;
  for (int i = 0; i < this->adjustdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->adjustdata(i), target);
  }

  // optional bool SkipDamage = 17;
  if (has_skipdamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->skipdamage(), target);
  }

  // optional bool UpperLimit = 18;
  if (has_upperlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->upperlimit(), target);
  }

  // optional int32 UpperLimitParam = 19;
  if (has_upperlimitparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->upperlimitparam(), target);
  }

  // optional .pb.SkillSpeicalAdjust SpecialAdjust = 20;
  if (has_specialadjust()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->specialadjust(), target);
  }

  // optional bool IsUseStateAdjust = 21;
  if (has_isusestateadjust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->isusestateadjust(), target);
  }

  // optional int32 StateAdjustType = 22;
  if (has_stateadjusttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->stateadjusttype(), target);
  }

  // optional int32 SkillTunnel = 23;
  if (has_skilltunnel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->skilltunnel(), target);
  }

  // optional bool LowerLimit = 24;
  if (has_lowerlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->lowerlimit(), target);
  }

  // optional int32 LowerLimitType = 25;
  if (has_lowerlimittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->lowerlimittype(), target);
  }

  // optional int32 LowerLimitParam = 26;
  if (has_lowerlimitparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->lowerlimitparam(), target);
  }

  // optional bool IgnoreShield = 27;
  if (has_ignoreshield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->ignoreshield(), target);
  }

  // optional bool IgnoreBeDamageRage = 28;
  if (has_ignorebedamagerage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->ignorebedamagerage(), target);
  }

  // optional int32 BuffId = 29;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->buffid(), target);
  }

  // optional bool HealByEffNum = 30;
  if (has_healbyeffnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->healbyeffnum(), target);
  }

  // optional int32 HealCoefficient = 31;
  if (has_healcoefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->healcoefficient(), target);
  }

  // optional int32 BuffId2 = 32;
  if (has_buffid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->buffid2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillDamageData)
  return target;
}

int SkillDamageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 DamageType = 1;
    if (has_damagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagetype());
    }

    // optional int32 TypeParam1 = 2;
    if (has_typeparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeparam1());
    }

    // optional int32 TypeParam2 = 3;
    if (has_typeparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeparam2());
    }

    // optional int32 TypeParam3 = 4;
    if (has_typeparam3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeparam3());
    }

    // optional int32 CritType = 5;
    if (has_crittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crittype());
    }

    // optional int32 CritParam = 6;
    if (has_critparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critparam());
    }

    // optional int32 CritParam2 = 7;
    if (has_critparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critparam2());
    }

    // optional int32 ExtraArmourPiercing = 8;
    if (has_extraarmourpiercing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extraarmourpiercing());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 ExtraParam1 = 9;
    if (has_extraparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extraparam1());
    }

    // optional int32 ExtraParam2 = 10;
    if (has_extraparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extraparam2());
    }

    // optional bool IsIgnoreBlock = 14;
    if (has_isignoreblock()) {
      total_size += 1 + 1;
    }

    // optional bool AdjustByTargetCount = 15;
    if (has_adjustbytargetcount()) {
      total_size += 1 + 1;
    }

    // optional bool SkipDamage = 17;
    if (has_skipdamage()) {
      total_size += 2 + 1;
    }

    // optional bool UpperLimit = 18;
    if (has_upperlimit()) {
      total_size += 2 + 1;
    }

    // optional int32 UpperLimitParam = 19;
    if (has_upperlimitparam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upperlimitparam());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pb.SkillSpeicalAdjust SpecialAdjust = 20;
    if (has_specialadjust()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specialadjust());
    }

    // optional bool IsUseStateAdjust = 21;
    if (has_isusestateadjust()) {
      total_size += 2 + 1;
    }

    // optional int32 StateAdjustType = 22;
    if (has_stateadjusttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stateadjusttype());
    }

    // optional int32 SkillTunnel = 23;
    if (has_skilltunnel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilltunnel());
    }

    // optional bool LowerLimit = 24;
    if (has_lowerlimit()) {
      total_size += 2 + 1;
    }

    // optional int32 LowerLimitType = 25;
    if (has_lowerlimittype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lowerlimittype());
    }

    // optional int32 LowerLimitParam = 26;
    if (has_lowerlimitparam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lowerlimitparam());
    }

    // optional bool IgnoreShield = 27;
    if (has_ignoreshield()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool IgnoreBeDamageRage = 28;
    if (has_ignorebedamagerage()) {
      total_size += 2 + 1;
    }

    // optional int32 BuffId = 29;
    if (has_buffid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional bool HealByEffNum = 30;
    if (has_healbyeffnum()) {
      total_size += 2 + 1;
    }

    // optional int32 HealCoefficient = 31;
    if (has_healcoefficient()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->healcoefficient());
    }

    // optional int32 BuffId2 = 32;
    if (has_buffid2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid2());
    }

  }
  // repeated int32 AdjustData = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->adjustdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->adjustdata(i));
    }
    total_size += 2 * this->adjustdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDamageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDamageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDamageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDamageData::MergeFrom(const SkillDamageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  adjustdata_.MergeFrom(from.adjustdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_damagetype()) {
      set_damagetype(from.damagetype());
    }
    if (from.has_typeparam1()) {
      set_typeparam1(from.typeparam1());
    }
    if (from.has_typeparam2()) {
      set_typeparam2(from.typeparam2());
    }
    if (from.has_typeparam3()) {
      set_typeparam3(from.typeparam3());
    }
    if (from.has_crittype()) {
      set_crittype(from.crittype());
    }
    if (from.has_critparam()) {
      set_critparam(from.critparam());
    }
    if (from.has_critparam2()) {
      set_critparam2(from.critparam2());
    }
    if (from.has_extraarmourpiercing()) {
      set_extraarmourpiercing(from.extraarmourpiercing());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_extraparam1()) {
      set_extraparam1(from.extraparam1());
    }
    if (from.has_extraparam2()) {
      set_extraparam2(from.extraparam2());
    }
    if (from.has_isignoreblock()) {
      set_isignoreblock(from.isignoreblock());
    }
    if (from.has_adjustbytargetcount()) {
      set_adjustbytargetcount(from.adjustbytargetcount());
    }
    if (from.has_skipdamage()) {
      set_skipdamage(from.skipdamage());
    }
    if (from.has_upperlimit()) {
      set_upperlimit(from.upperlimit());
    }
    if (from.has_upperlimitparam()) {
      set_upperlimitparam(from.upperlimitparam());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_specialadjust()) {
      mutable_specialadjust()->::pb::SkillSpeicalAdjust::MergeFrom(from.specialadjust());
    }
    if (from.has_isusestateadjust()) {
      set_isusestateadjust(from.isusestateadjust());
    }
    if (from.has_stateadjusttype()) {
      set_stateadjusttype(from.stateadjusttype());
    }
    if (from.has_skilltunnel()) {
      set_skilltunnel(from.skilltunnel());
    }
    if (from.has_lowerlimit()) {
      set_lowerlimit(from.lowerlimit());
    }
    if (from.has_lowerlimittype()) {
      set_lowerlimittype(from.lowerlimittype());
    }
    if (from.has_lowerlimitparam()) {
      set_lowerlimitparam(from.lowerlimitparam());
    }
    if (from.has_ignoreshield()) {
      set_ignoreshield(from.ignoreshield());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ignorebedamagerage()) {
      set_ignorebedamagerage(from.ignorebedamagerage());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_healbyeffnum()) {
      set_healbyeffnum(from.healbyeffnum());
    }
    if (from.has_healcoefficient()) {
      set_healcoefficient(from.healcoefficient());
    }
    if (from.has_buffid2()) {
      set_buffid2(from.buffid2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDamageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDamageData::CopyFrom(const SkillDamageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDamageData::IsInitialized() const {

  return true;
}

void SkillDamageData::Swap(SkillDamageData* other) {
  if (other != this) {
    std::swap(damagetype_, other->damagetype_);
    std::swap(typeparam1_, other->typeparam1_);
    std::swap(typeparam2_, other->typeparam2_);
    std::swap(typeparam3_, other->typeparam3_);
    std::swap(crittype_, other->crittype_);
    std::swap(critparam_, other->critparam_);
    std::swap(critparam2_, other->critparam2_);
    std::swap(extraarmourpiercing_, other->extraarmourpiercing_);
    std::swap(extraparam1_, other->extraparam1_);
    std::swap(extraparam2_, other->extraparam2_);
    std::swap(isignoreblock_, other->isignoreblock_);
    std::swap(adjustbytargetcount_, other->adjustbytargetcount_);
    adjustdata_.Swap(&other->adjustdata_);
    std::swap(skipdamage_, other->skipdamage_);
    std::swap(upperlimit_, other->upperlimit_);
    std::swap(upperlimitparam_, other->upperlimitparam_);
    std::swap(specialadjust_, other->specialadjust_);
    std::swap(isusestateadjust_, other->isusestateadjust_);
    std::swap(stateadjusttype_, other->stateadjusttype_);
    std::swap(skilltunnel_, other->skilltunnel_);
    std::swap(lowerlimit_, other->lowerlimit_);
    std::swap(lowerlimittype_, other->lowerlimittype_);
    std::swap(lowerlimitparam_, other->lowerlimitparam_);
    std::swap(ignoreshield_, other->ignoreshield_);
    std::swap(ignorebedamagerage_, other->ignorebedamagerage_);
    std::swap(buffid_, other->buffid_);
    std::swap(healbyeffnum_, other->healbyeffnum_);
    std::swap(healcoefficient_, other->healcoefficient_);
    std::swap(buffid2_, other->buffid2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDamageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDamageData_descriptor_;
  metadata.reflection = SkillDamageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillHealData::kHealTypeFieldNumber;
const int SkillHealData::kTypeParam1FieldNumber;
const int SkillHealData::kTypeParam2FieldNumber;
const int SkillHealData::kTypeParam3FieldNumber;
const int SkillHealData::kCritTypeFieldNumber;
const int SkillHealData::kCritParamFieldNumber;
const int SkillHealData::kExtraParam1FieldNumber;
const int SkillHealData::kExtraParam2FieldNumber;
const int SkillHealData::kIsIgnoreBlockFieldNumber;
const int SkillHealData::kAdjustByTargetCountFieldNumber;
const int SkillHealData::kAdjustDataFieldNumber;
const int SkillHealData::kUpperLimitFieldNumber;
const int SkillHealData::kUpperLimitParamFieldNumber;
const int SkillHealData::kSpecialAdjustFieldNumber;
const int SkillHealData::kLowerLimitFieldNumber;
const int SkillHealData::kLowerLimitTypeFieldNumber;
const int SkillHealData::kLowerLimitParamFieldNumber;
const int SkillHealData::kBuffIdFieldNumber;
const int SkillHealData::kCritParam2FieldNumber;
#endif  // !_MSC_VER

SkillHealData::SkillHealData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillHealData)
}

void SkillHealData::InitAsDefaultInstance() {
  specialadjust_ = const_cast< ::pb::SkillSpeicalAdjust*>(&::pb::SkillSpeicalAdjust::default_instance());
}

SkillHealData::SkillHealData(const SkillHealData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillHealData)
}

void SkillHealData::SharedCtor() {
  _cached_size_ = 0;
  healtype_ = 0;
  typeparam1_ = 0;
  typeparam2_ = 0;
  typeparam3_ = 0;
  crittype_ = 0;
  critparam_ = 0;
  extraparam1_ = 0;
  extraparam2_ = 0;
  isignoreblock_ = false;
  adjustbytargetcount_ = false;
  upperlimit_ = false;
  upperlimitparam_ = 0;
  specialadjust_ = NULL;
  lowerlimit_ = false;
  lowerlimittype_ = 0;
  lowerlimitparam_ = 0;
  buffid_ = 0;
  critparam2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillHealData::~SkillHealData() {
  // @@protoc_insertion_point(destructor:pb.SkillHealData)
  SharedDtor();
}

void SkillHealData::SharedDtor() {
  if (this != default_instance_) {
    delete specialadjust_;
  }
}

void SkillHealData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillHealData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillHealData_descriptor_;
}

const SkillHealData& SkillHealData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillHealData* SkillHealData::default_instance_ = NULL;

SkillHealData* SkillHealData::New() const {
  return new SkillHealData;
}

void SkillHealData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillHealData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(healtype_, extraparam2_);
  }
  if (_has_bits_[8 / 32] & 64256) {
    ZR_(isignoreblock_, upperlimitparam_);
    if (has_specialadjust()) {
      if (specialadjust_ != NULL) specialadjust_->::pb::SkillSpeicalAdjust::Clear();
    }
    lowerlimittype_ = 0;
  }
  ZR_(lowerlimitparam_, critparam2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  adjustdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillHealData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillHealData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 HealType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &healtype_)));
          set_has_healtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TypeParam1;
        break;
      }

      // optional int32 TypeParam1 = 2;
      case 2: {
        if (tag == 16) {
         parse_TypeParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeparam1_)));
          set_has_typeparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TypeParam2;
        break;
      }

      // optional int32 TypeParam2 = 3;
      case 3: {
        if (tag == 24) {
         parse_TypeParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeparam2_)));
          set_has_typeparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TypeParam3;
        break;
      }

      // optional int32 TypeParam3 = 4;
      case 4: {
        if (tag == 32) {
         parse_TypeParam3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeparam3_)));
          set_has_typeparam3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CritType;
        break;
      }

      // optional int32 CritType = 5;
      case 5: {
        if (tag == 40) {
         parse_CritType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crittype_)));
          set_has_crittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CritParam;
        break;
      }

      // optional int32 CritParam = 6;
      case 6: {
        if (tag == 48) {
         parse_CritParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &critparam_)));
          set_has_critparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ExtraParam1;
        break;
      }

      // optional int32 ExtraParam1 = 8;
      case 8: {
        if (tag == 64) {
         parse_ExtraParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extraparam1_)));
          set_has_extraparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_ExtraParam2;
        break;
      }

      // optional int32 ExtraParam2 = 9;
      case 9: {
        if (tag == 72) {
         parse_ExtraParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &extraparam2_)));
          set_has_extraparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_IsIgnoreBlock;
        break;
      }

      // optional bool IsIgnoreBlock = 13;
      case 13: {
        if (tag == 104) {
         parse_IsIgnoreBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isignoreblock_)));
          set_has_isignoreblock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_AdjustByTargetCount;
        break;
      }

      // optional bool AdjustByTargetCount = 14;
      case 14: {
        if (tag == 112) {
         parse_AdjustByTargetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adjustbytargetcount_)));
          set_has_adjustbytargetcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_AdjustData;
        break;
      }

      // repeated int32 AdjustData = 15;
      case 15: {
        if (tag == 120) {
         parse_AdjustData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_adjustdata())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_adjustdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_AdjustData;
        if (input->ExpectTag(128)) goto parse_UpperLimit;
        break;
      }

      // optional bool UpperLimit = 16;
      case 16: {
        if (tag == 128) {
         parse_UpperLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upperlimit_)));
          set_has_upperlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_UpperLimitParam;
        break;
      }

      // optional int32 UpperLimitParam = 17;
      case 17: {
        if (tag == 136) {
         parse_UpperLimitParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upperlimitparam_)));
          set_has_upperlimitparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_SpecialAdjust;
        break;
      }

      // optional .pb.SkillSpeicalAdjust SpecialAdjust = 18;
      case 18: {
        if (tag == 146) {
         parse_SpecialAdjust:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_specialadjust()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_LowerLimit;
        break;
      }

      // optional bool LowerLimit = 19;
      case 19: {
        if (tag == 152) {
         parse_LowerLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lowerlimit_)));
          set_has_lowerlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_LowerLimitType;
        break;
      }

      // optional int32 LowerLimitType = 20;
      case 20: {
        if (tag == 160) {
         parse_LowerLimitType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowerlimittype_)));
          set_has_lowerlimittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_LowerLimitParam;
        break;
      }

      // optional int32 LowerLimitParam = 21;
      case 21: {
        if (tag == 168) {
         parse_LowerLimitParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lowerlimitparam_)));
          set_has_lowerlimitparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_BuffId;
        break;
      }

      // optional int32 BuffId = 22;
      case 22: {
        if (tag == 176) {
         parse_BuffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_CritParam2;
        break;
      }

      // optional int32 CritParam2 = 23;
      case 23: {
        if (tag == 184) {
         parse_CritParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &critparam2_)));
          set_has_critparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillHealData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillHealData)
  return false;
#undef DO_
}

void SkillHealData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillHealData)
  // optional int32 HealType = 1;
  if (has_healtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->healtype(), output);
  }

  // optional int32 TypeParam1 = 2;
  if (has_typeparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->typeparam1(), output);
  }

  // optional int32 TypeParam2 = 3;
  if (has_typeparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typeparam2(), output);
  }

  // optional int32 TypeParam3 = 4;
  if (has_typeparam3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->typeparam3(), output);
  }

  // optional int32 CritType = 5;
  if (has_crittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->crittype(), output);
  }

  // optional int32 CritParam = 6;
  if (has_critparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->critparam(), output);
  }

  // optional int32 ExtraParam1 = 8;
  if (has_extraparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->extraparam1(), output);
  }

  // optional int32 ExtraParam2 = 9;
  if (has_extraparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->extraparam2(), output);
  }

  // optional bool IsIgnoreBlock = 13;
  if (has_isignoreblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isignoreblock(), output);
  }

  // optional bool AdjustByTargetCount = 14;
  if (has_adjustbytargetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->adjustbytargetcount(), output);
  }

  // repeated int32 AdjustData = 15;
  for (int i = 0; i < this->adjustdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->adjustdata(i), output);
  }

  // optional bool UpperLimit = 16;
  if (has_upperlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->upperlimit(), output);
  }

  // optional int32 UpperLimitParam = 17;
  if (has_upperlimitparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->upperlimitparam(), output);
  }

  // optional .pb.SkillSpeicalAdjust SpecialAdjust = 18;
  if (has_specialadjust()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->specialadjust(), output);
  }

  // optional bool LowerLimit = 19;
  if (has_lowerlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->lowerlimit(), output);
  }

  // optional int32 LowerLimitType = 20;
  if (has_lowerlimittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->lowerlimittype(), output);
  }

  // optional int32 LowerLimitParam = 21;
  if (has_lowerlimitparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->lowerlimitparam(), output);
  }

  // optional int32 BuffId = 22;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->buffid(), output);
  }

  // optional int32 CritParam2 = 23;
  if (has_critparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->critparam2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillHealData)
}

::google::protobuf::uint8* SkillHealData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillHealData)
  // optional int32 HealType = 1;
  if (has_healtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->healtype(), target);
  }

  // optional int32 TypeParam1 = 2;
  if (has_typeparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->typeparam1(), target);
  }

  // optional int32 TypeParam2 = 3;
  if (has_typeparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typeparam2(), target);
  }

  // optional int32 TypeParam3 = 4;
  if (has_typeparam3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->typeparam3(), target);
  }

  // optional int32 CritType = 5;
  if (has_crittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->crittype(), target);
  }

  // optional int32 CritParam = 6;
  if (has_critparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->critparam(), target);
  }

  // optional int32 ExtraParam1 = 8;
  if (has_extraparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->extraparam1(), target);
  }

  // optional int32 ExtraParam2 = 9;
  if (has_extraparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->extraparam2(), target);
  }

  // optional bool IsIgnoreBlock = 13;
  if (has_isignoreblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isignoreblock(), target);
  }

  // optional bool AdjustByTargetCount = 14;
  if (has_adjustbytargetcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->adjustbytargetcount(), target);
  }

  // repeated int32 AdjustData = 15;
  for (int i = 0; i < this->adjustdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->adjustdata(i), target);
  }

  // optional bool UpperLimit = 16;
  if (has_upperlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->upperlimit(), target);
  }

  // optional int32 UpperLimitParam = 17;
  if (has_upperlimitparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->upperlimitparam(), target);
  }

  // optional .pb.SkillSpeicalAdjust SpecialAdjust = 18;
  if (has_specialadjust()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->specialadjust(), target);
  }

  // optional bool LowerLimit = 19;
  if (has_lowerlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->lowerlimit(), target);
  }

  // optional int32 LowerLimitType = 20;
  if (has_lowerlimittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->lowerlimittype(), target);
  }

  // optional int32 LowerLimitParam = 21;
  if (has_lowerlimitparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->lowerlimitparam(), target);
  }

  // optional int32 BuffId = 22;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->buffid(), target);
  }

  // optional int32 CritParam2 = 23;
  if (has_critparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->critparam2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillHealData)
  return target;
}

int SkillHealData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 HealType = 1;
    if (has_healtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->healtype());
    }

    // optional int32 TypeParam1 = 2;
    if (has_typeparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeparam1());
    }

    // optional int32 TypeParam2 = 3;
    if (has_typeparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeparam2());
    }

    // optional int32 TypeParam3 = 4;
    if (has_typeparam3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeparam3());
    }

    // optional int32 CritType = 5;
    if (has_crittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crittype());
    }

    // optional int32 CritParam = 6;
    if (has_critparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critparam());
    }

    // optional int32 ExtraParam1 = 8;
    if (has_extraparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extraparam1());
    }

    // optional int32 ExtraParam2 = 9;
    if (has_extraparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->extraparam2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool IsIgnoreBlock = 13;
    if (has_isignoreblock()) {
      total_size += 1 + 1;
    }

    // optional bool AdjustByTargetCount = 14;
    if (has_adjustbytargetcount()) {
      total_size += 1 + 1;
    }

    // optional bool UpperLimit = 16;
    if (has_upperlimit()) {
      total_size += 2 + 1;
    }

    // optional int32 UpperLimitParam = 17;
    if (has_upperlimitparam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upperlimitparam());
    }

    // optional .pb.SkillSpeicalAdjust SpecialAdjust = 18;
    if (has_specialadjust()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->specialadjust());
    }

    // optional bool LowerLimit = 19;
    if (has_lowerlimit()) {
      total_size += 2 + 1;
    }

    // optional int32 LowerLimitType = 20;
    if (has_lowerlimittype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lowerlimittype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 LowerLimitParam = 21;
    if (has_lowerlimitparam()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lowerlimitparam());
    }

    // optional int32 BuffId = 22;
    if (has_buffid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional int32 CritParam2 = 23;
    if (has_critparam2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->critparam2());
    }

  }
  // repeated int32 AdjustData = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->adjustdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->adjustdata(i));
    }
    total_size += 1 * this->adjustdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillHealData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillHealData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillHealData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillHealData::MergeFrom(const SkillHealData& from) {
  GOOGLE_CHECK_NE(&from, this);
  adjustdata_.MergeFrom(from.adjustdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_healtype()) {
      set_healtype(from.healtype());
    }
    if (from.has_typeparam1()) {
      set_typeparam1(from.typeparam1());
    }
    if (from.has_typeparam2()) {
      set_typeparam2(from.typeparam2());
    }
    if (from.has_typeparam3()) {
      set_typeparam3(from.typeparam3());
    }
    if (from.has_crittype()) {
      set_crittype(from.crittype());
    }
    if (from.has_critparam()) {
      set_critparam(from.critparam());
    }
    if (from.has_extraparam1()) {
      set_extraparam1(from.extraparam1());
    }
    if (from.has_extraparam2()) {
      set_extraparam2(from.extraparam2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isignoreblock()) {
      set_isignoreblock(from.isignoreblock());
    }
    if (from.has_adjustbytargetcount()) {
      set_adjustbytargetcount(from.adjustbytargetcount());
    }
    if (from.has_upperlimit()) {
      set_upperlimit(from.upperlimit());
    }
    if (from.has_upperlimitparam()) {
      set_upperlimitparam(from.upperlimitparam());
    }
    if (from.has_specialadjust()) {
      mutable_specialadjust()->::pb::SkillSpeicalAdjust::MergeFrom(from.specialadjust());
    }
    if (from.has_lowerlimit()) {
      set_lowerlimit(from.lowerlimit());
    }
    if (from.has_lowerlimittype()) {
      set_lowerlimittype(from.lowerlimittype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lowerlimitparam()) {
      set_lowerlimitparam(from.lowerlimitparam());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_critparam2()) {
      set_critparam2(from.critparam2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillHealData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillHealData::CopyFrom(const SkillHealData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillHealData::IsInitialized() const {

  return true;
}

void SkillHealData::Swap(SkillHealData* other) {
  if (other != this) {
    std::swap(healtype_, other->healtype_);
    std::swap(typeparam1_, other->typeparam1_);
    std::swap(typeparam2_, other->typeparam2_);
    std::swap(typeparam3_, other->typeparam3_);
    std::swap(crittype_, other->crittype_);
    std::swap(critparam_, other->critparam_);
    std::swap(extraparam1_, other->extraparam1_);
    std::swap(extraparam2_, other->extraparam2_);
    std::swap(isignoreblock_, other->isignoreblock_);
    std::swap(adjustbytargetcount_, other->adjustbytargetcount_);
    adjustdata_.Swap(&other->adjustdata_);
    std::swap(upperlimit_, other->upperlimit_);
    std::swap(upperlimitparam_, other->upperlimitparam_);
    std::swap(specialadjust_, other->specialadjust_);
    std::swap(lowerlimit_, other->lowerlimit_);
    std::swap(lowerlimittype_, other->lowerlimittype_);
    std::swap(lowerlimitparam_, other->lowerlimitparam_);
    std::swap(buffid_, other->buffid_);
    std::swap(critparam2_, other->critparam2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillHealData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillHealData_descriptor_;
  metadata.reflection = SkillHealData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillSummonObstacleData::kShapeTypeFieldNumber;
const int SkillSummonObstacleData::kShapeParam1FieldNumber;
const int SkillSummonObstacleData::kShapeParam2FieldNumber;
const int SkillSummonObstacleData::kPositionTypeFieldNumber;
const int SkillSummonObstacleData::kDistanceFieldNumber;
const int SkillSummonObstacleData::kBuffIdFieldNumber;
const int SkillSummonObstacleData::kLastTimeFieldNumber;
const int SkillSummonObstacleData::kTargetTypeFieldNumber;
#endif  // !_MSC_VER

SkillSummonObstacleData::SkillSummonObstacleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillSummonObstacleData)
}

void SkillSummonObstacleData::InitAsDefaultInstance() {
}

SkillSummonObstacleData::SkillSummonObstacleData(const SkillSummonObstacleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillSummonObstacleData)
}

void SkillSummonObstacleData::SharedCtor() {
  _cached_size_ = 0;
  shapetype_ = 0;
  shapeparam1_ = 0;
  shapeparam2_ = 0;
  positiontype_ = 0;
  distance_ = 0;
  buffid_ = 0;
  lasttime_ = 0;
  targettype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillSummonObstacleData::~SkillSummonObstacleData() {
  // @@protoc_insertion_point(destructor:pb.SkillSummonObstacleData)
  SharedDtor();
}

void SkillSummonObstacleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillSummonObstacleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillSummonObstacleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillSummonObstacleData_descriptor_;
}

const SkillSummonObstacleData& SkillSummonObstacleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillSummonObstacleData* SkillSummonObstacleData::default_instance_ = NULL;

SkillSummonObstacleData* SkillSummonObstacleData::New() const {
  return new SkillSummonObstacleData;
}

void SkillSummonObstacleData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillSummonObstacleData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(shapetype_, targettype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillSummonObstacleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillSummonObstacleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ShapeType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shapetype_)));
          set_has_shapetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ShapeParam1;
        break;
      }

      // optional int32 ShapeParam1 = 2;
      case 2: {
        if (tag == 16) {
         parse_ShapeParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shapeparam1_)));
          set_has_shapeparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ShapeParam2;
        break;
      }

      // optional int32 ShapeParam2 = 3;
      case 3: {
        if (tag == 24) {
         parse_ShapeParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shapeparam2_)));
          set_has_shapeparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PositionType;
        break;
      }

      // optional int32 PositionType = 4;
      case 4: {
        if (tag == 32) {
         parse_PositionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positiontype_)));
          set_has_positiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Distance;
        break;
      }

      // optional int32 Distance = 5;
      case 5: {
        if (tag == 40) {
         parse_Distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BuffId;
        break;
      }

      // optional int32 BuffId = 6;
      case 6: {
        if (tag == 48) {
         parse_BuffId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LastTime;
        break;
      }

      // optional int32 LastTime = 7;
      case 7: {
        if (tag == 56) {
         parse_LastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_TargetType;
        break;
      }

      // optional int32 TargetType = 9;
      case 9: {
        if (tag == 72) {
         parse_TargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targettype_)));
          set_has_targettype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillSummonObstacleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillSummonObstacleData)
  return false;
#undef DO_
}

void SkillSummonObstacleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillSummonObstacleData)
  // optional int32 ShapeType = 1;
  if (has_shapetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->shapetype(), output);
  }

  // optional int32 ShapeParam1 = 2;
  if (has_shapeparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shapeparam1(), output);
  }

  // optional int32 ShapeParam2 = 3;
  if (has_shapeparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->shapeparam2(), output);
  }

  // optional int32 PositionType = 4;
  if (has_positiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->positiontype(), output);
  }

  // optional int32 Distance = 5;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->distance(), output);
  }

  // optional int32 BuffId = 6;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->buffid(), output);
  }

  // optional int32 LastTime = 7;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lasttime(), output);
  }

  // optional int32 TargetType = 9;
  if (has_targettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->targettype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillSummonObstacleData)
}

::google::protobuf::uint8* SkillSummonObstacleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillSummonObstacleData)
  // optional int32 ShapeType = 1;
  if (has_shapetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->shapetype(), target);
  }

  // optional int32 ShapeParam1 = 2;
  if (has_shapeparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shapeparam1(), target);
  }

  // optional int32 ShapeParam2 = 3;
  if (has_shapeparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->shapeparam2(), target);
  }

  // optional int32 PositionType = 4;
  if (has_positiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->positiontype(), target);
  }

  // optional int32 Distance = 5;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->distance(), target);
  }

  // optional int32 BuffId = 6;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->buffid(), target);
  }

  // optional int32 LastTime = 7;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lasttime(), target);
  }

  // optional int32 TargetType = 9;
  if (has_targettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->targettype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillSummonObstacleData)
  return target;
}

int SkillSummonObstacleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ShapeType = 1;
    if (has_shapetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shapetype());
    }

    // optional int32 ShapeParam1 = 2;
    if (has_shapeparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shapeparam1());
    }

    // optional int32 ShapeParam2 = 3;
    if (has_shapeparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shapeparam2());
    }

    // optional int32 PositionType = 4;
    if (has_positiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positiontype());
    }

    // optional int32 Distance = 5;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

    // optional int32 BuffId = 6;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffid());
    }

    // optional int32 LastTime = 7;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional int32 TargetType = 9;
    if (has_targettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targettype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillSummonObstacleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillSummonObstacleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillSummonObstacleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillSummonObstacleData::MergeFrom(const SkillSummonObstacleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shapetype()) {
      set_shapetype(from.shapetype());
    }
    if (from.has_shapeparam1()) {
      set_shapeparam1(from.shapeparam1());
    }
    if (from.has_shapeparam2()) {
      set_shapeparam2(from.shapeparam2());
    }
    if (from.has_positiontype()) {
      set_positiontype(from.positiontype());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_targettype()) {
      set_targettype(from.targettype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillSummonObstacleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillSummonObstacleData::CopyFrom(const SkillSummonObstacleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillSummonObstacleData::IsInitialized() const {

  return true;
}

void SkillSummonObstacleData::Swap(SkillSummonObstacleData* other) {
  if (other != this) {
    std::swap(shapetype_, other->shapetype_);
    std::swap(shapeparam1_, other->shapeparam1_);
    std::swap(shapeparam2_, other->shapeparam2_);
    std::swap(positiontype_, other->positiontype_);
    std::swap(distance_, other->distance_);
    std::swap(buffid_, other->buffid_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(targettype_, other->targettype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillSummonObstacleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillSummonObstacleData_descriptor_;
  metadata.reflection = SkillSummonObstacleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillSummonData::kIDFieldNumber;
const int SkillSummonData::kNumFieldNumber;
const int SkillSummonData::kPositonFieldNumber;
const int SkillSummonData::kFormationFieldNumber;
const int SkillSummonData::kMinDistanceFieldNumber;
const int SkillSummonData::kBornEffectFieldNumber;
const int SkillSummonData::kBornSoundFieldNumber;
const int SkillSummonData::kLevelTypeFieldNumber;
const int SkillSummonData::kLevelParamFieldNumber;
const int SkillSummonData::kLastTimeTypeFieldNumber;
const int SkillSummonData::kLastTimeParamFieldNumber;
const int SkillSummonData::kCanOverScreenFieldNumber;
const int SkillSummonData::kMaxSameIDUnitFieldNumber;
const int SkillSummonData::kDeleteSameIDUnitFieldNumber;
const int SkillSummonData::kAddBuffIDFieldNumber;
const int SkillSummonData::kInheritAttributeFieldNumber;
const int SkillSummonData::kInheritPercentageFieldNumber;
const int SkillSummonData::kUseRefTargetAsBlueprintFieldNumber;
const int SkillSummonData::kInheritAttributeFromRefTargetFieldNumber;
const int SkillSummonData::kInheritAttributeFromAncestorFieldNumber;
const int SkillSummonData::kVerticalPositionFieldNumber;
const int SkillSummonData::kIsNoKillRageBonusFieldNumber;
const int SkillSummonData::kPositionVectorArrFieldNumber;
const int SkillSummonData::kUseFixedRateFieldNumber;
#endif  // !_MSC_VER

SkillSummonData::SkillSummonData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillSummonData)
}

void SkillSummonData::InitAsDefaultInstance() {
}

SkillSummonData::SkillSummonData(const SkillSummonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillSummonData)
}

void SkillSummonData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  positon_ = 0;
  formation_ = 0;
  mindistance_ = 0;
  borneffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bornsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leveltype_ = 0;
  levelparam_ = 0;
  lasttimetype_ = 0;
  lasttimeparam_ = 0;
  canoverscreen_ = false;
  maxsameidunit_ = 0;
  deletesameidunit_ = false;
  inheritattribute_ = false;
  inheritpercentage_ = 0;
  usereftargetasblueprint_ = false;
  inheritattributefromreftarget_ = false;
  inheritattributefromancestor_ = false;
  verticalposition_ = 0;
  isnokillragebonus_ = false;
  usefixedrate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillSummonData::~SkillSummonData() {
  // @@protoc_insertion_point(destructor:pb.SkillSummonData)
  SharedDtor();
}

void SkillSummonData::SharedDtor() {
  if (borneffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borneffect_;
  }
  if (bornsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bornsound_;
  }
  if (this != default_instance_) {
  }
}

void SkillSummonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillSummonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillSummonData_descriptor_;
}

const SkillSummonData& SkillSummonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillSummonData* SkillSummonData::default_instance_ = NULL;

SkillSummonData* SkillSummonData::New() const {
  return new SkillSummonData;
}

void SkillSummonData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillSummonData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 252) {
    ZR_(positon_, formation_);
    ZR_(mindistance_, leveltype_);
    if (has_borneffect()) {
      if (borneffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borneffect_->clear();
      }
    }
    if (has_bornsound()) {
      if (bornsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bornsound_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 48896) {
    ZR_(levelparam_, maxsameidunit_);
    ZR_(canoverscreen_, inheritattribute_);
  }
  if (_has_bits_[16 / 32] & 12517376) {
    ZR_(usereftargetasblueprint_, usefixedrate_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  id_.Clear();
  num_.Clear();
  addbuffid_.Clear();
  positionvectorarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillSummonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillSummonData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ID = 1;
      case 1: {
        if (tag == 8) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ID;
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // repeated int32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_num())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        if (input->ExpectTag(24)) goto parse_Positon;
        break;
      }

      // optional int32 Positon = 3;
      case 3: {
        if (tag == 24) {
         parse_Positon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positon_)));
          set_has_positon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Formation;
        break;
      }

      // optional int32 Formation = 4;
      case 4: {
        if (tag == 32) {
         parse_Formation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formation_)));
          set_has_formation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MinDistance;
        break;
      }

      // optional int32 MinDistance = 5;
      case 5: {
        if (tag == 40) {
         parse_MinDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mindistance_)));
          set_has_mindistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_BornEffect;
        break;
      }

      // optional string BornEffect = 6;
      case 6: {
        if (tag == 50) {
         parse_BornEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_borneffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->borneffect().data(), this->borneffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "borneffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_BornSound;
        break;
      }

      // optional string BornSound = 7;
      case 7: {
        if (tag == 58) {
         parse_BornSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bornsound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bornsound().data(), this->bornsound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bornsound");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_LevelType;
        break;
      }

      // optional int32 LevelType = 8;
      case 8: {
        if (tag == 64) {
         parse_LevelType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leveltype_)));
          set_has_leveltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_LevelParam;
        break;
      }

      // optional int32 LevelParam = 9;
      case 9: {
        if (tag == 72) {
         parse_LevelParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelparam_)));
          set_has_levelparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_LastTimeType;
        break;
      }

      // optional int32 LastTimeType = 10;
      case 10: {
        if (tag == 80) {
         parse_LastTimeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttimetype_)));
          set_has_lasttimetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_LastTimeParam;
        break;
      }

      // optional int32 LastTimeParam = 11;
      case 11: {
        if (tag == 88) {
         parse_LastTimeParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttimeparam_)));
          set_has_lasttimeparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_CanOverScreen;
        break;
      }

      // optional bool CanOverScreen = 12;
      case 12: {
        if (tag == 96) {
         parse_CanOverScreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canoverscreen_)));
          set_has_canoverscreen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_MaxSameIDUnit;
        break;
      }

      // optional int32 MaxSameIDUnit = 13;
      case 13: {
        if (tag == 104) {
         parse_MaxSameIDUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxsameidunit_)));
          set_has_maxsameidunit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_DeleteSameIDUnit;
        break;
      }

      // optional bool DeleteSameIDUnit = 14;
      case 14: {
        if (tag == 112) {
         parse_DeleteSameIDUnit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deletesameidunit_)));
          set_has_deletesameidunit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_AddBuffID;
        break;
      }

      // repeated int32 AddBuffID = 15;
      case 15: {
        if (tag == 120) {
         parse_AddBuffID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 120, input, this->mutable_addbuffid())));
        } else if (tag == 122) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_addbuffid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_AddBuffID;
        if (input->ExpectTag(128)) goto parse_InheritAttribute;
        break;
      }

      // optional bool InheritAttribute = 16;
      case 16: {
        if (tag == 128) {
         parse_InheritAttribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inheritattribute_)));
          set_has_inheritattribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_InheritPercentage;
        break;
      }

      // optional int32 InheritPercentage = 17;
      case 17: {
        if (tag == 136) {
         parse_InheritPercentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inheritpercentage_)));
          set_has_inheritpercentage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_UseRefTargetAsBlueprint;
        break;
      }

      // optional bool UseRefTargetAsBlueprint = 18;
      case 18: {
        if (tag == 144) {
         parse_UseRefTargetAsBlueprint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usereftargetasblueprint_)));
          set_has_usereftargetasblueprint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_InheritAttributeFromRefTarget;
        break;
      }

      // optional bool InheritAttributeFromRefTarget = 19;
      case 19: {
        if (tag == 152) {
         parse_InheritAttributeFromRefTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inheritattributefromreftarget_)));
          set_has_inheritattributefromreftarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_InheritAttributeFromAncestor;
        break;
      }

      // optional bool InheritAttributeFromAncestor = 20;
      case 20: {
        if (tag == 160) {
         parse_InheritAttributeFromAncestor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inheritattributefromancestor_)));
          set_has_inheritattributefromancestor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_VerticalPosition;
        break;
      }

      // optional int32 VerticalPosition = 21;
      case 21: {
        if (tag == 168) {
         parse_VerticalPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &verticalposition_)));
          set_has_verticalposition();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_IsNoKillRageBonus;
        break;
      }

      // optional bool IsNoKillRageBonus = 22;
      case 22: {
        if (tag == 176) {
         parse_IsNoKillRageBonus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnokillragebonus_)));
          set_has_isnokillragebonus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_PositionVectorArr;
        break;
      }

      // repeated int32 PositionVectorArr = 23;
      case 23: {
        if (tag == 184) {
         parse_PositionVectorArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 184, input, this->mutable_positionvectorarr())));
        } else if (tag == 186) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_positionvectorarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_PositionVectorArr;
        if (input->ExpectTag(192)) goto parse_UseFixedRate;
        break;
      }

      // optional bool UseFixedRate = 24;
      case 24: {
        if (tag == 192) {
         parse_UseFixedRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usefixedrate_)));
          set_has_usefixedrate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillSummonData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillSummonData)
  return false;
#undef DO_
}

void SkillSummonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillSummonData)
  // repeated int32 ID = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }

  // repeated int32 Num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->num(i), output);
  }

  // optional int32 Positon = 3;
  if (has_positon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->positon(), output);
  }

  // optional int32 Formation = 4;
  if (has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->formation(), output);
  }

  // optional int32 MinDistance = 5;
  if (has_mindistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mindistance(), output);
  }

  // optional string BornEffect = 6;
  if (has_borneffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->borneffect().data(), this->borneffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "borneffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->borneffect(), output);
  }

  // optional string BornSound = 7;
  if (has_bornsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bornsound().data(), this->bornsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bornsound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->bornsound(), output);
  }

  // optional int32 LevelType = 8;
  if (has_leveltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->leveltype(), output);
  }

  // optional int32 LevelParam = 9;
  if (has_levelparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->levelparam(), output);
  }

  // optional int32 LastTimeType = 10;
  if (has_lasttimetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lasttimetype(), output);
  }

  // optional int32 LastTimeParam = 11;
  if (has_lasttimeparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lasttimeparam(), output);
  }

  // optional bool CanOverScreen = 12;
  if (has_canoverscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->canoverscreen(), output);
  }

  // optional int32 MaxSameIDUnit = 13;
  if (has_maxsameidunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxsameidunit(), output);
  }

  // optional bool DeleteSameIDUnit = 14;
  if (has_deletesameidunit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->deletesameidunit(), output);
  }

  // repeated int32 AddBuffID = 15;
  for (int i = 0; i < this->addbuffid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      15, this->addbuffid(i), output);
  }

  // optional bool InheritAttribute = 16;
  if (has_inheritattribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->inheritattribute(), output);
  }

  // optional int32 InheritPercentage = 17;
  if (has_inheritpercentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->inheritpercentage(), output);
  }

  // optional bool UseRefTargetAsBlueprint = 18;
  if (has_usereftargetasblueprint()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->usereftargetasblueprint(), output);
  }

  // optional bool InheritAttributeFromRefTarget = 19;
  if (has_inheritattributefromreftarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->inheritattributefromreftarget(), output);
  }

  // optional bool InheritAttributeFromAncestor = 20;
  if (has_inheritattributefromancestor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->inheritattributefromancestor(), output);
  }

  // optional int32 VerticalPosition = 21;
  if (has_verticalposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->verticalposition(), output);
  }

  // optional bool IsNoKillRageBonus = 22;
  if (has_isnokillragebonus()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->isnokillragebonus(), output);
  }

  // repeated int32 PositionVectorArr = 23;
  for (int i = 0; i < this->positionvectorarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      23, this->positionvectorarr(i), output);
  }

  // optional bool UseFixedRate = 24;
  if (has_usefixedrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->usefixedrate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillSummonData)
}

::google::protobuf::uint8* SkillSummonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillSummonData)
  // repeated int32 ID = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }

  // repeated int32 Num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->num(i), target);
  }

  // optional int32 Positon = 3;
  if (has_positon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->positon(), target);
  }

  // optional int32 Formation = 4;
  if (has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->formation(), target);
  }

  // optional int32 MinDistance = 5;
  if (has_mindistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mindistance(), target);
  }

  // optional string BornEffect = 6;
  if (has_borneffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->borneffect().data(), this->borneffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "borneffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->borneffect(), target);
  }

  // optional string BornSound = 7;
  if (has_bornsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bornsound().data(), this->bornsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bornsound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bornsound(), target);
  }

  // optional int32 LevelType = 8;
  if (has_leveltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->leveltype(), target);
  }

  // optional int32 LevelParam = 9;
  if (has_levelparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->levelparam(), target);
  }

  // optional int32 LastTimeType = 10;
  if (has_lasttimetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lasttimetype(), target);
  }

  // optional int32 LastTimeParam = 11;
  if (has_lasttimeparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lasttimeparam(), target);
  }

  // optional bool CanOverScreen = 12;
  if (has_canoverscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->canoverscreen(), target);
  }

  // optional int32 MaxSameIDUnit = 13;
  if (has_maxsameidunit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxsameidunit(), target);
  }

  // optional bool DeleteSameIDUnit = 14;
  if (has_deletesameidunit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->deletesameidunit(), target);
  }

  // repeated int32 AddBuffID = 15;
  for (int i = 0; i < this->addbuffid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(15, this->addbuffid(i), target);
  }

  // optional bool InheritAttribute = 16;
  if (has_inheritattribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->inheritattribute(), target);
  }

  // optional int32 InheritPercentage = 17;
  if (has_inheritpercentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->inheritpercentage(), target);
  }

  // optional bool UseRefTargetAsBlueprint = 18;
  if (has_usereftargetasblueprint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->usereftargetasblueprint(), target);
  }

  // optional bool InheritAttributeFromRefTarget = 19;
  if (has_inheritattributefromreftarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->inheritattributefromreftarget(), target);
  }

  // optional bool InheritAttributeFromAncestor = 20;
  if (has_inheritattributefromancestor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->inheritattributefromancestor(), target);
  }

  // optional int32 VerticalPosition = 21;
  if (has_verticalposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->verticalposition(), target);
  }

  // optional bool IsNoKillRageBonus = 22;
  if (has_isnokillragebonus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->isnokillragebonus(), target);
  }

  // repeated int32 PositionVectorArr = 23;
  for (int i = 0; i < this->positionvectorarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(23, this->positionvectorarr(i), target);
  }

  // optional bool UseFixedRate = 24;
  if (has_usefixedrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->usefixedrate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillSummonData)
  return target;
}

int SkillSummonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 Positon = 3;
    if (has_positon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positon());
    }

    // optional int32 Formation = 4;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->formation());
    }

    // optional int32 MinDistance = 5;
    if (has_mindistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mindistance());
    }

    // optional string BornEffect = 6;
    if (has_borneffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->borneffect());
    }

    // optional string BornSound = 7;
    if (has_bornsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bornsound());
    }

    // optional int32 LevelType = 8;
    if (has_leveltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leveltype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 LevelParam = 9;
    if (has_levelparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelparam());
    }

    // optional int32 LastTimeType = 10;
    if (has_lasttimetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttimetype());
    }

    // optional int32 LastTimeParam = 11;
    if (has_lasttimeparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttimeparam());
    }

    // optional bool CanOverScreen = 12;
    if (has_canoverscreen()) {
      total_size += 1 + 1;
    }

    // optional int32 MaxSameIDUnit = 13;
    if (has_maxsameidunit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxsameidunit());
    }

    // optional bool DeleteSameIDUnit = 14;
    if (has_deletesameidunit()) {
      total_size += 1 + 1;
    }

    // optional bool InheritAttribute = 16;
    if (has_inheritattribute()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 InheritPercentage = 17;
    if (has_inheritpercentage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inheritpercentage());
    }

    // optional bool UseRefTargetAsBlueprint = 18;
    if (has_usereftargetasblueprint()) {
      total_size += 2 + 1;
    }

    // optional bool InheritAttributeFromRefTarget = 19;
    if (has_inheritattributefromreftarget()) {
      total_size += 2 + 1;
    }

    // optional bool InheritAttributeFromAncestor = 20;
    if (has_inheritattributefromancestor()) {
      total_size += 2 + 1;
    }

    // optional int32 VerticalPosition = 21;
    if (has_verticalposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->verticalposition());
    }

    // optional bool IsNoKillRageBonus = 22;
    if (has_isnokillragebonus()) {
      total_size += 2 + 1;
    }

    // optional bool UseFixedRate = 24;
    if (has_usefixedrate()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 ID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  // repeated int32 Num = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  // repeated int32 AddBuffID = 15;
  {
    int data_size = 0;
    for (int i = 0; i < this->addbuffid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->addbuffid(i));
    }
    total_size += 1 * this->addbuffid_size() + data_size;
  }

  // repeated int32 PositionVectorArr = 23;
  {
    int data_size = 0;
    for (int i = 0; i < this->positionvectorarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->positionvectorarr(i));
    }
    total_size += 2 * this->positionvectorarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillSummonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillSummonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillSummonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillSummonData::MergeFrom(const SkillSummonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  num_.MergeFrom(from.num_);
  addbuffid_.MergeFrom(from.addbuffid_);
  positionvectorarr_.MergeFrom(from.positionvectorarr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_positon()) {
      set_positon(from.positon());
    }
    if (from.has_formation()) {
      set_formation(from.formation());
    }
    if (from.has_mindistance()) {
      set_mindistance(from.mindistance());
    }
    if (from.has_borneffect()) {
      set_borneffect(from.borneffect());
    }
    if (from.has_bornsound()) {
      set_bornsound(from.bornsound());
    }
    if (from.has_leveltype()) {
      set_leveltype(from.leveltype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_levelparam()) {
      set_levelparam(from.levelparam());
    }
    if (from.has_lasttimetype()) {
      set_lasttimetype(from.lasttimetype());
    }
    if (from.has_lasttimeparam()) {
      set_lasttimeparam(from.lasttimeparam());
    }
    if (from.has_canoverscreen()) {
      set_canoverscreen(from.canoverscreen());
    }
    if (from.has_maxsameidunit()) {
      set_maxsameidunit(from.maxsameidunit());
    }
    if (from.has_deletesameidunit()) {
      set_deletesameidunit(from.deletesameidunit());
    }
    if (from.has_inheritattribute()) {
      set_inheritattribute(from.inheritattribute());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_inheritpercentage()) {
      set_inheritpercentage(from.inheritpercentage());
    }
    if (from.has_usereftargetasblueprint()) {
      set_usereftargetasblueprint(from.usereftargetasblueprint());
    }
    if (from.has_inheritattributefromreftarget()) {
      set_inheritattributefromreftarget(from.inheritattributefromreftarget());
    }
    if (from.has_inheritattributefromancestor()) {
      set_inheritattributefromancestor(from.inheritattributefromancestor());
    }
    if (from.has_verticalposition()) {
      set_verticalposition(from.verticalposition());
    }
    if (from.has_isnokillragebonus()) {
      set_isnokillragebonus(from.isnokillragebonus());
    }
    if (from.has_usefixedrate()) {
      set_usefixedrate(from.usefixedrate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillSummonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillSummonData::CopyFrom(const SkillSummonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillSummonData::IsInitialized() const {

  return true;
}

void SkillSummonData::Swap(SkillSummonData* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    num_.Swap(&other->num_);
    std::swap(positon_, other->positon_);
    std::swap(formation_, other->formation_);
    std::swap(mindistance_, other->mindistance_);
    std::swap(borneffect_, other->borneffect_);
    std::swap(bornsound_, other->bornsound_);
    std::swap(leveltype_, other->leveltype_);
    std::swap(levelparam_, other->levelparam_);
    std::swap(lasttimetype_, other->lasttimetype_);
    std::swap(lasttimeparam_, other->lasttimeparam_);
    std::swap(canoverscreen_, other->canoverscreen_);
    std::swap(maxsameidunit_, other->maxsameidunit_);
    std::swap(deletesameidunit_, other->deletesameidunit_);
    addbuffid_.Swap(&other->addbuffid_);
    std::swap(inheritattribute_, other->inheritattribute_);
    std::swap(inheritpercentage_, other->inheritpercentage_);
    std::swap(usereftargetasblueprint_, other->usereftargetasblueprint_);
    std::swap(inheritattributefromreftarget_, other->inheritattributefromreftarget_);
    std::swap(inheritattributefromancestor_, other->inheritattributefromancestor_);
    std::swap(verticalposition_, other->verticalposition_);
    std::swap(isnokillragebonus_, other->isnokillragebonus_);
    positionvectorarr_.Swap(&other->positionvectorarr_);
    std::swap(usefixedrate_, other->usefixedrate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillSummonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillSummonData_descriptor_;
  metadata.reflection = SkillSummonData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillRebornData::kLifeTypeFieldNumber;
const int SkillRebornData::kLifeParam1FieldNumber;
const int SkillRebornData::kLifeParam2FieldNumber;
const int SkillRebornData::kPositonFieldNumber;
const int SkillRebornData::kFormationFieldNumber;
const int SkillRebornData::kMinDistanceFieldNumber;
const int SkillRebornData::kBornEffectFieldNumber;
const int SkillRebornData::kBornSoundFieldNumber;
const int SkillRebornData::kLastTimeTypeFieldNumber;
const int SkillRebornData::kLastTimeParamFieldNumber;
const int SkillRebornData::kCanOverScreenFieldNumber;
const int SkillRebornData::kResetCooldownFieldNumber;
#endif  // !_MSC_VER

SkillRebornData::SkillRebornData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillRebornData)
}

void SkillRebornData::InitAsDefaultInstance() {
}

SkillRebornData::SkillRebornData(const SkillRebornData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillRebornData)
}

void SkillRebornData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lifetype_ = 0;
  lifeparam1_ = 0;
  lifeparam2_ = 0;
  positon_ = 0;
  formation_ = 0;
  mindistance_ = 0;
  borneffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bornsound_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasttimetype_ = 0;
  lasttimeparam_ = 0;
  canoverscreen_ = false;
  resetcooldown_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillRebornData::~SkillRebornData() {
  // @@protoc_insertion_point(destructor:pb.SkillRebornData)
  SharedDtor();
}

void SkillRebornData::SharedDtor() {
  if (borneffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete borneffect_;
  }
  if (bornsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bornsound_;
  }
  if (this != default_instance_) {
  }
}

void SkillRebornData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillRebornData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillRebornData_descriptor_;
}

const SkillRebornData& SkillRebornData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillRebornData* SkillRebornData::default_instance_ = NULL;

SkillRebornData* SkillRebornData::New() const {
  return new SkillRebornData;
}

void SkillRebornData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillRebornData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(lifetype_, mindistance_);
    if (has_borneffect()) {
      if (borneffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        borneffect_->clear();
      }
    }
    if (has_bornsound()) {
      if (bornsound_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bornsound_->clear();
      }
    }
  }
  ZR_(lasttimetype_, resetcooldown_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillRebornData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillRebornData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 LifeType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lifetype_)));
          set_has_lifetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LifeParam1;
        break;
      }

      // optional int32 LifeParam1 = 2;
      case 2: {
        if (tag == 16) {
         parse_LifeParam1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lifeparam1_)));
          set_has_lifeparam1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LifeParam2;
        break;
      }

      // optional int32 LifeParam2 = 3;
      case 3: {
        if (tag == 24) {
         parse_LifeParam2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lifeparam2_)));
          set_has_lifeparam2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Positon;
        break;
      }

      // optional int32 Positon = 4;
      case 4: {
        if (tag == 32) {
         parse_Positon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positon_)));
          set_has_positon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Formation;
        break;
      }

      // optional int32 Formation = 5;
      case 5: {
        if (tag == 40) {
         parse_Formation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formation_)));
          set_has_formation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MinDistance;
        break;
      }

      // optional int32 MinDistance = 6;
      case 6: {
        if (tag == 48) {
         parse_MinDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mindistance_)));
          set_has_mindistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_BornEffect;
        break;
      }

      // optional string BornEffect = 7;
      case 7: {
        if (tag == 58) {
         parse_BornEffect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_borneffect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->borneffect().data(), this->borneffect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "borneffect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_BornSound;
        break;
      }

      // optional string BornSound = 8;
      case 8: {
        if (tag == 66) {
         parse_BornSound:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bornsound()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bornsound().data(), this->bornsound().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bornsound");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_LastTimeType;
        break;
      }

      // optional int32 LastTimeType = 9;
      case 9: {
        if (tag == 72) {
         parse_LastTimeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttimetype_)));
          set_has_lasttimetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_LastTimeParam;
        break;
      }

      // optional int32 LastTimeParam = 10;
      case 10: {
        if (tag == 80) {
         parse_LastTimeParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttimeparam_)));
          set_has_lasttimeparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_CanOverScreen;
        break;
      }

      // optional bool CanOverScreen = 11;
      case 11: {
        if (tag == 88) {
         parse_CanOverScreen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canoverscreen_)));
          set_has_canoverscreen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_ResetCooldown;
        break;
      }

      // optional bool ResetCooldown = 13;
      case 13: {
        if (tag == 104) {
         parse_ResetCooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resetcooldown_)));
          set_has_resetcooldown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillRebornData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillRebornData)
  return false;
#undef DO_
}

void SkillRebornData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillRebornData)
  // optional int32 LifeType = 1;
  if (has_lifetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lifetype(), output);
  }

  // optional int32 LifeParam1 = 2;
  if (has_lifeparam1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lifeparam1(), output);
  }

  // optional int32 LifeParam2 = 3;
  if (has_lifeparam2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lifeparam2(), output);
  }

  // optional int32 Positon = 4;
  if (has_positon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->positon(), output);
  }

  // optional int32 Formation = 5;
  if (has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->formation(), output);
  }

  // optional int32 MinDistance = 6;
  if (has_mindistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mindistance(), output);
  }

  // optional string BornEffect = 7;
  if (has_borneffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->borneffect().data(), this->borneffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "borneffect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->borneffect(), output);
  }

  // optional string BornSound = 8;
  if (has_bornsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bornsound().data(), this->bornsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bornsound");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->bornsound(), output);
  }

  // optional int32 LastTimeType = 9;
  if (has_lasttimetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lasttimetype(), output);
  }

  // optional int32 LastTimeParam = 10;
  if (has_lasttimeparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lasttimeparam(), output);
  }

  // optional bool CanOverScreen = 11;
  if (has_canoverscreen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->canoverscreen(), output);
  }

  // optional bool ResetCooldown = 13;
  if (has_resetcooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->resetcooldown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillRebornData)
}

::google::protobuf::uint8* SkillRebornData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillRebornData)
  // optional int32 LifeType = 1;
  if (has_lifetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lifetype(), target);
  }

  // optional int32 LifeParam1 = 2;
  if (has_lifeparam1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lifeparam1(), target);
  }

  // optional int32 LifeParam2 = 3;
  if (has_lifeparam2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lifeparam2(), target);
  }

  // optional int32 Positon = 4;
  if (has_positon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->positon(), target);
  }

  // optional int32 Formation = 5;
  if (has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->formation(), target);
  }

  // optional int32 MinDistance = 6;
  if (has_mindistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mindistance(), target);
  }

  // optional string BornEffect = 7;
  if (has_borneffect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->borneffect().data(), this->borneffect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "borneffect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->borneffect(), target);
  }

  // optional string BornSound = 8;
  if (has_bornsound()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bornsound().data(), this->bornsound().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bornsound");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->bornsound(), target);
  }

  // optional int32 LastTimeType = 9;
  if (has_lasttimetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lasttimetype(), target);
  }

  // optional int32 LastTimeParam = 10;
  if (has_lasttimeparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lasttimeparam(), target);
  }

  // optional bool CanOverScreen = 11;
  if (has_canoverscreen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->canoverscreen(), target);
  }

  // optional bool ResetCooldown = 13;
  if (has_resetcooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->resetcooldown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillRebornData)
  return target;
}

int SkillRebornData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 LifeType = 1;
    if (has_lifetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lifetype());
    }

    // optional int32 LifeParam1 = 2;
    if (has_lifeparam1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lifeparam1());
    }

    // optional int32 LifeParam2 = 3;
    if (has_lifeparam2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lifeparam2());
    }

    // optional int32 Positon = 4;
    if (has_positon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positon());
    }

    // optional int32 Formation = 5;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->formation());
    }

    // optional int32 MinDistance = 6;
    if (has_mindistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mindistance());
    }

    // optional string BornEffect = 7;
    if (has_borneffect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->borneffect());
    }

    // optional string BornSound = 8;
    if (has_bornsound()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bornsound());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 LastTimeType = 9;
    if (has_lasttimetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttimetype());
    }

    // optional int32 LastTimeParam = 10;
    if (has_lasttimeparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttimeparam());
    }

    // optional bool CanOverScreen = 11;
    if (has_canoverscreen()) {
      total_size += 1 + 1;
    }

    // optional bool ResetCooldown = 13;
    if (has_resetcooldown()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillRebornData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillRebornData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillRebornData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillRebornData::MergeFrom(const SkillRebornData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lifetype()) {
      set_lifetype(from.lifetype());
    }
    if (from.has_lifeparam1()) {
      set_lifeparam1(from.lifeparam1());
    }
    if (from.has_lifeparam2()) {
      set_lifeparam2(from.lifeparam2());
    }
    if (from.has_positon()) {
      set_positon(from.positon());
    }
    if (from.has_formation()) {
      set_formation(from.formation());
    }
    if (from.has_mindistance()) {
      set_mindistance(from.mindistance());
    }
    if (from.has_borneffect()) {
      set_borneffect(from.borneffect());
    }
    if (from.has_bornsound()) {
      set_bornsound(from.bornsound());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lasttimetype()) {
      set_lasttimetype(from.lasttimetype());
    }
    if (from.has_lasttimeparam()) {
      set_lasttimeparam(from.lasttimeparam());
    }
    if (from.has_canoverscreen()) {
      set_canoverscreen(from.canoverscreen());
    }
    if (from.has_resetcooldown()) {
      set_resetcooldown(from.resetcooldown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillRebornData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillRebornData::CopyFrom(const SkillRebornData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillRebornData::IsInitialized() const {

  return true;
}

void SkillRebornData::Swap(SkillRebornData* other) {
  if (other != this) {
    std::swap(lifetype_, other->lifetype_);
    std::swap(lifeparam1_, other->lifeparam1_);
    std::swap(lifeparam2_, other->lifeparam2_);
    std::swap(positon_, other->positon_);
    std::swap(formation_, other->formation_);
    std::swap(mindistance_, other->mindistance_);
    std::swap(borneffect_, other->borneffect_);
    std::swap(bornsound_, other->bornsound_);
    std::swap(lasttimetype_, other->lasttimetype_);
    std::swap(lasttimeparam_, other->lasttimeparam_);
    std::swap(canoverscreen_, other->canoverscreen_);
    std::swap(resetcooldown_, other->resetcooldown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillRebornData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillRebornData_descriptor_;
  metadata.reflection = SkillRebornData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillGrabData::kSelfGrabSocketFieldNumber;
const int SkillGrabData::kLastTimeFieldNumber;
const int SkillGrabData::kCanBeRefTargetFieldNumber;
const int SkillGrabData::kCanBeEffectTargetFieldNumber;
const int SkillGrabData::kAnimOnPlayFieldNumber;
const int SkillGrabData::kDamageTimeFieldNumber;
const int SkillGrabData::kOffsetOfSlotFieldNumber;
#endif  // !_MSC_VER

SkillGrabData::SkillGrabData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillGrabData)
}

void SkillGrabData::InitAsDefaultInstance() {
}

SkillGrabData::SkillGrabData(const SkillGrabData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillGrabData)
}

void SkillGrabData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  selfgrabsocket_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lasttime_ = 0;
  canbereftarget_ = false;
  canbeeffecttarget_ = false;
  animonplay_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  damagetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillGrabData::~SkillGrabData() {
  // @@protoc_insertion_point(destructor:pb.SkillGrabData)
  SharedDtor();
}

void SkillGrabData::SharedDtor() {
  if (selfgrabsocket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete selfgrabsocket_;
  }
  if (animonplay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete animonplay_;
  }
  if (this != default_instance_) {
  }
}

void SkillGrabData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillGrabData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillGrabData_descriptor_;
}

const SkillGrabData& SkillGrabData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillGrabData* SkillGrabData::default_instance_ = NULL;

SkillGrabData* SkillGrabData::New() const {
  return new SkillGrabData;
}

void SkillGrabData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillGrabData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(lasttime_, canbeeffecttarget_);
    if (has_selfgrabsocket()) {
      if (selfgrabsocket_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        selfgrabsocket_->clear();
      }
    }
    if (has_animonplay()) {
      if (animonplay_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        animonplay_->clear();
      }
    }
    damagetime_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  offsetofslot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillGrabData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillGrabData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string SelfGrabSocket = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_selfgrabsocket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->selfgrabsocket().data(), this->selfgrabsocket().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "selfgrabsocket");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LastTime;
        break;
      }

      // optional int32 LastTime = 3;
      case 3: {
        if (tag == 24) {
         parse_LastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_CanBeRefTarget;
        break;
      }

      // optional bool CanBeRefTarget = 4;
      case 4: {
        if (tag == 32) {
         parse_CanBeRefTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbereftarget_)));
          set_has_canbereftarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CanBeEffectTarget;
        break;
      }

      // optional bool CanBeEffectTarget = 5;
      case 5: {
        if (tag == 40) {
         parse_CanBeEffectTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canbeeffecttarget_)));
          set_has_canbeeffecttarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AnimOnPlay;
        break;
      }

      // optional string AnimOnPlay = 6;
      case 6: {
        if (tag == 50) {
         parse_AnimOnPlay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_animonplay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->animonplay().data(), this->animonplay().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "animonplay");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DamageTime;
        break;
      }

      // optional int32 DamageTime = 7;
      case 7: {
        if (tag == 56) {
         parse_DamageTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damagetime_)));
          set_has_damagetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_OffsetOfSlot;
        break;
      }

      // repeated int32 OffsetOfSlot = 8;
      case 8: {
        if (tag == 64) {
         parse_OffsetOfSlot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_offsetofslot())));
        } else if (tag == 66) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_offsetofslot())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_OffsetOfSlot;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillGrabData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillGrabData)
  return false;
#undef DO_
}

void SkillGrabData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillGrabData)
  // optional string SelfGrabSocket = 1;
  if (has_selfgrabsocket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selfgrabsocket().data(), this->selfgrabsocket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "selfgrabsocket");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->selfgrabsocket(), output);
  }

  // optional int32 LastTime = 3;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lasttime(), output);
  }

  // optional bool CanBeRefTarget = 4;
  if (has_canbereftarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->canbereftarget(), output);
  }

  // optional bool CanBeEffectTarget = 5;
  if (has_canbeeffecttarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->canbeeffecttarget(), output);
  }

  // optional string AnimOnPlay = 6;
  if (has_animonplay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animonplay().data(), this->animonplay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animonplay");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->animonplay(), output);
  }

  // optional int32 DamageTime = 7;
  if (has_damagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->damagetime(), output);
  }

  // repeated int32 OffsetOfSlot = 8;
  for (int i = 0; i < this->offsetofslot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->offsetofslot(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillGrabData)
}

::google::protobuf::uint8* SkillGrabData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillGrabData)
  // optional string SelfGrabSocket = 1;
  if (has_selfgrabsocket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->selfgrabsocket().data(), this->selfgrabsocket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "selfgrabsocket");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->selfgrabsocket(), target);
  }

  // optional int32 LastTime = 3;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lasttime(), target);
  }

  // optional bool CanBeRefTarget = 4;
  if (has_canbereftarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->canbereftarget(), target);
  }

  // optional bool CanBeEffectTarget = 5;
  if (has_canbeeffecttarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->canbeeffecttarget(), target);
  }

  // optional string AnimOnPlay = 6;
  if (has_animonplay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->animonplay().data(), this->animonplay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "animonplay");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->animonplay(), target);
  }

  // optional int32 DamageTime = 7;
  if (has_damagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->damagetime(), target);
  }

  // repeated int32 OffsetOfSlot = 8;
  for (int i = 0; i < this->offsetofslot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->offsetofslot(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillGrabData)
  return target;
}

int SkillGrabData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string SelfGrabSocket = 1;
    if (has_selfgrabsocket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->selfgrabsocket());
    }

    // optional int32 LastTime = 3;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lasttime());
    }

    // optional bool CanBeRefTarget = 4;
    if (has_canbereftarget()) {
      total_size += 1 + 1;
    }

    // optional bool CanBeEffectTarget = 5;
    if (has_canbeeffecttarget()) {
      total_size += 1 + 1;
    }

    // optional string AnimOnPlay = 6;
    if (has_animonplay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->animonplay());
    }

    // optional int32 DamageTime = 7;
    if (has_damagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damagetime());
    }

  }
  // repeated int32 OffsetOfSlot = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->offsetofslot_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->offsetofslot(i));
    }
    total_size += 1 * this->offsetofslot_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillGrabData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillGrabData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillGrabData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillGrabData::MergeFrom(const SkillGrabData& from) {
  GOOGLE_CHECK_NE(&from, this);
  offsetofslot_.MergeFrom(from.offsetofslot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfgrabsocket()) {
      set_selfgrabsocket(from.selfgrabsocket());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_canbereftarget()) {
      set_canbereftarget(from.canbereftarget());
    }
    if (from.has_canbeeffecttarget()) {
      set_canbeeffecttarget(from.canbeeffecttarget());
    }
    if (from.has_animonplay()) {
      set_animonplay(from.animonplay());
    }
    if (from.has_damagetime()) {
      set_damagetime(from.damagetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillGrabData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillGrabData::CopyFrom(const SkillGrabData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillGrabData::IsInitialized() const {

  return true;
}

void SkillGrabData::Swap(SkillGrabData* other) {
  if (other != this) {
    std::swap(selfgrabsocket_, other->selfgrabsocket_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(canbereftarget_, other->canbereftarget_);
    std::swap(canbeeffecttarget_, other->canbeeffecttarget_);
    std::swap(animonplay_, other->animonplay_);
    std::swap(damagetime_, other->damagetime_);
    offsetofslot_.Swap(&other->offsetofslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillGrabData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillGrabData_descriptor_;
  metadata.reflection = SkillGrabData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillEnergyRecoverData::kParam1FieldNumber;
const int SkillEnergyRecoverData::kParam2FieldNumber;
const int SkillEnergyRecoverData::kAdjustByTargetCountFieldNumber;
const int SkillEnergyRecoverData::kAdjustDataFieldNumber;
#endif  // !_MSC_VER

SkillEnergyRecoverData::SkillEnergyRecoverData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillEnergyRecoverData)
}

void SkillEnergyRecoverData::InitAsDefaultInstance() {
}

SkillEnergyRecoverData::SkillEnergyRecoverData(const SkillEnergyRecoverData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillEnergyRecoverData)
}

void SkillEnergyRecoverData::SharedCtor() {
  _cached_size_ = 0;
  param1_ = 0;
  param2_ = 0;
  adjustbytargetcount_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillEnergyRecoverData::~SkillEnergyRecoverData() {
  // @@protoc_insertion_point(destructor:pb.SkillEnergyRecoverData)
  SharedDtor();
}

void SkillEnergyRecoverData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillEnergyRecoverData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillEnergyRecoverData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillEnergyRecoverData_descriptor_;
}

const SkillEnergyRecoverData& SkillEnergyRecoverData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillEnergyRecoverData* SkillEnergyRecoverData::default_instance_ = NULL;

SkillEnergyRecoverData* SkillEnergyRecoverData::New() const {
  return new SkillEnergyRecoverData;
}

void SkillEnergyRecoverData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillEnergyRecoverData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(param1_, param2_);
    adjustbytargetcount_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  adjustdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillEnergyRecoverData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillEnergyRecoverData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Param1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Param2;
        break;
      }

      // optional int32 Param2 = 2;
      case 2: {
        if (tag == 16) {
         parse_Param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AdjustByTargetCount;
        break;
      }

      // optional bool AdjustByTargetCount = 3;
      case 3: {
        if (tag == 24) {
         parse_AdjustByTargetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &adjustbytargetcount_)));
          set_has_adjustbytargetcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AdjustData;
        break;
      }

      // repeated int32 AdjustData = 4;
      case 4: {
        if (tag == 32) {
         parse_AdjustData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_adjustdata())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_adjustdata())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AdjustData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillEnergyRecoverData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillEnergyRecoverData)
  return false;
#undef DO_
}

void SkillEnergyRecoverData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillEnergyRecoverData)
  // optional int32 Param1 = 1;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->param1(), output);
  }

  // optional int32 Param2 = 2;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->param2(), output);
  }

  // optional bool AdjustByTargetCount = 3;
  if (has_adjustbytargetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->adjustbytargetcount(), output);
  }

  // repeated int32 AdjustData = 4;
  for (int i = 0; i < this->adjustdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->adjustdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillEnergyRecoverData)
}

::google::protobuf::uint8* SkillEnergyRecoverData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillEnergyRecoverData)
  // optional int32 Param1 = 1;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->param1(), target);
  }

  // optional int32 Param2 = 2;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->param2(), target);
  }

  // optional bool AdjustByTargetCount = 3;
  if (has_adjustbytargetcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->adjustbytargetcount(), target);
  }

  // repeated int32 AdjustData = 4;
  for (int i = 0; i < this->adjustdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->adjustdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillEnergyRecoverData)
  return target;
}

int SkillEnergyRecoverData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Param1 = 1;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param1());
    }

    // optional int32 Param2 = 2;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param2());
    }

    // optional bool AdjustByTargetCount = 3;
    if (has_adjustbytargetcount()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 AdjustData = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->adjustdata_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->adjustdata(i));
    }
    total_size += 1 * this->adjustdata_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillEnergyRecoverData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillEnergyRecoverData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillEnergyRecoverData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillEnergyRecoverData::MergeFrom(const SkillEnergyRecoverData& from) {
  GOOGLE_CHECK_NE(&from, this);
  adjustdata_.MergeFrom(from.adjustdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param1()) {
      set_param1(from.param1());
    }
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_adjustbytargetcount()) {
      set_adjustbytargetcount(from.adjustbytargetcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillEnergyRecoverData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillEnergyRecoverData::CopyFrom(const SkillEnergyRecoverData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillEnergyRecoverData::IsInitialized() const {

  return true;
}

void SkillEnergyRecoverData::Swap(SkillEnergyRecoverData* other) {
  if (other != this) {
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(adjustbytargetcount_, other->adjustbytargetcount_);
    adjustdata_.Swap(&other->adjustdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillEnergyRecoverData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillEnergyRecoverData_descriptor_;
  metadata.reflection = SkillEnergyRecoverData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillSubSkillData::kIDFieldNumber;
const int SkillSubSkillData::kLevelTypeFieldNumber;
const int SkillSubSkillData::kLevelParamFieldNumber;
const int SkillSubSkillData::kIsListenBreakFieldNumber;
const int SkillSubSkillData::kDelayTimeFieldNumber;
const int SkillSubSkillData::kIsFollowFieldNumber;
const int SkillSubSkillData::kIsFollowRealTargetFieldNumber;
const int SkillSubSkillData::kUseProbabilisticSubSkillFieldNumber;
const int SkillSubSkillData::kProbabilisticParamsFieldNumber;
const int SkillSubSkillData::kProbabilisticSkillsFieldNumber;
const int SkillSubSkillData::kLevelSubSkillFieldNumber;
const int SkillSubSkillData::kLevelProbSkillFieldNumber;
#endif  // !_MSC_VER

SkillSubSkillData::SkillSubSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillSubSkillData)
}

void SkillSubSkillData::InitAsDefaultInstance() {
}

SkillSubSkillData::SkillSubSkillData(const SkillSubSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillSubSkillData)
}

void SkillSubSkillData::SharedCtor() {
  _cached_size_ = 0;
  leveltype_ = 0;
  levelparam_ = 0;
  islistenbreak_ = false;
  delaytime_ = 0;
  isfollow_ = false;
  isfollowrealtarget_ = false;
  useprobabilisticsubskill_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillSubSkillData::~SkillSubSkillData() {
  // @@protoc_insertion_point(destructor:pb.SkillSubSkillData)
  SharedDtor();
}

void SkillSubSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillSubSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillSubSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillSubSkillData_descriptor_;
}

const SkillSubSkillData& SkillSubSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillSubSkillData* SkillSubSkillData::default_instance_ = NULL;

SkillSubSkillData* SkillSubSkillData::New() const {
  return new SkillSubSkillData;
}

void SkillSubSkillData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillSubSkillData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 254) {
    ZR_(leveltype_, useprobabilisticsubskill_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  id_.Clear();
  probabilisticparams_.Clear();
  probabilisticskills_.Clear();
  levelsubskill_.Clear();
  levelprobskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillSubSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillSubSkillData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 ID = 1;
      case 1: {
        if (tag == 8) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ID;
        if (input->ExpectTag(24)) goto parse_LevelType;
        break;
      }

      // optional int32 LevelType = 3;
      case 3: {
        if (tag == 24) {
         parse_LevelType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leveltype_)));
          set_has_leveltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_LevelParam;
        break;
      }

      // optional int32 LevelParam = 4;
      case 4: {
        if (tag == 32) {
         parse_LevelParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelparam_)));
          set_has_levelparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsListenBreak;
        break;
      }

      // optional bool IsListenBreak = 5;
      case 5: {
        if (tag == 40) {
         parse_IsListenBreak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islistenbreak_)));
          set_has_islistenbreak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DelayTime;
        break;
      }

      // optional int32 DelayTime = 6;
      case 6: {
        if (tag == 48) {
         parse_DelayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delaytime_)));
          set_has_delaytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_IsFollow;
        break;
      }

      // optional bool IsFollow = 7;
      case 7: {
        if (tag == 56) {
         parse_IsFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfollow_)));
          set_has_isfollow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_IsFollowRealTarget;
        break;
      }

      // optional bool IsFollowRealTarget = 8;
      case 8: {
        if (tag == 64) {
         parse_IsFollowRealTarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfollowrealtarget_)));
          set_has_isfollowrealtarget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_UseProbabilisticSubSkill;
        break;
      }

      // optional bool UseProbabilisticSubSkill = 9;
      case 9: {
        if (tag == 72) {
         parse_UseProbabilisticSubSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useprobabilisticsubskill_)));
          set_has_useprobabilisticsubskill();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ProbabilisticParams;
        break;
      }

      // repeated int32 ProbabilisticParams = 10;
      case 10: {
        if (tag == 80) {
         parse_ProbabilisticParams:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_probabilisticparams())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_probabilisticparams())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_ProbabilisticParams;
        if (input->ExpectTag(88)) goto parse_ProbabilisticSkills;
        break;
      }

      // repeated int32 ProbabilisticSkills = 11;
      case 11: {
        if (tag == 88) {
         parse_ProbabilisticSkills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 88, input, this->mutable_probabilisticskills())));
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_probabilisticskills())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ProbabilisticSkills;
        if (input->ExpectTag(98)) goto parse_LevelSubSkill;
        break;
      }

      // repeated .pb.SkillLevelSubSkill LevelSubSkill = 12;
      case 12: {
        if (tag == 98) {
         parse_LevelSubSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelsubskill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_LevelSubSkill;
        if (input->ExpectTag(106)) goto parse_LevelProbSkill;
        break;
      }

      // repeated .pb.SkillLevelProbSkill LevelProbSkill = 13;
      case 13: {
        if (tag == 106) {
         parse_LevelProbSkill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_levelprobskill()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_LevelProbSkill;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillSubSkillData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillSubSkillData)
  return false;
#undef DO_
}

void SkillSubSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillSubSkillData)
  // repeated int32 ID = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }

  // optional int32 LevelType = 3;
  if (has_leveltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->leveltype(), output);
  }

  // optional int32 LevelParam = 4;
  if (has_levelparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->levelparam(), output);
  }

  // optional bool IsListenBreak = 5;
  if (has_islistenbreak()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->islistenbreak(), output);
  }

  // optional int32 DelayTime = 6;
  if (has_delaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->delaytime(), output);
  }

  // optional bool IsFollow = 7;
  if (has_isfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isfollow(), output);
  }

  // optional bool IsFollowRealTarget = 8;
  if (has_isfollowrealtarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isfollowrealtarget(), output);
  }

  // optional bool UseProbabilisticSubSkill = 9;
  if (has_useprobabilisticsubskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->useprobabilisticsubskill(), output);
  }

  // repeated int32 ProbabilisticParams = 10;
  for (int i = 0; i < this->probabilisticparams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->probabilisticparams(i), output);
  }

  // repeated int32 ProbabilisticSkills = 11;
  for (int i = 0; i < this->probabilisticskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      11, this->probabilisticskills(i), output);
  }

  // repeated .pb.SkillLevelSubSkill LevelSubSkill = 12;
  for (int i = 0; i < this->levelsubskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->levelsubskill(i), output);
  }

  // repeated .pb.SkillLevelProbSkill LevelProbSkill = 13;
  for (int i = 0; i < this->levelprobskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->levelprobskill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillSubSkillData)
}

::google::protobuf::uint8* SkillSubSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillSubSkillData)
  // repeated int32 ID = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }

  // optional int32 LevelType = 3;
  if (has_leveltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->leveltype(), target);
  }

  // optional int32 LevelParam = 4;
  if (has_levelparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->levelparam(), target);
  }

  // optional bool IsListenBreak = 5;
  if (has_islistenbreak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->islistenbreak(), target);
  }

  // optional int32 DelayTime = 6;
  if (has_delaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->delaytime(), target);
  }

  // optional bool IsFollow = 7;
  if (has_isfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isfollow(), target);
  }

  // optional bool IsFollowRealTarget = 8;
  if (has_isfollowrealtarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isfollowrealtarget(), target);
  }

  // optional bool UseProbabilisticSubSkill = 9;
  if (has_useprobabilisticsubskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->useprobabilisticsubskill(), target);
  }

  // repeated int32 ProbabilisticParams = 10;
  for (int i = 0; i < this->probabilisticparams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->probabilisticparams(i), target);
  }

  // repeated int32 ProbabilisticSkills = 11;
  for (int i = 0; i < this->probabilisticskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(11, this->probabilisticskills(i), target);
  }

  // repeated .pb.SkillLevelSubSkill LevelSubSkill = 12;
  for (int i = 0; i < this->levelsubskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->levelsubskill(i), target);
  }

  // repeated .pb.SkillLevelProbSkill LevelProbSkill = 13;
  for (int i = 0; i < this->levelprobskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->levelprobskill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillSubSkillData)
  return target;
}

int SkillSubSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 LevelType = 3;
    if (has_leveltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leveltype());
    }

    // optional int32 LevelParam = 4;
    if (has_levelparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelparam());
    }

    // optional bool IsListenBreak = 5;
    if (has_islistenbreak()) {
      total_size += 1 + 1;
    }

    // optional int32 DelayTime = 6;
    if (has_delaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->delaytime());
    }

    // optional bool IsFollow = 7;
    if (has_isfollow()) {
      total_size += 1 + 1;
    }

    // optional bool IsFollowRealTarget = 8;
    if (has_isfollowrealtarget()) {
      total_size += 1 + 1;
    }

    // optional bool UseProbabilisticSubSkill = 9;
    if (has_useprobabilisticsubskill()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 ID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  // repeated int32 ProbabilisticParams = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->probabilisticparams_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->probabilisticparams(i));
    }
    total_size += 1 * this->probabilisticparams_size() + data_size;
  }

  // repeated int32 ProbabilisticSkills = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->probabilisticskills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->probabilisticskills(i));
    }
    total_size += 1 * this->probabilisticskills_size() + data_size;
  }

  // repeated .pb.SkillLevelSubSkill LevelSubSkill = 12;
  total_size += 1 * this->levelsubskill_size();
  for (int i = 0; i < this->levelsubskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelsubskill(i));
  }

  // repeated .pb.SkillLevelProbSkill LevelProbSkill = 13;
  total_size += 1 * this->levelprobskill_size();
  for (int i = 0; i < this->levelprobskill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->levelprobskill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillSubSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillSubSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillSubSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillSubSkillData::MergeFrom(const SkillSubSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  probabilisticparams_.MergeFrom(from.probabilisticparams_);
  probabilisticskills_.MergeFrom(from.probabilisticskills_);
  levelsubskill_.MergeFrom(from.levelsubskill_);
  levelprobskill_.MergeFrom(from.levelprobskill_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_leveltype()) {
      set_leveltype(from.leveltype());
    }
    if (from.has_levelparam()) {
      set_levelparam(from.levelparam());
    }
    if (from.has_islistenbreak()) {
      set_islistenbreak(from.islistenbreak());
    }
    if (from.has_delaytime()) {
      set_delaytime(from.delaytime());
    }
    if (from.has_isfollow()) {
      set_isfollow(from.isfollow());
    }
    if (from.has_isfollowrealtarget()) {
      set_isfollowrealtarget(from.isfollowrealtarget());
    }
    if (from.has_useprobabilisticsubskill()) {
      set_useprobabilisticsubskill(from.useprobabilisticsubskill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillSubSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillSubSkillData::CopyFrom(const SkillSubSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillSubSkillData::IsInitialized() const {

  return true;
}

void SkillSubSkillData::Swap(SkillSubSkillData* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(leveltype_, other->leveltype_);
    std::swap(levelparam_, other->levelparam_);
    std::swap(islistenbreak_, other->islistenbreak_);
    std::swap(delaytime_, other->delaytime_);
    std::swap(isfollow_, other->isfollow_);
    std::swap(isfollowrealtarget_, other->isfollowrealtarget_);
    std::swap(useprobabilisticsubskill_, other->useprobabilisticsubskill_);
    probabilisticparams_.Swap(&other->probabilisticparams_);
    probabilisticskills_.Swap(&other->probabilisticskills_);
    levelsubskill_.Swap(&other->levelsubskill_);
    levelprobskill_.Swap(&other->levelprobskill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillSubSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillSubSkillData_descriptor_;
  metadata.reflection = SkillSubSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillData::kIDFieldNumber;
const int SkillData::kBaseDataFieldNumber;
const int SkillData::kEffectDataFieldNumber;
const int SkillData::kHitDataFieldNumber;
const int SkillData::kMoveDataFieldNumber;
const int SkillData::kEnergyDrawDataFieldNumber;
const int SkillData::kEnergyAssisDataFieldNumber;
const int SkillData::kLifeStealDataFieldNumber;
const int SkillData::kDamageDataFieldNumber;
const int SkillData::kHealDataFieldNumber;
const int SkillData::kSummonDataFieldNumber;
const int SkillData::kRebornDataFieldNumber;
const int SkillData::kEnergyRecoverDataFieldNumber;
const int SkillData::kSubSkillDataFieldNumber;
const int SkillData::kCurvaDataFieldNumber;
const int SkillData::kGrabDataFieldNumber;
const int SkillData::kSummonObstacleDataFieldNumber;
const int SkillData::kMusouRecoverDataFieldNumber;
#endif  // !_MSC_VER

SkillData::SkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SkillData)
}

void SkillData::InitAsDefaultInstance() {
  basedata_ = const_cast< ::pb::SkillBaseData*>(&::pb::SkillBaseData::default_instance());
  effectdata_ = const_cast< ::pb::SkillEffectData*>(&::pb::SkillEffectData::default_instance());
  hitdata_ = const_cast< ::pb::SkillHitData*>(&::pb::SkillHitData::default_instance());
  movedata_ = const_cast< ::pb::SkillMoveData*>(&::pb::SkillMoveData::default_instance());
  energydrawdata_ = const_cast< ::pb::SkillEnergyDrawData*>(&::pb::SkillEnergyDrawData::default_instance());
  energyassisdata_ = const_cast< ::pb::SkillEnergyAssistData*>(&::pb::SkillEnergyAssistData::default_instance());
  lifestealdata_ = const_cast< ::pb::SkillLifeStealData*>(&::pb::SkillLifeStealData::default_instance());
  damagedata_ = const_cast< ::pb::SkillDamageData*>(&::pb::SkillDamageData::default_instance());
  healdata_ = const_cast< ::pb::SkillHealData*>(&::pb::SkillHealData::default_instance());
  summondata_ = const_cast< ::pb::SkillSummonData*>(&::pb::SkillSummonData::default_instance());
  reborndata_ = const_cast< ::pb::SkillRebornData*>(&::pb::SkillRebornData::default_instance());
  energyrecoverdata_ = const_cast< ::pb::SkillEnergyRecoverData*>(&::pb::SkillEnergyRecoverData::default_instance());
  subskilldata_ = const_cast< ::pb::SkillSubSkillData*>(&::pb::SkillSubSkillData::default_instance());
  curvadata_ = const_cast< ::pb::SkillCurveData*>(&::pb::SkillCurveData::default_instance());
  grabdata_ = const_cast< ::pb::SkillGrabData*>(&::pb::SkillGrabData::default_instance());
  summonobstacledata_ = const_cast< ::pb::SkillSummonObstacleData*>(&::pb::SkillSummonObstacleData::default_instance());
  musourecoverdata_ = const_cast< ::pb::SkillEnergyRecoverData*>(&::pb::SkillEnergyRecoverData::default_instance());
}

SkillData::SkillData(const SkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SkillData)
}

void SkillData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  basedata_ = NULL;
  effectdata_ = NULL;
  hitdata_ = NULL;
  movedata_ = NULL;
  energydrawdata_ = NULL;
  energyassisdata_ = NULL;
  lifestealdata_ = NULL;
  damagedata_ = NULL;
  healdata_ = NULL;
  summondata_ = NULL;
  reborndata_ = NULL;
  energyrecoverdata_ = NULL;
  subskilldata_ = NULL;
  curvadata_ = NULL;
  grabdata_ = NULL;
  summonobstacledata_ = NULL;
  musourecoverdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillData::~SkillData() {
  // @@protoc_insertion_point(destructor:pb.SkillData)
  SharedDtor();
}

void SkillData::SharedDtor() {
  if (this != default_instance_) {
    delete basedata_;
    delete effectdata_;
    delete hitdata_;
    delete movedata_;
    delete energydrawdata_;
    delete energyassisdata_;
    delete lifestealdata_;
    delete damagedata_;
    delete healdata_;
    delete summondata_;
    delete reborndata_;
    delete energyrecoverdata_;
    delete subskilldata_;
    delete curvadata_;
    delete grabdata_;
    delete summonobstacledata_;
    delete musourecoverdata_;
  }
}

void SkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillData_descriptor_;
}

const SkillData& SkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSkillData_2eproto();
  return *default_instance_;
}

SkillData* SkillData::default_instance_ = NULL;

SkillData* SkillData::New() const {
  return new SkillData;
}

void SkillData::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    id_ = 0;
    if (has_basedata()) {
      if (basedata_ != NULL) basedata_->::pb::SkillBaseData::Clear();
    }
    if (has_effectdata()) {
      if (effectdata_ != NULL) effectdata_->::pb::SkillEffectData::Clear();
    }
    if (has_hitdata()) {
      if (hitdata_ != NULL) hitdata_->::pb::SkillHitData::Clear();
    }
    if (has_movedata()) {
      if (movedata_ != NULL) movedata_->::pb::SkillMoveData::Clear();
    }
    if (has_energydrawdata()) {
      if (energydrawdata_ != NULL) energydrawdata_->::pb::SkillEnergyDrawData::Clear();
    }
    if (has_energyassisdata()) {
      if (energyassisdata_ != NULL) energyassisdata_->::pb::SkillEnergyAssistData::Clear();
    }
    if (has_lifestealdata()) {
      if (lifestealdata_ != NULL) lifestealdata_->::pb::SkillLifeStealData::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    if (has_damagedata()) {
      if (damagedata_ != NULL) damagedata_->::pb::SkillDamageData::Clear();
    }
    if (has_healdata()) {
      if (healdata_ != NULL) healdata_->::pb::SkillHealData::Clear();
    }
    if (has_summondata()) {
      if (summondata_ != NULL) summondata_->::pb::SkillSummonData::Clear();
    }
    if (has_reborndata()) {
      if (reborndata_ != NULL) reborndata_->::pb::SkillRebornData::Clear();
    }
    if (has_energyrecoverdata()) {
      if (energyrecoverdata_ != NULL) energyrecoverdata_->::pb::SkillEnergyRecoverData::Clear();
    }
    if (has_subskilldata()) {
      if (subskilldata_ != NULL) subskilldata_->::pb::SkillSubSkillData::Clear();
    }
    if (has_curvadata()) {
      if (curvadata_ != NULL) curvadata_->::pb::SkillCurveData::Clear();
    }
    if (has_grabdata()) {
      if (grabdata_ != NULL) grabdata_->::pb::SkillGrabData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 196608) {
    if (has_summonobstacledata()) {
      if (summonobstacledata_ != NULL) summonobstacledata_->::pb::SkillSummonObstacleData::Clear();
    }
    if (has_musourecoverdata()) {
      if (musourecoverdata_ != NULL) musourecoverdata_->::pb::SkillEnergyRecoverData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SkillData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BaseData;
        break;
      }

      // optional .pb.SkillBaseData BaseData = 2;
      case 2: {
        if (tag == 18) {
         parse_BaseData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_EffectData;
        break;
      }

      // optional .pb.SkillEffectData EffectData = 3;
      case 3: {
        if (tag == 26) {
         parse_EffectData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_effectdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_HitData;
        break;
      }

      // optional .pb.SkillHitData HitData = 4;
      case 4: {
        if (tag == 34) {
         parse_HitData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hitdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_MoveData;
        break;
      }

      // optional .pb.SkillMoveData MoveData = 5;
      case 5: {
        if (tag == 42) {
         parse_MoveData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_movedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_EnergyDrawData;
        break;
      }

      // optional .pb.SkillEnergyDrawData EnergyDrawData = 6;
      case 6: {
        if (tag == 50) {
         parse_EnergyDrawData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_energydrawdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_EnergyAssisData;
        break;
      }

      // optional .pb.SkillEnergyAssistData EnergyAssisData = 7;
      case 7: {
        if (tag == 58) {
         parse_EnergyAssisData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_energyassisdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_LifeStealData;
        break;
      }

      // optional .pb.SkillLifeStealData LifeStealData = 8;
      case 8: {
        if (tag == 66) {
         parse_LifeStealData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lifestealdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_DamageData;
        break;
      }

      // optional .pb.SkillDamageData DamageData = 9;
      case 9: {
        if (tag == 74) {
         parse_DamageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_damagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_HealData;
        break;
      }

      // optional .pb.SkillHealData HealData = 10;
      case 10: {
        if (tag == 82) {
         parse_HealData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_healdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_SummonData;
        break;
      }

      // optional .pb.SkillSummonData SummonData = 11;
      case 11: {
        if (tag == 90) {
         parse_SummonData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summondata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_RebornData;
        break;
      }

      // optional .pb.SkillRebornData RebornData = 12;
      case 12: {
        if (tag == 98) {
         parse_RebornData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reborndata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_EnergyRecoverData;
        break;
      }

      // optional .pb.SkillEnergyRecoverData EnergyRecoverData = 13;
      case 13: {
        if (tag == 106) {
         parse_EnergyRecoverData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_energyrecoverdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_SubSkillData;
        break;
      }

      // optional .pb.SkillSubSkillData SubSkillData = 14;
      case 14: {
        if (tag == 114) {
         parse_SubSkillData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subskilldata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_CurvaData;
        break;
      }

      // optional .pb.SkillCurveData CurvaData = 15;
      case 15: {
        if (tag == 122) {
         parse_CurvaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_curvadata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_GrabData;
        break;
      }

      // optional .pb.SkillGrabData GrabData = 16;
      case 16: {
        if (tag == 130) {
         parse_GrabData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grabdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_SummonObstacleData;
        break;
      }

      // optional .pb.SkillSummonObstacleData SummonObstacleData = 17;
      case 17: {
        if (tag == 138) {
         parse_SummonObstacleData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_summonobstacledata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_MusouRecoverData;
        break;
      }

      // optional .pb.SkillEnergyRecoverData MusouRecoverData = 18;
      case 18: {
        if (tag == 146) {
         parse_MusouRecoverData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_musourecoverdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SkillData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SkillData)
  return false;
#undef DO_
}

void SkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SkillData)
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .pb.SkillBaseData BaseData = 2;
  if (has_basedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->basedata(), output);
  }

  // optional .pb.SkillEffectData EffectData = 3;
  if (has_effectdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->effectdata(), output);
  }

  // optional .pb.SkillHitData HitData = 4;
  if (has_hitdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hitdata(), output);
  }

  // optional .pb.SkillMoveData MoveData = 5;
  if (has_movedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->movedata(), output);
  }

  // optional .pb.SkillEnergyDrawData EnergyDrawData = 6;
  if (has_energydrawdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->energydrawdata(), output);
  }

  // optional .pb.SkillEnergyAssistData EnergyAssisData = 7;
  if (has_energyassisdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->energyassisdata(), output);
  }

  // optional .pb.SkillLifeStealData LifeStealData = 8;
  if (has_lifestealdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->lifestealdata(), output);
  }

  // optional .pb.SkillDamageData DamageData = 9;
  if (has_damagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->damagedata(), output);
  }

  // optional .pb.SkillHealData HealData = 10;
  if (has_healdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->healdata(), output);
  }

  // optional .pb.SkillSummonData SummonData = 11;
  if (has_summondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->summondata(), output);
  }

  // optional .pb.SkillRebornData RebornData = 12;
  if (has_reborndata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->reborndata(), output);
  }

  // optional .pb.SkillEnergyRecoverData EnergyRecoverData = 13;
  if (has_energyrecoverdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->energyrecoverdata(), output);
  }

  // optional .pb.SkillSubSkillData SubSkillData = 14;
  if (has_subskilldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->subskilldata(), output);
  }

  // optional .pb.SkillCurveData CurvaData = 15;
  if (has_curvadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->curvadata(), output);
  }

  // optional .pb.SkillGrabData GrabData = 16;
  if (has_grabdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->grabdata(), output);
  }

  // optional .pb.SkillSummonObstacleData SummonObstacleData = 17;
  if (has_summonobstacledata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->summonobstacledata(), output);
  }

  // optional .pb.SkillEnergyRecoverData MusouRecoverData = 18;
  if (has_musourecoverdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->musourecoverdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SkillData)
}

::google::protobuf::uint8* SkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SkillData)
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .pb.SkillBaseData BaseData = 2;
  if (has_basedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->basedata(), target);
  }

  // optional .pb.SkillEffectData EffectData = 3;
  if (has_effectdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->effectdata(), target);
  }

  // optional .pb.SkillHitData HitData = 4;
  if (has_hitdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hitdata(), target);
  }

  // optional .pb.SkillMoveData MoveData = 5;
  if (has_movedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->movedata(), target);
  }

  // optional .pb.SkillEnergyDrawData EnergyDrawData = 6;
  if (has_energydrawdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->energydrawdata(), target);
  }

  // optional .pb.SkillEnergyAssistData EnergyAssisData = 7;
  if (has_energyassisdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->energyassisdata(), target);
  }

  // optional .pb.SkillLifeStealData LifeStealData = 8;
  if (has_lifestealdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->lifestealdata(), target);
  }

  // optional .pb.SkillDamageData DamageData = 9;
  if (has_damagedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->damagedata(), target);
  }

  // optional .pb.SkillHealData HealData = 10;
  if (has_healdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->healdata(), target);
  }

  // optional .pb.SkillSummonData SummonData = 11;
  if (has_summondata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->summondata(), target);
  }

  // optional .pb.SkillRebornData RebornData = 12;
  if (has_reborndata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->reborndata(), target);
  }

  // optional .pb.SkillEnergyRecoverData EnergyRecoverData = 13;
  if (has_energyrecoverdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->energyrecoverdata(), target);
  }

  // optional .pb.SkillSubSkillData SubSkillData = 14;
  if (has_subskilldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->subskilldata(), target);
  }

  // optional .pb.SkillCurveData CurvaData = 15;
  if (has_curvadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->curvadata(), target);
  }

  // optional .pb.SkillGrabData GrabData = 16;
  if (has_grabdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->grabdata(), target);
  }

  // optional .pb.SkillSummonObstacleData SummonObstacleData = 17;
  if (has_summonobstacledata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->summonobstacledata(), target);
  }

  // optional .pb.SkillEnergyRecoverData MusouRecoverData = 18;
  if (has_musourecoverdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->musourecoverdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SkillData)
  return target;
}

int SkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .pb.SkillBaseData BaseData = 2;
    if (has_basedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basedata());
    }

    // optional .pb.SkillEffectData EffectData = 3;
    if (has_effectdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->effectdata());
    }

    // optional .pb.SkillHitData HitData = 4;
    if (has_hitdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hitdata());
    }

    // optional .pb.SkillMoveData MoveData = 5;
    if (has_movedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->movedata());
    }

    // optional .pb.SkillEnergyDrawData EnergyDrawData = 6;
    if (has_energydrawdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->energydrawdata());
    }

    // optional .pb.SkillEnergyAssistData EnergyAssisData = 7;
    if (has_energyassisdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->energyassisdata());
    }

    // optional .pb.SkillLifeStealData LifeStealData = 8;
    if (has_lifestealdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lifestealdata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .pb.SkillDamageData DamageData = 9;
    if (has_damagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->damagedata());
    }

    // optional .pb.SkillHealData HealData = 10;
    if (has_healdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->healdata());
    }

    // optional .pb.SkillSummonData SummonData = 11;
    if (has_summondata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summondata());
    }

    // optional .pb.SkillRebornData RebornData = 12;
    if (has_reborndata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reborndata());
    }

    // optional .pb.SkillEnergyRecoverData EnergyRecoverData = 13;
    if (has_energyrecoverdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->energyrecoverdata());
    }

    // optional .pb.SkillSubSkillData SubSkillData = 14;
    if (has_subskilldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subskilldata());
    }

    // optional .pb.SkillCurveData CurvaData = 15;
    if (has_curvadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->curvadata());
    }

    // optional .pb.SkillGrabData GrabData = 16;
    if (has_grabdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grabdata());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .pb.SkillSummonObstacleData SummonObstacleData = 17;
    if (has_summonobstacledata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->summonobstacledata());
    }

    // optional .pb.SkillEnergyRecoverData MusouRecoverData = 18;
    if (has_musourecoverdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->musourecoverdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillData::MergeFrom(const SkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_basedata()) {
      mutable_basedata()->::pb::SkillBaseData::MergeFrom(from.basedata());
    }
    if (from.has_effectdata()) {
      mutable_effectdata()->::pb::SkillEffectData::MergeFrom(from.effectdata());
    }
    if (from.has_hitdata()) {
      mutable_hitdata()->::pb::SkillHitData::MergeFrom(from.hitdata());
    }
    if (from.has_movedata()) {
      mutable_movedata()->::pb::SkillMoveData::MergeFrom(from.movedata());
    }
    if (from.has_energydrawdata()) {
      mutable_energydrawdata()->::pb::SkillEnergyDrawData::MergeFrom(from.energydrawdata());
    }
    if (from.has_energyassisdata()) {
      mutable_energyassisdata()->::pb::SkillEnergyAssistData::MergeFrom(from.energyassisdata());
    }
    if (from.has_lifestealdata()) {
      mutable_lifestealdata()->::pb::SkillLifeStealData::MergeFrom(from.lifestealdata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_damagedata()) {
      mutable_damagedata()->::pb::SkillDamageData::MergeFrom(from.damagedata());
    }
    if (from.has_healdata()) {
      mutable_healdata()->::pb::SkillHealData::MergeFrom(from.healdata());
    }
    if (from.has_summondata()) {
      mutable_summondata()->::pb::SkillSummonData::MergeFrom(from.summondata());
    }
    if (from.has_reborndata()) {
      mutable_reborndata()->::pb::SkillRebornData::MergeFrom(from.reborndata());
    }
    if (from.has_energyrecoverdata()) {
      mutable_energyrecoverdata()->::pb::SkillEnergyRecoverData::MergeFrom(from.energyrecoverdata());
    }
    if (from.has_subskilldata()) {
      mutable_subskilldata()->::pb::SkillSubSkillData::MergeFrom(from.subskilldata());
    }
    if (from.has_curvadata()) {
      mutable_curvadata()->::pb::SkillCurveData::MergeFrom(from.curvadata());
    }
    if (from.has_grabdata()) {
      mutable_grabdata()->::pb::SkillGrabData::MergeFrom(from.grabdata());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_summonobstacledata()) {
      mutable_summonobstacledata()->::pb::SkillSummonObstacleData::MergeFrom(from.summonobstacledata());
    }
    if (from.has_musourecoverdata()) {
      mutable_musourecoverdata()->::pb::SkillEnergyRecoverData::MergeFrom(from.musourecoverdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillData::CopyFrom(const SkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillData::IsInitialized() const {

  return true;
}

void SkillData::Swap(SkillData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(basedata_, other->basedata_);
    std::swap(effectdata_, other->effectdata_);
    std::swap(hitdata_, other->hitdata_);
    std::swap(movedata_, other->movedata_);
    std::swap(energydrawdata_, other->energydrawdata_);
    std::swap(energyassisdata_, other->energyassisdata_);
    std::swap(lifestealdata_, other->lifestealdata_);
    std::swap(damagedata_, other->damagedata_);
    std::swap(healdata_, other->healdata_);
    std::swap(summondata_, other->summondata_);
    std::swap(reborndata_, other->reborndata_);
    std::swap(energyrecoverdata_, other->energyrecoverdata_);
    std::swap(subskilldata_, other->subskilldata_);
    std::swap(curvadata_, other->curvadata_);
    std::swap(grabdata_, other->grabdata_);
    std::swap(summonobstacledata_, other->summonobstacledata_);
    std::swap(musourecoverdata_, other->musourecoverdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillData_descriptor_;
  metadata.reflection = SkillData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
