// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/DefineChallenge.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/DefineChallenge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TDefineChallengeExpectProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeExpectProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeActualProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeActualProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeExpectBossProcess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeExpectBossProcess_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeBattlePosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeBattlePosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeFmtInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeFmtInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeBossInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeBossInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGiftInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGiftInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeOtherRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeOtherRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetTimeConfRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetTimeConfRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetBaseInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetBaseInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetBattleArgsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetBattleArgsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetBattleArgsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetBattleArgsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeReportBattleBossReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeReportBattleBossReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeReportBattleBossRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeReportBattleBossRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetFmtReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetFmtReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetFmtRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetFmtRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeSetFmtReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeSetFmtReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeReceiveTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeReceiveTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeReceiveTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeReceiveTaskRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetGroupRankArrRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetGroupRankArrRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetGroupRankArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetGroupRankArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetWarZoneRankArrRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetWarZoneRankArrRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetWarZoneRankArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetWarZoneRankArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetRankFormationRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetRankFormationRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetRankFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetRankFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeChangeBossRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeChangeBossRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeChangeBossRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeChangeBossRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetTaskListRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetTaskListRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetTaskListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetTaskListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeGetShopInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeGetShopInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeExchangeTimeLimitGiftRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeExchangeTimeLimitGiftRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeExchangeTimeLimitGiftRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeExchangeTimeLimitGiftRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TDefineChallengeSaveDebuffRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDefineChallengeSaveDebuffRep_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDefineChallengeStage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDefineChallengeBanMType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fDefineChallenge_2eproto() {
  protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/DefineChallenge.proto");
  GOOGLE_CHECK(file != NULL);
  TDefineChallengeExpectProcess_descriptor_ = file->message_type(0);
  static const int TDefineChallengeExpectProcess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExpectProcess, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExpectProcess, begtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExpectProcess, endtime_),
  };
  TDefineChallengeExpectProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeExpectProcess_descriptor_,
      TDefineChallengeExpectProcess::default_instance_,
      TDefineChallengeExpectProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExpectProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExpectProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeExpectProcess));
  TDefineChallengeActualProcess_descriptor_ = file->message_type(1);
  static const int TDefineChallengeActualProcess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeActualProcess, expectprocess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeActualProcess, donetime_),
  };
  TDefineChallengeActualProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeActualProcess_descriptor_,
      TDefineChallengeActualProcess::default_instance_,
      TDefineChallengeActualProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeActualProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeActualProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeActualProcess));
  TDefineChallengeExpectBossProcess_descriptor_ = file->message_type(2);
  static const int TDefineChallengeExpectBossProcess_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExpectBossProcess, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExpectBossProcess, begtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExpectBossProcess, endtime_),
  };
  TDefineChallengeExpectBossProcess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeExpectBossProcess_descriptor_,
      TDefineChallengeExpectBossProcess::default_instance_,
      TDefineChallengeExpectBossProcess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExpectBossProcess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExpectBossProcess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeExpectBossProcess));
  TDefineChallengeBattlePosInfo_descriptor_ = file->message_type(3);
  static const int TDefineChallengeBattlePosInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBattlePosInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBattlePosInfo, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBattlePosInfo, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBattlePosInfo, aptitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBattlePosInfo, htid_),
  };
  TDefineChallengeBattlePosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeBattlePosInfo_descriptor_,
      TDefineChallengeBattlePosInfo::default_instance_,
      TDefineChallengeBattlePosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBattlePosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBattlePosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeBattlePosInfo));
  TDefineChallengeFmtInfo_descriptor_ = file->message_type(4);
  static const int TDefineChallengeFmtInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeFmtInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeFmtInfo, arrpos_),
  };
  TDefineChallengeFmtInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeFmtInfo_descriptor_,
      TDefineChallengeFmtInfo::default_instance_,
      TDefineChallengeFmtInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeFmtInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeFmtInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeFmtInfo));
  TDefineChallengeRankInfo_descriptor_ = file->message_type(5);
  static const int TDefineChallengeRankInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeRankInfo, simpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeRankInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeRankInfo, uid_),
  };
  TDefineChallengeRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeRankInfo_descriptor_,
      TDefineChallengeRankInfo::default_instance_,
      TDefineChallengeRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeRankInfo));
  TDefineChallengeBossInfo_descriptor_ = file->message_type(6);
  static const int TDefineChallengeBossInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBossInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBossInfo, debuffarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBossInfo, banhero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBossInfo, debuffarrunlocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBossInfo, fightforce_),
  };
  TDefineChallengeBossInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeBossInfo_descriptor_,
      TDefineChallengeBossInfo::default_instance_,
      TDefineChallengeBossInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBossInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeBossInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeBossInfo));
  TDefineChallengeTaskInfo_descriptor_ = file->message_type(7);
  static const int TDefineChallengeTaskInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeTaskInfo, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeTaskInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeTaskInfo, rewardtime_),
  };
  TDefineChallengeTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeTaskInfo_descriptor_,
      TDefineChallengeTaskInfo::default_instance_,
      TDefineChallengeTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeTaskInfo));
  TDefineChallengeGiftInfo_descriptor_ = file->message_type(8);
  static const int TDefineChallengeGiftInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGiftInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGiftInfo, buynum_),
  };
  TDefineChallengeGiftInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGiftInfo_descriptor_,
      TDefineChallengeGiftInfo::default_instance_,
      TDefineChallengeGiftInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGiftInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGiftInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGiftInfo));
  TDefineChallengeOtherRankInfo_descriptor_ = file->message_type(9);
  static const int TDefineChallengeOtherRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeOtherRankInfo, bossinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeOtherRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeOtherRankInfo, fmt_),
  };
  TDefineChallengeOtherRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeOtherRankInfo_descriptor_,
      TDefineChallengeOtherRankInfo::default_instance_,
      TDefineChallengeOtherRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeOtherRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeOtherRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeOtherRankInfo));
  TDefineChallengeGetTimeConfRsp_descriptor_ = file->message_type(10);
  static const int TDefineChallengeGetTimeConfRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTimeConfRsp, arrexpectprocess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTimeConfRsp, funcopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTimeConfRsp, actualprocess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTimeConfRsp, arrbossprocess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTimeConfRsp, actualbossprocess_),
  };
  TDefineChallengeGetTimeConfRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetTimeConfRsp_descriptor_,
      TDefineChallengeGetTimeConfRsp::default_instance_,
      TDefineChallengeGetTimeConfRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTimeConfRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTimeConfRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetTimeConfRsp));
  TDefineChallengeGetBaseInfoRsp_descriptor_ = file->message_type(11);
  static const int TDefineChallengeGetBaseInfoRsp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, warzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, signtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, maxfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, grouprank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, warzonerank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, bossinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, rewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, isviewed_),
  };
  TDefineChallengeGetBaseInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetBaseInfoRsp_descriptor_,
      TDefineChallengeGetBaseInfoRsp::default_instance_,
      TDefineChallengeGetBaseInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBaseInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetBaseInfoRsp));
  TDefineChallengeGetBattleArgsReq_descriptor_ = file->message_type(12);
  static const int TDefineChallengeGetBattleArgsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBattleArgsReq, bossinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBattleArgsReq, battlecheckparam_),
  };
  TDefineChallengeGetBattleArgsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetBattleArgsReq_descriptor_,
      TDefineChallengeGetBattleArgsReq::default_instance_,
      TDefineChallengeGetBattleArgsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBattleArgsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBattleArgsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetBattleArgsReq));
  TDefineChallengeGetBattleArgsRsp_descriptor_ = file->message_type(13);
  static const int TDefineChallengeGetBattleArgsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBattleArgsRsp, battleargs_),
  };
  TDefineChallengeGetBattleArgsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetBattleArgsRsp_descriptor_,
      TDefineChallengeGetBattleArgsRsp::default_instance_,
      TDefineChallengeGetBattleArgsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBattleArgsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetBattleArgsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetBattleArgsRsp));
  TDefineChallengeReportBattleBossReq_descriptor_ = file->message_type(14);
  static const int TDefineChallengeReportBattleBossReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReportBattleBossReq, bossinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReportBattleBossReq, battleret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReportBattleBossReq, masterhid_),
  };
  TDefineChallengeReportBattleBossReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeReportBattleBossReq_descriptor_,
      TDefineChallengeReportBattleBossReq::default_instance_,
      TDefineChallengeReportBattleBossReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReportBattleBossReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReportBattleBossReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeReportBattleBossReq));
  TDefineChallengeReportBattleBossRsp_descriptor_ = file->message_type(15);
  static const int TDefineChallengeReportBattleBossRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReportBattleBossRsp, settlescore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReportBattleBossRsp, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReportBattleBossRsp, iswin_),
  };
  TDefineChallengeReportBattleBossRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeReportBattleBossRsp_descriptor_,
      TDefineChallengeReportBattleBossRsp::default_instance_,
      TDefineChallengeReportBattleBossRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReportBattleBossRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReportBattleBossRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeReportBattleBossRsp));
  TDefineChallengeGetFmtReq_descriptor_ = file->message_type(16);
  static const int TDefineChallengeGetFmtReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetFmtReq, bossid_),
  };
  TDefineChallengeGetFmtReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetFmtReq_descriptor_,
      TDefineChallengeGetFmtReq::default_instance_,
      TDefineChallengeGetFmtReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetFmtReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetFmtReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetFmtReq));
  TDefineChallengeGetFmtRsp_descriptor_ = file->message_type(17);
  static const int TDefineChallengeGetFmtRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetFmtRsp, fmt_),
  };
  TDefineChallengeGetFmtRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetFmtRsp_descriptor_,
      TDefineChallengeGetFmtRsp::default_instance_,
      TDefineChallengeGetFmtRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetFmtRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetFmtRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetFmtRsp));
  TDefineChallengeSetFmtReq_descriptor_ = file->message_type(18);
  static const int TDefineChallengeSetFmtReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeSetFmtReq, fmt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeSetFmtReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeSetFmtReq, debuffarr_),
  };
  TDefineChallengeSetFmtReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeSetFmtReq_descriptor_,
      TDefineChallengeSetFmtReq::default_instance_,
      TDefineChallengeSetFmtReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeSetFmtReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeSetFmtReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeSetFmtReq));
  TDefineChallengeReceiveTaskRewardReq_descriptor_ = file->message_type(19);
  static const int TDefineChallengeReceiveTaskRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReceiveTaskRewardReq, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReceiveTaskRewardReq, bossid_),
  };
  TDefineChallengeReceiveTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeReceiveTaskRewardReq_descriptor_,
      TDefineChallengeReceiveTaskRewardReq::default_instance_,
      TDefineChallengeReceiveTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReceiveTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReceiveTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeReceiveTaskRewardReq));
  TDefineChallengeReceiveTaskRewardRsp_descriptor_ = file->message_type(20);
  static const int TDefineChallengeReceiveTaskRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReceiveTaskRewardRsp, rewardarr_),
  };
  TDefineChallengeReceiveTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeReceiveTaskRewardRsp_descriptor_,
      TDefineChallengeReceiveTaskRewardRsp::default_instance_,
      TDefineChallengeReceiveTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReceiveTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeReceiveTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeReceiveTaskRewardRsp));
  TDefineChallengeGetGroupRankArrRep_descriptor_ = file->message_type(21);
  static const int TDefineChallengeGetGroupRankArrRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetGroupRankArrRep, groupid_),
  };
  TDefineChallengeGetGroupRankArrRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetGroupRankArrRep_descriptor_,
      TDefineChallengeGetGroupRankArrRep::default_instance_,
      TDefineChallengeGetGroupRankArrRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetGroupRankArrRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetGroupRankArrRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetGroupRankArrRep));
  TDefineChallengeGetGroupRankArrRsp_descriptor_ = file->message_type(22);
  static const int TDefineChallengeGetGroupRankArrRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetGroupRankArrRsp, userrankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetGroupRankArrRsp, selfrank_),
  };
  TDefineChallengeGetGroupRankArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetGroupRankArrRsp_descriptor_,
      TDefineChallengeGetGroupRankArrRsp::default_instance_,
      TDefineChallengeGetGroupRankArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetGroupRankArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetGroupRankArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetGroupRankArrRsp));
  TDefineChallengeGetWarZoneRankArrRep_descriptor_ = file->message_type(23);
  static const int TDefineChallengeGetWarZoneRankArrRep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetWarZoneRankArrRep, warzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetWarZoneRankArrRep, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetWarZoneRankArrRep, limit_),
  };
  TDefineChallengeGetWarZoneRankArrRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetWarZoneRankArrRep_descriptor_,
      TDefineChallengeGetWarZoneRankArrRep::default_instance_,
      TDefineChallengeGetWarZoneRankArrRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetWarZoneRankArrRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetWarZoneRankArrRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetWarZoneRankArrRep));
  TDefineChallengeGetWarZoneRankArrRsp_descriptor_ = file->message_type(24);
  static const int TDefineChallengeGetWarZoneRankArrRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetWarZoneRankArrRsp, userrankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetWarZoneRankArrRsp, selfrank_),
  };
  TDefineChallengeGetWarZoneRankArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetWarZoneRankArrRsp_descriptor_,
      TDefineChallengeGetWarZoneRankArrRsp::default_instance_,
      TDefineChallengeGetWarZoneRankArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetWarZoneRankArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetWarZoneRankArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetWarZoneRankArrRsp));
  TDefineChallengeGetRankFormationRep_descriptor_ = file->message_type(25);
  static const int TDefineChallengeGetRankFormationRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetRankFormationRep, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetRankFormationRep, rank_),
  };
  TDefineChallengeGetRankFormationRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetRankFormationRep_descriptor_,
      TDefineChallengeGetRankFormationRep::default_instance_,
      TDefineChallengeGetRankFormationRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetRankFormationRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetRankFormationRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetRankFormationRep));
  TDefineChallengeGetRankFormationRsp_descriptor_ = file->message_type(26);
  static const int TDefineChallengeGetRankFormationRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetRankFormationRsp, bossinfo_),
  };
  TDefineChallengeGetRankFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetRankFormationRsp_descriptor_,
      TDefineChallengeGetRankFormationRsp::default_instance_,
      TDefineChallengeGetRankFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetRankFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetRankFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetRankFormationRsp));
  TDefineChallengeChangeBossRep_descriptor_ = file->message_type(27);
  static const int TDefineChallengeChangeBossRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeChangeBossRep, bossid_),
  };
  TDefineChallengeChangeBossRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeChangeBossRep_descriptor_,
      TDefineChallengeChangeBossRep::default_instance_,
      TDefineChallengeChangeBossRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeChangeBossRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeChangeBossRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeChangeBossRep));
  TDefineChallengeChangeBossRsp_descriptor_ = file->message_type(28);
  static const int TDefineChallengeChangeBossRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeChangeBossRsp, bossinfo_),
  };
  TDefineChallengeChangeBossRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeChangeBossRsp_descriptor_,
      TDefineChallengeChangeBossRsp::default_instance_,
      TDefineChallengeChangeBossRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeChangeBossRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeChangeBossRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeChangeBossRsp));
  TDefineChallengeGetTaskListRep_descriptor_ = file->message_type(29);
  static const int TDefineChallengeGetTaskListRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTaskListRep, bossid_),
  };
  TDefineChallengeGetTaskListRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetTaskListRep_descriptor_,
      TDefineChallengeGetTaskListRep::default_instance_,
      TDefineChallengeGetTaskListRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTaskListRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTaskListRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetTaskListRep));
  TDefineChallengeGetTaskListRsp_descriptor_ = file->message_type(30);
  static const int TDefineChallengeGetTaskListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTaskListRsp, taskinfo_),
  };
  TDefineChallengeGetTaskListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetTaskListRsp_descriptor_,
      TDefineChallengeGetTaskListRsp::default_instance_,
      TDefineChallengeGetTaskListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTaskListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetTaskListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetTaskListRsp));
  TDefineChallengeGetShopInfoRsp_descriptor_ = file->message_type(31);
  static const int TDefineChallengeGetShopInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetShopInfoRsp, giftinfoarr_),
  };
  TDefineChallengeGetShopInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeGetShopInfoRsp_descriptor_,
      TDefineChallengeGetShopInfoRsp::default_instance_,
      TDefineChallengeGetShopInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetShopInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeGetShopInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeGetShopInfoRsp));
  TDefineChallengeExchangeTimeLimitGiftRep_descriptor_ = file->message_type(32);
  static const int TDefineChallengeExchangeTimeLimitGiftRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExchangeTimeLimitGiftRep, giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExchangeTimeLimitGiftRep, buynum_),
  };
  TDefineChallengeExchangeTimeLimitGiftRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeExchangeTimeLimitGiftRep_descriptor_,
      TDefineChallengeExchangeTimeLimitGiftRep::default_instance_,
      TDefineChallengeExchangeTimeLimitGiftRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExchangeTimeLimitGiftRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExchangeTimeLimitGiftRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeExchangeTimeLimitGiftRep));
  TDefineChallengeExchangeTimeLimitGiftRsp_descriptor_ = file->message_type(33);
  static const int TDefineChallengeExchangeTimeLimitGiftRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExchangeTimeLimitGiftRsp, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExchangeTimeLimitGiftRsp, buynum_),
  };
  TDefineChallengeExchangeTimeLimitGiftRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeExchangeTimeLimitGiftRsp_descriptor_,
      TDefineChallengeExchangeTimeLimitGiftRsp::default_instance_,
      TDefineChallengeExchangeTimeLimitGiftRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExchangeTimeLimitGiftRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeExchangeTimeLimitGiftRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeExchangeTimeLimitGiftRsp));
  TDefineChallengeSaveDebuffRep_descriptor_ = file->message_type(34);
  static const int TDefineChallengeSaveDebuffRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeSaveDebuffRep, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeSaveDebuffRep, debuffarr_),
  };
  TDefineChallengeSaveDebuffRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDefineChallengeSaveDebuffRep_descriptor_,
      TDefineChallengeSaveDebuffRep::default_instance_,
      TDefineChallengeSaveDebuffRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeSaveDebuffRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDefineChallengeSaveDebuffRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDefineChallengeSaveDebuffRep));
  EDefineChallengeStage_descriptor_ = file->enum_type(0);
  EDefineChallengeBanMType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fDefineChallenge_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeExpectProcess_descriptor_, &TDefineChallengeExpectProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeActualProcess_descriptor_, &TDefineChallengeActualProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeExpectBossProcess_descriptor_, &TDefineChallengeExpectBossProcess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeBattlePosInfo_descriptor_, &TDefineChallengeBattlePosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeFmtInfo_descriptor_, &TDefineChallengeFmtInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeRankInfo_descriptor_, &TDefineChallengeRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeBossInfo_descriptor_, &TDefineChallengeBossInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeTaskInfo_descriptor_, &TDefineChallengeTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGiftInfo_descriptor_, &TDefineChallengeGiftInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeOtherRankInfo_descriptor_, &TDefineChallengeOtherRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetTimeConfRsp_descriptor_, &TDefineChallengeGetTimeConfRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetBaseInfoRsp_descriptor_, &TDefineChallengeGetBaseInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetBattleArgsReq_descriptor_, &TDefineChallengeGetBattleArgsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetBattleArgsRsp_descriptor_, &TDefineChallengeGetBattleArgsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeReportBattleBossReq_descriptor_, &TDefineChallengeReportBattleBossReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeReportBattleBossRsp_descriptor_, &TDefineChallengeReportBattleBossRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetFmtReq_descriptor_, &TDefineChallengeGetFmtReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetFmtRsp_descriptor_, &TDefineChallengeGetFmtRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeSetFmtReq_descriptor_, &TDefineChallengeSetFmtReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeReceiveTaskRewardReq_descriptor_, &TDefineChallengeReceiveTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeReceiveTaskRewardRsp_descriptor_, &TDefineChallengeReceiveTaskRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetGroupRankArrRep_descriptor_, &TDefineChallengeGetGroupRankArrRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetGroupRankArrRsp_descriptor_, &TDefineChallengeGetGroupRankArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetWarZoneRankArrRep_descriptor_, &TDefineChallengeGetWarZoneRankArrRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetWarZoneRankArrRsp_descriptor_, &TDefineChallengeGetWarZoneRankArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetRankFormationRep_descriptor_, &TDefineChallengeGetRankFormationRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetRankFormationRsp_descriptor_, &TDefineChallengeGetRankFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeChangeBossRep_descriptor_, &TDefineChallengeChangeBossRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeChangeBossRsp_descriptor_, &TDefineChallengeChangeBossRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetTaskListRep_descriptor_, &TDefineChallengeGetTaskListRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetTaskListRsp_descriptor_, &TDefineChallengeGetTaskListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeGetShopInfoRsp_descriptor_, &TDefineChallengeGetShopInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeExchangeTimeLimitGiftRep_descriptor_, &TDefineChallengeExchangeTimeLimitGiftRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeExchangeTimeLimitGiftRsp_descriptor_, &TDefineChallengeExchangeTimeLimitGiftRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDefineChallengeSaveDebuffRep_descriptor_, &TDefineChallengeSaveDebuffRep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fDefineChallenge_2eproto() {
  delete TDefineChallengeExpectProcess::default_instance_;
  delete TDefineChallengeExpectProcess_reflection_;
  delete TDefineChallengeActualProcess::default_instance_;
  delete TDefineChallengeActualProcess_reflection_;
  delete TDefineChallengeExpectBossProcess::default_instance_;
  delete TDefineChallengeExpectBossProcess_reflection_;
  delete TDefineChallengeBattlePosInfo::default_instance_;
  delete TDefineChallengeBattlePosInfo_reflection_;
  delete TDefineChallengeFmtInfo::default_instance_;
  delete TDefineChallengeFmtInfo_reflection_;
  delete TDefineChallengeRankInfo::default_instance_;
  delete TDefineChallengeRankInfo_reflection_;
  delete TDefineChallengeBossInfo::default_instance_;
  delete TDefineChallengeBossInfo_reflection_;
  delete TDefineChallengeTaskInfo::default_instance_;
  delete TDefineChallengeTaskInfo_reflection_;
  delete TDefineChallengeGiftInfo::default_instance_;
  delete TDefineChallengeGiftInfo_reflection_;
  delete TDefineChallengeOtherRankInfo::default_instance_;
  delete TDefineChallengeOtherRankInfo_reflection_;
  delete TDefineChallengeGetTimeConfRsp::default_instance_;
  delete TDefineChallengeGetTimeConfRsp_reflection_;
  delete TDefineChallengeGetBaseInfoRsp::default_instance_;
  delete TDefineChallengeGetBaseInfoRsp_reflection_;
  delete TDefineChallengeGetBattleArgsReq::default_instance_;
  delete TDefineChallengeGetBattleArgsReq_reflection_;
  delete TDefineChallengeGetBattleArgsRsp::default_instance_;
  delete TDefineChallengeGetBattleArgsRsp_reflection_;
  delete TDefineChallengeReportBattleBossReq::default_instance_;
  delete TDefineChallengeReportBattleBossReq_reflection_;
  delete TDefineChallengeReportBattleBossRsp::default_instance_;
  delete TDefineChallengeReportBattleBossRsp_reflection_;
  delete TDefineChallengeGetFmtReq::default_instance_;
  delete TDefineChallengeGetFmtReq_reflection_;
  delete TDefineChallengeGetFmtRsp::default_instance_;
  delete TDefineChallengeGetFmtRsp_reflection_;
  delete TDefineChallengeSetFmtReq::default_instance_;
  delete TDefineChallengeSetFmtReq_reflection_;
  delete TDefineChallengeReceiveTaskRewardReq::default_instance_;
  delete TDefineChallengeReceiveTaskRewardReq_reflection_;
  delete TDefineChallengeReceiveTaskRewardRsp::default_instance_;
  delete TDefineChallengeReceiveTaskRewardRsp_reflection_;
  delete TDefineChallengeGetGroupRankArrRep::default_instance_;
  delete TDefineChallengeGetGroupRankArrRep_reflection_;
  delete TDefineChallengeGetGroupRankArrRsp::default_instance_;
  delete TDefineChallengeGetGroupRankArrRsp_reflection_;
  delete TDefineChallengeGetWarZoneRankArrRep::default_instance_;
  delete TDefineChallengeGetWarZoneRankArrRep_reflection_;
  delete TDefineChallengeGetWarZoneRankArrRsp::default_instance_;
  delete TDefineChallengeGetWarZoneRankArrRsp_reflection_;
  delete TDefineChallengeGetRankFormationRep::default_instance_;
  delete TDefineChallengeGetRankFormationRep_reflection_;
  delete TDefineChallengeGetRankFormationRsp::default_instance_;
  delete TDefineChallengeGetRankFormationRsp_reflection_;
  delete TDefineChallengeChangeBossRep::default_instance_;
  delete TDefineChallengeChangeBossRep_reflection_;
  delete TDefineChallengeChangeBossRsp::default_instance_;
  delete TDefineChallengeChangeBossRsp_reflection_;
  delete TDefineChallengeGetTaskListRep::default_instance_;
  delete TDefineChallengeGetTaskListRep_reflection_;
  delete TDefineChallengeGetTaskListRsp::default_instance_;
  delete TDefineChallengeGetTaskListRsp_reflection_;
  delete TDefineChallengeGetShopInfoRsp::default_instance_;
  delete TDefineChallengeGetShopInfoRsp_reflection_;
  delete TDefineChallengeExchangeTimeLimitGiftRep::default_instance_;
  delete TDefineChallengeExchangeTimeLimitGiftRep_reflection_;
  delete TDefineChallengeExchangeTimeLimitGiftRsp::default_instance_;
  delete TDefineChallengeExchangeTimeLimitGiftRsp_reflection_;
  delete TDefineChallengeSaveDebuffRep::default_instance_;
  delete TDefineChallengeSaveDebuffRep_reflection_;
}

void protobuf_AddDesc_net_2fDefineChallenge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031net/DefineChallenge.proto\022\002pb\032\016net/Use"
    "r.proto\032\026net/CommonReward.proto\032\020net/Bat"
    "tle.proto\"k\n\035TDefineChallengeExpectProce"
    "ss\022(\n\005Stage\030\001 \001(\0162\031.pb.EDefineChallengeS"
    "tage\022\017\n\007BegTime\030\002 \001(\004\022\017\n\007EndTime\030\003 \001(\004\"k"
    "\n\035TDefineChallengeActualProcess\0228\n\rExpec"
    "tProcess\030\001 \001(\0132!.pb.TDefineChallengeExpe"
    "ctProcess\022\020\n\010DoneTime\030\002 \001(\004\"U\n!TDefineCh"
    "allengeExpectBossProcess\022\016\n\006BossId\030\001 \003(\r"
    "\022\017\n\007BegTime\030\002 \001(\004\022\017\n\007EndTime\030\003 \001(\004\"g\n\035TD"
    "efineChallengeBattlePosInfo\022\013\n\003Pos\030\001 \001(\r"
    "\022\013\n\003Hid\030\002 \001(\r\022\014\n\004Star\030\003 \001(\r\022\020\n\010Aptitude\030"
    "\004 \001(\r\022\014\n\004Htid\030\005 \001(\r\"\\\n\027TDefineChallengeF"
    "mtInfo\022\016\n\006BossId\030\001 \001(\r\0221\n\006ArrPos\030\002 \003(\0132!"
    ".pb.TDefineChallengeBattlePosInfo\"\201\001\n\030TD"
    "efineChallengeRankInfo\022\014\n\004Rank\030\001 \001(\r\022\r\n\005"
    "Score\030\002 \001(\r\022\'\n\nSimpleInfo\030\003 \001(\0132\023.pb.TUs"
    "erSimpleInfo\022\022\n\nRecordTime\030\004 \001(\004\022\013\n\003Uid\030"
    "\005 \001(\004\"}\n\030TDefineChallengeBossInfo\022\016\n\006Bos"
    "sId\030\001 \001(\r\022\021\n\tDebuffArr\030\002 \003(\r\022\017\n\007BanHero\030"
    "\003 \003(\r\022\031\n\021DebuffArrUnlocked\030\004 \003(\r\022\022\n\nFigh"
    "tForce\030\005 \001(\004\"K\n\030TDefineChallengeTaskInfo"
    "\022\016\n\006TaskId\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\022\022\n\nRewardT"
    "ime\030\003 \001(\004\"6\n\030TDefineChallengeGiftInfo\022\n\n"
    "\002Id\030\001 \001(\r\022\016\n\006BuyNum\030\002 \001(\r\"\216\001\n\035TDefineCha"
    "llengeOtherRankInfo\022.\n\010BossInfo\030\001 \001(\0132\034."
    "pb.TDefineChallengeBossInfo\022\r\n\005score\030\002 \001"
    "(\r\022.\n\003Fmt\030\003 \003(\0132!.pb.TDefineChallengeBat"
    "tlePosInfo\"\252\002\n\036TDefineChallengeGetTimeCo"
    "nfRsp\022;\n\020ArrExpectProcess\030\001 \003(\0132!.pb.TDe"
    "fineChallengeExpectProcess\022\020\n\010FuncOpen\030\002"
    " \001(\010\0228\n\rActualProcess\030\003 \001(\0132!.pb.TDefine"
    "ChallengeActualProcess\022=\n\016ArrBossProcess"
    "\030\004 \001(\0132%.pb.TDefineChallengeExpectBossPr"
    "ocess\022@\n\021ActualBossProcess\030\005 \001(\0132%.pb.TD"
    "efineChallengeExpectBossProcess\"\213\002\n\036TDef"
    "ineChallengeGetBaseInfoRsp\022\021\n\tWarZoneId\030"
    "\001 \001(\r\022\017\n\007GroupId\030\002 \001(\r\022\017\n\007SceneId\030\003 \001(\t\022"
    "\020\n\010SignTime\030\004 \001(\004\022\025\n\rMaxFightForce\030\005 \001(\004"
    "\022\021\n\tGroupRank\030\006 \001(\r\022\023\n\013WarZoneRank\030\007 \001(\r"
    "\022.\n\010BossInfo\030\010 \001(\0132\034.pb.TDefineChallenge"
    "BossInfo\022\r\n\005Score\030\t \001(\r\022\022\n\nRewardTime\030\n "
    "\001(\004\022\020\n\010IsViewed\030\013 \001(\r\"\203\001\n TDefineChallen"
    "geGetBattleArgsReq\022.\n\010BossInfo\030\001 \001(\0132\034.p"
    "b.TDefineChallengeBossInfo\022/\n\020BattleChec"
    "kParam\030\002 \001(\0132\025.pb.TBattleCheckParam\"G\n T"
    "DefineChallengeGetBattleArgsRsp\022#\n\nBattl"
    "eArgs\030\001 \001(\0132\017.pb.TBattleArgs\"{\n#TDefineC"
    "hallengeReportBattleBossReq\022.\n\010BossInfo\030"
    "\001 \001(\0132\034.pb.TDefineChallengeBossInfo\022\021\n\tB"
    "attleRet\030\002 \001(\014\022\021\n\tMasterHid\030\003 \001(\r\"]\n#TDe"
    "fineChallengeReportBattleBossRsp\022\023\n\013Sett"
    "leScore\030\001 \001(\r\022\022\n\nTotalScore\030\002 \001(\r\022\r\n\005IsW"
    "in\030\003 \001(\r\"+\n\031TDefineChallengeGetFmtReq\022\016\n"
    "\006BossId\030\001 \001(\r\"K\n\031TDefineChallengeGetFmtR"
    "sp\022.\n\003Fmt\030\001 \003(\0132!.pb.TDefineChallengeBat"
    "tlePosInfo\"n\n\031TDefineChallengeSetFmtReq\022"
    ".\n\003Fmt\030\001 \003(\0132!.pb.TDefineChallengeBattle"
    "PosInfo\022\016\n\006BossId\030\002 \001(\r\022\021\n\tDebuffArr\030\003 \003"
    "(\r\"F\n$TDefineChallengeReceiveTaskRewardR"
    "eq\022\016\n\006TaskId\030\001 \001(\r\022\016\n\006BossId\030\002 \001(\r\"L\n$TD"
    "efineChallengeReceiveTaskRewardRsp\022$\n\tRe"
    "wardArr\030\001 \003(\0132\021.pb.TCommonReward\"5\n\"TDef"
    "ineChallengeGetGroupRankArrRep\022\017\n\007GroupI"
    "d\030\001 \001(\r\"\207\001\n\"TDefineChallengeGetGroupRank"
    "ArrRsp\0221\n\013UserRankArr\030\001 \003(\0132\034.pb.TDefine"
    "ChallengeRankInfo\022.\n\010SelfRank\030\002 \001(\0132\034.pb"
    ".TDefineChallengeRankInfo\"X\n$TDefineChal"
    "lengeGetWarZoneRankArrRep\022\021\n\tWarZoneId\030\001"
    " \001(\r\022\016\n\006OffSet\030\002 \001(\r\022\r\n\005Limit\030\003 \001(\r\"\211\001\n$"
    "TDefineChallengeGetWarZoneRankArrRsp\0221\n\013"
    "UserRankArr\030\001 \003(\0132\034.pb.TDefineChallengeR"
    "ankInfo\022.\n\010SelfRank\030\002 \001(\0132\034.pb.TDefineCh"
    "allengeRankInfo\"@\n#TDefineChallengeGetRa"
    "nkFormationRep\022\013\n\003Uid\030\001 \001(\004\022\014\n\004Rank\030\002 \001("
    "\r\"Z\n#TDefineChallengeGetRankFormationRsp"
    "\0223\n\010BossInfo\030\001 \003(\0132!.pb.TDefineChallenge"
    "OtherRankInfo\"/\n\035TDefineChallengeChangeB"
    "ossRep\022\016\n\006BossId\030\001 \001(\r\"O\n\035TDefineChallen"
    "geChangeBossRsp\022.\n\010BossInfo\030\001 \001(\0132\034.pb.T"
    "DefineChallengeBossInfo\"0\n\036TDefineChalle"
    "ngeGetTaskListRep\022\016\n\006BossId\030\001 \001(\r\"P\n\036TDe"
    "fineChallengeGetTaskListRsp\022.\n\010TaskInfo\030"
    "\001 \003(\0132\034.pb.TDefineChallengeTaskInfo\"S\n\036T"
    "DefineChallengeGetShopInfoRsp\0221\n\013GiftInf"
    "oArr\030\001 \003(\0132\034.pb.TDefineChallengeGiftInfo"
    "\"J\n(TDefineChallengeExchangeTimeLimitGif"
    "tRep\022\016\n\006GiftId\030\001 \001(\r\022\016\n\006BuyNum\030\002 \001(\r\"]\n("
    "TDefineChallengeExchangeTimeLimitGiftRsp"
    "\022!\n\006Reward\030\001 \003(\0132\021.pb.TCommonReward\022\016\n\006B"
    "uyNum\030\002 \001(\r\"B\n\035TDefineChallengeSaveDebuf"
    "fRep\022\016\n\006BossId\030\001 \001(\r\022\021\n\tDebuffArr\030\002 \003(\r*"
    "\302\001\n\025EDefineChallengeStage\022\"\n\036EDEFINECHAL"
    "LENGE_STAGE_INVALID\020\000\022\037\n\033EDEFINECHALLENG"
    "E_STAGE_SIGN\020\001\022 \n\034EDEFINECHALLENGE_STAGE"
    "_GROUP\020\002\022!\n\035EDEFINECHALLENGE_STAGE_BATTL"
    "E\020\003\022\037\n\033EDEFINECHALLENGE_STAGE_SHOW\020d*S\n\030"
    "EDefineChallengeBanMType\022\r\n\tBEASTAttr\020\001\022"
    "\016\n\nBEASTSkill\020\002\022\n\n\006WARRID\020\003\022\014\n\010TREASURE\020"
    "\004", 3961);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/DefineChallenge.proto", &protobuf_RegisterTypes);
  TDefineChallengeExpectProcess::default_instance_ = new TDefineChallengeExpectProcess();
  TDefineChallengeActualProcess::default_instance_ = new TDefineChallengeActualProcess();
  TDefineChallengeExpectBossProcess::default_instance_ = new TDefineChallengeExpectBossProcess();
  TDefineChallengeBattlePosInfo::default_instance_ = new TDefineChallengeBattlePosInfo();
  TDefineChallengeFmtInfo::default_instance_ = new TDefineChallengeFmtInfo();
  TDefineChallengeRankInfo::default_instance_ = new TDefineChallengeRankInfo();
  TDefineChallengeBossInfo::default_instance_ = new TDefineChallengeBossInfo();
  TDefineChallengeTaskInfo::default_instance_ = new TDefineChallengeTaskInfo();
  TDefineChallengeGiftInfo::default_instance_ = new TDefineChallengeGiftInfo();
  TDefineChallengeOtherRankInfo::default_instance_ = new TDefineChallengeOtherRankInfo();
  TDefineChallengeGetTimeConfRsp::default_instance_ = new TDefineChallengeGetTimeConfRsp();
  TDefineChallengeGetBaseInfoRsp::default_instance_ = new TDefineChallengeGetBaseInfoRsp();
  TDefineChallengeGetBattleArgsReq::default_instance_ = new TDefineChallengeGetBattleArgsReq();
  TDefineChallengeGetBattleArgsRsp::default_instance_ = new TDefineChallengeGetBattleArgsRsp();
  TDefineChallengeReportBattleBossReq::default_instance_ = new TDefineChallengeReportBattleBossReq();
  TDefineChallengeReportBattleBossRsp::default_instance_ = new TDefineChallengeReportBattleBossRsp();
  TDefineChallengeGetFmtReq::default_instance_ = new TDefineChallengeGetFmtReq();
  TDefineChallengeGetFmtRsp::default_instance_ = new TDefineChallengeGetFmtRsp();
  TDefineChallengeSetFmtReq::default_instance_ = new TDefineChallengeSetFmtReq();
  TDefineChallengeReceiveTaskRewardReq::default_instance_ = new TDefineChallengeReceiveTaskRewardReq();
  TDefineChallengeReceiveTaskRewardRsp::default_instance_ = new TDefineChallengeReceiveTaskRewardRsp();
  TDefineChallengeGetGroupRankArrRep::default_instance_ = new TDefineChallengeGetGroupRankArrRep();
  TDefineChallengeGetGroupRankArrRsp::default_instance_ = new TDefineChallengeGetGroupRankArrRsp();
  TDefineChallengeGetWarZoneRankArrRep::default_instance_ = new TDefineChallengeGetWarZoneRankArrRep();
  TDefineChallengeGetWarZoneRankArrRsp::default_instance_ = new TDefineChallengeGetWarZoneRankArrRsp();
  TDefineChallengeGetRankFormationRep::default_instance_ = new TDefineChallengeGetRankFormationRep();
  TDefineChallengeGetRankFormationRsp::default_instance_ = new TDefineChallengeGetRankFormationRsp();
  TDefineChallengeChangeBossRep::default_instance_ = new TDefineChallengeChangeBossRep();
  TDefineChallengeChangeBossRsp::default_instance_ = new TDefineChallengeChangeBossRsp();
  TDefineChallengeGetTaskListRep::default_instance_ = new TDefineChallengeGetTaskListRep();
  TDefineChallengeGetTaskListRsp::default_instance_ = new TDefineChallengeGetTaskListRsp();
  TDefineChallengeGetShopInfoRsp::default_instance_ = new TDefineChallengeGetShopInfoRsp();
  TDefineChallengeExchangeTimeLimitGiftRep::default_instance_ = new TDefineChallengeExchangeTimeLimitGiftRep();
  TDefineChallengeExchangeTimeLimitGiftRsp::default_instance_ = new TDefineChallengeExchangeTimeLimitGiftRsp();
  TDefineChallengeSaveDebuffRep::default_instance_ = new TDefineChallengeSaveDebuffRep();
  TDefineChallengeExpectProcess::default_instance_->InitAsDefaultInstance();
  TDefineChallengeActualProcess::default_instance_->InitAsDefaultInstance();
  TDefineChallengeExpectBossProcess::default_instance_->InitAsDefaultInstance();
  TDefineChallengeBattlePosInfo::default_instance_->InitAsDefaultInstance();
  TDefineChallengeFmtInfo::default_instance_->InitAsDefaultInstance();
  TDefineChallengeRankInfo::default_instance_->InitAsDefaultInstance();
  TDefineChallengeBossInfo::default_instance_->InitAsDefaultInstance();
  TDefineChallengeTaskInfo::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGiftInfo::default_instance_->InitAsDefaultInstance();
  TDefineChallengeOtherRankInfo::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetTimeConfRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetBaseInfoRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetBattleArgsReq::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetBattleArgsRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeReportBattleBossReq::default_instance_->InitAsDefaultInstance();
  TDefineChallengeReportBattleBossRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetFmtReq::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetFmtRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeSetFmtReq::default_instance_->InitAsDefaultInstance();
  TDefineChallengeReceiveTaskRewardReq::default_instance_->InitAsDefaultInstance();
  TDefineChallengeReceiveTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetGroupRankArrRep::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetGroupRankArrRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetWarZoneRankArrRep::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetWarZoneRankArrRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetRankFormationRep::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetRankFormationRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeChangeBossRep::default_instance_->InitAsDefaultInstance();
  TDefineChallengeChangeBossRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetTaskListRep::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetTaskListRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeGetShopInfoRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeExchangeTimeLimitGiftRep::default_instance_->InitAsDefaultInstance();
  TDefineChallengeExchangeTimeLimitGiftRsp::default_instance_->InitAsDefaultInstance();
  TDefineChallengeSaveDebuffRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fDefineChallenge_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fDefineChallenge_2eproto {
  StaticDescriptorInitializer_net_2fDefineChallenge_2eproto() {
    protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  }
} static_descriptor_initializer_net_2fDefineChallenge_2eproto_;
const ::google::protobuf::EnumDescriptor* EDefineChallengeStage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDefineChallengeStage_descriptor_;
}
bool EDefineChallengeStage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDefineChallengeBanMType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDefineChallengeBanMType_descriptor_;
}
bool EDefineChallengeBanMType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeExpectProcess::kStageFieldNumber;
const int TDefineChallengeExpectProcess::kBegTimeFieldNumber;
const int TDefineChallengeExpectProcess::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeExpectProcess::TDefineChallengeExpectProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeExpectProcess)
}

void TDefineChallengeExpectProcess::InitAsDefaultInstance() {
}

TDefineChallengeExpectProcess::TDefineChallengeExpectProcess(const TDefineChallengeExpectProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeExpectProcess)
}

void TDefineChallengeExpectProcess::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  begtime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeExpectProcess::~TDefineChallengeExpectProcess() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeExpectProcess)
  SharedDtor();
}

void TDefineChallengeExpectProcess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeExpectProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeExpectProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeExpectProcess_descriptor_;
}

const TDefineChallengeExpectProcess& TDefineChallengeExpectProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeExpectProcess* TDefineChallengeExpectProcess::default_instance_ = NULL;

TDefineChallengeExpectProcess* TDefineChallengeExpectProcess::New() const {
  return new TDefineChallengeExpectProcess;
}

void TDefineChallengeExpectProcess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeExpectProcess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(begtime_, stage_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeExpectProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeExpectProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EDefineChallengeStage Stage = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EDefineChallengeStage_IsValid(value)) {
            set_stage(static_cast< ::pb::EDefineChallengeStage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BegTime;
        break;
      }

      // optional uint64 BegTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BegTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begtime_)));
          set_has_begtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeExpectProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeExpectProcess)
  return false;
#undef DO_
}

void TDefineChallengeExpectProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeExpectProcess)
  // optional .pb.EDefineChallengeStage Stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->stage(), output);
  }

  // optional uint64 BegTime = 2;
  if (has_begtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->begtime(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeExpectProcess)
}

::google::protobuf::uint8* TDefineChallengeExpectProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeExpectProcess)
  // optional .pb.EDefineChallengeStage Stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->stage(), target);
  }

  // optional uint64 BegTime = 2;
  if (has_begtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->begtime(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeExpectProcess)
  return target;
}

int TDefineChallengeExpectProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EDefineChallengeStage Stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
    }

    // optional uint64 BegTime = 2;
    if (has_begtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begtime());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeExpectProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeExpectProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeExpectProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeExpectProcess::MergeFrom(const TDefineChallengeExpectProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_begtime()) {
      set_begtime(from.begtime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeExpectProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeExpectProcess::CopyFrom(const TDefineChallengeExpectProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeExpectProcess::IsInitialized() const {

  return true;
}

void TDefineChallengeExpectProcess::Swap(TDefineChallengeExpectProcess* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(begtime_, other->begtime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeExpectProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeExpectProcess_descriptor_;
  metadata.reflection = TDefineChallengeExpectProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeActualProcess::kExpectProcessFieldNumber;
const int TDefineChallengeActualProcess::kDoneTimeFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeActualProcess::TDefineChallengeActualProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeActualProcess)
}

void TDefineChallengeActualProcess::InitAsDefaultInstance() {
  expectprocess_ = const_cast< ::pb::TDefineChallengeExpectProcess*>(&::pb::TDefineChallengeExpectProcess::default_instance());
}

TDefineChallengeActualProcess::TDefineChallengeActualProcess(const TDefineChallengeActualProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeActualProcess)
}

void TDefineChallengeActualProcess::SharedCtor() {
  _cached_size_ = 0;
  expectprocess_ = NULL;
  donetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeActualProcess::~TDefineChallengeActualProcess() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeActualProcess)
  SharedDtor();
}

void TDefineChallengeActualProcess::SharedDtor() {
  if (this != default_instance_) {
    delete expectprocess_;
  }
}

void TDefineChallengeActualProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeActualProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeActualProcess_descriptor_;
}

const TDefineChallengeActualProcess& TDefineChallengeActualProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeActualProcess* TDefineChallengeActualProcess::default_instance_ = NULL;

TDefineChallengeActualProcess* TDefineChallengeActualProcess::New() const {
  return new TDefineChallengeActualProcess;
}

void TDefineChallengeActualProcess::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_expectprocess()) {
      if (expectprocess_ != NULL) expectprocess_->::pb::TDefineChallengeExpectProcess::Clear();
    }
    donetime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeActualProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeActualProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TDefineChallengeExpectProcess ExpectProcess = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expectprocess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DoneTime;
        break;
      }

      // optional uint64 DoneTime = 2;
      case 2: {
        if (tag == 16) {
         parse_DoneTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &donetime_)));
          set_has_donetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeActualProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeActualProcess)
  return false;
#undef DO_
}

void TDefineChallengeActualProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeActualProcess)
  // optional .pb.TDefineChallengeExpectProcess ExpectProcess = 1;
  if (has_expectprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->expectprocess(), output);
  }

  // optional uint64 DoneTime = 2;
  if (has_donetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->donetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeActualProcess)
}

::google::protobuf::uint8* TDefineChallengeActualProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeActualProcess)
  // optional .pb.TDefineChallengeExpectProcess ExpectProcess = 1;
  if (has_expectprocess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->expectprocess(), target);
  }

  // optional uint64 DoneTime = 2;
  if (has_donetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->donetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeActualProcess)
  return target;
}

int TDefineChallengeActualProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TDefineChallengeExpectProcess ExpectProcess = 1;
    if (has_expectprocess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->expectprocess());
    }

    // optional uint64 DoneTime = 2;
    if (has_donetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->donetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeActualProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeActualProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeActualProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeActualProcess::MergeFrom(const TDefineChallengeActualProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expectprocess()) {
      mutable_expectprocess()->::pb::TDefineChallengeExpectProcess::MergeFrom(from.expectprocess());
    }
    if (from.has_donetime()) {
      set_donetime(from.donetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeActualProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeActualProcess::CopyFrom(const TDefineChallengeActualProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeActualProcess::IsInitialized() const {

  return true;
}

void TDefineChallengeActualProcess::Swap(TDefineChallengeActualProcess* other) {
  if (other != this) {
    std::swap(expectprocess_, other->expectprocess_);
    std::swap(donetime_, other->donetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeActualProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeActualProcess_descriptor_;
  metadata.reflection = TDefineChallengeActualProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeExpectBossProcess::kBossIdFieldNumber;
const int TDefineChallengeExpectBossProcess::kBegTimeFieldNumber;
const int TDefineChallengeExpectBossProcess::kEndTimeFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeExpectBossProcess::TDefineChallengeExpectBossProcess()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeExpectBossProcess)
}

void TDefineChallengeExpectBossProcess::InitAsDefaultInstance() {
}

TDefineChallengeExpectBossProcess::TDefineChallengeExpectBossProcess(const TDefineChallengeExpectBossProcess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeExpectBossProcess)
}

void TDefineChallengeExpectBossProcess::SharedCtor() {
  _cached_size_ = 0;
  begtime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeExpectBossProcess::~TDefineChallengeExpectBossProcess() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeExpectBossProcess)
  SharedDtor();
}

void TDefineChallengeExpectBossProcess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeExpectBossProcess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeExpectBossProcess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeExpectBossProcess_descriptor_;
}

const TDefineChallengeExpectBossProcess& TDefineChallengeExpectBossProcess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeExpectBossProcess* TDefineChallengeExpectBossProcess::default_instance_ = NULL;

TDefineChallengeExpectBossProcess* TDefineChallengeExpectBossProcess::New() const {
  return new TDefineChallengeExpectBossProcess;
}

void TDefineChallengeExpectBossProcess::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeExpectBossProcess*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(begtime_, endtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  bossid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeExpectBossProcess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeExpectBossProcess)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
         parse_BossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_bossid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_bossid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_BossId;
        if (input->ExpectTag(16)) goto parse_BegTime;
        break;
      }

      // optional uint64 BegTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BegTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begtime_)));
          set_has_begtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeExpectBossProcess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeExpectBossProcess)
  return false;
#undef DO_
}

void TDefineChallengeExpectBossProcess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeExpectBossProcess)
  // repeated uint32 BossId = 1;
  for (int i = 0; i < this->bossid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->bossid(i), output);
  }

  // optional uint64 BegTime = 2;
  if (has_begtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->begtime(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeExpectBossProcess)
}

::google::protobuf::uint8* TDefineChallengeExpectBossProcess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeExpectBossProcess)
  // repeated uint32 BossId = 1;
  for (int i = 0; i < this->bossid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->bossid(i), target);
  }

  // optional uint64 BegTime = 2;
  if (has_begtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->begtime(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeExpectBossProcess)
  return target;
}

int TDefineChallengeExpectBossProcess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 BegTime = 2;
    if (has_begtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begtime());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

  }
  // repeated uint32 BossId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->bossid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->bossid(i));
    }
    total_size += 1 * this->bossid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeExpectBossProcess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeExpectBossProcess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeExpectBossProcess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeExpectBossProcess::MergeFrom(const TDefineChallengeExpectBossProcess& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossid_.MergeFrom(from.bossid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_begtime()) {
      set_begtime(from.begtime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeExpectBossProcess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeExpectBossProcess::CopyFrom(const TDefineChallengeExpectBossProcess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeExpectBossProcess::IsInitialized() const {

  return true;
}

void TDefineChallengeExpectBossProcess::Swap(TDefineChallengeExpectBossProcess* other) {
  if (other != this) {
    bossid_.Swap(&other->bossid_);
    std::swap(begtime_, other->begtime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeExpectBossProcess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeExpectBossProcess_descriptor_;
  metadata.reflection = TDefineChallengeExpectBossProcess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeBattlePosInfo::kPosFieldNumber;
const int TDefineChallengeBattlePosInfo::kHidFieldNumber;
const int TDefineChallengeBattlePosInfo::kStarFieldNumber;
const int TDefineChallengeBattlePosInfo::kAptitudeFieldNumber;
const int TDefineChallengeBattlePosInfo::kHtidFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeBattlePosInfo::TDefineChallengeBattlePosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeBattlePosInfo)
}

void TDefineChallengeBattlePosInfo::InitAsDefaultInstance() {
}

TDefineChallengeBattlePosInfo::TDefineChallengeBattlePosInfo(const TDefineChallengeBattlePosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeBattlePosInfo)
}

void TDefineChallengeBattlePosInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  hid_ = 0u;
  star_ = 0u;
  aptitude_ = 0u;
  htid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeBattlePosInfo::~TDefineChallengeBattlePosInfo() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeBattlePosInfo)
  SharedDtor();
}

void TDefineChallengeBattlePosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeBattlePosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeBattlePosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeBattlePosInfo_descriptor_;
}

const TDefineChallengeBattlePosInfo& TDefineChallengeBattlePosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeBattlePosInfo* TDefineChallengeBattlePosInfo::default_instance_ = NULL;

TDefineChallengeBattlePosInfo* TDefineChallengeBattlePosInfo::New() const {
  return new TDefineChallengeBattlePosInfo;
}

void TDefineChallengeBattlePosInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeBattlePosInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(pos_, htid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeBattlePosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeBattlePosInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Star;
        break;
      }

      // optional uint32 Star = 3;
      case 3: {
        if (tag == 24) {
         parse_Star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Aptitude;
        break;
      }

      // optional uint32 Aptitude = 4;
      case 4: {
        if (tag == 32) {
         parse_Aptitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aptitude_)));
          set_has_aptitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 5;
      case 5: {
        if (tag == 40) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeBattlePosInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeBattlePosInfo)
  return false;
#undef DO_
}

void TDefineChallengeBattlePosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeBattlePosInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  // optional uint32 Star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->star(), output);
  }

  // optional uint32 Aptitude = 4;
  if (has_aptitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->aptitude(), output);
  }

  // optional uint32 Htid = 5;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->htid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeBattlePosInfo)
}

::google::protobuf::uint8* TDefineChallengeBattlePosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeBattlePosInfo)
  // optional uint32 Pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  // optional uint32 Star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->star(), target);
  }

  // optional uint32 Aptitude = 4;
  if (has_aptitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->aptitude(), target);
  }

  // optional uint32 Htid = 5;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->htid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeBattlePosInfo)
  return target;
}

int TDefineChallengeBattlePosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional uint32 Aptitude = 4;
    if (has_aptitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aptitude());
    }

    // optional uint32 Htid = 5;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeBattlePosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeBattlePosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeBattlePosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeBattlePosInfo::MergeFrom(const TDefineChallengeBattlePosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_aptitude()) {
      set_aptitude(from.aptitude());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeBattlePosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeBattlePosInfo::CopyFrom(const TDefineChallengeBattlePosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeBattlePosInfo::IsInitialized() const {

  return true;
}

void TDefineChallengeBattlePosInfo::Swap(TDefineChallengeBattlePosInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(hid_, other->hid_);
    std::swap(star_, other->star_);
    std::swap(aptitude_, other->aptitude_);
    std::swap(htid_, other->htid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeBattlePosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeBattlePosInfo_descriptor_;
  metadata.reflection = TDefineChallengeBattlePosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeFmtInfo::kBossIdFieldNumber;
const int TDefineChallengeFmtInfo::kArrPosFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeFmtInfo::TDefineChallengeFmtInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeFmtInfo)
}

void TDefineChallengeFmtInfo::InitAsDefaultInstance() {
}

TDefineChallengeFmtInfo::TDefineChallengeFmtInfo(const TDefineChallengeFmtInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeFmtInfo)
}

void TDefineChallengeFmtInfo::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeFmtInfo::~TDefineChallengeFmtInfo() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeFmtInfo)
  SharedDtor();
}

void TDefineChallengeFmtInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeFmtInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeFmtInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeFmtInfo_descriptor_;
}

const TDefineChallengeFmtInfo& TDefineChallengeFmtInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeFmtInfo* TDefineChallengeFmtInfo::default_instance_ = NULL;

TDefineChallengeFmtInfo* TDefineChallengeFmtInfo::New() const {
  return new TDefineChallengeFmtInfo;
}

void TDefineChallengeFmtInfo::Clear() {
  bossid_ = 0u;
  arrpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeFmtInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeFmtInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrPos;
        break;
      }

      // repeated .pb.TDefineChallengeBattlePosInfo ArrPos = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrPos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeFmtInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeFmtInfo)
  return false;
#undef DO_
}

void TDefineChallengeFmtInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeFmtInfo)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // repeated .pb.TDefineChallengeBattlePosInfo ArrPos = 2;
  for (int i = 0; i < this->arrpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrpos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeFmtInfo)
}

::google::protobuf::uint8* TDefineChallengeFmtInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeFmtInfo)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // repeated .pb.TDefineChallengeBattlePosInfo ArrPos = 2;
  for (int i = 0; i < this->arrpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrpos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeFmtInfo)
  return target;
}

int TDefineChallengeFmtInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  // repeated .pb.TDefineChallengeBattlePosInfo ArrPos = 2;
  total_size += 1 * this->arrpos_size();
  for (int i = 0; i < this->arrpos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrpos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeFmtInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeFmtInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeFmtInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeFmtInfo::MergeFrom(const TDefineChallengeFmtInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrpos_.MergeFrom(from.arrpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeFmtInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeFmtInfo::CopyFrom(const TDefineChallengeFmtInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeFmtInfo::IsInitialized() const {

  return true;
}

void TDefineChallengeFmtInfo::Swap(TDefineChallengeFmtInfo* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    arrpos_.Swap(&other->arrpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeFmtInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeFmtInfo_descriptor_;
  metadata.reflection = TDefineChallengeFmtInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeRankInfo::kRankFieldNumber;
const int TDefineChallengeRankInfo::kScoreFieldNumber;
const int TDefineChallengeRankInfo::kSimpleInfoFieldNumber;
const int TDefineChallengeRankInfo::kRecordTimeFieldNumber;
const int TDefineChallengeRankInfo::kUidFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeRankInfo::TDefineChallengeRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeRankInfo)
}

void TDefineChallengeRankInfo::InitAsDefaultInstance() {
  simpleinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TDefineChallengeRankInfo::TDefineChallengeRankInfo(const TDefineChallengeRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeRankInfo)
}

void TDefineChallengeRankInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  score_ = 0u;
  simpleinfo_ = NULL;
  recordtime_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeRankInfo::~TDefineChallengeRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeRankInfo)
  SharedDtor();
}

void TDefineChallengeRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete simpleinfo_;
  }
}

void TDefineChallengeRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeRankInfo_descriptor_;
}

const TDefineChallengeRankInfo& TDefineChallengeRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeRankInfo* TDefineChallengeRankInfo::default_instance_ = NULL;

TDefineChallengeRankInfo* TDefineChallengeRankInfo::New() const {
  return new TDefineChallengeRankInfo;
}

void TDefineChallengeRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(rank_, score_);
    ZR_(recordtime_, uid_);
    if (has_simpleinfo()) {
      if (simpleinfo_ != NULL) simpleinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Rank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SimpleInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo SimpleInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_SimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 4;
      case 4: {
        if (tag == 32) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 5;
      case 5: {
        if (tag == 40) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeRankInfo)
  return false;
#undef DO_
}

void TDefineChallengeRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeRankInfo)
  // optional uint32 Rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional .pb.TUserSimpleInfo SimpleInfo = 3;
  if (has_simpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->simpleinfo(), output);
  }

  // optional uint64 RecordTime = 4;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->recordtime(), output);
  }

  // optional uint64 Uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->uid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeRankInfo)
}

::google::protobuf::uint8* TDefineChallengeRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeRankInfo)
  // optional uint32 Rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional .pb.TUserSimpleInfo SimpleInfo = 3;
  if (has_simpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->simpleinfo(), target);
  }

  // optional uint64 RecordTime = 4;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->recordtime(), target);
  }

  // optional uint64 Uid = 5;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->uid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeRankInfo)
  return target;
}

int TDefineChallengeRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional .pb.TUserSimpleInfo SimpleInfo = 3;
    if (has_simpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simpleinfo());
    }

    // optional uint64 RecordTime = 4;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // optional uint64 Uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeRankInfo::MergeFrom(const TDefineChallengeRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_simpleinfo()) {
      mutable_simpleinfo()->::pb::TUserSimpleInfo::MergeFrom(from.simpleinfo());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeRankInfo::CopyFrom(const TDefineChallengeRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeRankInfo::IsInitialized() const {

  return true;
}

void TDefineChallengeRankInfo::Swap(TDefineChallengeRankInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(simpleinfo_, other->simpleinfo_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeRankInfo_descriptor_;
  metadata.reflection = TDefineChallengeRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeBossInfo::kBossIdFieldNumber;
const int TDefineChallengeBossInfo::kDebuffArrFieldNumber;
const int TDefineChallengeBossInfo::kBanHeroFieldNumber;
const int TDefineChallengeBossInfo::kDebuffArrUnlockedFieldNumber;
const int TDefineChallengeBossInfo::kFightForceFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeBossInfo::TDefineChallengeBossInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeBossInfo)
}

void TDefineChallengeBossInfo::InitAsDefaultInstance() {
}

TDefineChallengeBossInfo::TDefineChallengeBossInfo(const TDefineChallengeBossInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeBossInfo)
}

void TDefineChallengeBossInfo::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeBossInfo::~TDefineChallengeBossInfo() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeBossInfo)
  SharedDtor();
}

void TDefineChallengeBossInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeBossInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeBossInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeBossInfo_descriptor_;
}

const TDefineChallengeBossInfo& TDefineChallengeBossInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeBossInfo* TDefineChallengeBossInfo::default_instance_ = NULL;

TDefineChallengeBossInfo* TDefineChallengeBossInfo::New() const {
  return new TDefineChallengeBossInfo;
}

void TDefineChallengeBossInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeBossInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, bossid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  debuffarr_.Clear();
  banhero_.Clear();
  debuffarrunlocked_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeBossInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeBossInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DebuffArr;
        break;
      }

      // repeated uint32 DebuffArr = 2;
      case 2: {
        if (tag == 16) {
         parse_DebuffArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_debuffarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_debuffarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DebuffArr;
        if (input->ExpectTag(24)) goto parse_BanHero;
        break;
      }

      // repeated uint32 BanHero = 3;
      case 3: {
        if (tag == 24) {
         parse_BanHero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_banhero())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_banhero())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BanHero;
        if (input->ExpectTag(32)) goto parse_DebuffArrUnlocked;
        break;
      }

      // repeated uint32 DebuffArrUnlocked = 4;
      case 4: {
        if (tag == 32) {
         parse_DebuffArrUnlocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_debuffarrunlocked())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_debuffarrunlocked())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DebuffArrUnlocked;
        if (input->ExpectTag(40)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 5;
      case 5: {
        if (tag == 40) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeBossInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeBossInfo)
  return false;
#undef DO_
}

void TDefineChallengeBossInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeBossInfo)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // repeated uint32 DebuffArr = 2;
  for (int i = 0; i < this->debuffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->debuffarr(i), output);
  }

  // repeated uint32 BanHero = 3;
  for (int i = 0; i < this->banhero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->banhero(i), output);
  }

  // repeated uint32 DebuffArrUnlocked = 4;
  for (int i = 0; i < this->debuffarrunlocked_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->debuffarrunlocked(i), output);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeBossInfo)
}

::google::protobuf::uint8* TDefineChallengeBossInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeBossInfo)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // repeated uint32 DebuffArr = 2;
  for (int i = 0; i < this->debuffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->debuffarr(i), target);
  }

  // repeated uint32 BanHero = 3;
  for (int i = 0; i < this->banhero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->banhero(i), target);
  }

  // repeated uint32 DebuffArrUnlocked = 4;
  for (int i = 0; i < this->debuffarrunlocked_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->debuffarrunlocked(i), target);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeBossInfo)
  return target;
}

int TDefineChallengeBossInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint64 FightForce = 5;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated uint32 DebuffArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->debuffarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->debuffarr(i));
    }
    total_size += 1 * this->debuffarr_size() + data_size;
  }

  // repeated uint32 BanHero = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->banhero_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->banhero(i));
    }
    total_size += 1 * this->banhero_size() + data_size;
  }

  // repeated uint32 DebuffArrUnlocked = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->debuffarrunlocked_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->debuffarrunlocked(i));
    }
    total_size += 1 * this->debuffarrunlocked_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeBossInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeBossInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeBossInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeBossInfo::MergeFrom(const TDefineChallengeBossInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  debuffarr_.MergeFrom(from.debuffarr_);
  banhero_.MergeFrom(from.banhero_);
  debuffarrunlocked_.MergeFrom(from.debuffarrunlocked_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeBossInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeBossInfo::CopyFrom(const TDefineChallengeBossInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeBossInfo::IsInitialized() const {

  return true;
}

void TDefineChallengeBossInfo::Swap(TDefineChallengeBossInfo* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    debuffarr_.Swap(&other->debuffarr_);
    banhero_.Swap(&other->banhero_);
    debuffarrunlocked_.Swap(&other->debuffarrunlocked_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeBossInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeBossInfo_descriptor_;
  metadata.reflection = TDefineChallengeBossInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeTaskInfo::kTaskIdFieldNumber;
const int TDefineChallengeTaskInfo::kNumFieldNumber;
const int TDefineChallengeTaskInfo::kRewardTimeFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeTaskInfo::TDefineChallengeTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeTaskInfo)
}

void TDefineChallengeTaskInfo::InitAsDefaultInstance() {
}

TDefineChallengeTaskInfo::TDefineChallengeTaskInfo(const TDefineChallengeTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeTaskInfo)
}

void TDefineChallengeTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  num_ = 0u;
  rewardtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeTaskInfo::~TDefineChallengeTaskInfo() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeTaskInfo)
  SharedDtor();
}

void TDefineChallengeTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeTaskInfo_descriptor_;
}

const TDefineChallengeTaskInfo& TDefineChallengeTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeTaskInfo* TDefineChallengeTaskInfo::default_instance_ = NULL;

TDefineChallengeTaskInfo* TDefineChallengeTaskInfo::New() const {
  return new TDefineChallengeTaskInfo;
}

void TDefineChallengeTaskInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeTaskInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, rewardtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 3;
      case 3: {
        if (tag == 24) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeTaskInfo)
  return false;
#undef DO_
}

void TDefineChallengeTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeTaskInfo)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint64 RewardTime = 3;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->rewardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeTaskInfo)
}

::google::protobuf::uint8* TDefineChallengeTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeTaskInfo)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint64 RewardTime = 3;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->rewardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeTaskInfo)
  return target;
}

int TDefineChallengeTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint64 RewardTime = 3;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeTaskInfo::MergeFrom(const TDefineChallengeTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeTaskInfo::CopyFrom(const TDefineChallengeTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeTaskInfo::IsInitialized() const {

  return true;
}

void TDefineChallengeTaskInfo::Swap(TDefineChallengeTaskInfo* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(num_, other->num_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeTaskInfo_descriptor_;
  metadata.reflection = TDefineChallengeTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGiftInfo::kIdFieldNumber;
const int TDefineChallengeGiftInfo::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGiftInfo::TDefineChallengeGiftInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGiftInfo)
}

void TDefineChallengeGiftInfo::InitAsDefaultInstance() {
}

TDefineChallengeGiftInfo::TDefineChallengeGiftInfo(const TDefineChallengeGiftInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGiftInfo)
}

void TDefineChallengeGiftInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGiftInfo::~TDefineChallengeGiftInfo() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGiftInfo)
  SharedDtor();
}

void TDefineChallengeGiftInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeGiftInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGiftInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGiftInfo_descriptor_;
}

const TDefineChallengeGiftInfo& TDefineChallengeGiftInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGiftInfo* TDefineChallengeGiftInfo::default_instance_ = NULL;

TDefineChallengeGiftInfo* TDefineChallengeGiftInfo::New() const {
  return new TDefineChallengeGiftInfo;
}

void TDefineChallengeGiftInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeGiftInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGiftInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGiftInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGiftInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGiftInfo)
  return false;
#undef DO_
}

void TDefineChallengeGiftInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGiftInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGiftInfo)
}

::google::protobuf::uint8* TDefineChallengeGiftInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGiftInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGiftInfo)
  return target;
}

int TDefineChallengeGiftInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGiftInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGiftInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGiftInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGiftInfo::MergeFrom(const TDefineChallengeGiftInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGiftInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGiftInfo::CopyFrom(const TDefineChallengeGiftInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGiftInfo::IsInitialized() const {

  return true;
}

void TDefineChallengeGiftInfo::Swap(TDefineChallengeGiftInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGiftInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGiftInfo_descriptor_;
  metadata.reflection = TDefineChallengeGiftInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeOtherRankInfo::kBossInfoFieldNumber;
const int TDefineChallengeOtherRankInfo::kScoreFieldNumber;
const int TDefineChallengeOtherRankInfo::kFmtFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeOtherRankInfo::TDefineChallengeOtherRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeOtherRankInfo)
}

void TDefineChallengeOtherRankInfo::InitAsDefaultInstance() {
  bossinfo_ = const_cast< ::pb::TDefineChallengeBossInfo*>(&::pb::TDefineChallengeBossInfo::default_instance());
}

TDefineChallengeOtherRankInfo::TDefineChallengeOtherRankInfo(const TDefineChallengeOtherRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeOtherRankInfo)
}

void TDefineChallengeOtherRankInfo::SharedCtor() {
  _cached_size_ = 0;
  bossinfo_ = NULL;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeOtherRankInfo::~TDefineChallengeOtherRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeOtherRankInfo)
  SharedDtor();
}

void TDefineChallengeOtherRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete bossinfo_;
  }
}

void TDefineChallengeOtherRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeOtherRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeOtherRankInfo_descriptor_;
}

const TDefineChallengeOtherRankInfo& TDefineChallengeOtherRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeOtherRankInfo* TDefineChallengeOtherRankInfo::default_instance_ = NULL;

TDefineChallengeOtherRankInfo* TDefineChallengeOtherRankInfo::New() const {
  return new TDefineChallengeOtherRankInfo;
}

void TDefineChallengeOtherRankInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_bossinfo()) {
      if (bossinfo_ != NULL) bossinfo_->::pb::TDefineChallengeBossInfo::Clear();
    }
    score_ = 0u;
  }
  fmt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeOtherRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeOtherRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (tag == 16) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Fmt;
        break;
      }

      // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 3;
      case 3: {
        if (tag == 26) {
         parse_Fmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fmt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Fmt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeOtherRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeOtherRankInfo)
  return false;
#undef DO_
}

void TDefineChallengeOtherRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeOtherRankInfo)
  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  if (has_bossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bossinfo(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 3;
  for (int i = 0; i < this->fmt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fmt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeOtherRankInfo)
}

::google::protobuf::uint8* TDefineChallengeOtherRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeOtherRankInfo)
  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  if (has_bossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bossinfo(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 3;
  for (int i = 0; i < this->fmt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fmt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeOtherRankInfo)
  return target;
}

int TDefineChallengeOtherRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
    if (has_bossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bossinfo());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 3;
  total_size += 1 * this->fmt_size();
  for (int i = 0; i < this->fmt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fmt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeOtherRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeOtherRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeOtherRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeOtherRankInfo::MergeFrom(const TDefineChallengeOtherRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fmt_.MergeFrom(from.fmt_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossinfo()) {
      mutable_bossinfo()->::pb::TDefineChallengeBossInfo::MergeFrom(from.bossinfo());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeOtherRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeOtherRankInfo::CopyFrom(const TDefineChallengeOtherRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeOtherRankInfo::IsInitialized() const {

  return true;
}

void TDefineChallengeOtherRankInfo::Swap(TDefineChallengeOtherRankInfo* other) {
  if (other != this) {
    std::swap(bossinfo_, other->bossinfo_);
    std::swap(score_, other->score_);
    fmt_.Swap(&other->fmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeOtherRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeOtherRankInfo_descriptor_;
  metadata.reflection = TDefineChallengeOtherRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetTimeConfRsp::kArrExpectProcessFieldNumber;
const int TDefineChallengeGetTimeConfRsp::kFuncOpenFieldNumber;
const int TDefineChallengeGetTimeConfRsp::kActualProcessFieldNumber;
const int TDefineChallengeGetTimeConfRsp::kArrBossProcessFieldNumber;
const int TDefineChallengeGetTimeConfRsp::kActualBossProcessFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetTimeConfRsp::TDefineChallengeGetTimeConfRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetTimeConfRsp)
}

void TDefineChallengeGetTimeConfRsp::InitAsDefaultInstance() {
  actualprocess_ = const_cast< ::pb::TDefineChallengeActualProcess*>(&::pb::TDefineChallengeActualProcess::default_instance());
  arrbossprocess_ = const_cast< ::pb::TDefineChallengeExpectBossProcess*>(&::pb::TDefineChallengeExpectBossProcess::default_instance());
  actualbossprocess_ = const_cast< ::pb::TDefineChallengeExpectBossProcess*>(&::pb::TDefineChallengeExpectBossProcess::default_instance());
}

TDefineChallengeGetTimeConfRsp::TDefineChallengeGetTimeConfRsp(const TDefineChallengeGetTimeConfRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetTimeConfRsp)
}

void TDefineChallengeGetTimeConfRsp::SharedCtor() {
  _cached_size_ = 0;
  funcopen_ = false;
  actualprocess_ = NULL;
  arrbossprocess_ = NULL;
  actualbossprocess_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetTimeConfRsp::~TDefineChallengeGetTimeConfRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetTimeConfRsp)
  SharedDtor();
}

void TDefineChallengeGetTimeConfRsp::SharedDtor() {
  if (this != default_instance_) {
    delete actualprocess_;
    delete arrbossprocess_;
    delete actualbossprocess_;
  }
}

void TDefineChallengeGetTimeConfRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetTimeConfRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetTimeConfRsp_descriptor_;
}

const TDefineChallengeGetTimeConfRsp& TDefineChallengeGetTimeConfRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetTimeConfRsp* TDefineChallengeGetTimeConfRsp::default_instance_ = NULL;

TDefineChallengeGetTimeConfRsp* TDefineChallengeGetTimeConfRsp::New() const {
  return new TDefineChallengeGetTimeConfRsp;
}

void TDefineChallengeGetTimeConfRsp::Clear() {
  if (_has_bits_[0 / 32] & 30) {
    funcopen_ = false;
    if (has_actualprocess()) {
      if (actualprocess_ != NULL) actualprocess_->::pb::TDefineChallengeActualProcess::Clear();
    }
    if (has_arrbossprocess()) {
      if (arrbossprocess_ != NULL) arrbossprocess_->::pb::TDefineChallengeExpectBossProcess::Clear();
    }
    if (has_actualbossprocess()) {
      if (actualbossprocess_ != NULL) actualbossprocess_->::pb::TDefineChallengeExpectBossProcess::Clear();
    }
  }
  arrexpectprocess_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetTimeConfRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetTimeConfRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TDefineChallengeExpectProcess ArrExpectProcess = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrExpectProcess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrexpectprocess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrExpectProcess;
        if (input->ExpectTag(16)) goto parse_FuncOpen;
        break;
      }

      // optional bool FuncOpen = 2;
      case 2: {
        if (tag == 16) {
         parse_FuncOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &funcopen_)));
          set_has_funcopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ActualProcess;
        break;
      }

      // optional .pb.TDefineChallengeActualProcess ActualProcess = 3;
      case 3: {
        if (tag == 26) {
         parse_ActualProcess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actualprocess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrBossProcess;
        break;
      }

      // optional .pb.TDefineChallengeExpectBossProcess ArrBossProcess = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrBossProcess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arrbossprocess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ActualBossProcess;
        break;
      }

      // optional .pb.TDefineChallengeExpectBossProcess ActualBossProcess = 5;
      case 5: {
        if (tag == 42) {
         parse_ActualBossProcess:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_actualbossprocess()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetTimeConfRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetTimeConfRsp)
  return false;
#undef DO_
}

void TDefineChallengeGetTimeConfRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetTimeConfRsp)
  // repeated .pb.TDefineChallengeExpectProcess ArrExpectProcess = 1;
  for (int i = 0; i < this->arrexpectprocess_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrexpectprocess(i), output);
  }

  // optional bool FuncOpen = 2;
  if (has_funcopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->funcopen(), output);
  }

  // optional .pb.TDefineChallengeActualProcess ActualProcess = 3;
  if (has_actualprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->actualprocess(), output);
  }

  // optional .pb.TDefineChallengeExpectBossProcess ArrBossProcess = 4;
  if (has_arrbossprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrbossprocess(), output);
  }

  // optional .pb.TDefineChallengeExpectBossProcess ActualBossProcess = 5;
  if (has_actualbossprocess()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->actualbossprocess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetTimeConfRsp)
}

::google::protobuf::uint8* TDefineChallengeGetTimeConfRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetTimeConfRsp)
  // repeated .pb.TDefineChallengeExpectProcess ArrExpectProcess = 1;
  for (int i = 0; i < this->arrexpectprocess_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrexpectprocess(i), target);
  }

  // optional bool FuncOpen = 2;
  if (has_funcopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->funcopen(), target);
  }

  // optional .pb.TDefineChallengeActualProcess ActualProcess = 3;
  if (has_actualprocess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->actualprocess(), target);
  }

  // optional .pb.TDefineChallengeExpectBossProcess ArrBossProcess = 4;
  if (has_arrbossprocess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrbossprocess(), target);
  }

  // optional .pb.TDefineChallengeExpectBossProcess ActualBossProcess = 5;
  if (has_actualbossprocess()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->actualbossprocess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetTimeConfRsp)
  return target;
}

int TDefineChallengeGetTimeConfRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool FuncOpen = 2;
    if (has_funcopen()) {
      total_size += 1 + 1;
    }

    // optional .pb.TDefineChallengeActualProcess ActualProcess = 3;
    if (has_actualprocess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actualprocess());
    }

    // optional .pb.TDefineChallengeExpectBossProcess ArrBossProcess = 4;
    if (has_arrbossprocess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arrbossprocess());
    }

    // optional .pb.TDefineChallengeExpectBossProcess ActualBossProcess = 5;
    if (has_actualbossprocess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->actualbossprocess());
    }

  }
  // repeated .pb.TDefineChallengeExpectProcess ArrExpectProcess = 1;
  total_size += 1 * this->arrexpectprocess_size();
  for (int i = 0; i < this->arrexpectprocess_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrexpectprocess(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetTimeConfRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetTimeConfRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetTimeConfRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetTimeConfRsp::MergeFrom(const TDefineChallengeGetTimeConfRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrexpectprocess_.MergeFrom(from.arrexpectprocess_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_funcopen()) {
      set_funcopen(from.funcopen());
    }
    if (from.has_actualprocess()) {
      mutable_actualprocess()->::pb::TDefineChallengeActualProcess::MergeFrom(from.actualprocess());
    }
    if (from.has_arrbossprocess()) {
      mutable_arrbossprocess()->::pb::TDefineChallengeExpectBossProcess::MergeFrom(from.arrbossprocess());
    }
    if (from.has_actualbossprocess()) {
      mutable_actualbossprocess()->::pb::TDefineChallengeExpectBossProcess::MergeFrom(from.actualbossprocess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetTimeConfRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetTimeConfRsp::CopyFrom(const TDefineChallengeGetTimeConfRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetTimeConfRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeGetTimeConfRsp::Swap(TDefineChallengeGetTimeConfRsp* other) {
  if (other != this) {
    arrexpectprocess_.Swap(&other->arrexpectprocess_);
    std::swap(funcopen_, other->funcopen_);
    std::swap(actualprocess_, other->actualprocess_);
    std::swap(arrbossprocess_, other->arrbossprocess_);
    std::swap(actualbossprocess_, other->actualbossprocess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetTimeConfRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetTimeConfRsp_descriptor_;
  metadata.reflection = TDefineChallengeGetTimeConfRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetBaseInfoRsp::kWarZoneIdFieldNumber;
const int TDefineChallengeGetBaseInfoRsp::kGroupIdFieldNumber;
const int TDefineChallengeGetBaseInfoRsp::kSceneIdFieldNumber;
const int TDefineChallengeGetBaseInfoRsp::kSignTimeFieldNumber;
const int TDefineChallengeGetBaseInfoRsp::kMaxFightForceFieldNumber;
const int TDefineChallengeGetBaseInfoRsp::kGroupRankFieldNumber;
const int TDefineChallengeGetBaseInfoRsp::kWarZoneRankFieldNumber;
const int TDefineChallengeGetBaseInfoRsp::kBossInfoFieldNumber;
const int TDefineChallengeGetBaseInfoRsp::kScoreFieldNumber;
const int TDefineChallengeGetBaseInfoRsp::kRewardTimeFieldNumber;
const int TDefineChallengeGetBaseInfoRsp::kIsViewedFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetBaseInfoRsp::TDefineChallengeGetBaseInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetBaseInfoRsp)
}

void TDefineChallengeGetBaseInfoRsp::InitAsDefaultInstance() {
  bossinfo_ = const_cast< ::pb::TDefineChallengeBossInfo*>(&::pb::TDefineChallengeBossInfo::default_instance());
}

TDefineChallengeGetBaseInfoRsp::TDefineChallengeGetBaseInfoRsp(const TDefineChallengeGetBaseInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetBaseInfoRsp)
}

void TDefineChallengeGetBaseInfoRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  warzoneid_ = 0u;
  groupid_ = 0u;
  sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signtime_ = GOOGLE_ULONGLONG(0);
  maxfightforce_ = GOOGLE_ULONGLONG(0);
  grouprank_ = 0u;
  warzonerank_ = 0u;
  bossinfo_ = NULL;
  score_ = 0u;
  rewardtime_ = GOOGLE_ULONGLONG(0);
  isviewed_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetBaseInfoRsp::~TDefineChallengeGetBaseInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetBaseInfoRsp)
  SharedDtor();
}

void TDefineChallengeGetBaseInfoRsp::SharedDtor() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (this != default_instance_) {
    delete bossinfo_;
  }
}

void TDefineChallengeGetBaseInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetBaseInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetBaseInfoRsp_descriptor_;
}

const TDefineChallengeGetBaseInfoRsp& TDefineChallengeGetBaseInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetBaseInfoRsp* TDefineChallengeGetBaseInfoRsp::default_instance_ = NULL;

TDefineChallengeGetBaseInfoRsp* TDefineChallengeGetBaseInfoRsp::New() const {
  return new TDefineChallengeGetBaseInfoRsp;
}

void TDefineChallengeGetBaseInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeGetBaseInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(warzoneid_, groupid_);
    ZR_(signtime_, warzonerank_);
    if (has_sceneid()) {
      if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneid_->clear();
      }
    }
    if (has_bossinfo()) {
      if (bossinfo_ != NULL) bossinfo_->::pb::TDefineChallengeBossInfo::Clear();
    }
  }
  ZR_(rewardtime_, isviewed_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetBaseInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetBaseInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 WarZoneId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warzoneid_)));
          set_has_warzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GroupId;
        break;
      }

      // optional uint32 GroupId = 2;
      case 2: {
        if (tag == 16) {
         parse_GroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SceneId;
        break;
      }

      // optional string SceneId = 3;
      case 3: {
        if (tag == 26) {
         parse_SceneId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SignTime;
        break;
      }

      // optional uint64 SignTime = 4;
      case 4: {
        if (tag == 32) {
         parse_SignTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signtime_)));
          set_has_signtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MaxFightForce;
        break;
      }

      // optional uint64 MaxFightForce = 5;
      case 5: {
        if (tag == 40) {
         parse_MaxFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxfightforce_)));
          set_has_maxfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_GroupRank;
        break;
      }

      // optional uint32 GroupRank = 6;
      case 6: {
        if (tag == 48) {
         parse_GroupRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grouprank_)));
          set_has_grouprank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_WarZoneRank;
        break;
      }

      // optional uint32 WarZoneRank = 7;
      case 7: {
        if (tag == 56) {
         parse_WarZoneRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warzonerank_)));
          set_has_warzonerank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_BossInfo;
        break;
      }

      // optional .pb.TDefineChallengeBossInfo BossInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_BossInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 9;
      case 9: {
        if (tag == 72) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 10;
      case 10: {
        if (tag == 80) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_IsViewed;
        break;
      }

      // optional uint32 IsViewed = 11;
      case 11: {
        if (tag == 88) {
         parse_IsViewed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isviewed_)));
          set_has_isviewed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetBaseInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetBaseInfoRsp)
  return false;
#undef DO_
}

void TDefineChallengeGetBaseInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetBaseInfoRsp)
  // optional uint32 WarZoneId = 1;
  if (has_warzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warzoneid(), output);
  }

  // optional uint32 GroupId = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  // optional string SceneId = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sceneid(), output);
  }

  // optional uint64 SignTime = 4;
  if (has_signtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->signtime(), output);
  }

  // optional uint64 MaxFightForce = 5;
  if (has_maxfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->maxfightforce(), output);
  }

  // optional uint32 GroupRank = 6;
  if (has_grouprank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->grouprank(), output);
  }

  // optional uint32 WarZoneRank = 7;
  if (has_warzonerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->warzonerank(), output);
  }

  // optional .pb.TDefineChallengeBossInfo BossInfo = 8;
  if (has_bossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->bossinfo(), output);
  }

  // optional uint32 Score = 9;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->score(), output);
  }

  // optional uint64 RewardTime = 10;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->rewardtime(), output);
  }

  // optional uint32 IsViewed = 11;
  if (has_isviewed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->isviewed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetBaseInfoRsp)
}

::google::protobuf::uint8* TDefineChallengeGetBaseInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetBaseInfoRsp)
  // optional uint32 WarZoneId = 1;
  if (has_warzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->warzoneid(), target);
  }

  // optional uint32 GroupId = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  // optional string SceneId = 3;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sceneid(), target);
  }

  // optional uint64 SignTime = 4;
  if (has_signtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->signtime(), target);
  }

  // optional uint64 MaxFightForce = 5;
  if (has_maxfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->maxfightforce(), target);
  }

  // optional uint32 GroupRank = 6;
  if (has_grouprank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->grouprank(), target);
  }

  // optional uint32 WarZoneRank = 7;
  if (has_warzonerank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->warzonerank(), target);
  }

  // optional .pb.TDefineChallengeBossInfo BossInfo = 8;
  if (has_bossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->bossinfo(), target);
  }

  // optional uint32 Score = 9;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->score(), target);
  }

  // optional uint64 RewardTime = 10;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->rewardtime(), target);
  }

  // optional uint32 IsViewed = 11;
  if (has_isviewed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->isviewed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetBaseInfoRsp)
  return target;
}

int TDefineChallengeGetBaseInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WarZoneId = 1;
    if (has_warzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warzoneid());
    }

    // optional uint32 GroupId = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional string SceneId = 3;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneid());
    }

    // optional uint64 SignTime = 4;
    if (has_signtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signtime());
    }

    // optional uint64 MaxFightForce = 5;
    if (has_maxfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxfightforce());
    }

    // optional uint32 GroupRank = 6;
    if (has_grouprank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grouprank());
    }

    // optional uint32 WarZoneRank = 7;
    if (has_warzonerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warzonerank());
    }

    // optional .pb.TDefineChallengeBossInfo BossInfo = 8;
    if (has_bossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bossinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 Score = 9;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint64 RewardTime = 10;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

    // optional uint32 IsViewed = 11;
    if (has_isviewed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isviewed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetBaseInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetBaseInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetBaseInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetBaseInfoRsp::MergeFrom(const TDefineChallengeGetBaseInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warzoneid()) {
      set_warzoneid(from.warzoneid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_signtime()) {
      set_signtime(from.signtime());
    }
    if (from.has_maxfightforce()) {
      set_maxfightforce(from.maxfightforce());
    }
    if (from.has_grouprank()) {
      set_grouprank(from.grouprank());
    }
    if (from.has_warzonerank()) {
      set_warzonerank(from.warzonerank());
    }
    if (from.has_bossinfo()) {
      mutable_bossinfo()->::pb::TDefineChallengeBossInfo::MergeFrom(from.bossinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
    if (from.has_isviewed()) {
      set_isviewed(from.isviewed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetBaseInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetBaseInfoRsp::CopyFrom(const TDefineChallengeGetBaseInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetBaseInfoRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeGetBaseInfoRsp::Swap(TDefineChallengeGetBaseInfoRsp* other) {
  if (other != this) {
    std::swap(warzoneid_, other->warzoneid_);
    std::swap(groupid_, other->groupid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(signtime_, other->signtime_);
    std::swap(maxfightforce_, other->maxfightforce_);
    std::swap(grouprank_, other->grouprank_);
    std::swap(warzonerank_, other->warzonerank_);
    std::swap(bossinfo_, other->bossinfo_);
    std::swap(score_, other->score_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(isviewed_, other->isviewed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetBaseInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetBaseInfoRsp_descriptor_;
  metadata.reflection = TDefineChallengeGetBaseInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetBattleArgsReq::kBossInfoFieldNumber;
const int TDefineChallengeGetBattleArgsReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetBattleArgsReq::TDefineChallengeGetBattleArgsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetBattleArgsReq)
}

void TDefineChallengeGetBattleArgsReq::InitAsDefaultInstance() {
  bossinfo_ = const_cast< ::pb::TDefineChallengeBossInfo*>(&::pb::TDefineChallengeBossInfo::default_instance());
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TDefineChallengeGetBattleArgsReq::TDefineChallengeGetBattleArgsReq(const TDefineChallengeGetBattleArgsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetBattleArgsReq)
}

void TDefineChallengeGetBattleArgsReq::SharedCtor() {
  _cached_size_ = 0;
  bossinfo_ = NULL;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetBattleArgsReq::~TDefineChallengeGetBattleArgsReq() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetBattleArgsReq)
  SharedDtor();
}

void TDefineChallengeGetBattleArgsReq::SharedDtor() {
  if (this != default_instance_) {
    delete bossinfo_;
    delete battlecheckparam_;
  }
}

void TDefineChallengeGetBattleArgsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetBattleArgsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetBattleArgsReq_descriptor_;
}

const TDefineChallengeGetBattleArgsReq& TDefineChallengeGetBattleArgsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetBattleArgsReq* TDefineChallengeGetBattleArgsReq::default_instance_ = NULL;

TDefineChallengeGetBattleArgsReq* TDefineChallengeGetBattleArgsReq::New() const {
  return new TDefineChallengeGetBattleArgsReq;
}

void TDefineChallengeGetBattleArgsReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_bossinfo()) {
      if (bossinfo_ != NULL) bossinfo_->::pb::TDefineChallengeBossInfo::Clear();
    }
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetBattleArgsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetBattleArgsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetBattleArgsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetBattleArgsReq)
  return false;
#undef DO_
}

void TDefineChallengeGetBattleArgsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetBattleArgsReq)
  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  if (has_bossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bossinfo(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetBattleArgsReq)
}

::google::protobuf::uint8* TDefineChallengeGetBattleArgsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetBattleArgsReq)
  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  if (has_bossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bossinfo(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetBattleArgsReq)
  return target;
}

int TDefineChallengeGetBattleArgsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
    if (has_bossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bossinfo());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetBattleArgsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetBattleArgsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetBattleArgsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetBattleArgsReq::MergeFrom(const TDefineChallengeGetBattleArgsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossinfo()) {
      mutable_bossinfo()->::pb::TDefineChallengeBossInfo::MergeFrom(from.bossinfo());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetBattleArgsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetBattleArgsReq::CopyFrom(const TDefineChallengeGetBattleArgsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetBattleArgsReq::IsInitialized() const {

  return true;
}

void TDefineChallengeGetBattleArgsReq::Swap(TDefineChallengeGetBattleArgsReq* other) {
  if (other != this) {
    std::swap(bossinfo_, other->bossinfo_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetBattleArgsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetBattleArgsReq_descriptor_;
  metadata.reflection = TDefineChallengeGetBattleArgsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetBattleArgsRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetBattleArgsRsp::TDefineChallengeGetBattleArgsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetBattleArgsRsp)
}

void TDefineChallengeGetBattleArgsRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TDefineChallengeGetBattleArgsRsp::TDefineChallengeGetBattleArgsRsp(const TDefineChallengeGetBattleArgsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetBattleArgsRsp)
}

void TDefineChallengeGetBattleArgsRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetBattleArgsRsp::~TDefineChallengeGetBattleArgsRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetBattleArgsRsp)
  SharedDtor();
}

void TDefineChallengeGetBattleArgsRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TDefineChallengeGetBattleArgsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetBattleArgsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetBattleArgsRsp_descriptor_;
}

const TDefineChallengeGetBattleArgsRsp& TDefineChallengeGetBattleArgsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetBattleArgsRsp* TDefineChallengeGetBattleArgsRsp::default_instance_ = NULL;

TDefineChallengeGetBattleArgsRsp* TDefineChallengeGetBattleArgsRsp::New() const {
  return new TDefineChallengeGetBattleArgsRsp;
}

void TDefineChallengeGetBattleArgsRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetBattleArgsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetBattleArgsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetBattleArgsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetBattleArgsRsp)
  return false;
#undef DO_
}

void TDefineChallengeGetBattleArgsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetBattleArgsRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetBattleArgsRsp)
}

::google::protobuf::uint8* TDefineChallengeGetBattleArgsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetBattleArgsRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetBattleArgsRsp)
  return target;
}

int TDefineChallengeGetBattleArgsRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetBattleArgsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetBattleArgsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetBattleArgsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetBattleArgsRsp::MergeFrom(const TDefineChallengeGetBattleArgsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetBattleArgsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetBattleArgsRsp::CopyFrom(const TDefineChallengeGetBattleArgsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetBattleArgsRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TDefineChallengeGetBattleArgsRsp::Swap(TDefineChallengeGetBattleArgsRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetBattleArgsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetBattleArgsRsp_descriptor_;
  metadata.reflection = TDefineChallengeGetBattleArgsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeReportBattleBossReq::kBossInfoFieldNumber;
const int TDefineChallengeReportBattleBossReq::kBattleRetFieldNumber;
const int TDefineChallengeReportBattleBossReq::kMasterHidFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeReportBattleBossReq::TDefineChallengeReportBattleBossReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeReportBattleBossReq)
}

void TDefineChallengeReportBattleBossReq::InitAsDefaultInstance() {
  bossinfo_ = const_cast< ::pb::TDefineChallengeBossInfo*>(&::pb::TDefineChallengeBossInfo::default_instance());
}

TDefineChallengeReportBattleBossReq::TDefineChallengeReportBattleBossReq(const TDefineChallengeReportBattleBossReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeReportBattleBossReq)
}

void TDefineChallengeReportBattleBossReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bossinfo_ = NULL;
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  masterhid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeReportBattleBossReq::~TDefineChallengeReportBattleBossReq() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeReportBattleBossReq)
  SharedDtor();
}

void TDefineChallengeReportBattleBossReq::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
    delete bossinfo_;
  }
}

void TDefineChallengeReportBattleBossReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeReportBattleBossReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeReportBattleBossReq_descriptor_;
}

const TDefineChallengeReportBattleBossReq& TDefineChallengeReportBattleBossReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeReportBattleBossReq* TDefineChallengeReportBattleBossReq::default_instance_ = NULL;

TDefineChallengeReportBattleBossReq* TDefineChallengeReportBattleBossReq::New() const {
  return new TDefineChallengeReportBattleBossReq;
}

void TDefineChallengeReportBattleBossReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_bossinfo()) {
      if (bossinfo_ != NULL) bossinfo_->::pb::TDefineChallengeBossInfo::Clear();
    }
    if (has_battleret()) {
      if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleret_->clear();
      }
    }
    masterhid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeReportBattleBossReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeReportBattleBossReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleRet;
        break;
      }

      // optional bytes BattleRet = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MasterHid;
        break;
      }

      // optional uint32 MasterHid = 3;
      case 3: {
        if (tag == 24) {
         parse_MasterHid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masterhid_)));
          set_has_masterhid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeReportBattleBossReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeReportBattleBossReq)
  return false;
#undef DO_
}

void TDefineChallengeReportBattleBossReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeReportBattleBossReq)
  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  if (has_bossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bossinfo(), output);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleret(), output);
  }

  // optional uint32 MasterHid = 3;
  if (has_masterhid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->masterhid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeReportBattleBossReq)
}

::google::protobuf::uint8* TDefineChallengeReportBattleBossReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeReportBattleBossReq)
  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  if (has_bossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bossinfo(), target);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleret(), target);
  }

  // optional uint32 MasterHid = 3;
  if (has_masterhid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->masterhid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeReportBattleBossReq)
  return target;
}

int TDefineChallengeReportBattleBossReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
    if (has_bossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bossinfo());
    }

    // optional bytes BattleRet = 2;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

    // optional uint32 MasterHid = 3;
    if (has_masterhid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masterhid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeReportBattleBossReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeReportBattleBossReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeReportBattleBossReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeReportBattleBossReq::MergeFrom(const TDefineChallengeReportBattleBossReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossinfo()) {
      mutable_bossinfo()->::pb::TDefineChallengeBossInfo::MergeFrom(from.bossinfo());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
    if (from.has_masterhid()) {
      set_masterhid(from.masterhid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeReportBattleBossReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeReportBattleBossReq::CopyFrom(const TDefineChallengeReportBattleBossReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeReportBattleBossReq::IsInitialized() const {

  return true;
}

void TDefineChallengeReportBattleBossReq::Swap(TDefineChallengeReportBattleBossReq* other) {
  if (other != this) {
    std::swap(bossinfo_, other->bossinfo_);
    std::swap(battleret_, other->battleret_);
    std::swap(masterhid_, other->masterhid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeReportBattleBossReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeReportBattleBossReq_descriptor_;
  metadata.reflection = TDefineChallengeReportBattleBossReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeReportBattleBossRsp::kSettleScoreFieldNumber;
const int TDefineChallengeReportBattleBossRsp::kTotalScoreFieldNumber;
const int TDefineChallengeReportBattleBossRsp::kIsWinFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeReportBattleBossRsp::TDefineChallengeReportBattleBossRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeReportBattleBossRsp)
}

void TDefineChallengeReportBattleBossRsp::InitAsDefaultInstance() {
}

TDefineChallengeReportBattleBossRsp::TDefineChallengeReportBattleBossRsp(const TDefineChallengeReportBattleBossRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeReportBattleBossRsp)
}

void TDefineChallengeReportBattleBossRsp::SharedCtor() {
  _cached_size_ = 0;
  settlescore_ = 0u;
  totalscore_ = 0u;
  iswin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeReportBattleBossRsp::~TDefineChallengeReportBattleBossRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeReportBattleBossRsp)
  SharedDtor();
}

void TDefineChallengeReportBattleBossRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeReportBattleBossRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeReportBattleBossRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeReportBattleBossRsp_descriptor_;
}

const TDefineChallengeReportBattleBossRsp& TDefineChallengeReportBattleBossRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeReportBattleBossRsp* TDefineChallengeReportBattleBossRsp::default_instance_ = NULL;

TDefineChallengeReportBattleBossRsp* TDefineChallengeReportBattleBossRsp::New() const {
  return new TDefineChallengeReportBattleBossRsp;
}

void TDefineChallengeReportBattleBossRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeReportBattleBossRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(settlescore_, iswin_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeReportBattleBossRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeReportBattleBossRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SettleScore = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &settlescore_)));
          set_has_settlescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalScore;
        break;
      }

      // optional uint32 TotalScore = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsWin;
        break;
      }

      // optional uint32 IsWin = 3;
      case 3: {
        if (tag == 24) {
         parse_IsWin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeReportBattleBossRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeReportBattleBossRsp)
  return false;
#undef DO_
}

void TDefineChallengeReportBattleBossRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeReportBattleBossRsp)
  // optional uint32 SettleScore = 1;
  if (has_settlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->settlescore(), output);
  }

  // optional uint32 TotalScore = 2;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalscore(), output);
  }

  // optional uint32 IsWin = 3;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iswin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeReportBattleBossRsp)
}

::google::protobuf::uint8* TDefineChallengeReportBattleBossRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeReportBattleBossRsp)
  // optional uint32 SettleScore = 1;
  if (has_settlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->settlescore(), target);
  }

  // optional uint32 TotalScore = 2;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalscore(), target);
  }

  // optional uint32 IsWin = 3;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iswin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeReportBattleBossRsp)
  return target;
}

int TDefineChallengeReportBattleBossRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SettleScore = 1;
    if (has_settlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->settlescore());
    }

    // optional uint32 TotalScore = 2;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalscore());
    }

    // optional uint32 IsWin = 3;
    if (has_iswin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iswin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeReportBattleBossRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeReportBattleBossRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeReportBattleBossRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeReportBattleBossRsp::MergeFrom(const TDefineChallengeReportBattleBossRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_settlescore()) {
      set_settlescore(from.settlescore());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeReportBattleBossRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeReportBattleBossRsp::CopyFrom(const TDefineChallengeReportBattleBossRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeReportBattleBossRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeReportBattleBossRsp::Swap(TDefineChallengeReportBattleBossRsp* other) {
  if (other != this) {
    std::swap(settlescore_, other->settlescore_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(iswin_, other->iswin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeReportBattleBossRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeReportBattleBossRsp_descriptor_;
  metadata.reflection = TDefineChallengeReportBattleBossRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetFmtReq::kBossIdFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetFmtReq::TDefineChallengeGetFmtReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetFmtReq)
}

void TDefineChallengeGetFmtReq::InitAsDefaultInstance() {
}

TDefineChallengeGetFmtReq::TDefineChallengeGetFmtReq(const TDefineChallengeGetFmtReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetFmtReq)
}

void TDefineChallengeGetFmtReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetFmtReq::~TDefineChallengeGetFmtReq() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetFmtReq)
  SharedDtor();
}

void TDefineChallengeGetFmtReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeGetFmtReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetFmtReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetFmtReq_descriptor_;
}

const TDefineChallengeGetFmtReq& TDefineChallengeGetFmtReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetFmtReq* TDefineChallengeGetFmtReq::default_instance_ = NULL;

TDefineChallengeGetFmtReq* TDefineChallengeGetFmtReq::New() const {
  return new TDefineChallengeGetFmtReq;
}

void TDefineChallengeGetFmtReq::Clear() {
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetFmtReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetFmtReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetFmtReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetFmtReq)
  return false;
#undef DO_
}

void TDefineChallengeGetFmtReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetFmtReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetFmtReq)
}

::google::protobuf::uint8* TDefineChallengeGetFmtReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetFmtReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetFmtReq)
  return target;
}

int TDefineChallengeGetFmtReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetFmtReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetFmtReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetFmtReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetFmtReq::MergeFrom(const TDefineChallengeGetFmtReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetFmtReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetFmtReq::CopyFrom(const TDefineChallengeGetFmtReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetFmtReq::IsInitialized() const {

  return true;
}

void TDefineChallengeGetFmtReq::Swap(TDefineChallengeGetFmtReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetFmtReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetFmtReq_descriptor_;
  metadata.reflection = TDefineChallengeGetFmtReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetFmtRsp::kFmtFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetFmtRsp::TDefineChallengeGetFmtRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetFmtRsp)
}

void TDefineChallengeGetFmtRsp::InitAsDefaultInstance() {
}

TDefineChallengeGetFmtRsp::TDefineChallengeGetFmtRsp(const TDefineChallengeGetFmtRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetFmtRsp)
}

void TDefineChallengeGetFmtRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetFmtRsp::~TDefineChallengeGetFmtRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetFmtRsp)
  SharedDtor();
}

void TDefineChallengeGetFmtRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeGetFmtRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetFmtRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetFmtRsp_descriptor_;
}

const TDefineChallengeGetFmtRsp& TDefineChallengeGetFmtRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetFmtRsp* TDefineChallengeGetFmtRsp::default_instance_ = NULL;

TDefineChallengeGetFmtRsp* TDefineChallengeGetFmtRsp::New() const {
  return new TDefineChallengeGetFmtRsp;
}

void TDefineChallengeGetFmtRsp::Clear() {
  fmt_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetFmtRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetFmtRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
      case 1: {
        if (tag == 10) {
         parse_Fmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fmt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Fmt;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetFmtRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetFmtRsp)
  return false;
#undef DO_
}

void TDefineChallengeGetFmtRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetFmtRsp)
  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
  for (int i = 0; i < this->fmt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fmt(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetFmtRsp)
}

::google::protobuf::uint8* TDefineChallengeGetFmtRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetFmtRsp)
  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
  for (int i = 0; i < this->fmt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fmt(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetFmtRsp)
  return target;
}

int TDefineChallengeGetFmtRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
  total_size += 1 * this->fmt_size();
  for (int i = 0; i < this->fmt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fmt(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetFmtRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetFmtRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetFmtRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetFmtRsp::MergeFrom(const TDefineChallengeGetFmtRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fmt_.MergeFrom(from.fmt_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetFmtRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetFmtRsp::CopyFrom(const TDefineChallengeGetFmtRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetFmtRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeGetFmtRsp::Swap(TDefineChallengeGetFmtRsp* other) {
  if (other != this) {
    fmt_.Swap(&other->fmt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetFmtRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetFmtRsp_descriptor_;
  metadata.reflection = TDefineChallengeGetFmtRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeSetFmtReq::kFmtFieldNumber;
const int TDefineChallengeSetFmtReq::kBossIdFieldNumber;
const int TDefineChallengeSetFmtReq::kDebuffArrFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeSetFmtReq::TDefineChallengeSetFmtReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeSetFmtReq)
}

void TDefineChallengeSetFmtReq::InitAsDefaultInstance() {
}

TDefineChallengeSetFmtReq::TDefineChallengeSetFmtReq(const TDefineChallengeSetFmtReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeSetFmtReq)
}

void TDefineChallengeSetFmtReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeSetFmtReq::~TDefineChallengeSetFmtReq() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeSetFmtReq)
  SharedDtor();
}

void TDefineChallengeSetFmtReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeSetFmtReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeSetFmtReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeSetFmtReq_descriptor_;
}

const TDefineChallengeSetFmtReq& TDefineChallengeSetFmtReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeSetFmtReq* TDefineChallengeSetFmtReq::default_instance_ = NULL;

TDefineChallengeSetFmtReq* TDefineChallengeSetFmtReq::New() const {
  return new TDefineChallengeSetFmtReq;
}

void TDefineChallengeSetFmtReq::Clear() {
  bossid_ = 0u;
  fmt_.Clear();
  debuffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeSetFmtReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeSetFmtReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
      case 1: {
        if (tag == 10) {
         parse_Fmt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fmt()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Fmt;
        if (input->ExpectTag(16)) goto parse_BossId;
        break;
      }

      // optional uint32 BossId = 2;
      case 2: {
        if (tag == 16) {
         parse_BossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DebuffArr;
        break;
      }

      // repeated uint32 DebuffArr = 3;
      case 3: {
        if (tag == 24) {
         parse_DebuffArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_debuffarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_debuffarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DebuffArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeSetFmtReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeSetFmtReq)
  return false;
#undef DO_
}

void TDefineChallengeSetFmtReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeSetFmtReq)
  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
  for (int i = 0; i < this->fmt_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fmt(i), output);
  }

  // optional uint32 BossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossid(), output);
  }

  // repeated uint32 DebuffArr = 3;
  for (int i = 0; i < this->debuffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->debuffarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeSetFmtReq)
}

::google::protobuf::uint8* TDefineChallengeSetFmtReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeSetFmtReq)
  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
  for (int i = 0; i < this->fmt_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fmt(i), target);
  }

  // optional uint32 BossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossid(), target);
  }

  // repeated uint32 DebuffArr = 3;
  for (int i = 0; i < this->debuffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->debuffarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeSetFmtReq)
  return target;
}

int TDefineChallengeSetFmtReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 BossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  // repeated .pb.TDefineChallengeBattlePosInfo Fmt = 1;
  total_size += 1 * this->fmt_size();
  for (int i = 0; i < this->fmt_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fmt(i));
  }

  // repeated uint32 DebuffArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->debuffarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->debuffarr(i));
    }
    total_size += 1 * this->debuffarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeSetFmtReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeSetFmtReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeSetFmtReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeSetFmtReq::MergeFrom(const TDefineChallengeSetFmtReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  fmt_.MergeFrom(from.fmt_);
  debuffarr_.MergeFrom(from.debuffarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeSetFmtReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeSetFmtReq::CopyFrom(const TDefineChallengeSetFmtReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeSetFmtReq::IsInitialized() const {

  return true;
}

void TDefineChallengeSetFmtReq::Swap(TDefineChallengeSetFmtReq* other) {
  if (other != this) {
    fmt_.Swap(&other->fmt_);
    std::swap(bossid_, other->bossid_);
    debuffarr_.Swap(&other->debuffarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeSetFmtReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeSetFmtReq_descriptor_;
  metadata.reflection = TDefineChallengeSetFmtReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeReceiveTaskRewardReq::kTaskIdFieldNumber;
const int TDefineChallengeReceiveTaskRewardReq::kBossIdFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeReceiveTaskRewardReq::TDefineChallengeReceiveTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeReceiveTaskRewardReq)
}

void TDefineChallengeReceiveTaskRewardReq::InitAsDefaultInstance() {
}

TDefineChallengeReceiveTaskRewardReq::TDefineChallengeReceiveTaskRewardReq(const TDefineChallengeReceiveTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeReceiveTaskRewardReq)
}

void TDefineChallengeReceiveTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeReceiveTaskRewardReq::~TDefineChallengeReceiveTaskRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeReceiveTaskRewardReq)
  SharedDtor();
}

void TDefineChallengeReceiveTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeReceiveTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeReceiveTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeReceiveTaskRewardReq_descriptor_;
}

const TDefineChallengeReceiveTaskRewardReq& TDefineChallengeReceiveTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeReceiveTaskRewardReq* TDefineChallengeReceiveTaskRewardReq::default_instance_ = NULL;

TDefineChallengeReceiveTaskRewardReq* TDefineChallengeReceiveTaskRewardReq::New() const {
  return new TDefineChallengeReceiveTaskRewardReq;
}

void TDefineChallengeReceiveTaskRewardReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeReceiveTaskRewardReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(taskid_, bossid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeReceiveTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeReceiveTaskRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BossId;
        break;
      }

      // optional uint32 BossId = 2;
      case 2: {
        if (tag == 16) {
         parse_BossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeReceiveTaskRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeReceiveTaskRewardReq)
  return false;
#undef DO_
}

void TDefineChallengeReceiveTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeReceiveTaskRewardReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 BossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeReceiveTaskRewardReq)
}

::google::protobuf::uint8* TDefineChallengeReceiveTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeReceiveTaskRewardReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 BossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeReceiveTaskRewardReq)
  return target;
}

int TDefineChallengeReceiveTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 BossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeReceiveTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeReceiveTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeReceiveTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeReceiveTaskRewardReq::MergeFrom(const TDefineChallengeReceiveTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeReceiveTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeReceiveTaskRewardReq::CopyFrom(const TDefineChallengeReceiveTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeReceiveTaskRewardReq::IsInitialized() const {

  return true;
}

void TDefineChallengeReceiveTaskRewardReq::Swap(TDefineChallengeReceiveTaskRewardReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeReceiveTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeReceiveTaskRewardReq_descriptor_;
  metadata.reflection = TDefineChallengeReceiveTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeReceiveTaskRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeReceiveTaskRewardRsp::TDefineChallengeReceiveTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeReceiveTaskRewardRsp)
}

void TDefineChallengeReceiveTaskRewardRsp::InitAsDefaultInstance() {
}

TDefineChallengeReceiveTaskRewardRsp::TDefineChallengeReceiveTaskRewardRsp(const TDefineChallengeReceiveTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeReceiveTaskRewardRsp)
}

void TDefineChallengeReceiveTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeReceiveTaskRewardRsp::~TDefineChallengeReceiveTaskRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeReceiveTaskRewardRsp)
  SharedDtor();
}

void TDefineChallengeReceiveTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeReceiveTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeReceiveTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeReceiveTaskRewardRsp_descriptor_;
}

const TDefineChallengeReceiveTaskRewardRsp& TDefineChallengeReceiveTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeReceiveTaskRewardRsp* TDefineChallengeReceiveTaskRewardRsp::default_instance_ = NULL;

TDefineChallengeReceiveTaskRewardRsp* TDefineChallengeReceiveTaskRewardRsp::New() const {
  return new TDefineChallengeReceiveTaskRewardRsp;
}

void TDefineChallengeReceiveTaskRewardRsp::Clear() {
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeReceiveTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeReceiveTaskRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeReceiveTaskRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeReceiveTaskRewardRsp)
  return false;
#undef DO_
}

void TDefineChallengeReceiveTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeReceiveTaskRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeReceiveTaskRewardRsp)
}

::google::protobuf::uint8* TDefineChallengeReceiveTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeReceiveTaskRewardRsp)
  // repeated .pb.TCommonReward RewardArr = 1;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeReceiveTaskRewardRsp)
  return target;
}

int TDefineChallengeReceiveTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArr = 1;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeReceiveTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeReceiveTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeReceiveTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeReceiveTaskRewardRsp::MergeFrom(const TDefineChallengeReceiveTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeReceiveTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeReceiveTaskRewardRsp::CopyFrom(const TDefineChallengeReceiveTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeReceiveTaskRewardRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeReceiveTaskRewardRsp::Swap(TDefineChallengeReceiveTaskRewardRsp* other) {
  if (other != this) {
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeReceiveTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeReceiveTaskRewardRsp_descriptor_;
  metadata.reflection = TDefineChallengeReceiveTaskRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetGroupRankArrRep::kGroupIdFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetGroupRankArrRep::TDefineChallengeGetGroupRankArrRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetGroupRankArrRep)
}

void TDefineChallengeGetGroupRankArrRep::InitAsDefaultInstance() {
}

TDefineChallengeGetGroupRankArrRep::TDefineChallengeGetGroupRankArrRep(const TDefineChallengeGetGroupRankArrRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetGroupRankArrRep)
}

void TDefineChallengeGetGroupRankArrRep::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetGroupRankArrRep::~TDefineChallengeGetGroupRankArrRep() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetGroupRankArrRep)
  SharedDtor();
}

void TDefineChallengeGetGroupRankArrRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeGetGroupRankArrRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetGroupRankArrRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetGroupRankArrRep_descriptor_;
}

const TDefineChallengeGetGroupRankArrRep& TDefineChallengeGetGroupRankArrRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetGroupRankArrRep* TDefineChallengeGetGroupRankArrRep::default_instance_ = NULL;

TDefineChallengeGetGroupRankArrRep* TDefineChallengeGetGroupRankArrRep::New() const {
  return new TDefineChallengeGetGroupRankArrRep;
}

void TDefineChallengeGetGroupRankArrRep::Clear() {
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetGroupRankArrRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetGroupRankArrRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GroupId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetGroupRankArrRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetGroupRankArrRep)
  return false;
#undef DO_
}

void TDefineChallengeGetGroupRankArrRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetGroupRankArrRep)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetGroupRankArrRep)
}

::google::protobuf::uint8* TDefineChallengeGetGroupRankArrRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetGroupRankArrRep)
  // optional uint32 GroupId = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetGroupRankArrRep)
  return target;
}

int TDefineChallengeGetGroupRankArrRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GroupId = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetGroupRankArrRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetGroupRankArrRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetGroupRankArrRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetGroupRankArrRep::MergeFrom(const TDefineChallengeGetGroupRankArrRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetGroupRankArrRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetGroupRankArrRep::CopyFrom(const TDefineChallengeGetGroupRankArrRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetGroupRankArrRep::IsInitialized() const {

  return true;
}

void TDefineChallengeGetGroupRankArrRep::Swap(TDefineChallengeGetGroupRankArrRep* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetGroupRankArrRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetGroupRankArrRep_descriptor_;
  metadata.reflection = TDefineChallengeGetGroupRankArrRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetGroupRankArrRsp::kUserRankArrFieldNumber;
const int TDefineChallengeGetGroupRankArrRsp::kSelfRankFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetGroupRankArrRsp::TDefineChallengeGetGroupRankArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetGroupRankArrRsp)
}

void TDefineChallengeGetGroupRankArrRsp::InitAsDefaultInstance() {
  selfrank_ = const_cast< ::pb::TDefineChallengeRankInfo*>(&::pb::TDefineChallengeRankInfo::default_instance());
}

TDefineChallengeGetGroupRankArrRsp::TDefineChallengeGetGroupRankArrRsp(const TDefineChallengeGetGroupRankArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetGroupRankArrRsp)
}

void TDefineChallengeGetGroupRankArrRsp::SharedCtor() {
  _cached_size_ = 0;
  selfrank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetGroupRankArrRsp::~TDefineChallengeGetGroupRankArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetGroupRankArrRsp)
  SharedDtor();
}

void TDefineChallengeGetGroupRankArrRsp::SharedDtor() {
  if (this != default_instance_) {
    delete selfrank_;
  }
}

void TDefineChallengeGetGroupRankArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetGroupRankArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetGroupRankArrRsp_descriptor_;
}

const TDefineChallengeGetGroupRankArrRsp& TDefineChallengeGetGroupRankArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetGroupRankArrRsp* TDefineChallengeGetGroupRankArrRsp::default_instance_ = NULL;

TDefineChallengeGetGroupRankArrRsp* TDefineChallengeGetGroupRankArrRsp::New() const {
  return new TDefineChallengeGetGroupRankArrRsp;
}

void TDefineChallengeGetGroupRankArrRsp::Clear() {
  if (has_selfrank()) {
    if (selfrank_ != NULL) selfrank_->::pb::TDefineChallengeRankInfo::Clear();
  }
  userrankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetGroupRankArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetGroupRankArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UserRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserRankArr;
        if (input->ExpectTag(18)) goto parse_SelfRank;
        break;
      }

      // optional .pb.TDefineChallengeRankInfo SelfRank = 2;
      case 2: {
        if (tag == 18) {
         parse_SelfRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetGroupRankArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetGroupRankArrRsp)
  return false;
#undef DO_
}

void TDefineChallengeGetGroupRankArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetGroupRankArrRsp)
  // repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userrankarr(i), output);
  }

  // optional .pb.TDefineChallengeRankInfo SelfRank = 2;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetGroupRankArrRsp)
}

::google::protobuf::uint8* TDefineChallengeGetGroupRankArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetGroupRankArrRsp)
  // repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userrankarr(i), target);
  }

  // optional .pb.TDefineChallengeRankInfo SelfRank = 2;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetGroupRankArrRsp)
  return target;
}

int TDefineChallengeGetGroupRankArrRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TDefineChallengeRankInfo SelfRank = 2;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfrank());
    }

  }
  // repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
  total_size += 1 * this->userrankarr_size();
  for (int i = 0; i < this->userrankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetGroupRankArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetGroupRankArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetGroupRankArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetGroupRankArrRsp::MergeFrom(const TDefineChallengeGetGroupRankArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrankarr_.MergeFrom(from.userrankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfrank()) {
      mutable_selfrank()->::pb::TDefineChallengeRankInfo::MergeFrom(from.selfrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetGroupRankArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetGroupRankArrRsp::CopyFrom(const TDefineChallengeGetGroupRankArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetGroupRankArrRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeGetGroupRankArrRsp::Swap(TDefineChallengeGetGroupRankArrRsp* other) {
  if (other != this) {
    userrankarr_.Swap(&other->userrankarr_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetGroupRankArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetGroupRankArrRsp_descriptor_;
  metadata.reflection = TDefineChallengeGetGroupRankArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetWarZoneRankArrRep::kWarZoneIdFieldNumber;
const int TDefineChallengeGetWarZoneRankArrRep::kOffSetFieldNumber;
const int TDefineChallengeGetWarZoneRankArrRep::kLimitFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetWarZoneRankArrRep::TDefineChallengeGetWarZoneRankArrRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetWarZoneRankArrRep)
}

void TDefineChallengeGetWarZoneRankArrRep::InitAsDefaultInstance() {
}

TDefineChallengeGetWarZoneRankArrRep::TDefineChallengeGetWarZoneRankArrRep(const TDefineChallengeGetWarZoneRankArrRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetWarZoneRankArrRep)
}

void TDefineChallengeGetWarZoneRankArrRep::SharedCtor() {
  _cached_size_ = 0;
  warzoneid_ = 0u;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetWarZoneRankArrRep::~TDefineChallengeGetWarZoneRankArrRep() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetWarZoneRankArrRep)
  SharedDtor();
}

void TDefineChallengeGetWarZoneRankArrRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeGetWarZoneRankArrRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetWarZoneRankArrRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetWarZoneRankArrRep_descriptor_;
}

const TDefineChallengeGetWarZoneRankArrRep& TDefineChallengeGetWarZoneRankArrRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetWarZoneRankArrRep* TDefineChallengeGetWarZoneRankArrRep::default_instance_ = NULL;

TDefineChallengeGetWarZoneRankArrRep* TDefineChallengeGetWarZoneRankArrRep::New() const {
  return new TDefineChallengeGetWarZoneRankArrRep;
}

void TDefineChallengeGetWarZoneRankArrRep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeGetWarZoneRankArrRep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(warzoneid_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetWarZoneRankArrRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetWarZoneRankArrRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 WarZoneId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &warzoneid_)));
          set_has_warzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OffSet;
        break;
      }

      // optional uint32 OffSet = 2;
      case 2: {
        if (tag == 16) {
         parse_OffSet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 3;
      case 3: {
        if (tag == 24) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetWarZoneRankArrRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetWarZoneRankArrRep)
  return false;
#undef DO_
}

void TDefineChallengeGetWarZoneRankArrRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetWarZoneRankArrRep)
  // optional uint32 WarZoneId = 1;
  if (has_warzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->warzoneid(), output);
  }

  // optional uint32 OffSet = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  // optional uint32 Limit = 3;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetWarZoneRankArrRep)
}

::google::protobuf::uint8* TDefineChallengeGetWarZoneRankArrRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetWarZoneRankArrRep)
  // optional uint32 WarZoneId = 1;
  if (has_warzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->warzoneid(), target);
  }

  // optional uint32 OffSet = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  // optional uint32 Limit = 3;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetWarZoneRankArrRep)
  return target;
}

int TDefineChallengeGetWarZoneRankArrRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 WarZoneId = 1;
    if (has_warzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->warzoneid());
    }

    // optional uint32 OffSet = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 3;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetWarZoneRankArrRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetWarZoneRankArrRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetWarZoneRankArrRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetWarZoneRankArrRep::MergeFrom(const TDefineChallengeGetWarZoneRankArrRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_warzoneid()) {
      set_warzoneid(from.warzoneid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetWarZoneRankArrRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetWarZoneRankArrRep::CopyFrom(const TDefineChallengeGetWarZoneRankArrRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetWarZoneRankArrRep::IsInitialized() const {

  return true;
}

void TDefineChallengeGetWarZoneRankArrRep::Swap(TDefineChallengeGetWarZoneRankArrRep* other) {
  if (other != this) {
    std::swap(warzoneid_, other->warzoneid_);
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetWarZoneRankArrRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetWarZoneRankArrRep_descriptor_;
  metadata.reflection = TDefineChallengeGetWarZoneRankArrRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetWarZoneRankArrRsp::kUserRankArrFieldNumber;
const int TDefineChallengeGetWarZoneRankArrRsp::kSelfRankFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetWarZoneRankArrRsp::TDefineChallengeGetWarZoneRankArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetWarZoneRankArrRsp)
}

void TDefineChallengeGetWarZoneRankArrRsp::InitAsDefaultInstance() {
  selfrank_ = const_cast< ::pb::TDefineChallengeRankInfo*>(&::pb::TDefineChallengeRankInfo::default_instance());
}

TDefineChallengeGetWarZoneRankArrRsp::TDefineChallengeGetWarZoneRankArrRsp(const TDefineChallengeGetWarZoneRankArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetWarZoneRankArrRsp)
}

void TDefineChallengeGetWarZoneRankArrRsp::SharedCtor() {
  _cached_size_ = 0;
  selfrank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetWarZoneRankArrRsp::~TDefineChallengeGetWarZoneRankArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetWarZoneRankArrRsp)
  SharedDtor();
}

void TDefineChallengeGetWarZoneRankArrRsp::SharedDtor() {
  if (this != default_instance_) {
    delete selfrank_;
  }
}

void TDefineChallengeGetWarZoneRankArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetWarZoneRankArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetWarZoneRankArrRsp_descriptor_;
}

const TDefineChallengeGetWarZoneRankArrRsp& TDefineChallengeGetWarZoneRankArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetWarZoneRankArrRsp* TDefineChallengeGetWarZoneRankArrRsp::default_instance_ = NULL;

TDefineChallengeGetWarZoneRankArrRsp* TDefineChallengeGetWarZoneRankArrRsp::New() const {
  return new TDefineChallengeGetWarZoneRankArrRsp;
}

void TDefineChallengeGetWarZoneRankArrRsp::Clear() {
  if (has_selfrank()) {
    if (selfrank_ != NULL) selfrank_->::pb::TDefineChallengeRankInfo::Clear();
  }
  userrankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetWarZoneRankArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetWarZoneRankArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UserRankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UserRankArr;
        if (input->ExpectTag(18)) goto parse_SelfRank;
        break;
      }

      // optional .pb.TDefineChallengeRankInfo SelfRank = 2;
      case 2: {
        if (tag == 18) {
         parse_SelfRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetWarZoneRankArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetWarZoneRankArrRsp)
  return false;
#undef DO_
}

void TDefineChallengeGetWarZoneRankArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetWarZoneRankArrRsp)
  // repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userrankarr(i), output);
  }

  // optional .pb.TDefineChallengeRankInfo SelfRank = 2;
  if (has_selfrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->selfrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetWarZoneRankArrRsp)
}

::google::protobuf::uint8* TDefineChallengeGetWarZoneRankArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetWarZoneRankArrRsp)
  // repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
  for (int i = 0; i < this->userrankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userrankarr(i), target);
  }

  // optional .pb.TDefineChallengeRankInfo SelfRank = 2;
  if (has_selfrank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->selfrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetWarZoneRankArrRsp)
  return target;
}

int TDefineChallengeGetWarZoneRankArrRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TDefineChallengeRankInfo SelfRank = 2;
    if (has_selfrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfrank());
    }

  }
  // repeated .pb.TDefineChallengeRankInfo UserRankArr = 1;
  total_size += 1 * this->userrankarr_size();
  for (int i = 0; i < this->userrankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetWarZoneRankArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetWarZoneRankArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetWarZoneRankArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetWarZoneRankArrRsp::MergeFrom(const TDefineChallengeGetWarZoneRankArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  userrankarr_.MergeFrom(from.userrankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfrank()) {
      mutable_selfrank()->::pb::TDefineChallengeRankInfo::MergeFrom(from.selfrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetWarZoneRankArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetWarZoneRankArrRsp::CopyFrom(const TDefineChallengeGetWarZoneRankArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetWarZoneRankArrRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeGetWarZoneRankArrRsp::Swap(TDefineChallengeGetWarZoneRankArrRsp* other) {
  if (other != this) {
    userrankarr_.Swap(&other->userrankarr_);
    std::swap(selfrank_, other->selfrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetWarZoneRankArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetWarZoneRankArrRsp_descriptor_;
  metadata.reflection = TDefineChallengeGetWarZoneRankArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetRankFormationRep::kUidFieldNumber;
const int TDefineChallengeGetRankFormationRep::kRankFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetRankFormationRep::TDefineChallengeGetRankFormationRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetRankFormationRep)
}

void TDefineChallengeGetRankFormationRep::InitAsDefaultInstance() {
}

TDefineChallengeGetRankFormationRep::TDefineChallengeGetRankFormationRep(const TDefineChallengeGetRankFormationRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetRankFormationRep)
}

void TDefineChallengeGetRankFormationRep::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetRankFormationRep::~TDefineChallengeGetRankFormationRep() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetRankFormationRep)
  SharedDtor();
}

void TDefineChallengeGetRankFormationRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeGetRankFormationRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetRankFormationRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetRankFormationRep_descriptor_;
}

const TDefineChallengeGetRankFormationRep& TDefineChallengeGetRankFormationRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetRankFormationRep* TDefineChallengeGetRankFormationRep::default_instance_ = NULL;

TDefineChallengeGetRankFormationRep* TDefineChallengeGetRankFormationRep::New() const {
  return new TDefineChallengeGetRankFormationRep;
}

void TDefineChallengeGetRankFormationRep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeGetRankFormationRep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetRankFormationRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetRankFormationRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetRankFormationRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetRankFormationRep)
  return false;
#undef DO_
}

void TDefineChallengeGetRankFormationRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetRankFormationRep)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetRankFormationRep)
}

::google::protobuf::uint8* TDefineChallengeGetRankFormationRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetRankFormationRep)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetRankFormationRep)
  return target;
}

int TDefineChallengeGetRankFormationRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetRankFormationRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetRankFormationRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetRankFormationRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetRankFormationRep::MergeFrom(const TDefineChallengeGetRankFormationRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetRankFormationRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetRankFormationRep::CopyFrom(const TDefineChallengeGetRankFormationRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetRankFormationRep::IsInitialized() const {

  return true;
}

void TDefineChallengeGetRankFormationRep::Swap(TDefineChallengeGetRankFormationRep* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetRankFormationRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetRankFormationRep_descriptor_;
  metadata.reflection = TDefineChallengeGetRankFormationRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetRankFormationRsp::kBossInfoFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetRankFormationRsp::TDefineChallengeGetRankFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetRankFormationRsp)
}

void TDefineChallengeGetRankFormationRsp::InitAsDefaultInstance() {
}

TDefineChallengeGetRankFormationRsp::TDefineChallengeGetRankFormationRsp(const TDefineChallengeGetRankFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetRankFormationRsp)
}

void TDefineChallengeGetRankFormationRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetRankFormationRsp::~TDefineChallengeGetRankFormationRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetRankFormationRsp)
  SharedDtor();
}

void TDefineChallengeGetRankFormationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeGetRankFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetRankFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetRankFormationRsp_descriptor_;
}

const TDefineChallengeGetRankFormationRsp& TDefineChallengeGetRankFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetRankFormationRsp* TDefineChallengeGetRankFormationRsp::default_instance_ = NULL;

TDefineChallengeGetRankFormationRsp* TDefineChallengeGetRankFormationRsp::New() const {
  return new TDefineChallengeGetRankFormationRsp;
}

void TDefineChallengeGetRankFormationRsp::Clear() {
  bossinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetRankFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetRankFormationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TDefineChallengeOtherRankInfo BossInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_BossInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BossInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetRankFormationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetRankFormationRsp)
  return false;
#undef DO_
}

void TDefineChallengeGetRankFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetRankFormationRsp)
  // repeated .pb.TDefineChallengeOtherRankInfo BossInfo = 1;
  for (int i = 0; i < this->bossinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bossinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetRankFormationRsp)
}

::google::protobuf::uint8* TDefineChallengeGetRankFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetRankFormationRsp)
  // repeated .pb.TDefineChallengeOtherRankInfo BossInfo = 1;
  for (int i = 0; i < this->bossinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bossinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetRankFormationRsp)
  return target;
}

int TDefineChallengeGetRankFormationRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TDefineChallengeOtherRankInfo BossInfo = 1;
  total_size += 1 * this->bossinfo_size();
  for (int i = 0; i < this->bossinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetRankFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetRankFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetRankFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetRankFormationRsp::MergeFrom(const TDefineChallengeGetRankFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossinfo_.MergeFrom(from.bossinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetRankFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetRankFormationRsp::CopyFrom(const TDefineChallengeGetRankFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetRankFormationRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeGetRankFormationRsp::Swap(TDefineChallengeGetRankFormationRsp* other) {
  if (other != this) {
    bossinfo_.Swap(&other->bossinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetRankFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetRankFormationRsp_descriptor_;
  metadata.reflection = TDefineChallengeGetRankFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeChangeBossRep::kBossIdFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeChangeBossRep::TDefineChallengeChangeBossRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeChangeBossRep)
}

void TDefineChallengeChangeBossRep::InitAsDefaultInstance() {
}

TDefineChallengeChangeBossRep::TDefineChallengeChangeBossRep(const TDefineChallengeChangeBossRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeChangeBossRep)
}

void TDefineChallengeChangeBossRep::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeChangeBossRep::~TDefineChallengeChangeBossRep() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeChangeBossRep)
  SharedDtor();
}

void TDefineChallengeChangeBossRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeChangeBossRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeChangeBossRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeChangeBossRep_descriptor_;
}

const TDefineChallengeChangeBossRep& TDefineChallengeChangeBossRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeChangeBossRep* TDefineChallengeChangeBossRep::default_instance_ = NULL;

TDefineChallengeChangeBossRep* TDefineChallengeChangeBossRep::New() const {
  return new TDefineChallengeChangeBossRep;
}

void TDefineChallengeChangeBossRep::Clear() {
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeChangeBossRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeChangeBossRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeChangeBossRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeChangeBossRep)
  return false;
#undef DO_
}

void TDefineChallengeChangeBossRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeChangeBossRep)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeChangeBossRep)
}

::google::protobuf::uint8* TDefineChallengeChangeBossRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeChangeBossRep)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeChangeBossRep)
  return target;
}

int TDefineChallengeChangeBossRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeChangeBossRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeChangeBossRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeChangeBossRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeChangeBossRep::MergeFrom(const TDefineChallengeChangeBossRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeChangeBossRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeChangeBossRep::CopyFrom(const TDefineChallengeChangeBossRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeChangeBossRep::IsInitialized() const {

  return true;
}

void TDefineChallengeChangeBossRep::Swap(TDefineChallengeChangeBossRep* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeChangeBossRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeChangeBossRep_descriptor_;
  metadata.reflection = TDefineChallengeChangeBossRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeChangeBossRsp::kBossInfoFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeChangeBossRsp::TDefineChallengeChangeBossRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeChangeBossRsp)
}

void TDefineChallengeChangeBossRsp::InitAsDefaultInstance() {
  bossinfo_ = const_cast< ::pb::TDefineChallengeBossInfo*>(&::pb::TDefineChallengeBossInfo::default_instance());
}

TDefineChallengeChangeBossRsp::TDefineChallengeChangeBossRsp(const TDefineChallengeChangeBossRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeChangeBossRsp)
}

void TDefineChallengeChangeBossRsp::SharedCtor() {
  _cached_size_ = 0;
  bossinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeChangeBossRsp::~TDefineChallengeChangeBossRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeChangeBossRsp)
  SharedDtor();
}

void TDefineChallengeChangeBossRsp::SharedDtor() {
  if (this != default_instance_) {
    delete bossinfo_;
  }
}

void TDefineChallengeChangeBossRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeChangeBossRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeChangeBossRsp_descriptor_;
}

const TDefineChallengeChangeBossRsp& TDefineChallengeChangeBossRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeChangeBossRsp* TDefineChallengeChangeBossRsp::default_instance_ = NULL;

TDefineChallengeChangeBossRsp* TDefineChallengeChangeBossRsp::New() const {
  return new TDefineChallengeChangeBossRsp;
}

void TDefineChallengeChangeBossRsp::Clear() {
  if (has_bossinfo()) {
    if (bossinfo_ != NULL) bossinfo_->::pb::TDefineChallengeBossInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeChangeBossRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeChangeBossRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bossinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeChangeBossRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeChangeBossRsp)
  return false;
#undef DO_
}

void TDefineChallengeChangeBossRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeChangeBossRsp)
  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  if (has_bossinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bossinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeChangeBossRsp)
}

::google::protobuf::uint8* TDefineChallengeChangeBossRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeChangeBossRsp)
  // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
  if (has_bossinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bossinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeChangeBossRsp)
  return target;
}

int TDefineChallengeChangeBossRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TDefineChallengeBossInfo BossInfo = 1;
    if (has_bossinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bossinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeChangeBossRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeChangeBossRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeChangeBossRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeChangeBossRsp::MergeFrom(const TDefineChallengeChangeBossRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossinfo()) {
      mutable_bossinfo()->::pb::TDefineChallengeBossInfo::MergeFrom(from.bossinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeChangeBossRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeChangeBossRsp::CopyFrom(const TDefineChallengeChangeBossRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeChangeBossRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeChangeBossRsp::Swap(TDefineChallengeChangeBossRsp* other) {
  if (other != this) {
    std::swap(bossinfo_, other->bossinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeChangeBossRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeChangeBossRsp_descriptor_;
  metadata.reflection = TDefineChallengeChangeBossRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetTaskListRep::kBossIdFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetTaskListRep::TDefineChallengeGetTaskListRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetTaskListRep)
}

void TDefineChallengeGetTaskListRep::InitAsDefaultInstance() {
}

TDefineChallengeGetTaskListRep::TDefineChallengeGetTaskListRep(const TDefineChallengeGetTaskListRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetTaskListRep)
}

void TDefineChallengeGetTaskListRep::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetTaskListRep::~TDefineChallengeGetTaskListRep() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetTaskListRep)
  SharedDtor();
}

void TDefineChallengeGetTaskListRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeGetTaskListRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetTaskListRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetTaskListRep_descriptor_;
}

const TDefineChallengeGetTaskListRep& TDefineChallengeGetTaskListRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetTaskListRep* TDefineChallengeGetTaskListRep::default_instance_ = NULL;

TDefineChallengeGetTaskListRep* TDefineChallengeGetTaskListRep::New() const {
  return new TDefineChallengeGetTaskListRep;
}

void TDefineChallengeGetTaskListRep::Clear() {
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetTaskListRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetTaskListRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetTaskListRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetTaskListRep)
  return false;
#undef DO_
}

void TDefineChallengeGetTaskListRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetTaskListRep)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetTaskListRep)
}

::google::protobuf::uint8* TDefineChallengeGetTaskListRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetTaskListRep)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetTaskListRep)
  return target;
}

int TDefineChallengeGetTaskListRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetTaskListRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetTaskListRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetTaskListRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetTaskListRep::MergeFrom(const TDefineChallengeGetTaskListRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetTaskListRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetTaskListRep::CopyFrom(const TDefineChallengeGetTaskListRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetTaskListRep::IsInitialized() const {

  return true;
}

void TDefineChallengeGetTaskListRep::Swap(TDefineChallengeGetTaskListRep* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetTaskListRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetTaskListRep_descriptor_;
  metadata.reflection = TDefineChallengeGetTaskListRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetTaskListRsp::kTaskInfoFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetTaskListRsp::TDefineChallengeGetTaskListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetTaskListRsp)
}

void TDefineChallengeGetTaskListRsp::InitAsDefaultInstance() {
}

TDefineChallengeGetTaskListRsp::TDefineChallengeGetTaskListRsp(const TDefineChallengeGetTaskListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetTaskListRsp)
}

void TDefineChallengeGetTaskListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetTaskListRsp::~TDefineChallengeGetTaskListRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetTaskListRsp)
  SharedDtor();
}

void TDefineChallengeGetTaskListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeGetTaskListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetTaskListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetTaskListRsp_descriptor_;
}

const TDefineChallengeGetTaskListRsp& TDefineChallengeGetTaskListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetTaskListRsp* TDefineChallengeGetTaskListRsp::default_instance_ = NULL;

TDefineChallengeGetTaskListRsp* TDefineChallengeGetTaskListRsp::New() const {
  return new TDefineChallengeGetTaskListRsp;
}

void TDefineChallengeGetTaskListRsp::Clear() {
  taskinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetTaskListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetTaskListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TDefineChallengeTaskInfo TaskInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_TaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TaskInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetTaskListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetTaskListRsp)
  return false;
#undef DO_
}

void TDefineChallengeGetTaskListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetTaskListRsp)
  // repeated .pb.TDefineChallengeTaskInfo TaskInfo = 1;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetTaskListRsp)
}

::google::protobuf::uint8* TDefineChallengeGetTaskListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetTaskListRsp)
  // repeated .pb.TDefineChallengeTaskInfo TaskInfo = 1;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetTaskListRsp)
  return target;
}

int TDefineChallengeGetTaskListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TDefineChallengeTaskInfo TaskInfo = 1;
  total_size += 1 * this->taskinfo_size();
  for (int i = 0; i < this->taskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetTaskListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetTaskListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetTaskListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetTaskListRsp::MergeFrom(const TDefineChallengeGetTaskListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskinfo_.MergeFrom(from.taskinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetTaskListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetTaskListRsp::CopyFrom(const TDefineChallengeGetTaskListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetTaskListRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeGetTaskListRsp::Swap(TDefineChallengeGetTaskListRsp* other) {
  if (other != this) {
    taskinfo_.Swap(&other->taskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetTaskListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetTaskListRsp_descriptor_;
  metadata.reflection = TDefineChallengeGetTaskListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeGetShopInfoRsp::kGiftInfoArrFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeGetShopInfoRsp::TDefineChallengeGetShopInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeGetShopInfoRsp)
}

void TDefineChallengeGetShopInfoRsp::InitAsDefaultInstance() {
}

TDefineChallengeGetShopInfoRsp::TDefineChallengeGetShopInfoRsp(const TDefineChallengeGetShopInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeGetShopInfoRsp)
}

void TDefineChallengeGetShopInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeGetShopInfoRsp::~TDefineChallengeGetShopInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeGetShopInfoRsp)
  SharedDtor();
}

void TDefineChallengeGetShopInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeGetShopInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeGetShopInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeGetShopInfoRsp_descriptor_;
}

const TDefineChallengeGetShopInfoRsp& TDefineChallengeGetShopInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeGetShopInfoRsp* TDefineChallengeGetShopInfoRsp::default_instance_ = NULL;

TDefineChallengeGetShopInfoRsp* TDefineChallengeGetShopInfoRsp::New() const {
  return new TDefineChallengeGetShopInfoRsp;
}

void TDefineChallengeGetShopInfoRsp::Clear() {
  giftinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeGetShopInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeGetShopInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TDefineChallengeGiftInfo GiftInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_GiftInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giftinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_GiftInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeGetShopInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeGetShopInfoRsp)
  return false;
#undef DO_
}

void TDefineChallengeGetShopInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeGetShopInfoRsp)
  // repeated .pb.TDefineChallengeGiftInfo GiftInfoArr = 1;
  for (int i = 0; i < this->giftinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->giftinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeGetShopInfoRsp)
}

::google::protobuf::uint8* TDefineChallengeGetShopInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeGetShopInfoRsp)
  // repeated .pb.TDefineChallengeGiftInfo GiftInfoArr = 1;
  for (int i = 0; i < this->giftinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->giftinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeGetShopInfoRsp)
  return target;
}

int TDefineChallengeGetShopInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TDefineChallengeGiftInfo GiftInfoArr = 1;
  total_size += 1 * this->giftinfoarr_size();
  for (int i = 0; i < this->giftinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giftinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeGetShopInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeGetShopInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeGetShopInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeGetShopInfoRsp::MergeFrom(const TDefineChallengeGetShopInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  giftinfoarr_.MergeFrom(from.giftinfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeGetShopInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeGetShopInfoRsp::CopyFrom(const TDefineChallengeGetShopInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeGetShopInfoRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeGetShopInfoRsp::Swap(TDefineChallengeGetShopInfoRsp* other) {
  if (other != this) {
    giftinfoarr_.Swap(&other->giftinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeGetShopInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeGetShopInfoRsp_descriptor_;
  metadata.reflection = TDefineChallengeGetShopInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeExchangeTimeLimitGiftRep::kGiftIdFieldNumber;
const int TDefineChallengeExchangeTimeLimitGiftRep::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeExchangeTimeLimitGiftRep::TDefineChallengeExchangeTimeLimitGiftRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeExchangeTimeLimitGiftRep)
}

void TDefineChallengeExchangeTimeLimitGiftRep::InitAsDefaultInstance() {
}

TDefineChallengeExchangeTimeLimitGiftRep::TDefineChallengeExchangeTimeLimitGiftRep(const TDefineChallengeExchangeTimeLimitGiftRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeExchangeTimeLimitGiftRep)
}

void TDefineChallengeExchangeTimeLimitGiftRep::SharedCtor() {
  _cached_size_ = 0;
  giftid_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeExchangeTimeLimitGiftRep::~TDefineChallengeExchangeTimeLimitGiftRep() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeExchangeTimeLimitGiftRep)
  SharedDtor();
}

void TDefineChallengeExchangeTimeLimitGiftRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeExchangeTimeLimitGiftRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeExchangeTimeLimitGiftRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeExchangeTimeLimitGiftRep_descriptor_;
}

const TDefineChallengeExchangeTimeLimitGiftRep& TDefineChallengeExchangeTimeLimitGiftRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeExchangeTimeLimitGiftRep* TDefineChallengeExchangeTimeLimitGiftRep::default_instance_ = NULL;

TDefineChallengeExchangeTimeLimitGiftRep* TDefineChallengeExchangeTimeLimitGiftRep::New() const {
  return new TDefineChallengeExchangeTimeLimitGiftRep;
}

void TDefineChallengeExchangeTimeLimitGiftRep::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDefineChallengeExchangeTimeLimitGiftRep*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(giftid_, buynum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeExchangeTimeLimitGiftRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeExchangeTimeLimitGiftRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GiftId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftid_)));
          set_has_giftid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeExchangeTimeLimitGiftRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeExchangeTimeLimitGiftRep)
  return false;
#undef DO_
}

void TDefineChallengeExchangeTimeLimitGiftRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeExchangeTimeLimitGiftRep)
  // optional uint32 GiftId = 1;
  if (has_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->giftid(), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeExchangeTimeLimitGiftRep)
}

::google::protobuf::uint8* TDefineChallengeExchangeTimeLimitGiftRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeExchangeTimeLimitGiftRep)
  // optional uint32 GiftId = 1;
  if (has_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->giftid(), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeExchangeTimeLimitGiftRep)
  return target;
}

int TDefineChallengeExchangeTimeLimitGiftRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GiftId = 1;
    if (has_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftid());
    }

    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeExchangeTimeLimitGiftRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeExchangeTimeLimitGiftRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeExchangeTimeLimitGiftRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeExchangeTimeLimitGiftRep::MergeFrom(const TDefineChallengeExchangeTimeLimitGiftRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftid()) {
      set_giftid(from.giftid());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeExchangeTimeLimitGiftRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeExchangeTimeLimitGiftRep::CopyFrom(const TDefineChallengeExchangeTimeLimitGiftRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeExchangeTimeLimitGiftRep::IsInitialized() const {

  return true;
}

void TDefineChallengeExchangeTimeLimitGiftRep::Swap(TDefineChallengeExchangeTimeLimitGiftRep* other) {
  if (other != this) {
    std::swap(giftid_, other->giftid_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeExchangeTimeLimitGiftRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeExchangeTimeLimitGiftRep_descriptor_;
  metadata.reflection = TDefineChallengeExchangeTimeLimitGiftRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeExchangeTimeLimitGiftRsp::kRewardFieldNumber;
const int TDefineChallengeExchangeTimeLimitGiftRsp::kBuyNumFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeExchangeTimeLimitGiftRsp::TDefineChallengeExchangeTimeLimitGiftRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeExchangeTimeLimitGiftRsp)
}

void TDefineChallengeExchangeTimeLimitGiftRsp::InitAsDefaultInstance() {
}

TDefineChallengeExchangeTimeLimitGiftRsp::TDefineChallengeExchangeTimeLimitGiftRsp(const TDefineChallengeExchangeTimeLimitGiftRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeExchangeTimeLimitGiftRsp)
}

void TDefineChallengeExchangeTimeLimitGiftRsp::SharedCtor() {
  _cached_size_ = 0;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeExchangeTimeLimitGiftRsp::~TDefineChallengeExchangeTimeLimitGiftRsp() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeExchangeTimeLimitGiftRsp)
  SharedDtor();
}

void TDefineChallengeExchangeTimeLimitGiftRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeExchangeTimeLimitGiftRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeExchangeTimeLimitGiftRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeExchangeTimeLimitGiftRsp_descriptor_;
}

const TDefineChallengeExchangeTimeLimitGiftRsp& TDefineChallengeExchangeTimeLimitGiftRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeExchangeTimeLimitGiftRsp* TDefineChallengeExchangeTimeLimitGiftRsp::default_instance_ = NULL;

TDefineChallengeExchangeTimeLimitGiftRsp* TDefineChallengeExchangeTimeLimitGiftRsp::New() const {
  return new TDefineChallengeExchangeTimeLimitGiftRsp;
}

void TDefineChallengeExchangeTimeLimitGiftRsp::Clear() {
  buynum_ = 0u;
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeExchangeTimeLimitGiftRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeExchangeTimeLimitGiftRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward Reward = 1;
      case 1: {
        if (tag == 10) {
         parse_Reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_Reward;
        if (input->ExpectTag(16)) goto parse_BuyNum;
        break;
      }

      // optional uint32 BuyNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeExchangeTimeLimitGiftRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeExchangeTimeLimitGiftRsp)
  return false;
#undef DO_
}

void TDefineChallengeExchangeTimeLimitGiftRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeExchangeTimeLimitGiftRsp)
  // repeated .pb.TCommonReward Reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reward(i), output);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeExchangeTimeLimitGiftRsp)
}

::google::protobuf::uint8* TDefineChallengeExchangeTimeLimitGiftRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeExchangeTimeLimitGiftRsp)
  // repeated .pb.TCommonReward Reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reward(i), target);
  }

  // optional uint32 BuyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeExchangeTimeLimitGiftRsp)
  return target;
}

int TDefineChallengeExchangeTimeLimitGiftRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 BuyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  // repeated .pb.TCommonReward Reward = 1;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeExchangeTimeLimitGiftRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeExchangeTimeLimitGiftRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeExchangeTimeLimitGiftRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeExchangeTimeLimitGiftRsp::MergeFrom(const TDefineChallengeExchangeTimeLimitGiftRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeExchangeTimeLimitGiftRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeExchangeTimeLimitGiftRsp::CopyFrom(const TDefineChallengeExchangeTimeLimitGiftRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeExchangeTimeLimitGiftRsp::IsInitialized() const {

  return true;
}

void TDefineChallengeExchangeTimeLimitGiftRsp::Swap(TDefineChallengeExchangeTimeLimitGiftRsp* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeExchangeTimeLimitGiftRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeExchangeTimeLimitGiftRsp_descriptor_;
  metadata.reflection = TDefineChallengeExchangeTimeLimitGiftRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TDefineChallengeSaveDebuffRep::kBossIdFieldNumber;
const int TDefineChallengeSaveDebuffRep::kDebuffArrFieldNumber;
#endif  // !_MSC_VER

TDefineChallengeSaveDebuffRep::TDefineChallengeSaveDebuffRep()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDefineChallengeSaveDebuffRep)
}

void TDefineChallengeSaveDebuffRep::InitAsDefaultInstance() {
}

TDefineChallengeSaveDebuffRep::TDefineChallengeSaveDebuffRep(const TDefineChallengeSaveDebuffRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDefineChallengeSaveDebuffRep)
}

void TDefineChallengeSaveDebuffRep::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDefineChallengeSaveDebuffRep::~TDefineChallengeSaveDebuffRep() {
  // @@protoc_insertion_point(destructor:pb.TDefineChallengeSaveDebuffRep)
  SharedDtor();
}

void TDefineChallengeSaveDebuffRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDefineChallengeSaveDebuffRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDefineChallengeSaveDebuffRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDefineChallengeSaveDebuffRep_descriptor_;
}

const TDefineChallengeSaveDebuffRep& TDefineChallengeSaveDebuffRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fDefineChallenge_2eproto();
  return *default_instance_;
}

TDefineChallengeSaveDebuffRep* TDefineChallengeSaveDebuffRep::default_instance_ = NULL;

TDefineChallengeSaveDebuffRep* TDefineChallengeSaveDebuffRep::New() const {
  return new TDefineChallengeSaveDebuffRep;
}

void TDefineChallengeSaveDebuffRep::Clear() {
  bossid_ = 0u;
  debuffarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDefineChallengeSaveDebuffRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDefineChallengeSaveDebuffRep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DebuffArr;
        break;
      }

      // repeated uint32 DebuffArr = 2;
      case 2: {
        if (tag == 16) {
         parse_DebuffArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_debuffarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_debuffarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DebuffArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDefineChallengeSaveDebuffRep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDefineChallengeSaveDebuffRep)
  return false;
#undef DO_
}

void TDefineChallengeSaveDebuffRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDefineChallengeSaveDebuffRep)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // repeated uint32 DebuffArr = 2;
  for (int i = 0; i < this->debuffarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->debuffarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDefineChallengeSaveDebuffRep)
}

::google::protobuf::uint8* TDefineChallengeSaveDebuffRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDefineChallengeSaveDebuffRep)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // repeated uint32 DebuffArr = 2;
  for (int i = 0; i < this->debuffarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->debuffarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDefineChallengeSaveDebuffRep)
  return target;
}

int TDefineChallengeSaveDebuffRep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  // repeated uint32 DebuffArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->debuffarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->debuffarr(i));
    }
    total_size += 1 * this->debuffarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDefineChallengeSaveDebuffRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDefineChallengeSaveDebuffRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDefineChallengeSaveDebuffRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDefineChallengeSaveDebuffRep::MergeFrom(const TDefineChallengeSaveDebuffRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  debuffarr_.MergeFrom(from.debuffarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDefineChallengeSaveDebuffRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDefineChallengeSaveDebuffRep::CopyFrom(const TDefineChallengeSaveDebuffRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDefineChallengeSaveDebuffRep::IsInitialized() const {

  return true;
}

void TDefineChallengeSaveDebuffRep::Swap(TDefineChallengeSaveDebuffRep* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    debuffarr_.Swap(&other->debuffarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDefineChallengeSaveDebuffRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDefineChallengeSaveDebuffRep_descriptor_;
  metadata.reflection = TDefineChallengeSaveDebuffRep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
