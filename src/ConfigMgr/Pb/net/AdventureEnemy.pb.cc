// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/AdventureEnemy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/AdventureEnemy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TAESquadHeroInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAESquadHeroInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAEMySquad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAEMySquad_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAESquadHeroStatusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAESquadHeroStatusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAEMySquadStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAEMySquadStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemySingleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemySingleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemyGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemyGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemyRebornHeroReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemyRebornHeroReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemySetSquadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemySetSquadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemySwitchSquadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemySwitchSquadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemyStartBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemyStartBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemyStartBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemyStartBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAEMonsterStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAEMonsterStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAEEnemySquad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAEEnemySquad_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemyReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemyReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemyReportBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemyReportBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TNewAdventureEnemyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TNewAdventureEnemyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemyCancelBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemyCancelBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemySingleBattleRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemySingleBattleRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemySkipBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemySkipBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemySkipBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemySkipBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemyGetAcheivementInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemyGetAcheivementInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemyReceiveAchievementRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemyReceiveAchievementRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemySetPresetSquadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemySetPresetSquadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemySwitchPresetSquadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemySwitchPresetSquadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEnemyUsePresetSquadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEnemyUsePresetSquadReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TAERebornHeroCostType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fAdventureEnemy_2eproto() {
  protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/AdventureEnemy.proto");
  GOOGLE_CHECK(file != NULL);
  TAESquadHeroInfo_descriptor_ = file->message_type(0);
  static const int TAESquadHeroInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAESquadHeroInfo, posid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAESquadHeroInfo, heroid_),
  };
  TAESquadHeroInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAESquadHeroInfo_descriptor_,
      TAESquadHeroInfo::default_instance_,
      TAESquadHeroInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAESquadHeroInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAESquadHeroInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAESquadHeroInfo));
  TAEMySquad_descriptor_ = file->message_type(1);
  static const int TAEMySquad_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMySquad, squadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMySquad, squadheroarr_),
  };
  TAEMySquad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAEMySquad_descriptor_,
      TAEMySquad::default_instance_,
      TAEMySquad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMySquad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMySquad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAEMySquad));
  TAESquadHeroStatusInfo_descriptor_ = file->message_type(2);
  static const int TAESquadHeroStatusInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAESquadHeroStatusInfo, posid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAESquadHeroStatusInfo, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAESquadHeroStatusInfo, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAESquadHeroStatusInfo, maxhp_),
  };
  TAESquadHeroStatusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAESquadHeroStatusInfo_descriptor_,
      TAESquadHeroStatusInfo::default_instance_,
      TAESquadHeroStatusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAESquadHeroStatusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAESquadHeroStatusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAESquadHeroStatusInfo));
  TAEMySquadStatus_descriptor_ = file->message_type(3);
  static const int TAEMySquadStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMySquadStatus, squadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMySquadStatus, squadheroarr_),
  };
  TAEMySquadStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAEMySquadStatus_descriptor_,
      TAEMySquadStatus::default_instance_,
      TAEMySquadStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMySquadStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMySquadStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAEMySquadStatus));
  TAdventureEnemySingleInfo_descriptor_ = file->message_type(4);
  static const int TAdventureEnemySingleInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleInfo, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleInfo, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleInfo, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleInfo, enemysquadarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleInfo, mysquadarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleInfo, fightheroarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleInfo, triggermaplevel_),
  };
  TAdventureEnemySingleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemySingleInfo_descriptor_,
      TAdventureEnemySingleInfo::default_instance_,
      TAdventureEnemySingleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemySingleInfo));
  TAdventureEnemyGetInfoRsp_descriptor_ = file->message_type(5);
  static const int TAdventureEnemyGetInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyGetInfoRsp, enemyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyGetInfoRsp, enemyidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyGetInfoRsp, duetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyGetInfoRsp, presetsquadarr_),
  };
  TAdventureEnemyGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemyGetInfoRsp_descriptor_,
      TAdventureEnemyGetInfoRsp::default_instance_,
      TAdventureEnemyGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemyGetInfoRsp));
  TAdventureEnemyRebornHeroReq_descriptor_ = file->message_type(6);
  static const int TAdventureEnemyRebornHeroReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyRebornHeroReq, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyRebornHeroReq, costtype_),
  };
  TAdventureEnemyRebornHeroReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemyRebornHeroReq_descriptor_,
      TAdventureEnemyRebornHeroReq::default_instance_,
      TAdventureEnemyRebornHeroReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyRebornHeroReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyRebornHeroReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemyRebornHeroReq));
  TAdventureEnemySetSquadReq_descriptor_ = file->message_type(7);
  static const int TAdventureEnemySetSquadReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySetSquadReq, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySetSquadReq, squadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySetSquadReq, squadheroarr_),
  };
  TAdventureEnemySetSquadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemySetSquadReq_descriptor_,
      TAdventureEnemySetSquadReq::default_instance_,
      TAdventureEnemySetSquadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySetSquadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySetSquadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemySetSquadReq));
  TAdventureEnemySwitchSquadReq_descriptor_ = file->message_type(8);
  static const int TAdventureEnemySwitchSquadReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySwitchSquadReq, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySwitchSquadReq, squadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySwitchSquadReq, switchtosquadindex_),
  };
  TAdventureEnemySwitchSquadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemySwitchSquadReq_descriptor_,
      TAdventureEnemySwitchSquadReq::default_instance_,
      TAdventureEnemySwitchSquadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySwitchSquadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySwitchSquadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemySwitchSquadReq));
  TAdventureEnemyStartBattleReq_descriptor_ = file->message_type(9);
  static const int TAdventureEnemyStartBattleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyStartBattleReq, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyStartBattleReq, squadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyStartBattleReq, battlecheckparam_),
  };
  TAdventureEnemyStartBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemyStartBattleReq_descriptor_,
      TAdventureEnemyStartBattleReq::default_instance_,
      TAdventureEnemyStartBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyStartBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyStartBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemyStartBattleReq));
  TAdventureEnemyStartBattleRsp_descriptor_ = file->message_type(10);
  static const int TAdventureEnemyStartBattleRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyStartBattleRsp, battleargs_),
  };
  TAdventureEnemyStartBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemyStartBattleRsp_descriptor_,
      TAdventureEnemyStartBattleRsp::default_instance_,
      TAdventureEnemyStartBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyStartBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyStartBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemyStartBattleRsp));
  TAEMonsterStatus_descriptor_ = file->message_type(11);
  static const int TAEMonsterStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMonsterStatus, posid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMonsterStatus, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMonsterStatus, maxhp_),
  };
  TAEMonsterStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAEMonsterStatus_descriptor_,
      TAEMonsterStatus::default_instance_,
      TAEMonsterStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMonsterStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEMonsterStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAEMonsterStatus));
  TAEEnemySquad_descriptor_ = file->message_type(12);
  static const int TAEEnemySquad_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEEnemySquad, squadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEEnemySquad, squadmonsterarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEEnemySquad, fightforce_),
  };
  TAEEnemySquad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAEEnemySquad_descriptor_,
      TAEEnemySquad::default_instance_,
      TAEEnemySquad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEEnemySquad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAEEnemySquad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAEEnemySquad));
  TAdventureEnemyReportBattleReq_descriptor_ = file->message_type(13);
  static const int TAdventureEnemyReportBattleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReportBattleReq, enemyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReportBattleReq, squadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReportBattleReq, battleresult_),
  };
  TAdventureEnemyReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemyReportBattleReq_descriptor_,
      TAdventureEnemyReportBattleReq::default_instance_,
      TAdventureEnemyReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemyReportBattleReq));
  TAdventureEnemyReportBattleRsp_descriptor_ = file->message_type(14);
  static const int TAdventureEnemyReportBattleRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReportBattleRsp, rewardarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReportBattleRsp, enemysquad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReportBattleRsp, enemyisdead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReportBattleRsp, mysquad_),
  };
  TAdventureEnemyReportBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemyReportBattleRsp_descriptor_,
      TAdventureEnemyReportBattleRsp::default_instance_,
      TAdventureEnemyReportBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReportBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReportBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemyReportBattleRsp));
  TNewAdventureEnemyNotify_descriptor_ = file->message_type(15);
  static const int TNewAdventureEnemyNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNewAdventureEnemyNotify, enemyid_),
  };
  TNewAdventureEnemyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TNewAdventureEnemyNotify_descriptor_,
      TNewAdventureEnemyNotify::default_instance_,
      TNewAdventureEnemyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNewAdventureEnemyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TNewAdventureEnemyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TNewAdventureEnemyNotify));
  TAdventureEnemyCancelBattleReq_descriptor_ = file->message_type(16);
  static const int TAdventureEnemyCancelBattleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyCancelBattleReq, enemyid_),
  };
  TAdventureEnemyCancelBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemyCancelBattleReq_descriptor_,
      TAdventureEnemyCancelBattleReq::default_instance_,
      TAdventureEnemyCancelBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyCancelBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyCancelBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemyCancelBattleReq));
  TAdventureEnemySingleBattleRet_descriptor_ = file->message_type(17);
  static const int TAdventureEnemySingleBattleRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleBattleRet, enemysquad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleBattleRet, enemyisdead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleBattleRet, mysquad_),
  };
  TAdventureEnemySingleBattleRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemySingleBattleRet_descriptor_,
      TAdventureEnemySingleBattleRet::default_instance_,
      TAdventureEnemySingleBattleRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleBattleRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySingleBattleRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemySingleBattleRet));
  TAdventureEnemySkipBattleReq_descriptor_ = file->message_type(18);
  static const int TAdventureEnemySkipBattleReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySkipBattleReq, enemyid_),
  };
  TAdventureEnemySkipBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemySkipBattleReq_descriptor_,
      TAdventureEnemySkipBattleReq::default_instance_,
      TAdventureEnemySkipBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySkipBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySkipBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemySkipBattleReq));
  TAdventureEnemySkipBattleRsp_descriptor_ = file->message_type(19);
  static const int TAdventureEnemySkipBattleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySkipBattleRsp, rewardarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySkipBattleRsp, arrbattleret_),
  };
  TAdventureEnemySkipBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemySkipBattleRsp_descriptor_,
      TAdventureEnemySkipBattleRsp::default_instance_,
      TAdventureEnemySkipBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySkipBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySkipBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemySkipBattleRsp));
  TAdventureEnemyGetAcheivementInfoRsp_descriptor_ = file->message_type(20);
  static const int TAdventureEnemyGetAcheivementInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyGetAcheivementInfoRsp, defeatenemynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyGetAcheivementInfoRsp, rewardidarr_),
  };
  TAdventureEnemyGetAcheivementInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemyGetAcheivementInfoRsp_descriptor_,
      TAdventureEnemyGetAcheivementInfoRsp::default_instance_,
      TAdventureEnemyGetAcheivementInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyGetAcheivementInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyGetAcheivementInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemyGetAcheivementInfoRsp));
  TAdventureEnemyReceiveAchievementRewardReq_descriptor_ = file->message_type(21);
  static const int TAdventureEnemyReceiveAchievementRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReceiveAchievementRewardReq, rewardid_),
  };
  TAdventureEnemyReceiveAchievementRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemyReceiveAchievementRewardReq_descriptor_,
      TAdventureEnemyReceiveAchievementRewardReq::default_instance_,
      TAdventureEnemyReceiveAchievementRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReceiveAchievementRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyReceiveAchievementRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemyReceiveAchievementRewardReq));
  TAdventureEnemySetPresetSquadReq_descriptor_ = file->message_type(22);
  static const int TAdventureEnemySetPresetSquadReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySetPresetSquadReq, squadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySetPresetSquadReq, squadheroarr_),
  };
  TAdventureEnemySetPresetSquadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemySetPresetSquadReq_descriptor_,
      TAdventureEnemySetPresetSquadReq::default_instance_,
      TAdventureEnemySetPresetSquadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySetPresetSquadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySetPresetSquadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemySetPresetSquadReq));
  TAdventureEnemySwitchPresetSquadReq_descriptor_ = file->message_type(23);
  static const int TAdventureEnemySwitchPresetSquadReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySwitchPresetSquadReq, squadindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySwitchPresetSquadReq, switchtosquadindex_),
  };
  TAdventureEnemySwitchPresetSquadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemySwitchPresetSquadReq_descriptor_,
      TAdventureEnemySwitchPresetSquadReq::default_instance_,
      TAdventureEnemySwitchPresetSquadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySwitchPresetSquadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemySwitchPresetSquadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemySwitchPresetSquadReq));
  TAdventureEnemyUsePresetSquadReq_descriptor_ = file->message_type(24);
  static const int TAdventureEnemyUsePresetSquadReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyUsePresetSquadReq, enemyid_),
  };
  TAdventureEnemyUsePresetSquadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEnemyUsePresetSquadReq_descriptor_,
      TAdventureEnemyUsePresetSquadReq::default_instance_,
      TAdventureEnemyUsePresetSquadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyUsePresetSquadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEnemyUsePresetSquadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEnemyUsePresetSquadReq));
  TAERebornHeroCostType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fAdventureEnemy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAESquadHeroInfo_descriptor_, &TAESquadHeroInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAEMySquad_descriptor_, &TAEMySquad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAESquadHeroStatusInfo_descriptor_, &TAESquadHeroStatusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAEMySquadStatus_descriptor_, &TAEMySquadStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemySingleInfo_descriptor_, &TAdventureEnemySingleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemyGetInfoRsp_descriptor_, &TAdventureEnemyGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemyRebornHeroReq_descriptor_, &TAdventureEnemyRebornHeroReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemySetSquadReq_descriptor_, &TAdventureEnemySetSquadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemySwitchSquadReq_descriptor_, &TAdventureEnemySwitchSquadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemyStartBattleReq_descriptor_, &TAdventureEnemyStartBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemyStartBattleRsp_descriptor_, &TAdventureEnemyStartBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAEMonsterStatus_descriptor_, &TAEMonsterStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAEEnemySquad_descriptor_, &TAEEnemySquad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemyReportBattleReq_descriptor_, &TAdventureEnemyReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemyReportBattleRsp_descriptor_, &TAdventureEnemyReportBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TNewAdventureEnemyNotify_descriptor_, &TNewAdventureEnemyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemyCancelBattleReq_descriptor_, &TAdventureEnemyCancelBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemySingleBattleRet_descriptor_, &TAdventureEnemySingleBattleRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemySkipBattleReq_descriptor_, &TAdventureEnemySkipBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemySkipBattleRsp_descriptor_, &TAdventureEnemySkipBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemyGetAcheivementInfoRsp_descriptor_, &TAdventureEnemyGetAcheivementInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemyReceiveAchievementRewardReq_descriptor_, &TAdventureEnemyReceiveAchievementRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemySetPresetSquadReq_descriptor_, &TAdventureEnemySetPresetSquadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemySwitchPresetSquadReq_descriptor_, &TAdventureEnemySwitchPresetSquadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEnemyUsePresetSquadReq_descriptor_, &TAdventureEnemyUsePresetSquadReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto() {
  delete TAESquadHeroInfo::default_instance_;
  delete TAESquadHeroInfo_reflection_;
  delete TAEMySquad::default_instance_;
  delete TAEMySquad_reflection_;
  delete TAESquadHeroStatusInfo::default_instance_;
  delete TAESquadHeroStatusInfo_reflection_;
  delete TAEMySquadStatus::default_instance_;
  delete TAEMySquadStatus_reflection_;
  delete TAdventureEnemySingleInfo::default_instance_;
  delete TAdventureEnemySingleInfo_reflection_;
  delete TAdventureEnemyGetInfoRsp::default_instance_;
  delete TAdventureEnemyGetInfoRsp_reflection_;
  delete TAdventureEnemyRebornHeroReq::default_instance_;
  delete TAdventureEnemyRebornHeroReq_reflection_;
  delete TAdventureEnemySetSquadReq::default_instance_;
  delete TAdventureEnemySetSquadReq_reflection_;
  delete TAdventureEnemySwitchSquadReq::default_instance_;
  delete TAdventureEnemySwitchSquadReq_reflection_;
  delete TAdventureEnemyStartBattleReq::default_instance_;
  delete TAdventureEnemyStartBattleReq_reflection_;
  delete TAdventureEnemyStartBattleRsp::default_instance_;
  delete TAdventureEnemyStartBattleRsp_reflection_;
  delete TAEMonsterStatus::default_instance_;
  delete TAEMonsterStatus_reflection_;
  delete TAEEnemySquad::default_instance_;
  delete TAEEnemySquad_reflection_;
  delete TAdventureEnemyReportBattleReq::default_instance_;
  delete TAdventureEnemyReportBattleReq_reflection_;
  delete TAdventureEnemyReportBattleRsp::default_instance_;
  delete TAdventureEnemyReportBattleRsp_reflection_;
  delete TNewAdventureEnemyNotify::default_instance_;
  delete TNewAdventureEnemyNotify_reflection_;
  delete TAdventureEnemyCancelBattleReq::default_instance_;
  delete TAdventureEnemyCancelBattleReq_reflection_;
  delete TAdventureEnemySingleBattleRet::default_instance_;
  delete TAdventureEnemySingleBattleRet_reflection_;
  delete TAdventureEnemySkipBattleReq::default_instance_;
  delete TAdventureEnemySkipBattleReq_reflection_;
  delete TAdventureEnemySkipBattleRsp::default_instance_;
  delete TAdventureEnemySkipBattleRsp_reflection_;
  delete TAdventureEnemyGetAcheivementInfoRsp::default_instance_;
  delete TAdventureEnemyGetAcheivementInfoRsp_reflection_;
  delete TAdventureEnemyReceiveAchievementRewardReq::default_instance_;
  delete TAdventureEnemyReceiveAchievementRewardReq_reflection_;
  delete TAdventureEnemySetPresetSquadReq::default_instance_;
  delete TAdventureEnemySetPresetSquadReq_reflection_;
  delete TAdventureEnemySwitchPresetSquadReq::default_instance_;
  delete TAdventureEnemySwitchPresetSquadReq_reflection_;
  delete TAdventureEnemyUsePresetSquadReq::default_instance_;
  delete TAdventureEnemyUsePresetSquadReq_reflection_;
}

void protobuf_AddDesc_net_2fAdventureEnemy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/AdventureEnemy.proto\022\002pb\032\020net/Batt"
    "le.proto\032\026net/CommonReward.proto\"1\n\020TAES"
    "quadHeroInfo\022\r\n\005PosId\030\001 \001(\r\022\016\n\006HeroId\030\002 "
    "\001(\r\"L\n\nTAEMySquad\022\022\n\nSquadIndex\030\001 \001(\r\022*\n"
    "\014SquadHeroArr\030\002 \003(\0132\024.pb.TAESquadHeroInf"
    "o\"U\n\026TAESquadHeroStatusInfo\022\r\n\005PosId\030\001 \001"
    "(\r\022\016\n\006HeroId\030\002 \001(\r\022\r\n\005CurHp\030\003 \001(\004\022\r\n\005Max"
    "Hp\030\004 \001(\004\"X\n\020TAEMySquadStatus\022\022\n\nSquadInd"
    "ex\030\001 \001(\r\0220\n\014SquadHeroArr\030\002 \003(\0132\032.pb.TAES"
    "quadHeroStatusInfo\"\307\001\n\031TAdventureEnemySi"
    "ngleInfo\022\017\n\007EnemyId\030\001 \001(\r\022\r\n\005CurHp\030\002 \001(\004"
    "\022\r\n\005MaxHp\030\003 \001(\004\022(\n\rEnemySquadArr\030\004 \003(\0132\021"
    ".pb.TAEEnemySquad\022\"\n\nMySquadArr\030\005 \003(\0132\016."
    "pb.TAEMySquad\022\024\n\014FightHeroArr\030\006 \003(\r\022\027\n\017T"
    "riggerMapLevel\030\007 \001(\r\"\231\001\n\031TAdventureEnemy"
    "GetInfoRsp\022/\n\010EnemyArr\030\001 \003(\0132\035.pb.TAdven"
    "tureEnemySingleInfo\022\022\n\nEnemyIdArr\030\002 \003(\r\022"
    "\017\n\007DueTime\030\003 \001(\004\022&\n\016PresetSquadArr\030\004 \003(\013"
    "2\016.pb.TAEMySquad\"\\\n\034TAdventureEnemyRebor"
    "nHeroReq\022\017\n\007EnemyId\030\001 \001(\r\022+\n\010CostType\030\002 "
    "\001(\0162\031.pb.TAERebornHeroCostType\"m\n\032TAdven"
    "tureEnemySetSquadReq\022\017\n\007EnemyId\030\001 \001(\r\022\022\n"
    "\nSquadIndex\030\002 \001(\r\022*\n\014SquadHeroArr\030\003 \003(\0132"
    "\024.pb.TAESquadHeroInfo\"`\n\035TAdventureEnemy"
    "SwitchSquadReq\022\017\n\007EnemyId\030\001 \001(\r\022\022\n\nSquad"
    "Index\030\002 \001(\r\022\032\n\022SwitchToSquadIndex\030\003 \001(\r\""
    "u\n\035TAdventureEnemyStartBattleReq\022\017\n\007Enem"
    "yId\030\001 \001(\r\022\022\n\nSquadIndex\030\002 \001(\r\022/\n\020BattleC"
    "heckParam\030\003 \001(\0132\025.pb.TBattleCheckParam\"D"
    "\n\035TAdventureEnemyStartBattleRsp\022#\n\nBattl"
    "eArgs\030\001 \001(\0132\017.pb.TBattleArgs\"\?\n\020TAEMonst"
    "erStatus\022\r\n\005PosId\030\001 \001(\r\022\r\n\005CurHp\030\002 \001(\004\022\r"
    "\n\005MaxHp\030\003 \001(\004\"f\n\rTAEEnemySquad\022\022\n\nSquadI"
    "ndex\030\001 \001(\r\022-\n\017SquadMonsterArr\030\002 \003(\0132\024.pb"
    ".TAEMonsterStatus\022\022\n\nFightForce\030\003 \001(\004\"n\n"
    "\036TAdventureEnemyReportBattleReq\022\017\n\007Enemy"
    "Id\030\001 \001(\r\022\022\n\nSquadIndex\030\002 \001(\r\022\'\n\014BattleRe"
    "sult\030\003 \001(\0132\021.pb.TBattleResult\"\253\001\n\036TAdven"
    "tureEnemyReportBattleRsp\022&\n\013RewardArray\030"
    "\001 \003(\0132\021.pb.TCommonReward\022%\n\nEnemySquad\030\002"
    " \001(\0132\021.pb.TAEEnemySquad\022\023\n\013EnemyIsDead\030\003"
    " \001(\010\022%\n\007MySquad\030\004 \001(\0132\024.pb.TAEMySquadSta"
    "tus\"+\n\030TNewAdventureEnemyNotify\022\017\n\007Enemy"
    "Id\030\001 \003(\r\"1\n\036TAdventureEnemyCancelBattleR"
    "eq\022\017\n\007EnemyId\030\001 \001(\r\"\203\001\n\036TAdventureEnemyS"
    "ingleBattleRet\022%\n\nEnemySquad\030\002 \001(\0132\021.pb."
    "TAEEnemySquad\022\023\n\013EnemyIsDead\030\003 \001(\010\022%\n\007My"
    "Squad\030\004 \001(\0132\024.pb.TAEMySquadStatus\"/\n\034TAd"
    "ventureEnemySkipBattleReq\022\017\n\007EnemyId\030\001 \001"
    "(\r\"\200\001\n\034TAdventureEnemySkipBattleRsp\022&\n\013R"
    "ewardArray\030\001 \003(\0132\021.pb.TCommonReward\0228\n\014A"
    "rrBattleRet\030\002 \003(\0132\".pb.TAdventureEnemySi"
    "ngleBattleRet\"S\n$TAdventureEnemyGetAchei"
    "vementInfoRsp\022\026\n\016DefeatEnemyNum\030\001 \001(\r\022\023\n"
    "\013RewardIdArr\030\002 \003(\r\">\n*TAdventureEnemyRec"
    "eiveAchievementRewardReq\022\020\n\010RewardId\030\001 \001"
    "(\r\"b\n TAdventureEnemySetPresetSquadReq\022\022"
    "\n\nSquadIndex\030\001 \001(\r\022*\n\014SquadHeroArr\030\002 \003(\013"
    "2\024.pb.TAESquadHeroInfo\"U\n#TAdventureEnem"
    "ySwitchPresetSquadReq\022\022\n\nSquadIndex\030\001 \001("
    "\r\022\032\n\022SwitchToSquadIndex\030\002 \001(\r\"3\n TAdvent"
    "ureEnemyUsePresetSquadReq\022\017\n\007EnemyId\030\001 \001"
    "(\r*E\n\025TAERebornHeroCostType\022\025\n\021AE_COST_T"
    "YPE_ITEM\020\001\022\025\n\021AE_COST_TYPE_GOLD\020\002", 2553);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/AdventureEnemy.proto", &protobuf_RegisterTypes);
  TAESquadHeroInfo::default_instance_ = new TAESquadHeroInfo();
  TAEMySquad::default_instance_ = new TAEMySquad();
  TAESquadHeroStatusInfo::default_instance_ = new TAESquadHeroStatusInfo();
  TAEMySquadStatus::default_instance_ = new TAEMySquadStatus();
  TAdventureEnemySingleInfo::default_instance_ = new TAdventureEnemySingleInfo();
  TAdventureEnemyGetInfoRsp::default_instance_ = new TAdventureEnemyGetInfoRsp();
  TAdventureEnemyRebornHeroReq::default_instance_ = new TAdventureEnemyRebornHeroReq();
  TAdventureEnemySetSquadReq::default_instance_ = new TAdventureEnemySetSquadReq();
  TAdventureEnemySwitchSquadReq::default_instance_ = new TAdventureEnemySwitchSquadReq();
  TAdventureEnemyStartBattleReq::default_instance_ = new TAdventureEnemyStartBattleReq();
  TAdventureEnemyStartBattleRsp::default_instance_ = new TAdventureEnemyStartBattleRsp();
  TAEMonsterStatus::default_instance_ = new TAEMonsterStatus();
  TAEEnemySquad::default_instance_ = new TAEEnemySquad();
  TAdventureEnemyReportBattleReq::default_instance_ = new TAdventureEnemyReportBattleReq();
  TAdventureEnemyReportBattleRsp::default_instance_ = new TAdventureEnemyReportBattleRsp();
  TNewAdventureEnemyNotify::default_instance_ = new TNewAdventureEnemyNotify();
  TAdventureEnemyCancelBattleReq::default_instance_ = new TAdventureEnemyCancelBattleReq();
  TAdventureEnemySingleBattleRet::default_instance_ = new TAdventureEnemySingleBattleRet();
  TAdventureEnemySkipBattleReq::default_instance_ = new TAdventureEnemySkipBattleReq();
  TAdventureEnemySkipBattleRsp::default_instance_ = new TAdventureEnemySkipBattleRsp();
  TAdventureEnemyGetAcheivementInfoRsp::default_instance_ = new TAdventureEnemyGetAcheivementInfoRsp();
  TAdventureEnemyReceiveAchievementRewardReq::default_instance_ = new TAdventureEnemyReceiveAchievementRewardReq();
  TAdventureEnemySetPresetSquadReq::default_instance_ = new TAdventureEnemySetPresetSquadReq();
  TAdventureEnemySwitchPresetSquadReq::default_instance_ = new TAdventureEnemySwitchPresetSquadReq();
  TAdventureEnemyUsePresetSquadReq::default_instance_ = new TAdventureEnemyUsePresetSquadReq();
  TAESquadHeroInfo::default_instance_->InitAsDefaultInstance();
  TAEMySquad::default_instance_->InitAsDefaultInstance();
  TAESquadHeroStatusInfo::default_instance_->InitAsDefaultInstance();
  TAEMySquadStatus::default_instance_->InitAsDefaultInstance();
  TAdventureEnemySingleInfo::default_instance_->InitAsDefaultInstance();
  TAdventureEnemyGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TAdventureEnemyRebornHeroReq::default_instance_->InitAsDefaultInstance();
  TAdventureEnemySetSquadReq::default_instance_->InitAsDefaultInstance();
  TAdventureEnemySwitchSquadReq::default_instance_->InitAsDefaultInstance();
  TAdventureEnemyStartBattleReq::default_instance_->InitAsDefaultInstance();
  TAdventureEnemyStartBattleRsp::default_instance_->InitAsDefaultInstance();
  TAEMonsterStatus::default_instance_->InitAsDefaultInstance();
  TAEEnemySquad::default_instance_->InitAsDefaultInstance();
  TAdventureEnemyReportBattleReq::default_instance_->InitAsDefaultInstance();
  TAdventureEnemyReportBattleRsp::default_instance_->InitAsDefaultInstance();
  TNewAdventureEnemyNotify::default_instance_->InitAsDefaultInstance();
  TAdventureEnemyCancelBattleReq::default_instance_->InitAsDefaultInstance();
  TAdventureEnemySingleBattleRet::default_instance_->InitAsDefaultInstance();
  TAdventureEnemySkipBattleReq::default_instance_->InitAsDefaultInstance();
  TAdventureEnemySkipBattleRsp::default_instance_->InitAsDefaultInstance();
  TAdventureEnemyGetAcheivementInfoRsp::default_instance_->InitAsDefaultInstance();
  TAdventureEnemyReceiveAchievementRewardReq::default_instance_->InitAsDefaultInstance();
  TAdventureEnemySetPresetSquadReq::default_instance_->InitAsDefaultInstance();
  TAdventureEnemySwitchPresetSquadReq::default_instance_->InitAsDefaultInstance();
  TAdventureEnemyUsePresetSquadReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fAdventureEnemy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fAdventureEnemy_2eproto {
  StaticDescriptorInitializer_net_2fAdventureEnemy_2eproto() {
    protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  }
} static_descriptor_initializer_net_2fAdventureEnemy_2eproto_;
const ::google::protobuf::EnumDescriptor* TAERebornHeroCostType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAERebornHeroCostType_descriptor_;
}
bool TAERebornHeroCostType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TAESquadHeroInfo::kPosIdFieldNumber;
const int TAESquadHeroInfo::kHeroIdFieldNumber;
#endif  // !_MSC_VER

TAESquadHeroInfo::TAESquadHeroInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAESquadHeroInfo)
}

void TAESquadHeroInfo::InitAsDefaultInstance() {
}

TAESquadHeroInfo::TAESquadHeroInfo(const TAESquadHeroInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAESquadHeroInfo)
}

void TAESquadHeroInfo::SharedCtor() {
  _cached_size_ = 0;
  posid_ = 0u;
  heroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAESquadHeroInfo::~TAESquadHeroInfo() {
  // @@protoc_insertion_point(destructor:pb.TAESquadHeroInfo)
  SharedDtor();
}

void TAESquadHeroInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAESquadHeroInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAESquadHeroInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAESquadHeroInfo_descriptor_;
}

const TAESquadHeroInfo& TAESquadHeroInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAESquadHeroInfo* TAESquadHeroInfo::default_instance_ = NULL;

TAESquadHeroInfo* TAESquadHeroInfo::New() const {
  return new TAESquadHeroInfo;
}

void TAESquadHeroInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAESquadHeroInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(posid_, heroid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAESquadHeroInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAESquadHeroInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PosId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HeroId;
        break;
      }

      // optional uint32 HeroId = 2;
      case 2: {
        if (tag == 16) {
         parse_HeroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAESquadHeroInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAESquadHeroInfo)
  return false;
#undef DO_
}

void TAESquadHeroInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAESquadHeroInfo)
  // optional uint32 PosId = 1;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->posid(), output);
  }

  // optional uint32 HeroId = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAESquadHeroInfo)
}

::google::protobuf::uint8* TAESquadHeroInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAESquadHeroInfo)
  // optional uint32 PosId = 1;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->posid(), target);
  }

  // optional uint32 HeroId = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAESquadHeroInfo)
  return target;
}

int TAESquadHeroInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PosId = 1;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posid());
    }

    // optional uint32 HeroId = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAESquadHeroInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAESquadHeroInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAESquadHeroInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAESquadHeroInfo::MergeFrom(const TAESquadHeroInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posid()) {
      set_posid(from.posid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAESquadHeroInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAESquadHeroInfo::CopyFrom(const TAESquadHeroInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAESquadHeroInfo::IsInitialized() const {

  return true;
}

void TAESquadHeroInfo::Swap(TAESquadHeroInfo* other) {
  if (other != this) {
    std::swap(posid_, other->posid_);
    std::swap(heroid_, other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAESquadHeroInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAESquadHeroInfo_descriptor_;
  metadata.reflection = TAESquadHeroInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAEMySquad::kSquadIndexFieldNumber;
const int TAEMySquad::kSquadHeroArrFieldNumber;
#endif  // !_MSC_VER

TAEMySquad::TAEMySquad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAEMySquad)
}

void TAEMySquad::InitAsDefaultInstance() {
}

TAEMySquad::TAEMySquad(const TAEMySquad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAEMySquad)
}

void TAEMySquad::SharedCtor() {
  _cached_size_ = 0;
  squadindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAEMySquad::~TAEMySquad() {
  // @@protoc_insertion_point(destructor:pb.TAEMySquad)
  SharedDtor();
}

void TAEMySquad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAEMySquad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAEMySquad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAEMySquad_descriptor_;
}

const TAEMySquad& TAEMySquad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAEMySquad* TAEMySquad::default_instance_ = NULL;

TAEMySquad* TAEMySquad::New() const {
  return new TAEMySquad;
}

void TAEMySquad::Clear() {
  squadindex_ = 0u;
  squadheroarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAEMySquad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAEMySquad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SquadIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squadindex_)));
          set_has_squadindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SquadHeroArr;
        break;
      }

      // repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
      case 2: {
        if (tag == 18) {
         parse_SquadHeroArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_squadheroarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SquadHeroArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAEMySquad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAEMySquad)
  return false;
#undef DO_
}

void TAEMySquad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAEMySquad)
  // optional uint32 SquadIndex = 1;
  if (has_squadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->squadindex(), output);
  }

  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->squadheroarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAEMySquad)
}

::google::protobuf::uint8* TAEMySquad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAEMySquad)
  // optional uint32 SquadIndex = 1;
  if (has_squadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->squadindex(), target);
  }

  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->squadheroarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAEMySquad)
  return target;
}

int TAEMySquad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SquadIndex = 1;
    if (has_squadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squadindex());
    }

  }
  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
  total_size += 1 * this->squadheroarr_size();
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->squadheroarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAEMySquad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAEMySquad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAEMySquad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAEMySquad::MergeFrom(const TAEMySquad& from) {
  GOOGLE_CHECK_NE(&from, this);
  squadheroarr_.MergeFrom(from.squadheroarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_squadindex()) {
      set_squadindex(from.squadindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAEMySquad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAEMySquad::CopyFrom(const TAEMySquad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAEMySquad::IsInitialized() const {

  return true;
}

void TAEMySquad::Swap(TAEMySquad* other) {
  if (other != this) {
    std::swap(squadindex_, other->squadindex_);
    squadheroarr_.Swap(&other->squadheroarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAEMySquad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAEMySquad_descriptor_;
  metadata.reflection = TAEMySquad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAESquadHeroStatusInfo::kPosIdFieldNumber;
const int TAESquadHeroStatusInfo::kHeroIdFieldNumber;
const int TAESquadHeroStatusInfo::kCurHpFieldNumber;
const int TAESquadHeroStatusInfo::kMaxHpFieldNumber;
#endif  // !_MSC_VER

TAESquadHeroStatusInfo::TAESquadHeroStatusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAESquadHeroStatusInfo)
}

void TAESquadHeroStatusInfo::InitAsDefaultInstance() {
}

TAESquadHeroStatusInfo::TAESquadHeroStatusInfo(const TAESquadHeroStatusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAESquadHeroStatusInfo)
}

void TAESquadHeroStatusInfo::SharedCtor() {
  _cached_size_ = 0;
  posid_ = 0u;
  heroid_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAESquadHeroStatusInfo::~TAESquadHeroStatusInfo() {
  // @@protoc_insertion_point(destructor:pb.TAESquadHeroStatusInfo)
  SharedDtor();
}

void TAESquadHeroStatusInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAESquadHeroStatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAESquadHeroStatusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAESquadHeroStatusInfo_descriptor_;
}

const TAESquadHeroStatusInfo& TAESquadHeroStatusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAESquadHeroStatusInfo* TAESquadHeroStatusInfo::default_instance_ = NULL;

TAESquadHeroStatusInfo* TAESquadHeroStatusInfo::New() const {
  return new TAESquadHeroStatusInfo;
}

void TAESquadHeroStatusInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAESquadHeroStatusInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(posid_, maxhp_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAESquadHeroStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAESquadHeroStatusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PosId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_HeroId;
        break;
      }

      // optional uint32 HeroId = 2;
      case 2: {
        if (tag == 16) {
         parse_HeroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 3;
      case 3: {
        if (tag == 24) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAESquadHeroStatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAESquadHeroStatusInfo)
  return false;
#undef DO_
}

void TAESquadHeroStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAESquadHeroStatusInfo)
  // optional uint32 PosId = 1;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->posid(), output);
  }

  // optional uint32 HeroId = 2;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->heroid(), output);
  }

  // optional uint64 CurHp = 3;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->curhp(), output);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAESquadHeroStatusInfo)
}

::google::protobuf::uint8* TAESquadHeroStatusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAESquadHeroStatusInfo)
  // optional uint32 PosId = 1;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->posid(), target);
  }

  // optional uint32 HeroId = 2;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->heroid(), target);
  }

  // optional uint64 CurHp = 3;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->curhp(), target);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAESquadHeroStatusInfo)
  return target;
}

int TAESquadHeroStatusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PosId = 1;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posid());
    }

    // optional uint32 HeroId = 2;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint64 CurHp = 3;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint64 MaxHp = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAESquadHeroStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAESquadHeroStatusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAESquadHeroStatusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAESquadHeroStatusInfo::MergeFrom(const TAESquadHeroStatusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posid()) {
      set_posid(from.posid());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAESquadHeroStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAESquadHeroStatusInfo::CopyFrom(const TAESquadHeroStatusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAESquadHeroStatusInfo::IsInitialized() const {

  return true;
}

void TAESquadHeroStatusInfo::Swap(TAESquadHeroStatusInfo* other) {
  if (other != this) {
    std::swap(posid_, other->posid_);
    std::swap(heroid_, other->heroid_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAESquadHeroStatusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAESquadHeroStatusInfo_descriptor_;
  metadata.reflection = TAESquadHeroStatusInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAEMySquadStatus::kSquadIndexFieldNumber;
const int TAEMySquadStatus::kSquadHeroArrFieldNumber;
#endif  // !_MSC_VER

TAEMySquadStatus::TAEMySquadStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAEMySquadStatus)
}

void TAEMySquadStatus::InitAsDefaultInstance() {
}

TAEMySquadStatus::TAEMySquadStatus(const TAEMySquadStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAEMySquadStatus)
}

void TAEMySquadStatus::SharedCtor() {
  _cached_size_ = 0;
  squadindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAEMySquadStatus::~TAEMySquadStatus() {
  // @@protoc_insertion_point(destructor:pb.TAEMySquadStatus)
  SharedDtor();
}

void TAEMySquadStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAEMySquadStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAEMySquadStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAEMySquadStatus_descriptor_;
}

const TAEMySquadStatus& TAEMySquadStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAEMySquadStatus* TAEMySquadStatus::default_instance_ = NULL;

TAEMySquadStatus* TAEMySquadStatus::New() const {
  return new TAEMySquadStatus;
}

void TAEMySquadStatus::Clear() {
  squadindex_ = 0u;
  squadheroarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAEMySquadStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAEMySquadStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SquadIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squadindex_)));
          set_has_squadindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SquadHeroArr;
        break;
      }

      // repeated .pb.TAESquadHeroStatusInfo SquadHeroArr = 2;
      case 2: {
        if (tag == 18) {
         parse_SquadHeroArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_squadheroarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SquadHeroArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAEMySquadStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAEMySquadStatus)
  return false;
#undef DO_
}

void TAEMySquadStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAEMySquadStatus)
  // optional uint32 SquadIndex = 1;
  if (has_squadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->squadindex(), output);
  }

  // repeated .pb.TAESquadHeroStatusInfo SquadHeroArr = 2;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->squadheroarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAEMySquadStatus)
}

::google::protobuf::uint8* TAEMySquadStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAEMySquadStatus)
  // optional uint32 SquadIndex = 1;
  if (has_squadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->squadindex(), target);
  }

  // repeated .pb.TAESquadHeroStatusInfo SquadHeroArr = 2;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->squadheroarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAEMySquadStatus)
  return target;
}

int TAEMySquadStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SquadIndex = 1;
    if (has_squadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squadindex());
    }

  }
  // repeated .pb.TAESquadHeroStatusInfo SquadHeroArr = 2;
  total_size += 1 * this->squadheroarr_size();
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->squadheroarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAEMySquadStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAEMySquadStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAEMySquadStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAEMySquadStatus::MergeFrom(const TAEMySquadStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  squadheroarr_.MergeFrom(from.squadheroarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_squadindex()) {
      set_squadindex(from.squadindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAEMySquadStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAEMySquadStatus::CopyFrom(const TAEMySquadStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAEMySquadStatus::IsInitialized() const {

  return true;
}

void TAEMySquadStatus::Swap(TAEMySquadStatus* other) {
  if (other != this) {
    std::swap(squadindex_, other->squadindex_);
    squadheroarr_.Swap(&other->squadheroarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAEMySquadStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAEMySquadStatus_descriptor_;
  metadata.reflection = TAEMySquadStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemySingleInfo::kEnemyIdFieldNumber;
const int TAdventureEnemySingleInfo::kCurHpFieldNumber;
const int TAdventureEnemySingleInfo::kMaxHpFieldNumber;
const int TAdventureEnemySingleInfo::kEnemySquadArrFieldNumber;
const int TAdventureEnemySingleInfo::kMySquadArrFieldNumber;
const int TAdventureEnemySingleInfo::kFightHeroArrFieldNumber;
const int TAdventureEnemySingleInfo::kTriggerMapLevelFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemySingleInfo::TAdventureEnemySingleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemySingleInfo)
}

void TAdventureEnemySingleInfo::InitAsDefaultInstance() {
}

TAdventureEnemySingleInfo::TAdventureEnemySingleInfo(const TAdventureEnemySingleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemySingleInfo)
}

void TAdventureEnemySingleInfo::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  triggermaplevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemySingleInfo::~TAdventureEnemySingleInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemySingleInfo)
  SharedDtor();
}

void TAdventureEnemySingleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemySingleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemySingleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemySingleInfo_descriptor_;
}

const TAdventureEnemySingleInfo& TAdventureEnemySingleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemySingleInfo* TAdventureEnemySingleInfo::default_instance_ = NULL;

TAdventureEnemySingleInfo* TAdventureEnemySingleInfo::New() const {
  return new TAdventureEnemySingleInfo;
}

void TAdventureEnemySingleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureEnemySingleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curhp_, maxhp_);
  ZR_(enemyid_, triggermaplevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  enemysquadarr_.Clear();
  mysquadarr_.Clear();
  fightheroarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemySingleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemySingleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 2;
      case 2: {
        if (tag == 16) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_EnemySquadArr;
        break;
      }

      // repeated .pb.TAEEnemySquad EnemySquadArr = 4;
      case 4: {
        if (tag == 34) {
         parse_EnemySquadArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemysquadarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_EnemySquadArr;
        if (input->ExpectTag(42)) goto parse_MySquadArr;
        break;
      }

      // repeated .pb.TAEMySquad MySquadArr = 5;
      case 5: {
        if (tag == 42) {
         parse_MySquadArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mysquadarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_MySquadArr;
        if (input->ExpectTag(48)) goto parse_FightHeroArr;
        break;
      }

      // repeated uint32 FightHeroArr = 6;
      case 6: {
        if (tag == 48) {
         parse_FightHeroArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_fightheroarr())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fightheroarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_FightHeroArr;
        if (input->ExpectTag(56)) goto parse_TriggerMapLevel;
        break;
      }

      // optional uint32 TriggerMapLevel = 7;
      case 7: {
        if (tag == 56) {
         parse_TriggerMapLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &triggermaplevel_)));
          set_has_triggermaplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemySingleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemySingleInfo)
  return false;
#undef DO_
}

void TAdventureEnemySingleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemySingleInfo)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  // optional uint64 CurHp = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->curhp(), output);
  }

  // optional uint64 MaxHp = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maxhp(), output);
  }

  // repeated .pb.TAEEnemySquad EnemySquadArr = 4;
  for (int i = 0; i < this->enemysquadarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->enemysquadarr(i), output);
  }

  // repeated .pb.TAEMySquad MySquadArr = 5;
  for (int i = 0; i < this->mysquadarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->mysquadarr(i), output);
  }

  // repeated uint32 FightHeroArr = 6;
  for (int i = 0; i < this->fightheroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->fightheroarr(i), output);
  }

  // optional uint32 TriggerMapLevel = 7;
  if (has_triggermaplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->triggermaplevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemySingleInfo)
}

::google::protobuf::uint8* TAdventureEnemySingleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemySingleInfo)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  // optional uint64 CurHp = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->curhp(), target);
  }

  // optional uint64 MaxHp = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maxhp(), target);
  }

  // repeated .pb.TAEEnemySquad EnemySquadArr = 4;
  for (int i = 0; i < this->enemysquadarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->enemysquadarr(i), target);
  }

  // repeated .pb.TAEMySquad MySquadArr = 5;
  for (int i = 0; i < this->mysquadarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->mysquadarr(i), target);
  }

  // repeated uint32 FightHeroArr = 6;
  for (int i = 0; i < this->fightheroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->fightheroarr(i), target);
  }

  // optional uint32 TriggerMapLevel = 7;
  if (has_triggermaplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->triggermaplevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemySingleInfo)
  return target;
}

int TAdventureEnemySingleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

    // optional uint64 CurHp = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint64 MaxHp = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

    // optional uint32 TriggerMapLevel = 7;
    if (has_triggermaplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->triggermaplevel());
    }

  }
  // repeated .pb.TAEEnemySquad EnemySquadArr = 4;
  total_size += 1 * this->enemysquadarr_size();
  for (int i = 0; i < this->enemysquadarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemysquadarr(i));
  }

  // repeated .pb.TAEMySquad MySquadArr = 5;
  total_size += 1 * this->mysquadarr_size();
  for (int i = 0; i < this->mysquadarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mysquadarr(i));
  }

  // repeated uint32 FightHeroArr = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->fightheroarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fightheroarr(i));
    }
    total_size += 1 * this->fightheroarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemySingleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemySingleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemySingleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemySingleInfo::MergeFrom(const TAdventureEnemySingleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemysquadarr_.MergeFrom(from.enemysquadarr_);
  mysquadarr_.MergeFrom(from.mysquadarr_);
  fightheroarr_.MergeFrom(from.fightheroarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_triggermaplevel()) {
      set_triggermaplevel(from.triggermaplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemySingleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemySingleInfo::CopyFrom(const TAdventureEnemySingleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemySingleInfo::IsInitialized() const {

  return true;
}

void TAdventureEnemySingleInfo::Swap(TAdventureEnemySingleInfo* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    enemysquadarr_.Swap(&other->enemysquadarr_);
    mysquadarr_.Swap(&other->mysquadarr_);
    fightheroarr_.Swap(&other->fightheroarr_);
    std::swap(triggermaplevel_, other->triggermaplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemySingleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemySingleInfo_descriptor_;
  metadata.reflection = TAdventureEnemySingleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemyGetInfoRsp::kEnemyArrFieldNumber;
const int TAdventureEnemyGetInfoRsp::kEnemyIdArrFieldNumber;
const int TAdventureEnemyGetInfoRsp::kDueTimeFieldNumber;
const int TAdventureEnemyGetInfoRsp::kPresetSquadArrFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemyGetInfoRsp::TAdventureEnemyGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemyGetInfoRsp)
}

void TAdventureEnemyGetInfoRsp::InitAsDefaultInstance() {
}

TAdventureEnemyGetInfoRsp::TAdventureEnemyGetInfoRsp(const TAdventureEnemyGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemyGetInfoRsp)
}

void TAdventureEnemyGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  duetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemyGetInfoRsp::~TAdventureEnemyGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemyGetInfoRsp)
  SharedDtor();
}

void TAdventureEnemyGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemyGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemyGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemyGetInfoRsp_descriptor_;
}

const TAdventureEnemyGetInfoRsp& TAdventureEnemyGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemyGetInfoRsp* TAdventureEnemyGetInfoRsp::default_instance_ = NULL;

TAdventureEnemyGetInfoRsp* TAdventureEnemyGetInfoRsp::New() const {
  return new TAdventureEnemyGetInfoRsp;
}

void TAdventureEnemyGetInfoRsp::Clear() {
  duetime_ = GOOGLE_ULONGLONG(0);
  enemyarr_.Clear();
  enemyidarr_.Clear();
  presetsquadarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemyGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemyGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventureEnemySingleInfo EnemyArr = 1;
      case 1: {
        if (tag == 10) {
         parse_EnemyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_EnemyArr;
        if (input->ExpectTag(16)) goto parse_EnemyIdArr;
        break;
      }

      // repeated uint32 EnemyIdArr = 2;
      case 2: {
        if (tag == 16) {
         parse_EnemyIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_enemyidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enemyidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EnemyIdArr;
        if (input->ExpectTag(24)) goto parse_DueTime;
        break;
      }

      // optional uint64 DueTime = 3;
      case 3: {
        if (tag == 24) {
         parse_DueTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &duetime_)));
          set_has_duetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_PresetSquadArr;
        break;
      }

      // repeated .pb.TAEMySquad PresetSquadArr = 4;
      case 4: {
        if (tag == 34) {
         parse_PresetSquadArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_presetsquadarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_PresetSquadArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemyGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemyGetInfoRsp)
  return false;
#undef DO_
}

void TAdventureEnemyGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemyGetInfoRsp)
  // repeated .pb.TAdventureEnemySingleInfo EnemyArr = 1;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enemyarr(i), output);
  }

  // repeated uint32 EnemyIdArr = 2;
  for (int i = 0; i < this->enemyidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->enemyidarr(i), output);
  }

  // optional uint64 DueTime = 3;
  if (has_duetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->duetime(), output);
  }

  // repeated .pb.TAEMySquad PresetSquadArr = 4;
  for (int i = 0; i < this->presetsquadarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->presetsquadarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemyGetInfoRsp)
}

::google::protobuf::uint8* TAdventureEnemyGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemyGetInfoRsp)
  // repeated .pb.TAdventureEnemySingleInfo EnemyArr = 1;
  for (int i = 0; i < this->enemyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enemyarr(i), target);
  }

  // repeated uint32 EnemyIdArr = 2;
  for (int i = 0; i < this->enemyidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->enemyidarr(i), target);
  }

  // optional uint64 DueTime = 3;
  if (has_duetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->duetime(), target);
  }

  // repeated .pb.TAEMySquad PresetSquadArr = 4;
  for (int i = 0; i < this->presetsquadarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->presetsquadarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemyGetInfoRsp)
  return target;
}

int TAdventureEnemyGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint64 DueTime = 3;
    if (has_duetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->duetime());
    }

  }
  // repeated .pb.TAdventureEnemySingleInfo EnemyArr = 1;
  total_size += 1 * this->enemyarr_size();
  for (int i = 0; i < this->enemyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemyarr(i));
  }

  // repeated uint32 EnemyIdArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemyidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->enemyidarr(i));
    }
    total_size += 1 * this->enemyidarr_size() + data_size;
  }

  // repeated .pb.TAEMySquad PresetSquadArr = 4;
  total_size += 1 * this->presetsquadarr_size();
  for (int i = 0; i < this->presetsquadarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->presetsquadarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemyGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemyGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemyGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemyGetInfoRsp::MergeFrom(const TAdventureEnemyGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemyarr_.MergeFrom(from.enemyarr_);
  enemyidarr_.MergeFrom(from.enemyidarr_);
  presetsquadarr_.MergeFrom(from.presetsquadarr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_duetime()) {
      set_duetime(from.duetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemyGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemyGetInfoRsp::CopyFrom(const TAdventureEnemyGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemyGetInfoRsp::IsInitialized() const {

  return true;
}

void TAdventureEnemyGetInfoRsp::Swap(TAdventureEnemyGetInfoRsp* other) {
  if (other != this) {
    enemyarr_.Swap(&other->enemyarr_);
    enemyidarr_.Swap(&other->enemyidarr_);
    std::swap(duetime_, other->duetime_);
    presetsquadarr_.Swap(&other->presetsquadarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemyGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemyGetInfoRsp_descriptor_;
  metadata.reflection = TAdventureEnemyGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemyRebornHeroReq::kEnemyIdFieldNumber;
const int TAdventureEnemyRebornHeroReq::kCostTypeFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemyRebornHeroReq::TAdventureEnemyRebornHeroReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemyRebornHeroReq)
}

void TAdventureEnemyRebornHeroReq::InitAsDefaultInstance() {
}

TAdventureEnemyRebornHeroReq::TAdventureEnemyRebornHeroReq(const TAdventureEnemyRebornHeroReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemyRebornHeroReq)
}

void TAdventureEnemyRebornHeroReq::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  costtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemyRebornHeroReq::~TAdventureEnemyRebornHeroReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemyRebornHeroReq)
  SharedDtor();
}

void TAdventureEnemyRebornHeroReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemyRebornHeroReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemyRebornHeroReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemyRebornHeroReq_descriptor_;
}

const TAdventureEnemyRebornHeroReq& TAdventureEnemyRebornHeroReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemyRebornHeroReq* TAdventureEnemyRebornHeroReq::default_instance_ = NULL;

TAdventureEnemyRebornHeroReq* TAdventureEnemyRebornHeroReq::New() const {
  return new TAdventureEnemyRebornHeroReq;
}

void TAdventureEnemyRebornHeroReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    enemyid_ = 0u;
    costtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemyRebornHeroReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemyRebornHeroReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CostType;
        break;
      }

      // optional .pb.TAERebornHeroCostType CostType = 2;
      case 2: {
        if (tag == 16) {
         parse_CostType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::TAERebornHeroCostType_IsValid(value)) {
            set_costtype(static_cast< ::pb::TAERebornHeroCostType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemyRebornHeroReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemyRebornHeroReq)
  return false;
#undef DO_
}

void TAdventureEnemyRebornHeroReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemyRebornHeroReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  // optional .pb.TAERebornHeroCostType CostType = 2;
  if (has_costtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->costtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemyRebornHeroReq)
}

::google::protobuf::uint8* TAdventureEnemyRebornHeroReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemyRebornHeroReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  // optional .pb.TAERebornHeroCostType CostType = 2;
  if (has_costtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->costtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemyRebornHeroReq)
  return target;
}

int TAdventureEnemyRebornHeroReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

    // optional .pb.TAERebornHeroCostType CostType = 2;
    if (has_costtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->costtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemyRebornHeroReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemyRebornHeroReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemyRebornHeroReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemyRebornHeroReq::MergeFrom(const TAdventureEnemyRebornHeroReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_costtype()) {
      set_costtype(from.costtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemyRebornHeroReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemyRebornHeroReq::CopyFrom(const TAdventureEnemyRebornHeroReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemyRebornHeroReq::IsInitialized() const {

  return true;
}

void TAdventureEnemyRebornHeroReq::Swap(TAdventureEnemyRebornHeroReq* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(costtype_, other->costtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemyRebornHeroReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemyRebornHeroReq_descriptor_;
  metadata.reflection = TAdventureEnemyRebornHeroReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemySetSquadReq::kEnemyIdFieldNumber;
const int TAdventureEnemySetSquadReq::kSquadIndexFieldNumber;
const int TAdventureEnemySetSquadReq::kSquadHeroArrFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemySetSquadReq::TAdventureEnemySetSquadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemySetSquadReq)
}

void TAdventureEnemySetSquadReq::InitAsDefaultInstance() {
}

TAdventureEnemySetSquadReq::TAdventureEnemySetSquadReq(const TAdventureEnemySetSquadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemySetSquadReq)
}

void TAdventureEnemySetSquadReq::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  squadindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemySetSquadReq::~TAdventureEnemySetSquadReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemySetSquadReq)
  SharedDtor();
}

void TAdventureEnemySetSquadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemySetSquadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemySetSquadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemySetSquadReq_descriptor_;
}

const TAdventureEnemySetSquadReq& TAdventureEnemySetSquadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemySetSquadReq* TAdventureEnemySetSquadReq::default_instance_ = NULL;

TAdventureEnemySetSquadReq* TAdventureEnemySetSquadReq::New() const {
  return new TAdventureEnemySetSquadReq;
}

void TAdventureEnemySetSquadReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureEnemySetSquadReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(enemyid_, squadindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  squadheroarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemySetSquadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemySetSquadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SquadIndex;
        break;
      }

      // optional uint32 SquadIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_SquadIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squadindex_)));
          set_has_squadindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SquadHeroArr;
        break;
      }

      // repeated .pb.TAESquadHeroInfo SquadHeroArr = 3;
      case 3: {
        if (tag == 26) {
         parse_SquadHeroArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_squadheroarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SquadHeroArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemySetSquadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemySetSquadReq)
  return false;
#undef DO_
}

void TAdventureEnemySetSquadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemySetSquadReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  // optional uint32 SquadIndex = 2;
  if (has_squadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->squadindex(), output);
  }

  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 3;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->squadheroarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemySetSquadReq)
}

::google::protobuf::uint8* TAdventureEnemySetSquadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemySetSquadReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  // optional uint32 SquadIndex = 2;
  if (has_squadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->squadindex(), target);
  }

  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 3;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->squadheroarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemySetSquadReq)
  return target;
}

int TAdventureEnemySetSquadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

    // optional uint32 SquadIndex = 2;
    if (has_squadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squadindex());
    }

  }
  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 3;
  total_size += 1 * this->squadheroarr_size();
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->squadheroarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemySetSquadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemySetSquadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemySetSquadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemySetSquadReq::MergeFrom(const TAdventureEnemySetSquadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  squadheroarr_.MergeFrom(from.squadheroarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_squadindex()) {
      set_squadindex(from.squadindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemySetSquadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemySetSquadReq::CopyFrom(const TAdventureEnemySetSquadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemySetSquadReq::IsInitialized() const {

  return true;
}

void TAdventureEnemySetSquadReq::Swap(TAdventureEnemySetSquadReq* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(squadindex_, other->squadindex_);
    squadheroarr_.Swap(&other->squadheroarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemySetSquadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemySetSquadReq_descriptor_;
  metadata.reflection = TAdventureEnemySetSquadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemySwitchSquadReq::kEnemyIdFieldNumber;
const int TAdventureEnemySwitchSquadReq::kSquadIndexFieldNumber;
const int TAdventureEnemySwitchSquadReq::kSwitchToSquadIndexFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemySwitchSquadReq::TAdventureEnemySwitchSquadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemySwitchSquadReq)
}

void TAdventureEnemySwitchSquadReq::InitAsDefaultInstance() {
}

TAdventureEnemySwitchSquadReq::TAdventureEnemySwitchSquadReq(const TAdventureEnemySwitchSquadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemySwitchSquadReq)
}

void TAdventureEnemySwitchSquadReq::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  squadindex_ = 0u;
  switchtosquadindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemySwitchSquadReq::~TAdventureEnemySwitchSquadReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemySwitchSquadReq)
  SharedDtor();
}

void TAdventureEnemySwitchSquadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemySwitchSquadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemySwitchSquadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemySwitchSquadReq_descriptor_;
}

const TAdventureEnemySwitchSquadReq& TAdventureEnemySwitchSquadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemySwitchSquadReq* TAdventureEnemySwitchSquadReq::default_instance_ = NULL;

TAdventureEnemySwitchSquadReq* TAdventureEnemySwitchSquadReq::New() const {
  return new TAdventureEnemySwitchSquadReq;
}

void TAdventureEnemySwitchSquadReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureEnemySwitchSquadReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(enemyid_, switchtosquadindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemySwitchSquadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemySwitchSquadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SquadIndex;
        break;
      }

      // optional uint32 SquadIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_SquadIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squadindex_)));
          set_has_squadindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SwitchToSquadIndex;
        break;
      }

      // optional uint32 SwitchToSquadIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_SwitchToSquadIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switchtosquadindex_)));
          set_has_switchtosquadindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemySwitchSquadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemySwitchSquadReq)
  return false;
#undef DO_
}

void TAdventureEnemySwitchSquadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemySwitchSquadReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  // optional uint32 SquadIndex = 2;
  if (has_squadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->squadindex(), output);
  }

  // optional uint32 SwitchToSquadIndex = 3;
  if (has_switchtosquadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->switchtosquadindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemySwitchSquadReq)
}

::google::protobuf::uint8* TAdventureEnemySwitchSquadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemySwitchSquadReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  // optional uint32 SquadIndex = 2;
  if (has_squadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->squadindex(), target);
  }

  // optional uint32 SwitchToSquadIndex = 3;
  if (has_switchtosquadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->switchtosquadindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemySwitchSquadReq)
  return target;
}

int TAdventureEnemySwitchSquadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

    // optional uint32 SquadIndex = 2;
    if (has_squadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squadindex());
    }

    // optional uint32 SwitchToSquadIndex = 3;
    if (has_switchtosquadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->switchtosquadindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemySwitchSquadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemySwitchSquadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemySwitchSquadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemySwitchSquadReq::MergeFrom(const TAdventureEnemySwitchSquadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_squadindex()) {
      set_squadindex(from.squadindex());
    }
    if (from.has_switchtosquadindex()) {
      set_switchtosquadindex(from.switchtosquadindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemySwitchSquadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemySwitchSquadReq::CopyFrom(const TAdventureEnemySwitchSquadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemySwitchSquadReq::IsInitialized() const {

  return true;
}

void TAdventureEnemySwitchSquadReq::Swap(TAdventureEnemySwitchSquadReq* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(squadindex_, other->squadindex_);
    std::swap(switchtosquadindex_, other->switchtosquadindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemySwitchSquadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemySwitchSquadReq_descriptor_;
  metadata.reflection = TAdventureEnemySwitchSquadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemyStartBattleReq::kEnemyIdFieldNumber;
const int TAdventureEnemyStartBattleReq::kSquadIndexFieldNumber;
const int TAdventureEnemyStartBattleReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemyStartBattleReq::TAdventureEnemyStartBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemyStartBattleReq)
}

void TAdventureEnemyStartBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TAdventureEnemyStartBattleReq::TAdventureEnemyStartBattleReq(const TAdventureEnemyStartBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemyStartBattleReq)
}

void TAdventureEnemyStartBattleReq::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  squadindex_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemyStartBattleReq::~TAdventureEnemyStartBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemyStartBattleReq)
  SharedDtor();
}

void TAdventureEnemyStartBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TAdventureEnemyStartBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemyStartBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemyStartBattleReq_descriptor_;
}

const TAdventureEnemyStartBattleReq& TAdventureEnemyStartBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemyStartBattleReq* TAdventureEnemyStartBattleReq::default_instance_ = NULL;

TAdventureEnemyStartBattleReq* TAdventureEnemyStartBattleReq::New() const {
  return new TAdventureEnemyStartBattleReq;
}

void TAdventureEnemyStartBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureEnemyStartBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(enemyid_, squadindex_);
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemyStartBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemyStartBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SquadIndex;
        break;
      }

      // optional uint32 SquadIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_SquadIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squadindex_)));
          set_has_squadindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemyStartBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemyStartBattleReq)
  return false;
#undef DO_
}

void TAdventureEnemyStartBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemyStartBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  // optional uint32 SquadIndex = 2;
  if (has_squadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->squadindex(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemyStartBattleReq)
}

::google::protobuf::uint8* TAdventureEnemyStartBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemyStartBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  // optional uint32 SquadIndex = 2;
  if (has_squadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->squadindex(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemyStartBattleReq)
  return target;
}

int TAdventureEnemyStartBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

    // optional uint32 SquadIndex = 2;
    if (has_squadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squadindex());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 3;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemyStartBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemyStartBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemyStartBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemyStartBattleReq::MergeFrom(const TAdventureEnemyStartBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_squadindex()) {
      set_squadindex(from.squadindex());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemyStartBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemyStartBattleReq::CopyFrom(const TAdventureEnemyStartBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemyStartBattleReq::IsInitialized() const {

  return true;
}

void TAdventureEnemyStartBattleReq::Swap(TAdventureEnemyStartBattleReq* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(squadindex_, other->squadindex_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemyStartBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemyStartBattleReq_descriptor_;
  metadata.reflection = TAdventureEnemyStartBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemyStartBattleRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemyStartBattleRsp::TAdventureEnemyStartBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemyStartBattleRsp)
}

void TAdventureEnemyStartBattleRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TAdventureEnemyStartBattleRsp::TAdventureEnemyStartBattleRsp(const TAdventureEnemyStartBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemyStartBattleRsp)
}

void TAdventureEnemyStartBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemyStartBattleRsp::~TAdventureEnemyStartBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemyStartBattleRsp)
  SharedDtor();
}

void TAdventureEnemyStartBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TAdventureEnemyStartBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemyStartBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemyStartBattleRsp_descriptor_;
}

const TAdventureEnemyStartBattleRsp& TAdventureEnemyStartBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemyStartBattleRsp* TAdventureEnemyStartBattleRsp::default_instance_ = NULL;

TAdventureEnemyStartBattleRsp* TAdventureEnemyStartBattleRsp::New() const {
  return new TAdventureEnemyStartBattleRsp;
}

void TAdventureEnemyStartBattleRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemyStartBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemyStartBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemyStartBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemyStartBattleRsp)
  return false;
#undef DO_
}

void TAdventureEnemyStartBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemyStartBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemyStartBattleRsp)
}

::google::protobuf::uint8* TAdventureEnemyStartBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemyStartBattleRsp)
  // optional .pb.TBattleArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemyStartBattleRsp)
  return target;
}

int TAdventureEnemyStartBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemyStartBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemyStartBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemyStartBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemyStartBattleRsp::MergeFrom(const TAdventureEnemyStartBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemyStartBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemyStartBattleRsp::CopyFrom(const TAdventureEnemyStartBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemyStartBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TAdventureEnemyStartBattleRsp::Swap(TAdventureEnemyStartBattleRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemyStartBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemyStartBattleRsp_descriptor_;
  metadata.reflection = TAdventureEnemyStartBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAEMonsterStatus::kPosIdFieldNumber;
const int TAEMonsterStatus::kCurHpFieldNumber;
const int TAEMonsterStatus::kMaxHpFieldNumber;
#endif  // !_MSC_VER

TAEMonsterStatus::TAEMonsterStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAEMonsterStatus)
}

void TAEMonsterStatus::InitAsDefaultInstance() {
}

TAEMonsterStatus::TAEMonsterStatus(const TAEMonsterStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAEMonsterStatus)
}

void TAEMonsterStatus::SharedCtor() {
  _cached_size_ = 0;
  posid_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAEMonsterStatus::~TAEMonsterStatus() {
  // @@protoc_insertion_point(destructor:pb.TAEMonsterStatus)
  SharedDtor();
}

void TAEMonsterStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAEMonsterStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAEMonsterStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAEMonsterStatus_descriptor_;
}

const TAEMonsterStatus& TAEMonsterStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAEMonsterStatus* TAEMonsterStatus::default_instance_ = NULL;

TAEMonsterStatus* TAEMonsterStatus::New() const {
  return new TAEMonsterStatus;
}

void TAEMonsterStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAEMonsterStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curhp_, posid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAEMonsterStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAEMonsterStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PosId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &posid_)));
          set_has_posid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 2;
      case 2: {
        if (tag == 16) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 3;
      case 3: {
        if (tag == 24) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAEMonsterStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAEMonsterStatus)
  return false;
#undef DO_
}

void TAEMonsterStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAEMonsterStatus)
  // optional uint32 PosId = 1;
  if (has_posid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->posid(), output);
  }

  // optional uint64 CurHp = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->curhp(), output);
  }

  // optional uint64 MaxHp = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAEMonsterStatus)
}

::google::protobuf::uint8* TAEMonsterStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAEMonsterStatus)
  // optional uint32 PosId = 1;
  if (has_posid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->posid(), target);
  }

  // optional uint64 CurHp = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->curhp(), target);
  }

  // optional uint64 MaxHp = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAEMonsterStatus)
  return target;
}

int TAEMonsterStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PosId = 1;
    if (has_posid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->posid());
    }

    // optional uint64 CurHp = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint64 MaxHp = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAEMonsterStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAEMonsterStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAEMonsterStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAEMonsterStatus::MergeFrom(const TAEMonsterStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_posid()) {
      set_posid(from.posid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAEMonsterStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAEMonsterStatus::CopyFrom(const TAEMonsterStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAEMonsterStatus::IsInitialized() const {

  return true;
}

void TAEMonsterStatus::Swap(TAEMonsterStatus* other) {
  if (other != this) {
    std::swap(posid_, other->posid_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAEMonsterStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAEMonsterStatus_descriptor_;
  metadata.reflection = TAEMonsterStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAEEnemySquad::kSquadIndexFieldNumber;
const int TAEEnemySquad::kSquadMonsterArrFieldNumber;
const int TAEEnemySquad::kFightForceFieldNumber;
#endif  // !_MSC_VER

TAEEnemySquad::TAEEnemySquad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAEEnemySquad)
}

void TAEEnemySquad::InitAsDefaultInstance() {
}

TAEEnemySquad::TAEEnemySquad(const TAEEnemySquad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAEEnemySquad)
}

void TAEEnemySquad::SharedCtor() {
  _cached_size_ = 0;
  squadindex_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAEEnemySquad::~TAEEnemySquad() {
  // @@protoc_insertion_point(destructor:pb.TAEEnemySquad)
  SharedDtor();
}

void TAEEnemySquad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAEEnemySquad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAEEnemySquad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAEEnemySquad_descriptor_;
}

const TAEEnemySquad& TAEEnemySquad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAEEnemySquad* TAEEnemySquad::default_instance_ = NULL;

TAEEnemySquad* TAEEnemySquad::New() const {
  return new TAEEnemySquad;
}

void TAEEnemySquad::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAEEnemySquad*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(fightforce_, squadindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  squadmonsterarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAEEnemySquad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAEEnemySquad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SquadIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squadindex_)));
          set_has_squadindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SquadMonsterArr;
        break;
      }

      // repeated .pb.TAEMonsterStatus SquadMonsterArr = 2;
      case 2: {
        if (tag == 18) {
         parse_SquadMonsterArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_squadmonsterarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SquadMonsterArr;
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAEEnemySquad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAEEnemySquad)
  return false;
#undef DO_
}

void TAEEnemySquad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAEEnemySquad)
  // optional uint32 SquadIndex = 1;
  if (has_squadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->squadindex(), output);
  }

  // repeated .pb.TAEMonsterStatus SquadMonsterArr = 2;
  for (int i = 0; i < this->squadmonsterarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->squadmonsterarr(i), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAEEnemySquad)
}

::google::protobuf::uint8* TAEEnemySquad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAEEnemySquad)
  // optional uint32 SquadIndex = 1;
  if (has_squadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->squadindex(), target);
  }

  // repeated .pb.TAEMonsterStatus SquadMonsterArr = 2;
  for (int i = 0; i < this->squadmonsterarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->squadmonsterarr(i), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAEEnemySquad)
  return target;
}

int TAEEnemySquad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SquadIndex = 1;
    if (has_squadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squadindex());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  // repeated .pb.TAEMonsterStatus SquadMonsterArr = 2;
  total_size += 1 * this->squadmonsterarr_size();
  for (int i = 0; i < this->squadmonsterarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->squadmonsterarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAEEnemySquad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAEEnemySquad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAEEnemySquad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAEEnemySquad::MergeFrom(const TAEEnemySquad& from) {
  GOOGLE_CHECK_NE(&from, this);
  squadmonsterarr_.MergeFrom(from.squadmonsterarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_squadindex()) {
      set_squadindex(from.squadindex());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAEEnemySquad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAEEnemySquad::CopyFrom(const TAEEnemySquad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAEEnemySquad::IsInitialized() const {

  return true;
}

void TAEEnemySquad::Swap(TAEEnemySquad* other) {
  if (other != this) {
    std::swap(squadindex_, other->squadindex_);
    squadmonsterarr_.Swap(&other->squadmonsterarr_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAEEnemySquad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAEEnemySquad_descriptor_;
  metadata.reflection = TAEEnemySquad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemyReportBattleReq::kEnemyIdFieldNumber;
const int TAdventureEnemyReportBattleReq::kSquadIndexFieldNumber;
const int TAdventureEnemyReportBattleReq::kBattleResultFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemyReportBattleReq::TAdventureEnemyReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemyReportBattleReq)
}

void TAdventureEnemyReportBattleReq::InitAsDefaultInstance() {
  battleresult_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TAdventureEnemyReportBattleReq::TAdventureEnemyReportBattleReq(const TAdventureEnemyReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemyReportBattleReq)
}

void TAdventureEnemyReportBattleReq::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  squadindex_ = 0u;
  battleresult_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemyReportBattleReq::~TAdventureEnemyReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemyReportBattleReq)
  SharedDtor();
}

void TAdventureEnemyReportBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battleresult_;
  }
}

void TAdventureEnemyReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemyReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemyReportBattleReq_descriptor_;
}

const TAdventureEnemyReportBattleReq& TAdventureEnemyReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemyReportBattleReq* TAdventureEnemyReportBattleReq::default_instance_ = NULL;

TAdventureEnemyReportBattleReq* TAdventureEnemyReportBattleReq::New() const {
  return new TAdventureEnemyReportBattleReq;
}

void TAdventureEnemyReportBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureEnemyReportBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(enemyid_, squadindex_);
    if (has_battleresult()) {
      if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemyReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemyReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SquadIndex;
        break;
      }

      // optional uint32 SquadIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_SquadIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squadindex_)));
          set_has_squadindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleResult;
        break;
      }

      // optional .pb.TBattleResult BattleResult = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleresult()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemyReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemyReportBattleReq)
  return false;
#undef DO_
}

void TAdventureEnemyReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemyReportBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  // optional uint32 SquadIndex = 2;
  if (has_squadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->squadindex(), output);
  }

  // optional .pb.TBattleResult BattleResult = 3;
  if (has_battleresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battleresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemyReportBattleReq)
}

::google::protobuf::uint8* TAdventureEnemyReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemyReportBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  // optional uint32 SquadIndex = 2;
  if (has_squadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->squadindex(), target);
  }

  // optional .pb.TBattleResult BattleResult = 3;
  if (has_battleresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battleresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemyReportBattleReq)
  return target;
}

int TAdventureEnemyReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

    // optional uint32 SquadIndex = 2;
    if (has_squadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squadindex());
    }

    // optional .pb.TBattleResult BattleResult = 3;
    if (has_battleresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemyReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemyReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemyReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemyReportBattleReq::MergeFrom(const TAdventureEnemyReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
    if (from.has_squadindex()) {
      set_squadindex(from.squadindex());
    }
    if (from.has_battleresult()) {
      mutable_battleresult()->::pb::TBattleResult::MergeFrom(from.battleresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemyReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemyReportBattleReq::CopyFrom(const TAdventureEnemyReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemyReportBattleReq::IsInitialized() const {

  if (has_battleresult()) {
    if (!this->battleresult().IsInitialized()) return false;
  }
  return true;
}

void TAdventureEnemyReportBattleReq::Swap(TAdventureEnemyReportBattleReq* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(squadindex_, other->squadindex_);
    std::swap(battleresult_, other->battleresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemyReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemyReportBattleReq_descriptor_;
  metadata.reflection = TAdventureEnemyReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemyReportBattleRsp::kRewardArrayFieldNumber;
const int TAdventureEnemyReportBattleRsp::kEnemySquadFieldNumber;
const int TAdventureEnemyReportBattleRsp::kEnemyIsDeadFieldNumber;
const int TAdventureEnemyReportBattleRsp::kMySquadFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemyReportBattleRsp::TAdventureEnemyReportBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemyReportBattleRsp)
}

void TAdventureEnemyReportBattleRsp::InitAsDefaultInstance() {
  enemysquad_ = const_cast< ::pb::TAEEnemySquad*>(&::pb::TAEEnemySquad::default_instance());
  mysquad_ = const_cast< ::pb::TAEMySquadStatus*>(&::pb::TAEMySquadStatus::default_instance());
}

TAdventureEnemyReportBattleRsp::TAdventureEnemyReportBattleRsp(const TAdventureEnemyReportBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemyReportBattleRsp)
}

void TAdventureEnemyReportBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  enemysquad_ = NULL;
  enemyisdead_ = false;
  mysquad_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemyReportBattleRsp::~TAdventureEnemyReportBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemyReportBattleRsp)
  SharedDtor();
}

void TAdventureEnemyReportBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete enemysquad_;
    delete mysquad_;
  }
}

void TAdventureEnemyReportBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemyReportBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemyReportBattleRsp_descriptor_;
}

const TAdventureEnemyReportBattleRsp& TAdventureEnemyReportBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemyReportBattleRsp* TAdventureEnemyReportBattleRsp::default_instance_ = NULL;

TAdventureEnemyReportBattleRsp* TAdventureEnemyReportBattleRsp::New() const {
  return new TAdventureEnemyReportBattleRsp;
}

void TAdventureEnemyReportBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 14) {
    if (has_enemysquad()) {
      if (enemysquad_ != NULL) enemysquad_->::pb::TAEEnemySquad::Clear();
    }
    enemyisdead_ = false;
    if (has_mysquad()) {
      if (mysquad_ != NULL) mysquad_->::pb::TAEMySquadStatus::Clear();
    }
  }
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemyReportBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemyReportBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectTag(18)) goto parse_EnemySquad;
        break;
      }

      // optional .pb.TAEEnemySquad EnemySquad = 2;
      case 2: {
        if (tag == 18) {
         parse_EnemySquad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemysquad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnemyIsDead;
        break;
      }

      // optional bool EnemyIsDead = 3;
      case 3: {
        if (tag == 24) {
         parse_EnemyIsDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enemyisdead_)));
          set_has_enemyisdead();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MySquad;
        break;
      }

      // optional .pb.TAEMySquadStatus MySquad = 4;
      case 4: {
        if (tag == 34) {
         parse_MySquad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mysquad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemyReportBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemyReportBattleRsp)
  return false;
#undef DO_
}

void TAdventureEnemyReportBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemyReportBattleRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  // optional .pb.TAEEnemySquad EnemySquad = 2;
  if (has_enemysquad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemysquad(), output);
  }

  // optional bool EnemyIsDead = 3;
  if (has_enemyisdead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enemyisdead(), output);
  }

  // optional .pb.TAEMySquadStatus MySquad = 4;
  if (has_mysquad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mysquad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemyReportBattleRsp)
}

::google::protobuf::uint8* TAdventureEnemyReportBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemyReportBattleRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  // optional .pb.TAEEnemySquad EnemySquad = 2;
  if (has_enemysquad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enemysquad(), target);
  }

  // optional bool EnemyIsDead = 3;
  if (has_enemyisdead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enemyisdead(), target);
  }

  // optional .pb.TAEMySquadStatus MySquad = 4;
  if (has_mysquad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mysquad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemyReportBattleRsp)
  return target;
}

int TAdventureEnemyReportBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TAEEnemySquad EnemySquad = 2;
    if (has_enemysquad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemysquad());
    }

    // optional bool EnemyIsDead = 3;
    if (has_enemyisdead()) {
      total_size += 1 + 1;
    }

    // optional .pb.TAEMySquadStatus MySquad = 4;
    if (has_mysquad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mysquad());
    }

  }
  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemyReportBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemyReportBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemyReportBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemyReportBattleRsp::MergeFrom(const TAdventureEnemyReportBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_enemysquad()) {
      mutable_enemysquad()->::pb::TAEEnemySquad::MergeFrom(from.enemysquad());
    }
    if (from.has_enemyisdead()) {
      set_enemyisdead(from.enemyisdead());
    }
    if (from.has_mysquad()) {
      mutable_mysquad()->::pb::TAEMySquadStatus::MergeFrom(from.mysquad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemyReportBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemyReportBattleRsp::CopyFrom(const TAdventureEnemyReportBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemyReportBattleRsp::IsInitialized() const {

  return true;
}

void TAdventureEnemyReportBattleRsp::Swap(TAdventureEnemyReportBattleRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(enemysquad_, other->enemysquad_);
    std::swap(enemyisdead_, other->enemyisdead_);
    std::swap(mysquad_, other->mysquad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemyReportBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemyReportBattleRsp_descriptor_;
  metadata.reflection = TAdventureEnemyReportBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TNewAdventureEnemyNotify::kEnemyIdFieldNumber;
#endif  // !_MSC_VER

TNewAdventureEnemyNotify::TNewAdventureEnemyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TNewAdventureEnemyNotify)
}

void TNewAdventureEnemyNotify::InitAsDefaultInstance() {
}

TNewAdventureEnemyNotify::TNewAdventureEnemyNotify(const TNewAdventureEnemyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TNewAdventureEnemyNotify)
}

void TNewAdventureEnemyNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TNewAdventureEnemyNotify::~TNewAdventureEnemyNotify() {
  // @@protoc_insertion_point(destructor:pb.TNewAdventureEnemyNotify)
  SharedDtor();
}

void TNewAdventureEnemyNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TNewAdventureEnemyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TNewAdventureEnemyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TNewAdventureEnemyNotify_descriptor_;
}

const TNewAdventureEnemyNotify& TNewAdventureEnemyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TNewAdventureEnemyNotify* TNewAdventureEnemyNotify::default_instance_ = NULL;

TNewAdventureEnemyNotify* TNewAdventureEnemyNotify::New() const {
  return new TNewAdventureEnemyNotify;
}

void TNewAdventureEnemyNotify::Clear() {
  enemyid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TNewAdventureEnemyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TNewAdventureEnemyNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
         parse_EnemyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_enemyid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_enemyid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_EnemyId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TNewAdventureEnemyNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TNewAdventureEnemyNotify)
  return false;
#undef DO_
}

void TNewAdventureEnemyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TNewAdventureEnemyNotify)
  // repeated uint32 EnemyId = 1;
  for (int i = 0; i < this->enemyid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->enemyid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TNewAdventureEnemyNotify)
}

::google::protobuf::uint8* TNewAdventureEnemyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TNewAdventureEnemyNotify)
  // repeated uint32 EnemyId = 1;
  for (int i = 0; i < this->enemyid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->enemyid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TNewAdventureEnemyNotify)
  return target;
}

int TNewAdventureEnemyNotify::ByteSize() const {
  int total_size = 0;

  // repeated uint32 EnemyId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->enemyid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->enemyid(i));
    }
    total_size += 1 * this->enemyid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TNewAdventureEnemyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TNewAdventureEnemyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TNewAdventureEnemyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TNewAdventureEnemyNotify::MergeFrom(const TNewAdventureEnemyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemyid_.MergeFrom(from.enemyid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TNewAdventureEnemyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TNewAdventureEnemyNotify::CopyFrom(const TNewAdventureEnemyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TNewAdventureEnemyNotify::IsInitialized() const {

  return true;
}

void TNewAdventureEnemyNotify::Swap(TNewAdventureEnemyNotify* other) {
  if (other != this) {
    enemyid_.Swap(&other->enemyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TNewAdventureEnemyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TNewAdventureEnemyNotify_descriptor_;
  metadata.reflection = TNewAdventureEnemyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemyCancelBattleReq::kEnemyIdFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemyCancelBattleReq::TAdventureEnemyCancelBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemyCancelBattleReq)
}

void TAdventureEnemyCancelBattleReq::InitAsDefaultInstance() {
}

TAdventureEnemyCancelBattleReq::TAdventureEnemyCancelBattleReq(const TAdventureEnemyCancelBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemyCancelBattleReq)
}

void TAdventureEnemyCancelBattleReq::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemyCancelBattleReq::~TAdventureEnemyCancelBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemyCancelBattleReq)
  SharedDtor();
}

void TAdventureEnemyCancelBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemyCancelBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemyCancelBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemyCancelBattleReq_descriptor_;
}

const TAdventureEnemyCancelBattleReq& TAdventureEnemyCancelBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemyCancelBattleReq* TAdventureEnemyCancelBattleReq::default_instance_ = NULL;

TAdventureEnemyCancelBattleReq* TAdventureEnemyCancelBattleReq::New() const {
  return new TAdventureEnemyCancelBattleReq;
}

void TAdventureEnemyCancelBattleReq::Clear() {
  enemyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemyCancelBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemyCancelBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemyCancelBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemyCancelBattleReq)
  return false;
#undef DO_
}

void TAdventureEnemyCancelBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemyCancelBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemyCancelBattleReq)
}

::google::protobuf::uint8* TAdventureEnemyCancelBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemyCancelBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemyCancelBattleReq)
  return target;
}

int TAdventureEnemyCancelBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemyCancelBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemyCancelBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemyCancelBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemyCancelBattleReq::MergeFrom(const TAdventureEnemyCancelBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemyCancelBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemyCancelBattleReq::CopyFrom(const TAdventureEnemyCancelBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemyCancelBattleReq::IsInitialized() const {

  return true;
}

void TAdventureEnemyCancelBattleReq::Swap(TAdventureEnemyCancelBattleReq* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemyCancelBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemyCancelBattleReq_descriptor_;
  metadata.reflection = TAdventureEnemyCancelBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemySingleBattleRet::kEnemySquadFieldNumber;
const int TAdventureEnemySingleBattleRet::kEnemyIsDeadFieldNumber;
const int TAdventureEnemySingleBattleRet::kMySquadFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemySingleBattleRet::TAdventureEnemySingleBattleRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemySingleBattleRet)
}

void TAdventureEnemySingleBattleRet::InitAsDefaultInstance() {
  enemysquad_ = const_cast< ::pb::TAEEnemySquad*>(&::pb::TAEEnemySquad::default_instance());
  mysquad_ = const_cast< ::pb::TAEMySquadStatus*>(&::pb::TAEMySquadStatus::default_instance());
}

TAdventureEnemySingleBattleRet::TAdventureEnemySingleBattleRet(const TAdventureEnemySingleBattleRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemySingleBattleRet)
}

void TAdventureEnemySingleBattleRet::SharedCtor() {
  _cached_size_ = 0;
  enemysquad_ = NULL;
  enemyisdead_ = false;
  mysquad_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemySingleBattleRet::~TAdventureEnemySingleBattleRet() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemySingleBattleRet)
  SharedDtor();
}

void TAdventureEnemySingleBattleRet::SharedDtor() {
  if (this != default_instance_) {
    delete enemysquad_;
    delete mysquad_;
  }
}

void TAdventureEnemySingleBattleRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemySingleBattleRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemySingleBattleRet_descriptor_;
}

const TAdventureEnemySingleBattleRet& TAdventureEnemySingleBattleRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemySingleBattleRet* TAdventureEnemySingleBattleRet::default_instance_ = NULL;

TAdventureEnemySingleBattleRet* TAdventureEnemySingleBattleRet::New() const {
  return new TAdventureEnemySingleBattleRet;
}

void TAdventureEnemySingleBattleRet::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_enemysquad()) {
      if (enemysquad_ != NULL) enemysquad_->::pb::TAEEnemySquad::Clear();
    }
    enemyisdead_ = false;
    if (has_mysquad()) {
      if (mysquad_ != NULL) mysquad_->::pb::TAEMySquadStatus::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemySingleBattleRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemySingleBattleRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAEEnemySquad EnemySquad = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enemysquad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EnemyIsDead;
        break;
      }

      // optional bool EnemyIsDead = 3;
      case 3: {
        if (tag == 24) {
         parse_EnemyIsDead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enemyisdead_)));
          set_has_enemyisdead();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_MySquad;
        break;
      }

      // optional .pb.TAEMySquadStatus MySquad = 4;
      case 4: {
        if (tag == 34) {
         parse_MySquad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mysquad()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemySingleBattleRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemySingleBattleRet)
  return false;
#undef DO_
}

void TAdventureEnemySingleBattleRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemySingleBattleRet)
  // optional .pb.TAEEnemySquad EnemySquad = 2;
  if (has_enemysquad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->enemysquad(), output);
  }

  // optional bool EnemyIsDead = 3;
  if (has_enemyisdead()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enemyisdead(), output);
  }

  // optional .pb.TAEMySquadStatus MySquad = 4;
  if (has_mysquad()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mysquad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemySingleBattleRet)
}

::google::protobuf::uint8* TAdventureEnemySingleBattleRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemySingleBattleRet)
  // optional .pb.TAEEnemySquad EnemySquad = 2;
  if (has_enemysquad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->enemysquad(), target);
  }

  // optional bool EnemyIsDead = 3;
  if (has_enemyisdead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enemyisdead(), target);
  }

  // optional .pb.TAEMySquadStatus MySquad = 4;
  if (has_mysquad()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->mysquad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemySingleBattleRet)
  return target;
}

int TAdventureEnemySingleBattleRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAEEnemySquad EnemySquad = 2;
    if (has_enemysquad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enemysquad());
    }

    // optional bool EnemyIsDead = 3;
    if (has_enemyisdead()) {
      total_size += 1 + 1;
    }

    // optional .pb.TAEMySquadStatus MySquad = 4;
    if (has_mysquad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mysquad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemySingleBattleRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemySingleBattleRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemySingleBattleRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemySingleBattleRet::MergeFrom(const TAdventureEnemySingleBattleRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemysquad()) {
      mutable_enemysquad()->::pb::TAEEnemySquad::MergeFrom(from.enemysquad());
    }
    if (from.has_enemyisdead()) {
      set_enemyisdead(from.enemyisdead());
    }
    if (from.has_mysquad()) {
      mutable_mysquad()->::pb::TAEMySquadStatus::MergeFrom(from.mysquad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemySingleBattleRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemySingleBattleRet::CopyFrom(const TAdventureEnemySingleBattleRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemySingleBattleRet::IsInitialized() const {

  return true;
}

void TAdventureEnemySingleBattleRet::Swap(TAdventureEnemySingleBattleRet* other) {
  if (other != this) {
    std::swap(enemysquad_, other->enemysquad_);
    std::swap(enemyisdead_, other->enemyisdead_);
    std::swap(mysquad_, other->mysquad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemySingleBattleRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemySingleBattleRet_descriptor_;
  metadata.reflection = TAdventureEnemySingleBattleRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemySkipBattleReq::kEnemyIdFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemySkipBattleReq::TAdventureEnemySkipBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemySkipBattleReq)
}

void TAdventureEnemySkipBattleReq::InitAsDefaultInstance() {
}

TAdventureEnemySkipBattleReq::TAdventureEnemySkipBattleReq(const TAdventureEnemySkipBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemySkipBattleReq)
}

void TAdventureEnemySkipBattleReq::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemySkipBattleReq::~TAdventureEnemySkipBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemySkipBattleReq)
  SharedDtor();
}

void TAdventureEnemySkipBattleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemySkipBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemySkipBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemySkipBattleReq_descriptor_;
}

const TAdventureEnemySkipBattleReq& TAdventureEnemySkipBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemySkipBattleReq* TAdventureEnemySkipBattleReq::default_instance_ = NULL;

TAdventureEnemySkipBattleReq* TAdventureEnemySkipBattleReq::New() const {
  return new TAdventureEnemySkipBattleReq;
}

void TAdventureEnemySkipBattleReq::Clear() {
  enemyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemySkipBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemySkipBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemySkipBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemySkipBattleReq)
  return false;
#undef DO_
}

void TAdventureEnemySkipBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemySkipBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemySkipBattleReq)
}

::google::protobuf::uint8* TAdventureEnemySkipBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemySkipBattleReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemySkipBattleReq)
  return target;
}

int TAdventureEnemySkipBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemySkipBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemySkipBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemySkipBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemySkipBattleReq::MergeFrom(const TAdventureEnemySkipBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemySkipBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemySkipBattleReq::CopyFrom(const TAdventureEnemySkipBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemySkipBattleReq::IsInitialized() const {

  return true;
}

void TAdventureEnemySkipBattleReq::Swap(TAdventureEnemySkipBattleReq* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemySkipBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemySkipBattleReq_descriptor_;
  metadata.reflection = TAdventureEnemySkipBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemySkipBattleRsp::kRewardArrayFieldNumber;
const int TAdventureEnemySkipBattleRsp::kArrBattleRetFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemySkipBattleRsp::TAdventureEnemySkipBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemySkipBattleRsp)
}

void TAdventureEnemySkipBattleRsp::InitAsDefaultInstance() {
}

TAdventureEnemySkipBattleRsp::TAdventureEnemySkipBattleRsp(const TAdventureEnemySkipBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemySkipBattleRsp)
}

void TAdventureEnemySkipBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemySkipBattleRsp::~TAdventureEnemySkipBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemySkipBattleRsp)
  SharedDtor();
}

void TAdventureEnemySkipBattleRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemySkipBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemySkipBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemySkipBattleRsp_descriptor_;
}

const TAdventureEnemySkipBattleRsp& TAdventureEnemySkipBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemySkipBattleRsp* TAdventureEnemySkipBattleRsp::default_instance_ = NULL;

TAdventureEnemySkipBattleRsp* TAdventureEnemySkipBattleRsp::New() const {
  return new TAdventureEnemySkipBattleRsp;
}

void TAdventureEnemySkipBattleRsp::Clear() {
  rewardarray_.Clear();
  arrbattleret_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemySkipBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemySkipBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectTag(18)) goto parse_ArrBattleRet;
        break;
      }

      // repeated .pb.TAdventureEnemySingleBattleRet ArrBattleRet = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrBattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrbattleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrBattleRet;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemySkipBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemySkipBattleRsp)
  return false;
#undef DO_
}

void TAdventureEnemySkipBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemySkipBattleRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  // repeated .pb.TAdventureEnemySingleBattleRet ArrBattleRet = 2;
  for (int i = 0; i < this->arrbattleret_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrbattleret(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemySkipBattleRsp)
}

::google::protobuf::uint8* TAdventureEnemySkipBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemySkipBattleRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  // repeated .pb.TAdventureEnemySingleBattleRet ArrBattleRet = 2;
  for (int i = 0; i < this->arrbattleret_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrbattleret(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemySkipBattleRsp)
  return target;
}

int TAdventureEnemySkipBattleRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  // repeated .pb.TAdventureEnemySingleBattleRet ArrBattleRet = 2;
  total_size += 1 * this->arrbattleret_size();
  for (int i = 0; i < this->arrbattleret_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrbattleret(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemySkipBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemySkipBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemySkipBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemySkipBattleRsp::MergeFrom(const TAdventureEnemySkipBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  arrbattleret_.MergeFrom(from.arrbattleret_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemySkipBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemySkipBattleRsp::CopyFrom(const TAdventureEnemySkipBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemySkipBattleRsp::IsInitialized() const {

  return true;
}

void TAdventureEnemySkipBattleRsp::Swap(TAdventureEnemySkipBattleRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    arrbattleret_.Swap(&other->arrbattleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemySkipBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemySkipBattleRsp_descriptor_;
  metadata.reflection = TAdventureEnemySkipBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemyGetAcheivementInfoRsp::kDefeatEnemyNumFieldNumber;
const int TAdventureEnemyGetAcheivementInfoRsp::kRewardIdArrFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemyGetAcheivementInfoRsp::TAdventureEnemyGetAcheivementInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemyGetAcheivementInfoRsp)
}

void TAdventureEnemyGetAcheivementInfoRsp::InitAsDefaultInstance() {
}

TAdventureEnemyGetAcheivementInfoRsp::TAdventureEnemyGetAcheivementInfoRsp(const TAdventureEnemyGetAcheivementInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemyGetAcheivementInfoRsp)
}

void TAdventureEnemyGetAcheivementInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  defeatenemynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemyGetAcheivementInfoRsp::~TAdventureEnemyGetAcheivementInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemyGetAcheivementInfoRsp)
  SharedDtor();
}

void TAdventureEnemyGetAcheivementInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemyGetAcheivementInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemyGetAcheivementInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemyGetAcheivementInfoRsp_descriptor_;
}

const TAdventureEnemyGetAcheivementInfoRsp& TAdventureEnemyGetAcheivementInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemyGetAcheivementInfoRsp* TAdventureEnemyGetAcheivementInfoRsp::default_instance_ = NULL;

TAdventureEnemyGetAcheivementInfoRsp* TAdventureEnemyGetAcheivementInfoRsp::New() const {
  return new TAdventureEnemyGetAcheivementInfoRsp;
}

void TAdventureEnemyGetAcheivementInfoRsp::Clear() {
  defeatenemynum_ = 0u;
  rewardidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemyGetAcheivementInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemyGetAcheivementInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DefeatEnemyNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defeatenemynum_)));
          set_has_defeatenemynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardIdArr;
        break;
      }

      // repeated uint32 RewardIdArr = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_rewardidarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemyGetAcheivementInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemyGetAcheivementInfoRsp)
  return false;
#undef DO_
}

void TAdventureEnemyGetAcheivementInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemyGetAcheivementInfoRsp)
  // optional uint32 DefeatEnemyNum = 1;
  if (has_defeatenemynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->defeatenemynum(), output);
  }

  // repeated uint32 RewardIdArr = 2;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->rewardidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemyGetAcheivementInfoRsp)
}

::google::protobuf::uint8* TAdventureEnemyGetAcheivementInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemyGetAcheivementInfoRsp)
  // optional uint32 DefeatEnemyNum = 1;
  if (has_defeatenemynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->defeatenemynum(), target);
  }

  // repeated uint32 RewardIdArr = 2;
  for (int i = 0; i < this->rewardidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->rewardidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemyGetAcheivementInfoRsp)
  return target;
}

int TAdventureEnemyGetAcheivementInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DefeatEnemyNum = 1;
    if (has_defeatenemynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defeatenemynum());
    }

  }
  // repeated uint32 RewardIdArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardidarr(i));
    }
    total_size += 1 * this->rewardidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemyGetAcheivementInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemyGetAcheivementInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemyGetAcheivementInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemyGetAcheivementInfoRsp::MergeFrom(const TAdventureEnemyGetAcheivementInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardidarr_.MergeFrom(from.rewardidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_defeatenemynum()) {
      set_defeatenemynum(from.defeatenemynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemyGetAcheivementInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemyGetAcheivementInfoRsp::CopyFrom(const TAdventureEnemyGetAcheivementInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemyGetAcheivementInfoRsp::IsInitialized() const {

  return true;
}

void TAdventureEnemyGetAcheivementInfoRsp::Swap(TAdventureEnemyGetAcheivementInfoRsp* other) {
  if (other != this) {
    std::swap(defeatenemynum_, other->defeatenemynum_);
    rewardidarr_.Swap(&other->rewardidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemyGetAcheivementInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemyGetAcheivementInfoRsp_descriptor_;
  metadata.reflection = TAdventureEnemyGetAcheivementInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemyReceiveAchievementRewardReq::kRewardIdFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemyReceiveAchievementRewardReq::TAdventureEnemyReceiveAchievementRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemyReceiveAchievementRewardReq)
}

void TAdventureEnemyReceiveAchievementRewardReq::InitAsDefaultInstance() {
}

TAdventureEnemyReceiveAchievementRewardReq::TAdventureEnemyReceiveAchievementRewardReq(const TAdventureEnemyReceiveAchievementRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemyReceiveAchievementRewardReq)
}

void TAdventureEnemyReceiveAchievementRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemyReceiveAchievementRewardReq::~TAdventureEnemyReceiveAchievementRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemyReceiveAchievementRewardReq)
  SharedDtor();
}

void TAdventureEnemyReceiveAchievementRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemyReceiveAchievementRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemyReceiveAchievementRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemyReceiveAchievementRewardReq_descriptor_;
}

const TAdventureEnemyReceiveAchievementRewardReq& TAdventureEnemyReceiveAchievementRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemyReceiveAchievementRewardReq* TAdventureEnemyReceiveAchievementRewardReq::default_instance_ = NULL;

TAdventureEnemyReceiveAchievementRewardReq* TAdventureEnemyReceiveAchievementRewardReq::New() const {
  return new TAdventureEnemyReceiveAchievementRewardReq;
}

void TAdventureEnemyReceiveAchievementRewardReq::Clear() {
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemyReceiveAchievementRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemyReceiveAchievementRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemyReceiveAchievementRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemyReceiveAchievementRewardReq)
  return false;
#undef DO_
}

void TAdventureEnemyReceiveAchievementRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemyReceiveAchievementRewardReq)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemyReceiveAchievementRewardReq)
}

::google::protobuf::uint8* TAdventureEnemyReceiveAchievementRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemyReceiveAchievementRewardReq)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemyReceiveAchievementRewardReq)
  return target;
}

int TAdventureEnemyReceiveAchievementRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardId = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemyReceiveAchievementRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemyReceiveAchievementRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemyReceiveAchievementRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemyReceiveAchievementRewardReq::MergeFrom(const TAdventureEnemyReceiveAchievementRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemyReceiveAchievementRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemyReceiveAchievementRewardReq::CopyFrom(const TAdventureEnemyReceiveAchievementRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemyReceiveAchievementRewardReq::IsInitialized() const {

  return true;
}

void TAdventureEnemyReceiveAchievementRewardReq::Swap(TAdventureEnemyReceiveAchievementRewardReq* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemyReceiveAchievementRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemyReceiveAchievementRewardReq_descriptor_;
  metadata.reflection = TAdventureEnemyReceiveAchievementRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemySetPresetSquadReq::kSquadIndexFieldNumber;
const int TAdventureEnemySetPresetSquadReq::kSquadHeroArrFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemySetPresetSquadReq::TAdventureEnemySetPresetSquadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemySetPresetSquadReq)
}

void TAdventureEnemySetPresetSquadReq::InitAsDefaultInstance() {
}

TAdventureEnemySetPresetSquadReq::TAdventureEnemySetPresetSquadReq(const TAdventureEnemySetPresetSquadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemySetPresetSquadReq)
}

void TAdventureEnemySetPresetSquadReq::SharedCtor() {
  _cached_size_ = 0;
  squadindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemySetPresetSquadReq::~TAdventureEnemySetPresetSquadReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemySetPresetSquadReq)
  SharedDtor();
}

void TAdventureEnemySetPresetSquadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemySetPresetSquadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemySetPresetSquadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemySetPresetSquadReq_descriptor_;
}

const TAdventureEnemySetPresetSquadReq& TAdventureEnemySetPresetSquadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemySetPresetSquadReq* TAdventureEnemySetPresetSquadReq::default_instance_ = NULL;

TAdventureEnemySetPresetSquadReq* TAdventureEnemySetPresetSquadReq::New() const {
  return new TAdventureEnemySetPresetSquadReq;
}

void TAdventureEnemySetPresetSquadReq::Clear() {
  squadindex_ = 0u;
  squadheroarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemySetPresetSquadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemySetPresetSquadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SquadIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squadindex_)));
          set_has_squadindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SquadHeroArr;
        break;
      }

      // repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
      case 2: {
        if (tag == 18) {
         parse_SquadHeroArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_squadheroarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SquadHeroArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemySetPresetSquadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemySetPresetSquadReq)
  return false;
#undef DO_
}

void TAdventureEnemySetPresetSquadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemySetPresetSquadReq)
  // optional uint32 SquadIndex = 1;
  if (has_squadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->squadindex(), output);
  }

  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->squadheroarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemySetPresetSquadReq)
}

::google::protobuf::uint8* TAdventureEnemySetPresetSquadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemySetPresetSquadReq)
  // optional uint32 SquadIndex = 1;
  if (has_squadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->squadindex(), target);
  }

  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->squadheroarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemySetPresetSquadReq)
  return target;
}

int TAdventureEnemySetPresetSquadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SquadIndex = 1;
    if (has_squadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squadindex());
    }

  }
  // repeated .pb.TAESquadHeroInfo SquadHeroArr = 2;
  total_size += 1 * this->squadheroarr_size();
  for (int i = 0; i < this->squadheroarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->squadheroarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemySetPresetSquadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemySetPresetSquadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemySetPresetSquadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemySetPresetSquadReq::MergeFrom(const TAdventureEnemySetPresetSquadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  squadheroarr_.MergeFrom(from.squadheroarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_squadindex()) {
      set_squadindex(from.squadindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemySetPresetSquadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemySetPresetSquadReq::CopyFrom(const TAdventureEnemySetPresetSquadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemySetPresetSquadReq::IsInitialized() const {

  return true;
}

void TAdventureEnemySetPresetSquadReq::Swap(TAdventureEnemySetPresetSquadReq* other) {
  if (other != this) {
    std::swap(squadindex_, other->squadindex_);
    squadheroarr_.Swap(&other->squadheroarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemySetPresetSquadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemySetPresetSquadReq_descriptor_;
  metadata.reflection = TAdventureEnemySetPresetSquadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemySwitchPresetSquadReq::kSquadIndexFieldNumber;
const int TAdventureEnemySwitchPresetSquadReq::kSwitchToSquadIndexFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemySwitchPresetSquadReq::TAdventureEnemySwitchPresetSquadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemySwitchPresetSquadReq)
}

void TAdventureEnemySwitchPresetSquadReq::InitAsDefaultInstance() {
}

TAdventureEnemySwitchPresetSquadReq::TAdventureEnemySwitchPresetSquadReq(const TAdventureEnemySwitchPresetSquadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemySwitchPresetSquadReq)
}

void TAdventureEnemySwitchPresetSquadReq::SharedCtor() {
  _cached_size_ = 0;
  squadindex_ = 0u;
  switchtosquadindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemySwitchPresetSquadReq::~TAdventureEnemySwitchPresetSquadReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemySwitchPresetSquadReq)
  SharedDtor();
}

void TAdventureEnemySwitchPresetSquadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemySwitchPresetSquadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemySwitchPresetSquadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemySwitchPresetSquadReq_descriptor_;
}

const TAdventureEnemySwitchPresetSquadReq& TAdventureEnemySwitchPresetSquadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemySwitchPresetSquadReq* TAdventureEnemySwitchPresetSquadReq::default_instance_ = NULL;

TAdventureEnemySwitchPresetSquadReq* TAdventureEnemySwitchPresetSquadReq::New() const {
  return new TAdventureEnemySwitchPresetSquadReq;
}

void TAdventureEnemySwitchPresetSquadReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureEnemySwitchPresetSquadReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(squadindex_, switchtosquadindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemySwitchPresetSquadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemySwitchPresetSquadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 SquadIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squadindex_)));
          set_has_squadindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_SwitchToSquadIndex;
        break;
      }

      // optional uint32 SwitchToSquadIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_SwitchToSquadIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &switchtosquadindex_)));
          set_has_switchtosquadindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemySwitchPresetSquadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemySwitchPresetSquadReq)
  return false;
#undef DO_
}

void TAdventureEnemySwitchPresetSquadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemySwitchPresetSquadReq)
  // optional uint32 SquadIndex = 1;
  if (has_squadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->squadindex(), output);
  }

  // optional uint32 SwitchToSquadIndex = 2;
  if (has_switchtosquadindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->switchtosquadindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemySwitchPresetSquadReq)
}

::google::protobuf::uint8* TAdventureEnemySwitchPresetSquadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemySwitchPresetSquadReq)
  // optional uint32 SquadIndex = 1;
  if (has_squadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->squadindex(), target);
  }

  // optional uint32 SwitchToSquadIndex = 2;
  if (has_switchtosquadindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->switchtosquadindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemySwitchPresetSquadReq)
  return target;
}

int TAdventureEnemySwitchPresetSquadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 SquadIndex = 1;
    if (has_squadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squadindex());
    }

    // optional uint32 SwitchToSquadIndex = 2;
    if (has_switchtosquadindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->switchtosquadindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemySwitchPresetSquadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemySwitchPresetSquadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemySwitchPresetSquadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemySwitchPresetSquadReq::MergeFrom(const TAdventureEnemySwitchPresetSquadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_squadindex()) {
      set_squadindex(from.squadindex());
    }
    if (from.has_switchtosquadindex()) {
      set_switchtosquadindex(from.switchtosquadindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemySwitchPresetSquadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemySwitchPresetSquadReq::CopyFrom(const TAdventureEnemySwitchPresetSquadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemySwitchPresetSquadReq::IsInitialized() const {

  return true;
}

void TAdventureEnemySwitchPresetSquadReq::Swap(TAdventureEnemySwitchPresetSquadReq* other) {
  if (other != this) {
    std::swap(squadindex_, other->squadindex_);
    std::swap(switchtosquadindex_, other->switchtosquadindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemySwitchPresetSquadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemySwitchPresetSquadReq_descriptor_;
  metadata.reflection = TAdventureEnemySwitchPresetSquadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEnemyUsePresetSquadReq::kEnemyIdFieldNumber;
#endif  // !_MSC_VER

TAdventureEnemyUsePresetSquadReq::TAdventureEnemyUsePresetSquadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEnemyUsePresetSquadReq)
}

void TAdventureEnemyUsePresetSquadReq::InitAsDefaultInstance() {
}

TAdventureEnemyUsePresetSquadReq::TAdventureEnemyUsePresetSquadReq(const TAdventureEnemyUsePresetSquadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEnemyUsePresetSquadReq)
}

void TAdventureEnemyUsePresetSquadReq::SharedCtor() {
  _cached_size_ = 0;
  enemyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEnemyUsePresetSquadReq::~TAdventureEnemyUsePresetSquadReq() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEnemyUsePresetSquadReq)
  SharedDtor();
}

void TAdventureEnemyUsePresetSquadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureEnemyUsePresetSquadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEnemyUsePresetSquadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEnemyUsePresetSquadReq_descriptor_;
}

const TAdventureEnemyUsePresetSquadReq& TAdventureEnemyUsePresetSquadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureEnemy_2eproto();
  return *default_instance_;
}

TAdventureEnemyUsePresetSquadReq* TAdventureEnemyUsePresetSquadReq::default_instance_ = NULL;

TAdventureEnemyUsePresetSquadReq* TAdventureEnemyUsePresetSquadReq::New() const {
  return new TAdventureEnemyUsePresetSquadReq;
}

void TAdventureEnemyUsePresetSquadReq::Clear() {
  enemyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEnemyUsePresetSquadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEnemyUsePresetSquadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EnemyId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &enemyid_)));
          set_has_enemyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEnemyUsePresetSquadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEnemyUsePresetSquadReq)
  return false;
#undef DO_
}

void TAdventureEnemyUsePresetSquadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEnemyUsePresetSquadReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->enemyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEnemyUsePresetSquadReq)
}

::google::protobuf::uint8* TAdventureEnemyUsePresetSquadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEnemyUsePresetSquadReq)
  // optional uint32 EnemyId = 1;
  if (has_enemyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->enemyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEnemyUsePresetSquadReq)
  return target;
}

int TAdventureEnemyUsePresetSquadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EnemyId = 1;
    if (has_enemyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->enemyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEnemyUsePresetSquadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEnemyUsePresetSquadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEnemyUsePresetSquadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEnemyUsePresetSquadReq::MergeFrom(const TAdventureEnemyUsePresetSquadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enemyid()) {
      set_enemyid(from.enemyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEnemyUsePresetSquadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEnemyUsePresetSquadReq::CopyFrom(const TAdventureEnemyUsePresetSquadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEnemyUsePresetSquadReq::IsInitialized() const {

  return true;
}

void TAdventureEnemyUsePresetSquadReq::Swap(TAdventureEnemyUsePresetSquadReq* other) {
  if (other != this) {
    std::swap(enemyid_, other->enemyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEnemyUsePresetSquadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEnemyUsePresetSquadReq_descriptor_;
  metadata.reflection = TAdventureEnemyUsePresetSquadReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
