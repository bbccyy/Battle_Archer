// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/KafkaDefine.proto

#ifndef PROTOBUF_module_2fKafkaDefine_2eproto__INCLUDED
#define PROTOBUF_module_2fKafkaDefine_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fKafkaDefine_2eproto();
void protobuf_AssignDesc_module_2fKafkaDefine_2eproto();
void protobuf_ShutdownFile_module_2fKafkaDefine_2eproto();

class TKafkaChangeCell;
class TKafkaMessage;
class TKafkaWholeMessage;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TKafkaChangeCell</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/KafkaDefine.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TKafkaChangeCell : public ::google::protobuf::Message {
 public:
  TKafkaChangeCell();
  virtual ~TKafkaChangeCell();

  TKafkaChangeCell(const TKafkaChangeCell& from);

  inline TKafkaChangeCell& operator=(const TKafkaChangeCell& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TKafkaChangeCell& default_instance();

  void Swap(TKafkaChangeCell* other);

  // implements Message ----------------------------------------------

  TKafkaChangeCell* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TKafkaChangeCell& from);
  void MergeFrom(const TKafkaChangeCell& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TKafkaChangeCell</name>
  	<Function>
  		<name>key</name>
  		<replaceName>Key</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_key</name>
  		<replaceName>Key</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_key</name>
  		<replaceName>Key</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes Value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TKafkaChangeCell</name>
  	<Function>
  		<name>value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:pb.TKafkaChangeCell)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_module_2fKafkaDefine_2eproto();
  friend void protobuf_AssignDesc_module_2fKafkaDefine_2eproto();
  friend void protobuf_ShutdownFile_module_2fKafkaDefine_2eproto();

  void InitAsDefaultInstance();
  static TKafkaChangeCell* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TKafkaMessage</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/KafkaDefine.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TKafkaMessage : public ::google::protobuf::Message {
 public:
  TKafkaMessage();
  virtual ~TKafkaMessage();

  TKafkaMessage(const TKafkaMessage& from);

  inline TKafkaMessage& operator=(const TKafkaMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TKafkaMessage& default_instance();

  void Swap(TKafkaMessage* other);

  // implements Message ----------------------------------------------

  TKafkaMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TKafkaMessage& from);
  void MergeFrom(const TKafkaMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string TableName = 1;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTableNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TKafkaMessage</name>
  	<Function>
  		<name>tablename</name>
  		<replaceName>TableName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tablename</name>
  		<replaceName>TableName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tablename</name>
  		<replaceName>TableName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional string TableKey = 2;
  inline bool has_tablekey() const;
  inline void clear_tablekey();
  static const int kTableKeyFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TKafkaMessage</name>
  	<Function>
  		<name>tablekey</name>
  		<replaceName>TableKey</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tablekey</name>
  		<replaceName>TableKey</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tablekey</name>
  		<replaceName>TableKey</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& tablekey() const;
  inline void set_tablekey(const ::std::string& value);
  inline void set_tablekey(const char* value);
  inline void set_tablekey(const char* value, size_t size);
  inline ::std::string* mutable_tablekey();
  inline ::std::string* release_tablekey();
  inline void set_allocated_tablekey(::std::string* tablekey);

  // repeated .pb.TKafkaChangeCell ChangeArr = 3;
  inline int changearr_size() const;
  inline void clear_changearr();
  static const int kChangeArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TKafkaMessage</name>
  	<Function>
  		<name>changearr</name>
  		<replaceName>ChangeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_changearr</name>
  		<replaceName>ChangeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_changearr</name>
  		<replaceName>ChangeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_changearr</name>
  		<replaceName>ChangeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>changearr_size</name>
  		<replaceName>ChangeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TKafkaChangeCell& changearr(int index) const;
  inline ::pb::TKafkaChangeCell* mutable_changearr(int index);
  inline ::pb::TKafkaChangeCell* add_changearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TKafkaChangeCell >&
      changearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TKafkaChangeCell >*
      mutable_changearr();

  // optional int64 Timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TKafkaMessage</name>
  	<Function>
  		<name>timestamp</name>
  		<replaceName>Timestamp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_timestamp</name>
  		<replaceName>Timestamp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_timestamp</name>
  		<replaceName>Timestamp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional bool IsDeleted = 5;
  inline bool has_isdeleted() const;
  inline void clear_isdeleted();
  static const int kIsDeletedFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TKafkaMessage</name>
  	<Function>
  		<name>isdeleted</name>
  		<replaceName>IsDeleted</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isdeleted</name>
  		<replaceName>IsDeleted</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isdeleted</name>
  		<replaceName>IsDeleted</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isdeleted() const;
  inline void set_isdeleted(bool value);

  // optional string RowKey = 6;
  inline bool has_rowkey() const;
  inline void clear_rowkey();
  static const int kRowKeyFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TKafkaMessage</name>
  	<Function>
  		<name>rowkey</name>
  		<replaceName>RowKey</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rowkey</name>
  		<replaceName>RowKey</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rowkey</name>
  		<replaceName>RowKey</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& rowkey() const;
  inline void set_rowkey(const ::std::string& value);
  inline void set_rowkey(const char* value);
  inline void set_rowkey(const char* value, size_t size);
  inline ::std::string* mutable_rowkey();
  inline ::std::string* release_rowkey();
  inline void set_allocated_rowkey(::std::string* rowkey);

  // @@protoc_insertion_point(class_scope:pb.TKafkaMessage)
 private:
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_tablekey();
  inline void clear_has_tablekey();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_isdeleted();
  inline void clear_has_isdeleted();
  inline void set_has_rowkey();
  inline void clear_has_rowkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tablename_;
  ::std::string* tablekey_;
  ::google::protobuf::RepeatedPtrField< ::pb::TKafkaChangeCell > changearr_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* rowkey_;
  bool isdeleted_;
  friend void  protobuf_AddDesc_module_2fKafkaDefine_2eproto();
  friend void protobuf_AssignDesc_module_2fKafkaDefine_2eproto();
  friend void protobuf_ShutdownFile_module_2fKafkaDefine_2eproto();

  void InitAsDefaultInstance();
  static TKafkaMessage* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TKafkaWholeMessage</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/KafkaDefine.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TKafkaWholeMessage : public ::google::protobuf::Message {
 public:
  TKafkaWholeMessage();
  virtual ~TKafkaWholeMessage();

  TKafkaWholeMessage(const TKafkaWholeMessage& from);

  inline TKafkaWholeMessage& operator=(const TKafkaWholeMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TKafkaWholeMessage& default_instance();

  void Swap(TKafkaWholeMessage* other);

  // implements Message ----------------------------------------------

  TKafkaWholeMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TKafkaWholeMessage& from);
  void MergeFrom(const TKafkaWholeMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string TableName = 1;
  inline bool has_tablename() const;
  inline void clear_tablename();
  static const int kTableNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TKafkaWholeMessage</name>
  	<Function>
  		<name>tablename</name>
  		<replaceName>TableName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tablename</name>
  		<replaceName>TableName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tablename</name>
  		<replaceName>TableName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& tablename() const;
  inline void set_tablename(const ::std::string& value);
  inline void set_tablename(const char* value);
  inline void set_tablename(const char* value, size_t size);
  inline ::std::string* mutable_tablename();
  inline ::std::string* release_tablename();
  inline void set_allocated_tablename(::std::string* tablename);

  // optional string TableKey = 2;
  inline bool has_tablekey() const;
  inline void clear_tablekey();
  static const int kTableKeyFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TKafkaWholeMessage</name>
  	<Function>
  		<name>tablekey</name>
  		<replaceName>TableKey</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tablekey</name>
  		<replaceName>TableKey</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tablekey</name>
  		<replaceName>TableKey</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& tablekey() const;
  inline void set_tablekey(const ::std::string& value);
  inline void set_tablekey(const char* value);
  inline void set_tablekey(const char* value, size_t size);
  inline ::std::string* mutable_tablekey();
  inline ::std::string* release_tablekey();
  inline void set_allocated_tablekey(::std::string* tablekey);

  // optional bytes Value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TKafkaWholeMessage</name>
  	<Function>
  		<name>value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // optional int64 Timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TKafkaWholeMessage</name>
  	<Function>
  		<name>timestamp</name>
  		<replaceName>Timestamp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_timestamp</name>
  		<replaceName>Timestamp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_timestamp</name>
  		<replaceName>Timestamp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional bool IsDeleted = 5;
  inline bool has_isdeleted() const;
  inline void clear_isdeleted();
  static const int kIsDeletedFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TKafkaWholeMessage</name>
  	<Function>
  		<name>isdeleted</name>
  		<replaceName>IsDeleted</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isdeleted</name>
  		<replaceName>IsDeleted</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isdeleted</name>
  		<replaceName>IsDeleted</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isdeleted() const;
  inline void set_isdeleted(bool value);

  // optional string RowKey = 6;
  inline bool has_rowkey() const;
  inline void clear_rowkey();
  static const int kRowKeyFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TKafkaWholeMessage</name>
  	<Function>
  		<name>rowkey</name>
  		<replaceName>RowKey</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rowkey</name>
  		<replaceName>RowKey</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rowkey</name>
  		<replaceName>RowKey</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& rowkey() const;
  inline void set_rowkey(const ::std::string& value);
  inline void set_rowkey(const char* value);
  inline void set_rowkey(const char* value, size_t size);
  inline ::std::string* mutable_rowkey();
  inline ::std::string* release_rowkey();
  inline void set_allocated_rowkey(::std::string* rowkey);

  // @@protoc_insertion_point(class_scope:pb.TKafkaWholeMessage)
 private:
  inline void set_has_tablename();
  inline void clear_has_tablename();
  inline void set_has_tablekey();
  inline void clear_has_tablekey();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_isdeleted();
  inline void clear_has_isdeleted();
  inline void set_has_rowkey();
  inline void clear_has_rowkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* tablename_;
  ::std::string* tablekey_;
  ::std::string* value_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* rowkey_;
  bool isdeleted_;
  friend void  protobuf_AddDesc_module_2fKafkaDefine_2eproto();
  friend void protobuf_AssignDesc_module_2fKafkaDefine_2eproto();
  friend void protobuf_ShutdownFile_module_2fKafkaDefine_2eproto();

  void InitAsDefaultInstance();
  static TKafkaWholeMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// TKafkaChangeCell

// optional string Key = 1;
inline bool TKafkaChangeCell::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TKafkaChangeCell::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TKafkaChangeCell::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TKafkaChangeCell::clear_key() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& TKafkaChangeCell::key() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaChangeCell.Key)
  return *key_;
}
inline void TKafkaChangeCell::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TKafkaChangeCell.Key)
}
inline void TKafkaChangeCell::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TKafkaChangeCell.Key)
}
inline void TKafkaChangeCell::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TKafkaChangeCell.Key)
}
inline ::std::string* TKafkaChangeCell::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TKafkaChangeCell.Key)
  return key_;
}
inline ::std::string* TKafkaChangeCell::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TKafkaChangeCell::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TKafkaChangeCell.Key)
}

// optional bytes Value = 2;
inline bool TKafkaChangeCell::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TKafkaChangeCell::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TKafkaChangeCell::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TKafkaChangeCell::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& TKafkaChangeCell::value() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaChangeCell.Value)
  return *value_;
}
inline void TKafkaChangeCell::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TKafkaChangeCell.Value)
}
inline void TKafkaChangeCell::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TKafkaChangeCell.Value)
}
inline void TKafkaChangeCell::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TKafkaChangeCell.Value)
}
inline ::std::string* TKafkaChangeCell::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TKafkaChangeCell.Value)
  return value_;
}
inline ::std::string* TKafkaChangeCell::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TKafkaChangeCell::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TKafkaChangeCell.Value)
}

// -------------------------------------------------------------------

// TKafkaMessage

// optional string TableName = 1;
inline bool TKafkaMessage::has_tablename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TKafkaMessage::set_has_tablename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TKafkaMessage::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TKafkaMessage::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& TKafkaMessage::tablename() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaMessage.TableName)
  return *tablename_;
}
inline void TKafkaMessage::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TKafkaMessage.TableName)
}
inline void TKafkaMessage::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TKafkaMessage.TableName)
}
inline void TKafkaMessage::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TKafkaMessage.TableName)
}
inline ::std::string* TKafkaMessage::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TKafkaMessage.TableName)
  return tablename_;
}
inline ::std::string* TKafkaMessage::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TKafkaMessage::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TKafkaMessage.TableName)
}

// optional string TableKey = 2;
inline bool TKafkaMessage::has_tablekey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TKafkaMessage::set_has_tablekey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TKafkaMessage::clear_has_tablekey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TKafkaMessage::clear_tablekey() {
  if (tablekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablekey_->clear();
  }
  clear_has_tablekey();
}
inline const ::std::string& TKafkaMessage::tablekey() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaMessage.TableKey)
  return *tablekey_;
}
inline void TKafkaMessage::set_tablekey(const ::std::string& value) {
  set_has_tablekey();
  if (tablekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablekey_ = new ::std::string;
  }
  tablekey_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TKafkaMessage.TableKey)
}
inline void TKafkaMessage::set_tablekey(const char* value) {
  set_has_tablekey();
  if (tablekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablekey_ = new ::std::string;
  }
  tablekey_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TKafkaMessage.TableKey)
}
inline void TKafkaMessage::set_tablekey(const char* value, size_t size) {
  set_has_tablekey();
  if (tablekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablekey_ = new ::std::string;
  }
  tablekey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TKafkaMessage.TableKey)
}
inline ::std::string* TKafkaMessage::mutable_tablekey() {
  set_has_tablekey();
  if (tablekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablekey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TKafkaMessage.TableKey)
  return tablekey_;
}
inline ::std::string* TKafkaMessage::release_tablekey() {
  clear_has_tablekey();
  if (tablekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablekey_;
    tablekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TKafkaMessage::set_allocated_tablekey(::std::string* tablekey) {
  if (tablekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablekey_;
  }
  if (tablekey) {
    set_has_tablekey();
    tablekey_ = tablekey;
  } else {
    clear_has_tablekey();
    tablekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TKafkaMessage.TableKey)
}

// repeated .pb.TKafkaChangeCell ChangeArr = 3;
inline int TKafkaMessage::changearr_size() const {
  return changearr_.size();
}
inline void TKafkaMessage::clear_changearr() {
  changearr_.Clear();
}
inline const ::pb::TKafkaChangeCell& TKafkaMessage::changearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TKafkaMessage.ChangeArr)
  return changearr_.Get(index);
}
inline ::pb::TKafkaChangeCell* TKafkaMessage::mutable_changearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TKafkaMessage.ChangeArr)
  return changearr_.Mutable(index);
}
inline ::pb::TKafkaChangeCell* TKafkaMessage::add_changearr() {
  // @@protoc_insertion_point(field_add:pb.TKafkaMessage.ChangeArr)
  return changearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TKafkaChangeCell >&
TKafkaMessage::changearr() const {
  // @@protoc_insertion_point(field_list:pb.TKafkaMessage.ChangeArr)
  return changearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TKafkaChangeCell >*
TKafkaMessage::mutable_changearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TKafkaMessage.ChangeArr)
  return &changearr_;
}

// optional int64 Timestamp = 4;
inline bool TKafkaMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TKafkaMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TKafkaMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TKafkaMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 TKafkaMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaMessage.Timestamp)
  return timestamp_;
}
inline void TKafkaMessage::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.TKafkaMessage.Timestamp)
}

// optional bool IsDeleted = 5;
inline bool TKafkaMessage::has_isdeleted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TKafkaMessage::set_has_isdeleted() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TKafkaMessage::clear_has_isdeleted() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TKafkaMessage::clear_isdeleted() {
  isdeleted_ = false;
  clear_has_isdeleted();
}
inline bool TKafkaMessage::isdeleted() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaMessage.IsDeleted)
  return isdeleted_;
}
inline void TKafkaMessage::set_isdeleted(bool value) {
  set_has_isdeleted();
  isdeleted_ = value;
  // @@protoc_insertion_point(field_set:pb.TKafkaMessage.IsDeleted)
}

// optional string RowKey = 6;
inline bool TKafkaMessage::has_rowkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TKafkaMessage::set_has_rowkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TKafkaMessage::clear_has_rowkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TKafkaMessage::clear_rowkey() {
  if (rowkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rowkey_->clear();
  }
  clear_has_rowkey();
}
inline const ::std::string& TKafkaMessage::rowkey() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaMessage.RowKey)
  return *rowkey_;
}
inline void TKafkaMessage::set_rowkey(const ::std::string& value) {
  set_has_rowkey();
  if (rowkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rowkey_ = new ::std::string;
  }
  rowkey_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TKafkaMessage.RowKey)
}
inline void TKafkaMessage::set_rowkey(const char* value) {
  set_has_rowkey();
  if (rowkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rowkey_ = new ::std::string;
  }
  rowkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TKafkaMessage.RowKey)
}
inline void TKafkaMessage::set_rowkey(const char* value, size_t size) {
  set_has_rowkey();
  if (rowkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rowkey_ = new ::std::string;
  }
  rowkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TKafkaMessage.RowKey)
}
inline ::std::string* TKafkaMessage::mutable_rowkey() {
  set_has_rowkey();
  if (rowkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rowkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TKafkaMessage.RowKey)
  return rowkey_;
}
inline ::std::string* TKafkaMessage::release_rowkey() {
  clear_has_rowkey();
  if (rowkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rowkey_;
    rowkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TKafkaMessage::set_allocated_rowkey(::std::string* rowkey) {
  if (rowkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rowkey_;
  }
  if (rowkey) {
    set_has_rowkey();
    rowkey_ = rowkey;
  } else {
    clear_has_rowkey();
    rowkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TKafkaMessage.RowKey)
}

// -------------------------------------------------------------------

// TKafkaWholeMessage

// optional string TableName = 1;
inline bool TKafkaWholeMessage::has_tablename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TKafkaWholeMessage::set_has_tablename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TKafkaWholeMessage::clear_has_tablename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TKafkaWholeMessage::clear_tablename() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_->clear();
  }
  clear_has_tablename();
}
inline const ::std::string& TKafkaWholeMessage::tablename() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaWholeMessage.TableName)
  return *tablename_;
}
inline void TKafkaWholeMessage::set_tablename(const ::std::string& value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TKafkaWholeMessage.TableName)
}
inline void TKafkaWholeMessage::set_tablename(const char* value) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TKafkaWholeMessage.TableName)
}
inline void TKafkaWholeMessage::set_tablename(const char* value, size_t size) {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  tablename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TKafkaWholeMessage.TableName)
}
inline ::std::string* TKafkaWholeMessage::mutable_tablename() {
  set_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TKafkaWholeMessage.TableName)
  return tablename_;
}
inline ::std::string* TKafkaWholeMessage::release_tablename() {
  clear_has_tablename();
  if (tablename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablename_;
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TKafkaWholeMessage::set_allocated_tablename(::std::string* tablename) {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablename) {
    set_has_tablename();
    tablename_ = tablename;
  } else {
    clear_has_tablename();
    tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TKafkaWholeMessage.TableName)
}

// optional string TableKey = 2;
inline bool TKafkaWholeMessage::has_tablekey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TKafkaWholeMessage::set_has_tablekey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TKafkaWholeMessage::clear_has_tablekey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TKafkaWholeMessage::clear_tablekey() {
  if (tablekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablekey_->clear();
  }
  clear_has_tablekey();
}
inline const ::std::string& TKafkaWholeMessage::tablekey() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaWholeMessage.TableKey)
  return *tablekey_;
}
inline void TKafkaWholeMessage::set_tablekey(const ::std::string& value) {
  set_has_tablekey();
  if (tablekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablekey_ = new ::std::string;
  }
  tablekey_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TKafkaWholeMessage.TableKey)
}
inline void TKafkaWholeMessage::set_tablekey(const char* value) {
  set_has_tablekey();
  if (tablekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablekey_ = new ::std::string;
  }
  tablekey_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TKafkaWholeMessage.TableKey)
}
inline void TKafkaWholeMessage::set_tablekey(const char* value, size_t size) {
  set_has_tablekey();
  if (tablekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablekey_ = new ::std::string;
  }
  tablekey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TKafkaWholeMessage.TableKey)
}
inline ::std::string* TKafkaWholeMessage::mutable_tablekey() {
  set_has_tablekey();
  if (tablekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tablekey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TKafkaWholeMessage.TableKey)
  return tablekey_;
}
inline ::std::string* TKafkaWholeMessage::release_tablekey() {
  clear_has_tablekey();
  if (tablekey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tablekey_;
    tablekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TKafkaWholeMessage::set_allocated_tablekey(::std::string* tablekey) {
  if (tablekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablekey_;
  }
  if (tablekey) {
    set_has_tablekey();
    tablekey_ = tablekey;
  } else {
    clear_has_tablekey();
    tablekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TKafkaWholeMessage.TableKey)
}

// optional bytes Value = 3;
inline bool TKafkaWholeMessage::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TKafkaWholeMessage::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TKafkaWholeMessage::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TKafkaWholeMessage::clear_value() {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& TKafkaWholeMessage::value() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaWholeMessage.Value)
  return *value_;
}
inline void TKafkaWholeMessage::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TKafkaWholeMessage.Value)
}
inline void TKafkaWholeMessage::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TKafkaWholeMessage.Value)
}
inline void TKafkaWholeMessage::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TKafkaWholeMessage.Value)
}
inline ::std::string* TKafkaWholeMessage::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TKafkaWholeMessage.Value)
  return value_;
}
inline ::std::string* TKafkaWholeMessage::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TKafkaWholeMessage::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TKafkaWholeMessage.Value)
}

// optional int64 Timestamp = 4;
inline bool TKafkaWholeMessage::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TKafkaWholeMessage::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TKafkaWholeMessage::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TKafkaWholeMessage::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 TKafkaWholeMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaWholeMessage.Timestamp)
  return timestamp_;
}
inline void TKafkaWholeMessage::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:pb.TKafkaWholeMessage.Timestamp)
}

// optional bool IsDeleted = 5;
inline bool TKafkaWholeMessage::has_isdeleted() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TKafkaWholeMessage::set_has_isdeleted() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TKafkaWholeMessage::clear_has_isdeleted() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TKafkaWholeMessage::clear_isdeleted() {
  isdeleted_ = false;
  clear_has_isdeleted();
}
inline bool TKafkaWholeMessage::isdeleted() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaWholeMessage.IsDeleted)
  return isdeleted_;
}
inline void TKafkaWholeMessage::set_isdeleted(bool value) {
  set_has_isdeleted();
  isdeleted_ = value;
  // @@protoc_insertion_point(field_set:pb.TKafkaWholeMessage.IsDeleted)
}

// optional string RowKey = 6;
inline bool TKafkaWholeMessage::has_rowkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TKafkaWholeMessage::set_has_rowkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TKafkaWholeMessage::clear_has_rowkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TKafkaWholeMessage::clear_rowkey() {
  if (rowkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rowkey_->clear();
  }
  clear_has_rowkey();
}
inline const ::std::string& TKafkaWholeMessage::rowkey() const {
  // @@protoc_insertion_point(field_get:pb.TKafkaWholeMessage.RowKey)
  return *rowkey_;
}
inline void TKafkaWholeMessage::set_rowkey(const ::std::string& value) {
  set_has_rowkey();
  if (rowkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rowkey_ = new ::std::string;
  }
  rowkey_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TKafkaWholeMessage.RowKey)
}
inline void TKafkaWholeMessage::set_rowkey(const char* value) {
  set_has_rowkey();
  if (rowkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rowkey_ = new ::std::string;
  }
  rowkey_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TKafkaWholeMessage.RowKey)
}
inline void TKafkaWholeMessage::set_rowkey(const char* value, size_t size) {
  set_has_rowkey();
  if (rowkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rowkey_ = new ::std::string;
  }
  rowkey_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TKafkaWholeMessage.RowKey)
}
inline ::std::string* TKafkaWholeMessage::mutable_rowkey() {
  set_has_rowkey();
  if (rowkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rowkey_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TKafkaWholeMessage.RowKey)
  return rowkey_;
}
inline ::std::string* TKafkaWholeMessage::release_rowkey() {
  clear_has_rowkey();
  if (rowkey_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rowkey_;
    rowkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TKafkaWholeMessage::set_allocated_rowkey(::std::string* rowkey) {
  if (rowkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rowkey_;
  }
  if (rowkey) {
    set_has_rowkey();
    rowkey_ = rowkey;
  } else {
    clear_has_rowkey();
    rowkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TKafkaWholeMessage.RowKey)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fKafkaDefine_2eproto__INCLUDED
