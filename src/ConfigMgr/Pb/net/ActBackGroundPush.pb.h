// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActBackGroundPush.proto

#ifndef PROTOBUF_net_2fActBackGroundPush_2eproto__INCLUDED
#define PROTOBUF_net_2fActBackGroundPush_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActBackGroundPush_2eproto();
void protobuf_AssignDesc_net_2fActBackGroundPush_2eproto();
void protobuf_ShutdownFile_net_2fActBackGroundPush_2eproto();

class TActBackgroundPushGiftInfo;
class TActBackgroundPushGetInfoRsp;
class TActBackgroundPushNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActBackgroundPushGiftInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBackGroundPush.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBackgroundPushGiftInfo : public ::google::protobuf::Message {
 public:
  TActBackgroundPushGiftInfo();
  virtual ~TActBackgroundPushGiftInfo();

  TActBackgroundPushGiftInfo(const TActBackgroundPushGiftInfo& from);

  inline TActBackgroundPushGiftInfo& operator=(const TActBackgroundPushGiftInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBackgroundPushGiftInfo& default_instance();

  void Swap(TActBackgroundPushGiftInfo* other);

  // implements Message ----------------------------------------------

  TActBackgroundPushGiftInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBackgroundPushGiftInfo& from);
  void MergeFrom(const TActBackgroundPushGiftInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GiftId = 1;
  inline bool has_giftid() const;
  inline void clear_giftid();
  static const int kGiftIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBackgroundPushGiftInfo</name>
  	<Function>
  		<name>giftid</name>
  		<replaceName>GiftId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_giftid</name>
  		<replaceName>GiftId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_giftid</name>
  		<replaceName>GiftId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 giftid() const;
  inline void set_giftid(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActBackgroundPushGiftInfo</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActBackgroundPushGiftInfo)
 private:
  inline void set_has_giftid();
  inline void clear_has_giftid();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 giftid_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fActBackGroundPush_2eproto();
  friend void protobuf_AssignDesc_net_2fActBackGroundPush_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBackGroundPush_2eproto();

  void InitAsDefaultInstance();
  static TActBackgroundPushGiftInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActBackgroundPushGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBackGroundPush.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBackgroundPushGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActBackgroundPushGetInfoRsp();
  virtual ~TActBackgroundPushGetInfoRsp();

  TActBackgroundPushGetInfoRsp(const TActBackgroundPushGetInfoRsp& from);

  inline TActBackgroundPushGetInfoRsp& operator=(const TActBackgroundPushGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBackgroundPushGetInfoRsp& default_instance();

  void Swap(TActBackgroundPushGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActBackgroundPushGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBackgroundPushGetInfoRsp& from);
  void MergeFrom(const TActBackgroundPushGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsOpen = 1;
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsOpenFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBackgroundPushGetInfoRsp</name>
  	<Function>
  		<name>isopen</name>
  		<replaceName>IsOpen</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isopen</name>
  		<replaceName>IsOpen</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isopen</name>
  		<replaceName>IsOpen</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isopen() const;
  inline void set_isopen(bool value);

  // repeated .pb.TActBackgroundPushGiftInfo GiftArr = 2;
  inline int giftarr_size() const;
  inline void clear_giftarr();
  static const int kGiftArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActBackgroundPushGetInfoRsp</name>
  	<Function>
  		<name>giftarr</name>
  		<replaceName>GiftArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_giftarr</name>
  		<replaceName>GiftArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_giftarr</name>
  		<replaceName>GiftArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_giftarr</name>
  		<replaceName>GiftArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>giftarr_size</name>
  		<replaceName>GiftArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActBackgroundPushGiftInfo& giftarr(int index) const;
  inline ::pb::TActBackgroundPushGiftInfo* mutable_giftarr(int index);
  inline ::pb::TActBackgroundPushGiftInfo* add_giftarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBackgroundPushGiftInfo >&
      giftarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActBackgroundPushGiftInfo >*
      mutable_giftarr();

  // @@protoc_insertion_point(class_scope:pb.TActBackgroundPushGetInfoRsp)
 private:
  inline void set_has_isopen();
  inline void clear_has_isopen();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActBackgroundPushGiftInfo > giftarr_;
  bool isopen_;
  friend void  protobuf_AddDesc_net_2fActBackGroundPush_2eproto();
  friend void protobuf_AssignDesc_net_2fActBackGroundPush_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBackGroundPush_2eproto();

  void InitAsDefaultInstance();
  static TActBackgroundPushGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActBackgroundPushNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActBackGroundPush.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActBackgroundPushNotify : public ::google::protobuf::Message {
 public:
  TActBackgroundPushNotify();
  virtual ~TActBackgroundPushNotify();

  TActBackgroundPushNotify(const TActBackgroundPushNotify& from);

  inline TActBackgroundPushNotify& operator=(const TActBackgroundPushNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActBackgroundPushNotify& default_instance();

  void Swap(TActBackgroundPushNotify* other);

  // implements Message ----------------------------------------------

  TActBackgroundPushNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActBackgroundPushNotify& from);
  void MergeFrom(const TActBackgroundPushNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActBackgroundPushGiftInfo GiftArr = 1;
  inline int giftarr_size() const;
  inline void clear_giftarr();
  static const int kGiftArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActBackgroundPushNotify</name>
  	<Function>
  		<name>giftarr</name>
  		<replaceName>GiftArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_giftarr</name>
  		<replaceName>GiftArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_giftarr</name>
  		<replaceName>GiftArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_giftarr</name>
  		<replaceName>GiftArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>giftarr_size</name>
  		<replaceName>GiftArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActBackgroundPushGiftInfo& giftarr(int index) const;
  inline ::pb::TActBackgroundPushGiftInfo* mutable_giftarr(int index);
  inline ::pb::TActBackgroundPushGiftInfo* add_giftarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBackgroundPushGiftInfo >&
      giftarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActBackgroundPushGiftInfo >*
      mutable_giftarr();

  // @@protoc_insertion_point(class_scope:pb.TActBackgroundPushNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActBackgroundPushGiftInfo > giftarr_;
  friend void  protobuf_AddDesc_net_2fActBackGroundPush_2eproto();
  friend void protobuf_AssignDesc_net_2fActBackGroundPush_2eproto();
  friend void protobuf_ShutdownFile_net_2fActBackGroundPush_2eproto();

  void InitAsDefaultInstance();
  static TActBackgroundPushNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActBackgroundPushGiftInfo

// optional uint32 GiftId = 1;
inline bool TActBackgroundPushGiftInfo::has_giftid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActBackgroundPushGiftInfo::set_has_giftid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActBackgroundPushGiftInfo::clear_has_giftid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActBackgroundPushGiftInfo::clear_giftid() {
  giftid_ = 0u;
  clear_has_giftid();
}
inline ::google::protobuf::uint32 TActBackgroundPushGiftInfo::giftid() const {
  // @@protoc_insertion_point(field_get:pb.TActBackgroundPushGiftInfo.GiftId)
  return giftid_;
}
inline void TActBackgroundPushGiftInfo::set_giftid(::google::protobuf::uint32 value) {
  set_has_giftid();
  giftid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBackgroundPushGiftInfo.GiftId)
}

// optional uint32 BuyNum = 2;
inline bool TActBackgroundPushGiftInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActBackgroundPushGiftInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActBackgroundPushGiftInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActBackgroundPushGiftInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TActBackgroundPushGiftInfo::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TActBackgroundPushGiftInfo.BuyNum)
  return buynum_;
}
inline void TActBackgroundPushGiftInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBackgroundPushGiftInfo.BuyNum)
}

// -------------------------------------------------------------------

// TActBackgroundPushGetInfoRsp

// optional bool IsOpen = 1;
inline bool TActBackgroundPushGetInfoRsp::has_isopen() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActBackgroundPushGetInfoRsp::set_has_isopen() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActBackgroundPushGetInfoRsp::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActBackgroundPushGetInfoRsp::clear_isopen() {
  isopen_ = false;
  clear_has_isopen();
}
inline bool TActBackgroundPushGetInfoRsp::isopen() const {
  // @@protoc_insertion_point(field_get:pb.TActBackgroundPushGetInfoRsp.IsOpen)
  return isopen_;
}
inline void TActBackgroundPushGetInfoRsp::set_isopen(bool value) {
  set_has_isopen();
  isopen_ = value;
  // @@protoc_insertion_point(field_set:pb.TActBackgroundPushGetInfoRsp.IsOpen)
}

// repeated .pb.TActBackgroundPushGiftInfo GiftArr = 2;
inline int TActBackgroundPushGetInfoRsp::giftarr_size() const {
  return giftarr_.size();
}
inline void TActBackgroundPushGetInfoRsp::clear_giftarr() {
  giftarr_.Clear();
}
inline const ::pb::TActBackgroundPushGiftInfo& TActBackgroundPushGetInfoRsp::giftarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBackgroundPushGetInfoRsp.GiftArr)
  return giftarr_.Get(index);
}
inline ::pb::TActBackgroundPushGiftInfo* TActBackgroundPushGetInfoRsp::mutable_giftarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActBackgroundPushGetInfoRsp.GiftArr)
  return giftarr_.Mutable(index);
}
inline ::pb::TActBackgroundPushGiftInfo* TActBackgroundPushGetInfoRsp::add_giftarr() {
  // @@protoc_insertion_point(field_add:pb.TActBackgroundPushGetInfoRsp.GiftArr)
  return giftarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBackgroundPushGiftInfo >&
TActBackgroundPushGetInfoRsp::giftarr() const {
  // @@protoc_insertion_point(field_list:pb.TActBackgroundPushGetInfoRsp.GiftArr)
  return giftarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActBackgroundPushGiftInfo >*
TActBackgroundPushGetInfoRsp::mutable_giftarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBackgroundPushGetInfoRsp.GiftArr)
  return &giftarr_;
}

// -------------------------------------------------------------------

// TActBackgroundPushNotify

// repeated .pb.TActBackgroundPushGiftInfo GiftArr = 1;
inline int TActBackgroundPushNotify::giftarr_size() const {
  return giftarr_.size();
}
inline void TActBackgroundPushNotify::clear_giftarr() {
  giftarr_.Clear();
}
inline const ::pb::TActBackgroundPushGiftInfo& TActBackgroundPushNotify::giftarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActBackgroundPushNotify.GiftArr)
  return giftarr_.Get(index);
}
inline ::pb::TActBackgroundPushGiftInfo* TActBackgroundPushNotify::mutable_giftarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActBackgroundPushNotify.GiftArr)
  return giftarr_.Mutable(index);
}
inline ::pb::TActBackgroundPushGiftInfo* TActBackgroundPushNotify::add_giftarr() {
  // @@protoc_insertion_point(field_add:pb.TActBackgroundPushNotify.GiftArr)
  return giftarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActBackgroundPushGiftInfo >&
TActBackgroundPushNotify::giftarr() const {
  // @@protoc_insertion_point(field_list:pb.TActBackgroundPushNotify.GiftArr)
  return giftarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActBackgroundPushGiftInfo >*
TActBackgroundPushNotify::mutable_giftarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActBackgroundPushNotify.GiftArr)
  return &giftarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActBackGroundPush_2eproto__INCLUDED
