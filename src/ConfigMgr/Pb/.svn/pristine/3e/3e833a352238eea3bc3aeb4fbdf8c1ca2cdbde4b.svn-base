// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActAlcoholFestival.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActAlcoholFestival.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActAlcoholFestival_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestival_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalGetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalGetRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardFirstReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalGetRewardFirstReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardFirstRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalGetRewardFirstRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardSecondReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalGetRewardSecondReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardSecondRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalGetRewardSecondRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalUseItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalUseItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetArrRewardAllRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalGetArrRewardAllRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetServerTeamInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalGetServerTeamInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalGetRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalGetRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAlcoholFestivalNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAlcoholFestivalNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto() {
  protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActAlcoholFestival.proto");
  GOOGLE_CHECK(file != NULL);
  TActAlcoholFestival_descriptor_ = file->message_type(0);
  static const int TActAlcoholFestival_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestival, buytimefirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestival, buytimesecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestival, totalexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestival, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestival, arrrewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestival, arrcostrewardinfofirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestival, arrcostrewardinfosecond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestival, rank_),
  };
  TActAlcoholFestival_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestival_descriptor_,
      TActAlcoholFestival::default_instance_,
      TActAlcoholFestival_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestival, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestival, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestival));
  TActAlcoholFestivalGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TActAlcoholFestivalGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetInfoRsp, tactalcoholfestivalgetinfo_),
  };
  TActAlcoholFestivalGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalGetInfoRsp_descriptor_,
      TActAlcoholFestivalGetInfoRsp::default_instance_,
      TActAlcoholFestivalGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalGetInfoRsp));
  TActAlcoholFestivalGetRewardReq_descriptor_ = file->message_type(2);
  static const int TActAlcoholFestivalGetRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardReq, id_),
  };
  TActAlcoholFestivalGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalGetRewardReq_descriptor_,
      TActAlcoholFestivalGetRewardReq::default_instance_,
      TActAlcoholFestivalGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalGetRewardReq));
  TActAlcoholFestivalGetRewardRsp_descriptor_ = file->message_type(3);
  static const int TActAlcoholFestivalGetRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardRsp, arrreward_),
  };
  TActAlcoholFestivalGetRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalGetRewardRsp_descriptor_,
      TActAlcoholFestivalGetRewardRsp::default_instance_,
      TActAlcoholFestivalGetRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalGetRewardRsp));
  TActAlcoholFestivalGetRewardFirstReq_descriptor_ = file->message_type(4);
  static const int TActAlcoholFestivalGetRewardFirstReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardFirstReq, id_),
  };
  TActAlcoholFestivalGetRewardFirstReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalGetRewardFirstReq_descriptor_,
      TActAlcoholFestivalGetRewardFirstReq::default_instance_,
      TActAlcoholFestivalGetRewardFirstReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardFirstReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardFirstReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalGetRewardFirstReq));
  TActAlcoholFestivalGetRewardFirstRsp_descriptor_ = file->message_type(5);
  static const int TActAlcoholFestivalGetRewardFirstRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardFirstRsp, arrreward_),
  };
  TActAlcoholFestivalGetRewardFirstRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalGetRewardFirstRsp_descriptor_,
      TActAlcoholFestivalGetRewardFirstRsp::default_instance_,
      TActAlcoholFestivalGetRewardFirstRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardFirstRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardFirstRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalGetRewardFirstRsp));
  TActAlcoholFestivalGetRewardSecondReq_descriptor_ = file->message_type(6);
  static const int TActAlcoholFestivalGetRewardSecondReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardSecondReq, id_),
  };
  TActAlcoholFestivalGetRewardSecondReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalGetRewardSecondReq_descriptor_,
      TActAlcoholFestivalGetRewardSecondReq::default_instance_,
      TActAlcoholFestivalGetRewardSecondReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardSecondReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardSecondReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalGetRewardSecondReq));
  TActAlcoholFestivalGetRewardSecondRsp_descriptor_ = file->message_type(7);
  static const int TActAlcoholFestivalGetRewardSecondRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardSecondRsp, arrreward_),
  };
  TActAlcoholFestivalGetRewardSecondRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalGetRewardSecondRsp_descriptor_,
      TActAlcoholFestivalGetRewardSecondRsp::default_instance_,
      TActAlcoholFestivalGetRewardSecondRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardSecondRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRewardSecondRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalGetRewardSecondRsp));
  TActAlcoholFestivalUseItemReq_descriptor_ = file->message_type(8);
  static const int TActAlcoholFestivalUseItemReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalUseItemReq, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalUseItemReq, itemnum_),
  };
  TActAlcoholFestivalUseItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalUseItemReq_descriptor_,
      TActAlcoholFestivalUseItemReq::default_instance_,
      TActAlcoholFestivalUseItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalUseItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalUseItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalUseItemReq));
  TActAlcoholFestivalGetArrRewardAllRsp_descriptor_ = file->message_type(9);
  static const int TActAlcoholFestivalGetArrRewardAllRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetArrRewardAllRsp, arrreward_),
  };
  TActAlcoholFestivalGetArrRewardAllRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalGetArrRewardAllRsp_descriptor_,
      TActAlcoholFestivalGetArrRewardAllRsp::default_instance_,
      TActAlcoholFestivalGetArrRewardAllRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetArrRewardAllRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetArrRewardAllRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalGetArrRewardAllRsp));
  TActAlcoholFestivalGetServerTeamInfoRsp_descriptor_ = file->message_type(10);
  static const int TActAlcoholFestivalGetServerTeamInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetServerTeamInfoRsp, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetServerTeamInfoRsp, needopenday_),
  };
  TActAlcoholFestivalGetServerTeamInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalGetServerTeamInfoRsp_descriptor_,
      TActAlcoholFestivalGetServerTeamInfoRsp::default_instance_,
      TActAlcoholFestivalGetServerTeamInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetServerTeamInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetServerTeamInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalGetServerTeamInfoRsp));
  TActAlcoholFestivalRankInfo_descriptor_ = file->message_type(11);
  static const int TActAlcoholFestivalRankInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalRankInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalRankInfo, totalexp_),
  };
  TActAlcoholFestivalRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalRankInfo_descriptor_,
      TActAlcoholFestivalRankInfo::default_instance_,
      TActAlcoholFestivalRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalRankInfo));
  TActAlcoholFestivalGetRankListReq_descriptor_ = file->message_type(12);
  static const int TActAlcoholFestivalGetRankListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRankListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRankListReq, limit_),
  };
  TActAlcoholFestivalGetRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalGetRankListReq_descriptor_,
      TActAlcoholFestivalGetRankListReq::default_instance_,
      TActAlcoholFestivalGetRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalGetRankListReq));
  TActAlcoholFestivalGetRankListRsp_descriptor_ = file->message_type(13);
  static const int TActAlcoholFestivalGetRankListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRankListRsp, ranklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRankListRsp, myrank_),
  };
  TActAlcoholFestivalGetRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalGetRankListRsp_descriptor_,
      TActAlcoholFestivalGetRankListRsp::default_instance_,
      TActAlcoholFestivalGetRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalGetRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalGetRankListRsp));
  TActAlcoholFestivalNotify_descriptor_ = file->message_type(14);
  static const int TActAlcoholFestivalNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalNotify, pushmsg_),
  };
  TActAlcoholFestivalNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAlcoholFestivalNotify_descriptor_,
      TActAlcoholFestivalNotify::default_instance_,
      TActAlcoholFestivalNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAlcoholFestivalNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAlcoholFestivalNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActAlcoholFestival_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestival_descriptor_, &TActAlcoholFestival::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalGetInfoRsp_descriptor_, &TActAlcoholFestivalGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalGetRewardReq_descriptor_, &TActAlcoholFestivalGetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalGetRewardRsp_descriptor_, &TActAlcoholFestivalGetRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalGetRewardFirstReq_descriptor_, &TActAlcoholFestivalGetRewardFirstReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalGetRewardFirstRsp_descriptor_, &TActAlcoholFestivalGetRewardFirstRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalGetRewardSecondReq_descriptor_, &TActAlcoholFestivalGetRewardSecondReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalGetRewardSecondRsp_descriptor_, &TActAlcoholFestivalGetRewardSecondRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalUseItemReq_descriptor_, &TActAlcoholFestivalUseItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalGetArrRewardAllRsp_descriptor_, &TActAlcoholFestivalGetArrRewardAllRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalGetServerTeamInfoRsp_descriptor_, &TActAlcoholFestivalGetServerTeamInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalRankInfo_descriptor_, &TActAlcoholFestivalRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalGetRankListReq_descriptor_, &TActAlcoholFestivalGetRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalGetRankListRsp_descriptor_, &TActAlcoholFestivalGetRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAlcoholFestivalNotify_descriptor_, &TActAlcoholFestivalNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto() {
  delete TActAlcoholFestival::default_instance_;
  delete TActAlcoholFestival_reflection_;
  delete TActAlcoholFestivalGetInfoRsp::default_instance_;
  delete TActAlcoholFestivalGetInfoRsp_reflection_;
  delete TActAlcoholFestivalGetRewardReq::default_instance_;
  delete TActAlcoholFestivalGetRewardReq_reflection_;
  delete TActAlcoholFestivalGetRewardRsp::default_instance_;
  delete TActAlcoholFestivalGetRewardRsp_reflection_;
  delete TActAlcoholFestivalGetRewardFirstReq::default_instance_;
  delete TActAlcoholFestivalGetRewardFirstReq_reflection_;
  delete TActAlcoholFestivalGetRewardFirstRsp::default_instance_;
  delete TActAlcoholFestivalGetRewardFirstRsp_reflection_;
  delete TActAlcoholFestivalGetRewardSecondReq::default_instance_;
  delete TActAlcoholFestivalGetRewardSecondReq_reflection_;
  delete TActAlcoholFestivalGetRewardSecondRsp::default_instance_;
  delete TActAlcoholFestivalGetRewardSecondRsp_reflection_;
  delete TActAlcoholFestivalUseItemReq::default_instance_;
  delete TActAlcoholFestivalUseItemReq_reflection_;
  delete TActAlcoholFestivalGetArrRewardAllRsp::default_instance_;
  delete TActAlcoholFestivalGetArrRewardAllRsp_reflection_;
  delete TActAlcoholFestivalGetServerTeamInfoRsp::default_instance_;
  delete TActAlcoholFestivalGetServerTeamInfoRsp_reflection_;
  delete TActAlcoholFestivalRankInfo::default_instance_;
  delete TActAlcoholFestivalRankInfo_reflection_;
  delete TActAlcoholFestivalGetRankListReq::default_instance_;
  delete TActAlcoholFestivalGetRankListReq_reflection_;
  delete TActAlcoholFestivalGetRankListRsp::default_instance_;
  delete TActAlcoholFestivalGetRankListRsp_reflection_;
  delete TActAlcoholFestivalNotify::default_instance_;
  delete TActAlcoholFestivalNotify_reflection_;
}

void protobuf_AddDesc_net_2fActAlcoholFestival_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fOpenActivity_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034net/ActAlcoholFestival.proto\022\002pb\032\026net/"
    "CommonReward.proto\032\026net/OpenActivity.pro"
    "to\032\016net/User.proto\"\224\002\n\023TActAlcoholFestiv"
    "al\022\024\n\014BuyTimeFirst\030\001 \001(\004\022\025\n\rBuyTimeSecon"
    "d\030\002 \001(\004\022\020\n\010TotalExp\030\003 \001(\004\022\r\n\005Level\030\004 \001(\r"
    "\022.\n\rArrRewardInfo\030\005 \003(\0132\027.pb.TActivityRe"
    "wardInfo\0227\n\026ArrCostRewardInfoFirst\030\006 \003(\013"
    "2\027.pb.TActivityRewardInfo\0228\n\027ArrCostRewa"
    "rdInfoSecond\030\007 \003(\0132\027.pb.TActivityRewardI"
    "nfo\022\014\n\004Rank\030\010 \001(\r\"\\\n\035TActAlcoholFestival"
    "GetInfoRsp\022;\n\032TActAlcoholFestivalGetInfo"
    "\030\001 \001(\0132\027.pb.TActAlcoholFestival\"-\n\037TActA"
    "lcoholFestivalGetRewardReq\022\n\n\002Id\030\001 \001(\r\"G"
    "\n\037TActAlcoholFestivalGetRewardRsp\022$\n\tArr"
    "Reward\030\001 \003(\0132\021.pb.TCommonReward\"2\n$TActA"
    "lcoholFestivalGetRewardFirstReq\022\n\n\002Id\030\001 "
    "\001(\r\"L\n$TActAlcoholFestivalGetRewardFirst"
    "Rsp\022$\n\tArrReward\030\001 \003(\0132\021.pb.TCommonRewar"
    "d\"3\n%TActAlcoholFestivalGetRewardSecondR"
    "eq\022\n\n\002Id\030\001 \001(\r\"M\n%TActAlcoholFestivalGet"
    "RewardSecondRsp\022$\n\tArrReward\030\001 \003(\0132\021.pb."
    "TCommonReward\"=\n\035TActAlcoholFestivalUseI"
    "temReq\022\013\n\003Tid\030\001 \001(\r\022\017\n\007ItemNum\030\002 \001(\r\"M\n%"
    "TActAlcoholFestivalGetArrRewardAllRsp\022$\n"
    "\tArrReward\030\001 \003(\0132\021.pb.TCommonReward\"N\n\'T"
    "ActAlcoholFestivalGetServerTeamInfoRsp\022\016"
    "\n\006TeamId\030\001 \001(\r\022\023\n\013NeedOpenDay\030\002 \001(\r\"V\n\033T"
    "ActAlcoholFestivalRankInfo\022%\n\010UserInfo\030\001"
    " \001(\0132\023.pb.TUserSimpleInfo\022\020\n\010TotalExp\030\002 "
    "\001(\004\"B\n!TActAlcoholFestivalGetRankListReq"
    "\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"f\n!TActA"
    "lcoholFestivalGetRankListRsp\0221\n\010RankList"
    "\030\001 \003(\0132\037.pb.TActAlcoholFestivalRankInfo\022"
    "\016\n\006MyRank\030\002 \001(\r\"E\n\031TActAlcoholFestivalNo"
    "tify\022(\n\007PushMsg\030\001 \001(\0132\027.pb.TActAlcoholFe"
    "stival", 1406);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActAlcoholFestival.proto", &protobuf_RegisterTypes);
  TActAlcoholFestival::default_instance_ = new TActAlcoholFestival();
  TActAlcoholFestivalGetInfoRsp::default_instance_ = new TActAlcoholFestivalGetInfoRsp();
  TActAlcoholFestivalGetRewardReq::default_instance_ = new TActAlcoholFestivalGetRewardReq();
  TActAlcoholFestivalGetRewardRsp::default_instance_ = new TActAlcoholFestivalGetRewardRsp();
  TActAlcoholFestivalGetRewardFirstReq::default_instance_ = new TActAlcoholFestivalGetRewardFirstReq();
  TActAlcoholFestivalGetRewardFirstRsp::default_instance_ = new TActAlcoholFestivalGetRewardFirstRsp();
  TActAlcoholFestivalGetRewardSecondReq::default_instance_ = new TActAlcoholFestivalGetRewardSecondReq();
  TActAlcoholFestivalGetRewardSecondRsp::default_instance_ = new TActAlcoholFestivalGetRewardSecondRsp();
  TActAlcoholFestivalUseItemReq::default_instance_ = new TActAlcoholFestivalUseItemReq();
  TActAlcoholFestivalGetArrRewardAllRsp::default_instance_ = new TActAlcoholFestivalGetArrRewardAllRsp();
  TActAlcoholFestivalGetServerTeamInfoRsp::default_instance_ = new TActAlcoholFestivalGetServerTeamInfoRsp();
  TActAlcoholFestivalRankInfo::default_instance_ = new TActAlcoholFestivalRankInfo();
  TActAlcoholFestivalGetRankListReq::default_instance_ = new TActAlcoholFestivalGetRankListReq();
  TActAlcoholFestivalGetRankListRsp::default_instance_ = new TActAlcoholFestivalGetRankListRsp();
  TActAlcoholFestivalNotify::default_instance_ = new TActAlcoholFestivalNotify();
  TActAlcoholFestival::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalGetRewardReq::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalGetRewardRsp::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalGetRewardFirstReq::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalGetRewardFirstRsp::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalGetRewardSecondReq::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalGetRewardSecondRsp::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalUseItemReq::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalGetArrRewardAllRsp::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalGetServerTeamInfoRsp::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalRankInfo::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalGetRankListReq::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalGetRankListRsp::default_instance_->InitAsDefaultInstance();
  TActAlcoholFestivalNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActAlcoholFestival_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActAlcoholFestival_2eproto {
  StaticDescriptorInitializer_net_2fActAlcoholFestival_2eproto() {
    protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  }
} static_descriptor_initializer_net_2fActAlcoholFestival_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestival::kBuyTimeFirstFieldNumber;
const int TActAlcoholFestival::kBuyTimeSecondFieldNumber;
const int TActAlcoholFestival::kTotalExpFieldNumber;
const int TActAlcoholFestival::kLevelFieldNumber;
const int TActAlcoholFestival::kArrRewardInfoFieldNumber;
const int TActAlcoholFestival::kArrCostRewardInfoFirstFieldNumber;
const int TActAlcoholFestival::kArrCostRewardInfoSecondFieldNumber;
const int TActAlcoholFestival::kRankFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestival::TActAlcoholFestival()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestival)
}

void TActAlcoholFestival::InitAsDefaultInstance() {
}

TActAlcoholFestival::TActAlcoholFestival(const TActAlcoholFestival& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestival)
}

void TActAlcoholFestival::SharedCtor() {
  _cached_size_ = 0;
  buytimefirst_ = GOOGLE_ULONGLONG(0);
  buytimesecond_ = GOOGLE_ULONGLONG(0);
  totalexp_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestival::~TActAlcoholFestival() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestival)
  SharedDtor();
}

void TActAlcoholFestival::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestival::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestival::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestival_descriptor_;
}

const TActAlcoholFestival& TActAlcoholFestival::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestival* TActAlcoholFestival::default_instance_ = NULL;

TActAlcoholFestival* TActAlcoholFestival::New() const {
  return new TActAlcoholFestival;
}

void TActAlcoholFestival::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActAlcoholFestival*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 143) {
    ZR_(buytimefirst_, totalexp_);
    ZR_(level_, rank_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrrewardinfo_.Clear();
  arrcostrewardinfofirst_.Clear();
  arrcostrewardinfosecond_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestival::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestival)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 BuyTimeFirst = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytimefirst_)));
          set_has_buytimefirst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BuyTimeSecond;
        break;
      }

      // optional uint64 BuyTimeSecond = 2;
      case 2: {
        if (tag == 16) {
         parse_BuyTimeSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytimesecond_)));
          set_has_buytimesecond();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TotalExp;
        break;
      }

      // optional uint64 TotalExp = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 4;
      case 4: {
        if (tag == 32) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ArrRewardInfo;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_ArrRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ArrRewardInfo;
        if (input->ExpectTag(50)) goto parse_ArrCostRewardInfoFirst;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrCostRewardInfoFirst = 6;
      case 6: {
        if (tag == 50) {
         parse_ArrCostRewardInfoFirst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrcostrewardinfofirst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrCostRewardInfoFirst;
        if (input->ExpectTag(58)) goto parse_ArrCostRewardInfoSecond;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrCostRewardInfoSecond = 7;
      case 7: {
        if (tag == 58) {
         parse_ArrCostRewardInfoSecond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrcostrewardinfosecond()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ArrCostRewardInfoSecond;
        if (input->ExpectTag(64)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 8;
      case 8: {
        if (tag == 64) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestival)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestival)
  return false;
#undef DO_
}

void TActAlcoholFestival::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestival)
  // optional uint64 BuyTimeFirst = 1;
  if (has_buytimefirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buytimefirst(), output);
  }

  // optional uint64 BuyTimeSecond = 2;
  if (has_buytimesecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buytimesecond(), output);
  }

  // optional uint64 TotalExp = 3;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->totalexp(), output);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arrrewardinfo(i), output);
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfoFirst = 6;
  for (int i = 0; i < this->arrcostrewardinfofirst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arrcostrewardinfofirst(i), output);
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfoSecond = 7;
  for (int i = 0; i < this->arrcostrewardinfosecond_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->arrcostrewardinfosecond(i), output);
  }

  // optional uint32 Rank = 8;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestival)
}

::google::protobuf::uint8* TActAlcoholFestival::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestival)
  // optional uint64 BuyTimeFirst = 1;
  if (has_buytimefirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buytimefirst(), target);
  }

  // optional uint64 BuyTimeSecond = 2;
  if (has_buytimesecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buytimesecond(), target);
  }

  // optional uint64 TotalExp = 3;
  if (has_totalexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->totalexp(), target);
  }

  // optional uint32 Level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arrrewardinfo(i), target);
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfoFirst = 6;
  for (int i = 0; i < this->arrcostrewardinfofirst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arrcostrewardinfofirst(i), target);
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfoSecond = 7;
  for (int i = 0; i < this->arrcostrewardinfosecond_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->arrcostrewardinfosecond(i), target);
  }

  // optional uint32 Rank = 8;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestival)
  return target;
}

int TActAlcoholFestival::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 BuyTimeFirst = 1;
    if (has_buytimefirst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytimefirst());
    }

    // optional uint64 BuyTimeSecond = 2;
    if (has_buytimesecond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytimesecond());
    }

    // optional uint64 TotalExp = 3;
    if (has_totalexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalexp());
    }

    // optional uint32 Level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 Rank = 8;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  // repeated .pb.TActivityRewardInfo ArrRewardInfo = 5;
  total_size += 1 * this->arrrewardinfo_size();
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrewardinfo(i));
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfoFirst = 6;
  total_size += 1 * this->arrcostrewardinfofirst_size();
  for (int i = 0; i < this->arrcostrewardinfofirst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrcostrewardinfofirst(i));
  }

  // repeated .pb.TActivityRewardInfo ArrCostRewardInfoSecond = 7;
  total_size += 1 * this->arrcostrewardinfosecond_size();
  for (int i = 0; i < this->arrcostrewardinfosecond_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrcostrewardinfosecond(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestival::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestival* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestival*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestival::MergeFrom(const TActAlcoholFestival& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrewardinfo_.MergeFrom(from.arrrewardinfo_);
  arrcostrewardinfofirst_.MergeFrom(from.arrcostrewardinfofirst_);
  arrcostrewardinfosecond_.MergeFrom(from.arrcostrewardinfosecond_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buytimefirst()) {
      set_buytimefirst(from.buytimefirst());
    }
    if (from.has_buytimesecond()) {
      set_buytimesecond(from.buytimesecond());
    }
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestival::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestival::CopyFrom(const TActAlcoholFestival& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestival::IsInitialized() const {

  return true;
}

void TActAlcoholFestival::Swap(TActAlcoholFestival* other) {
  if (other != this) {
    std::swap(buytimefirst_, other->buytimefirst_);
    std::swap(buytimesecond_, other->buytimesecond_);
    std::swap(totalexp_, other->totalexp_);
    std::swap(level_, other->level_);
    arrrewardinfo_.Swap(&other->arrrewardinfo_);
    arrcostrewardinfofirst_.Swap(&other->arrcostrewardinfofirst_);
    arrcostrewardinfosecond_.Swap(&other->arrcostrewardinfosecond_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestival::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestival_descriptor_;
  metadata.reflection = TActAlcoholFestival_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalGetInfoRsp::kTActAlcoholFestivalGetInfoFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalGetInfoRsp::TActAlcoholFestivalGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalGetInfoRsp)
}

void TActAlcoholFestivalGetInfoRsp::InitAsDefaultInstance() {
  tactalcoholfestivalgetinfo_ = const_cast< ::pb::TActAlcoholFestival*>(&::pb::TActAlcoholFestival::default_instance());
}

TActAlcoholFestivalGetInfoRsp::TActAlcoholFestivalGetInfoRsp(const TActAlcoholFestivalGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalGetInfoRsp)
}

void TActAlcoholFestivalGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  tactalcoholfestivalgetinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalGetInfoRsp::~TActAlcoholFestivalGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalGetInfoRsp)
  SharedDtor();
}

void TActAlcoholFestivalGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete tactalcoholfestivalgetinfo_;
  }
}

void TActAlcoholFestivalGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalGetInfoRsp_descriptor_;
}

const TActAlcoholFestivalGetInfoRsp& TActAlcoholFestivalGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalGetInfoRsp* TActAlcoholFestivalGetInfoRsp::default_instance_ = NULL;

TActAlcoholFestivalGetInfoRsp* TActAlcoholFestivalGetInfoRsp::New() const {
  return new TActAlcoholFestivalGetInfoRsp;
}

void TActAlcoholFestivalGetInfoRsp::Clear() {
  if (has_tactalcoholfestivalgetinfo()) {
    if (tactalcoholfestivalgetinfo_ != NULL) tactalcoholfestivalgetinfo_->::pb::TActAlcoholFestival::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TActAlcoholFestival TActAlcoholFestivalGetInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tactalcoholfestivalgetinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalGetInfoRsp)
  return false;
#undef DO_
}

void TActAlcoholFestivalGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalGetInfoRsp)
  // optional .pb.TActAlcoholFestival TActAlcoholFestivalGetInfo = 1;
  if (has_tactalcoholfestivalgetinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tactalcoholfestivalgetinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalGetInfoRsp)
}

::google::protobuf::uint8* TActAlcoholFestivalGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalGetInfoRsp)
  // optional .pb.TActAlcoholFestival TActAlcoholFestivalGetInfo = 1;
  if (has_tactalcoholfestivalgetinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tactalcoholfestivalgetinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalGetInfoRsp)
  return target;
}

int TActAlcoholFestivalGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TActAlcoholFestival TActAlcoholFestivalGetInfo = 1;
    if (has_tactalcoholfestivalgetinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tactalcoholfestivalgetinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalGetInfoRsp::MergeFrom(const TActAlcoholFestivalGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tactalcoholfestivalgetinfo()) {
      mutable_tactalcoholfestivalgetinfo()->::pb::TActAlcoholFestival::MergeFrom(from.tactalcoholfestivalgetinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalGetInfoRsp::CopyFrom(const TActAlcoholFestivalGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalGetInfoRsp::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalGetInfoRsp::Swap(TActAlcoholFestivalGetInfoRsp* other) {
  if (other != this) {
    std::swap(tactalcoholfestivalgetinfo_, other->tactalcoholfestivalgetinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalGetInfoRsp_descriptor_;
  metadata.reflection = TActAlcoholFestivalGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalGetRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalGetRewardReq::TActAlcoholFestivalGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalGetRewardReq)
}

void TActAlcoholFestivalGetRewardReq::InitAsDefaultInstance() {
}

TActAlcoholFestivalGetRewardReq::TActAlcoholFestivalGetRewardReq(const TActAlcoholFestivalGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalGetRewardReq)
}

void TActAlcoholFestivalGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalGetRewardReq::~TActAlcoholFestivalGetRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalGetRewardReq)
  SharedDtor();
}

void TActAlcoholFestivalGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestivalGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalGetRewardReq_descriptor_;
}

const TActAlcoholFestivalGetRewardReq& TActAlcoholFestivalGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalGetRewardReq* TActAlcoholFestivalGetRewardReq::default_instance_ = NULL;

TActAlcoholFestivalGetRewardReq* TActAlcoholFestivalGetRewardReq::New() const {
  return new TActAlcoholFestivalGetRewardReq;
}

void TActAlcoholFestivalGetRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalGetRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalGetRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalGetRewardReq)
  return false;
#undef DO_
}

void TActAlcoholFestivalGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalGetRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalGetRewardReq)
}

::google::protobuf::uint8* TActAlcoholFestivalGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalGetRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalGetRewardReq)
  return target;
}

int TActAlcoholFestivalGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalGetRewardReq::MergeFrom(const TActAlcoholFestivalGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalGetRewardReq::CopyFrom(const TActAlcoholFestivalGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalGetRewardReq::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalGetRewardReq::Swap(TActAlcoholFestivalGetRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalGetRewardReq_descriptor_;
  metadata.reflection = TActAlcoholFestivalGetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalGetRewardRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalGetRewardRsp::TActAlcoholFestivalGetRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalGetRewardRsp)
}

void TActAlcoholFestivalGetRewardRsp::InitAsDefaultInstance() {
}

TActAlcoholFestivalGetRewardRsp::TActAlcoholFestivalGetRewardRsp(const TActAlcoholFestivalGetRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalGetRewardRsp)
}

void TActAlcoholFestivalGetRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalGetRewardRsp::~TActAlcoholFestivalGetRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalGetRewardRsp)
  SharedDtor();
}

void TActAlcoholFestivalGetRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestivalGetRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalGetRewardRsp_descriptor_;
}

const TActAlcoholFestivalGetRewardRsp& TActAlcoholFestivalGetRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalGetRewardRsp* TActAlcoholFestivalGetRewardRsp::default_instance_ = NULL;

TActAlcoholFestivalGetRewardRsp* TActAlcoholFestivalGetRewardRsp::New() const {
  return new TActAlcoholFestivalGetRewardRsp;
}

void TActAlcoholFestivalGetRewardRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalGetRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalGetRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalGetRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalGetRewardRsp)
  return false;
#undef DO_
}

void TActAlcoholFestivalGetRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalGetRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalGetRewardRsp)
}

::google::protobuf::uint8* TActAlcoholFestivalGetRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalGetRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalGetRewardRsp)
  return target;
}

int TActAlcoholFestivalGetRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalGetRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalGetRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalGetRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalGetRewardRsp::MergeFrom(const TActAlcoholFestivalGetRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalGetRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalGetRewardRsp::CopyFrom(const TActAlcoholFestivalGetRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalGetRewardRsp::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalGetRewardRsp::Swap(TActAlcoholFestivalGetRewardRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalGetRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalGetRewardRsp_descriptor_;
  metadata.reflection = TActAlcoholFestivalGetRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalGetRewardFirstReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalGetRewardFirstReq::TActAlcoholFestivalGetRewardFirstReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalGetRewardFirstReq)
}

void TActAlcoholFestivalGetRewardFirstReq::InitAsDefaultInstance() {
}

TActAlcoholFestivalGetRewardFirstReq::TActAlcoholFestivalGetRewardFirstReq(const TActAlcoholFestivalGetRewardFirstReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalGetRewardFirstReq)
}

void TActAlcoholFestivalGetRewardFirstReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalGetRewardFirstReq::~TActAlcoholFestivalGetRewardFirstReq() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalGetRewardFirstReq)
  SharedDtor();
}

void TActAlcoholFestivalGetRewardFirstReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestivalGetRewardFirstReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardFirstReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalGetRewardFirstReq_descriptor_;
}

const TActAlcoholFestivalGetRewardFirstReq& TActAlcoholFestivalGetRewardFirstReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalGetRewardFirstReq* TActAlcoholFestivalGetRewardFirstReq::default_instance_ = NULL;

TActAlcoholFestivalGetRewardFirstReq* TActAlcoholFestivalGetRewardFirstReq::New() const {
  return new TActAlcoholFestivalGetRewardFirstReq;
}

void TActAlcoholFestivalGetRewardFirstReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalGetRewardFirstReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalGetRewardFirstReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalGetRewardFirstReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalGetRewardFirstReq)
  return false;
#undef DO_
}

void TActAlcoholFestivalGetRewardFirstReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalGetRewardFirstReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalGetRewardFirstReq)
}

::google::protobuf::uint8* TActAlcoholFestivalGetRewardFirstReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalGetRewardFirstReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalGetRewardFirstReq)
  return target;
}

int TActAlcoholFestivalGetRewardFirstReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalGetRewardFirstReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalGetRewardFirstReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalGetRewardFirstReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalGetRewardFirstReq::MergeFrom(const TActAlcoholFestivalGetRewardFirstReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalGetRewardFirstReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalGetRewardFirstReq::CopyFrom(const TActAlcoholFestivalGetRewardFirstReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalGetRewardFirstReq::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalGetRewardFirstReq::Swap(TActAlcoholFestivalGetRewardFirstReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalGetRewardFirstReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalGetRewardFirstReq_descriptor_;
  metadata.reflection = TActAlcoholFestivalGetRewardFirstReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalGetRewardFirstRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalGetRewardFirstRsp::TActAlcoholFestivalGetRewardFirstRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalGetRewardFirstRsp)
}

void TActAlcoholFestivalGetRewardFirstRsp::InitAsDefaultInstance() {
}

TActAlcoholFestivalGetRewardFirstRsp::TActAlcoholFestivalGetRewardFirstRsp(const TActAlcoholFestivalGetRewardFirstRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalGetRewardFirstRsp)
}

void TActAlcoholFestivalGetRewardFirstRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalGetRewardFirstRsp::~TActAlcoholFestivalGetRewardFirstRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalGetRewardFirstRsp)
  SharedDtor();
}

void TActAlcoholFestivalGetRewardFirstRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestivalGetRewardFirstRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardFirstRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalGetRewardFirstRsp_descriptor_;
}

const TActAlcoholFestivalGetRewardFirstRsp& TActAlcoholFestivalGetRewardFirstRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalGetRewardFirstRsp* TActAlcoholFestivalGetRewardFirstRsp::default_instance_ = NULL;

TActAlcoholFestivalGetRewardFirstRsp* TActAlcoholFestivalGetRewardFirstRsp::New() const {
  return new TActAlcoholFestivalGetRewardFirstRsp;
}

void TActAlcoholFestivalGetRewardFirstRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalGetRewardFirstRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalGetRewardFirstRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalGetRewardFirstRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalGetRewardFirstRsp)
  return false;
#undef DO_
}

void TActAlcoholFestivalGetRewardFirstRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalGetRewardFirstRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalGetRewardFirstRsp)
}

::google::protobuf::uint8* TActAlcoholFestivalGetRewardFirstRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalGetRewardFirstRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalGetRewardFirstRsp)
  return target;
}

int TActAlcoholFestivalGetRewardFirstRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalGetRewardFirstRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalGetRewardFirstRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalGetRewardFirstRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalGetRewardFirstRsp::MergeFrom(const TActAlcoholFestivalGetRewardFirstRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalGetRewardFirstRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalGetRewardFirstRsp::CopyFrom(const TActAlcoholFestivalGetRewardFirstRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalGetRewardFirstRsp::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalGetRewardFirstRsp::Swap(TActAlcoholFestivalGetRewardFirstRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalGetRewardFirstRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalGetRewardFirstRsp_descriptor_;
  metadata.reflection = TActAlcoholFestivalGetRewardFirstRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalGetRewardSecondReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalGetRewardSecondReq::TActAlcoholFestivalGetRewardSecondReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalGetRewardSecondReq)
}

void TActAlcoholFestivalGetRewardSecondReq::InitAsDefaultInstance() {
}

TActAlcoholFestivalGetRewardSecondReq::TActAlcoholFestivalGetRewardSecondReq(const TActAlcoholFestivalGetRewardSecondReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalGetRewardSecondReq)
}

void TActAlcoholFestivalGetRewardSecondReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalGetRewardSecondReq::~TActAlcoholFestivalGetRewardSecondReq() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalGetRewardSecondReq)
  SharedDtor();
}

void TActAlcoholFestivalGetRewardSecondReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestivalGetRewardSecondReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardSecondReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalGetRewardSecondReq_descriptor_;
}

const TActAlcoholFestivalGetRewardSecondReq& TActAlcoholFestivalGetRewardSecondReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalGetRewardSecondReq* TActAlcoholFestivalGetRewardSecondReq::default_instance_ = NULL;

TActAlcoholFestivalGetRewardSecondReq* TActAlcoholFestivalGetRewardSecondReq::New() const {
  return new TActAlcoholFestivalGetRewardSecondReq;
}

void TActAlcoholFestivalGetRewardSecondReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalGetRewardSecondReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalGetRewardSecondReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalGetRewardSecondReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalGetRewardSecondReq)
  return false;
#undef DO_
}

void TActAlcoholFestivalGetRewardSecondReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalGetRewardSecondReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalGetRewardSecondReq)
}

::google::protobuf::uint8* TActAlcoholFestivalGetRewardSecondReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalGetRewardSecondReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalGetRewardSecondReq)
  return target;
}

int TActAlcoholFestivalGetRewardSecondReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalGetRewardSecondReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalGetRewardSecondReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalGetRewardSecondReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalGetRewardSecondReq::MergeFrom(const TActAlcoholFestivalGetRewardSecondReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalGetRewardSecondReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalGetRewardSecondReq::CopyFrom(const TActAlcoholFestivalGetRewardSecondReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalGetRewardSecondReq::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalGetRewardSecondReq::Swap(TActAlcoholFestivalGetRewardSecondReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalGetRewardSecondReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalGetRewardSecondReq_descriptor_;
  metadata.reflection = TActAlcoholFestivalGetRewardSecondReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalGetRewardSecondRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalGetRewardSecondRsp::TActAlcoholFestivalGetRewardSecondRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalGetRewardSecondRsp)
}

void TActAlcoholFestivalGetRewardSecondRsp::InitAsDefaultInstance() {
}

TActAlcoholFestivalGetRewardSecondRsp::TActAlcoholFestivalGetRewardSecondRsp(const TActAlcoholFestivalGetRewardSecondRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalGetRewardSecondRsp)
}

void TActAlcoholFestivalGetRewardSecondRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalGetRewardSecondRsp::~TActAlcoholFestivalGetRewardSecondRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalGetRewardSecondRsp)
  SharedDtor();
}

void TActAlcoholFestivalGetRewardSecondRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestivalGetRewardSecondRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRewardSecondRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalGetRewardSecondRsp_descriptor_;
}

const TActAlcoholFestivalGetRewardSecondRsp& TActAlcoholFestivalGetRewardSecondRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalGetRewardSecondRsp* TActAlcoholFestivalGetRewardSecondRsp::default_instance_ = NULL;

TActAlcoholFestivalGetRewardSecondRsp* TActAlcoholFestivalGetRewardSecondRsp::New() const {
  return new TActAlcoholFestivalGetRewardSecondRsp;
}

void TActAlcoholFestivalGetRewardSecondRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalGetRewardSecondRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalGetRewardSecondRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalGetRewardSecondRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalGetRewardSecondRsp)
  return false;
#undef DO_
}

void TActAlcoholFestivalGetRewardSecondRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalGetRewardSecondRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalGetRewardSecondRsp)
}

::google::protobuf::uint8* TActAlcoholFestivalGetRewardSecondRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalGetRewardSecondRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalGetRewardSecondRsp)
  return target;
}

int TActAlcoholFestivalGetRewardSecondRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalGetRewardSecondRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalGetRewardSecondRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalGetRewardSecondRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalGetRewardSecondRsp::MergeFrom(const TActAlcoholFestivalGetRewardSecondRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalGetRewardSecondRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalGetRewardSecondRsp::CopyFrom(const TActAlcoholFestivalGetRewardSecondRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalGetRewardSecondRsp::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalGetRewardSecondRsp::Swap(TActAlcoholFestivalGetRewardSecondRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalGetRewardSecondRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalGetRewardSecondRsp_descriptor_;
  metadata.reflection = TActAlcoholFestivalGetRewardSecondRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalUseItemReq::kTidFieldNumber;
const int TActAlcoholFestivalUseItemReq::kItemNumFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalUseItemReq::TActAlcoholFestivalUseItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalUseItemReq)
}

void TActAlcoholFestivalUseItemReq::InitAsDefaultInstance() {
}

TActAlcoholFestivalUseItemReq::TActAlcoholFestivalUseItemReq(const TActAlcoholFestivalUseItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalUseItemReq)
}

void TActAlcoholFestivalUseItemReq::SharedCtor() {
  _cached_size_ = 0;
  tid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalUseItemReq::~TActAlcoholFestivalUseItemReq() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalUseItemReq)
  SharedDtor();
}

void TActAlcoholFestivalUseItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestivalUseItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalUseItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalUseItemReq_descriptor_;
}

const TActAlcoholFestivalUseItemReq& TActAlcoholFestivalUseItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalUseItemReq* TActAlcoholFestivalUseItemReq::default_instance_ = NULL;

TActAlcoholFestivalUseItemReq* TActAlcoholFestivalUseItemReq::New() const {
  return new TActAlcoholFestivalUseItemReq;
}

void TActAlcoholFestivalUseItemReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActAlcoholFestivalUseItemReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tid_, itemnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalUseItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalUseItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Tid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ItemNum;
        break;
      }

      // optional uint32 ItemNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalUseItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalUseItemReq)
  return false;
#undef DO_
}

void TActAlcoholFestivalUseItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalUseItemReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tid(), output);
  }

  // optional uint32 ItemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalUseItemReq)
}

::google::protobuf::uint8* TActAlcoholFestivalUseItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalUseItemReq)
  // optional uint32 Tid = 1;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tid(), target);
  }

  // optional uint32 ItemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalUseItemReq)
  return target;
}

int TActAlcoholFestivalUseItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Tid = 1;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional uint32 ItemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalUseItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalUseItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalUseItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalUseItemReq::MergeFrom(const TActAlcoholFestivalUseItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalUseItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalUseItemReq::CopyFrom(const TActAlcoholFestivalUseItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalUseItemReq::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalUseItemReq::Swap(TActAlcoholFestivalUseItemReq* other) {
  if (other != this) {
    std::swap(tid_, other->tid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalUseItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalUseItemReq_descriptor_;
  metadata.reflection = TActAlcoholFestivalUseItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalGetArrRewardAllRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalGetArrRewardAllRsp::TActAlcoholFestivalGetArrRewardAllRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalGetArrRewardAllRsp)
}

void TActAlcoholFestivalGetArrRewardAllRsp::InitAsDefaultInstance() {
}

TActAlcoholFestivalGetArrRewardAllRsp::TActAlcoholFestivalGetArrRewardAllRsp(const TActAlcoholFestivalGetArrRewardAllRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalGetArrRewardAllRsp)
}

void TActAlcoholFestivalGetArrRewardAllRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalGetArrRewardAllRsp::~TActAlcoholFestivalGetArrRewardAllRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalGetArrRewardAllRsp)
  SharedDtor();
}

void TActAlcoholFestivalGetArrRewardAllRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestivalGetArrRewardAllRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetArrRewardAllRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalGetArrRewardAllRsp_descriptor_;
}

const TActAlcoholFestivalGetArrRewardAllRsp& TActAlcoholFestivalGetArrRewardAllRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalGetArrRewardAllRsp* TActAlcoholFestivalGetArrRewardAllRsp::default_instance_ = NULL;

TActAlcoholFestivalGetArrRewardAllRsp* TActAlcoholFestivalGetArrRewardAllRsp::New() const {
  return new TActAlcoholFestivalGetArrRewardAllRsp;
}

void TActAlcoholFestivalGetArrRewardAllRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalGetArrRewardAllRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalGetArrRewardAllRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalGetArrRewardAllRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalGetArrRewardAllRsp)
  return false;
#undef DO_
}

void TActAlcoholFestivalGetArrRewardAllRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalGetArrRewardAllRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalGetArrRewardAllRsp)
}

::google::protobuf::uint8* TActAlcoholFestivalGetArrRewardAllRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalGetArrRewardAllRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalGetArrRewardAllRsp)
  return target;
}

int TActAlcoholFestivalGetArrRewardAllRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalGetArrRewardAllRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalGetArrRewardAllRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalGetArrRewardAllRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalGetArrRewardAllRsp::MergeFrom(const TActAlcoholFestivalGetArrRewardAllRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalGetArrRewardAllRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalGetArrRewardAllRsp::CopyFrom(const TActAlcoholFestivalGetArrRewardAllRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalGetArrRewardAllRsp::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalGetArrRewardAllRsp::Swap(TActAlcoholFestivalGetArrRewardAllRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalGetArrRewardAllRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalGetArrRewardAllRsp_descriptor_;
  metadata.reflection = TActAlcoholFestivalGetArrRewardAllRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalGetServerTeamInfoRsp::kTeamIdFieldNumber;
const int TActAlcoholFestivalGetServerTeamInfoRsp::kNeedOpenDayFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalGetServerTeamInfoRsp::TActAlcoholFestivalGetServerTeamInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalGetServerTeamInfoRsp)
}

void TActAlcoholFestivalGetServerTeamInfoRsp::InitAsDefaultInstance() {
}

TActAlcoholFestivalGetServerTeamInfoRsp::TActAlcoholFestivalGetServerTeamInfoRsp(const TActAlcoholFestivalGetServerTeamInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalGetServerTeamInfoRsp)
}

void TActAlcoholFestivalGetServerTeamInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  needopenday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalGetServerTeamInfoRsp::~TActAlcoholFestivalGetServerTeamInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalGetServerTeamInfoRsp)
  SharedDtor();
}

void TActAlcoholFestivalGetServerTeamInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestivalGetServerTeamInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetServerTeamInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalGetServerTeamInfoRsp_descriptor_;
}

const TActAlcoholFestivalGetServerTeamInfoRsp& TActAlcoholFestivalGetServerTeamInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalGetServerTeamInfoRsp* TActAlcoholFestivalGetServerTeamInfoRsp::default_instance_ = NULL;

TActAlcoholFestivalGetServerTeamInfoRsp* TActAlcoholFestivalGetServerTeamInfoRsp::New() const {
  return new TActAlcoholFestivalGetServerTeamInfoRsp;
}

void TActAlcoholFestivalGetServerTeamInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActAlcoholFestivalGetServerTeamInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, needopenday_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalGetServerTeamInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalGetServerTeamInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NeedOpenDay;
        break;
      }

      // optional uint32 NeedOpenDay = 2;
      case 2: {
        if (tag == 16) {
         parse_NeedOpenDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needopenday_)));
          set_has_needopenday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalGetServerTeamInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalGetServerTeamInfoRsp)
  return false;
#undef DO_
}

void TActAlcoholFestivalGetServerTeamInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalGetServerTeamInfoRsp)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 NeedOpenDay = 2;
  if (has_needopenday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->needopenday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalGetServerTeamInfoRsp)
}

::google::protobuf::uint8* TActAlcoholFestivalGetServerTeamInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalGetServerTeamInfoRsp)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 NeedOpenDay = 2;
  if (has_needopenday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->needopenday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalGetServerTeamInfoRsp)
  return target;
}

int TActAlcoholFestivalGetServerTeamInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 NeedOpenDay = 2;
    if (has_needopenday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needopenday());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalGetServerTeamInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalGetServerTeamInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalGetServerTeamInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalGetServerTeamInfoRsp::MergeFrom(const TActAlcoholFestivalGetServerTeamInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_needopenday()) {
      set_needopenday(from.needopenday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalGetServerTeamInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalGetServerTeamInfoRsp::CopyFrom(const TActAlcoholFestivalGetServerTeamInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalGetServerTeamInfoRsp::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalGetServerTeamInfoRsp::Swap(TActAlcoholFestivalGetServerTeamInfoRsp* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(needopenday_, other->needopenday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalGetServerTeamInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalGetServerTeamInfoRsp_descriptor_;
  metadata.reflection = TActAlcoholFestivalGetServerTeamInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalRankInfo::kUserInfoFieldNumber;
const int TActAlcoholFestivalRankInfo::kTotalExpFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalRankInfo::TActAlcoholFestivalRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalRankInfo)
}

void TActAlcoholFestivalRankInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TActAlcoholFestivalRankInfo::TActAlcoholFestivalRankInfo(const TActAlcoholFestivalRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalRankInfo)
}

void TActAlcoholFestivalRankInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  totalexp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalRankInfo::~TActAlcoholFestivalRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalRankInfo)
  SharedDtor();
}

void TActAlcoholFestivalRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TActAlcoholFestivalRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalRankInfo_descriptor_;
}

const TActAlcoholFestivalRankInfo& TActAlcoholFestivalRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalRankInfo* TActAlcoholFestivalRankInfo::default_instance_ = NULL;

TActAlcoholFestivalRankInfo* TActAlcoholFestivalRankInfo::New() const {
  return new TActAlcoholFestivalRankInfo;
}

void TActAlcoholFestivalRankInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    totalexp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalExp;
        break;
      }

      // optional uint64 TotalExp = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalRankInfo)
  return false;
#undef DO_
}

void TActAlcoholFestivalRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalRankInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint64 TotalExp = 2;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->totalexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalRankInfo)
}

::google::protobuf::uint8* TActAlcoholFestivalRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalRankInfo)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint64 TotalExp = 2;
  if (has_totalexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->totalexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalRankInfo)
  return target;
}

int TActAlcoholFestivalRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint64 TotalExp = 2;
    if (has_totalexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totalexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalRankInfo::MergeFrom(const TActAlcoholFestivalRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalRankInfo::CopyFrom(const TActAlcoholFestivalRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalRankInfo::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalRankInfo::Swap(TActAlcoholFestivalRankInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(totalexp_, other->totalexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalRankInfo_descriptor_;
  metadata.reflection = TActAlcoholFestivalRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalGetRankListReq::kOffsetFieldNumber;
const int TActAlcoholFestivalGetRankListReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalGetRankListReq::TActAlcoholFestivalGetRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalGetRankListReq)
}

void TActAlcoholFestivalGetRankListReq::InitAsDefaultInstance() {
}

TActAlcoholFestivalGetRankListReq::TActAlcoholFestivalGetRankListReq(const TActAlcoholFestivalGetRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalGetRankListReq)
}

void TActAlcoholFestivalGetRankListReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalGetRankListReq::~TActAlcoholFestivalGetRankListReq() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalGetRankListReq)
  SharedDtor();
}

void TActAlcoholFestivalGetRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestivalGetRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalGetRankListReq_descriptor_;
}

const TActAlcoholFestivalGetRankListReq& TActAlcoholFestivalGetRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalGetRankListReq* TActAlcoholFestivalGetRankListReq::default_instance_ = NULL;

TActAlcoholFestivalGetRankListReq* TActAlcoholFestivalGetRankListReq::New() const {
  return new TActAlcoholFestivalGetRankListReq;
}

void TActAlcoholFestivalGetRankListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActAlcoholFestivalGetRankListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalGetRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalGetRankListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalGetRankListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalGetRankListReq)
  return false;
#undef DO_
}

void TActAlcoholFestivalGetRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalGetRankListReq)
}

::google::protobuf::uint8* TActAlcoholFestivalGetRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalGetRankListReq)
  return target;
}

int TActAlcoholFestivalGetRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalGetRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalGetRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalGetRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalGetRankListReq::MergeFrom(const TActAlcoholFestivalGetRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalGetRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalGetRankListReq::CopyFrom(const TActAlcoholFestivalGetRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalGetRankListReq::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalGetRankListReq::Swap(TActAlcoholFestivalGetRankListReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalGetRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalGetRankListReq_descriptor_;
  metadata.reflection = TActAlcoholFestivalGetRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalGetRankListRsp::kRankListFieldNumber;
const int TActAlcoholFestivalGetRankListRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalGetRankListRsp::TActAlcoholFestivalGetRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalGetRankListRsp)
}

void TActAlcoholFestivalGetRankListRsp::InitAsDefaultInstance() {
}

TActAlcoholFestivalGetRankListRsp::TActAlcoholFestivalGetRankListRsp(const TActAlcoholFestivalGetRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalGetRankListRsp)
}

void TActAlcoholFestivalGetRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalGetRankListRsp::~TActAlcoholFestivalGetRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalGetRankListRsp)
  SharedDtor();
}

void TActAlcoholFestivalGetRankListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAlcoholFestivalGetRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalGetRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalGetRankListRsp_descriptor_;
}

const TActAlcoholFestivalGetRankListRsp& TActAlcoholFestivalGetRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalGetRankListRsp* TActAlcoholFestivalGetRankListRsp::default_instance_ = NULL;

TActAlcoholFestivalGetRankListRsp* TActAlcoholFestivalGetRankListRsp::New() const {
  return new TActAlcoholFestivalGetRankListRsp;
}

void TActAlcoholFestivalGetRankListRsp::Clear() {
  myrank_ = 0u;
  ranklist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalGetRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalGetRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActAlcoholFestivalRankInfo RankList = 1;
      case 1: {
        if (tag == 10) {
         parse_RankList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranklist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankList;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional uint32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalGetRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalGetRankListRsp)
  return false;
#undef DO_
}

void TActAlcoholFestivalGetRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalGetRankListRsp)
  // repeated .pb.TActAlcoholFestivalRankInfo RankList = 1;
  for (int i = 0; i < this->ranklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranklist(i), output);
  }

  // optional uint32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalGetRankListRsp)
}

::google::protobuf::uint8* TActAlcoholFestivalGetRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalGetRankListRsp)
  // repeated .pb.TActAlcoholFestivalRankInfo RankList = 1;
  for (int i = 0; i < this->ranklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranklist(i), target);
  }

  // optional uint32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalGetRankListRsp)
  return target;
}

int TActAlcoholFestivalGetRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .pb.TActAlcoholFestivalRankInfo RankList = 1;
  total_size += 1 * this->ranklist_size();
  for (int i = 0; i < this->ranklist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranklist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalGetRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalGetRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalGetRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalGetRankListRsp::MergeFrom(const TActAlcoholFestivalGetRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranklist_.MergeFrom(from.ranklist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalGetRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalGetRankListRsp::CopyFrom(const TActAlcoholFestivalGetRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalGetRankListRsp::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalGetRankListRsp::Swap(TActAlcoholFestivalGetRankListRsp* other) {
  if (other != this) {
    ranklist_.Swap(&other->ranklist_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalGetRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalGetRankListRsp_descriptor_;
  metadata.reflection = TActAlcoholFestivalGetRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAlcoholFestivalNotify::kPushMsgFieldNumber;
#endif  // !_MSC_VER

TActAlcoholFestivalNotify::TActAlcoholFestivalNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAlcoholFestivalNotify)
}

void TActAlcoholFestivalNotify::InitAsDefaultInstance() {
  pushmsg_ = const_cast< ::pb::TActAlcoholFestival*>(&::pb::TActAlcoholFestival::default_instance());
}

TActAlcoholFestivalNotify::TActAlcoholFestivalNotify(const TActAlcoholFestivalNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAlcoholFestivalNotify)
}

void TActAlcoholFestivalNotify::SharedCtor() {
  _cached_size_ = 0;
  pushmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAlcoholFestivalNotify::~TActAlcoholFestivalNotify() {
  // @@protoc_insertion_point(destructor:pb.TActAlcoholFestivalNotify)
  SharedDtor();
}

void TActAlcoholFestivalNotify::SharedDtor() {
  if (this != default_instance_) {
    delete pushmsg_;
  }
}

void TActAlcoholFestivalNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAlcoholFestivalNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAlcoholFestivalNotify_descriptor_;
}

const TActAlcoholFestivalNotify& TActAlcoholFestivalNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAlcoholFestival_2eproto();
  return *default_instance_;
}

TActAlcoholFestivalNotify* TActAlcoholFestivalNotify::default_instance_ = NULL;

TActAlcoholFestivalNotify* TActAlcoholFestivalNotify::New() const {
  return new TActAlcoholFestivalNotify;
}

void TActAlcoholFestivalNotify::Clear() {
  if (has_pushmsg()) {
    if (pushmsg_ != NULL) pushmsg_->::pb::TActAlcoholFestival::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAlcoholFestivalNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAlcoholFestivalNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TActAlcoholFestival PushMsg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pushmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAlcoholFestivalNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAlcoholFestivalNotify)
  return false;
#undef DO_
}

void TActAlcoholFestivalNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAlcoholFestivalNotify)
  // optional .pb.TActAlcoholFestival PushMsg = 1;
  if (has_pushmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pushmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAlcoholFestivalNotify)
}

::google::protobuf::uint8* TActAlcoholFestivalNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAlcoholFestivalNotify)
  // optional .pb.TActAlcoholFestival PushMsg = 1;
  if (has_pushmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pushmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAlcoholFestivalNotify)
  return target;
}

int TActAlcoholFestivalNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TActAlcoholFestival PushMsg = 1;
    if (has_pushmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pushmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAlcoholFestivalNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAlcoholFestivalNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAlcoholFestivalNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAlcoholFestivalNotify::MergeFrom(const TActAlcoholFestivalNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pushmsg()) {
      mutable_pushmsg()->::pb::TActAlcoholFestival::MergeFrom(from.pushmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAlcoholFestivalNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAlcoholFestivalNotify::CopyFrom(const TActAlcoholFestivalNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAlcoholFestivalNotify::IsInitialized() const {

  return true;
}

void TActAlcoholFestivalNotify::Swap(TActAlcoholFestivalNotify* other) {
  if (other != this) {
    std::swap(pushmsg_, other->pushmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAlcoholFestivalNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAlcoholFestivalNotify_descriptor_;
  metadata.reflection = TActAlcoholFestivalNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
