// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActCelebration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActCelebration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActCelebrationBuyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationBuyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationBuyGoodsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationBuyGoodsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationBuyGoodsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationBuyGoodsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationGetTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationGetTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationGetTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationGetTaskRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationExchangeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationExchangeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActCelebration_2eproto() {
  protobuf_AddDesc_net_2fActCelebration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActCelebration.proto");
  GOOGLE_CHECK(file != NULL);
  TActCelebrationBuyInfo_descriptor_ = file->message_type(0);
  static const int TActCelebrationBuyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyInfo, buytime_),
  };
  TActCelebrationBuyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationBuyInfo_descriptor_,
      TActCelebrationBuyInfo::default_instance_,
      TActCelebrationBuyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationBuyInfo));
  TActCelebrationTaskInfo_descriptor_ = file->message_type(1);
  static const int TActCelebrationTaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTaskInfo, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTaskInfo, num_),
  };
  TActCelebrationTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationTaskInfo_descriptor_,
      TActCelebrationTaskInfo::default_instance_,
      TActCelebrationTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationTaskInfo));
  TActCelebrationGetInfoRsp_descriptor_ = file->message_type(2);
  static const int TActCelebrationGetInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetInfoRsp, arrrmbgoodbuyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetInfoRsp, arrgoodbuyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetInfoRsp, arrtaskrewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetInfoRsp, arrexchangedinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetInfoRsp, arrtaskinfo_),
  };
  TActCelebrationGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationGetInfoRsp_descriptor_,
      TActCelebrationGetInfoRsp::default_instance_,
      TActCelebrationGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationGetInfoRsp));
  TActCelebrationBuyGoodsReq_descriptor_ = file->message_type(3);
  static const int TActCelebrationBuyGoodsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyGoodsReq, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyGoodsReq, num_),
  };
  TActCelebrationBuyGoodsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationBuyGoodsReq_descriptor_,
      TActCelebrationBuyGoodsReq::default_instance_,
      TActCelebrationBuyGoodsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyGoodsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyGoodsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationBuyGoodsReq));
  TActCelebrationBuyGoodsRsp_descriptor_ = file->message_type(4);
  static const int TActCelebrationBuyGoodsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyGoodsRsp, arrreward_),
  };
  TActCelebrationBuyGoodsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationBuyGoodsRsp_descriptor_,
      TActCelebrationBuyGoodsRsp::default_instance_,
      TActCelebrationBuyGoodsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyGoodsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationBuyGoodsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationBuyGoodsRsp));
  TActCelebrationGetTaskRewardReq_descriptor_ = file->message_type(5);
  static const int TActCelebrationGetTaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetTaskRewardReq, taskid_),
  };
  TActCelebrationGetTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationGetTaskRewardReq_descriptor_,
      TActCelebrationGetTaskRewardReq::default_instance_,
      TActCelebrationGetTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationGetTaskRewardReq));
  TActCelebrationGetTaskRewardRsp_descriptor_ = file->message_type(6);
  static const int TActCelebrationGetTaskRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetTaskRewardRsp, arrreward_),
  };
  TActCelebrationGetTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationGetTaskRewardRsp_descriptor_,
      TActCelebrationGetTaskRewardRsp::default_instance_,
      TActCelebrationGetTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationGetTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationGetTaskRewardRsp));
  TActCelebrationExchangeReq_descriptor_ = file->message_type(7);
  static const int TActCelebrationExchangeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationExchangeReq, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationExchangeReq, num_),
  };
  TActCelebrationExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationExchangeReq_descriptor_,
      TActCelebrationExchangeReq::default_instance_,
      TActCelebrationExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationExchangeReq));
  TActCelebrationExchangeRsp_descriptor_ = file->message_type(8);
  static const int TActCelebrationExchangeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationExchangeRsp, arrreward_),
  };
  TActCelebrationExchangeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationExchangeRsp_descriptor_,
      TActCelebrationExchangeRsp::default_instance_,
      TActCelebrationExchangeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationExchangeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationExchangeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationExchangeRsp));
  TActCelebrationNotify_descriptor_ = file->message_type(9);
  static const int TActCelebrationNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationNotify, arrrmbgoodbuyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationNotify, arrtaskinfo_),
  };
  TActCelebrationNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationNotify_descriptor_,
      TActCelebrationNotify::default_instance_,
      TActCelebrationNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActCelebration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationBuyInfo_descriptor_, &TActCelebrationBuyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationTaskInfo_descriptor_, &TActCelebrationTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationGetInfoRsp_descriptor_, &TActCelebrationGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationBuyGoodsReq_descriptor_, &TActCelebrationBuyGoodsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationBuyGoodsRsp_descriptor_, &TActCelebrationBuyGoodsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationGetTaskRewardReq_descriptor_, &TActCelebrationGetTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationGetTaskRewardRsp_descriptor_, &TActCelebrationGetTaskRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationExchangeReq_descriptor_, &TActCelebrationExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationExchangeRsp_descriptor_, &TActCelebrationExchangeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationNotify_descriptor_, &TActCelebrationNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActCelebration_2eproto() {
  delete TActCelebrationBuyInfo::default_instance_;
  delete TActCelebrationBuyInfo_reflection_;
  delete TActCelebrationTaskInfo::default_instance_;
  delete TActCelebrationTaskInfo_reflection_;
  delete TActCelebrationGetInfoRsp::default_instance_;
  delete TActCelebrationGetInfoRsp_reflection_;
  delete TActCelebrationBuyGoodsReq::default_instance_;
  delete TActCelebrationBuyGoodsReq_reflection_;
  delete TActCelebrationBuyGoodsRsp::default_instance_;
  delete TActCelebrationBuyGoodsRsp_reflection_;
  delete TActCelebrationGetTaskRewardReq::default_instance_;
  delete TActCelebrationGetTaskRewardReq_reflection_;
  delete TActCelebrationGetTaskRewardRsp::default_instance_;
  delete TActCelebrationGetTaskRewardRsp_reflection_;
  delete TActCelebrationExchangeReq::default_instance_;
  delete TActCelebrationExchangeReq_reflection_;
  delete TActCelebrationExchangeRsp::default_instance_;
  delete TActCelebrationExchangeRsp_reflection_;
  delete TActCelebrationNotify::default_instance_;
  delete TActCelebrationNotify_reflection_;
}

void protobuf_AddDesc_net_2fActCelebration_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fOpenActivity_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/ActCelebration.proto\022\002pb\032\026net/Comm"
    "onReward.proto\032\026net/OpenActivity.proto\"B"
    "\n\026TActCelebrationBuyInfo\022\n\n\002Id\030\001 \001(\r\022\013\n\003"
    "Num\030\002 \001(\r\022\017\n\007BuyTime\030\003 \001(\004\"8\n\027TActCelebr"
    "ationTaskInfo\022\020\n\010TaskType\030\001 \001(\r\022\013\n\003Num\030\002"
    " \001(\r\"\242\002\n\031TActCelebrationGetInfoRsp\0225\n\021Ar"
    "rRmbGoodBuyInfo\030\001 \003(\0132\032.pb.TActCelebrati"
    "onBuyInfo\0222\n\016ArrGoodBuyInfo\030\002 \003(\0132\032.pb.T"
    "ActCelebrationBuyInfo\0222\n\021ArrTaskRewardIn"
    "fo\030\003 \003(\0132\027.pb.TActivityRewardInfo\0224\n\020Arr"
    "ExchangedInfo\030\004 \003(\0132\032.pb.TActCelebration"
    "BuyInfo\0220\n\013ArrTaskInfo\030\005 \003(\0132\033.pb.TActCe"
    "lebrationTaskInfo\"9\n\032TActCelebrationBuyG"
    "oodsReq\022\016\n\006GoodId\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\"B\n\032"
    "TActCelebrationBuyGoodsRsp\022$\n\tArrReward\030"
    "\001 \003(\0132\021.pb.TCommonReward\"1\n\037TActCelebrat"
    "ionGetTaskRewardReq\022\016\n\006TaskId\030\001 \001(\r\"G\n\037T"
    "ActCelebrationGetTaskRewardRsp\022$\n\tArrRew"
    "ard\030\001 \003(\0132\021.pb.TCommonReward\"=\n\032TActCele"
    "brationExchangeReq\022\022\n\nExchangeId\030\001 \001(\r\022\013"
    "\n\003Num\030\002 \001(\r\"B\n\032TActCelebrationExchangeRs"
    "p\022$\n\tArrReward\030\001 \003(\0132\021.pb.TCommonReward\""
    "\200\001\n\025TActCelebrationNotify\0225\n\021ArrRmbGoodB"
    "uyInfo\030\001 \003(\0132\032.pb.TActCelebrationBuyInfo"
    "\0220\n\013ArrTaskInfo\030\002 \003(\0132\033.pb.TActCelebrati"
    "onTaskInfo", 1010);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActCelebration.proto", &protobuf_RegisterTypes);
  TActCelebrationBuyInfo::default_instance_ = new TActCelebrationBuyInfo();
  TActCelebrationTaskInfo::default_instance_ = new TActCelebrationTaskInfo();
  TActCelebrationGetInfoRsp::default_instance_ = new TActCelebrationGetInfoRsp();
  TActCelebrationBuyGoodsReq::default_instance_ = new TActCelebrationBuyGoodsReq();
  TActCelebrationBuyGoodsRsp::default_instance_ = new TActCelebrationBuyGoodsRsp();
  TActCelebrationGetTaskRewardReq::default_instance_ = new TActCelebrationGetTaskRewardReq();
  TActCelebrationGetTaskRewardRsp::default_instance_ = new TActCelebrationGetTaskRewardRsp();
  TActCelebrationExchangeReq::default_instance_ = new TActCelebrationExchangeReq();
  TActCelebrationExchangeRsp::default_instance_ = new TActCelebrationExchangeRsp();
  TActCelebrationNotify::default_instance_ = new TActCelebrationNotify();
  TActCelebrationBuyInfo::default_instance_->InitAsDefaultInstance();
  TActCelebrationTaskInfo::default_instance_->InitAsDefaultInstance();
  TActCelebrationGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActCelebrationBuyGoodsReq::default_instance_->InitAsDefaultInstance();
  TActCelebrationBuyGoodsRsp::default_instance_->InitAsDefaultInstance();
  TActCelebrationGetTaskRewardReq::default_instance_->InitAsDefaultInstance();
  TActCelebrationGetTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  TActCelebrationExchangeReq::default_instance_->InitAsDefaultInstance();
  TActCelebrationExchangeRsp::default_instance_->InitAsDefaultInstance();
  TActCelebrationNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActCelebration_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActCelebration_2eproto {
  StaticDescriptorInitializer_net_2fActCelebration_2eproto() {
    protobuf_AddDesc_net_2fActCelebration_2eproto();
  }
} static_descriptor_initializer_net_2fActCelebration_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationBuyInfo::kIdFieldNumber;
const int TActCelebrationBuyInfo::kNumFieldNumber;
const int TActCelebrationBuyInfo::kBuyTimeFieldNumber;
#endif  // !_MSC_VER

TActCelebrationBuyInfo::TActCelebrationBuyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationBuyInfo)
}

void TActCelebrationBuyInfo::InitAsDefaultInstance() {
}

TActCelebrationBuyInfo::TActCelebrationBuyInfo(const TActCelebrationBuyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationBuyInfo)
}

void TActCelebrationBuyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  buytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationBuyInfo::~TActCelebrationBuyInfo() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationBuyInfo)
  SharedDtor();
}

void TActCelebrationBuyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationBuyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationBuyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationBuyInfo_descriptor_;
}

const TActCelebrationBuyInfo& TActCelebrationBuyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebration_2eproto();
  return *default_instance_;
}

TActCelebrationBuyInfo* TActCelebrationBuyInfo::default_instance_ = NULL;

TActCelebrationBuyInfo* TActCelebrationBuyInfo::New() const {
  return new TActCelebrationBuyInfo;
}

void TActCelebrationBuyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActCelebrationBuyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationBuyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationBuyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuyTime;
        break;
      }

      // optional uint64 BuyTime = 3;
      case 3: {
        if (tag == 24) {
         parse_BuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationBuyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationBuyInfo)
  return false;
#undef DO_
}

void TActCelebrationBuyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationBuyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint64 BuyTime = 3;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->buytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationBuyInfo)
}

::google::protobuf::uint8* TActCelebrationBuyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationBuyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint64 BuyTime = 3;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->buytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationBuyInfo)
  return target;
}

int TActCelebrationBuyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint64 BuyTime = 3;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationBuyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationBuyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationBuyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationBuyInfo::MergeFrom(const TActCelebrationBuyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationBuyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationBuyInfo::CopyFrom(const TActCelebrationBuyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationBuyInfo::IsInitialized() const {

  return true;
}

void TActCelebrationBuyInfo::Swap(TActCelebrationBuyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(buytime_, other->buytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationBuyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationBuyInfo_descriptor_;
  metadata.reflection = TActCelebrationBuyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationTaskInfo::kTaskTypeFieldNumber;
const int TActCelebrationTaskInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TActCelebrationTaskInfo::TActCelebrationTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationTaskInfo)
}

void TActCelebrationTaskInfo::InitAsDefaultInstance() {
}

TActCelebrationTaskInfo::TActCelebrationTaskInfo(const TActCelebrationTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationTaskInfo)
}

void TActCelebrationTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationTaskInfo::~TActCelebrationTaskInfo() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationTaskInfo)
  SharedDtor();
}

void TActCelebrationTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationTaskInfo_descriptor_;
}

const TActCelebrationTaskInfo& TActCelebrationTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebration_2eproto();
  return *default_instance_;
}

TActCelebrationTaskInfo* TActCelebrationTaskInfo::default_instance_ = NULL;

TActCelebrationTaskInfo* TActCelebrationTaskInfo::New() const {
  return new TActCelebrationTaskInfo;
}

void TActCelebrationTaskInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActCelebrationTaskInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tasktype_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationTaskInfo)
  return false;
#undef DO_
}

void TActCelebrationTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationTaskInfo)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tasktype(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationTaskInfo)
}

::google::protobuf::uint8* TActCelebrationTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationTaskInfo)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tasktype(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationTaskInfo)
  return target;
}

int TActCelebrationTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskType = 1;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationTaskInfo::MergeFrom(const TActCelebrationTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationTaskInfo::CopyFrom(const TActCelebrationTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationTaskInfo::IsInitialized() const {

  return true;
}

void TActCelebrationTaskInfo::Swap(TActCelebrationTaskInfo* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationTaskInfo_descriptor_;
  metadata.reflection = TActCelebrationTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationGetInfoRsp::kArrRmbGoodBuyInfoFieldNumber;
const int TActCelebrationGetInfoRsp::kArrGoodBuyInfoFieldNumber;
const int TActCelebrationGetInfoRsp::kArrTaskRewardInfoFieldNumber;
const int TActCelebrationGetInfoRsp::kArrExchangedInfoFieldNumber;
const int TActCelebrationGetInfoRsp::kArrTaskInfoFieldNumber;
#endif  // !_MSC_VER

TActCelebrationGetInfoRsp::TActCelebrationGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationGetInfoRsp)
}

void TActCelebrationGetInfoRsp::InitAsDefaultInstance() {
}

TActCelebrationGetInfoRsp::TActCelebrationGetInfoRsp(const TActCelebrationGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationGetInfoRsp)
}

void TActCelebrationGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationGetInfoRsp::~TActCelebrationGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationGetInfoRsp)
  SharedDtor();
}

void TActCelebrationGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationGetInfoRsp_descriptor_;
}

const TActCelebrationGetInfoRsp& TActCelebrationGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebration_2eproto();
  return *default_instance_;
}

TActCelebrationGetInfoRsp* TActCelebrationGetInfoRsp::default_instance_ = NULL;

TActCelebrationGetInfoRsp* TActCelebrationGetInfoRsp::New() const {
  return new TActCelebrationGetInfoRsp;
}

void TActCelebrationGetInfoRsp::Clear() {
  arrrmbgoodbuyinfo_.Clear();
  arrgoodbuyinfo_.Clear();
  arrtaskrewardinfo_.Clear();
  arrexchangedinfo_.Clear();
  arrtaskinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRmbGoodBuyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbgoodbuyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRmbGoodBuyInfo;
        if (input->ExpectTag(18)) goto parse_ArrGoodBuyInfo;
        break;
      }

      // repeated .pb.TActCelebrationBuyInfo ArrGoodBuyInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrGoodBuyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrgoodbuyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrGoodBuyInfo;
        if (input->ExpectTag(26)) goto parse_ArrTaskRewardInfo;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrTaskRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrTaskRewardInfo;
        if (input->ExpectTag(34)) goto parse_ArrExchangedInfo;
        break;
      }

      // repeated .pb.TActCelebrationBuyInfo ArrExchangedInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrExchangedInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrexchangedinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrExchangedInfo;
        if (input->ExpectTag(42)) goto parse_ArrTaskInfo;
        break;
      }

      // repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_ArrTaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ArrTaskInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationGetInfoRsp)
  return false;
#undef DO_
}

void TActCelebrationGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationGetInfoRsp)
  // repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrmbgoodbuyinfo(i), output);
  }

  // repeated .pb.TActCelebrationBuyInfo ArrGoodBuyInfo = 2;
  for (int i = 0; i < this->arrgoodbuyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrgoodbuyinfo(i), output);
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrtaskrewardinfo(i), output);
  }

  // repeated .pb.TActCelebrationBuyInfo ArrExchangedInfo = 4;
  for (int i = 0; i < this->arrexchangedinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrexchangedinfo(i), output);
  }

  // repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 5;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arrtaskinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationGetInfoRsp)
}

::google::protobuf::uint8* TActCelebrationGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationGetInfoRsp)
  // repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrmbgoodbuyinfo(i), target);
  }

  // repeated .pb.TActCelebrationBuyInfo ArrGoodBuyInfo = 2;
  for (int i = 0; i < this->arrgoodbuyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrgoodbuyinfo(i), target);
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrtaskrewardinfo(i), target);
  }

  // repeated .pb.TActCelebrationBuyInfo ArrExchangedInfo = 4;
  for (int i = 0; i < this->arrexchangedinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrexchangedinfo(i), target);
  }

  // repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 5;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arrtaskinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationGetInfoRsp)
  return target;
}

int TActCelebrationGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
  total_size += 1 * this->arrrmbgoodbuyinfo_size();
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbgoodbuyinfo(i));
  }

  // repeated .pb.TActCelebrationBuyInfo ArrGoodBuyInfo = 2;
  total_size += 1 * this->arrgoodbuyinfo_size();
  for (int i = 0; i < this->arrgoodbuyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrgoodbuyinfo(i));
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
  total_size += 1 * this->arrtaskrewardinfo_size();
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskrewardinfo(i));
  }

  // repeated .pb.TActCelebrationBuyInfo ArrExchangedInfo = 4;
  total_size += 1 * this->arrexchangedinfo_size();
  for (int i = 0; i < this->arrexchangedinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrexchangedinfo(i));
  }

  // repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 5;
  total_size += 1 * this->arrtaskinfo_size();
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationGetInfoRsp::MergeFrom(const TActCelebrationGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrmbgoodbuyinfo_.MergeFrom(from.arrrmbgoodbuyinfo_);
  arrgoodbuyinfo_.MergeFrom(from.arrgoodbuyinfo_);
  arrtaskrewardinfo_.MergeFrom(from.arrtaskrewardinfo_);
  arrexchangedinfo_.MergeFrom(from.arrexchangedinfo_);
  arrtaskinfo_.MergeFrom(from.arrtaskinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationGetInfoRsp::CopyFrom(const TActCelebrationGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationGetInfoRsp::IsInitialized() const {

  return true;
}

void TActCelebrationGetInfoRsp::Swap(TActCelebrationGetInfoRsp* other) {
  if (other != this) {
    arrrmbgoodbuyinfo_.Swap(&other->arrrmbgoodbuyinfo_);
    arrgoodbuyinfo_.Swap(&other->arrgoodbuyinfo_);
    arrtaskrewardinfo_.Swap(&other->arrtaskrewardinfo_);
    arrexchangedinfo_.Swap(&other->arrexchangedinfo_);
    arrtaskinfo_.Swap(&other->arrtaskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationGetInfoRsp_descriptor_;
  metadata.reflection = TActCelebrationGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationBuyGoodsReq::kGoodIdFieldNumber;
const int TActCelebrationBuyGoodsReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActCelebrationBuyGoodsReq::TActCelebrationBuyGoodsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationBuyGoodsReq)
}

void TActCelebrationBuyGoodsReq::InitAsDefaultInstance() {
}

TActCelebrationBuyGoodsReq::TActCelebrationBuyGoodsReq(const TActCelebrationBuyGoodsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationBuyGoodsReq)
}

void TActCelebrationBuyGoodsReq::SharedCtor() {
  _cached_size_ = 0;
  goodid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationBuyGoodsReq::~TActCelebrationBuyGoodsReq() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationBuyGoodsReq)
  SharedDtor();
}

void TActCelebrationBuyGoodsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationBuyGoodsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationBuyGoodsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationBuyGoodsReq_descriptor_;
}

const TActCelebrationBuyGoodsReq& TActCelebrationBuyGoodsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebration_2eproto();
  return *default_instance_;
}

TActCelebrationBuyGoodsReq* TActCelebrationBuyGoodsReq::default_instance_ = NULL;

TActCelebrationBuyGoodsReq* TActCelebrationBuyGoodsReq::New() const {
  return new TActCelebrationBuyGoodsReq;
}

void TActCelebrationBuyGoodsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActCelebrationBuyGoodsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(goodid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationBuyGoodsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationBuyGoodsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GoodId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationBuyGoodsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationBuyGoodsReq)
  return false;
#undef DO_
}

void TActCelebrationBuyGoodsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationBuyGoodsReq)
  // optional uint32 GoodId = 1;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goodid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationBuyGoodsReq)
}

::google::protobuf::uint8* TActCelebrationBuyGoodsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationBuyGoodsReq)
  // optional uint32 GoodId = 1;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goodid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationBuyGoodsReq)
  return target;
}

int TActCelebrationBuyGoodsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GoodId = 1;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationBuyGoodsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationBuyGoodsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationBuyGoodsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationBuyGoodsReq::MergeFrom(const TActCelebrationBuyGoodsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationBuyGoodsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationBuyGoodsReq::CopyFrom(const TActCelebrationBuyGoodsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationBuyGoodsReq::IsInitialized() const {

  return true;
}

void TActCelebrationBuyGoodsReq::Swap(TActCelebrationBuyGoodsReq* other) {
  if (other != this) {
    std::swap(goodid_, other->goodid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationBuyGoodsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationBuyGoodsReq_descriptor_;
  metadata.reflection = TActCelebrationBuyGoodsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationBuyGoodsRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActCelebrationBuyGoodsRsp::TActCelebrationBuyGoodsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationBuyGoodsRsp)
}

void TActCelebrationBuyGoodsRsp::InitAsDefaultInstance() {
}

TActCelebrationBuyGoodsRsp::TActCelebrationBuyGoodsRsp(const TActCelebrationBuyGoodsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationBuyGoodsRsp)
}

void TActCelebrationBuyGoodsRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationBuyGoodsRsp::~TActCelebrationBuyGoodsRsp() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationBuyGoodsRsp)
  SharedDtor();
}

void TActCelebrationBuyGoodsRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationBuyGoodsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationBuyGoodsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationBuyGoodsRsp_descriptor_;
}

const TActCelebrationBuyGoodsRsp& TActCelebrationBuyGoodsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebration_2eproto();
  return *default_instance_;
}

TActCelebrationBuyGoodsRsp* TActCelebrationBuyGoodsRsp::default_instance_ = NULL;

TActCelebrationBuyGoodsRsp* TActCelebrationBuyGoodsRsp::New() const {
  return new TActCelebrationBuyGoodsRsp;
}

void TActCelebrationBuyGoodsRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationBuyGoodsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationBuyGoodsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationBuyGoodsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationBuyGoodsRsp)
  return false;
#undef DO_
}

void TActCelebrationBuyGoodsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationBuyGoodsRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationBuyGoodsRsp)
}

::google::protobuf::uint8* TActCelebrationBuyGoodsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationBuyGoodsRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationBuyGoodsRsp)
  return target;
}

int TActCelebrationBuyGoodsRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationBuyGoodsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationBuyGoodsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationBuyGoodsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationBuyGoodsRsp::MergeFrom(const TActCelebrationBuyGoodsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationBuyGoodsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationBuyGoodsRsp::CopyFrom(const TActCelebrationBuyGoodsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationBuyGoodsRsp::IsInitialized() const {

  return true;
}

void TActCelebrationBuyGoodsRsp::Swap(TActCelebrationBuyGoodsRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationBuyGoodsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationBuyGoodsRsp_descriptor_;
  metadata.reflection = TActCelebrationBuyGoodsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationGetTaskRewardReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

TActCelebrationGetTaskRewardReq::TActCelebrationGetTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationGetTaskRewardReq)
}

void TActCelebrationGetTaskRewardReq::InitAsDefaultInstance() {
}

TActCelebrationGetTaskRewardReq::TActCelebrationGetTaskRewardReq(const TActCelebrationGetTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationGetTaskRewardReq)
}

void TActCelebrationGetTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationGetTaskRewardReq::~TActCelebrationGetTaskRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationGetTaskRewardReq)
  SharedDtor();
}

void TActCelebrationGetTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationGetTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationGetTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationGetTaskRewardReq_descriptor_;
}

const TActCelebrationGetTaskRewardReq& TActCelebrationGetTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebration_2eproto();
  return *default_instance_;
}

TActCelebrationGetTaskRewardReq* TActCelebrationGetTaskRewardReq::default_instance_ = NULL;

TActCelebrationGetTaskRewardReq* TActCelebrationGetTaskRewardReq::New() const {
  return new TActCelebrationGetTaskRewardReq;
}

void TActCelebrationGetTaskRewardReq::Clear() {
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationGetTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationGetTaskRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationGetTaskRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationGetTaskRewardReq)
  return false;
#undef DO_
}

void TActCelebrationGetTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationGetTaskRewardReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationGetTaskRewardReq)
}

::google::protobuf::uint8* TActCelebrationGetTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationGetTaskRewardReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationGetTaskRewardReq)
  return target;
}

int TActCelebrationGetTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationGetTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationGetTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationGetTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationGetTaskRewardReq::MergeFrom(const TActCelebrationGetTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationGetTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationGetTaskRewardReq::CopyFrom(const TActCelebrationGetTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationGetTaskRewardReq::IsInitialized() const {

  return true;
}

void TActCelebrationGetTaskRewardReq::Swap(TActCelebrationGetTaskRewardReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationGetTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationGetTaskRewardReq_descriptor_;
  metadata.reflection = TActCelebrationGetTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationGetTaskRewardRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActCelebrationGetTaskRewardRsp::TActCelebrationGetTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationGetTaskRewardRsp)
}

void TActCelebrationGetTaskRewardRsp::InitAsDefaultInstance() {
}

TActCelebrationGetTaskRewardRsp::TActCelebrationGetTaskRewardRsp(const TActCelebrationGetTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationGetTaskRewardRsp)
}

void TActCelebrationGetTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationGetTaskRewardRsp::~TActCelebrationGetTaskRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationGetTaskRewardRsp)
  SharedDtor();
}

void TActCelebrationGetTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationGetTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationGetTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationGetTaskRewardRsp_descriptor_;
}

const TActCelebrationGetTaskRewardRsp& TActCelebrationGetTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebration_2eproto();
  return *default_instance_;
}

TActCelebrationGetTaskRewardRsp* TActCelebrationGetTaskRewardRsp::default_instance_ = NULL;

TActCelebrationGetTaskRewardRsp* TActCelebrationGetTaskRewardRsp::New() const {
  return new TActCelebrationGetTaskRewardRsp;
}

void TActCelebrationGetTaskRewardRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationGetTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationGetTaskRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationGetTaskRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationGetTaskRewardRsp)
  return false;
#undef DO_
}

void TActCelebrationGetTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationGetTaskRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationGetTaskRewardRsp)
}

::google::protobuf::uint8* TActCelebrationGetTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationGetTaskRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationGetTaskRewardRsp)
  return target;
}

int TActCelebrationGetTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationGetTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationGetTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationGetTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationGetTaskRewardRsp::MergeFrom(const TActCelebrationGetTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationGetTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationGetTaskRewardRsp::CopyFrom(const TActCelebrationGetTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationGetTaskRewardRsp::IsInitialized() const {

  return true;
}

void TActCelebrationGetTaskRewardRsp::Swap(TActCelebrationGetTaskRewardRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationGetTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationGetTaskRewardRsp_descriptor_;
  metadata.reflection = TActCelebrationGetTaskRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationExchangeReq::kExchangeIdFieldNumber;
const int TActCelebrationExchangeReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActCelebrationExchangeReq::TActCelebrationExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationExchangeReq)
}

void TActCelebrationExchangeReq::InitAsDefaultInstance() {
}

TActCelebrationExchangeReq::TActCelebrationExchangeReq(const TActCelebrationExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationExchangeReq)
}

void TActCelebrationExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  exchangeid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationExchangeReq::~TActCelebrationExchangeReq() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationExchangeReq)
  SharedDtor();
}

void TActCelebrationExchangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationExchangeReq_descriptor_;
}

const TActCelebrationExchangeReq& TActCelebrationExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebration_2eproto();
  return *default_instance_;
}

TActCelebrationExchangeReq* TActCelebrationExchangeReq::default_instance_ = NULL;

TActCelebrationExchangeReq* TActCelebrationExchangeReq::New() const {
  return new TActCelebrationExchangeReq;
}

void TActCelebrationExchangeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActCelebrationExchangeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(exchangeid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationExchangeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ExchangeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchangeid_)));
          set_has_exchangeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationExchangeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationExchangeReq)
  return false;
#undef DO_
}

void TActCelebrationExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationExchangeReq)
  // optional uint32 ExchangeId = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchangeid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationExchangeReq)
}

::google::protobuf::uint8* TActCelebrationExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationExchangeReq)
  // optional uint32 ExchangeId = 1;
  if (has_exchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchangeid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationExchangeReq)
  return target;
}

int TActCelebrationExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ExchangeId = 1;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchangeid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationExchangeReq::MergeFrom(const TActCelebrationExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationExchangeReq::CopyFrom(const TActCelebrationExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationExchangeReq::IsInitialized() const {

  return true;
}

void TActCelebrationExchangeReq::Swap(TActCelebrationExchangeReq* other) {
  if (other != this) {
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationExchangeReq_descriptor_;
  metadata.reflection = TActCelebrationExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationExchangeRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActCelebrationExchangeRsp::TActCelebrationExchangeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationExchangeRsp)
}

void TActCelebrationExchangeRsp::InitAsDefaultInstance() {
}

TActCelebrationExchangeRsp::TActCelebrationExchangeRsp(const TActCelebrationExchangeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationExchangeRsp)
}

void TActCelebrationExchangeRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationExchangeRsp::~TActCelebrationExchangeRsp() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationExchangeRsp)
  SharedDtor();
}

void TActCelebrationExchangeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationExchangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationExchangeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationExchangeRsp_descriptor_;
}

const TActCelebrationExchangeRsp& TActCelebrationExchangeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebration_2eproto();
  return *default_instance_;
}

TActCelebrationExchangeRsp* TActCelebrationExchangeRsp::default_instance_ = NULL;

TActCelebrationExchangeRsp* TActCelebrationExchangeRsp::New() const {
  return new TActCelebrationExchangeRsp;
}

void TActCelebrationExchangeRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationExchangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationExchangeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationExchangeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationExchangeRsp)
  return false;
#undef DO_
}

void TActCelebrationExchangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationExchangeRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationExchangeRsp)
}

::google::protobuf::uint8* TActCelebrationExchangeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationExchangeRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationExchangeRsp)
  return target;
}

int TActCelebrationExchangeRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationExchangeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationExchangeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationExchangeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationExchangeRsp::MergeFrom(const TActCelebrationExchangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationExchangeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationExchangeRsp::CopyFrom(const TActCelebrationExchangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationExchangeRsp::IsInitialized() const {

  return true;
}

void TActCelebrationExchangeRsp::Swap(TActCelebrationExchangeRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationExchangeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationExchangeRsp_descriptor_;
  metadata.reflection = TActCelebrationExchangeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationNotify::kArrRmbGoodBuyInfoFieldNumber;
const int TActCelebrationNotify::kArrTaskInfoFieldNumber;
#endif  // !_MSC_VER

TActCelebrationNotify::TActCelebrationNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationNotify)
}

void TActCelebrationNotify::InitAsDefaultInstance() {
}

TActCelebrationNotify::TActCelebrationNotify(const TActCelebrationNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationNotify)
}

void TActCelebrationNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationNotify::~TActCelebrationNotify() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationNotify)
  SharedDtor();
}

void TActCelebrationNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationNotify_descriptor_;
}

const TActCelebrationNotify& TActCelebrationNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebration_2eproto();
  return *default_instance_;
}

TActCelebrationNotify* TActCelebrationNotify::default_instance_ = NULL;

TActCelebrationNotify* TActCelebrationNotify::New() const {
  return new TActCelebrationNotify;
}

void TActCelebrationNotify::Clear() {
  arrrmbgoodbuyinfo_.Clear();
  arrtaskinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRmbGoodBuyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbgoodbuyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRmbGoodBuyInfo;
        if (input->ExpectTag(18)) goto parse_ArrTaskInfo;
        break;
      }

      // repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrTaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrTaskInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationNotify)
  return false;
#undef DO_
}

void TActCelebrationNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationNotify)
  // repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrmbgoodbuyinfo(i), output);
  }

  // repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 2;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrtaskinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationNotify)
}

::google::protobuf::uint8* TActCelebrationNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationNotify)
  // repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrmbgoodbuyinfo(i), target);
  }

  // repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 2;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrtaskinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationNotify)
  return target;
}

int TActCelebrationNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActCelebrationBuyInfo ArrRmbGoodBuyInfo = 1;
  total_size += 1 * this->arrrmbgoodbuyinfo_size();
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbgoodbuyinfo(i));
  }

  // repeated .pb.TActCelebrationTaskInfo ArrTaskInfo = 2;
  total_size += 1 * this->arrtaskinfo_size();
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationNotify::MergeFrom(const TActCelebrationNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrmbgoodbuyinfo_.MergeFrom(from.arrrmbgoodbuyinfo_);
  arrtaskinfo_.MergeFrom(from.arrtaskinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationNotify::CopyFrom(const TActCelebrationNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationNotify::IsInitialized() const {

  return true;
}

void TActCelebrationNotify::Swap(TActCelebrationNotify* other) {
  if (other != this) {
    arrrmbgoodbuyinfo_.Swap(&other->arrrmbgoodbuyinfo_);
    arrtaskinfo_.Swap(&other->arrtaskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationNotify_descriptor_;
  metadata.reflection = TActCelebrationNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
