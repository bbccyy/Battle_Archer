// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Fate.proto

#ifndef PROTOBUF_net_2fFate_2eproto__INCLUDED
#define PROTOBUF_net_2fFate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fFate_2eproto();
void protobuf_AssignDesc_net_2fFate_2eproto();
void protobuf_ShutdownFile_net_2fFate_2eproto();

class TFateGetInfoRsp;
class TFateActiveReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TFateGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Fate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFateGetInfoRsp : public ::google::protobuf::Message {
 public:
  TFateGetInfoRsp();
  virtual ~TFateGetInfoRsp();

  TFateGetInfoRsp(const TFateGetInfoRsp& from);

  inline TFateGetInfoRsp& operator=(const TFateGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFateGetInfoRsp& default_instance();

  void Swap(TFateGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TFateGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFateGetInfoRsp& from);
  void MergeFrom(const TFateGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Fate = 1;
  inline bool has_fate() const;
  inline void clear_fate();
  static const int kFateFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFateGetInfoRsp</name>
  	<Function>
  		<name>fate</name>
  		<replaceName>Fate</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fate</name>
  		<replaceName>Fate</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fate</name>
  		<replaceName>Fate</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fate() const;
  inline void set_fate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TFateGetInfoRsp)
 private:
  inline void set_has_fate();
  inline void clear_has_fate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 fate_;
  friend void  protobuf_AddDesc_net_2fFate_2eproto();
  friend void protobuf_AssignDesc_net_2fFate_2eproto();
  friend void protobuf_ShutdownFile_net_2fFate_2eproto();

  void InitAsDefaultInstance();
  static TFateGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFateActiveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Fate.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFateActiveReq : public ::google::protobuf::Message {
 public:
  TFateActiveReq();
  virtual ~TFateActiveReq();

  TFateActiveReq(const TFateActiveReq& from);

  inline TFateActiveReq& operator=(const TFateActiveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFateActiveReq& default_instance();

  void Swap(TFateActiveReq* other);

  // implements Message ----------------------------------------------

  TFateActiveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFateActiveReq& from);
  void MergeFrom(const TFateActiveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFateActiveReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TFateActiveReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fFate_2eproto();
  friend void protobuf_AssignDesc_net_2fFate_2eproto();
  friend void protobuf_ShutdownFile_net_2fFate_2eproto();

  void InitAsDefaultInstance();
  static TFateActiveReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TFateGetInfoRsp

// optional uint32 Fate = 1;
inline bool TFateGetInfoRsp::has_fate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFateGetInfoRsp::set_has_fate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFateGetInfoRsp::clear_has_fate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFateGetInfoRsp::clear_fate() {
  fate_ = 0u;
  clear_has_fate();
}
inline ::google::protobuf::uint32 TFateGetInfoRsp::fate() const {
  // @@protoc_insertion_point(field_get:pb.TFateGetInfoRsp.Fate)
  return fate_;
}
inline void TFateGetInfoRsp::set_fate(::google::protobuf::uint32 value) {
  set_has_fate();
  fate_ = value;
  // @@protoc_insertion_point(field_set:pb.TFateGetInfoRsp.Fate)
}

// -------------------------------------------------------------------

// TFateActiveReq

// optional uint32 Id = 1;
inline bool TFateActiveReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFateActiveReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFateActiveReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFateActiveReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TFateActiveReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TFateActiveReq.Id)
  return id_;
}
inline void TFateActiveReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TFateActiveReq.Id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fFate_2eproto__INCLUDED
