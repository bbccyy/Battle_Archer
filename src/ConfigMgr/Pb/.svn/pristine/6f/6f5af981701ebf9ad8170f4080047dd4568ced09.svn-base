// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActSummer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActSummer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActSummerBuyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSummerBuyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSummerGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSummerGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSummerBuyGoodsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSummerBuyGoodsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSummerBuyGoodsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSummerBuyGoodsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSummerGetTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSummerGetTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSummerGetTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSummerGetTaskRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSummerExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSummerExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSummerExchangeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSummerExchangeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActSummerRmbGoodsChangeNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActSummerRmbGoodsChangeNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActSummer_2eproto() {
  protobuf_AddDesc_net_2fActSummer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActSummer.proto");
  GOOGLE_CHECK(file != NULL);
  TActSummerBuyInfo_descriptor_ = file->message_type(0);
  static const int TActSummerBuyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyInfo, buytime_),
  };
  TActSummerBuyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSummerBuyInfo_descriptor_,
      TActSummerBuyInfo::default_instance_,
      TActSummerBuyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSummerBuyInfo));
  TActSummerGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TActSummerGetInfoRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetInfoRsp, arrrmbgoodsbuyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetInfoRsp, arrgoodsbuyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetInfoRsp, arrtaskrewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetInfoRsp, arrexchangedinfo_),
  };
  TActSummerGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSummerGetInfoRsp_descriptor_,
      TActSummerGetInfoRsp::default_instance_,
      TActSummerGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSummerGetInfoRsp));
  TActSummerBuyGoodsReq_descriptor_ = file->message_type(2);
  static const int TActSummerBuyGoodsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyGoodsReq, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyGoodsReq, num_),
  };
  TActSummerBuyGoodsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSummerBuyGoodsReq_descriptor_,
      TActSummerBuyGoodsReq::default_instance_,
      TActSummerBuyGoodsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyGoodsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyGoodsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSummerBuyGoodsReq));
  TActSummerBuyGoodsRsp_descriptor_ = file->message_type(3);
  static const int TActSummerBuyGoodsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyGoodsRsp, arrreward_),
  };
  TActSummerBuyGoodsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSummerBuyGoodsRsp_descriptor_,
      TActSummerBuyGoodsRsp::default_instance_,
      TActSummerBuyGoodsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyGoodsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerBuyGoodsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSummerBuyGoodsRsp));
  TActSummerGetTaskRewardReq_descriptor_ = file->message_type(4);
  static const int TActSummerGetTaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetTaskRewardReq, contentid_),
  };
  TActSummerGetTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSummerGetTaskRewardReq_descriptor_,
      TActSummerGetTaskRewardReq::default_instance_,
      TActSummerGetTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSummerGetTaskRewardReq));
  TActSummerGetTaskRewardRsp_descriptor_ = file->message_type(5);
  static const int TActSummerGetTaskRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetTaskRewardRsp, arrreward_),
  };
  TActSummerGetTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSummerGetTaskRewardRsp_descriptor_,
      TActSummerGetTaskRewardRsp::default_instance_,
      TActSummerGetTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerGetTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSummerGetTaskRewardRsp));
  TActSummerExchangeReq_descriptor_ = file->message_type(6);
  static const int TActSummerExchangeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerExchangeReq, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerExchangeReq, num_),
  };
  TActSummerExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSummerExchangeReq_descriptor_,
      TActSummerExchangeReq::default_instance_,
      TActSummerExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSummerExchangeReq));
  TActSummerExchangeRsp_descriptor_ = file->message_type(7);
  static const int TActSummerExchangeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerExchangeRsp, arrreward_),
  };
  TActSummerExchangeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSummerExchangeRsp_descriptor_,
      TActSummerExchangeRsp::default_instance_,
      TActSummerExchangeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerExchangeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerExchangeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSummerExchangeRsp));
  TActSummerRmbGoodsChangeNotify_descriptor_ = file->message_type(8);
  static const int TActSummerRmbGoodsChangeNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerRmbGoodsChangeNotify, arrrmbgoodsbuyinfo_),
  };
  TActSummerRmbGoodsChangeNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActSummerRmbGoodsChangeNotify_descriptor_,
      TActSummerRmbGoodsChangeNotify::default_instance_,
      TActSummerRmbGoodsChangeNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerRmbGoodsChangeNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActSummerRmbGoodsChangeNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActSummerRmbGoodsChangeNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActSummer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSummerBuyInfo_descriptor_, &TActSummerBuyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSummerGetInfoRsp_descriptor_, &TActSummerGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSummerBuyGoodsReq_descriptor_, &TActSummerBuyGoodsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSummerBuyGoodsRsp_descriptor_, &TActSummerBuyGoodsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSummerGetTaskRewardReq_descriptor_, &TActSummerGetTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSummerGetTaskRewardRsp_descriptor_, &TActSummerGetTaskRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSummerExchangeReq_descriptor_, &TActSummerExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSummerExchangeRsp_descriptor_, &TActSummerExchangeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActSummerRmbGoodsChangeNotify_descriptor_, &TActSummerRmbGoodsChangeNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActSummer_2eproto() {
  delete TActSummerBuyInfo::default_instance_;
  delete TActSummerBuyInfo_reflection_;
  delete TActSummerGetInfoRsp::default_instance_;
  delete TActSummerGetInfoRsp_reflection_;
  delete TActSummerBuyGoodsReq::default_instance_;
  delete TActSummerBuyGoodsReq_reflection_;
  delete TActSummerBuyGoodsRsp::default_instance_;
  delete TActSummerBuyGoodsRsp_reflection_;
  delete TActSummerGetTaskRewardReq::default_instance_;
  delete TActSummerGetTaskRewardReq_reflection_;
  delete TActSummerGetTaskRewardRsp::default_instance_;
  delete TActSummerGetTaskRewardRsp_reflection_;
  delete TActSummerExchangeReq::default_instance_;
  delete TActSummerExchangeReq_reflection_;
  delete TActSummerExchangeRsp::default_instance_;
  delete TActSummerExchangeRsp_reflection_;
  delete TActSummerRmbGoodsChangeNotify::default_instance_;
  delete TActSummerRmbGoodsChangeNotify_reflection_;
}

void protobuf_AddDesc_net_2fActSummer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fOpenActivity_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/ActSummer.proto\022\002pb\032\026net/CommonRew"
    "ard.proto\032\026net/OpenActivity.proto\"=\n\021TAc"
    "tSummerBuyInfo\022\n\n\002Id\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\022"
    "\017\n\007BuyTime\030\003 \001(\004\"\336\001\n\024TActSummerGetInfoRs"
    "p\0221\n\022ArrRmbGoodsBuyInfo\030\001 \003(\0132\025.pb.TActS"
    "ummerBuyInfo\022.\n\017ArrGoodsBuyInfo\030\002 \003(\0132\025."
    "pb.TActSummerBuyInfo\0222\n\021ArrTaskRewardInf"
    "o\030\003 \003(\0132\027.pb.TActivityRewardInfo\022/\n\020ArrE"
    "xchangedInfo\030\004 \003(\0132\025.pb.TActSummerBuyInf"
    "o\"4\n\025TActSummerBuyGoodsReq\022\016\n\006GoodId\030\001 \001"
    "(\r\022\013\n\003Num\030\002 \001(\r\"=\n\025TActSummerBuyGoodsRsp"
    "\022$\n\tArrReward\030\001 \003(\0132\021.pb.TCommonReward\"/"
    "\n\032TActSummerGetTaskRewardReq\022\021\n\tContentI"
    "d\030\001 \001(\r\"B\n\032TActSummerGetTaskRewardRsp\022$\n"
    "\tArrReward\030\001 \003(\0132\021.pb.TCommonReward\"8\n\025T"
    "ActSummerExchangeReq\022\022\n\nExchangeId\030\001 \001(\r"
    "\022\013\n\003Num\030\002 \001(\r\"=\n\025TActSummerExchangeRsp\022$"
    "\n\tArrReward\030\001 \003(\0132\021.pb.TCommonReward\"S\n\036"
    "TActSummerRmbGoodsChangeNotify\0221\n\022ArrRmb"
    "GoodsBuyInfo\030\001 \003(\0132\025.pb.TActSummerBuyInf"
    "o", 801);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActSummer.proto", &protobuf_RegisterTypes);
  TActSummerBuyInfo::default_instance_ = new TActSummerBuyInfo();
  TActSummerGetInfoRsp::default_instance_ = new TActSummerGetInfoRsp();
  TActSummerBuyGoodsReq::default_instance_ = new TActSummerBuyGoodsReq();
  TActSummerBuyGoodsRsp::default_instance_ = new TActSummerBuyGoodsRsp();
  TActSummerGetTaskRewardReq::default_instance_ = new TActSummerGetTaskRewardReq();
  TActSummerGetTaskRewardRsp::default_instance_ = new TActSummerGetTaskRewardRsp();
  TActSummerExchangeReq::default_instance_ = new TActSummerExchangeReq();
  TActSummerExchangeRsp::default_instance_ = new TActSummerExchangeRsp();
  TActSummerRmbGoodsChangeNotify::default_instance_ = new TActSummerRmbGoodsChangeNotify();
  TActSummerBuyInfo::default_instance_->InitAsDefaultInstance();
  TActSummerGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActSummerBuyGoodsReq::default_instance_->InitAsDefaultInstance();
  TActSummerBuyGoodsRsp::default_instance_->InitAsDefaultInstance();
  TActSummerGetTaskRewardReq::default_instance_->InitAsDefaultInstance();
  TActSummerGetTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  TActSummerExchangeReq::default_instance_->InitAsDefaultInstance();
  TActSummerExchangeRsp::default_instance_->InitAsDefaultInstance();
  TActSummerRmbGoodsChangeNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActSummer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActSummer_2eproto {
  StaticDescriptorInitializer_net_2fActSummer_2eproto() {
    protobuf_AddDesc_net_2fActSummer_2eproto();
  }
} static_descriptor_initializer_net_2fActSummer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActSummerBuyInfo::kIdFieldNumber;
const int TActSummerBuyInfo::kNumFieldNumber;
const int TActSummerBuyInfo::kBuyTimeFieldNumber;
#endif  // !_MSC_VER

TActSummerBuyInfo::TActSummerBuyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSummerBuyInfo)
}

void TActSummerBuyInfo::InitAsDefaultInstance() {
}

TActSummerBuyInfo::TActSummerBuyInfo(const TActSummerBuyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSummerBuyInfo)
}

void TActSummerBuyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  buytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSummerBuyInfo::~TActSummerBuyInfo() {
  // @@protoc_insertion_point(destructor:pb.TActSummerBuyInfo)
  SharedDtor();
}

void TActSummerBuyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSummerBuyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSummerBuyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSummerBuyInfo_descriptor_;
}

const TActSummerBuyInfo& TActSummerBuyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSummer_2eproto();
  return *default_instance_;
}

TActSummerBuyInfo* TActSummerBuyInfo::default_instance_ = NULL;

TActSummerBuyInfo* TActSummerBuyInfo::New() const {
  return new TActSummerBuyInfo;
}

void TActSummerBuyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActSummerBuyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSummerBuyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSummerBuyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuyTime;
        break;
      }

      // optional uint64 BuyTime = 3;
      case 3: {
        if (tag == 24) {
         parse_BuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSummerBuyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSummerBuyInfo)
  return false;
#undef DO_
}

void TActSummerBuyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSummerBuyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint64 BuyTime = 3;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->buytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSummerBuyInfo)
}

::google::protobuf::uint8* TActSummerBuyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSummerBuyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint64 BuyTime = 3;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->buytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSummerBuyInfo)
  return target;
}

int TActSummerBuyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint64 BuyTime = 3;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSummerBuyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSummerBuyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSummerBuyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSummerBuyInfo::MergeFrom(const TActSummerBuyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSummerBuyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSummerBuyInfo::CopyFrom(const TActSummerBuyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSummerBuyInfo::IsInitialized() const {

  return true;
}

void TActSummerBuyInfo::Swap(TActSummerBuyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(buytime_, other->buytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSummerBuyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSummerBuyInfo_descriptor_;
  metadata.reflection = TActSummerBuyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSummerGetInfoRsp::kArrRmbGoodsBuyInfoFieldNumber;
const int TActSummerGetInfoRsp::kArrGoodsBuyInfoFieldNumber;
const int TActSummerGetInfoRsp::kArrTaskRewardInfoFieldNumber;
const int TActSummerGetInfoRsp::kArrExchangedInfoFieldNumber;
#endif  // !_MSC_VER

TActSummerGetInfoRsp::TActSummerGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSummerGetInfoRsp)
}

void TActSummerGetInfoRsp::InitAsDefaultInstance() {
}

TActSummerGetInfoRsp::TActSummerGetInfoRsp(const TActSummerGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSummerGetInfoRsp)
}

void TActSummerGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSummerGetInfoRsp::~TActSummerGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActSummerGetInfoRsp)
  SharedDtor();
}

void TActSummerGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSummerGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSummerGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSummerGetInfoRsp_descriptor_;
}

const TActSummerGetInfoRsp& TActSummerGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSummer_2eproto();
  return *default_instance_;
}

TActSummerGetInfoRsp* TActSummerGetInfoRsp::default_instance_ = NULL;

TActSummerGetInfoRsp* TActSummerGetInfoRsp::New() const {
  return new TActSummerGetInfoRsp;
}

void TActSummerGetInfoRsp::Clear() {
  arrrmbgoodsbuyinfo_.Clear();
  arrgoodsbuyinfo_.Clear();
  arrtaskrewardinfo_.Clear();
  arrexchangedinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSummerGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSummerGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActSummerBuyInfo ArrRmbGoodsBuyInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRmbGoodsBuyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbgoodsbuyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRmbGoodsBuyInfo;
        if (input->ExpectTag(18)) goto parse_ArrGoodsBuyInfo;
        break;
      }

      // repeated .pb.TActSummerBuyInfo ArrGoodsBuyInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrGoodsBuyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrgoodsbuyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrGoodsBuyInfo;
        if (input->ExpectTag(26)) goto parse_ArrTaskRewardInfo;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrTaskRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrTaskRewardInfo;
        if (input->ExpectTag(34)) goto parse_ArrExchangedInfo;
        break;
      }

      // repeated .pb.TActSummerBuyInfo ArrExchangedInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrExchangedInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrexchangedinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrExchangedInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSummerGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSummerGetInfoRsp)
  return false;
#undef DO_
}

void TActSummerGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSummerGetInfoRsp)
  // repeated .pb.TActSummerBuyInfo ArrRmbGoodsBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodsbuyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrmbgoodsbuyinfo(i), output);
  }

  // repeated .pb.TActSummerBuyInfo ArrGoodsBuyInfo = 2;
  for (int i = 0; i < this->arrgoodsbuyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrgoodsbuyinfo(i), output);
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrtaskrewardinfo(i), output);
  }

  // repeated .pb.TActSummerBuyInfo ArrExchangedInfo = 4;
  for (int i = 0; i < this->arrexchangedinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrexchangedinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSummerGetInfoRsp)
}

::google::protobuf::uint8* TActSummerGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSummerGetInfoRsp)
  // repeated .pb.TActSummerBuyInfo ArrRmbGoodsBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodsbuyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrmbgoodsbuyinfo(i), target);
  }

  // repeated .pb.TActSummerBuyInfo ArrGoodsBuyInfo = 2;
  for (int i = 0; i < this->arrgoodsbuyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrgoodsbuyinfo(i), target);
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrtaskrewardinfo(i), target);
  }

  // repeated .pb.TActSummerBuyInfo ArrExchangedInfo = 4;
  for (int i = 0; i < this->arrexchangedinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrexchangedinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSummerGetInfoRsp)
  return target;
}

int TActSummerGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActSummerBuyInfo ArrRmbGoodsBuyInfo = 1;
  total_size += 1 * this->arrrmbgoodsbuyinfo_size();
  for (int i = 0; i < this->arrrmbgoodsbuyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbgoodsbuyinfo(i));
  }

  // repeated .pb.TActSummerBuyInfo ArrGoodsBuyInfo = 2;
  total_size += 1 * this->arrgoodsbuyinfo_size();
  for (int i = 0; i < this->arrgoodsbuyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrgoodsbuyinfo(i));
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
  total_size += 1 * this->arrtaskrewardinfo_size();
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskrewardinfo(i));
  }

  // repeated .pb.TActSummerBuyInfo ArrExchangedInfo = 4;
  total_size += 1 * this->arrexchangedinfo_size();
  for (int i = 0; i < this->arrexchangedinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrexchangedinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSummerGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSummerGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSummerGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSummerGetInfoRsp::MergeFrom(const TActSummerGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrmbgoodsbuyinfo_.MergeFrom(from.arrrmbgoodsbuyinfo_);
  arrgoodsbuyinfo_.MergeFrom(from.arrgoodsbuyinfo_);
  arrtaskrewardinfo_.MergeFrom(from.arrtaskrewardinfo_);
  arrexchangedinfo_.MergeFrom(from.arrexchangedinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSummerGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSummerGetInfoRsp::CopyFrom(const TActSummerGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSummerGetInfoRsp::IsInitialized() const {

  return true;
}

void TActSummerGetInfoRsp::Swap(TActSummerGetInfoRsp* other) {
  if (other != this) {
    arrrmbgoodsbuyinfo_.Swap(&other->arrrmbgoodsbuyinfo_);
    arrgoodsbuyinfo_.Swap(&other->arrgoodsbuyinfo_);
    arrtaskrewardinfo_.Swap(&other->arrtaskrewardinfo_);
    arrexchangedinfo_.Swap(&other->arrexchangedinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSummerGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSummerGetInfoRsp_descriptor_;
  metadata.reflection = TActSummerGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSummerBuyGoodsReq::kGoodIdFieldNumber;
const int TActSummerBuyGoodsReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActSummerBuyGoodsReq::TActSummerBuyGoodsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSummerBuyGoodsReq)
}

void TActSummerBuyGoodsReq::InitAsDefaultInstance() {
}

TActSummerBuyGoodsReq::TActSummerBuyGoodsReq(const TActSummerBuyGoodsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSummerBuyGoodsReq)
}

void TActSummerBuyGoodsReq::SharedCtor() {
  _cached_size_ = 0;
  goodid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSummerBuyGoodsReq::~TActSummerBuyGoodsReq() {
  // @@protoc_insertion_point(destructor:pb.TActSummerBuyGoodsReq)
  SharedDtor();
}

void TActSummerBuyGoodsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSummerBuyGoodsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSummerBuyGoodsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSummerBuyGoodsReq_descriptor_;
}

const TActSummerBuyGoodsReq& TActSummerBuyGoodsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSummer_2eproto();
  return *default_instance_;
}

TActSummerBuyGoodsReq* TActSummerBuyGoodsReq::default_instance_ = NULL;

TActSummerBuyGoodsReq* TActSummerBuyGoodsReq::New() const {
  return new TActSummerBuyGoodsReq;
}

void TActSummerBuyGoodsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActSummerBuyGoodsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(goodid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSummerBuyGoodsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSummerBuyGoodsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GoodId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSummerBuyGoodsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSummerBuyGoodsReq)
  return false;
#undef DO_
}

void TActSummerBuyGoodsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSummerBuyGoodsReq)
  // optional uint32 GoodId = 1;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goodid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSummerBuyGoodsReq)
}

::google::protobuf::uint8* TActSummerBuyGoodsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSummerBuyGoodsReq)
  // optional uint32 GoodId = 1;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goodid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSummerBuyGoodsReq)
  return target;
}

int TActSummerBuyGoodsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GoodId = 1;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSummerBuyGoodsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSummerBuyGoodsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSummerBuyGoodsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSummerBuyGoodsReq::MergeFrom(const TActSummerBuyGoodsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSummerBuyGoodsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSummerBuyGoodsReq::CopyFrom(const TActSummerBuyGoodsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSummerBuyGoodsReq::IsInitialized() const {

  return true;
}

void TActSummerBuyGoodsReq::Swap(TActSummerBuyGoodsReq* other) {
  if (other != this) {
    std::swap(goodid_, other->goodid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSummerBuyGoodsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSummerBuyGoodsReq_descriptor_;
  metadata.reflection = TActSummerBuyGoodsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSummerBuyGoodsRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActSummerBuyGoodsRsp::TActSummerBuyGoodsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSummerBuyGoodsRsp)
}

void TActSummerBuyGoodsRsp::InitAsDefaultInstance() {
}

TActSummerBuyGoodsRsp::TActSummerBuyGoodsRsp(const TActSummerBuyGoodsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSummerBuyGoodsRsp)
}

void TActSummerBuyGoodsRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSummerBuyGoodsRsp::~TActSummerBuyGoodsRsp() {
  // @@protoc_insertion_point(destructor:pb.TActSummerBuyGoodsRsp)
  SharedDtor();
}

void TActSummerBuyGoodsRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSummerBuyGoodsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSummerBuyGoodsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSummerBuyGoodsRsp_descriptor_;
}

const TActSummerBuyGoodsRsp& TActSummerBuyGoodsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSummer_2eproto();
  return *default_instance_;
}

TActSummerBuyGoodsRsp* TActSummerBuyGoodsRsp::default_instance_ = NULL;

TActSummerBuyGoodsRsp* TActSummerBuyGoodsRsp::New() const {
  return new TActSummerBuyGoodsRsp;
}

void TActSummerBuyGoodsRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSummerBuyGoodsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSummerBuyGoodsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSummerBuyGoodsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSummerBuyGoodsRsp)
  return false;
#undef DO_
}

void TActSummerBuyGoodsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSummerBuyGoodsRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSummerBuyGoodsRsp)
}

::google::protobuf::uint8* TActSummerBuyGoodsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSummerBuyGoodsRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSummerBuyGoodsRsp)
  return target;
}

int TActSummerBuyGoodsRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSummerBuyGoodsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSummerBuyGoodsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSummerBuyGoodsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSummerBuyGoodsRsp::MergeFrom(const TActSummerBuyGoodsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSummerBuyGoodsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSummerBuyGoodsRsp::CopyFrom(const TActSummerBuyGoodsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSummerBuyGoodsRsp::IsInitialized() const {

  return true;
}

void TActSummerBuyGoodsRsp::Swap(TActSummerBuyGoodsRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSummerBuyGoodsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSummerBuyGoodsRsp_descriptor_;
  metadata.reflection = TActSummerBuyGoodsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSummerGetTaskRewardReq::kContentIdFieldNumber;
#endif  // !_MSC_VER

TActSummerGetTaskRewardReq::TActSummerGetTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSummerGetTaskRewardReq)
}

void TActSummerGetTaskRewardReq::InitAsDefaultInstance() {
}

TActSummerGetTaskRewardReq::TActSummerGetTaskRewardReq(const TActSummerGetTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSummerGetTaskRewardReq)
}

void TActSummerGetTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  contentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSummerGetTaskRewardReq::~TActSummerGetTaskRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActSummerGetTaskRewardReq)
  SharedDtor();
}

void TActSummerGetTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSummerGetTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSummerGetTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSummerGetTaskRewardReq_descriptor_;
}

const TActSummerGetTaskRewardReq& TActSummerGetTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSummer_2eproto();
  return *default_instance_;
}

TActSummerGetTaskRewardReq* TActSummerGetTaskRewardReq::default_instance_ = NULL;

TActSummerGetTaskRewardReq* TActSummerGetTaskRewardReq::New() const {
  return new TActSummerGetTaskRewardReq;
}

void TActSummerGetTaskRewardReq::Clear() {
  contentid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSummerGetTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSummerGetTaskRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ContentId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contentid_)));
          set_has_contentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSummerGetTaskRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSummerGetTaskRewardReq)
  return false;
#undef DO_
}

void TActSummerGetTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSummerGetTaskRewardReq)
  // optional uint32 ContentId = 1;
  if (has_contentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->contentid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSummerGetTaskRewardReq)
}

::google::protobuf::uint8* TActSummerGetTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSummerGetTaskRewardReq)
  // optional uint32 ContentId = 1;
  if (has_contentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->contentid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSummerGetTaskRewardReq)
  return target;
}

int TActSummerGetTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ContentId = 1;
    if (has_contentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contentid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSummerGetTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSummerGetTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSummerGetTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSummerGetTaskRewardReq::MergeFrom(const TActSummerGetTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_contentid()) {
      set_contentid(from.contentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSummerGetTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSummerGetTaskRewardReq::CopyFrom(const TActSummerGetTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSummerGetTaskRewardReq::IsInitialized() const {

  return true;
}

void TActSummerGetTaskRewardReq::Swap(TActSummerGetTaskRewardReq* other) {
  if (other != this) {
    std::swap(contentid_, other->contentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSummerGetTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSummerGetTaskRewardReq_descriptor_;
  metadata.reflection = TActSummerGetTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSummerGetTaskRewardRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActSummerGetTaskRewardRsp::TActSummerGetTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSummerGetTaskRewardRsp)
}

void TActSummerGetTaskRewardRsp::InitAsDefaultInstance() {
}

TActSummerGetTaskRewardRsp::TActSummerGetTaskRewardRsp(const TActSummerGetTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSummerGetTaskRewardRsp)
}

void TActSummerGetTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSummerGetTaskRewardRsp::~TActSummerGetTaskRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActSummerGetTaskRewardRsp)
  SharedDtor();
}

void TActSummerGetTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSummerGetTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSummerGetTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSummerGetTaskRewardRsp_descriptor_;
}

const TActSummerGetTaskRewardRsp& TActSummerGetTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSummer_2eproto();
  return *default_instance_;
}

TActSummerGetTaskRewardRsp* TActSummerGetTaskRewardRsp::default_instance_ = NULL;

TActSummerGetTaskRewardRsp* TActSummerGetTaskRewardRsp::New() const {
  return new TActSummerGetTaskRewardRsp;
}

void TActSummerGetTaskRewardRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSummerGetTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSummerGetTaskRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSummerGetTaskRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSummerGetTaskRewardRsp)
  return false;
#undef DO_
}

void TActSummerGetTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSummerGetTaskRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSummerGetTaskRewardRsp)
}

::google::protobuf::uint8* TActSummerGetTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSummerGetTaskRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSummerGetTaskRewardRsp)
  return target;
}

int TActSummerGetTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSummerGetTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSummerGetTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSummerGetTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSummerGetTaskRewardRsp::MergeFrom(const TActSummerGetTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSummerGetTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSummerGetTaskRewardRsp::CopyFrom(const TActSummerGetTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSummerGetTaskRewardRsp::IsInitialized() const {

  return true;
}

void TActSummerGetTaskRewardRsp::Swap(TActSummerGetTaskRewardRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSummerGetTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSummerGetTaskRewardRsp_descriptor_;
  metadata.reflection = TActSummerGetTaskRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSummerExchangeReq::kExchangeIdFieldNumber;
const int TActSummerExchangeReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActSummerExchangeReq::TActSummerExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSummerExchangeReq)
}

void TActSummerExchangeReq::InitAsDefaultInstance() {
}

TActSummerExchangeReq::TActSummerExchangeReq(const TActSummerExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSummerExchangeReq)
}

void TActSummerExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  exchangeid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSummerExchangeReq::~TActSummerExchangeReq() {
  // @@protoc_insertion_point(destructor:pb.TActSummerExchangeReq)
  SharedDtor();
}

void TActSummerExchangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSummerExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSummerExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSummerExchangeReq_descriptor_;
}

const TActSummerExchangeReq& TActSummerExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSummer_2eproto();
  return *default_instance_;
}

TActSummerExchangeReq* TActSummerExchangeReq::default_instance_ = NULL;

TActSummerExchangeReq* TActSummerExchangeReq::New() const {
  return new TActSummerExchangeReq;
}

void TActSummerExchangeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActSummerExchangeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(exchangeid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSummerExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSummerExchangeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ExchangeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchangeid_)));
          set_has_exchangeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSummerExchangeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSummerExchangeReq)
  return false;
#undef DO_
}

void TActSummerExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSummerExchangeReq)
  // optional uint32 ExchangeId = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchangeid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSummerExchangeReq)
}

::google::protobuf::uint8* TActSummerExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSummerExchangeReq)
  // optional uint32 ExchangeId = 1;
  if (has_exchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchangeid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSummerExchangeReq)
  return target;
}

int TActSummerExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ExchangeId = 1;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchangeid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSummerExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSummerExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSummerExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSummerExchangeReq::MergeFrom(const TActSummerExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSummerExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSummerExchangeReq::CopyFrom(const TActSummerExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSummerExchangeReq::IsInitialized() const {

  return true;
}

void TActSummerExchangeReq::Swap(TActSummerExchangeReq* other) {
  if (other != this) {
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSummerExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSummerExchangeReq_descriptor_;
  metadata.reflection = TActSummerExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSummerExchangeRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActSummerExchangeRsp::TActSummerExchangeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSummerExchangeRsp)
}

void TActSummerExchangeRsp::InitAsDefaultInstance() {
}

TActSummerExchangeRsp::TActSummerExchangeRsp(const TActSummerExchangeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSummerExchangeRsp)
}

void TActSummerExchangeRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSummerExchangeRsp::~TActSummerExchangeRsp() {
  // @@protoc_insertion_point(destructor:pb.TActSummerExchangeRsp)
  SharedDtor();
}

void TActSummerExchangeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSummerExchangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSummerExchangeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSummerExchangeRsp_descriptor_;
}

const TActSummerExchangeRsp& TActSummerExchangeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSummer_2eproto();
  return *default_instance_;
}

TActSummerExchangeRsp* TActSummerExchangeRsp::default_instance_ = NULL;

TActSummerExchangeRsp* TActSummerExchangeRsp::New() const {
  return new TActSummerExchangeRsp;
}

void TActSummerExchangeRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSummerExchangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSummerExchangeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSummerExchangeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSummerExchangeRsp)
  return false;
#undef DO_
}

void TActSummerExchangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSummerExchangeRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSummerExchangeRsp)
}

::google::protobuf::uint8* TActSummerExchangeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSummerExchangeRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSummerExchangeRsp)
  return target;
}

int TActSummerExchangeRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSummerExchangeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSummerExchangeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSummerExchangeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSummerExchangeRsp::MergeFrom(const TActSummerExchangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSummerExchangeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSummerExchangeRsp::CopyFrom(const TActSummerExchangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSummerExchangeRsp::IsInitialized() const {

  return true;
}

void TActSummerExchangeRsp::Swap(TActSummerExchangeRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSummerExchangeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSummerExchangeRsp_descriptor_;
  metadata.reflection = TActSummerExchangeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActSummerRmbGoodsChangeNotify::kArrRmbGoodsBuyInfoFieldNumber;
#endif  // !_MSC_VER

TActSummerRmbGoodsChangeNotify::TActSummerRmbGoodsChangeNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActSummerRmbGoodsChangeNotify)
}

void TActSummerRmbGoodsChangeNotify::InitAsDefaultInstance() {
}

TActSummerRmbGoodsChangeNotify::TActSummerRmbGoodsChangeNotify(const TActSummerRmbGoodsChangeNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActSummerRmbGoodsChangeNotify)
}

void TActSummerRmbGoodsChangeNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActSummerRmbGoodsChangeNotify::~TActSummerRmbGoodsChangeNotify() {
  // @@protoc_insertion_point(destructor:pb.TActSummerRmbGoodsChangeNotify)
  SharedDtor();
}

void TActSummerRmbGoodsChangeNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActSummerRmbGoodsChangeNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActSummerRmbGoodsChangeNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActSummerRmbGoodsChangeNotify_descriptor_;
}

const TActSummerRmbGoodsChangeNotify& TActSummerRmbGoodsChangeNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActSummer_2eproto();
  return *default_instance_;
}

TActSummerRmbGoodsChangeNotify* TActSummerRmbGoodsChangeNotify::default_instance_ = NULL;

TActSummerRmbGoodsChangeNotify* TActSummerRmbGoodsChangeNotify::New() const {
  return new TActSummerRmbGoodsChangeNotify;
}

void TActSummerRmbGoodsChangeNotify::Clear() {
  arrrmbgoodsbuyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActSummerRmbGoodsChangeNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActSummerRmbGoodsChangeNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActSummerBuyInfo ArrRmbGoodsBuyInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRmbGoodsBuyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbgoodsbuyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRmbGoodsBuyInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActSummerRmbGoodsChangeNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActSummerRmbGoodsChangeNotify)
  return false;
#undef DO_
}

void TActSummerRmbGoodsChangeNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActSummerRmbGoodsChangeNotify)
  // repeated .pb.TActSummerBuyInfo ArrRmbGoodsBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodsbuyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrmbgoodsbuyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActSummerRmbGoodsChangeNotify)
}

::google::protobuf::uint8* TActSummerRmbGoodsChangeNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActSummerRmbGoodsChangeNotify)
  // repeated .pb.TActSummerBuyInfo ArrRmbGoodsBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodsbuyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrmbgoodsbuyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActSummerRmbGoodsChangeNotify)
  return target;
}

int TActSummerRmbGoodsChangeNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActSummerBuyInfo ArrRmbGoodsBuyInfo = 1;
  total_size += 1 * this->arrrmbgoodsbuyinfo_size();
  for (int i = 0; i < this->arrrmbgoodsbuyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbgoodsbuyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActSummerRmbGoodsChangeNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActSummerRmbGoodsChangeNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActSummerRmbGoodsChangeNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActSummerRmbGoodsChangeNotify::MergeFrom(const TActSummerRmbGoodsChangeNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrmbgoodsbuyinfo_.MergeFrom(from.arrrmbgoodsbuyinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActSummerRmbGoodsChangeNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActSummerRmbGoodsChangeNotify::CopyFrom(const TActSummerRmbGoodsChangeNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActSummerRmbGoodsChangeNotify::IsInitialized() const {

  return true;
}

void TActSummerRmbGoodsChangeNotify::Swap(TActSummerRmbGoodsChangeNotify* other) {
  if (other != this) {
    arrrmbgoodsbuyinfo_.Swap(&other->arrrmbgoodsbuyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActSummerRmbGoodsChangeNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActSummerRmbGoodsChangeNotify_descriptor_;
  metadata.reflection = TActSummerRmbGoodsChangeNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
