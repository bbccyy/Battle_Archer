// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BattleViewCmd.proto

#ifndef PROTOBUF_net_2fBattleViewCmd_2eproto__INCLUDED
#define PROTOBUF_net_2fBattleViewCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fBattleViewCmd_2eproto();
void protobuf_AssignDesc_net_2fBattleViewCmd_2eproto();
void protobuf_ShutdownFile_net_2fBattleViewCmd_2eproto();

class TBattleViewCmdList;
class TBattleViewCmd;
class TArmyUnitInfo;
class TRefPos;

enum TBattleViewCmd_ECmdEntry {
  TBattleViewCmd_ECmdEntry_Cutscene = 1,
  TBattleViewCmd_ECmdEntry_ResetTimeLimit = 2,
  TBattleViewCmd_ECmdEntry_FieldInit = 3,
  TBattleViewCmd_ECmdEntry_EndShow = 4,
  TBattleViewCmd_ECmdEntry_FullscreenBlackMask = 5,
  TBattleViewCmd_ECmdEntry_AddAvatar = 6,
  TBattleViewCmd_ECmdEntry_AddProjectile = 7,
  TBattleViewCmd_ECmdEntry_AddDestructable = 8,
  TBattleViewCmd_ECmdEntry_AddSceneBarrier = 9,
  TBattleViewCmd_ECmdEntry_ChangeAvatar = 10,
  TBattleViewCmd_ECmdEntry_DelEntity = 11,
  TBattleViewCmd_ECmdEntry_PauseEntity = 12,
  TBattleViewCmd_ECmdEntry_UnpauseEntity = 13,
  TBattleViewCmd_ECmdEntry_DestructEntity = 14,
  TBattleViewCmd_ECmdEntry_AttachToSocket = 15,
  TBattleViewCmd_ECmdEntry_Scale = 16,
  TBattleViewCmd_ECmdEntry_Die = 17,
  TBattleViewCmd_ECmdEntry_Revive = 18,
  TBattleViewCmd_ECmdEntry_Damage = 19,
  TBattleViewCmd_ECmdEntry_Heal = 20,
  TBattleViewCmd_ECmdEntry_ImmueBuff = 21,
  TBattleViewCmd_ECmdEntry_ImmueSkill = 22,
  TBattleViewCmd_ECmdEntry_AddRage = 23,
  TBattleViewCmd_ECmdEntry_AddUnparallelRage = 24,
  TBattleViewCmd_ECmdEntry_SubUnparallelRage = 25,
  TBattleViewCmd_ECmdEntry_SubRage = 26,
  TBattleViewCmd_ECmdEntry_RageSkillReady = 27,
  TBattleViewCmd_ECmdEntry_UnparalleledSkillReady = 28,
  TBattleViewCmd_ECmdEntry_SkillHit = 29,
  TBattleViewCmd_ECmdEntry_Dodge = 30,
  TBattleViewCmd_ECmdEntry_Exemption = 31,
  TBattleViewCmd_ECmdEntry_Parry = 32,
  TBattleViewCmd_ECmdEntry_Resist = 33,
  TBattleViewCmd_ECmdEntry_ControlledStateChange = 34,
  TBattleViewCmd_ECmdEntry_ActionSpeed = 35,
  TBattleViewCmd_ECmdEntry_MaxHpChange = 36,
  TBattleViewCmd_ECmdEntry_BuffAdd = 37,
  TBattleViewCmd_ECmdEntry_BuffModEnable = 38,
  TBattleViewCmd_ECmdEntry_BuffDel = 39,
  TBattleViewCmd_ECmdEntry_BuffNumberChange = 40,
  TBattleViewCmd_ECmdEntry_SkillBegin = 41,
  TBattleViewCmd_ECmdEntry_SkillShow = 42,
  TBattleViewCmd_ECmdEntry_SkillEmit = 43,
  TBattleViewCmd_ECmdEntry_SkillInterrupted = 44,
  TBattleViewCmd_ECmdEntry_SkillEnd = 46,
  TBattleViewCmd_ECmdEntry_SkillUnparallel = 47,
  TBattleViewCmd_ECmdEntry_SkillOnReachRefTarget = 48,
  TBattleViewCmd_ECmdEntry_Move = 49,
  TBattleViewCmd_ECmdEntry_Maneuver = 50,
  TBattleViewCmd_ECmdEntry_Locate = 51,
  TBattleViewCmd_ECmdEntry_InitLocation = 52,
  TBattleViewCmd_ECmdEntry_BehaviourStandPointReached = 53,
  TBattleViewCmd_ECmdEntry_ScreenText = 54,
  TBattleViewCmd_ECmdEntry_DefendPoint = 55,
  TBattleViewCmd_ECmdEntry_DelDefendPoint = 56,
  TBattleViewCmd_ECmdEntry_BattleSoulSkillReady = 57
};
bool TBattleViewCmd_ECmdEntry_IsValid(int value);
const TBattleViewCmd_ECmdEntry TBattleViewCmd_ECmdEntry_ECmdEntry_MIN = TBattleViewCmd_ECmdEntry_Cutscene;
const TBattleViewCmd_ECmdEntry TBattleViewCmd_ECmdEntry_ECmdEntry_MAX = TBattleViewCmd_ECmdEntry_BattleSoulSkillReady;
const int TBattleViewCmd_ECmdEntry_ECmdEntry_ARRAYSIZE = TBattleViewCmd_ECmdEntry_ECmdEntry_MAX + 1;

const ::google::protobuf::EnumDescriptor* TBattleViewCmd_ECmdEntry_descriptor();
inline const ::std::string& TBattleViewCmd_ECmdEntry_Name(TBattleViewCmd_ECmdEntry value) {
  return ::google::protobuf::internal::NameOfEnum(
    TBattleViewCmd_ECmdEntry_descriptor(), value);
}
inline bool TBattleViewCmd_ECmdEntry_Parse(
    const ::std::string& name, TBattleViewCmd_ECmdEntry* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TBattleViewCmd_ECmdEntry>(
    TBattleViewCmd_ECmdEntry_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TBattleViewCmdList</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleViewCmd.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleViewCmdList : public ::google::protobuf::Message {
 public:
  TBattleViewCmdList();
  virtual ~TBattleViewCmdList();

  TBattleViewCmdList(const TBattleViewCmdList& from);

  inline TBattleViewCmdList& operator=(const TBattleViewCmdList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleViewCmdList& default_instance();

  void Swap(TBattleViewCmdList* other);

  // implements Message ----------------------------------------------

  TBattleViewCmdList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleViewCmdList& from);
  void MergeFrom(const TBattleViewCmdList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBattleViewCmd Cmds = 1;
  inline int cmds_size() const;
  inline void clear_cmds();
  static const int kCmdsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmdList</name>
  	<Function>
  		<name>cmds</name>
  		<replaceName>Cmds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_cmds</name>
  		<replaceName>Cmds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_cmds</name>
  		<replaceName>Cmds</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cmds</name>
  		<replaceName>Cmds</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>cmds_size</name>
  		<replaceName>Cmds</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleViewCmd& cmds(int index) const;
  inline ::pb::TBattleViewCmd* mutable_cmds(int index);
  inline ::pb::TBattleViewCmd* add_cmds();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleViewCmd >&
      cmds() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleViewCmd >*
      mutable_cmds();

  // @@protoc_insertion_point(class_scope:pb.TBattleViewCmdList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBattleViewCmd > cmds_;
  friend void  protobuf_AddDesc_net_2fBattleViewCmd_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleViewCmd_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleViewCmd_2eproto();

  void InitAsDefaultInstance();
  static TBattleViewCmdList* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleViewCmd</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleViewCmd.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleViewCmd : public ::google::protobuf::Message {
 public:
  TBattleViewCmd();
  virtual ~TBattleViewCmd();

  TBattleViewCmd(const TBattleViewCmd& from);

  inline TBattleViewCmd& operator=(const TBattleViewCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleViewCmd& default_instance();

  void Swap(TBattleViewCmd* other);

  // implements Message ----------------------------------------------

  TBattleViewCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleViewCmd& from);
  void MergeFrom(const TBattleViewCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TBattleViewCmd_ECmdEntry ECmdEntry;
  static const ECmdEntry Cutscene = TBattleViewCmd_ECmdEntry_Cutscene;
  static const ECmdEntry ResetTimeLimit = TBattleViewCmd_ECmdEntry_ResetTimeLimit;
  static const ECmdEntry FieldInit = TBattleViewCmd_ECmdEntry_FieldInit;
  static const ECmdEntry EndShow = TBattleViewCmd_ECmdEntry_EndShow;
  static const ECmdEntry FullscreenBlackMask = TBattleViewCmd_ECmdEntry_FullscreenBlackMask;
  static const ECmdEntry AddAvatar = TBattleViewCmd_ECmdEntry_AddAvatar;
  static const ECmdEntry AddProjectile = TBattleViewCmd_ECmdEntry_AddProjectile;
  static const ECmdEntry AddDestructable = TBattleViewCmd_ECmdEntry_AddDestructable;
  static const ECmdEntry AddSceneBarrier = TBattleViewCmd_ECmdEntry_AddSceneBarrier;
  static const ECmdEntry ChangeAvatar = TBattleViewCmd_ECmdEntry_ChangeAvatar;
  static const ECmdEntry DelEntity = TBattleViewCmd_ECmdEntry_DelEntity;
  static const ECmdEntry PauseEntity = TBattleViewCmd_ECmdEntry_PauseEntity;
  static const ECmdEntry UnpauseEntity = TBattleViewCmd_ECmdEntry_UnpauseEntity;
  static const ECmdEntry DestructEntity = TBattleViewCmd_ECmdEntry_DestructEntity;
  static const ECmdEntry AttachToSocket = TBattleViewCmd_ECmdEntry_AttachToSocket;
  static const ECmdEntry Scale = TBattleViewCmd_ECmdEntry_Scale;
  static const ECmdEntry Die = TBattleViewCmd_ECmdEntry_Die;
  static const ECmdEntry Revive = TBattleViewCmd_ECmdEntry_Revive;
  static const ECmdEntry Damage = TBattleViewCmd_ECmdEntry_Damage;
  static const ECmdEntry Heal = TBattleViewCmd_ECmdEntry_Heal;
  static const ECmdEntry ImmueBuff = TBattleViewCmd_ECmdEntry_ImmueBuff;
  static const ECmdEntry ImmueSkill = TBattleViewCmd_ECmdEntry_ImmueSkill;
  static const ECmdEntry AddRage = TBattleViewCmd_ECmdEntry_AddRage;
  static const ECmdEntry AddUnparallelRage = TBattleViewCmd_ECmdEntry_AddUnparallelRage;
  static const ECmdEntry SubUnparallelRage = TBattleViewCmd_ECmdEntry_SubUnparallelRage;
  static const ECmdEntry SubRage = TBattleViewCmd_ECmdEntry_SubRage;
  static const ECmdEntry RageSkillReady = TBattleViewCmd_ECmdEntry_RageSkillReady;
  static const ECmdEntry UnparalleledSkillReady = TBattleViewCmd_ECmdEntry_UnparalleledSkillReady;
  static const ECmdEntry SkillHit = TBattleViewCmd_ECmdEntry_SkillHit;
  static const ECmdEntry Dodge = TBattleViewCmd_ECmdEntry_Dodge;
  static const ECmdEntry Exemption = TBattleViewCmd_ECmdEntry_Exemption;
  static const ECmdEntry Parry = TBattleViewCmd_ECmdEntry_Parry;
  static const ECmdEntry Resist = TBattleViewCmd_ECmdEntry_Resist;
  static const ECmdEntry ControlledStateChange = TBattleViewCmd_ECmdEntry_ControlledStateChange;
  static const ECmdEntry ActionSpeed = TBattleViewCmd_ECmdEntry_ActionSpeed;
  static const ECmdEntry MaxHpChange = TBattleViewCmd_ECmdEntry_MaxHpChange;
  static const ECmdEntry BuffAdd = TBattleViewCmd_ECmdEntry_BuffAdd;
  static const ECmdEntry BuffModEnable = TBattleViewCmd_ECmdEntry_BuffModEnable;
  static const ECmdEntry BuffDel = TBattleViewCmd_ECmdEntry_BuffDel;
  static const ECmdEntry BuffNumberChange = TBattleViewCmd_ECmdEntry_BuffNumberChange;
  static const ECmdEntry SkillBegin = TBattleViewCmd_ECmdEntry_SkillBegin;
  static const ECmdEntry SkillShow = TBattleViewCmd_ECmdEntry_SkillShow;
  static const ECmdEntry SkillEmit = TBattleViewCmd_ECmdEntry_SkillEmit;
  static const ECmdEntry SkillInterrupted = TBattleViewCmd_ECmdEntry_SkillInterrupted;
  static const ECmdEntry SkillEnd = TBattleViewCmd_ECmdEntry_SkillEnd;
  static const ECmdEntry SkillUnparallel = TBattleViewCmd_ECmdEntry_SkillUnparallel;
  static const ECmdEntry SkillOnReachRefTarget = TBattleViewCmd_ECmdEntry_SkillOnReachRefTarget;
  static const ECmdEntry Move = TBattleViewCmd_ECmdEntry_Move;
  static const ECmdEntry Maneuver = TBattleViewCmd_ECmdEntry_Maneuver;
  static const ECmdEntry Locate = TBattleViewCmd_ECmdEntry_Locate;
  static const ECmdEntry InitLocation = TBattleViewCmd_ECmdEntry_InitLocation;
  static const ECmdEntry BehaviourStandPointReached = TBattleViewCmd_ECmdEntry_BehaviourStandPointReached;
  static const ECmdEntry ScreenText = TBattleViewCmd_ECmdEntry_ScreenText;
  static const ECmdEntry DefendPoint = TBattleViewCmd_ECmdEntry_DefendPoint;
  static const ECmdEntry DelDefendPoint = TBattleViewCmd_ECmdEntry_DelDefendPoint;
  static const ECmdEntry BattleSoulSkillReady = TBattleViewCmd_ECmdEntry_BattleSoulSkillReady;
  static inline bool ECmdEntry_IsValid(int value) {
    return TBattleViewCmd_ECmdEntry_IsValid(value);
  }
  static const ECmdEntry ECmdEntry_MIN =
    TBattleViewCmd_ECmdEntry_ECmdEntry_MIN;
  static const ECmdEntry ECmdEntry_MAX =
    TBattleViewCmd_ECmdEntry_ECmdEntry_MAX;
  static const int ECmdEntry_ARRAYSIZE =
    TBattleViewCmd_ECmdEntry_ECmdEntry_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ECmdEntry_descriptor() {
    return TBattleViewCmd_ECmdEntry_descriptor();
  }
  static inline const ::std::string& ECmdEntry_Name(ECmdEntry value) {
    return TBattleViewCmd_ECmdEntry_Name(value);
  }
  static inline bool ECmdEntry_Parse(const ::std::string& name,
      ECmdEntry* value) {
    return TBattleViewCmd_ECmdEntry_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 CmdTime = 1;
  inline bool has_cmdtime() const;
  inline void clear_cmdtime();
  static const int kCmdTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmd</name>
  	<Function>
  		<name>cmdtime</name>
  		<replaceName>CmdTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cmdtime</name>
  		<replaceName>CmdTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cmdtime</name>
  		<replaceName>CmdTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 cmdtime() const;
  inline void set_cmdtime(::google::protobuf::int32 value);

  // required .pb.TBattleViewCmd.ECmdEntry CmdEntry = 2;
  inline bool has_cmdentry() const;
  inline void clear_cmdentry();
  static const int kCmdEntryFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmd</name>
  	<Function>
  		<name>cmdentry</name>
  		<replaceName>CmdEntry</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cmdentry</name>
  		<replaceName>CmdEntry</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cmdentry</name>
  		<replaceName>CmdEntry</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::TBattleViewCmd_ECmdEntry cmdentry() const;
  inline void set_cmdentry(::pb::TBattleViewCmd_ECmdEntry value);

  // repeated int64 Args = 3;
  inline int args_size() const;
  inline void clear_args();
  static const int kArgsFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmd</name>
  	<Function>
  		<name>args</name>
  		<replaceName>Args</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_args</name>
  		<replaceName>Args</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_args</name>
  		<replaceName>Args</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_args</name>
  		<replaceName>Args</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>args_size</name>
  		<replaceName>Args</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 args(int index) const;
  inline void set_args(int index, ::google::protobuf::int64 value);
  inline void add_args(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      args() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_args();

  // repeated int32 Refs = 4;
  inline int refs_size() const;
  inline void clear_refs();
  static const int kRefsFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmd</name>
  	<Function>
  		<name>refs</name>
  		<replaceName>Refs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_refs</name>
  		<replaceName>Refs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_refs</name>
  		<replaceName>Refs</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refs</name>
  		<replaceName>Refs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>refs_size</name>
  		<replaceName>Refs</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 refs(int index) const;
  inline void set_refs(int index, ::google::protobuf::int32 value);
  inline void add_refs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      refs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_refs();

  // optional int32 RefId = 5;
  inline bool has_refid() const;
  inline void clear_refid();
  static const int kRefIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmd</name>
  	<Function>
  		<name>refid</name>
  		<replaceName>RefId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refid</name>
  		<replaceName>RefId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refid</name>
  		<replaceName>RefId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 refid() const;
  inline void set_refid(::google::protobuf::int32 value);

  // repeated .pb.TArmyUnitInfo Army1 = 6;
  inline int army1_size() const;
  inline void clear_army1();
  static const int kArmy1FieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmd</name>
  	<Function>
  		<name>army1</name>
  		<replaceName>Army1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_army1</name>
  		<replaceName>Army1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_army1</name>
  		<replaceName>Army1</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army1</name>
  		<replaceName>Army1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>army1_size</name>
  		<replaceName>Army1</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyUnitInfo& army1(int index) const;
  inline ::pb::TArmyUnitInfo* mutable_army1(int index);
  inline ::pb::TArmyUnitInfo* add_army1();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyUnitInfo >&
      army1() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyUnitInfo >*
      mutable_army1();

  // repeated .pb.TArmyUnitInfo Army2 = 7;
  inline int army2_size() const;
  inline void clear_army2();
  static const int kArmy2FieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmd</name>
  	<Function>
  		<name>army2</name>
  		<replaceName>Army2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_army2</name>
  		<replaceName>Army2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_army2</name>
  		<replaceName>Army2</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army2</name>
  		<replaceName>Army2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>army2_size</name>
  		<replaceName>Army2</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyUnitInfo& army2(int index) const;
  inline ::pb::TArmyUnitInfo* mutable_army2(int index);
  inline ::pb::TArmyUnitInfo* add_army2();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyUnitInfo >&
      army2() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyUnitInfo >*
      mutable_army2();

  // repeated int32 Effs = 8;
  inline int effs_size() const;
  inline void clear_effs();
  static const int kEffsFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmd</name>
  	<Function>
  		<name>effs</name>
  		<replaceName>Effs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_effs</name>
  		<replaceName>Effs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_effs</name>
  		<replaceName>Effs</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_effs</name>
  		<replaceName>Effs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>effs_size</name>
  		<replaceName>Effs</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 effs(int index) const;
  inline void set_effs(int index, ::google::protobuf::int32 value);
  inline void add_effs(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      effs() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_effs();

  // optional .pb.TRefPos RefPos = 9;
  inline bool has_refpos() const;
  inline void clear_refpos();
  static const int kRefPosFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmd</name>
  	<Function>
  		<name>refpos</name>
  		<replaceName>RefPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refpos</name>
  		<replaceName>RefPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_refpos</name>
  		<replaceName>RefPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refpos</name>
  		<replaceName>RefPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRefPos& refpos() const;
  inline ::pb::TRefPos* mutable_refpos();
  inline ::pb::TRefPos* release_refpos();
  inline void set_allocated_refpos(::pb::TRefPos* refpos);

  // optional string Anim = 10;
  inline bool has_anim() const;
  inline void clear_anim();
  static const int kAnimFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmd</name>
  	<Function>
  		<name>anim</name>
  		<replaceName>Anim</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_anim</name>
  		<replaceName>Anim</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_anim</name>
  		<replaceName>Anim</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& anim() const;
  inline void set_anim(const ::std::string& value);
  inline void set_anim(const char* value);
  inline void set_anim(const char* value, size_t size);
  inline ::std::string* mutable_anim();
  inline ::std::string* release_anim();
  inline void set_allocated_anim(::std::string* anim);

  // optional string SocketName = 11;
  inline bool has_socketname() const;
  inline void clear_socketname();
  static const int kSocketNameFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TBattleViewCmd</name>
  	<Function>
  		<name>socketname</name>
  		<replaceName>SocketName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_socketname</name>
  		<replaceName>SocketName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_socketname</name>
  		<replaceName>SocketName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& socketname() const;
  inline void set_socketname(const ::std::string& value);
  inline void set_socketname(const char* value);
  inline void set_socketname(const char* value, size_t size);
  inline ::std::string* mutable_socketname();
  inline ::std::string* release_socketname();
  inline void set_allocated_socketname(::std::string* socketname);

  // @@protoc_insertion_point(class_scope:pb.TBattleViewCmd)
 private:
  inline void set_has_cmdtime();
  inline void clear_has_cmdtime();
  inline void set_has_cmdentry();
  inline void clear_has_cmdentry();
  inline void set_has_refid();
  inline void clear_has_refid();
  inline void set_has_refpos();
  inline void clear_has_refpos();
  inline void set_has_anim();
  inline void clear_has_anim();
  inline void set_has_socketname();
  inline void clear_has_socketname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cmdtime_;
  int cmdentry_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > args_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > refs_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyUnitInfo > army1_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyUnitInfo > army2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > effs_;
  ::pb::TRefPos* refpos_;
  ::std::string* anim_;
  ::std::string* socketname_;
  ::google::protobuf::int32 refid_;
  friend void  protobuf_AddDesc_net_2fBattleViewCmd_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleViewCmd_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleViewCmd_2eproto();

  void InitAsDefaultInstance();
  static TBattleViewCmd* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArmyUnitInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleViewCmd.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArmyUnitInfo : public ::google::protobuf::Message {
 public:
  TArmyUnitInfo();
  virtual ~TArmyUnitInfo();

  TArmyUnitInfo(const TArmyUnitInfo& from);

  inline TArmyUnitInfo& operator=(const TArmyUnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArmyUnitInfo& default_instance();

  void Swap(TArmyUnitInfo* other);

  // implements Message ----------------------------------------------

  TArmyUnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArmyUnitInfo& from);
  void MergeFrom(const TArmyUnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 Unitinfo = 1;
  inline int unitinfo_size() const;
  inline void clear_unitinfo();
  static const int kUnitinfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArmyUnitInfo</name>
  	<Function>
  		<name>unitinfo</name>
  		<replaceName>Unitinfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitinfo</name>
  		<replaceName>Unitinfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitinfo</name>
  		<replaceName>Unitinfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitinfo</name>
  		<replaceName>Unitinfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitinfo_size</name>
  		<replaceName>Unitinfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 unitinfo(int index) const;
  inline void set_unitinfo(int index, ::google::protobuf::int64 value);
  inline void add_unitinfo(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      unitinfo() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_unitinfo();

  // @@protoc_insertion_point(class_scope:pb.TArmyUnitInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > unitinfo_;
  friend void  protobuf_AddDesc_net_2fBattleViewCmd_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleViewCmd_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleViewCmd_2eproto();

  void InitAsDefaultInstance();
  static TArmyUnitInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRefPos</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BattleViewCmd.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRefPos : public ::google::protobuf::Message {
 public:
  TRefPos();
  virtual ~TRefPos();

  TRefPos(const TRefPos& from);

  inline TRefPos& operator=(const TRefPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRefPos& default_instance();

  void Swap(TRefPos* other);

  // implements Message ----------------------------------------------

  TRefPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRefPos& from);
  void MergeFrom(const TRefPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRefPos</name>
  	<Function>
  		<name>x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>x</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // required int32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRefPos</name>
  	<Function>
  		<name>y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // required int32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRefPos</name>
  	<Function>
  		<name>z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_z</name>
  		<replaceName>z</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 z() const;
  inline void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TRefPos)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  friend void  protobuf_AddDesc_net_2fBattleViewCmd_2eproto();
  friend void protobuf_AssignDesc_net_2fBattleViewCmd_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattleViewCmd_2eproto();

  void InitAsDefaultInstance();
  static TRefPos* default_instance_;
};
// ===================================================================


// ===================================================================

// TBattleViewCmdList

// repeated .pb.TBattleViewCmd Cmds = 1;
inline int TBattleViewCmdList::cmds_size() const {
  return cmds_.size();
}
inline void TBattleViewCmdList::clear_cmds() {
  cmds_.Clear();
}
inline const ::pb::TBattleViewCmd& TBattleViewCmdList::cmds(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmdList.Cmds)
  return cmds_.Get(index);
}
inline ::pb::TBattleViewCmd* TBattleViewCmdList::mutable_cmds(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleViewCmdList.Cmds)
  return cmds_.Mutable(index);
}
inline ::pb::TBattleViewCmd* TBattleViewCmdList::add_cmds() {
  // @@protoc_insertion_point(field_add:pb.TBattleViewCmdList.Cmds)
  return cmds_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleViewCmd >&
TBattleViewCmdList::cmds() const {
  // @@protoc_insertion_point(field_list:pb.TBattleViewCmdList.Cmds)
  return cmds_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleViewCmd >*
TBattleViewCmdList::mutable_cmds() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleViewCmdList.Cmds)
  return &cmds_;
}

// -------------------------------------------------------------------

// TBattleViewCmd

// optional int32 CmdTime = 1;
inline bool TBattleViewCmd::has_cmdtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBattleViewCmd::set_has_cmdtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBattleViewCmd::clear_has_cmdtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBattleViewCmd::clear_cmdtime() {
  cmdtime_ = 0;
  clear_has_cmdtime();
}
inline ::google::protobuf::int32 TBattleViewCmd::cmdtime() const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmd.CmdTime)
  return cmdtime_;
}
inline void TBattleViewCmd::set_cmdtime(::google::protobuf::int32 value) {
  set_has_cmdtime();
  cmdtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleViewCmd.CmdTime)
}

// required .pb.TBattleViewCmd.ECmdEntry CmdEntry = 2;
inline bool TBattleViewCmd::has_cmdentry() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBattleViewCmd::set_has_cmdentry() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBattleViewCmd::clear_has_cmdentry() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBattleViewCmd::clear_cmdentry() {
  cmdentry_ = 1;
  clear_has_cmdentry();
}
inline ::pb::TBattleViewCmd_ECmdEntry TBattleViewCmd::cmdentry() const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmd.CmdEntry)
  return static_cast< ::pb::TBattleViewCmd_ECmdEntry >(cmdentry_);
}
inline void TBattleViewCmd::set_cmdentry(::pb::TBattleViewCmd_ECmdEntry value) {
  assert(::pb::TBattleViewCmd_ECmdEntry_IsValid(value));
  set_has_cmdentry();
  cmdentry_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleViewCmd.CmdEntry)
}

// repeated int64 Args = 3;
inline int TBattleViewCmd::args_size() const {
  return args_.size();
}
inline void TBattleViewCmd::clear_args() {
  args_.Clear();
}
inline ::google::protobuf::int64 TBattleViewCmd::args(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmd.Args)
  return args_.Get(index);
}
inline void TBattleViewCmd::set_args(int index, ::google::protobuf::int64 value) {
  args_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBattleViewCmd.Args)
}
inline void TBattleViewCmd::add_args(::google::protobuf::int64 value) {
  args_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBattleViewCmd.Args)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TBattleViewCmd::args() const {
  // @@protoc_insertion_point(field_list:pb.TBattleViewCmd.Args)
  return args_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TBattleViewCmd::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleViewCmd.Args)
  return &args_;
}

// repeated int32 Refs = 4;
inline int TBattleViewCmd::refs_size() const {
  return refs_.size();
}
inline void TBattleViewCmd::clear_refs() {
  refs_.Clear();
}
inline ::google::protobuf::int32 TBattleViewCmd::refs(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmd.Refs)
  return refs_.Get(index);
}
inline void TBattleViewCmd::set_refs(int index, ::google::protobuf::int32 value) {
  refs_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBattleViewCmd.Refs)
}
inline void TBattleViewCmd::add_refs(::google::protobuf::int32 value) {
  refs_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBattleViewCmd.Refs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TBattleViewCmd::refs() const {
  // @@protoc_insertion_point(field_list:pb.TBattleViewCmd.Refs)
  return refs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TBattleViewCmd::mutable_refs() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleViewCmd.Refs)
  return &refs_;
}

// optional int32 RefId = 5;
inline bool TBattleViewCmd::has_refid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBattleViewCmd::set_has_refid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBattleViewCmd::clear_has_refid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBattleViewCmd::clear_refid() {
  refid_ = 0;
  clear_has_refid();
}
inline ::google::protobuf::int32 TBattleViewCmd::refid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmd.RefId)
  return refid_;
}
inline void TBattleViewCmd::set_refid(::google::protobuf::int32 value) {
  set_has_refid();
  refid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleViewCmd.RefId)
}

// repeated .pb.TArmyUnitInfo Army1 = 6;
inline int TBattleViewCmd::army1_size() const {
  return army1_.size();
}
inline void TBattleViewCmd::clear_army1() {
  army1_.Clear();
}
inline const ::pb::TArmyUnitInfo& TBattleViewCmd::army1(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmd.Army1)
  return army1_.Get(index);
}
inline ::pb::TArmyUnitInfo* TBattleViewCmd::mutable_army1(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleViewCmd.Army1)
  return army1_.Mutable(index);
}
inline ::pb::TArmyUnitInfo* TBattleViewCmd::add_army1() {
  // @@protoc_insertion_point(field_add:pb.TBattleViewCmd.Army1)
  return army1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyUnitInfo >&
TBattleViewCmd::army1() const {
  // @@protoc_insertion_point(field_list:pb.TBattleViewCmd.Army1)
  return army1_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyUnitInfo >*
TBattleViewCmd::mutable_army1() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleViewCmd.Army1)
  return &army1_;
}

// repeated .pb.TArmyUnitInfo Army2 = 7;
inline int TBattleViewCmd::army2_size() const {
  return army2_.size();
}
inline void TBattleViewCmd::clear_army2() {
  army2_.Clear();
}
inline const ::pb::TArmyUnitInfo& TBattleViewCmd::army2(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmd.Army2)
  return army2_.Get(index);
}
inline ::pb::TArmyUnitInfo* TBattleViewCmd::mutable_army2(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleViewCmd.Army2)
  return army2_.Mutable(index);
}
inline ::pb::TArmyUnitInfo* TBattleViewCmd::add_army2() {
  // @@protoc_insertion_point(field_add:pb.TBattleViewCmd.Army2)
  return army2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyUnitInfo >&
TBattleViewCmd::army2() const {
  // @@protoc_insertion_point(field_list:pb.TBattleViewCmd.Army2)
  return army2_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyUnitInfo >*
TBattleViewCmd::mutable_army2() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleViewCmd.Army2)
  return &army2_;
}

// repeated int32 Effs = 8;
inline int TBattleViewCmd::effs_size() const {
  return effs_.size();
}
inline void TBattleViewCmd::clear_effs() {
  effs_.Clear();
}
inline ::google::protobuf::int32 TBattleViewCmd::effs(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmd.Effs)
  return effs_.Get(index);
}
inline void TBattleViewCmd::set_effs(int index, ::google::protobuf::int32 value) {
  effs_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBattleViewCmd.Effs)
}
inline void TBattleViewCmd::add_effs(::google::protobuf::int32 value) {
  effs_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBattleViewCmd.Effs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TBattleViewCmd::effs() const {
  // @@protoc_insertion_point(field_list:pb.TBattleViewCmd.Effs)
  return effs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TBattleViewCmd::mutable_effs() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleViewCmd.Effs)
  return &effs_;
}

// optional .pb.TRefPos RefPos = 9;
inline bool TBattleViewCmd::has_refpos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TBattleViewCmd::set_has_refpos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TBattleViewCmd::clear_has_refpos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TBattleViewCmd::clear_refpos() {
  if (refpos_ != NULL) refpos_->::pb::TRefPos::Clear();
  clear_has_refpos();
}
inline const ::pb::TRefPos& TBattleViewCmd::refpos() const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmd.RefPos)
  return refpos_ != NULL ? *refpos_ : *default_instance_->refpos_;
}
inline ::pb::TRefPos* TBattleViewCmd::mutable_refpos() {
  set_has_refpos();
  if (refpos_ == NULL) refpos_ = new ::pb::TRefPos;
  // @@protoc_insertion_point(field_mutable:pb.TBattleViewCmd.RefPos)
  return refpos_;
}
inline ::pb::TRefPos* TBattleViewCmd::release_refpos() {
  clear_has_refpos();
  ::pb::TRefPos* temp = refpos_;
  refpos_ = NULL;
  return temp;
}
inline void TBattleViewCmd::set_allocated_refpos(::pb::TRefPos* refpos) {
  delete refpos_;
  refpos_ = refpos;
  if (refpos) {
    set_has_refpos();
  } else {
    clear_has_refpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleViewCmd.RefPos)
}

// optional string Anim = 10;
inline bool TBattleViewCmd::has_anim() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TBattleViewCmd::set_has_anim() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TBattleViewCmd::clear_has_anim() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TBattleViewCmd::clear_anim() {
  if (anim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anim_->clear();
  }
  clear_has_anim();
}
inline const ::std::string& TBattleViewCmd::anim() const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmd.Anim)
  return *anim_;
}
inline void TBattleViewCmd::set_anim(const ::std::string& value) {
  set_has_anim();
  if (anim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anim_ = new ::std::string;
  }
  anim_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleViewCmd.Anim)
}
inline void TBattleViewCmd::set_anim(const char* value) {
  set_has_anim();
  if (anim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anim_ = new ::std::string;
  }
  anim_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleViewCmd.Anim)
}
inline void TBattleViewCmd::set_anim(const char* value, size_t size) {
  set_has_anim();
  if (anim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anim_ = new ::std::string;
  }
  anim_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleViewCmd.Anim)
}
inline ::std::string* TBattleViewCmd::mutable_anim() {
  set_has_anim();
  if (anim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    anim_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleViewCmd.Anim)
  return anim_;
}
inline ::std::string* TBattleViewCmd::release_anim() {
  clear_has_anim();
  if (anim_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = anim_;
    anim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleViewCmd::set_allocated_anim(::std::string* anim) {
  if (anim_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete anim_;
  }
  if (anim) {
    set_has_anim();
    anim_ = anim;
  } else {
    clear_has_anim();
    anim_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleViewCmd.Anim)
}

// optional string SocketName = 11;
inline bool TBattleViewCmd::has_socketname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TBattleViewCmd::set_has_socketname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TBattleViewCmd::clear_has_socketname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TBattleViewCmd::clear_socketname() {
  if (socketname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socketname_->clear();
  }
  clear_has_socketname();
}
inline const ::std::string& TBattleViewCmd::socketname() const {
  // @@protoc_insertion_point(field_get:pb.TBattleViewCmd.SocketName)
  return *socketname_;
}
inline void TBattleViewCmd::set_socketname(const ::std::string& value) {
  set_has_socketname();
  if (socketname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socketname_ = new ::std::string;
  }
  socketname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleViewCmd.SocketName)
}
inline void TBattleViewCmd::set_socketname(const char* value) {
  set_has_socketname();
  if (socketname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socketname_ = new ::std::string;
  }
  socketname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleViewCmd.SocketName)
}
inline void TBattleViewCmd::set_socketname(const char* value, size_t size) {
  set_has_socketname();
  if (socketname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socketname_ = new ::std::string;
  }
  socketname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleViewCmd.SocketName)
}
inline ::std::string* TBattleViewCmd::mutable_socketname() {
  set_has_socketname();
  if (socketname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    socketname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleViewCmd.SocketName)
  return socketname_;
}
inline ::std::string* TBattleViewCmd::release_socketname() {
  clear_has_socketname();
  if (socketname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = socketname_;
    socketname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleViewCmd::set_allocated_socketname(::std::string* socketname) {
  if (socketname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete socketname_;
  }
  if (socketname) {
    set_has_socketname();
    socketname_ = socketname;
  } else {
    clear_has_socketname();
    socketname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleViewCmd.SocketName)
}

// -------------------------------------------------------------------

// TArmyUnitInfo

// repeated int64 Unitinfo = 1;
inline int TArmyUnitInfo::unitinfo_size() const {
  return unitinfo_.size();
}
inline void TArmyUnitInfo::clear_unitinfo() {
  unitinfo_.Clear();
}
inline ::google::protobuf::int64 TArmyUnitInfo::unitinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArmyUnitInfo.Unitinfo)
  return unitinfo_.Get(index);
}
inline void TArmyUnitInfo::set_unitinfo(int index, ::google::protobuf::int64 value) {
  unitinfo_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TArmyUnitInfo.Unitinfo)
}
inline void TArmyUnitInfo::add_unitinfo(::google::protobuf::int64 value) {
  unitinfo_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TArmyUnitInfo.Unitinfo)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TArmyUnitInfo::unitinfo() const {
  // @@protoc_insertion_point(field_list:pb.TArmyUnitInfo.Unitinfo)
  return unitinfo_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TArmyUnitInfo::mutable_unitinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArmyUnitInfo.Unitinfo)
  return &unitinfo_;
}

// -------------------------------------------------------------------

// TRefPos

// required int32 x = 1;
inline bool TRefPos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRefPos::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRefPos::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRefPos::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 TRefPos::x() const {
  // @@protoc_insertion_point(field_get:pb.TRefPos.x)
  return x_;
}
inline void TRefPos::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.TRefPos.x)
}

// required int32 y = 2;
inline bool TRefPos::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRefPos::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRefPos::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRefPos::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 TRefPos::y() const {
  // @@protoc_insertion_point(field_get:pb.TRefPos.y)
  return y_;
}
inline void TRefPos::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.TRefPos.y)
}

// required int32 z = 3;
inline bool TRefPos::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRefPos::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRefPos::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRefPos::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline ::google::protobuf::int32 TRefPos::z() const {
  // @@protoc_insertion_point(field_get:pb.TRefPos.z)
  return z_;
}
inline void TRefPos::set_z(::google::protobuf::int32 value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:pb.TRefPos.z)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::TBattleViewCmd_ECmdEntry> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::TBattleViewCmd_ECmdEntry>() {
  return ::pb::TBattleViewCmd_ECmdEntry_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fBattleViewCmd_2eproto__INCLUDED
