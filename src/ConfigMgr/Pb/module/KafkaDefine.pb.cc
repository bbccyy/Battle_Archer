// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/KafkaDefine.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/KafkaDefine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TKafkaChangeCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKafkaChangeCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKafkaMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKafkaMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TKafkaWholeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TKafkaWholeMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fKafkaDefine_2eproto() {
  protobuf_AddDesc_module_2fKafkaDefine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/KafkaDefine.proto");
  GOOGLE_CHECK(file != NULL);
  TKafkaChangeCell_descriptor_ = file->message_type(0);
  static const int TKafkaChangeCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaChangeCell, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaChangeCell, value_),
  };
  TKafkaChangeCell_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKafkaChangeCell_descriptor_,
      TKafkaChangeCell::default_instance_,
      TKafkaChangeCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaChangeCell, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaChangeCell, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKafkaChangeCell));
  TKafkaMessage_descriptor_ = file->message_type(1);
  static const int TKafkaMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaMessage, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaMessage, tablekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaMessage, changearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaMessage, isdeleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaMessage, rowkey_),
  };
  TKafkaMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKafkaMessage_descriptor_,
      TKafkaMessage::default_instance_,
      TKafkaMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKafkaMessage));
  TKafkaWholeMessage_descriptor_ = file->message_type(2);
  static const int TKafkaWholeMessage_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaWholeMessage, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaWholeMessage, tablekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaWholeMessage, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaWholeMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaWholeMessage, isdeleted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaWholeMessage, rowkey_),
  };
  TKafkaWholeMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TKafkaWholeMessage_descriptor_,
      TKafkaWholeMessage::default_instance_,
      TKafkaWholeMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaWholeMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TKafkaWholeMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TKafkaWholeMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fKafkaDefine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKafkaChangeCell_descriptor_, &TKafkaChangeCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKafkaMessage_descriptor_, &TKafkaMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TKafkaWholeMessage_descriptor_, &TKafkaWholeMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fKafkaDefine_2eproto() {
  delete TKafkaChangeCell::default_instance_;
  delete TKafkaChangeCell_reflection_;
  delete TKafkaMessage::default_instance_;
  delete TKafkaMessage_reflection_;
  delete TKafkaWholeMessage::default_instance_;
  delete TKafkaWholeMessage_reflection_;
}

void protobuf_AddDesc_module_2fKafkaDefine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030module/KafkaDefine.proto\022\002pb\".\n\020TKafka"
    "ChangeCell\022\013\n\003Key\030\001 \001(\t\022\r\n\005Value\030\002 \001(\014\"\223"
    "\001\n\rTKafkaMessage\022\021\n\tTableName\030\001 \001(\t\022\020\n\010T"
    "ableKey\030\002 \001(\t\022\'\n\tChangeArr\030\003 \003(\0132\024.pb.TK"
    "afkaChangeCell\022\021\n\tTimestamp\030\004 \001(\003\022\021\n\tIsD"
    "eleted\030\005 \001(\010\022\016\n\006RowKey\030\006 \001(\t\"~\n\022TKafkaWh"
    "oleMessage\022\021\n\tTableName\030\001 \001(\t\022\020\n\010TableKe"
    "y\030\002 \001(\t\022\r\n\005Value\030\003 \001(\014\022\021\n\tTimestamp\030\004 \001("
    "\003\022\021\n\tIsDeleted\030\005 \001(\010\022\016\n\006RowKey\030\006 \001(\t", 356);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/KafkaDefine.proto", &protobuf_RegisterTypes);
  TKafkaChangeCell::default_instance_ = new TKafkaChangeCell();
  TKafkaMessage::default_instance_ = new TKafkaMessage();
  TKafkaWholeMessage::default_instance_ = new TKafkaWholeMessage();
  TKafkaChangeCell::default_instance_->InitAsDefaultInstance();
  TKafkaMessage::default_instance_->InitAsDefaultInstance();
  TKafkaWholeMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fKafkaDefine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fKafkaDefine_2eproto {
  StaticDescriptorInitializer_module_2fKafkaDefine_2eproto() {
    protobuf_AddDesc_module_2fKafkaDefine_2eproto();
  }
} static_descriptor_initializer_module_2fKafkaDefine_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TKafkaChangeCell::kKeyFieldNumber;
const int TKafkaChangeCell::kValueFieldNumber;
#endif  // !_MSC_VER

TKafkaChangeCell::TKafkaChangeCell()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TKafkaChangeCell)
}

void TKafkaChangeCell::InitAsDefaultInstance() {
}

TKafkaChangeCell::TKafkaChangeCell(const TKafkaChangeCell& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TKafkaChangeCell)
}

void TKafkaChangeCell::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKafkaChangeCell::~TKafkaChangeCell() {
  // @@protoc_insertion_point(destructor:pb.TKafkaChangeCell)
  SharedDtor();
}

void TKafkaChangeCell::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void TKafkaChangeCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKafkaChangeCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKafkaChangeCell_descriptor_;
}

const TKafkaChangeCell& TKafkaChangeCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fKafkaDefine_2eproto();
  return *default_instance_;
}

TKafkaChangeCell* TKafkaChangeCell::default_instance_ = NULL;

TKafkaChangeCell* TKafkaChangeCell::New() const {
  return new TKafkaChangeCell;
}

void TKafkaChangeCell::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKafkaChangeCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TKafkaChangeCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // optional bytes Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TKafkaChangeCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TKafkaChangeCell)
  return false;
#undef DO_
}

void TKafkaChangeCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TKafkaChangeCell)
  // optional string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional bytes Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TKafkaChangeCell)
}

::google::protobuf::uint8* TKafkaChangeCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TKafkaChangeCell)
  // optional string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes Value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TKafkaChangeCell)
  return target;
}

int TKafkaChangeCell::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKafkaChangeCell::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKafkaChangeCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKafkaChangeCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKafkaChangeCell::MergeFrom(const TKafkaChangeCell& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKafkaChangeCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKafkaChangeCell::CopyFrom(const TKafkaChangeCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKafkaChangeCell::IsInitialized() const {

  return true;
}

void TKafkaChangeCell::Swap(TKafkaChangeCell* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKafkaChangeCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKafkaChangeCell_descriptor_;
  metadata.reflection = TKafkaChangeCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKafkaMessage::kTableNameFieldNumber;
const int TKafkaMessage::kTableKeyFieldNumber;
const int TKafkaMessage::kChangeArrFieldNumber;
const int TKafkaMessage::kTimestampFieldNumber;
const int TKafkaMessage::kIsDeletedFieldNumber;
const int TKafkaMessage::kRowKeyFieldNumber;
#endif  // !_MSC_VER

TKafkaMessage::TKafkaMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TKafkaMessage)
}

void TKafkaMessage::InitAsDefaultInstance() {
}

TKafkaMessage::TKafkaMessage(const TKafkaMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TKafkaMessage)
}

void TKafkaMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  isdeleted_ = false;
  rowkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKafkaMessage::~TKafkaMessage() {
  // @@protoc_insertion_point(destructor:pb.TKafkaMessage)
  SharedDtor();
}

void TKafkaMessage::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablekey_;
  }
  if (rowkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rowkey_;
  }
  if (this != default_instance_) {
  }
}

void TKafkaMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKafkaMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKafkaMessage_descriptor_;
}

const TKafkaMessage& TKafkaMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fKafkaDefine_2eproto();
  return *default_instance_;
}

TKafkaMessage* TKafkaMessage::default_instance_ = NULL;

TKafkaMessage* TKafkaMessage::New() const {
  return new TKafkaMessage;
}

void TKafkaMessage::Clear() {
  if (_has_bits_[0 / 32] & 59) {
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablename_->clear();
      }
    }
    if (has_tablekey()) {
      if (tablekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablekey_->clear();
      }
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    isdeleted_ = false;
    if (has_rowkey()) {
      if (rowkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rowkey_->clear();
      }
    }
  }
  changearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKafkaMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TKafkaMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TableName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TableKey;
        break;
      }

      // optional string TableKey = 2;
      case 2: {
        if (tag == 18) {
         parse_TableKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablekey().data(), this->tablekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablekey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ChangeArr;
        break;
      }

      // repeated .pb.TKafkaChangeCell ChangeArr = 3;
      case 3: {
        if (tag == 26) {
         parse_ChangeArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_changearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ChangeArr;
        if (input->ExpectTag(32)) goto parse_Timestamp;
        break;
      }

      // optional int64 Timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_Timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsDeleted;
        break;
      }

      // optional bool IsDeleted = 5;
      case 5: {
        if (tag == 40) {
         parse_IsDeleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdeleted_)));
          set_has_isdeleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RowKey;
        break;
      }

      // optional string RowKey = 6;
      case 6: {
        if (tag == 50) {
         parse_RowKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rowkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rowkey().data(), this->rowkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rowkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TKafkaMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TKafkaMessage)
  return false;
#undef DO_
}

void TKafkaMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TKafkaMessage)
  // optional string TableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tablename(), output);
  }

  // optional string TableKey = 2;
  if (has_tablekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablekey().data(), this->tablekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablekey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tablekey(), output);
  }

  // repeated .pb.TKafkaChangeCell ChangeArr = 3;
  for (int i = 0; i < this->changearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->changearr(i), output);
  }

  // optional int64 Timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // optional bool IsDeleted = 5;
  if (has_isdeleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdeleted(), output);
  }

  // optional string RowKey = 6;
  if (has_rowkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rowkey().data(), this->rowkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rowkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->rowkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TKafkaMessage)
}

::google::protobuf::uint8* TKafkaMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TKafkaMessage)
  // optional string TableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tablename(), target);
  }

  // optional string TableKey = 2;
  if (has_tablekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablekey().data(), this->tablekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablekey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablekey(), target);
  }

  // repeated .pb.TKafkaChangeCell ChangeArr = 3;
  for (int i = 0; i < this->changearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->changearr(i), target);
  }

  // optional int64 Timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // optional bool IsDeleted = 5;
  if (has_isdeleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdeleted(), target);
  }

  // optional string RowKey = 6;
  if (has_rowkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rowkey().data(), this->rowkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rowkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rowkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TKafkaMessage)
  return target;
}

int TKafkaMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TableName = 1;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // optional string TableKey = 2;
    if (has_tablekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablekey());
    }

    // optional int64 Timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional bool IsDeleted = 5;
    if (has_isdeleted()) {
      total_size += 1 + 1;
    }

    // optional string RowKey = 6;
    if (has_rowkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rowkey());
    }

  }
  // repeated .pb.TKafkaChangeCell ChangeArr = 3;
  total_size += 1 * this->changearr_size();
  for (int i = 0; i < this->changearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->changearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKafkaMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKafkaMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKafkaMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKafkaMessage::MergeFrom(const TKafkaMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  changearr_.MergeFrom(from.changearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_tablekey()) {
      set_tablekey(from.tablekey());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_isdeleted()) {
      set_isdeleted(from.isdeleted());
    }
    if (from.has_rowkey()) {
      set_rowkey(from.rowkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKafkaMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKafkaMessage::CopyFrom(const TKafkaMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKafkaMessage::IsInitialized() const {

  return true;
}

void TKafkaMessage::Swap(TKafkaMessage* other) {
  if (other != this) {
    std::swap(tablename_, other->tablename_);
    std::swap(tablekey_, other->tablekey_);
    changearr_.Swap(&other->changearr_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(isdeleted_, other->isdeleted_);
    std::swap(rowkey_, other->rowkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKafkaMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKafkaMessage_descriptor_;
  metadata.reflection = TKafkaMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TKafkaWholeMessage::kTableNameFieldNumber;
const int TKafkaWholeMessage::kTableKeyFieldNumber;
const int TKafkaWholeMessage::kValueFieldNumber;
const int TKafkaWholeMessage::kTimestampFieldNumber;
const int TKafkaWholeMessage::kIsDeletedFieldNumber;
const int TKafkaWholeMessage::kRowKeyFieldNumber;
#endif  // !_MSC_VER

TKafkaWholeMessage::TKafkaWholeMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TKafkaWholeMessage)
}

void TKafkaWholeMessage::InitAsDefaultInstance() {
}

TKafkaWholeMessage::TKafkaWholeMessage(const TKafkaWholeMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TKafkaWholeMessage)
}

void TKafkaWholeMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tablekey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = GOOGLE_LONGLONG(0);
  isdeleted_ = false;
  rowkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TKafkaWholeMessage::~TKafkaWholeMessage() {
  // @@protoc_insertion_point(destructor:pb.TKafkaWholeMessage)
  SharedDtor();
}

void TKafkaWholeMessage::SharedDtor() {
  if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablename_;
  }
  if (tablekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tablekey_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (rowkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rowkey_;
  }
  if (this != default_instance_) {
  }
}

void TKafkaWholeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TKafkaWholeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TKafkaWholeMessage_descriptor_;
}

const TKafkaWholeMessage& TKafkaWholeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fKafkaDefine_2eproto();
  return *default_instance_;
}

TKafkaWholeMessage* TKafkaWholeMessage::default_instance_ = NULL;

TKafkaWholeMessage* TKafkaWholeMessage::New() const {
  return new TKafkaWholeMessage;
}

void TKafkaWholeMessage::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablename_->clear();
      }
    }
    if (has_tablekey()) {
      if (tablekey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tablekey_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    isdeleted_ = false;
    if (has_rowkey()) {
      if (rowkey_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rowkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TKafkaWholeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TKafkaWholeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string TableName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TableKey;
        break;
      }

      // optional string TableKey = 2;
      case 2: {
        if (tag == 18) {
         parse_TableKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tablekey().data(), this->tablekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tablekey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Value;
        break;
      }

      // optional bytes Value = 3;
      case 3: {
        if (tag == 26) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Timestamp;
        break;
      }

      // optional int64 Timestamp = 4;
      case 4: {
        if (tag == 32) {
         parse_Timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_IsDeleted;
        break;
      }

      // optional bool IsDeleted = 5;
      case 5: {
        if (tag == 40) {
         parse_IsDeleted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdeleted_)));
          set_has_isdeleted();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_RowKey;
        break;
      }

      // optional string RowKey = 6;
      case 6: {
        if (tag == 50) {
         parse_RowKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rowkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rowkey().data(), this->rowkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rowkey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TKafkaWholeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TKafkaWholeMessage)
  return false;
#undef DO_
}

void TKafkaWholeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TKafkaWholeMessage)
  // optional string TableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tablename(), output);
  }

  // optional string TableKey = 2;
  if (has_tablekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablekey().data(), this->tablekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablekey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->tablekey(), output);
  }

  // optional bytes Value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  // optional int64 Timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // optional bool IsDeleted = 5;
  if (has_isdeleted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdeleted(), output);
  }

  // optional string RowKey = 6;
  if (has_rowkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rowkey().data(), this->rowkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rowkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->rowkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TKafkaWholeMessage)
}

::google::protobuf::uint8* TKafkaWholeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TKafkaWholeMessage)
  // optional string TableName = 1;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tablename(), target);
  }

  // optional string TableKey = 2;
  if (has_tablekey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tablekey().data(), this->tablekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tablekey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablekey(), target);
  }

  // optional bytes Value = 3;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  // optional int64 Timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // optional bool IsDeleted = 5;
  if (has_isdeleted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdeleted(), target);
  }

  // optional string RowKey = 6;
  if (has_rowkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rowkey().data(), this->rowkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rowkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rowkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TKafkaWholeMessage)
  return target;
}

int TKafkaWholeMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string TableName = 1;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }

    // optional string TableKey = 2;
    if (has_tablekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablekey());
    }

    // optional bytes Value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional int64 Timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional bool IsDeleted = 5;
    if (has_isdeleted()) {
      total_size += 1 + 1;
    }

    // optional string RowKey = 6;
    if (has_rowkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rowkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TKafkaWholeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TKafkaWholeMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TKafkaWholeMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TKafkaWholeMessage::MergeFrom(const TKafkaWholeMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_tablekey()) {
      set_tablekey(from.tablekey());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_isdeleted()) {
      set_isdeleted(from.isdeleted());
    }
    if (from.has_rowkey()) {
      set_rowkey(from.rowkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TKafkaWholeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TKafkaWholeMessage::CopyFrom(const TKafkaWholeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TKafkaWholeMessage::IsInitialized() const {

  return true;
}

void TKafkaWholeMessage::Swap(TKafkaWholeMessage* other) {
  if (other != this) {
    std::swap(tablename_, other->tablename_);
    std::swap(tablekey_, other->tablekey_);
    std::swap(value_, other->value_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(isdeleted_, other->isdeleted_);
    std::swap(rowkey_, other->rowkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TKafkaWholeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TKafkaWholeMessage_descriptor_;
  metadata.reflection = TKafkaWholeMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
