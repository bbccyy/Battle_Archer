// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GuildRedpacket.proto

#ifndef PROTOBUF_net_2fGuildRedpacket_2eproto__INCLUDED
#define PROTOBUF_net_2fGuildRedpacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

class TGuildRedPacketSingle;
class TGuildRedPacketInfo;
class TGuildGetRedPacketListReq;
class TGuildGetRedPacketListRsp;
class TGuildGetRedPacketInfoReq;
class TGuildGetRedPacketInfoRsp;
class TGuildGainRedPacketReq;
class TGuildGainRedPacketRsp;
class TGuildSendRedPacketReq;
class TGuildSendRedPacketRsp;
class TGuildReceiveRedPacketAchiReq;
class TGuildReceiveRedPacketAchiRsp;
class TGuildUpdateRedPacketNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TGuildRedPacketSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildRedPacketSingle : public ::google::protobuf::Message {
 public:
  TGuildRedPacketSingle();
  virtual ~TGuildRedPacketSingle();

  TGuildRedPacketSingle(const TGuildRedPacketSingle& from);

  inline TGuildRedPacketSingle& operator=(const TGuildRedPacketSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildRedPacketSingle& default_instance();

  void Swap(TGuildRedPacketSingle* other);

  // implements Message ----------------------------------------------

  TGuildRedPacketSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildRedPacketSingle& from);
  void MergeFrom(const TGuildRedPacketSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketSingle</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketSingle</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RandRewardArray = 3;
  inline int randrewardarray_size() const;
  inline void clear_randrewardarray();
  static const int kRandRewardArrayFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketSingle</name>
  	<Function>
  		<name>randrewardarray</name>
  		<replaceName>RandRewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_randrewardarray</name>
  		<replaceName>RandRewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_randrewardarray</name>
  		<replaceName>RandRewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randrewardarray</name>
  		<replaceName>RandRewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>randrewardarray_size</name>
  		<replaceName>RandRewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& randrewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_randrewardarray(int index);
  inline ::pb::TCommonReward* add_randrewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      randrewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_randrewardarray();

  // @@protoc_insertion_point(class_scope:pb.TGuildRedPacketSingle)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > randrewardarray_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildRedPacketSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildRedPacketInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildRedPacketInfo : public ::google::protobuf::Message {
 public:
  TGuildRedPacketInfo();
  virtual ~TGuildRedPacketInfo();

  TGuildRedPacketInfo(const TGuildRedPacketInfo& from);

  inline TGuildRedPacketInfo& operator=(const TGuildRedPacketInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildRedPacketInfo& default_instance();

  void Swap(TGuildRedPacketInfo* other);

  // implements Message ----------------------------------------------

  TGuildRedPacketInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildRedPacketInfo& from);
  void MergeFrom(const TGuildRedPacketInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RedPacketId = 1;
  inline bool has_redpacketid() const;
  inline void clear_redpacketid();
  static const int kRedPacketIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketInfo</name>
  	<Function>
  		<name>redpacketid</name>
  		<replaceName>RedPacketId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_redpacketid</name>
  		<replaceName>RedPacketId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_redpacketid</name>
  		<replaceName>RedPacketId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 redpacketid() const;
  inline void set_redpacketid(::google::protobuf::uint32 value);

  // optional uint32 RedPacketTid = 2;
  inline bool has_redpackettid() const;
  inline void clear_redpackettid();
  static const int kRedPacketTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketInfo</name>
  	<Function>
  		<name>redpackettid</name>
  		<replaceName>RedPacketTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_redpackettid</name>
  		<replaceName>RedPacketTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_redpackettid</name>
  		<replaceName>RedPacketTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 redpackettid() const;
  inline void set_redpackettid(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint64 SendTime = 4;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketInfo</name>
  	<Function>
  		<name>sendtime</name>
  		<replaceName>SendTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sendtime</name>
  		<replaceName>SendTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sendtime</name>
  		<replaceName>SendTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 sendtime() const;
  inline void set_sendtime(::google::protobuf::uint64 value);

  // optional uint32 RewardType = 5;
  inline bool has_rewardtype() const;
  inline void clear_rewardtype();
  static const int kRewardTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketInfo</name>
  	<Function>
  		<name>rewardtype</name>
  		<replaceName>RewardType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtype</name>
  		<replaceName>RewardType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtype</name>
  		<replaceName>RewardType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardtype() const;
  inline void set_rewardtype(::google::protobuf::uint32 value);

  // optional uint32 RewardSum = 6;
  inline bool has_rewardsum() const;
  inline void clear_rewardsum();
  static const int kRewardSumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketInfo</name>
  	<Function>
  		<name>rewardsum</name>
  		<replaceName>RewardSum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardsum</name>
  		<replaceName>RewardSum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardsum</name>
  		<replaceName>RewardSum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardsum() const;
  inline void set_rewardsum(::google::protobuf::uint32 value);

  // optional uint32 SingleCount = 7;
  inline bool has_singlecount() const;
  inline void clear_singlecount();
  static const int kSingleCountFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketInfo</name>
  	<Function>
  		<name>singlecount</name>
  		<replaceName>SingleCount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_singlecount</name>
  		<replaceName>SingleCount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_singlecount</name>
  		<replaceName>SingleCount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 singlecount() const;
  inline void set_singlecount(::google::protobuf::uint32 value);

  // optional uint32 SingleRemain = 8;
  inline bool has_singleremain() const;
  inline void clear_singleremain();
  static const int kSingleRemainFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketInfo</name>
  	<Function>
  		<name>singleremain</name>
  		<replaceName>SingleRemain</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_singleremain</name>
  		<replaceName>SingleRemain</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_singleremain</name>
  		<replaceName>SingleRemain</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 singleremain() const;
  inline void set_singleremain(::google::protobuf::uint32 value);

  // optional uint32 Status = 9;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketInfo</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 status() const;
  inline void set_status(::google::protobuf::uint32 value);

  // optional .pb.TUserSimpleInfo BestUserInfo = 10;
  inline bool has_bestuserinfo() const;
  inline void clear_bestuserinfo();
  static const int kBestUserInfoFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TGuildRedPacketInfo</name>
  	<Function>
  		<name>bestuserinfo</name>
  		<replaceName>BestUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bestuserinfo</name>
  		<replaceName>BestUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_bestuserinfo</name>
  		<replaceName>BestUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bestuserinfo</name>
  		<replaceName>BestUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& bestuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_bestuserinfo();
  inline ::pb::TUserSimpleInfo* release_bestuserinfo();
  inline void set_allocated_bestuserinfo(::pb::TUserSimpleInfo* bestuserinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildRedPacketInfo)
 private:
  inline void set_has_redpacketid();
  inline void clear_has_redpacketid();
  inline void set_has_redpackettid();
  inline void clear_has_redpackettid();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_rewardtype();
  inline void clear_has_rewardtype();
  inline void set_has_rewardsum();
  inline void clear_has_rewardsum();
  inline void set_has_singlecount();
  inline void clear_has_singlecount();
  inline void set_has_singleremain();
  inline void clear_has_singleremain();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_bestuserinfo();
  inline void clear_has_bestuserinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 redpacketid_;
  ::google::protobuf::uint32 redpackettid_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 sendtime_;
  ::google::protobuf::uint32 rewardtype_;
  ::google::protobuf::uint32 rewardsum_;
  ::google::protobuf::uint32 singlecount_;
  ::google::protobuf::uint32 singleremain_;
  ::pb::TUserSimpleInfo* bestuserinfo_;
  ::google::protobuf::uint32 status_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildRedPacketInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetRedPacketListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetRedPacketListReq : public ::google::protobuf::Message {
 public:
  TGuildGetRedPacketListReq();
  virtual ~TGuildGetRedPacketListReq();

  TGuildGetRedPacketListReq(const TGuildGetRedPacketListReq& from);

  inline TGuildGetRedPacketListReq& operator=(const TGuildGetRedPacketListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetRedPacketListReq& default_instance();

  void Swap(TGuildGetRedPacketListReq* other);

  // implements Message ----------------------------------------------

  TGuildGetRedPacketListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetRedPacketListReq& from);
  void MergeFrom(const TGuildGetRedPacketListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 RedPacketIdArr = 1;
  inline int redpacketidarr_size() const;
  inline void clear_redpacketidarr();
  static const int kRedPacketIdArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetRedPacketListReq</name>
  	<Function>
  		<name>redpacketidarr</name>
  		<replaceName>RedPacketIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_redpacketidarr</name>
  		<replaceName>RedPacketIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_redpacketidarr</name>
  		<replaceName>RedPacketIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_redpacketidarr</name>
  		<replaceName>RedPacketIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>redpacketidarr_size</name>
  		<replaceName>RedPacketIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 redpacketidarr(int index) const;
  inline void set_redpacketidarr(int index, ::google::protobuf::uint32 value);
  inline void add_redpacketidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      redpacketidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_redpacketidarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildGetRedPacketListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > redpacketidarr_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetRedPacketListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetRedPacketListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetRedPacketListRsp : public ::google::protobuf::Message {
 public:
  TGuildGetRedPacketListRsp();
  virtual ~TGuildGetRedPacketListRsp();

  TGuildGetRedPacketListRsp(const TGuildGetRedPacketListRsp& from);

  inline TGuildGetRedPacketListRsp& operator=(const TGuildGetRedPacketListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetRedPacketListRsp& default_instance();

  void Swap(TGuildGetRedPacketListRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetRedPacketListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetRedPacketListRsp& from);
  void MergeFrom(const TGuildGetRedPacketListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildRedPacketInfo RedPacketArr = 1;
  inline int redpacketarr_size() const;
  inline void clear_redpacketarr();
  static const int kRedPacketArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetRedPacketListRsp</name>
  	<Function>
  		<name>redpacketarr</name>
  		<replaceName>RedPacketArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_redpacketarr</name>
  		<replaceName>RedPacketArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_redpacketarr</name>
  		<replaceName>RedPacketArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_redpacketarr</name>
  		<replaceName>RedPacketArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>redpacketarr_size</name>
  		<replaceName>RedPacketArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildRedPacketInfo& redpacketarr(int index) const;
  inline ::pb::TGuildRedPacketInfo* mutable_redpacketarr(int index);
  inline ::pb::TGuildRedPacketInfo* add_redpacketarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildRedPacketInfo >&
      redpacketarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildRedPacketInfo >*
      mutable_redpacketarr();

  // optional uint32 LeaderFreeNum = 2;
  inline bool has_leaderfreenum() const;
  inline void clear_leaderfreenum();
  static const int kLeaderFreeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetRedPacketListRsp</name>
  	<Function>
  		<name>leaderfreenum</name>
  		<replaceName>LeaderFreeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leaderfreenum</name>
  		<replaceName>LeaderFreeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leaderfreenum</name>
  		<replaceName>LeaderFreeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 leaderfreenum() const;
  inline void set_leaderfreenum(::google::protobuf::uint32 value);

  // optional uint32 BigSendNum = 3;
  inline bool has_bigsendnum() const;
  inline void clear_bigsendnum();
  static const int kBigSendNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetRedPacketListRsp</name>
  	<Function>
  		<name>bigsendnum</name>
  		<replaceName>BigSendNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bigsendnum</name>
  		<replaceName>BigSendNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bigsendnum</name>
  		<replaceName>BigSendNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bigsendnum() const;
  inline void set_bigsendnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetRedPacketListRsp)
 private:
  inline void set_has_leaderfreenum();
  inline void clear_has_leaderfreenum();
  inline void set_has_bigsendnum();
  inline void clear_has_bigsendnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildRedPacketInfo > redpacketarr_;
  ::google::protobuf::uint32 leaderfreenum_;
  ::google::protobuf::uint32 bigsendnum_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetRedPacketListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetRedPacketInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetRedPacketInfoReq : public ::google::protobuf::Message {
 public:
  TGuildGetRedPacketInfoReq();
  virtual ~TGuildGetRedPacketInfoReq();

  TGuildGetRedPacketInfoReq(const TGuildGetRedPacketInfoReq& from);

  inline TGuildGetRedPacketInfoReq& operator=(const TGuildGetRedPacketInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetRedPacketInfoReq& default_instance();

  void Swap(TGuildGetRedPacketInfoReq* other);

  // implements Message ----------------------------------------------

  TGuildGetRedPacketInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetRedPacketInfoReq& from);
  void MergeFrom(const TGuildGetRedPacketInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RedPacketId = 1;
  inline bool has_redpacketid() const;
  inline void clear_redpacketid();
  static const int kRedPacketIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetRedPacketInfoReq</name>
  	<Function>
  		<name>redpacketid</name>
  		<replaceName>RedPacketId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_redpacketid</name>
  		<replaceName>RedPacketId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_redpacketid</name>
  		<replaceName>RedPacketId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 redpacketid() const;
  inline void set_redpacketid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetRedPacketInfoReq)
 private:
  inline void set_has_redpacketid();
  inline void clear_has_redpacketid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 redpacketid_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetRedPacketInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetRedPacketInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetRedPacketInfoRsp : public ::google::protobuf::Message {
 public:
  TGuildGetRedPacketInfoRsp();
  virtual ~TGuildGetRedPacketInfoRsp();

  TGuildGetRedPacketInfoRsp(const TGuildGetRedPacketInfoRsp& from);

  inline TGuildGetRedPacketInfoRsp& operator=(const TGuildGetRedPacketInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetRedPacketInfoRsp& default_instance();

  void Swap(TGuildGetRedPacketInfoRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetRedPacketInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetRedPacketInfoRsp& from);
  void MergeFrom(const TGuildGetRedPacketInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildRedPacketSingle SingleArr = 1;
  inline int singlearr_size() const;
  inline void clear_singlearr();
  static const int kSingleArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetRedPacketInfoRsp</name>
  	<Function>
  		<name>singlearr</name>
  		<replaceName>SingleArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_singlearr</name>
  		<replaceName>SingleArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_singlearr</name>
  		<replaceName>SingleArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_singlearr</name>
  		<replaceName>SingleArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>singlearr_size</name>
  		<replaceName>SingleArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildRedPacketSingle& singlearr(int index) const;
  inline ::pb::TGuildRedPacketSingle* mutable_singlearr(int index);
  inline ::pb::TGuildRedPacketSingle* add_singlearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildRedPacketSingle >&
      singlearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildRedPacketSingle >*
      mutable_singlearr();

  // @@protoc_insertion_point(class_scope:pb.TGuildGetRedPacketInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildRedPacketSingle > singlearr_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetRedPacketInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGainRedPacketReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGainRedPacketReq : public ::google::protobuf::Message {
 public:
  TGuildGainRedPacketReq();
  virtual ~TGuildGainRedPacketReq();

  TGuildGainRedPacketReq(const TGuildGainRedPacketReq& from);

  inline TGuildGainRedPacketReq& operator=(const TGuildGainRedPacketReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGainRedPacketReq& default_instance();

  void Swap(TGuildGainRedPacketReq* other);

  // implements Message ----------------------------------------------

  TGuildGainRedPacketReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGainRedPacketReq& from);
  void MergeFrom(const TGuildGainRedPacketReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RedPacketId = 1;
  inline bool has_redpacketid() const;
  inline void clear_redpacketid();
  static const int kRedPacketIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGainRedPacketReq</name>
  	<Function>
  		<name>redpacketid</name>
  		<replaceName>RedPacketId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_redpacketid</name>
  		<replaceName>RedPacketId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_redpacketid</name>
  		<replaceName>RedPacketId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 redpacketid() const;
  inline void set_redpacketid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGainRedPacketReq)
 private:
  inline void set_has_redpacketid();
  inline void clear_has_redpacketid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 redpacketid_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildGainRedPacketReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGainRedPacketRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGainRedPacketRsp : public ::google::protobuf::Message {
 public:
  TGuildGainRedPacketRsp();
  virtual ~TGuildGainRedPacketRsp();

  TGuildGainRedPacketRsp(const TGuildGainRedPacketRsp& from);

  inline TGuildGainRedPacketRsp& operator=(const TGuildGainRedPacketRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGainRedPacketRsp& default_instance();

  void Swap(TGuildGainRedPacketRsp* other);

  // implements Message ----------------------------------------------

  TGuildGainRedPacketRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGainRedPacketRsp& from);
  void MergeFrom(const TGuildGainRedPacketRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGainRedPacketRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // repeated .pb.TCommonReward RandRewardArray = 2;
  inline int randrewardarray_size() const;
  inline void clear_randrewardarray();
  static const int kRandRewardArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGainRedPacketRsp</name>
  	<Function>
  		<name>randrewardarray</name>
  		<replaceName>RandRewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_randrewardarray</name>
  		<replaceName>RandRewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_randrewardarray</name>
  		<replaceName>RandRewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randrewardarray</name>
  		<replaceName>RandRewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>randrewardarray_size</name>
  		<replaceName>RandRewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& randrewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_randrewardarray(int index);
  inline ::pb::TCommonReward* add_randrewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      randrewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_randrewardarray();

  // @@protoc_insertion_point(class_scope:pb.TGuildGainRedPacketRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > randrewardarray_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildGainRedPacketRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildSendRedPacketReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildSendRedPacketReq : public ::google::protobuf::Message {
 public:
  TGuildSendRedPacketReq();
  virtual ~TGuildSendRedPacketReq();

  TGuildSendRedPacketReq(const TGuildSendRedPacketReq& from);

  inline TGuildSendRedPacketReq& operator=(const TGuildSendRedPacketReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildSendRedPacketReq& default_instance();

  void Swap(TGuildSendRedPacketReq* other);

  // implements Message ----------------------------------------------

  TGuildSendRedPacketReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildSendRedPacketReq& from);
  void MergeFrom(const TGuildSendRedPacketReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RedPacketTid = 1;
  inline bool has_redpackettid() const;
  inline void clear_redpackettid();
  static const int kRedPacketTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildSendRedPacketReq</name>
  	<Function>
  		<name>redpackettid</name>
  		<replaceName>RedPacketTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_redpackettid</name>
  		<replaceName>RedPacketTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_redpackettid</name>
  		<replaceName>RedPacketTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 redpackettid() const;
  inline void set_redpackettid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildSendRedPacketReq)
 private:
  inline void set_has_redpackettid();
  inline void clear_has_redpackettid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 redpackettid_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildSendRedPacketReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildSendRedPacketRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildSendRedPacketRsp : public ::google::protobuf::Message {
 public:
  TGuildSendRedPacketRsp();
  virtual ~TGuildSendRedPacketRsp();

  TGuildSendRedPacketRsp(const TGuildSendRedPacketRsp& from);

  inline TGuildSendRedPacketRsp& operator=(const TGuildSendRedPacketRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildSendRedPacketRsp& default_instance();

  void Swap(TGuildSendRedPacketRsp* other);

  // implements Message ----------------------------------------------

  TGuildSendRedPacketRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildSendRedPacketRsp& from);
  void MergeFrom(const TGuildSendRedPacketRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildSendRedPacketRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TGuildSendRedPacketRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildSendRedPacketRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildReceiveRedPacketAchiReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildReceiveRedPacketAchiReq : public ::google::protobuf::Message {
 public:
  TGuildReceiveRedPacketAchiReq();
  virtual ~TGuildReceiveRedPacketAchiReq();

  TGuildReceiveRedPacketAchiReq(const TGuildReceiveRedPacketAchiReq& from);

  inline TGuildReceiveRedPacketAchiReq& operator=(const TGuildReceiveRedPacketAchiReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildReceiveRedPacketAchiReq& default_instance();

  void Swap(TGuildReceiveRedPacketAchiReq* other);

  // implements Message ----------------------------------------------

  TGuildReceiveRedPacketAchiReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildReceiveRedPacketAchiReq& from);
  void MergeFrom(const TGuildReceiveRedPacketAchiReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildReceiveRedPacketAchiReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildReceiveRedPacketAchiReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildReceiveRedPacketAchiReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildReceiveRedPacketAchiRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildReceiveRedPacketAchiRsp : public ::google::protobuf::Message {
 public:
  TGuildReceiveRedPacketAchiRsp();
  virtual ~TGuildReceiveRedPacketAchiRsp();

  TGuildReceiveRedPacketAchiRsp(const TGuildReceiveRedPacketAchiRsp& from);

  inline TGuildReceiveRedPacketAchiRsp& operator=(const TGuildReceiveRedPacketAchiRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildReceiveRedPacketAchiRsp& default_instance();

  void Swap(TGuildReceiveRedPacketAchiRsp* other);

  // implements Message ----------------------------------------------

  TGuildReceiveRedPacketAchiRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildReceiveRedPacketAchiRsp& from);
  void MergeFrom(const TGuildReceiveRedPacketAchiRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildReceiveRedPacketAchiRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TGuildReceiveRedPacketAchiRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildReceiveRedPacketAchiRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildUpdateRedPacketNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildRedpacket.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildUpdateRedPacketNotify : public ::google::protobuf::Message {
 public:
  TGuildUpdateRedPacketNotify();
  virtual ~TGuildUpdateRedPacketNotify();

  TGuildUpdateRedPacketNotify(const TGuildUpdateRedPacketNotify& from);

  inline TGuildUpdateRedPacketNotify& operator=(const TGuildUpdateRedPacketNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildUpdateRedPacketNotify& default_instance();

  void Swap(TGuildUpdateRedPacketNotify* other);

  // implements Message ----------------------------------------------

  TGuildUpdateRedPacketNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildUpdateRedPacketNotify& from);
  void MergeFrom(const TGuildUpdateRedPacketNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TGuildRedPacketInfo RedPacketInfo = 1;
  inline bool has_redpacketinfo() const;
  inline void clear_redpacketinfo();
  static const int kRedPacketInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateRedPacketNotify</name>
  	<Function>
  		<name>redpacketinfo</name>
  		<replaceName>RedPacketInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_redpacketinfo</name>
  		<replaceName>RedPacketInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_redpacketinfo</name>
  		<replaceName>RedPacketInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_redpacketinfo</name>
  		<replaceName>RedPacketInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildRedPacketInfo& redpacketinfo() const;
  inline ::pb::TGuildRedPacketInfo* mutable_redpacketinfo();
  inline ::pb::TGuildRedPacketInfo* release_redpacketinfo();
  inline void set_allocated_redpacketinfo(::pb::TGuildRedPacketInfo* redpacketinfo);

  // @@protoc_insertion_point(class_scope:pb.TGuildUpdateRedPacketNotify)
 private:
  inline void set_has_redpacketinfo();
  inline void clear_has_redpacketinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TGuildRedPacketInfo* redpacketinfo_;
  friend void  protobuf_AddDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildRedpacket_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildRedpacket_2eproto();

  void InitAsDefaultInstance();
  static TGuildUpdateRedPacketNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TGuildRedPacketSingle

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TGuildRedPacketSingle::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildRedPacketSingle::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildRedPacketSingle::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildRedPacketSingle::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TGuildRedPacketSingle::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketSingle.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TGuildRedPacketSingle::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildRedPacketSingle.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TGuildRedPacketSingle::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TGuildRedPacketSingle::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildRedPacketSingle.UserInfo)
}

// optional uint32 Num = 2;
inline bool TGuildRedPacketSingle::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildRedPacketSingle::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildRedPacketSingle::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildRedPacketSingle::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TGuildRedPacketSingle::num() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketSingle.Num)
  return num_;
}
inline void TGuildRedPacketSingle::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildRedPacketSingle.Num)
}

// repeated .pb.TCommonReward RandRewardArray = 3;
inline int TGuildRedPacketSingle::randrewardarray_size() const {
  return randrewardarray_.size();
}
inline void TGuildRedPacketSingle::clear_randrewardarray() {
  randrewardarray_.Clear();
}
inline const ::pb::TCommonReward& TGuildRedPacketSingle::randrewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketSingle.RandRewardArray)
  return randrewardarray_.Get(index);
}
inline ::pb::TCommonReward* TGuildRedPacketSingle::mutable_randrewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildRedPacketSingle.RandRewardArray)
  return randrewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TGuildRedPacketSingle::add_randrewardarray() {
  // @@protoc_insertion_point(field_add:pb.TGuildRedPacketSingle.RandRewardArray)
  return randrewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TGuildRedPacketSingle::randrewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TGuildRedPacketSingle.RandRewardArray)
  return randrewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TGuildRedPacketSingle::mutable_randrewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildRedPacketSingle.RandRewardArray)
  return &randrewardarray_;
}

// -------------------------------------------------------------------

// TGuildRedPacketInfo

// optional uint32 RedPacketId = 1;
inline bool TGuildRedPacketInfo::has_redpacketid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildRedPacketInfo::set_has_redpacketid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildRedPacketInfo::clear_has_redpacketid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildRedPacketInfo::clear_redpacketid() {
  redpacketid_ = 0u;
  clear_has_redpacketid();
}
inline ::google::protobuf::uint32 TGuildRedPacketInfo::redpacketid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketInfo.RedPacketId)
  return redpacketid_;
}
inline void TGuildRedPacketInfo::set_redpacketid(::google::protobuf::uint32 value) {
  set_has_redpacketid();
  redpacketid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildRedPacketInfo.RedPacketId)
}

// optional uint32 RedPacketTid = 2;
inline bool TGuildRedPacketInfo::has_redpackettid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildRedPacketInfo::set_has_redpackettid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildRedPacketInfo::clear_has_redpackettid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildRedPacketInfo::clear_redpackettid() {
  redpackettid_ = 0u;
  clear_has_redpackettid();
}
inline ::google::protobuf::uint32 TGuildRedPacketInfo::redpackettid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketInfo.RedPacketTid)
  return redpackettid_;
}
inline void TGuildRedPacketInfo::set_redpackettid(::google::protobuf::uint32 value) {
  set_has_redpackettid();
  redpackettid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildRedPacketInfo.RedPacketTid)
}

// optional .pb.TUserSimpleInfo UserInfo = 3;
inline bool TGuildRedPacketInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildRedPacketInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildRedPacketInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildRedPacketInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TGuildRedPacketInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TGuildRedPacketInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildRedPacketInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TGuildRedPacketInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TGuildRedPacketInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildRedPacketInfo.UserInfo)
}

// optional uint64 SendTime = 4;
inline bool TGuildRedPacketInfo::has_sendtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildRedPacketInfo::set_has_sendtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildRedPacketInfo::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildRedPacketInfo::clear_sendtime() {
  sendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::uint64 TGuildRedPacketInfo::sendtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketInfo.SendTime)
  return sendtime_;
}
inline void TGuildRedPacketInfo::set_sendtime(::google::protobuf::uint64 value) {
  set_has_sendtime();
  sendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildRedPacketInfo.SendTime)
}

// optional uint32 RewardType = 5;
inline bool TGuildRedPacketInfo::has_rewardtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildRedPacketInfo::set_has_rewardtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildRedPacketInfo::clear_has_rewardtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildRedPacketInfo::clear_rewardtype() {
  rewardtype_ = 0u;
  clear_has_rewardtype();
}
inline ::google::protobuf::uint32 TGuildRedPacketInfo::rewardtype() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketInfo.RewardType)
  return rewardtype_;
}
inline void TGuildRedPacketInfo::set_rewardtype(::google::protobuf::uint32 value) {
  set_has_rewardtype();
  rewardtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildRedPacketInfo.RewardType)
}

// optional uint32 RewardSum = 6;
inline bool TGuildRedPacketInfo::has_rewardsum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildRedPacketInfo::set_has_rewardsum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildRedPacketInfo::clear_has_rewardsum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildRedPacketInfo::clear_rewardsum() {
  rewardsum_ = 0u;
  clear_has_rewardsum();
}
inline ::google::protobuf::uint32 TGuildRedPacketInfo::rewardsum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketInfo.RewardSum)
  return rewardsum_;
}
inline void TGuildRedPacketInfo::set_rewardsum(::google::protobuf::uint32 value) {
  set_has_rewardsum();
  rewardsum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildRedPacketInfo.RewardSum)
}

// optional uint32 SingleCount = 7;
inline bool TGuildRedPacketInfo::has_singlecount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TGuildRedPacketInfo::set_has_singlecount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TGuildRedPacketInfo::clear_has_singlecount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TGuildRedPacketInfo::clear_singlecount() {
  singlecount_ = 0u;
  clear_has_singlecount();
}
inline ::google::protobuf::uint32 TGuildRedPacketInfo::singlecount() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketInfo.SingleCount)
  return singlecount_;
}
inline void TGuildRedPacketInfo::set_singlecount(::google::protobuf::uint32 value) {
  set_has_singlecount();
  singlecount_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildRedPacketInfo.SingleCount)
}

// optional uint32 SingleRemain = 8;
inline bool TGuildRedPacketInfo::has_singleremain() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TGuildRedPacketInfo::set_has_singleremain() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TGuildRedPacketInfo::clear_has_singleremain() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TGuildRedPacketInfo::clear_singleremain() {
  singleremain_ = 0u;
  clear_has_singleremain();
}
inline ::google::protobuf::uint32 TGuildRedPacketInfo::singleremain() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketInfo.SingleRemain)
  return singleremain_;
}
inline void TGuildRedPacketInfo::set_singleremain(::google::protobuf::uint32 value) {
  set_has_singleremain();
  singleremain_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildRedPacketInfo.SingleRemain)
}

// optional uint32 Status = 9;
inline bool TGuildRedPacketInfo::has_status() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TGuildRedPacketInfo::set_has_status() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TGuildRedPacketInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TGuildRedPacketInfo::clear_status() {
  status_ = 0u;
  clear_has_status();
}
inline ::google::protobuf::uint32 TGuildRedPacketInfo::status() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketInfo.Status)
  return status_;
}
inline void TGuildRedPacketInfo::set_status(::google::protobuf::uint32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildRedPacketInfo.Status)
}

// optional .pb.TUserSimpleInfo BestUserInfo = 10;
inline bool TGuildRedPacketInfo::has_bestuserinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TGuildRedPacketInfo::set_has_bestuserinfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TGuildRedPacketInfo::clear_has_bestuserinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TGuildRedPacketInfo::clear_bestuserinfo() {
  if (bestuserinfo_ != NULL) bestuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_bestuserinfo();
}
inline const ::pb::TUserSimpleInfo& TGuildRedPacketInfo::bestuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildRedPacketInfo.BestUserInfo)
  return bestuserinfo_ != NULL ? *bestuserinfo_ : *default_instance_->bestuserinfo_;
}
inline ::pb::TUserSimpleInfo* TGuildRedPacketInfo::mutable_bestuserinfo() {
  set_has_bestuserinfo();
  if (bestuserinfo_ == NULL) bestuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildRedPacketInfo.BestUserInfo)
  return bestuserinfo_;
}
inline ::pb::TUserSimpleInfo* TGuildRedPacketInfo::release_bestuserinfo() {
  clear_has_bestuserinfo();
  ::pb::TUserSimpleInfo* temp = bestuserinfo_;
  bestuserinfo_ = NULL;
  return temp;
}
inline void TGuildRedPacketInfo::set_allocated_bestuserinfo(::pb::TUserSimpleInfo* bestuserinfo) {
  delete bestuserinfo_;
  bestuserinfo_ = bestuserinfo;
  if (bestuserinfo) {
    set_has_bestuserinfo();
  } else {
    clear_has_bestuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildRedPacketInfo.BestUserInfo)
}

// -------------------------------------------------------------------

// TGuildGetRedPacketListReq

// repeated uint32 RedPacketIdArr = 1;
inline int TGuildGetRedPacketListReq::redpacketidarr_size() const {
  return redpacketidarr_.size();
}
inline void TGuildGetRedPacketListReq::clear_redpacketidarr() {
  redpacketidarr_.Clear();
}
inline ::google::protobuf::uint32 TGuildGetRedPacketListReq::redpacketidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetRedPacketListReq.RedPacketIdArr)
  return redpacketidarr_.Get(index);
}
inline void TGuildGetRedPacketListReq::set_redpacketidarr(int index, ::google::protobuf::uint32 value) {
  redpacketidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildGetRedPacketListReq.RedPacketIdArr)
}
inline void TGuildGetRedPacketListReq::add_redpacketidarr(::google::protobuf::uint32 value) {
  redpacketidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildGetRedPacketListReq.RedPacketIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGuildGetRedPacketListReq::redpacketidarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetRedPacketListReq.RedPacketIdArr)
  return redpacketidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGuildGetRedPacketListReq::mutable_redpacketidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetRedPacketListReq.RedPacketIdArr)
  return &redpacketidarr_;
}

// -------------------------------------------------------------------

// TGuildGetRedPacketListRsp

// repeated .pb.TGuildRedPacketInfo RedPacketArr = 1;
inline int TGuildGetRedPacketListRsp::redpacketarr_size() const {
  return redpacketarr_.size();
}
inline void TGuildGetRedPacketListRsp::clear_redpacketarr() {
  redpacketarr_.Clear();
}
inline const ::pb::TGuildRedPacketInfo& TGuildGetRedPacketListRsp::redpacketarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetRedPacketListRsp.RedPacketArr)
  return redpacketarr_.Get(index);
}
inline ::pb::TGuildRedPacketInfo* TGuildGetRedPacketListRsp::mutable_redpacketarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetRedPacketListRsp.RedPacketArr)
  return redpacketarr_.Mutable(index);
}
inline ::pb::TGuildRedPacketInfo* TGuildGetRedPacketListRsp::add_redpacketarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetRedPacketListRsp.RedPacketArr)
  return redpacketarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildRedPacketInfo >&
TGuildGetRedPacketListRsp::redpacketarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetRedPacketListRsp.RedPacketArr)
  return redpacketarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildRedPacketInfo >*
TGuildGetRedPacketListRsp::mutable_redpacketarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetRedPacketListRsp.RedPacketArr)
  return &redpacketarr_;
}

// optional uint32 LeaderFreeNum = 2;
inline bool TGuildGetRedPacketListRsp::has_leaderfreenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildGetRedPacketListRsp::set_has_leaderfreenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildGetRedPacketListRsp::clear_has_leaderfreenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildGetRedPacketListRsp::clear_leaderfreenum() {
  leaderfreenum_ = 0u;
  clear_has_leaderfreenum();
}
inline ::google::protobuf::uint32 TGuildGetRedPacketListRsp::leaderfreenum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetRedPacketListRsp.LeaderFreeNum)
  return leaderfreenum_;
}
inline void TGuildGetRedPacketListRsp::set_leaderfreenum(::google::protobuf::uint32 value) {
  set_has_leaderfreenum();
  leaderfreenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetRedPacketListRsp.LeaderFreeNum)
}

// optional uint32 BigSendNum = 3;
inline bool TGuildGetRedPacketListRsp::has_bigsendnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildGetRedPacketListRsp::set_has_bigsendnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildGetRedPacketListRsp::clear_has_bigsendnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildGetRedPacketListRsp::clear_bigsendnum() {
  bigsendnum_ = 0u;
  clear_has_bigsendnum();
}
inline ::google::protobuf::uint32 TGuildGetRedPacketListRsp::bigsendnum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetRedPacketListRsp.BigSendNum)
  return bigsendnum_;
}
inline void TGuildGetRedPacketListRsp::set_bigsendnum(::google::protobuf::uint32 value) {
  set_has_bigsendnum();
  bigsendnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetRedPacketListRsp.BigSendNum)
}

// -------------------------------------------------------------------

// TGuildGetRedPacketInfoReq

// optional uint32 RedPacketId = 1;
inline bool TGuildGetRedPacketInfoReq::has_redpacketid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGetRedPacketInfoReq::set_has_redpacketid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGetRedPacketInfoReq::clear_has_redpacketid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGetRedPacketInfoReq::clear_redpacketid() {
  redpacketid_ = 0u;
  clear_has_redpacketid();
}
inline ::google::protobuf::uint32 TGuildGetRedPacketInfoReq::redpacketid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetRedPacketInfoReq.RedPacketId)
  return redpacketid_;
}
inline void TGuildGetRedPacketInfoReq::set_redpacketid(::google::protobuf::uint32 value) {
  set_has_redpacketid();
  redpacketid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetRedPacketInfoReq.RedPacketId)
}

// -------------------------------------------------------------------

// TGuildGetRedPacketInfoRsp

// repeated .pb.TGuildRedPacketSingle SingleArr = 1;
inline int TGuildGetRedPacketInfoRsp::singlearr_size() const {
  return singlearr_.size();
}
inline void TGuildGetRedPacketInfoRsp::clear_singlearr() {
  singlearr_.Clear();
}
inline const ::pb::TGuildRedPacketSingle& TGuildGetRedPacketInfoRsp::singlearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetRedPacketInfoRsp.SingleArr)
  return singlearr_.Get(index);
}
inline ::pb::TGuildRedPacketSingle* TGuildGetRedPacketInfoRsp::mutable_singlearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetRedPacketInfoRsp.SingleArr)
  return singlearr_.Mutable(index);
}
inline ::pb::TGuildRedPacketSingle* TGuildGetRedPacketInfoRsp::add_singlearr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetRedPacketInfoRsp.SingleArr)
  return singlearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildRedPacketSingle >&
TGuildGetRedPacketInfoRsp::singlearr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetRedPacketInfoRsp.SingleArr)
  return singlearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildRedPacketSingle >*
TGuildGetRedPacketInfoRsp::mutable_singlearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetRedPacketInfoRsp.SingleArr)
  return &singlearr_;
}

// -------------------------------------------------------------------

// TGuildGainRedPacketReq

// optional uint32 RedPacketId = 1;
inline bool TGuildGainRedPacketReq::has_redpacketid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGainRedPacketReq::set_has_redpacketid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGainRedPacketReq::clear_has_redpacketid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGainRedPacketReq::clear_redpacketid() {
  redpacketid_ = 0u;
  clear_has_redpacketid();
}
inline ::google::protobuf::uint32 TGuildGainRedPacketReq::redpacketid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGainRedPacketReq.RedPacketId)
  return redpacketid_;
}
inline void TGuildGainRedPacketReq::set_redpacketid(::google::protobuf::uint32 value) {
  set_has_redpacketid();
  redpacketid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGainRedPacketReq.RedPacketId)
}

// -------------------------------------------------------------------

// TGuildGainRedPacketRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TGuildGainRedPacketRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TGuildGainRedPacketRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TGuildGainRedPacketRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGainRedPacketRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TGuildGainRedPacketRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGainRedPacketRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TGuildGainRedPacketRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TGuildGainRedPacketRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TGuildGainRedPacketRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGainRedPacketRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TGuildGainRedPacketRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGainRedPacketRsp.RewardArray)
  return &rewardarray_;
}

// repeated .pb.TCommonReward RandRewardArray = 2;
inline int TGuildGainRedPacketRsp::randrewardarray_size() const {
  return randrewardarray_.size();
}
inline void TGuildGainRedPacketRsp::clear_randrewardarray() {
  randrewardarray_.Clear();
}
inline const ::pb::TCommonReward& TGuildGainRedPacketRsp::randrewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGainRedPacketRsp.RandRewardArray)
  return randrewardarray_.Get(index);
}
inline ::pb::TCommonReward* TGuildGainRedPacketRsp::mutable_randrewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGainRedPacketRsp.RandRewardArray)
  return randrewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TGuildGainRedPacketRsp::add_randrewardarray() {
  // @@protoc_insertion_point(field_add:pb.TGuildGainRedPacketRsp.RandRewardArray)
  return randrewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TGuildGainRedPacketRsp::randrewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGainRedPacketRsp.RandRewardArray)
  return randrewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TGuildGainRedPacketRsp::mutable_randrewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGainRedPacketRsp.RandRewardArray)
  return &randrewardarray_;
}

// -------------------------------------------------------------------

// TGuildSendRedPacketReq

// optional uint32 RedPacketTid = 1;
inline bool TGuildSendRedPacketReq::has_redpackettid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildSendRedPacketReq::set_has_redpackettid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildSendRedPacketReq::clear_has_redpackettid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildSendRedPacketReq::clear_redpackettid() {
  redpackettid_ = 0u;
  clear_has_redpackettid();
}
inline ::google::protobuf::uint32 TGuildSendRedPacketReq::redpackettid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildSendRedPacketReq.RedPacketTid)
  return redpackettid_;
}
inline void TGuildSendRedPacketReq::set_redpackettid(::google::protobuf::uint32 value) {
  set_has_redpackettid();
  redpackettid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildSendRedPacketReq.RedPacketTid)
}

// -------------------------------------------------------------------

// TGuildSendRedPacketRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TGuildSendRedPacketRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TGuildSendRedPacketRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TGuildSendRedPacketRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildSendRedPacketRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TGuildSendRedPacketRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildSendRedPacketRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TGuildSendRedPacketRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TGuildSendRedPacketRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TGuildSendRedPacketRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TGuildSendRedPacketRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TGuildSendRedPacketRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildSendRedPacketRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TGuildReceiveRedPacketAchiReq

// optional uint32 Id = 1;
inline bool TGuildReceiveRedPacketAchiReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildReceiveRedPacketAchiReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildReceiveRedPacketAchiReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildReceiveRedPacketAchiReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TGuildReceiveRedPacketAchiReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TGuildReceiveRedPacketAchiReq.Id)
  return id_;
}
inline void TGuildReceiveRedPacketAchiReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildReceiveRedPacketAchiReq.Id)
}

// -------------------------------------------------------------------

// TGuildReceiveRedPacketAchiRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TGuildReceiveRedPacketAchiRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TGuildReceiveRedPacketAchiRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TGuildReceiveRedPacketAchiRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildReceiveRedPacketAchiRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TGuildReceiveRedPacketAchiRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildReceiveRedPacketAchiRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TGuildReceiveRedPacketAchiRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TGuildReceiveRedPacketAchiRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TGuildReceiveRedPacketAchiRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TGuildReceiveRedPacketAchiRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TGuildReceiveRedPacketAchiRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildReceiveRedPacketAchiRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TGuildUpdateRedPacketNotify

// optional .pb.TGuildRedPacketInfo RedPacketInfo = 1;
inline bool TGuildUpdateRedPacketNotify::has_redpacketinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildUpdateRedPacketNotify::set_has_redpacketinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildUpdateRedPacketNotify::clear_has_redpacketinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildUpdateRedPacketNotify::clear_redpacketinfo() {
  if (redpacketinfo_ != NULL) redpacketinfo_->::pb::TGuildRedPacketInfo::Clear();
  clear_has_redpacketinfo();
}
inline const ::pb::TGuildRedPacketInfo& TGuildUpdateRedPacketNotify::redpacketinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateRedPacketNotify.RedPacketInfo)
  return redpacketinfo_ != NULL ? *redpacketinfo_ : *default_instance_->redpacketinfo_;
}
inline ::pb::TGuildRedPacketInfo* TGuildUpdateRedPacketNotify::mutable_redpacketinfo() {
  set_has_redpacketinfo();
  if (redpacketinfo_ == NULL) redpacketinfo_ = new ::pb::TGuildRedPacketInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildUpdateRedPacketNotify.RedPacketInfo)
  return redpacketinfo_;
}
inline ::pb::TGuildRedPacketInfo* TGuildUpdateRedPacketNotify::release_redpacketinfo() {
  clear_has_redpacketinfo();
  ::pb::TGuildRedPacketInfo* temp = redpacketinfo_;
  redpacketinfo_ = NULL;
  return temp;
}
inline void TGuildUpdateRedPacketNotify::set_allocated_redpacketinfo(::pb::TGuildRedPacketInfo* redpacketinfo) {
  delete redpacketinfo_;
  redpacketinfo_ = redpacketinfo;
  if (redpacketinfo) {
    set_has_redpacketinfo();
  } else {
    clear_has_redpacketinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildUpdateRedPacketNotify.RedPacketInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fGuildRedpacket_2eproto__INCLUDED
