// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/BuffDataBase2.proto

#ifndef PROTOBUF_module_2fBuffDataBase2_2eproto__INCLUDED
#define PROTOBUF_module_2fBuffDataBase2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

class BuffModAttackSpeedConfig;
class BuffModNoMoveConfig;
class BuffModNoNormalSkillConfig;
class BuffModNoSkillConfig;
class BuffModDizzinessConfig;
class BuffModFreezeConfig;
class BuffModCharmedConfig;
class BuffModChaosConfig;
class BuffModRandomMoveConfig;
class BuffModTDMoniterDefenderStateConfig;
class BuffModTDNoBeanConfig;
class BuffModChangeDirConfig;
class BuffModFearConfig;
class BuffModTDRepeatSendBeanConfig;
class BuffModTDRepeatCheckBeanConfig;
class BuffModIgnoreShieldConfig;
class BuffModNoSuckBloodConfig;
class TBuffOnStack;
class BuffModBuffOnStackConfig;
class BuffModRevertStateOnEndConfig;
class BuffModChangeCastRangeConfig;
class BuffModNoReviveConfig;
class BuffModChangeSummonedAIConfig;
class BuffModSetMaxLoseHPConfig;
class BuffModAdjustReflectedDamageConfig;
class BuffModActiveUIEffectConfig;
class BuffModAdjustBuffHitRateConfig;
class BuffModLimitByMaxHpRateConfig;
class BuffModBattleArcherModifyConfig;

// ===================================================================

/*FOR2LUA
<Record>
	<name>BuffModAttackSpeedConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModAttackSpeedConfig : public ::google::protobuf::Message {
 public:
  BuffModAttackSpeedConfig();
  virtual ~BuffModAttackSpeedConfig();

  BuffModAttackSpeedConfig(const BuffModAttackSpeedConfig& from);

  inline BuffModAttackSpeedConfig& operator=(const BuffModAttackSpeedConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModAttackSpeedConfig& default_instance();

  void Swap(BuffModAttackSpeedConfig* other);

  // implements Message ----------------------------------------------

  BuffModAttackSpeedConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModAttackSpeedConfig& from);
  void MergeFrom(const BuffModAttackSpeedConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModAttackSpeedConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModAttackSpeedConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 PercentParam = 3;
  inline bool has_percentparam() const;
  inline void clear_percentparam();
  static const int kPercentParamFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModAttackSpeedConfig</name>
  	<Function>
  		<name>percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percentparam</name>
  		<replaceName>PercentParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percentparam() const;
  inline void set_percentparam(::google::protobuf::int32 value);

  // optional int32 PercentGrowth = 4;
  inline bool has_percentgrowth() const;
  inline void clear_percentgrowth();
  static const int kPercentGrowthFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModAttackSpeedConfig</name>
  	<Function>
  		<name>percentgrowth</name>
  		<replaceName>PercentGrowth</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percentgrowth</name>
  		<replaceName>PercentGrowth</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percentgrowth</name>
  		<replaceName>PercentGrowth</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percentgrowth() const;
  inline void set_percentgrowth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModAttackSpeedConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_percentparam();
  inline void clear_has_percentparam();
  inline void set_has_percentgrowth();
  inline void clear_has_percentgrowth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 percentparam_;
  ::google::protobuf::int32 percentgrowth_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModAttackSpeedConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModNoMoveConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModNoMoveConfig : public ::google::protobuf::Message {
 public:
  BuffModNoMoveConfig();
  virtual ~BuffModNoMoveConfig();

  BuffModNoMoveConfig(const BuffModNoMoveConfig& from);

  inline BuffModNoMoveConfig& operator=(const BuffModNoMoveConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModNoMoveConfig& default_instance();

  void Swap(BuffModNoMoveConfig* other);

  // implements Message ----------------------------------------------

  BuffModNoMoveConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModNoMoveConfig& from);
  void MergeFrom(const BuffModNoMoveConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoMoveConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoMoveConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional bool EndWhenDamaged = 3;
  inline bool has_endwhendamaged() const;
  inline void clear_endwhendamaged();
  static const int kEndWhenDamagedFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoMoveConfig</name>
  	<Function>
  		<name>endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool endwhendamaged() const;
  inline void set_endwhendamaged(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModNoMoveConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_endwhendamaged();
  inline void clear_has_endwhendamaged();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool endwhendamaged_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModNoMoveConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModNoNormalSkillConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModNoNormalSkillConfig : public ::google::protobuf::Message {
 public:
  BuffModNoNormalSkillConfig();
  virtual ~BuffModNoNormalSkillConfig();

  BuffModNoNormalSkillConfig(const BuffModNoNormalSkillConfig& from);

  inline BuffModNoNormalSkillConfig& operator=(const BuffModNoNormalSkillConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModNoNormalSkillConfig& default_instance();

  void Swap(BuffModNoNormalSkillConfig* other);

  // implements Message ----------------------------------------------

  BuffModNoNormalSkillConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModNoNormalSkillConfig& from);
  void MergeFrom(const BuffModNoNormalSkillConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoNormalSkillConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoNormalSkillConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional bool EndWhenDamaged = 3;
  inline bool has_endwhendamaged() const;
  inline void clear_endwhendamaged();
  static const int kEndWhenDamagedFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoNormalSkillConfig</name>
  	<Function>
  		<name>endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool endwhendamaged() const;
  inline void set_endwhendamaged(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModNoNormalSkillConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_endwhendamaged();
  inline void clear_has_endwhendamaged();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool endwhendamaged_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModNoNormalSkillConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModNoSkillConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModNoSkillConfig : public ::google::protobuf::Message {
 public:
  BuffModNoSkillConfig();
  virtual ~BuffModNoSkillConfig();

  BuffModNoSkillConfig(const BuffModNoSkillConfig& from);

  inline BuffModNoSkillConfig& operator=(const BuffModNoSkillConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModNoSkillConfig& default_instance();

  void Swap(BuffModNoSkillConfig* other);

  // implements Message ----------------------------------------------

  BuffModNoSkillConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModNoSkillConfig& from);
  void MergeFrom(const BuffModNoSkillConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoSkillConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoSkillConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional bool EndWhenDamaged = 3;
  inline bool has_endwhendamaged() const;
  inline void clear_endwhendamaged();
  static const int kEndWhenDamagedFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoSkillConfig</name>
  	<Function>
  		<name>endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool endwhendamaged() const;
  inline void set_endwhendamaged(bool value);

  // optional int32 Type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoSkillConfig</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModNoSkillConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_endwhendamaged();
  inline void clear_has_endwhendamaged();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool endwhendamaged_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModNoSkillConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModDizzinessConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModDizzinessConfig : public ::google::protobuf::Message {
 public:
  BuffModDizzinessConfig();
  virtual ~BuffModDizzinessConfig();

  BuffModDizzinessConfig(const BuffModDizzinessConfig& from);

  inline BuffModDizzinessConfig& operator=(const BuffModDizzinessConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModDizzinessConfig& default_instance();

  void Swap(BuffModDizzinessConfig* other);

  // implements Message ----------------------------------------------

  BuffModDizzinessConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModDizzinessConfig& from);
  void MergeFrom(const BuffModDizzinessConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModDizzinessConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModDizzinessConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional bool EndWhenDamaged = 3;
  inline bool has_endwhendamaged() const;
  inline void clear_endwhendamaged();
  static const int kEndWhenDamagedFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModDizzinessConfig</name>
  	<Function>
  		<name>endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool endwhendamaged() const;
  inline void set_endwhendamaged(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModDizzinessConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_endwhendamaged();
  inline void clear_has_endwhendamaged();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool endwhendamaged_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModDizzinessConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModFreezeConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModFreezeConfig : public ::google::protobuf::Message {
 public:
  BuffModFreezeConfig();
  virtual ~BuffModFreezeConfig();

  BuffModFreezeConfig(const BuffModFreezeConfig& from);

  inline BuffModFreezeConfig& operator=(const BuffModFreezeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModFreezeConfig& default_instance();

  void Swap(BuffModFreezeConfig* other);

  // implements Message ----------------------------------------------

  BuffModFreezeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModFreezeConfig& from);
  void MergeFrom(const BuffModFreezeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModFreezeConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModFreezeConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional bool EndWhenDamaged = 3;
  inline bool has_endwhendamaged() const;
  inline void clear_endwhendamaged();
  static const int kEndWhenDamagedFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModFreezeConfig</name>
  	<Function>
  		<name>endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool endwhendamaged() const;
  inline void set_endwhendamaged(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModFreezeConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_endwhendamaged();
  inline void clear_has_endwhendamaged();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool endwhendamaged_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModFreezeConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModCharmedConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModCharmedConfig : public ::google::protobuf::Message {
 public:
  BuffModCharmedConfig();
  virtual ~BuffModCharmedConfig();

  BuffModCharmedConfig(const BuffModCharmedConfig& from);

  inline BuffModCharmedConfig& operator=(const BuffModCharmedConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModCharmedConfig& default_instance();

  void Swap(BuffModCharmedConfig* other);

  // implements Message ----------------------------------------------

  BuffModCharmedConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModCharmedConfig& from);
  void MergeFrom(const BuffModCharmedConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModCharmedConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModCharmedConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional bool EndWhenDamaged = 3;
  inline bool has_endwhendamaged() const;
  inline void clear_endwhendamaged();
  static const int kEndWhenDamagedFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModCharmedConfig</name>
  	<Function>
  		<name>endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool endwhendamaged() const;
  inline void set_endwhendamaged(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModCharmedConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_endwhendamaged();
  inline void clear_has_endwhendamaged();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool endwhendamaged_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModCharmedConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModChaosConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModChaosConfig : public ::google::protobuf::Message {
 public:
  BuffModChaosConfig();
  virtual ~BuffModChaosConfig();

  BuffModChaosConfig(const BuffModChaosConfig& from);

  inline BuffModChaosConfig& operator=(const BuffModChaosConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModChaosConfig& default_instance();

  void Swap(BuffModChaosConfig* other);

  // implements Message ----------------------------------------------

  BuffModChaosConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModChaosConfig& from);
  void MergeFrom(const BuffModChaosConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModChaosConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModChaosConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional bool EndWhenDamaged = 3;
  inline bool has_endwhendamaged() const;
  inline void clear_endwhendamaged();
  static const int kEndWhenDamagedFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModChaosConfig</name>
  	<Function>
  		<name>endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool endwhendamaged() const;
  inline void set_endwhendamaged(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModChaosConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_endwhendamaged();
  inline void clear_has_endwhendamaged();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool endwhendamaged_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModChaosConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModRandomMoveConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModRandomMoveConfig : public ::google::protobuf::Message {
 public:
  BuffModRandomMoveConfig();
  virtual ~BuffModRandomMoveConfig();

  BuffModRandomMoveConfig(const BuffModRandomMoveConfig& from);

  inline BuffModRandomMoveConfig& operator=(const BuffModRandomMoveConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModRandomMoveConfig& default_instance();

  void Swap(BuffModRandomMoveConfig* other);

  // implements Message ----------------------------------------------

  BuffModRandomMoveConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModRandomMoveConfig& from);
  void MergeFrom(const BuffModRandomMoveConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModRandomMoveConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModRandomMoveConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 MoveAreaRadius = 3;
  inline bool has_movearearadius() const;
  inline void clear_movearearadius();
  static const int kMoveAreaRadiusFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModRandomMoveConfig</name>
  	<Function>
  		<name>movearearadius</name>
  		<replaceName>MoveAreaRadius</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_movearearadius</name>
  		<replaceName>MoveAreaRadius</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_movearearadius</name>
  		<replaceName>MoveAreaRadius</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 movearearadius() const;
  inline void set_movearearadius(::google::protobuf::int32 value);

  // optional bool EndWhenDamaged = 4;
  inline bool has_endwhendamaged() const;
  inline void clear_endwhendamaged();
  static const int kEndWhenDamagedFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModRandomMoveConfig</name>
  	<Function>
  		<name>endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endwhendamaged</name>
  		<replaceName>EndWhenDamaged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool endwhendamaged() const;
  inline void set_endwhendamaged(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModRandomMoveConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_movearearadius();
  inline void clear_has_movearearadius();
  inline void set_has_endwhendamaged();
  inline void clear_has_endwhendamaged();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 delaytime_;
  bool active_;
  bool endwhendamaged_;
  ::google::protobuf::int32 movearearadius_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModRandomMoveConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModTDMoniterDefenderStateConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModTDMoniterDefenderStateConfig : public ::google::protobuf::Message {
 public:
  BuffModTDMoniterDefenderStateConfig();
  virtual ~BuffModTDMoniterDefenderStateConfig();

  BuffModTDMoniterDefenderStateConfig(const BuffModTDMoniterDefenderStateConfig& from);

  inline BuffModTDMoniterDefenderStateConfig& operator=(const BuffModTDMoniterDefenderStateConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModTDMoniterDefenderStateConfig& default_instance();

  void Swap(BuffModTDMoniterDefenderStateConfig* other);

  // implements Message ----------------------------------------------

  BuffModTDMoniterDefenderStateConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModTDMoniterDefenderStateConfig& from);
  void MergeFrom(const BuffModTDMoniterDefenderStateConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModTDMoniterDefenderStateConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModTDMoniterDefenderStateConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModTDMoniterDefenderStateConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModTDNoBeanConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModTDNoBeanConfig : public ::google::protobuf::Message {
 public:
  BuffModTDNoBeanConfig();
  virtual ~BuffModTDNoBeanConfig();

  BuffModTDNoBeanConfig(const BuffModTDNoBeanConfig& from);

  inline BuffModTDNoBeanConfig& operator=(const BuffModTDNoBeanConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModTDNoBeanConfig& default_instance();

  void Swap(BuffModTDNoBeanConfig* other);

  // implements Message ----------------------------------------------

  BuffModTDNoBeanConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModTDNoBeanConfig& from);
  void MergeFrom(const BuffModTDNoBeanConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModTDNoBeanConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModTDNoBeanConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModTDNoBeanConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModTDNoBeanConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModChangeDirConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModChangeDirConfig : public ::google::protobuf::Message {
 public:
  BuffModChangeDirConfig();
  virtual ~BuffModChangeDirConfig();

  BuffModChangeDirConfig(const BuffModChangeDirConfig& from);

  inline BuffModChangeDirConfig& operator=(const BuffModChangeDirConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModChangeDirConfig& default_instance();

  void Swap(BuffModChangeDirConfig* other);

  // implements Message ----------------------------------------------

  BuffModChangeDirConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModChangeDirConfig& from);
  void MergeFrom(const BuffModChangeDirConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDirConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 ArmyId = 2;
  inline bool has_armyid() const;
  inline void clear_armyid();
  static const int kArmyIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDirConfig</name>
  	<Function>
  		<name>armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 armyid() const;
  inline void set_armyid(::google::protobuf::int32 value);

  // optional int32 BuffId = 3;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDirConfig</name>
  	<Function>
  		<name>buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffid</name>
  		<replaceName>BuffId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 buffid() const;
  inline void set_buffid(::google::protobuf::int32 value);

  // optional int32 Type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDirConfig</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 DelayTime = 5;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeDirConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModChangeDirConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_armyid();
  inline void clear_has_armyid();
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 armyid_;
  ::google::protobuf::int32 buffid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 delaytime_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModChangeDirConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModFearConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModFearConfig : public ::google::protobuf::Message {
 public:
  BuffModFearConfig();
  virtual ~BuffModFearConfig();

  BuffModFearConfig(const BuffModFearConfig& from);

  inline BuffModFearConfig& operator=(const BuffModFearConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModFearConfig& default_instance();

  void Swap(BuffModFearConfig* other);

  // implements Message ----------------------------------------------

  BuffModFearConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModFearConfig& from);
  void MergeFrom(const BuffModFearConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModFearConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModFearConfig</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModFearConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModFearConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModTDRepeatSendBeanConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModTDRepeatSendBeanConfig : public ::google::protobuf::Message {
 public:
  BuffModTDRepeatSendBeanConfig();
  virtual ~BuffModTDRepeatSendBeanConfig();

  BuffModTDRepeatSendBeanConfig(const BuffModTDRepeatSendBeanConfig& from);

  inline BuffModTDRepeatSendBeanConfig& operator=(const BuffModTDRepeatSendBeanConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModTDRepeatSendBeanConfig& default_instance();

  void Swap(BuffModTDRepeatSendBeanConfig* other);

  // implements Message ----------------------------------------------

  BuffModTDRepeatSendBeanConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModTDRepeatSendBeanConfig& from);
  void MergeFrom(const BuffModTDRepeatSendBeanConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModTDRepeatSendBeanConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModTDRepeatSendBeanConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModTDRepeatSendBeanConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModTDRepeatCheckBeanConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModTDRepeatCheckBeanConfig : public ::google::protobuf::Message {
 public:
  BuffModTDRepeatCheckBeanConfig();
  virtual ~BuffModTDRepeatCheckBeanConfig();

  BuffModTDRepeatCheckBeanConfig(const BuffModTDRepeatCheckBeanConfig& from);

  inline BuffModTDRepeatCheckBeanConfig& operator=(const BuffModTDRepeatCheckBeanConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModTDRepeatCheckBeanConfig& default_instance();

  void Swap(BuffModTDRepeatCheckBeanConfig* other);

  // implements Message ----------------------------------------------

  BuffModTDRepeatCheckBeanConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModTDRepeatCheckBeanConfig& from);
  void MergeFrom(const BuffModTDRepeatCheckBeanConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModTDRepeatCheckBeanConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 Type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModTDRepeatCheckBeanConfig</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModTDRepeatCheckBeanConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 type_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModTDRepeatCheckBeanConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModIgnoreShieldConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModIgnoreShieldConfig : public ::google::protobuf::Message {
 public:
  BuffModIgnoreShieldConfig();
  virtual ~BuffModIgnoreShieldConfig();

  BuffModIgnoreShieldConfig(const BuffModIgnoreShieldConfig& from);

  inline BuffModIgnoreShieldConfig& operator=(const BuffModIgnoreShieldConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModIgnoreShieldConfig& default_instance();

  void Swap(BuffModIgnoreShieldConfig* other);

  // implements Message ----------------------------------------------

  BuffModIgnoreShieldConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModIgnoreShieldConfig& from);
  void MergeFrom(const BuffModIgnoreShieldConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModIgnoreShieldConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // @@protoc_insertion_point(class_scope:pb.BuffModIgnoreShieldConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModIgnoreShieldConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModNoSuckBloodConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModNoSuckBloodConfig : public ::google::protobuf::Message {
 public:
  BuffModNoSuckBloodConfig();
  virtual ~BuffModNoSuckBloodConfig();

  BuffModNoSuckBloodConfig(const BuffModNoSuckBloodConfig& from);

  inline BuffModNoSuckBloodConfig& operator=(const BuffModNoSuckBloodConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModNoSuckBloodConfig& default_instance();

  void Swap(BuffModNoSuckBloodConfig* other);

  // implements Message ----------------------------------------------

  BuffModNoSuckBloodConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModNoSuckBloodConfig& from);
  void MergeFrom(const BuffModNoSuckBloodConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoSuckBloodConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoSuckBloodConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 Percent = 3;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoSuckBloodConfig</name>
  	<Function>
  		<name>percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percent() const;
  inline void set_percent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModNoSuckBloodConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_percent();
  inline void clear_has_percent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 percent_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModNoSuckBloodConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBuffOnStack</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBuffOnStack : public ::google::protobuf::Message {
 public:
  TBuffOnStack();
  virtual ~TBuffOnStack();

  TBuffOnStack(const TBuffOnStack& from);

  inline TBuffOnStack& operator=(const TBuffOnStack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBuffOnStack& default_instance();

  void Swap(TBuffOnStack* other);

  // implements Message ----------------------------------------------

  TBuffOnStack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBuffOnStack& from);
  void MergeFrom(const TBuffOnStack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Stack = 1;
  inline bool has_stack() const;
  inline void clear_stack();
  static const int kStackFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBuffOnStack</name>
  	<Function>
  		<name>stack</name>
  		<replaceName>Stack</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stack</name>
  		<replaceName>Stack</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stack</name>
  		<replaceName>Stack</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 stack() const;
  inline void set_stack(::google::protobuf::uint32 value);

  // repeated uint32 BuffArr = 2;
  inline int buffarr_size() const;
  inline void clear_buffarr();
  static const int kBuffArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBuffOnStack</name>
  	<Function>
  		<name>buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buffarr</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buffarr_size</name>
  		<replaceName>BuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buffarr(int index) const;
  inline void set_buffarr(int index, ::google::protobuf::uint32 value);
  inline void add_buffarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      buffarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_buffarr();

  // @@protoc_insertion_point(class_scope:pb.TBuffOnStack)
 private:
  inline void set_has_stack();
  inline void clear_has_stack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > buffarr_;
  ::google::protobuf::uint32 stack_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static TBuffOnStack* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModBuffOnStackConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModBuffOnStackConfig : public ::google::protobuf::Message {
 public:
  BuffModBuffOnStackConfig();
  virtual ~BuffModBuffOnStackConfig();

  BuffModBuffOnStackConfig(const BuffModBuffOnStackConfig& from);

  inline BuffModBuffOnStackConfig& operator=(const BuffModBuffOnStackConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModBuffOnStackConfig& default_instance();

  void Swap(BuffModBuffOnStackConfig* other);

  // implements Message ----------------------------------------------

  BuffModBuffOnStackConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModBuffOnStackConfig& from);
  void MergeFrom(const BuffModBuffOnStackConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModBuffOnStackConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModBuffOnStackConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // repeated .pb.TBuffOnStack ActionArr = 3;
  inline int actionarr_size() const;
  inline void clear_actionarr();
  static const int kActionArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModBuffOnStackConfig</name>
  	<Function>
  		<name>actionarr</name>
  		<replaceName>ActionArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_actionarr</name>
  		<replaceName>ActionArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_actionarr</name>
  		<replaceName>ActionArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_actionarr</name>
  		<replaceName>ActionArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>actionarr_size</name>
  		<replaceName>ActionArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBuffOnStack& actionarr(int index) const;
  inline ::pb::TBuffOnStack* mutable_actionarr(int index);
  inline ::pb::TBuffOnStack* add_actionarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBuffOnStack >&
      actionarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBuffOnStack >*
      mutable_actionarr();

  // @@protoc_insertion_point(class_scope:pb.BuffModBuffOnStackConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBuffOnStack > actionarr_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModBuffOnStackConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModRevertStateOnEndConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModRevertStateOnEndConfig : public ::google::protobuf::Message {
 public:
  BuffModRevertStateOnEndConfig();
  virtual ~BuffModRevertStateOnEndConfig();

  BuffModRevertStateOnEndConfig(const BuffModRevertStateOnEndConfig& from);

  inline BuffModRevertStateOnEndConfig& operator=(const BuffModRevertStateOnEndConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModRevertStateOnEndConfig& default_instance();

  void Swap(BuffModRevertStateOnEndConfig* other);

  // implements Message ----------------------------------------------

  BuffModRevertStateOnEndConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModRevertStateOnEndConfig& from);
  void MergeFrom(const BuffModRevertStateOnEndConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModRevertStateOnEndConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModRevertStateOnEndConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional uint32 HpPercent = 3;
  inline bool has_hppercent() const;
  inline void clear_hppercent();
  static const int kHpPercentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModRevertStateOnEndConfig</name>
  	<Function>
  		<name>hppercent</name>
  		<replaceName>HpPercent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hppercent</name>
  		<replaceName>HpPercent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hppercent</name>
  		<replaceName>HpPercent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hppercent() const;
  inline void set_hppercent(::google::protobuf::uint32 value);

  // optional uint32 RagePercent = 4;
  inline bool has_ragepercent() const;
  inline void clear_ragepercent();
  static const int kRagePercentFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModRevertStateOnEndConfig</name>
  	<Function>
  		<name>ragepercent</name>
  		<replaceName>RagePercent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ragepercent</name>
  		<replaceName>RagePercent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ragepercent</name>
  		<replaceName>RagePercent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 ragepercent() const;
  inline void set_ragepercent(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModRevertStateOnEndConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_hppercent();
  inline void clear_has_hppercent();
  inline void set_has_ragepercent();
  inline void clear_has_ragepercent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::uint32 hppercent_;
  ::google::protobuf::uint32 ragepercent_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModRevertStateOnEndConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModChangeCastRangeConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModChangeCastRangeConfig : public ::google::protobuf::Message {
 public:
  BuffModChangeCastRangeConfig();
  virtual ~BuffModChangeCastRangeConfig();

  BuffModChangeCastRangeConfig(const BuffModChangeCastRangeConfig& from);

  inline BuffModChangeCastRangeConfig& operator=(const BuffModChangeCastRangeConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModChangeCastRangeConfig& default_instance();

  void Swap(BuffModChangeCastRangeConfig* other);

  // implements Message ----------------------------------------------

  BuffModChangeCastRangeConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModChangeCastRangeConfig& from);
  void MergeFrom(const BuffModChangeCastRangeConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeCastRangeConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional uint32 Range = 2;
  inline bool has_range() const;
  inline void clear_range();
  static const int kRangeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeCastRangeConfig</name>
  	<Function>
  		<name>range</name>
  		<replaceName>Range</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_range</name>
  		<replaceName>Range</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_range</name>
  		<replaceName>Range</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 range() const;
  inline void set_range(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModChangeCastRangeConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_range();
  inline void clear_has_range();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::uint32 range_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModChangeCastRangeConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModNoReviveConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModNoReviveConfig : public ::google::protobuf::Message {
 public:
  BuffModNoReviveConfig();
  virtual ~BuffModNoReviveConfig();

  BuffModNoReviveConfig(const BuffModNoReviveConfig& from);

  inline BuffModNoReviveConfig& operator=(const BuffModNoReviveConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModNoReviveConfig& default_instance();

  void Swap(BuffModNoReviveConfig* other);

  // implements Message ----------------------------------------------

  BuffModNoReviveConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModNoReviveConfig& from);
  void MergeFrom(const BuffModNoReviveConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoReviveConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModNoReviveConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModNoReviveConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModNoReviveConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModChangeSummonedAIConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModChangeSummonedAIConfig : public ::google::protobuf::Message {
 public:
  BuffModChangeSummonedAIConfig();
  virtual ~BuffModChangeSummonedAIConfig();

  BuffModChangeSummonedAIConfig(const BuffModChangeSummonedAIConfig& from);

  inline BuffModChangeSummonedAIConfig& operator=(const BuffModChangeSummonedAIConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModChangeSummonedAIConfig& default_instance();

  void Swap(BuffModChangeSummonedAIConfig* other);

  // implements Message ----------------------------------------------

  BuffModChangeSummonedAIConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModChangeSummonedAIConfig& from);
  void MergeFrom(const BuffModChangeSummonedAIConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeSummonedAIConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModChangeSummonedAIConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModChangeSummonedAIConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModChangeSummonedAIConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModSetMaxLoseHPConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModSetMaxLoseHPConfig : public ::google::protobuf::Message {
 public:
  BuffModSetMaxLoseHPConfig();
  virtual ~BuffModSetMaxLoseHPConfig();

  BuffModSetMaxLoseHPConfig(const BuffModSetMaxLoseHPConfig& from);

  inline BuffModSetMaxLoseHPConfig& operator=(const BuffModSetMaxLoseHPConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModSetMaxLoseHPConfig& default_instance();

  void Swap(BuffModSetMaxLoseHPConfig* other);

  // implements Message ----------------------------------------------

  BuffModSetMaxLoseHPConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModSetMaxLoseHPConfig& from);
  void MergeFrom(const BuffModSetMaxLoseHPConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModSetMaxLoseHPConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModSetMaxLoseHPConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 Percent = 3;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModSetMaxLoseHPConfig</name>
  	<Function>
  		<name>percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percent() const;
  inline void set_percent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModSetMaxLoseHPConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_percent();
  inline void clear_has_percent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 percent_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModSetMaxLoseHPConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModAdjustReflectedDamageConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModAdjustReflectedDamageConfig : public ::google::protobuf::Message {
 public:
  BuffModAdjustReflectedDamageConfig();
  virtual ~BuffModAdjustReflectedDamageConfig();

  BuffModAdjustReflectedDamageConfig(const BuffModAdjustReflectedDamageConfig& from);

  inline BuffModAdjustReflectedDamageConfig& operator=(const BuffModAdjustReflectedDamageConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModAdjustReflectedDamageConfig& default_instance();

  void Swap(BuffModAdjustReflectedDamageConfig* other);

  // implements Message ----------------------------------------------

  BuffModAdjustReflectedDamageConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModAdjustReflectedDamageConfig& from);
  void MergeFrom(const BuffModAdjustReflectedDamageConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModAdjustReflectedDamageConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModAdjustReflectedDamageConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 Percent = 3;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModAdjustReflectedDamageConfig</name>
  	<Function>
  		<name>percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percent() const;
  inline void set_percent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModAdjustReflectedDamageConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_percent();
  inline void clear_has_percent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 percent_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModAdjustReflectedDamageConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModActiveUIEffectConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModActiveUIEffectConfig : public ::google::protobuf::Message {
 public:
  BuffModActiveUIEffectConfig();
  virtual ~BuffModActiveUIEffectConfig();

  BuffModActiveUIEffectConfig(const BuffModActiveUIEffectConfig& from);

  inline BuffModActiveUIEffectConfig& operator=(const BuffModActiveUIEffectConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModActiveUIEffectConfig& default_instance();

  void Swap(BuffModActiveUIEffectConfig* other);

  // implements Message ----------------------------------------------

  BuffModActiveUIEffectConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModActiveUIEffectConfig& from);
  void MergeFrom(const BuffModActiveUIEffectConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModActiveUIEffectConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModActiveUIEffectConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional string StartEffect = 3;
  inline bool has_starteffect() const;
  inline void clear_starteffect();
  static const int kStartEffectFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModActiveUIEffectConfig</name>
  	<Function>
  		<name>starteffect</name>
  		<replaceName>StartEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starteffect</name>
  		<replaceName>StartEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starteffect</name>
  		<replaceName>StartEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& starteffect() const;
  inline void set_starteffect(const ::std::string& value);
  inline void set_starteffect(const char* value);
  inline void set_starteffect(const char* value, size_t size);
  inline ::std::string* mutable_starteffect();
  inline ::std::string* release_starteffect();
  inline void set_allocated_starteffect(::std::string* starteffect);

  // optional string LastEffect = 4;
  inline bool has_lasteffect() const;
  inline void clear_lasteffect();
  static const int kLastEffectFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModActiveUIEffectConfig</name>
  	<Function>
  		<name>lasteffect</name>
  		<replaceName>LastEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lasteffect</name>
  		<replaceName>LastEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lasteffect</name>
  		<replaceName>LastEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& lasteffect() const;
  inline void set_lasteffect(const ::std::string& value);
  inline void set_lasteffect(const char* value);
  inline void set_lasteffect(const char* value, size_t size);
  inline ::std::string* mutable_lasteffect();
  inline ::std::string* release_lasteffect();
  inline void set_allocated_lasteffect(::std::string* lasteffect);

  // optional string EndEffect = 5;
  inline bool has_endeffect() const;
  inline void clear_endeffect();
  static const int kEndEffectFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>BuffModActiveUIEffectConfig</name>
  	<Function>
  		<name>endeffect</name>
  		<replaceName>EndEffect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endeffect</name>
  		<replaceName>EndEffect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endeffect</name>
  		<replaceName>EndEffect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& endeffect() const;
  inline void set_endeffect(const ::std::string& value);
  inline void set_endeffect(const char* value);
  inline void set_endeffect(const char* value, size_t size);
  inline ::std::string* mutable_endeffect();
  inline ::std::string* release_endeffect();
  inline void set_allocated_endeffect(::std::string* endeffect);

  // @@protoc_insertion_point(class_scope:pb.BuffModActiveUIEffectConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_starteffect();
  inline void clear_has_starteffect();
  inline void set_has_lasteffect();
  inline void clear_has_lasteffect();
  inline void set_has_endeffect();
  inline void clear_has_endeffect();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::std::string* starteffect_;
  ::std::string* lasteffect_;
  ::std::string* endeffect_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModActiveUIEffectConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModAdjustBuffHitRateConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModAdjustBuffHitRateConfig : public ::google::protobuf::Message {
 public:
  BuffModAdjustBuffHitRateConfig();
  virtual ~BuffModAdjustBuffHitRateConfig();

  BuffModAdjustBuffHitRateConfig(const BuffModAdjustBuffHitRateConfig& from);

  inline BuffModAdjustBuffHitRateConfig& operator=(const BuffModAdjustBuffHitRateConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModAdjustBuffHitRateConfig& default_instance();

  void Swap(BuffModAdjustBuffHitRateConfig* other);

  // implements Message ----------------------------------------------

  BuffModAdjustBuffHitRateConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModAdjustBuffHitRateConfig& from);
  void MergeFrom(const BuffModAdjustBuffHitRateConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModAdjustBuffHitRateConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModAdjustBuffHitRateConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 AdjustRate = 3;
  inline bool has_adjustrate() const;
  inline void clear_adjustrate();
  static const int kAdjustRateFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModAdjustBuffHitRateConfig</name>
  	<Function>
  		<name>adjustrate</name>
  		<replaceName>AdjustRate</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adjustrate</name>
  		<replaceName>AdjustRate</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adjustrate</name>
  		<replaceName>AdjustRate</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 adjustrate() const;
  inline void set_adjustrate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModAdjustBuffHitRateConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_adjustrate();
  inline void clear_has_adjustrate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 adjustrate_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModAdjustBuffHitRateConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModLimitByMaxHpRateConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModLimitByMaxHpRateConfig : public ::google::protobuf::Message {
 public:
  BuffModLimitByMaxHpRateConfig();
  virtual ~BuffModLimitByMaxHpRateConfig();

  BuffModLimitByMaxHpRateConfig(const BuffModLimitByMaxHpRateConfig& from);

  inline BuffModLimitByMaxHpRateConfig& operator=(const BuffModLimitByMaxHpRateConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModLimitByMaxHpRateConfig& default_instance();

  void Swap(BuffModLimitByMaxHpRateConfig* other);

  // implements Message ----------------------------------------------

  BuffModLimitByMaxHpRateConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModLimitByMaxHpRateConfig& from);
  void MergeFrom(const BuffModLimitByMaxHpRateConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModLimitByMaxHpRateConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModLimitByMaxHpRateConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // optional int32 Percent = 3;
  inline bool has_percent() const;
  inline void clear_percent();
  static const int kPercentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModLimitByMaxHpRateConfig</name>
  	<Function>
  		<name>percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_percent</name>
  		<replaceName>Percent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 percent() const;
  inline void set_percent(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.BuffModLimitByMaxHpRateConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_percent();
  inline void clear_has_percent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::int32 percent_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModLimitByMaxHpRateConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>BuffModBattleArcherModifyConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/BuffDataBase2.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class BuffModBattleArcherModifyConfig : public ::google::protobuf::Message {
 public:
  BuffModBattleArcherModifyConfig();
  virtual ~BuffModBattleArcherModifyConfig();

  BuffModBattleArcherModifyConfig(const BuffModBattleArcherModifyConfig& from);

  inline BuffModBattleArcherModifyConfig& operator=(const BuffModBattleArcherModifyConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuffModBattleArcherModifyConfig& default_instance();

  void Swap(BuffModBattleArcherModifyConfig* other);

  // implements Message ----------------------------------------------

  BuffModBattleArcherModifyConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuffModBattleArcherModifyConfig& from);
  void MergeFrom(const BuffModBattleArcherModifyConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Active = 1;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>BuffModBattleArcherModifyConfig</name>
  	<Function>
  		<name>active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_active</name>
  		<replaceName>Active</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool active() const;
  inline void set_active(bool value);

  // optional int32 DelayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>BuffModBattleArcherModifyConfig</name>
  	<Function>
  		<name>delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_delaytime</name>
  		<replaceName>DelayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 delaytime() const;
  inline void set_delaytime(::google::protobuf::int32 value);

  // repeated int32 Key = 3;
  inline int key_size() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>BuffModBattleArcherModifyConfig</name>
  	<Function>
  		<name>key</name>
  		<replaceName>Key</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_key</name>
  		<replaceName>Key</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_key</name>
  		<replaceName>Key</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_key</name>
  		<replaceName>Key</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>key_size</name>
  		<replaceName>Key</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 key(int index) const;
  inline void set_key(int index, ::google::protobuf::int32 value);
  inline void add_key(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      key() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_key();

  // repeated int32 Value = 4;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>BuffModBattleArcherModifyConfig</name>
  	<Function>
  		<name>value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>value_size</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:pb.BuffModBattleArcherModifyConfig)
 private:
  inline void set_has_active();
  inline void clear_has_active();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool active_;
  ::google::protobuf::int32 delaytime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > key_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;
  friend void  protobuf_AddDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_AssignDesc_module_2fBuffDataBase2_2eproto();
  friend void protobuf_ShutdownFile_module_2fBuffDataBase2_2eproto();

  void InitAsDefaultInstance();
  static BuffModBattleArcherModifyConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// BuffModAttackSpeedConfig

// optional bool Active = 1;
inline bool BuffModAttackSpeedConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModAttackSpeedConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModAttackSpeedConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModAttackSpeedConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModAttackSpeedConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAttackSpeedConfig.Active)
  return active_;
}
inline void BuffModAttackSpeedConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAttackSpeedConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModAttackSpeedConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModAttackSpeedConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModAttackSpeedConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModAttackSpeedConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModAttackSpeedConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAttackSpeedConfig.DelayTime)
  return delaytime_;
}
inline void BuffModAttackSpeedConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAttackSpeedConfig.DelayTime)
}

// optional int32 PercentParam = 3;
inline bool BuffModAttackSpeedConfig::has_percentparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModAttackSpeedConfig::set_has_percentparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModAttackSpeedConfig::clear_has_percentparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModAttackSpeedConfig::clear_percentparam() {
  percentparam_ = 0;
  clear_has_percentparam();
}
inline ::google::protobuf::int32 BuffModAttackSpeedConfig::percentparam() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAttackSpeedConfig.PercentParam)
  return percentparam_;
}
inline void BuffModAttackSpeedConfig::set_percentparam(::google::protobuf::int32 value) {
  set_has_percentparam();
  percentparam_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAttackSpeedConfig.PercentParam)
}

// optional int32 PercentGrowth = 4;
inline bool BuffModAttackSpeedConfig::has_percentgrowth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModAttackSpeedConfig::set_has_percentgrowth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModAttackSpeedConfig::clear_has_percentgrowth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModAttackSpeedConfig::clear_percentgrowth() {
  percentgrowth_ = 0;
  clear_has_percentgrowth();
}
inline ::google::protobuf::int32 BuffModAttackSpeedConfig::percentgrowth() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAttackSpeedConfig.PercentGrowth)
  return percentgrowth_;
}
inline void BuffModAttackSpeedConfig::set_percentgrowth(::google::protobuf::int32 value) {
  set_has_percentgrowth();
  percentgrowth_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAttackSpeedConfig.PercentGrowth)
}

// -------------------------------------------------------------------

// BuffModNoMoveConfig

// optional bool Active = 1;
inline bool BuffModNoMoveConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModNoMoveConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModNoMoveConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModNoMoveConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModNoMoveConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoMoveConfig.Active)
  return active_;
}
inline void BuffModNoMoveConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoMoveConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModNoMoveConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModNoMoveConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModNoMoveConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModNoMoveConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModNoMoveConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoMoveConfig.DelayTime)
  return delaytime_;
}
inline void BuffModNoMoveConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoMoveConfig.DelayTime)
}

// optional bool EndWhenDamaged = 3;
inline bool BuffModNoMoveConfig::has_endwhendamaged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModNoMoveConfig::set_has_endwhendamaged() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModNoMoveConfig::clear_has_endwhendamaged() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModNoMoveConfig::clear_endwhendamaged() {
  endwhendamaged_ = false;
  clear_has_endwhendamaged();
}
inline bool BuffModNoMoveConfig::endwhendamaged() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoMoveConfig.EndWhenDamaged)
  return endwhendamaged_;
}
inline void BuffModNoMoveConfig::set_endwhendamaged(bool value) {
  set_has_endwhendamaged();
  endwhendamaged_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoMoveConfig.EndWhenDamaged)
}

// -------------------------------------------------------------------

// BuffModNoNormalSkillConfig

// optional bool Active = 1;
inline bool BuffModNoNormalSkillConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModNoNormalSkillConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModNoNormalSkillConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModNoNormalSkillConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModNoNormalSkillConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoNormalSkillConfig.Active)
  return active_;
}
inline void BuffModNoNormalSkillConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoNormalSkillConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModNoNormalSkillConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModNoNormalSkillConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModNoNormalSkillConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModNoNormalSkillConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModNoNormalSkillConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoNormalSkillConfig.DelayTime)
  return delaytime_;
}
inline void BuffModNoNormalSkillConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoNormalSkillConfig.DelayTime)
}

// optional bool EndWhenDamaged = 3;
inline bool BuffModNoNormalSkillConfig::has_endwhendamaged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModNoNormalSkillConfig::set_has_endwhendamaged() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModNoNormalSkillConfig::clear_has_endwhendamaged() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModNoNormalSkillConfig::clear_endwhendamaged() {
  endwhendamaged_ = false;
  clear_has_endwhendamaged();
}
inline bool BuffModNoNormalSkillConfig::endwhendamaged() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoNormalSkillConfig.EndWhenDamaged)
  return endwhendamaged_;
}
inline void BuffModNoNormalSkillConfig::set_endwhendamaged(bool value) {
  set_has_endwhendamaged();
  endwhendamaged_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoNormalSkillConfig.EndWhenDamaged)
}

// -------------------------------------------------------------------

// BuffModNoSkillConfig

// optional bool Active = 1;
inline bool BuffModNoSkillConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModNoSkillConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModNoSkillConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModNoSkillConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModNoSkillConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoSkillConfig.Active)
  return active_;
}
inline void BuffModNoSkillConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoSkillConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModNoSkillConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModNoSkillConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModNoSkillConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModNoSkillConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModNoSkillConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoSkillConfig.DelayTime)
  return delaytime_;
}
inline void BuffModNoSkillConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoSkillConfig.DelayTime)
}

// optional bool EndWhenDamaged = 3;
inline bool BuffModNoSkillConfig::has_endwhendamaged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModNoSkillConfig::set_has_endwhendamaged() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModNoSkillConfig::clear_has_endwhendamaged() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModNoSkillConfig::clear_endwhendamaged() {
  endwhendamaged_ = false;
  clear_has_endwhendamaged();
}
inline bool BuffModNoSkillConfig::endwhendamaged() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoSkillConfig.EndWhenDamaged)
  return endwhendamaged_;
}
inline void BuffModNoSkillConfig::set_endwhendamaged(bool value) {
  set_has_endwhendamaged();
  endwhendamaged_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoSkillConfig.EndWhenDamaged)
}

// optional int32 Type = 4;
inline bool BuffModNoSkillConfig::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModNoSkillConfig::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModNoSkillConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModNoSkillConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuffModNoSkillConfig::type() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoSkillConfig.Type)
  return type_;
}
inline void BuffModNoSkillConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoSkillConfig.Type)
}

// -------------------------------------------------------------------

// BuffModDizzinessConfig

// optional bool Active = 1;
inline bool BuffModDizzinessConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModDizzinessConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModDizzinessConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModDizzinessConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModDizzinessConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModDizzinessConfig.Active)
  return active_;
}
inline void BuffModDizzinessConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModDizzinessConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModDizzinessConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModDizzinessConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModDizzinessConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModDizzinessConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModDizzinessConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModDizzinessConfig.DelayTime)
  return delaytime_;
}
inline void BuffModDizzinessConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModDizzinessConfig.DelayTime)
}

// optional bool EndWhenDamaged = 3;
inline bool BuffModDizzinessConfig::has_endwhendamaged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModDizzinessConfig::set_has_endwhendamaged() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModDizzinessConfig::clear_has_endwhendamaged() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModDizzinessConfig::clear_endwhendamaged() {
  endwhendamaged_ = false;
  clear_has_endwhendamaged();
}
inline bool BuffModDizzinessConfig::endwhendamaged() const {
  // @@protoc_insertion_point(field_get:pb.BuffModDizzinessConfig.EndWhenDamaged)
  return endwhendamaged_;
}
inline void BuffModDizzinessConfig::set_endwhendamaged(bool value) {
  set_has_endwhendamaged();
  endwhendamaged_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModDizzinessConfig.EndWhenDamaged)
}

// -------------------------------------------------------------------

// BuffModFreezeConfig

// optional bool Active = 1;
inline bool BuffModFreezeConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModFreezeConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModFreezeConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModFreezeConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModFreezeConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModFreezeConfig.Active)
  return active_;
}
inline void BuffModFreezeConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModFreezeConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModFreezeConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModFreezeConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModFreezeConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModFreezeConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModFreezeConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModFreezeConfig.DelayTime)
  return delaytime_;
}
inline void BuffModFreezeConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModFreezeConfig.DelayTime)
}

// optional bool EndWhenDamaged = 3;
inline bool BuffModFreezeConfig::has_endwhendamaged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModFreezeConfig::set_has_endwhendamaged() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModFreezeConfig::clear_has_endwhendamaged() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModFreezeConfig::clear_endwhendamaged() {
  endwhendamaged_ = false;
  clear_has_endwhendamaged();
}
inline bool BuffModFreezeConfig::endwhendamaged() const {
  // @@protoc_insertion_point(field_get:pb.BuffModFreezeConfig.EndWhenDamaged)
  return endwhendamaged_;
}
inline void BuffModFreezeConfig::set_endwhendamaged(bool value) {
  set_has_endwhendamaged();
  endwhendamaged_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModFreezeConfig.EndWhenDamaged)
}

// -------------------------------------------------------------------

// BuffModCharmedConfig

// optional bool Active = 1;
inline bool BuffModCharmedConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModCharmedConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModCharmedConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModCharmedConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModCharmedConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModCharmedConfig.Active)
  return active_;
}
inline void BuffModCharmedConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModCharmedConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModCharmedConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModCharmedConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModCharmedConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModCharmedConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModCharmedConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModCharmedConfig.DelayTime)
  return delaytime_;
}
inline void BuffModCharmedConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModCharmedConfig.DelayTime)
}

// optional bool EndWhenDamaged = 3;
inline bool BuffModCharmedConfig::has_endwhendamaged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModCharmedConfig::set_has_endwhendamaged() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModCharmedConfig::clear_has_endwhendamaged() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModCharmedConfig::clear_endwhendamaged() {
  endwhendamaged_ = false;
  clear_has_endwhendamaged();
}
inline bool BuffModCharmedConfig::endwhendamaged() const {
  // @@protoc_insertion_point(field_get:pb.BuffModCharmedConfig.EndWhenDamaged)
  return endwhendamaged_;
}
inline void BuffModCharmedConfig::set_endwhendamaged(bool value) {
  set_has_endwhendamaged();
  endwhendamaged_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModCharmedConfig.EndWhenDamaged)
}

// -------------------------------------------------------------------

// BuffModChaosConfig

// optional bool Active = 1;
inline bool BuffModChaosConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModChaosConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModChaosConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModChaosConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModChaosConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChaosConfig.Active)
  return active_;
}
inline void BuffModChaosConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChaosConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModChaosConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModChaosConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModChaosConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModChaosConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModChaosConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChaosConfig.DelayTime)
  return delaytime_;
}
inline void BuffModChaosConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChaosConfig.DelayTime)
}

// optional bool EndWhenDamaged = 3;
inline bool BuffModChaosConfig::has_endwhendamaged() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModChaosConfig::set_has_endwhendamaged() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModChaosConfig::clear_has_endwhendamaged() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModChaosConfig::clear_endwhendamaged() {
  endwhendamaged_ = false;
  clear_has_endwhendamaged();
}
inline bool BuffModChaosConfig::endwhendamaged() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChaosConfig.EndWhenDamaged)
  return endwhendamaged_;
}
inline void BuffModChaosConfig::set_endwhendamaged(bool value) {
  set_has_endwhendamaged();
  endwhendamaged_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChaosConfig.EndWhenDamaged)
}

// -------------------------------------------------------------------

// BuffModRandomMoveConfig

// optional bool Active = 1;
inline bool BuffModRandomMoveConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModRandomMoveConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModRandomMoveConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModRandomMoveConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModRandomMoveConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRandomMoveConfig.Active)
  return active_;
}
inline void BuffModRandomMoveConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRandomMoveConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModRandomMoveConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModRandomMoveConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModRandomMoveConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModRandomMoveConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModRandomMoveConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRandomMoveConfig.DelayTime)
  return delaytime_;
}
inline void BuffModRandomMoveConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRandomMoveConfig.DelayTime)
}

// optional int32 MoveAreaRadius = 3;
inline bool BuffModRandomMoveConfig::has_movearearadius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModRandomMoveConfig::set_has_movearearadius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModRandomMoveConfig::clear_has_movearearadius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModRandomMoveConfig::clear_movearearadius() {
  movearearadius_ = 0;
  clear_has_movearearadius();
}
inline ::google::protobuf::int32 BuffModRandomMoveConfig::movearearadius() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRandomMoveConfig.MoveAreaRadius)
  return movearearadius_;
}
inline void BuffModRandomMoveConfig::set_movearearadius(::google::protobuf::int32 value) {
  set_has_movearearadius();
  movearearadius_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRandomMoveConfig.MoveAreaRadius)
}

// optional bool EndWhenDamaged = 4;
inline bool BuffModRandomMoveConfig::has_endwhendamaged() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModRandomMoveConfig::set_has_endwhendamaged() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModRandomMoveConfig::clear_has_endwhendamaged() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModRandomMoveConfig::clear_endwhendamaged() {
  endwhendamaged_ = false;
  clear_has_endwhendamaged();
}
inline bool BuffModRandomMoveConfig::endwhendamaged() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRandomMoveConfig.EndWhenDamaged)
  return endwhendamaged_;
}
inline void BuffModRandomMoveConfig::set_endwhendamaged(bool value) {
  set_has_endwhendamaged();
  endwhendamaged_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRandomMoveConfig.EndWhenDamaged)
}

// -------------------------------------------------------------------

// BuffModTDMoniterDefenderStateConfig

// optional bool Active = 1;
inline bool BuffModTDMoniterDefenderStateConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModTDMoniterDefenderStateConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModTDMoniterDefenderStateConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModTDMoniterDefenderStateConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModTDMoniterDefenderStateConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTDMoniterDefenderStateConfig.Active)
  return active_;
}
inline void BuffModTDMoniterDefenderStateConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTDMoniterDefenderStateConfig.Active)
}

// -------------------------------------------------------------------

// BuffModTDNoBeanConfig

// optional bool Active = 1;
inline bool BuffModTDNoBeanConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModTDNoBeanConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModTDNoBeanConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModTDNoBeanConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModTDNoBeanConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTDNoBeanConfig.Active)
  return active_;
}
inline void BuffModTDNoBeanConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTDNoBeanConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModTDNoBeanConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModTDNoBeanConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModTDNoBeanConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModTDNoBeanConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModTDNoBeanConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTDNoBeanConfig.DelayTime)
  return delaytime_;
}
inline void BuffModTDNoBeanConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTDNoBeanConfig.DelayTime)
}

// -------------------------------------------------------------------

// BuffModChangeDirConfig

// optional bool Active = 1;
inline bool BuffModChangeDirConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModChangeDirConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModChangeDirConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModChangeDirConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModChangeDirConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDirConfig.Active)
  return active_;
}
inline void BuffModChangeDirConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeDirConfig.Active)
}

// optional int32 ArmyId = 2;
inline bool BuffModChangeDirConfig::has_armyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModChangeDirConfig::set_has_armyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModChangeDirConfig::clear_has_armyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModChangeDirConfig::clear_armyid() {
  armyid_ = 0;
  clear_has_armyid();
}
inline ::google::protobuf::int32 BuffModChangeDirConfig::armyid() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDirConfig.ArmyId)
  return armyid_;
}
inline void BuffModChangeDirConfig::set_armyid(::google::protobuf::int32 value) {
  set_has_armyid();
  armyid_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeDirConfig.ArmyId)
}

// optional int32 BuffId = 3;
inline bool BuffModChangeDirConfig::has_buffid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModChangeDirConfig::set_has_buffid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModChangeDirConfig::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModChangeDirConfig::clear_buffid() {
  buffid_ = 0;
  clear_has_buffid();
}
inline ::google::protobuf::int32 BuffModChangeDirConfig::buffid() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDirConfig.BuffId)
  return buffid_;
}
inline void BuffModChangeDirConfig::set_buffid(::google::protobuf::int32 value) {
  set_has_buffid();
  buffid_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeDirConfig.BuffId)
}

// optional int32 Type = 4;
inline bool BuffModChangeDirConfig::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModChangeDirConfig::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModChangeDirConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModChangeDirConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuffModChangeDirConfig::type() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDirConfig.Type)
  return type_;
}
inline void BuffModChangeDirConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeDirConfig.Type)
}

// optional int32 DelayTime = 5;
inline bool BuffModChangeDirConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModChangeDirConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModChangeDirConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModChangeDirConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModChangeDirConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeDirConfig.DelayTime)
  return delaytime_;
}
inline void BuffModChangeDirConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeDirConfig.DelayTime)
}

// -------------------------------------------------------------------

// BuffModFearConfig

// optional bool Active = 1;
inline bool BuffModFearConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModFearConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModFearConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModFearConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModFearConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModFearConfig.Active)
  return active_;
}
inline void BuffModFearConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModFearConfig.Active)
}

// optional int32 Type = 2;
inline bool BuffModFearConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModFearConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModFearConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModFearConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuffModFearConfig::type() const {
  // @@protoc_insertion_point(field_get:pb.BuffModFearConfig.Type)
  return type_;
}
inline void BuffModFearConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModFearConfig.Type)
}

// -------------------------------------------------------------------

// BuffModTDRepeatSendBeanConfig

// optional bool Active = 1;
inline bool BuffModTDRepeatSendBeanConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModTDRepeatSendBeanConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModTDRepeatSendBeanConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModTDRepeatSendBeanConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModTDRepeatSendBeanConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTDRepeatSendBeanConfig.Active)
  return active_;
}
inline void BuffModTDRepeatSendBeanConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTDRepeatSendBeanConfig.Active)
}

// -------------------------------------------------------------------

// BuffModTDRepeatCheckBeanConfig

// optional bool Active = 1;
inline bool BuffModTDRepeatCheckBeanConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModTDRepeatCheckBeanConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModTDRepeatCheckBeanConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModTDRepeatCheckBeanConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModTDRepeatCheckBeanConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTDRepeatCheckBeanConfig.Active)
  return active_;
}
inline void BuffModTDRepeatCheckBeanConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTDRepeatCheckBeanConfig.Active)
}

// optional int32 Type = 2;
inline bool BuffModTDRepeatCheckBeanConfig::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModTDRepeatCheckBeanConfig::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModTDRepeatCheckBeanConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModTDRepeatCheckBeanConfig::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 BuffModTDRepeatCheckBeanConfig::type() const {
  // @@protoc_insertion_point(field_get:pb.BuffModTDRepeatCheckBeanConfig.Type)
  return type_;
}
inline void BuffModTDRepeatCheckBeanConfig::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModTDRepeatCheckBeanConfig.Type)
}

// -------------------------------------------------------------------

// BuffModIgnoreShieldConfig

// optional bool Active = 1;
inline bool BuffModIgnoreShieldConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModIgnoreShieldConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModIgnoreShieldConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModIgnoreShieldConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModIgnoreShieldConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModIgnoreShieldConfig.Active)
  return active_;
}
inline void BuffModIgnoreShieldConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModIgnoreShieldConfig.Active)
}

// -------------------------------------------------------------------

// BuffModNoSuckBloodConfig

// optional bool Active = 1;
inline bool BuffModNoSuckBloodConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModNoSuckBloodConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModNoSuckBloodConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModNoSuckBloodConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModNoSuckBloodConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoSuckBloodConfig.Active)
  return active_;
}
inline void BuffModNoSuckBloodConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoSuckBloodConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModNoSuckBloodConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModNoSuckBloodConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModNoSuckBloodConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModNoSuckBloodConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModNoSuckBloodConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoSuckBloodConfig.DelayTime)
  return delaytime_;
}
inline void BuffModNoSuckBloodConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoSuckBloodConfig.DelayTime)
}

// optional int32 Percent = 3;
inline bool BuffModNoSuckBloodConfig::has_percent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModNoSuckBloodConfig::set_has_percent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModNoSuckBloodConfig::clear_has_percent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModNoSuckBloodConfig::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline ::google::protobuf::int32 BuffModNoSuckBloodConfig::percent() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoSuckBloodConfig.Percent)
  return percent_;
}
inline void BuffModNoSuckBloodConfig::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoSuckBloodConfig.Percent)
}

// -------------------------------------------------------------------

// TBuffOnStack

// optional uint32 Stack = 1;
inline bool TBuffOnStack::has_stack() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBuffOnStack::set_has_stack() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBuffOnStack::clear_has_stack() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBuffOnStack::clear_stack() {
  stack_ = 0u;
  clear_has_stack();
}
inline ::google::protobuf::uint32 TBuffOnStack::stack() const {
  // @@protoc_insertion_point(field_get:pb.TBuffOnStack.Stack)
  return stack_;
}
inline void TBuffOnStack::set_stack(::google::protobuf::uint32 value) {
  set_has_stack();
  stack_ = value;
  // @@protoc_insertion_point(field_set:pb.TBuffOnStack.Stack)
}

// repeated uint32 BuffArr = 2;
inline int TBuffOnStack::buffarr_size() const {
  return buffarr_.size();
}
inline void TBuffOnStack::clear_buffarr() {
  buffarr_.Clear();
}
inline ::google::protobuf::uint32 TBuffOnStack::buffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBuffOnStack.BuffArr)
  return buffarr_.Get(index);
}
inline void TBuffOnStack::set_buffarr(int index, ::google::protobuf::uint32 value) {
  buffarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBuffOnStack.BuffArr)
}
inline void TBuffOnStack::add_buffarr(::google::protobuf::uint32 value) {
  buffarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBuffOnStack.BuffArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBuffOnStack::buffarr() const {
  // @@protoc_insertion_point(field_list:pb.TBuffOnStack.BuffArr)
  return buffarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBuffOnStack::mutable_buffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBuffOnStack.BuffArr)
  return &buffarr_;
}

// -------------------------------------------------------------------

// BuffModBuffOnStackConfig

// optional bool Active = 1;
inline bool BuffModBuffOnStackConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModBuffOnStackConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModBuffOnStackConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModBuffOnStackConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModBuffOnStackConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModBuffOnStackConfig.Active)
  return active_;
}
inline void BuffModBuffOnStackConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModBuffOnStackConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModBuffOnStackConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModBuffOnStackConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModBuffOnStackConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModBuffOnStackConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModBuffOnStackConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModBuffOnStackConfig.DelayTime)
  return delaytime_;
}
inline void BuffModBuffOnStackConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModBuffOnStackConfig.DelayTime)
}

// repeated .pb.TBuffOnStack ActionArr = 3;
inline int BuffModBuffOnStackConfig::actionarr_size() const {
  return actionarr_.size();
}
inline void BuffModBuffOnStackConfig::clear_actionarr() {
  actionarr_.Clear();
}
inline const ::pb::TBuffOnStack& BuffModBuffOnStackConfig::actionarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffModBuffOnStackConfig.ActionArr)
  return actionarr_.Get(index);
}
inline ::pb::TBuffOnStack* BuffModBuffOnStackConfig::mutable_actionarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BuffModBuffOnStackConfig.ActionArr)
  return actionarr_.Mutable(index);
}
inline ::pb::TBuffOnStack* BuffModBuffOnStackConfig::add_actionarr() {
  // @@protoc_insertion_point(field_add:pb.BuffModBuffOnStackConfig.ActionArr)
  return actionarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBuffOnStack >&
BuffModBuffOnStackConfig::actionarr() const {
  // @@protoc_insertion_point(field_list:pb.BuffModBuffOnStackConfig.ActionArr)
  return actionarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBuffOnStack >*
BuffModBuffOnStackConfig::mutable_actionarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffModBuffOnStackConfig.ActionArr)
  return &actionarr_;
}

// -------------------------------------------------------------------

// BuffModRevertStateOnEndConfig

// optional bool Active = 1;
inline bool BuffModRevertStateOnEndConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModRevertStateOnEndConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModRevertStateOnEndConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModRevertStateOnEndConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModRevertStateOnEndConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRevertStateOnEndConfig.Active)
  return active_;
}
inline void BuffModRevertStateOnEndConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRevertStateOnEndConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModRevertStateOnEndConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModRevertStateOnEndConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModRevertStateOnEndConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModRevertStateOnEndConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModRevertStateOnEndConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRevertStateOnEndConfig.DelayTime)
  return delaytime_;
}
inline void BuffModRevertStateOnEndConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRevertStateOnEndConfig.DelayTime)
}

// optional uint32 HpPercent = 3;
inline bool BuffModRevertStateOnEndConfig::has_hppercent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModRevertStateOnEndConfig::set_has_hppercent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModRevertStateOnEndConfig::clear_has_hppercent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModRevertStateOnEndConfig::clear_hppercent() {
  hppercent_ = 0u;
  clear_has_hppercent();
}
inline ::google::protobuf::uint32 BuffModRevertStateOnEndConfig::hppercent() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRevertStateOnEndConfig.HpPercent)
  return hppercent_;
}
inline void BuffModRevertStateOnEndConfig::set_hppercent(::google::protobuf::uint32 value) {
  set_has_hppercent();
  hppercent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRevertStateOnEndConfig.HpPercent)
}

// optional uint32 RagePercent = 4;
inline bool BuffModRevertStateOnEndConfig::has_ragepercent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModRevertStateOnEndConfig::set_has_ragepercent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModRevertStateOnEndConfig::clear_has_ragepercent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModRevertStateOnEndConfig::clear_ragepercent() {
  ragepercent_ = 0u;
  clear_has_ragepercent();
}
inline ::google::protobuf::uint32 BuffModRevertStateOnEndConfig::ragepercent() const {
  // @@protoc_insertion_point(field_get:pb.BuffModRevertStateOnEndConfig.RagePercent)
  return ragepercent_;
}
inline void BuffModRevertStateOnEndConfig::set_ragepercent(::google::protobuf::uint32 value) {
  set_has_ragepercent();
  ragepercent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModRevertStateOnEndConfig.RagePercent)
}

// -------------------------------------------------------------------

// BuffModChangeCastRangeConfig

// optional bool Active = 1;
inline bool BuffModChangeCastRangeConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModChangeCastRangeConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModChangeCastRangeConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModChangeCastRangeConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModChangeCastRangeConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeCastRangeConfig.Active)
  return active_;
}
inline void BuffModChangeCastRangeConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeCastRangeConfig.Active)
}

// optional uint32 Range = 2;
inline bool BuffModChangeCastRangeConfig::has_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModChangeCastRangeConfig::set_has_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModChangeCastRangeConfig::clear_has_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModChangeCastRangeConfig::clear_range() {
  range_ = 0u;
  clear_has_range();
}
inline ::google::protobuf::uint32 BuffModChangeCastRangeConfig::range() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeCastRangeConfig.Range)
  return range_;
}
inline void BuffModChangeCastRangeConfig::set_range(::google::protobuf::uint32 value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeCastRangeConfig.Range)
}

// -------------------------------------------------------------------

// BuffModNoReviveConfig

// optional bool Active = 1;
inline bool BuffModNoReviveConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModNoReviveConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModNoReviveConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModNoReviveConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModNoReviveConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoReviveConfig.Active)
  return active_;
}
inline void BuffModNoReviveConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoReviveConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModNoReviveConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModNoReviveConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModNoReviveConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModNoReviveConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModNoReviveConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModNoReviveConfig.DelayTime)
  return delaytime_;
}
inline void BuffModNoReviveConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModNoReviveConfig.DelayTime)
}

// -------------------------------------------------------------------

// BuffModChangeSummonedAIConfig

// optional bool Active = 1;
inline bool BuffModChangeSummonedAIConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModChangeSummonedAIConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModChangeSummonedAIConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModChangeSummonedAIConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModChangeSummonedAIConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeSummonedAIConfig.Active)
  return active_;
}
inline void BuffModChangeSummonedAIConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeSummonedAIConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModChangeSummonedAIConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModChangeSummonedAIConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModChangeSummonedAIConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModChangeSummonedAIConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModChangeSummonedAIConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModChangeSummonedAIConfig.DelayTime)
  return delaytime_;
}
inline void BuffModChangeSummonedAIConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModChangeSummonedAIConfig.DelayTime)
}

// -------------------------------------------------------------------

// BuffModSetMaxLoseHPConfig

// optional bool Active = 1;
inline bool BuffModSetMaxLoseHPConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModSetMaxLoseHPConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModSetMaxLoseHPConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModSetMaxLoseHPConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModSetMaxLoseHPConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSetMaxLoseHPConfig.Active)
  return active_;
}
inline void BuffModSetMaxLoseHPConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSetMaxLoseHPConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModSetMaxLoseHPConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModSetMaxLoseHPConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModSetMaxLoseHPConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModSetMaxLoseHPConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModSetMaxLoseHPConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSetMaxLoseHPConfig.DelayTime)
  return delaytime_;
}
inline void BuffModSetMaxLoseHPConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSetMaxLoseHPConfig.DelayTime)
}

// optional int32 Percent = 3;
inline bool BuffModSetMaxLoseHPConfig::has_percent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModSetMaxLoseHPConfig::set_has_percent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModSetMaxLoseHPConfig::clear_has_percent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModSetMaxLoseHPConfig::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline ::google::protobuf::int32 BuffModSetMaxLoseHPConfig::percent() const {
  // @@protoc_insertion_point(field_get:pb.BuffModSetMaxLoseHPConfig.Percent)
  return percent_;
}
inline void BuffModSetMaxLoseHPConfig::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModSetMaxLoseHPConfig.Percent)
}

// -------------------------------------------------------------------

// BuffModAdjustReflectedDamageConfig

// optional bool Active = 1;
inline bool BuffModAdjustReflectedDamageConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModAdjustReflectedDamageConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModAdjustReflectedDamageConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModAdjustReflectedDamageConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModAdjustReflectedDamageConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAdjustReflectedDamageConfig.Active)
  return active_;
}
inline void BuffModAdjustReflectedDamageConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAdjustReflectedDamageConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModAdjustReflectedDamageConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModAdjustReflectedDamageConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModAdjustReflectedDamageConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModAdjustReflectedDamageConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModAdjustReflectedDamageConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAdjustReflectedDamageConfig.DelayTime)
  return delaytime_;
}
inline void BuffModAdjustReflectedDamageConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAdjustReflectedDamageConfig.DelayTime)
}

// optional int32 Percent = 3;
inline bool BuffModAdjustReflectedDamageConfig::has_percent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModAdjustReflectedDamageConfig::set_has_percent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModAdjustReflectedDamageConfig::clear_has_percent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModAdjustReflectedDamageConfig::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline ::google::protobuf::int32 BuffModAdjustReflectedDamageConfig::percent() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAdjustReflectedDamageConfig.Percent)
  return percent_;
}
inline void BuffModAdjustReflectedDamageConfig::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAdjustReflectedDamageConfig.Percent)
}

// -------------------------------------------------------------------

// BuffModActiveUIEffectConfig

// optional bool Active = 1;
inline bool BuffModActiveUIEffectConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModActiveUIEffectConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModActiveUIEffectConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModActiveUIEffectConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModActiveUIEffectConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModActiveUIEffectConfig.Active)
  return active_;
}
inline void BuffModActiveUIEffectConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModActiveUIEffectConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModActiveUIEffectConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModActiveUIEffectConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModActiveUIEffectConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModActiveUIEffectConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModActiveUIEffectConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModActiveUIEffectConfig.DelayTime)
  return delaytime_;
}
inline void BuffModActiveUIEffectConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModActiveUIEffectConfig.DelayTime)
}

// optional string StartEffect = 3;
inline bool BuffModActiveUIEffectConfig::has_starteffect() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModActiveUIEffectConfig::set_has_starteffect() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModActiveUIEffectConfig::clear_has_starteffect() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModActiveUIEffectConfig::clear_starteffect() {
  if (starteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starteffect_->clear();
  }
  clear_has_starteffect();
}
inline const ::std::string& BuffModActiveUIEffectConfig::starteffect() const {
  // @@protoc_insertion_point(field_get:pb.BuffModActiveUIEffectConfig.StartEffect)
  return *starteffect_;
}
inline void BuffModActiveUIEffectConfig::set_starteffect(const ::std::string& value) {
  set_has_starteffect();
  if (starteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starteffect_ = new ::std::string;
  }
  starteffect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffModActiveUIEffectConfig.StartEffect)
}
inline void BuffModActiveUIEffectConfig::set_starteffect(const char* value) {
  set_has_starteffect();
  if (starteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starteffect_ = new ::std::string;
  }
  starteffect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffModActiveUIEffectConfig.StartEffect)
}
inline void BuffModActiveUIEffectConfig::set_starteffect(const char* value, size_t size) {
  set_has_starteffect();
  if (starteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starteffect_ = new ::std::string;
  }
  starteffect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffModActiveUIEffectConfig.StartEffect)
}
inline ::std::string* BuffModActiveUIEffectConfig::mutable_starteffect() {
  set_has_starteffect();
  if (starteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    starteffect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffModActiveUIEffectConfig.StartEffect)
  return starteffect_;
}
inline ::std::string* BuffModActiveUIEffectConfig::release_starteffect() {
  clear_has_starteffect();
  if (starteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = starteffect_;
    starteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffModActiveUIEffectConfig::set_allocated_starteffect(::std::string* starteffect) {
  if (starteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete starteffect_;
  }
  if (starteffect) {
    set_has_starteffect();
    starteffect_ = starteffect;
  } else {
    clear_has_starteffect();
    starteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffModActiveUIEffectConfig.StartEffect)
}

// optional string LastEffect = 4;
inline bool BuffModActiveUIEffectConfig::has_lasteffect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuffModActiveUIEffectConfig::set_has_lasteffect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuffModActiveUIEffectConfig::clear_has_lasteffect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuffModActiveUIEffectConfig::clear_lasteffect() {
  if (lasteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lasteffect_->clear();
  }
  clear_has_lasteffect();
}
inline const ::std::string& BuffModActiveUIEffectConfig::lasteffect() const {
  // @@protoc_insertion_point(field_get:pb.BuffModActiveUIEffectConfig.LastEffect)
  return *lasteffect_;
}
inline void BuffModActiveUIEffectConfig::set_lasteffect(const ::std::string& value) {
  set_has_lasteffect();
  if (lasteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lasteffect_ = new ::std::string;
  }
  lasteffect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffModActiveUIEffectConfig.LastEffect)
}
inline void BuffModActiveUIEffectConfig::set_lasteffect(const char* value) {
  set_has_lasteffect();
  if (lasteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lasteffect_ = new ::std::string;
  }
  lasteffect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffModActiveUIEffectConfig.LastEffect)
}
inline void BuffModActiveUIEffectConfig::set_lasteffect(const char* value, size_t size) {
  set_has_lasteffect();
  if (lasteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lasteffect_ = new ::std::string;
  }
  lasteffect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffModActiveUIEffectConfig.LastEffect)
}
inline ::std::string* BuffModActiveUIEffectConfig::mutable_lasteffect() {
  set_has_lasteffect();
  if (lasteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lasteffect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffModActiveUIEffectConfig.LastEffect)
  return lasteffect_;
}
inline ::std::string* BuffModActiveUIEffectConfig::release_lasteffect() {
  clear_has_lasteffect();
  if (lasteffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lasteffect_;
    lasteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffModActiveUIEffectConfig::set_allocated_lasteffect(::std::string* lasteffect) {
  if (lasteffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lasteffect_;
  }
  if (lasteffect) {
    set_has_lasteffect();
    lasteffect_ = lasteffect;
  } else {
    clear_has_lasteffect();
    lasteffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffModActiveUIEffectConfig.LastEffect)
}

// optional string EndEffect = 5;
inline bool BuffModActiveUIEffectConfig::has_endeffect() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuffModActiveUIEffectConfig::set_has_endeffect() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuffModActiveUIEffectConfig::clear_has_endeffect() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuffModActiveUIEffectConfig::clear_endeffect() {
  if (endeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endeffect_->clear();
  }
  clear_has_endeffect();
}
inline const ::std::string& BuffModActiveUIEffectConfig::endeffect() const {
  // @@protoc_insertion_point(field_get:pb.BuffModActiveUIEffectConfig.EndEffect)
  return *endeffect_;
}
inline void BuffModActiveUIEffectConfig::set_endeffect(const ::std::string& value) {
  set_has_endeffect();
  if (endeffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endeffect_ = new ::std::string;
  }
  endeffect_->assign(value);
  // @@protoc_insertion_point(field_set:pb.BuffModActiveUIEffectConfig.EndEffect)
}
inline void BuffModActiveUIEffectConfig::set_endeffect(const char* value) {
  set_has_endeffect();
  if (endeffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endeffect_ = new ::std::string;
  }
  endeffect_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.BuffModActiveUIEffectConfig.EndEffect)
}
inline void BuffModActiveUIEffectConfig::set_endeffect(const char* value, size_t size) {
  set_has_endeffect();
  if (endeffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endeffect_ = new ::std::string;
  }
  endeffect_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.BuffModActiveUIEffectConfig.EndEffect)
}
inline ::std::string* BuffModActiveUIEffectConfig::mutable_endeffect() {
  set_has_endeffect();
  if (endeffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    endeffect_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.BuffModActiveUIEffectConfig.EndEffect)
  return endeffect_;
}
inline ::std::string* BuffModActiveUIEffectConfig::release_endeffect() {
  clear_has_endeffect();
  if (endeffect_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = endeffect_;
    endeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BuffModActiveUIEffectConfig::set_allocated_endeffect(::std::string* endeffect) {
  if (endeffect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete endeffect_;
  }
  if (endeffect) {
    set_has_endeffect();
    endeffect_ = endeffect;
  } else {
    clear_has_endeffect();
    endeffect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.BuffModActiveUIEffectConfig.EndEffect)
}

// -------------------------------------------------------------------

// BuffModAdjustBuffHitRateConfig

// optional bool Active = 1;
inline bool BuffModAdjustBuffHitRateConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModAdjustBuffHitRateConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModAdjustBuffHitRateConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModAdjustBuffHitRateConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModAdjustBuffHitRateConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAdjustBuffHitRateConfig.Active)
  return active_;
}
inline void BuffModAdjustBuffHitRateConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAdjustBuffHitRateConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModAdjustBuffHitRateConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModAdjustBuffHitRateConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModAdjustBuffHitRateConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModAdjustBuffHitRateConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModAdjustBuffHitRateConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAdjustBuffHitRateConfig.DelayTime)
  return delaytime_;
}
inline void BuffModAdjustBuffHitRateConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAdjustBuffHitRateConfig.DelayTime)
}

// optional int32 AdjustRate = 3;
inline bool BuffModAdjustBuffHitRateConfig::has_adjustrate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModAdjustBuffHitRateConfig::set_has_adjustrate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModAdjustBuffHitRateConfig::clear_has_adjustrate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModAdjustBuffHitRateConfig::clear_adjustrate() {
  adjustrate_ = 0;
  clear_has_adjustrate();
}
inline ::google::protobuf::int32 BuffModAdjustBuffHitRateConfig::adjustrate() const {
  // @@protoc_insertion_point(field_get:pb.BuffModAdjustBuffHitRateConfig.AdjustRate)
  return adjustrate_;
}
inline void BuffModAdjustBuffHitRateConfig::set_adjustrate(::google::protobuf::int32 value) {
  set_has_adjustrate();
  adjustrate_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModAdjustBuffHitRateConfig.AdjustRate)
}

// -------------------------------------------------------------------

// BuffModLimitByMaxHpRateConfig

// optional bool Active = 1;
inline bool BuffModLimitByMaxHpRateConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModLimitByMaxHpRateConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModLimitByMaxHpRateConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModLimitByMaxHpRateConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModLimitByMaxHpRateConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModLimitByMaxHpRateConfig.Active)
  return active_;
}
inline void BuffModLimitByMaxHpRateConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModLimitByMaxHpRateConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModLimitByMaxHpRateConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModLimitByMaxHpRateConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModLimitByMaxHpRateConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModLimitByMaxHpRateConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModLimitByMaxHpRateConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModLimitByMaxHpRateConfig.DelayTime)
  return delaytime_;
}
inline void BuffModLimitByMaxHpRateConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModLimitByMaxHpRateConfig.DelayTime)
}

// optional int32 Percent = 3;
inline bool BuffModLimitByMaxHpRateConfig::has_percent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuffModLimitByMaxHpRateConfig::set_has_percent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuffModLimitByMaxHpRateConfig::clear_has_percent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuffModLimitByMaxHpRateConfig::clear_percent() {
  percent_ = 0;
  clear_has_percent();
}
inline ::google::protobuf::int32 BuffModLimitByMaxHpRateConfig::percent() const {
  // @@protoc_insertion_point(field_get:pb.BuffModLimitByMaxHpRateConfig.Percent)
  return percent_;
}
inline void BuffModLimitByMaxHpRateConfig::set_percent(::google::protobuf::int32 value) {
  set_has_percent();
  percent_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModLimitByMaxHpRateConfig.Percent)
}

// -------------------------------------------------------------------

// BuffModBattleArcherModifyConfig

// optional bool Active = 1;
inline bool BuffModBattleArcherModifyConfig::has_active() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuffModBattleArcherModifyConfig::set_has_active() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuffModBattleArcherModifyConfig::clear_has_active() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuffModBattleArcherModifyConfig::clear_active() {
  active_ = false;
  clear_has_active();
}
inline bool BuffModBattleArcherModifyConfig::active() const {
  // @@protoc_insertion_point(field_get:pb.BuffModBattleArcherModifyConfig.Active)
  return active_;
}
inline void BuffModBattleArcherModifyConfig::set_active(bool value) {
  set_has_active();
  active_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModBattleArcherModifyConfig.Active)
}

// optional int32 DelayTime = 2;
inline bool BuffModBattleArcherModifyConfig::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuffModBattleArcherModifyConfig::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuffModBattleArcherModifyConfig::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuffModBattleArcherModifyConfig::clear_delaytime() {
  delaytime_ = 0;
  clear_has_delaytime();
}
inline ::google::protobuf::int32 BuffModBattleArcherModifyConfig::delaytime() const {
  // @@protoc_insertion_point(field_get:pb.BuffModBattleArcherModifyConfig.DelayTime)
  return delaytime_;
}
inline void BuffModBattleArcherModifyConfig::set_delaytime(::google::protobuf::int32 value) {
  set_has_delaytime();
  delaytime_ = value;
  // @@protoc_insertion_point(field_set:pb.BuffModBattleArcherModifyConfig.DelayTime)
}

// repeated int32 Key = 3;
inline int BuffModBattleArcherModifyConfig::key_size() const {
  return key_.size();
}
inline void BuffModBattleArcherModifyConfig::clear_key() {
  key_.Clear();
}
inline ::google::protobuf::int32 BuffModBattleArcherModifyConfig::key(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffModBattleArcherModifyConfig.Key)
  return key_.Get(index);
}
inline void BuffModBattleArcherModifyConfig::set_key(int index, ::google::protobuf::int32 value) {
  key_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffModBattleArcherModifyConfig.Key)
}
inline void BuffModBattleArcherModifyConfig::add_key(::google::protobuf::int32 value) {
  key_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffModBattleArcherModifyConfig.Key)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffModBattleArcherModifyConfig::key() const {
  // @@protoc_insertion_point(field_list:pb.BuffModBattleArcherModifyConfig.Key)
  return key_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffModBattleArcherModifyConfig::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffModBattleArcherModifyConfig.Key)
  return &key_;
}

// repeated int32 Value = 4;
inline int BuffModBattleArcherModifyConfig::value_size() const {
  return value_.size();
}
inline void BuffModBattleArcherModifyConfig::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 BuffModBattleArcherModifyConfig::value(int index) const {
  // @@protoc_insertion_point(field_get:pb.BuffModBattleArcherModifyConfig.Value)
  return value_.Get(index);
}
inline void BuffModBattleArcherModifyConfig::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.BuffModBattleArcherModifyConfig.Value)
}
inline void BuffModBattleArcherModifyConfig::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
  // @@protoc_insertion_point(field_add:pb.BuffModBattleArcherModifyConfig.Value)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
BuffModBattleArcherModifyConfig::value() const {
  // @@protoc_insertion_point(field_list:pb.BuffModBattleArcherModifyConfig.Value)
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
BuffModBattleArcherModifyConfig::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:pb.BuffModBattleArcherModifyConfig.Value)
  return &value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fBuffDataBase2_2eproto__INCLUDED
