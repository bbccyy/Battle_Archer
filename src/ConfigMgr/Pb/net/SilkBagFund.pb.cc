// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SilkBagFund.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/SilkBagFund.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSilkBagFundSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSilkBagFundSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSilkBagFundGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSilkBagFundGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSilkBagFundGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSilkBagFundGetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSilkBagFundGetTotalRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSilkBagFundGetTotalRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSilkBagFundPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSilkBagFundPush_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fSilkBagFund_2eproto() {
  protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/SilkBagFund.proto");
  GOOGLE_CHECK(file != NULL);
  TSilkBagFundSingle_descriptor_ = file->message_type(0);
  static const int TSilkBagFundSingle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundSingle, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundSingle, generalreceivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundSingle, highorderreceivetime_),
  };
  TSilkBagFundSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSilkBagFundSingle_descriptor_,
      TSilkBagFundSingle::default_instance_,
      TSilkBagFundSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSilkBagFundSingle));
  TSilkBagFundGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TSilkBagFundGetInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetInfoRsp, listid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetInfoRsp, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetInfoRsp, paytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetInfoRsp, fundarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetInfoRsp, scores_),
  };
  TSilkBagFundGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSilkBagFundGetInfoRsp_descriptor_,
      TSilkBagFundGetInfoRsp::default_instance_,
      TSilkBagFundGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSilkBagFundGetInfoRsp));
  TSilkBagFundGetRewardReq_descriptor_ = file->message_type(2);
  static const int TSilkBagFundGetRewardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetRewardReq, listid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetRewardReq, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetRewardReq, ishigh_),
  };
  TSilkBagFundGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSilkBagFundGetRewardReq_descriptor_,
      TSilkBagFundGetRewardReq::default_instance_,
      TSilkBagFundGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSilkBagFundGetRewardReq));
  TSilkBagFundGetTotalRewardRsp_descriptor_ = file->message_type(3);
  static const int TSilkBagFundGetTotalRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetTotalRewardRsp, fundarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetTotalRewardRsp, rewardarr_),
  };
  TSilkBagFundGetTotalRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSilkBagFundGetTotalRewardRsp_descriptor_,
      TSilkBagFundGetTotalRewardRsp::default_instance_,
      TSilkBagFundGetTotalRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetTotalRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundGetTotalRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSilkBagFundGetTotalRewardRsp));
  TSilkBagFundPush_descriptor_ = file->message_type(4);
  static const int TSilkBagFundPush_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundPush, paytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundPush, scores_),
  };
  TSilkBagFundPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSilkBagFundPush_descriptor_,
      TSilkBagFundPush::default_instance_,
      TSilkBagFundPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSilkBagFundPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSilkBagFundPush));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fSilkBagFund_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSilkBagFundSingle_descriptor_, &TSilkBagFundSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSilkBagFundGetInfoRsp_descriptor_, &TSilkBagFundGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSilkBagFundGetRewardReq_descriptor_, &TSilkBagFundGetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSilkBagFundGetTotalRewardRsp_descriptor_, &TSilkBagFundGetTotalRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSilkBagFundPush_descriptor_, &TSilkBagFundPush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fSilkBagFund_2eproto() {
  delete TSilkBagFundSingle::default_instance_;
  delete TSilkBagFundSingle_reflection_;
  delete TSilkBagFundGetInfoRsp::default_instance_;
  delete TSilkBagFundGetInfoRsp_reflection_;
  delete TSilkBagFundGetRewardReq::default_instance_;
  delete TSilkBagFundGetRewardReq_reflection_;
  delete TSilkBagFundGetTotalRewardRsp::default_instance_;
  delete TSilkBagFundGetTotalRewardRsp_reflection_;
  delete TSilkBagFundPush::default_instance_;
  delete TSilkBagFundPush_reflection_;
}

void protobuf_AddDesc_net_2fSilkBagFund_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025net/SilkBagFund.proto\022\002pb\032\026net/CommonR"
    "eward.proto\"_\n\022TSilkBagFundSingle\022\017\n\007Lev"
    "elId\030\001 \001(\r\022\032\n\022GeneralReceiveTime\030\002 \001(\004\022\034"
    "\n\024HighOrderReceiveTime\030\003 \001(\004\"\204\001\n\026TSilkBa"
    "gFundGetInfoRsp\022\016\n\006ListId\030\001 \001(\r\022\020\n\010OpenT"
    "ime\030\002 \001(\004\022\017\n\007PayTime\030\003 \001(\004\022\'\n\007FundArr\030\004 "
    "\003(\0132\026.pb.TSilkBagFundSingle\022\016\n\006Scores\030\005 "
    "\001(\r\"K\n\030TSilkBagFundGetRewardReq\022\016\n\006ListI"
    "d\030\001 \001(\r\022\017\n\007LevelId\030\002 \001(\r\022\016\n\006IsHigh\030\003 \001(\010"
    "\"n\n\035TSilkBagFundGetTotalRewardRsp\022\'\n\007Fun"
    "dArr\030\001 \003(\0132\026.pb.TSilkBagFundSingle\022$\n\tRe"
    "wardArr\030\002 \003(\0132\021.pb.TCommonReward\"3\n\020TSil"
    "kBagFundPush\022\017\n\007PayTime\030\001 \001(\004\022\016\n\006Scores\030"
    "\002 \001(\r", 525);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/SilkBagFund.proto", &protobuf_RegisterTypes);
  TSilkBagFundSingle::default_instance_ = new TSilkBagFundSingle();
  TSilkBagFundGetInfoRsp::default_instance_ = new TSilkBagFundGetInfoRsp();
  TSilkBagFundGetRewardReq::default_instance_ = new TSilkBagFundGetRewardReq();
  TSilkBagFundGetTotalRewardRsp::default_instance_ = new TSilkBagFundGetTotalRewardRsp();
  TSilkBagFundPush::default_instance_ = new TSilkBagFundPush();
  TSilkBagFundSingle::default_instance_->InitAsDefaultInstance();
  TSilkBagFundGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TSilkBagFundGetRewardReq::default_instance_->InitAsDefaultInstance();
  TSilkBagFundGetTotalRewardRsp::default_instance_->InitAsDefaultInstance();
  TSilkBagFundPush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fSilkBagFund_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fSilkBagFund_2eproto {
  StaticDescriptorInitializer_net_2fSilkBagFund_2eproto() {
    protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  }
} static_descriptor_initializer_net_2fSilkBagFund_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TSilkBagFundSingle::kLevelIdFieldNumber;
const int TSilkBagFundSingle::kGeneralReceiveTimeFieldNumber;
const int TSilkBagFundSingle::kHighOrderReceiveTimeFieldNumber;
#endif  // !_MSC_VER

TSilkBagFundSingle::TSilkBagFundSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSilkBagFundSingle)
}

void TSilkBagFundSingle::InitAsDefaultInstance() {
}

TSilkBagFundSingle::TSilkBagFundSingle(const TSilkBagFundSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSilkBagFundSingle)
}

void TSilkBagFundSingle::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  generalreceivetime_ = GOOGLE_ULONGLONG(0);
  highorderreceivetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSilkBagFundSingle::~TSilkBagFundSingle() {
  // @@protoc_insertion_point(destructor:pb.TSilkBagFundSingle)
  SharedDtor();
}

void TSilkBagFundSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSilkBagFundSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSilkBagFundSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSilkBagFundSingle_descriptor_;
}

const TSilkBagFundSingle& TSilkBagFundSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  return *default_instance_;
}

TSilkBagFundSingle* TSilkBagFundSingle::default_instance_ = NULL;

TSilkBagFundSingle* TSilkBagFundSingle::New() const {
  return new TSilkBagFundSingle;
}

void TSilkBagFundSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSilkBagFundSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(generalreceivetime_, levelid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSilkBagFundSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSilkBagFundSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LevelId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GeneralReceiveTime;
        break;
      }

      // optional uint64 GeneralReceiveTime = 2;
      case 2: {
        if (tag == 16) {
         parse_GeneralReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &generalreceivetime_)));
          set_has_generalreceivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HighOrderReceiveTime;
        break;
      }

      // optional uint64 HighOrderReceiveTime = 3;
      case 3: {
        if (tag == 24) {
         parse_HighOrderReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &highorderreceivetime_)));
          set_has_highorderreceivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSilkBagFundSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSilkBagFundSingle)
  return false;
#undef DO_
}

void TSilkBagFundSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSilkBagFundSingle)
  // optional uint32 LevelId = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  // optional uint64 GeneralReceiveTime = 2;
  if (has_generalreceivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->generalreceivetime(), output);
  }

  // optional uint64 HighOrderReceiveTime = 3;
  if (has_highorderreceivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->highorderreceivetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSilkBagFundSingle)
}

::google::protobuf::uint8* TSilkBagFundSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSilkBagFundSingle)
  // optional uint32 LevelId = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  // optional uint64 GeneralReceiveTime = 2;
  if (has_generalreceivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->generalreceivetime(), target);
  }

  // optional uint64 HighOrderReceiveTime = 3;
  if (has_highorderreceivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->highorderreceivetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSilkBagFundSingle)
  return target;
}

int TSilkBagFundSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LevelId = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional uint64 GeneralReceiveTime = 2;
    if (has_generalreceivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->generalreceivetime());
    }

    // optional uint64 HighOrderReceiveTime = 3;
    if (has_highorderreceivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->highorderreceivetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSilkBagFundSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSilkBagFundSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSilkBagFundSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSilkBagFundSingle::MergeFrom(const TSilkBagFundSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_generalreceivetime()) {
      set_generalreceivetime(from.generalreceivetime());
    }
    if (from.has_highorderreceivetime()) {
      set_highorderreceivetime(from.highorderreceivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSilkBagFundSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSilkBagFundSingle::CopyFrom(const TSilkBagFundSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSilkBagFundSingle::IsInitialized() const {

  return true;
}

void TSilkBagFundSingle::Swap(TSilkBagFundSingle* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(generalreceivetime_, other->generalreceivetime_);
    std::swap(highorderreceivetime_, other->highorderreceivetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSilkBagFundSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSilkBagFundSingle_descriptor_;
  metadata.reflection = TSilkBagFundSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSilkBagFundGetInfoRsp::kListIdFieldNumber;
const int TSilkBagFundGetInfoRsp::kOpenTimeFieldNumber;
const int TSilkBagFundGetInfoRsp::kPayTimeFieldNumber;
const int TSilkBagFundGetInfoRsp::kFundArrFieldNumber;
const int TSilkBagFundGetInfoRsp::kScoresFieldNumber;
#endif  // !_MSC_VER

TSilkBagFundGetInfoRsp::TSilkBagFundGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSilkBagFundGetInfoRsp)
}

void TSilkBagFundGetInfoRsp::InitAsDefaultInstance() {
}

TSilkBagFundGetInfoRsp::TSilkBagFundGetInfoRsp(const TSilkBagFundGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSilkBagFundGetInfoRsp)
}

void TSilkBagFundGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  listid_ = 0u;
  opentime_ = GOOGLE_ULONGLONG(0);
  paytime_ = GOOGLE_ULONGLONG(0);
  scores_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSilkBagFundGetInfoRsp::~TSilkBagFundGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TSilkBagFundGetInfoRsp)
  SharedDtor();
}

void TSilkBagFundGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSilkBagFundGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSilkBagFundGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSilkBagFundGetInfoRsp_descriptor_;
}

const TSilkBagFundGetInfoRsp& TSilkBagFundGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  return *default_instance_;
}

TSilkBagFundGetInfoRsp* TSilkBagFundGetInfoRsp::default_instance_ = NULL;

TSilkBagFundGetInfoRsp* TSilkBagFundGetInfoRsp::New() const {
  return new TSilkBagFundGetInfoRsp;
}

void TSilkBagFundGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSilkBagFundGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(opentime_, scores_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  fundarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSilkBagFundGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSilkBagFundGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ListId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listid_)));
          set_has_listid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OpenTime;
        break;
      }

      // optional uint64 OpenTime = 2;
      case 2: {
        if (tag == 16) {
         parse_OpenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PayTime;
        break;
      }

      // optional uint64 PayTime = 3;
      case 3: {
        if (tag == 24) {
         parse_PayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &paytime_)));
          set_has_paytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FundArr;
        break;
      }

      // repeated .pb.TSilkBagFundSingle FundArr = 4;
      case 4: {
        if (tag == 34) {
         parse_FundArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fundarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_FundArr;
        if (input->ExpectTag(40)) goto parse_Scores;
        break;
      }

      // optional uint32 Scores = 5;
      case 5: {
        if (tag == 40) {
         parse_Scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scores_)));
          set_has_scores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSilkBagFundGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSilkBagFundGetInfoRsp)
  return false;
#undef DO_
}

void TSilkBagFundGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSilkBagFundGetInfoRsp)
  // optional uint32 ListId = 1;
  if (has_listid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->listid(), output);
  }

  // optional uint64 OpenTime = 2;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->opentime(), output);
  }

  // optional uint64 PayTime = 3;
  if (has_paytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->paytime(), output);
  }

  // repeated .pb.TSilkBagFundSingle FundArr = 4;
  for (int i = 0; i < this->fundarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fundarr(i), output);
  }

  // optional uint32 Scores = 5;
  if (has_scores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->scores(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSilkBagFundGetInfoRsp)
}

::google::protobuf::uint8* TSilkBagFundGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSilkBagFundGetInfoRsp)
  // optional uint32 ListId = 1;
  if (has_listid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->listid(), target);
  }

  // optional uint64 OpenTime = 2;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->opentime(), target);
  }

  // optional uint64 PayTime = 3;
  if (has_paytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->paytime(), target);
  }

  // repeated .pb.TSilkBagFundSingle FundArr = 4;
  for (int i = 0; i < this->fundarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fundarr(i), target);
  }

  // optional uint32 Scores = 5;
  if (has_scores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->scores(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSilkBagFundGetInfoRsp)
  return target;
}

int TSilkBagFundGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ListId = 1;
    if (has_listid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listid());
    }

    // optional uint64 OpenTime = 2;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opentime());
    }

    // optional uint64 PayTime = 3;
    if (has_paytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->paytime());
    }

    // optional uint32 Scores = 5;
    if (has_scores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scores());
    }

  }
  // repeated .pb.TSilkBagFundSingle FundArr = 4;
  total_size += 1 * this->fundarr_size();
  for (int i = 0; i < this->fundarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fundarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSilkBagFundGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSilkBagFundGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSilkBagFundGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSilkBagFundGetInfoRsp::MergeFrom(const TSilkBagFundGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fundarr_.MergeFrom(from.fundarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listid()) {
      set_listid(from.listid());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_paytime()) {
      set_paytime(from.paytime());
    }
    if (from.has_scores()) {
      set_scores(from.scores());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSilkBagFundGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSilkBagFundGetInfoRsp::CopyFrom(const TSilkBagFundGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSilkBagFundGetInfoRsp::IsInitialized() const {

  return true;
}

void TSilkBagFundGetInfoRsp::Swap(TSilkBagFundGetInfoRsp* other) {
  if (other != this) {
    std::swap(listid_, other->listid_);
    std::swap(opentime_, other->opentime_);
    std::swap(paytime_, other->paytime_);
    fundarr_.Swap(&other->fundarr_);
    std::swap(scores_, other->scores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSilkBagFundGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSilkBagFundGetInfoRsp_descriptor_;
  metadata.reflection = TSilkBagFundGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSilkBagFundGetRewardReq::kListIdFieldNumber;
const int TSilkBagFundGetRewardReq::kLevelIdFieldNumber;
const int TSilkBagFundGetRewardReq::kIsHighFieldNumber;
#endif  // !_MSC_VER

TSilkBagFundGetRewardReq::TSilkBagFundGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSilkBagFundGetRewardReq)
}

void TSilkBagFundGetRewardReq::InitAsDefaultInstance() {
}

TSilkBagFundGetRewardReq::TSilkBagFundGetRewardReq(const TSilkBagFundGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSilkBagFundGetRewardReq)
}

void TSilkBagFundGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  listid_ = 0u;
  levelid_ = 0u;
  ishigh_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSilkBagFundGetRewardReq::~TSilkBagFundGetRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TSilkBagFundGetRewardReq)
  SharedDtor();
}

void TSilkBagFundGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSilkBagFundGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSilkBagFundGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSilkBagFundGetRewardReq_descriptor_;
}

const TSilkBagFundGetRewardReq& TSilkBagFundGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  return *default_instance_;
}

TSilkBagFundGetRewardReq* TSilkBagFundGetRewardReq::default_instance_ = NULL;

TSilkBagFundGetRewardReq* TSilkBagFundGetRewardReq::New() const {
  return new TSilkBagFundGetRewardReq;
}

void TSilkBagFundGetRewardReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSilkBagFundGetRewardReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(listid_, ishigh_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSilkBagFundGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSilkBagFundGetRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ListId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listid_)));
          set_has_listid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LevelId;
        break;
      }

      // optional uint32 LevelId = 2;
      case 2: {
        if (tag == 16) {
         parse_LevelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsHigh;
        break;
      }

      // optional bool IsHigh = 3;
      case 3: {
        if (tag == 24) {
         parse_IsHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishigh_)));
          set_has_ishigh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSilkBagFundGetRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSilkBagFundGetRewardReq)
  return false;
#undef DO_
}

void TSilkBagFundGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSilkBagFundGetRewardReq)
  // optional uint32 ListId = 1;
  if (has_listid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->listid(), output);
  }

  // optional uint32 LevelId = 2;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levelid(), output);
  }

  // optional bool IsHigh = 3;
  if (has_ishigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ishigh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSilkBagFundGetRewardReq)
}

::google::protobuf::uint8* TSilkBagFundGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSilkBagFundGetRewardReq)
  // optional uint32 ListId = 1;
  if (has_listid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->listid(), target);
  }

  // optional uint32 LevelId = 2;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->levelid(), target);
  }

  // optional bool IsHigh = 3;
  if (has_ishigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ishigh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSilkBagFundGetRewardReq)
  return target;
}

int TSilkBagFundGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ListId = 1;
    if (has_listid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listid());
    }

    // optional uint32 LevelId = 2;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional bool IsHigh = 3;
    if (has_ishigh()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSilkBagFundGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSilkBagFundGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSilkBagFundGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSilkBagFundGetRewardReq::MergeFrom(const TSilkBagFundGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listid()) {
      set_listid(from.listid());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_ishigh()) {
      set_ishigh(from.ishigh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSilkBagFundGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSilkBagFundGetRewardReq::CopyFrom(const TSilkBagFundGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSilkBagFundGetRewardReq::IsInitialized() const {

  return true;
}

void TSilkBagFundGetRewardReq::Swap(TSilkBagFundGetRewardReq* other) {
  if (other != this) {
    std::swap(listid_, other->listid_);
    std::swap(levelid_, other->levelid_);
    std::swap(ishigh_, other->ishigh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSilkBagFundGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSilkBagFundGetRewardReq_descriptor_;
  metadata.reflection = TSilkBagFundGetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSilkBagFundGetTotalRewardRsp::kFundArrFieldNumber;
const int TSilkBagFundGetTotalRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TSilkBagFundGetTotalRewardRsp::TSilkBagFundGetTotalRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSilkBagFundGetTotalRewardRsp)
}

void TSilkBagFundGetTotalRewardRsp::InitAsDefaultInstance() {
}

TSilkBagFundGetTotalRewardRsp::TSilkBagFundGetTotalRewardRsp(const TSilkBagFundGetTotalRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSilkBagFundGetTotalRewardRsp)
}

void TSilkBagFundGetTotalRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSilkBagFundGetTotalRewardRsp::~TSilkBagFundGetTotalRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TSilkBagFundGetTotalRewardRsp)
  SharedDtor();
}

void TSilkBagFundGetTotalRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSilkBagFundGetTotalRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSilkBagFundGetTotalRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSilkBagFundGetTotalRewardRsp_descriptor_;
}

const TSilkBagFundGetTotalRewardRsp& TSilkBagFundGetTotalRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  return *default_instance_;
}

TSilkBagFundGetTotalRewardRsp* TSilkBagFundGetTotalRewardRsp::default_instance_ = NULL;

TSilkBagFundGetTotalRewardRsp* TSilkBagFundGetTotalRewardRsp::New() const {
  return new TSilkBagFundGetTotalRewardRsp;
}

void TSilkBagFundGetTotalRewardRsp::Clear() {
  fundarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSilkBagFundGetTotalRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSilkBagFundGetTotalRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSilkBagFundSingle FundArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FundArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fundarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FundArr;
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSilkBagFundGetTotalRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSilkBagFundGetTotalRewardRsp)
  return false;
#undef DO_
}

void TSilkBagFundGetTotalRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSilkBagFundGetTotalRewardRsp)
  // repeated .pb.TSilkBagFundSingle FundArr = 1;
  for (int i = 0; i < this->fundarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fundarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSilkBagFundGetTotalRewardRsp)
}

::google::protobuf::uint8* TSilkBagFundGetTotalRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSilkBagFundGetTotalRewardRsp)
  // repeated .pb.TSilkBagFundSingle FundArr = 1;
  for (int i = 0; i < this->fundarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fundarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSilkBagFundGetTotalRewardRsp)
  return target;
}

int TSilkBagFundGetTotalRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TSilkBagFundSingle FundArr = 1;
  total_size += 1 * this->fundarr_size();
  for (int i = 0; i < this->fundarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fundarr(i));
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSilkBagFundGetTotalRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSilkBagFundGetTotalRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSilkBagFundGetTotalRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSilkBagFundGetTotalRewardRsp::MergeFrom(const TSilkBagFundGetTotalRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  fundarr_.MergeFrom(from.fundarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSilkBagFundGetTotalRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSilkBagFundGetTotalRewardRsp::CopyFrom(const TSilkBagFundGetTotalRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSilkBagFundGetTotalRewardRsp::IsInitialized() const {

  return true;
}

void TSilkBagFundGetTotalRewardRsp::Swap(TSilkBagFundGetTotalRewardRsp* other) {
  if (other != this) {
    fundarr_.Swap(&other->fundarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSilkBagFundGetTotalRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSilkBagFundGetTotalRewardRsp_descriptor_;
  metadata.reflection = TSilkBagFundGetTotalRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSilkBagFundPush::kPayTimeFieldNumber;
const int TSilkBagFundPush::kScoresFieldNumber;
#endif  // !_MSC_VER

TSilkBagFundPush::TSilkBagFundPush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSilkBagFundPush)
}

void TSilkBagFundPush::InitAsDefaultInstance() {
}

TSilkBagFundPush::TSilkBagFundPush(const TSilkBagFundPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSilkBagFundPush)
}

void TSilkBagFundPush::SharedCtor() {
  _cached_size_ = 0;
  paytime_ = GOOGLE_ULONGLONG(0);
  scores_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSilkBagFundPush::~TSilkBagFundPush() {
  // @@protoc_insertion_point(destructor:pb.TSilkBagFundPush)
  SharedDtor();
}

void TSilkBagFundPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSilkBagFundPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSilkBagFundPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSilkBagFundPush_descriptor_;
}

const TSilkBagFundPush& TSilkBagFundPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSilkBagFund_2eproto();
  return *default_instance_;
}

TSilkBagFundPush* TSilkBagFundPush::default_instance_ = NULL;

TSilkBagFundPush* TSilkBagFundPush::New() const {
  return new TSilkBagFundPush;
}

void TSilkBagFundPush::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSilkBagFundPush*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(paytime_, scores_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSilkBagFundPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSilkBagFundPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 PayTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &paytime_)));
          set_has_paytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Scores;
        break;
      }

      // optional uint32 Scores = 2;
      case 2: {
        if (tag == 16) {
         parse_Scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scores_)));
          set_has_scores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSilkBagFundPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSilkBagFundPush)
  return false;
#undef DO_
}

void TSilkBagFundPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSilkBagFundPush)
  // optional uint64 PayTime = 1;
  if (has_paytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->paytime(), output);
  }

  // optional uint32 Scores = 2;
  if (has_scores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scores(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSilkBagFundPush)
}

::google::protobuf::uint8* TSilkBagFundPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSilkBagFundPush)
  // optional uint64 PayTime = 1;
  if (has_paytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->paytime(), target);
  }

  // optional uint32 Scores = 2;
  if (has_scores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scores(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSilkBagFundPush)
  return target;
}

int TSilkBagFundPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PayTime = 1;
    if (has_paytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->paytime());
    }

    // optional uint32 Scores = 2;
    if (has_scores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scores());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSilkBagFundPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSilkBagFundPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSilkBagFundPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSilkBagFundPush::MergeFrom(const TSilkBagFundPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paytime()) {
      set_paytime(from.paytime());
    }
    if (from.has_scores()) {
      set_scores(from.scores());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSilkBagFundPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSilkBagFundPush::CopyFrom(const TSilkBagFundPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSilkBagFundPush::IsInitialized() const {

  return true;
}

void TSilkBagFundPush::Swap(TSilkBagFundPush* other) {
  if (other != this) {
    std::swap(paytime_, other->paytime_);
    std::swap(scores_, other->scores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSilkBagFundPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSilkBagFundPush_descriptor_;
  metadata.reflection = TSilkBagFundPush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
