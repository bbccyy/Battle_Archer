// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Email.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/Email.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TEmailSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailUnopen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailUnopen_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailTypeMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailTypeMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailGetUnreadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailGetUnreadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailGetInfoByTypeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailGetInfoByTypeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailGetInfoByTypeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailGetInfoByTypeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailPushRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailPushRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailReadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailReadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailBatchReadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailBatchReadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailReceiveAttachmentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailReceiveAttachmentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailBatchReceiveAttachmentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailBatchReceiveAttachmentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailBatchReceiveAttachmentRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailBatchReceiveAttachmentRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailCancelCollectReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailCancelCollectReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailBatchDelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailBatchDelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailCollectionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailCollectionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailGetCollectionEmailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailGetCollectionEmailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailGetCollectionEmailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailGetCollectionEmailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailSendGuildEmailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailSendGuildEmailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailGetEmailContentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailGetEmailContentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TEmailGetEmailContentRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TEmailGetEmailContentRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fEmail_2eproto() {
  protobuf_AddDesc_net_2fEmail_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/Email.proto");
  GOOGLE_CHECK(file != NULL);
  TEmailSingle_descriptor_ = file->message_type(0);
  static const int TEmailSingle_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSingle, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSingle, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSingle, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSingle, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSingle, receivedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSingle, readtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSingle, gotattachtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSingle, iscollect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSingle, titlecontent_),
  };
  TEmailSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailSingle_descriptor_,
      TEmailSingle::default_instance_,
      TEmailSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailSingle));
  TEmailUnopen_descriptor_ = file->message_type(1);
  static const int TEmailUnopen_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailUnopen, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailUnopen, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailUnopen, attachnum_),
  };
  TEmailUnopen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailUnopen_descriptor_,
      TEmailUnopen::default_instance_,
      TEmailUnopen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailUnopen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailUnopen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailUnopen));
  TEmailTypeInfo_descriptor_ = file->message_type(2);
  static const int TEmailTypeInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailTypeInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailTypeInfo, emailarr_),
  };
  TEmailTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailTypeInfo_descriptor_,
      TEmailTypeInfo::default_instance_,
      TEmailTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailTypeInfo));
  TEmailTypeMap_descriptor_ = file->message_type(3);
  static const int TEmailTypeMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailTypeMap, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailTypeMap, emailarr_),
  };
  TEmailTypeMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailTypeMap_descriptor_,
      TEmailTypeMap::default_instance_,
      TEmailTypeMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailTypeMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailTypeMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailTypeMap));
  TEmailGetUnreadRsp_descriptor_ = file->message_type(4);
  static const int TEmailGetUnreadRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetUnreadRsp, unreads_),
  };
  TEmailGetUnreadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailGetUnreadRsp_descriptor_,
      TEmailGetUnreadRsp::default_instance_,
      TEmailGetUnreadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetUnreadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetUnreadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailGetUnreadRsp));
  TEmailGetInfoByTypeReq_descriptor_ = file->message_type(5);
  static const int TEmailGetInfoByTypeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetInfoByTypeReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetInfoByTypeReq, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetInfoByTypeReq, offset_),
  };
  TEmailGetInfoByTypeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailGetInfoByTypeReq_descriptor_,
      TEmailGetInfoByTypeReq::default_instance_,
      TEmailGetInfoByTypeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetInfoByTypeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetInfoByTypeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailGetInfoByTypeReq));
  TEmailGetInfoByTypeRsp_descriptor_ = file->message_type(6);
  static const int TEmailGetInfoByTypeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetInfoByTypeRsp, emailtypmap_),
  };
  TEmailGetInfoByTypeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailGetInfoByTypeRsp_descriptor_,
      TEmailGetInfoByTypeRsp::default_instance_,
      TEmailGetInfoByTypeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetInfoByTypeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetInfoByTypeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailGetInfoByTypeRsp));
  TEmailPushRsp_descriptor_ = file->message_type(7);
  static const int TEmailPushRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailPushRsp, unopenemailinfoarr_),
  };
  TEmailPushRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailPushRsp_descriptor_,
      TEmailPushRsp::default_instance_,
      TEmailPushRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailPushRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailPushRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailPushRsp));
  TEmailReadReq_descriptor_ = file->message_type(8);
  static const int TEmailReadReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailReadReq, typ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailReadReq, eid_),
  };
  TEmailReadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailReadReq_descriptor_,
      TEmailReadReq::default_instance_,
      TEmailReadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailReadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailReadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailReadReq));
  TEmailBatchReadReq_descriptor_ = file->message_type(9);
  static const int TEmailBatchReadReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchReadReq, typ_),
  };
  TEmailBatchReadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailBatchReadReq_descriptor_,
      TEmailBatchReadReq::default_instance_,
      TEmailBatchReadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchReadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchReadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailBatchReadReq));
  TEmailReceiveAttachmentReq_descriptor_ = file->message_type(10);
  static const int TEmailReceiveAttachmentReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailReceiveAttachmentReq, typ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailReceiveAttachmentReq, eid_),
  };
  TEmailReceiveAttachmentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailReceiveAttachmentReq_descriptor_,
      TEmailReceiveAttachmentReq::default_instance_,
      TEmailReceiveAttachmentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailReceiveAttachmentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailReceiveAttachmentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailReceiveAttachmentReq));
  TEmailBatchReceiveAttachmentReq_descriptor_ = file->message_type(11);
  static const int TEmailBatchReceiveAttachmentReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchReceiveAttachmentReq, typ_),
  };
  TEmailBatchReceiveAttachmentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailBatchReceiveAttachmentReq_descriptor_,
      TEmailBatchReceiveAttachmentReq::default_instance_,
      TEmailBatchReceiveAttachmentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchReceiveAttachmentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchReceiveAttachmentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailBatchReceiveAttachmentReq));
  TEmailBatchReceiveAttachmentRsp_descriptor_ = file->message_type(12);
  static const int TEmailBatchReceiveAttachmentRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchReceiveAttachmentRsp, mailarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchReceiveAttachmentRsp, attacharr_),
  };
  TEmailBatchReceiveAttachmentRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailBatchReceiveAttachmentRsp_descriptor_,
      TEmailBatchReceiveAttachmentRsp::default_instance_,
      TEmailBatchReceiveAttachmentRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchReceiveAttachmentRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchReceiveAttachmentRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailBatchReceiveAttachmentRsp));
  TEmailCancelCollectReq_descriptor_ = file->message_type(13);
  static const int TEmailCancelCollectReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailCancelCollectReq, typ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailCancelCollectReq, eid_),
  };
  TEmailCancelCollectReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailCancelCollectReq_descriptor_,
      TEmailCancelCollectReq::default_instance_,
      TEmailCancelCollectReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailCancelCollectReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailCancelCollectReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailCancelCollectReq));
  TEmailBatchDelReq_descriptor_ = file->message_type(14);
  static const int TEmailBatchDelReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchDelReq, typ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchDelReq, eid_),
  };
  TEmailBatchDelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailBatchDelReq_descriptor_,
      TEmailBatchDelReq::default_instance_,
      TEmailBatchDelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchDelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailBatchDelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailBatchDelReq));
  TEmailCollectionReq_descriptor_ = file->message_type(15);
  static const int TEmailCollectionReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailCollectionReq, typ_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailCollectionReq, eid_),
  };
  TEmailCollectionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailCollectionReq_descriptor_,
      TEmailCollectionReq::default_instance_,
      TEmailCollectionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailCollectionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailCollectionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailCollectionReq));
  TEmailGetCollectionEmailReq_descriptor_ = file->message_type(16);
  static const int TEmailGetCollectionEmailReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetCollectionEmailReq, eid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetCollectionEmailReq, offset_),
  };
  TEmailGetCollectionEmailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailGetCollectionEmailReq_descriptor_,
      TEmailGetCollectionEmailReq::default_instance_,
      TEmailGetCollectionEmailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetCollectionEmailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetCollectionEmailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailGetCollectionEmailReq));
  TEmailGetCollectionEmailRsp_descriptor_ = file->message_type(17);
  static const int TEmailGetCollectionEmailRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetCollectionEmailRsp, collectarr_),
  };
  TEmailGetCollectionEmailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailGetCollectionEmailRsp_descriptor_,
      TEmailGetCollectionEmailRsp::default_instance_,
      TEmailGetCollectionEmailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetCollectionEmailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetCollectionEmailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailGetCollectionEmailRsp));
  TEmailSendGuildEmailReq_descriptor_ = file->message_type(18);
  static const int TEmailSendGuildEmailReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSendGuildEmailReq, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSendGuildEmailReq, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSendGuildEmailReq, uidarr_),
  };
  TEmailSendGuildEmailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailSendGuildEmailReq_descriptor_,
      TEmailSendGuildEmailReq::default_instance_,
      TEmailSendGuildEmailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSendGuildEmailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailSendGuildEmailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailSendGuildEmailReq));
  TEmailGetEmailContentReq_descriptor_ = file->message_type(19);
  static const int TEmailGetEmailContentReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetEmailContentReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetEmailContentReq, eid_),
  };
  TEmailGetEmailContentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailGetEmailContentReq_descriptor_,
      TEmailGetEmailContentReq::default_instance_,
      TEmailGetEmailContentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetEmailContentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetEmailContentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailGetEmailContentReq));
  TEmailGetEmailContentRsp_descriptor_ = file->message_type(20);
  static const int TEmailGetEmailContentRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetEmailContentRsp, content_),
  };
  TEmailGetEmailContentRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TEmailGetEmailContentRsp_descriptor_,
      TEmailGetEmailContentRsp::default_instance_,
      TEmailGetEmailContentRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetEmailContentRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TEmailGetEmailContentRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TEmailGetEmailContentRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fEmail_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailSingle_descriptor_, &TEmailSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailUnopen_descriptor_, &TEmailUnopen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailTypeInfo_descriptor_, &TEmailTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailTypeMap_descriptor_, &TEmailTypeMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailGetUnreadRsp_descriptor_, &TEmailGetUnreadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailGetInfoByTypeReq_descriptor_, &TEmailGetInfoByTypeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailGetInfoByTypeRsp_descriptor_, &TEmailGetInfoByTypeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailPushRsp_descriptor_, &TEmailPushRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailReadReq_descriptor_, &TEmailReadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailBatchReadReq_descriptor_, &TEmailBatchReadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailReceiveAttachmentReq_descriptor_, &TEmailReceiveAttachmentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailBatchReceiveAttachmentReq_descriptor_, &TEmailBatchReceiveAttachmentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailBatchReceiveAttachmentRsp_descriptor_, &TEmailBatchReceiveAttachmentRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailCancelCollectReq_descriptor_, &TEmailCancelCollectReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailBatchDelReq_descriptor_, &TEmailBatchDelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailCollectionReq_descriptor_, &TEmailCollectionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailGetCollectionEmailReq_descriptor_, &TEmailGetCollectionEmailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailGetCollectionEmailRsp_descriptor_, &TEmailGetCollectionEmailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailSendGuildEmailReq_descriptor_, &TEmailSendGuildEmailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailGetEmailContentReq_descriptor_, &TEmailGetEmailContentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TEmailGetEmailContentRsp_descriptor_, &TEmailGetEmailContentRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fEmail_2eproto() {
  delete TEmailSingle::default_instance_;
  delete TEmailSingle_reflection_;
  delete TEmailUnopen::default_instance_;
  delete TEmailUnopen_reflection_;
  delete TEmailTypeInfo::default_instance_;
  delete TEmailTypeInfo_reflection_;
  delete TEmailTypeMap::default_instance_;
  delete TEmailTypeMap_reflection_;
  delete TEmailGetUnreadRsp::default_instance_;
  delete TEmailGetUnreadRsp_reflection_;
  delete TEmailGetInfoByTypeReq::default_instance_;
  delete TEmailGetInfoByTypeReq_reflection_;
  delete TEmailGetInfoByTypeRsp::default_instance_;
  delete TEmailGetInfoByTypeRsp_reflection_;
  delete TEmailPushRsp::default_instance_;
  delete TEmailPushRsp_reflection_;
  delete TEmailReadReq::default_instance_;
  delete TEmailReadReq_reflection_;
  delete TEmailBatchReadReq::default_instance_;
  delete TEmailBatchReadReq_reflection_;
  delete TEmailReceiveAttachmentReq::default_instance_;
  delete TEmailReceiveAttachmentReq_reflection_;
  delete TEmailBatchReceiveAttachmentReq::default_instance_;
  delete TEmailBatchReceiveAttachmentReq_reflection_;
  delete TEmailBatchReceiveAttachmentRsp::default_instance_;
  delete TEmailBatchReceiveAttachmentRsp_reflection_;
  delete TEmailCancelCollectReq::default_instance_;
  delete TEmailCancelCollectReq_reflection_;
  delete TEmailBatchDelReq::default_instance_;
  delete TEmailBatchDelReq_reflection_;
  delete TEmailCollectionReq::default_instance_;
  delete TEmailCollectionReq_reflection_;
  delete TEmailGetCollectionEmailReq::default_instance_;
  delete TEmailGetCollectionEmailReq_reflection_;
  delete TEmailGetCollectionEmailRsp::default_instance_;
  delete TEmailGetCollectionEmailRsp_reflection_;
  delete TEmailSendGuildEmailReq::default_instance_;
  delete TEmailSendGuildEmailReq_reflection_;
  delete TEmailGetEmailContentReq::default_instance_;
  delete TEmailGetEmailContentReq_reflection_;
  delete TEmailGetEmailContentRsp::default_instance_;
  delete TEmailGetEmailContentRsp_reflection_;
}

void protobuf_AddDesc_net_2fEmail_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017net/Email.proto\022\002pb\032\026net/CommonReward."
    "proto\"\310\001\n\014TEmailSingle\022\013\n\003eid\030\001 \001(\r\022\013\n\003t"
    "id\030\002 \001(\r\022\017\n\007content\030\003 \001(\t\022%\n\nattachment\030"
    "\004 \003(\0132\021.pb.TCommonReward\022\024\n\014receivedTime"
    "\030\005 \001(\003\022\020\n\010readTime\030\006 \001(\003\022\025\n\rgotAttachTim"
    "e\030\007 \001(\003\022\021\n\tisCollect\030\010 \001(\010\022\024\n\014titleConte"
    "nt\030\t \001(\t\"<\n\014TEmailUnopen\022\014\n\004type\030\001 \001(\r\022\013"
    "\n\003num\030\002 \001(\r\022\021\n\tattachNum\030\003 \001(\r\"B\n\016TEmail"
    "TypeInfo\022\014\n\004type\030\001 \001(\r\022\"\n\010emailArr\030\002 \003(\013"
    "2\020.pb.TEmailSingle\"A\n\rTEmailTypeMap\022\014\n\004t"
    "ype\030\001 \001(\r\022\"\n\010emailArr\030\002 \003(\0132\020.pb.TEmailS"
    "ingle\"7\n\022TEmailGetUnreadRsp\022!\n\007unreads\030\001"
    " \003(\0132\020.pb.TEmailUnopen\"C\n\026TEmailGetInfoB"
    "yTypeReq\022\014\n\004type\030\001 \001(\r\022\013\n\003eid\030\002 \001(\r\022\016\n\006o"
    "ffset\030\003 \001(\r\"@\n\026TEmailGetInfoByTypeRsp\022&\n"
    "\013emailTypMap\030\001 \001(\0132\021.pb.TEmailTypeMap\"=\n"
    "\rTEmailPushRsp\022,\n\022UnopenEmailInfoArr\030\001 \003"
    "(\0132\020.pb.TEmailUnopen\")\n\rTEmailReadReq\022\013\n"
    "\003typ\030\001 \001(\r\022\013\n\003eid\030\002 \001(\r\"!\n\022TEmailBatchRe"
    "adReq\022\013\n\003typ\030\001 \001(\r\"6\n\032TEmailReceiveAttac"
    "hmentReq\022\013\n\003typ\030\001 \001(\r\022\013\n\003eid\030\002 \001(\r\".\n\037TE"
    "mailBatchReceiveAttachmentReq\022\013\n\003typ\030\001 \001"
    "(\r\"j\n\037TEmailBatchReceiveAttachmentRsp\022!\n"
    "\007mailArr\030\001 \003(\0132\020.pb.TEmailSingle\022$\n\tatta"
    "chArr\030\002 \003(\0132\021.pb.TCommonReward\"2\n\026TEmail"
    "CancelCollectReq\022\013\n\003typ\030\001 \001(\r\022\013\n\003eid\030\002 \001"
    "(\r\"-\n\021TEmailBatchDelReq\022\013\n\003typ\030\001 \001(\r\022\013\n\003"
    "eid\030\002 \003(\r\"/\n\023TEmailCollectionReq\022\013\n\003typ\030"
    "\001 \001(\r\022\013\n\003eid\030\002 \001(\r\":\n\033TEmailGetCollectio"
    "nEmailReq\022\013\n\003eid\030\001 \001(\r\022\016\n\006offset\030\002 \001(\r\"C"
    "\n\033TEmailGetCollectionEmailRsp\022$\n\ncollect"
    "Arr\030\001 \003(\0132\020.pb.TEmailSingle\"I\n\027TEmailSen"
    "dGuildEmailReq\022\r\n\005Title\030\001 \001(\t\022\017\n\007Content"
    "\030\002 \001(\t\022\016\n\006UidArr\030\003 \003(\004\"4\n\030TEmailGetEmail"
    "ContentReq\022\013\n\003Uid\030\001 \001(\004\022\013\n\003Eid\030\002 \001(\r\"+\n\030"
    "TEmailGetEmailContentRsp\022\017\n\007Content\030\001 \001("
    "\t", 1441);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/Email.proto", &protobuf_RegisterTypes);
  TEmailSingle::default_instance_ = new TEmailSingle();
  TEmailUnopen::default_instance_ = new TEmailUnopen();
  TEmailTypeInfo::default_instance_ = new TEmailTypeInfo();
  TEmailTypeMap::default_instance_ = new TEmailTypeMap();
  TEmailGetUnreadRsp::default_instance_ = new TEmailGetUnreadRsp();
  TEmailGetInfoByTypeReq::default_instance_ = new TEmailGetInfoByTypeReq();
  TEmailGetInfoByTypeRsp::default_instance_ = new TEmailGetInfoByTypeRsp();
  TEmailPushRsp::default_instance_ = new TEmailPushRsp();
  TEmailReadReq::default_instance_ = new TEmailReadReq();
  TEmailBatchReadReq::default_instance_ = new TEmailBatchReadReq();
  TEmailReceiveAttachmentReq::default_instance_ = new TEmailReceiveAttachmentReq();
  TEmailBatchReceiveAttachmentReq::default_instance_ = new TEmailBatchReceiveAttachmentReq();
  TEmailBatchReceiveAttachmentRsp::default_instance_ = new TEmailBatchReceiveAttachmentRsp();
  TEmailCancelCollectReq::default_instance_ = new TEmailCancelCollectReq();
  TEmailBatchDelReq::default_instance_ = new TEmailBatchDelReq();
  TEmailCollectionReq::default_instance_ = new TEmailCollectionReq();
  TEmailGetCollectionEmailReq::default_instance_ = new TEmailGetCollectionEmailReq();
  TEmailGetCollectionEmailRsp::default_instance_ = new TEmailGetCollectionEmailRsp();
  TEmailSendGuildEmailReq::default_instance_ = new TEmailSendGuildEmailReq();
  TEmailGetEmailContentReq::default_instance_ = new TEmailGetEmailContentReq();
  TEmailGetEmailContentRsp::default_instance_ = new TEmailGetEmailContentRsp();
  TEmailSingle::default_instance_->InitAsDefaultInstance();
  TEmailUnopen::default_instance_->InitAsDefaultInstance();
  TEmailTypeInfo::default_instance_->InitAsDefaultInstance();
  TEmailTypeMap::default_instance_->InitAsDefaultInstance();
  TEmailGetUnreadRsp::default_instance_->InitAsDefaultInstance();
  TEmailGetInfoByTypeReq::default_instance_->InitAsDefaultInstance();
  TEmailGetInfoByTypeRsp::default_instance_->InitAsDefaultInstance();
  TEmailPushRsp::default_instance_->InitAsDefaultInstance();
  TEmailReadReq::default_instance_->InitAsDefaultInstance();
  TEmailBatchReadReq::default_instance_->InitAsDefaultInstance();
  TEmailReceiveAttachmentReq::default_instance_->InitAsDefaultInstance();
  TEmailBatchReceiveAttachmentReq::default_instance_->InitAsDefaultInstance();
  TEmailBatchReceiveAttachmentRsp::default_instance_->InitAsDefaultInstance();
  TEmailCancelCollectReq::default_instance_->InitAsDefaultInstance();
  TEmailBatchDelReq::default_instance_->InitAsDefaultInstance();
  TEmailCollectionReq::default_instance_->InitAsDefaultInstance();
  TEmailGetCollectionEmailReq::default_instance_->InitAsDefaultInstance();
  TEmailGetCollectionEmailRsp::default_instance_->InitAsDefaultInstance();
  TEmailSendGuildEmailReq::default_instance_->InitAsDefaultInstance();
  TEmailGetEmailContentReq::default_instance_->InitAsDefaultInstance();
  TEmailGetEmailContentRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fEmail_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fEmail_2eproto {
  StaticDescriptorInitializer_net_2fEmail_2eproto() {
    protobuf_AddDesc_net_2fEmail_2eproto();
  }
} static_descriptor_initializer_net_2fEmail_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TEmailSingle::kEidFieldNumber;
const int TEmailSingle::kTidFieldNumber;
const int TEmailSingle::kContentFieldNumber;
const int TEmailSingle::kAttachmentFieldNumber;
const int TEmailSingle::kReceivedTimeFieldNumber;
const int TEmailSingle::kReadTimeFieldNumber;
const int TEmailSingle::kGotAttachTimeFieldNumber;
const int TEmailSingle::kIsCollectFieldNumber;
const int TEmailSingle::kTitleContentFieldNumber;
#endif  // !_MSC_VER

TEmailSingle::TEmailSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailSingle)
}

void TEmailSingle::InitAsDefaultInstance() {
}

TEmailSingle::TEmailSingle(const TEmailSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailSingle)
}

void TEmailSingle::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  eid_ = 0u;
  tid_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  receivedtime_ = GOOGLE_LONGLONG(0);
  readtime_ = GOOGLE_LONGLONG(0);
  gotattachtime_ = GOOGLE_LONGLONG(0);
  iscollect_ = false;
  titlecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailSingle::~TEmailSingle() {
  // @@protoc_insertion_point(destructor:pb.TEmailSingle)
  SharedDtor();
}

void TEmailSingle::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (titlecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete titlecontent_;
  }
  if (this != default_instance_) {
  }
}

void TEmailSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailSingle_descriptor_;
}

const TEmailSingle& TEmailSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailSingle* TEmailSingle::default_instance_ = NULL;

TEmailSingle* TEmailSingle::New() const {
  return new TEmailSingle;
}

void TEmailSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TEmailSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(eid_, tid_);
    ZR_(receivedtime_, gotattachtime_);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    iscollect_ = false;
  }
  if (has_titlecontent()) {
    if (titlecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      titlecontent_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attachment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tid;
        break;
      }

      // optional uint32 tid = 2;
      case 2: {
        if (tag == 16) {
         parse_tid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
          set_has_tid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attachment;
        break;
      }

      // repeated .pb.TCommonReward attachment = 4;
      case 4: {
        if (tag == 34) {
         parse_attachment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachment()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attachment;
        if (input->ExpectTag(40)) goto parse_receivedTime;
        break;
      }

      // optional int64 receivedTime = 5;
      case 5: {
        if (tag == 40) {
         parse_receivedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &receivedtime_)));
          set_has_receivedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_readTime;
        break;
      }

      // optional int64 readTime = 6;
      case 6: {
        if (tag == 48) {
         parse_readTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &readtime_)));
          set_has_readtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gotAttachTime;
        break;
      }

      // optional int64 gotAttachTime = 7;
      case 7: {
        if (tag == 56) {
         parse_gotAttachTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gotattachtime_)));
          set_has_gotattachtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_isCollect;
        break;
      }

      // optional bool isCollect = 8;
      case 8: {
        if (tag == 64) {
         parse_isCollect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscollect_)));
          set_has_iscollect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_titleContent;
        break;
      }

      // optional string titleContent = 9;
      case 9: {
        if (tag == 74) {
         parse_titleContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titlecontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->titlecontent().data(), this->titlecontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "titlecontent");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailSingle)
  return false;
#undef DO_
}

void TEmailSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailSingle)
  // optional uint32 eid = 1;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eid(), output);
  }

  // optional uint32 tid = 2;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // repeated .pb.TCommonReward attachment = 4;
  for (int i = 0; i < this->attachment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attachment(i), output);
  }

  // optional int64 receivedTime = 5;
  if (has_receivedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->receivedtime(), output);
  }

  // optional int64 readTime = 6;
  if (has_readtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->readtime(), output);
  }

  // optional int64 gotAttachTime = 7;
  if (has_gotattachtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->gotattachtime(), output);
  }

  // optional bool isCollect = 8;
  if (has_iscollect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iscollect(), output);
  }

  // optional string titleContent = 9;
  if (has_titlecontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->titlecontent().data(), this->titlecontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "titlecontent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->titlecontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailSingle)
}

::google::protobuf::uint8* TEmailSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailSingle)
  // optional uint32 eid = 1;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eid(), target);
  }

  // optional uint32 tid = 2;
  if (has_tid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tid(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // repeated .pb.TCommonReward attachment = 4;
  for (int i = 0; i < this->attachment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attachment(i), target);
  }

  // optional int64 receivedTime = 5;
  if (has_receivedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->receivedtime(), target);
  }

  // optional int64 readTime = 6;
  if (has_readtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->readtime(), target);
  }

  // optional int64 gotAttachTime = 7;
  if (has_gotattachtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->gotattachtime(), target);
  }

  // optional bool isCollect = 8;
  if (has_iscollect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iscollect(), target);
  }

  // optional string titleContent = 9;
  if (has_titlecontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->titlecontent().data(), this->titlecontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "titlecontent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->titlecontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailSingle)
  return target;
}

int TEmailSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eid = 1;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

    // optional uint32 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional int64 receivedTime = 5;
    if (has_receivedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->receivedtime());
    }

    // optional int64 readTime = 6;
    if (has_readtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->readtime());
    }

    // optional int64 gotAttachTime = 7;
    if (has_gotattachtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gotattachtime());
    }

    // optional bool isCollect = 8;
    if (has_iscollect()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string titleContent = 9;
    if (has_titlecontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titlecontent());
    }

  }
  // repeated .pb.TCommonReward attachment = 4;
  total_size += 1 * this->attachment_size();
  for (int i = 0; i < this->attachment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailSingle::MergeFrom(const TEmailSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachment_.MergeFrom(from.attachment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_receivedtime()) {
      set_receivedtime(from.receivedtime());
    }
    if (from.has_readtime()) {
      set_readtime(from.readtime());
    }
    if (from.has_gotattachtime()) {
      set_gotattachtime(from.gotattachtime());
    }
    if (from.has_iscollect()) {
      set_iscollect(from.iscollect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_titlecontent()) {
      set_titlecontent(from.titlecontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailSingle::CopyFrom(const TEmailSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailSingle::IsInitialized() const {

  return true;
}

void TEmailSingle::Swap(TEmailSingle* other) {
  if (other != this) {
    std::swap(eid_, other->eid_);
    std::swap(tid_, other->tid_);
    std::swap(content_, other->content_);
    attachment_.Swap(&other->attachment_);
    std::swap(receivedtime_, other->receivedtime_);
    std::swap(readtime_, other->readtime_);
    std::swap(gotattachtime_, other->gotattachtime_);
    std::swap(iscollect_, other->iscollect_);
    std::swap(titlecontent_, other->titlecontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailSingle_descriptor_;
  metadata.reflection = TEmailSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailUnopen::kTypeFieldNumber;
const int TEmailUnopen::kNumFieldNumber;
const int TEmailUnopen::kAttachNumFieldNumber;
#endif  // !_MSC_VER

TEmailUnopen::TEmailUnopen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailUnopen)
}

void TEmailUnopen::InitAsDefaultInstance() {
}

TEmailUnopen::TEmailUnopen(const TEmailUnopen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailUnopen)
}

void TEmailUnopen::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  num_ = 0u;
  attachnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailUnopen::~TEmailUnopen() {
  // @@protoc_insertion_point(destructor:pb.TEmailUnopen)
  SharedDtor();
}

void TEmailUnopen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailUnopen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailUnopen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailUnopen_descriptor_;
}

const TEmailUnopen& TEmailUnopen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailUnopen* TEmailUnopen::default_instance_ = NULL;

TEmailUnopen* TEmailUnopen::New() const {
  return new TEmailUnopen;
}

void TEmailUnopen::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TEmailUnopen*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, attachnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailUnopen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailUnopen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (tag == 16) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_attachNum;
        break;
      }

      // optional uint32 attachNum = 3;
      case 3: {
        if (tag == 24) {
         parse_attachNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attachnum_)));
          set_has_attachnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailUnopen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailUnopen)
  return false;
#undef DO_
}

void TEmailUnopen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailUnopen)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 attachNum = 3;
  if (has_attachnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attachnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailUnopen)
}

::google::protobuf::uint8* TEmailUnopen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailUnopen)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 attachNum = 3;
  if (has_attachnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attachnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailUnopen)
  return target;
}

int TEmailUnopen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 attachNum = 3;
    if (has_attachnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attachnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailUnopen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailUnopen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailUnopen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailUnopen::MergeFrom(const TEmailUnopen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_attachnum()) {
      set_attachnum(from.attachnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailUnopen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailUnopen::CopyFrom(const TEmailUnopen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailUnopen::IsInitialized() const {

  return true;
}

void TEmailUnopen::Swap(TEmailUnopen* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(attachnum_, other->attachnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailUnopen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailUnopen_descriptor_;
  metadata.reflection = TEmailUnopen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailTypeInfo::kTypeFieldNumber;
const int TEmailTypeInfo::kEmailArrFieldNumber;
#endif  // !_MSC_VER

TEmailTypeInfo::TEmailTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailTypeInfo)
}

void TEmailTypeInfo::InitAsDefaultInstance() {
}

TEmailTypeInfo::TEmailTypeInfo(const TEmailTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailTypeInfo)
}

void TEmailTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailTypeInfo::~TEmailTypeInfo() {
  // @@protoc_insertion_point(destructor:pb.TEmailTypeInfo)
  SharedDtor();
}

void TEmailTypeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailTypeInfo_descriptor_;
}

const TEmailTypeInfo& TEmailTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailTypeInfo* TEmailTypeInfo::default_instance_ = NULL;

TEmailTypeInfo* TEmailTypeInfo::New() const {
  return new TEmailTypeInfo;
}

void TEmailTypeInfo::Clear() {
  type_ = 0u;
  emailarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailTypeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_emailArr;
        break;
      }

      // repeated .pb.TEmailSingle emailArr = 2;
      case 2: {
        if (tag == 18) {
         parse_emailArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emailarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_emailArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailTypeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailTypeInfo)
  return false;
#undef DO_
}

void TEmailTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailTypeInfo)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .pb.TEmailSingle emailArr = 2;
  for (int i = 0; i < this->emailarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->emailarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailTypeInfo)
}

::google::protobuf::uint8* TEmailTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailTypeInfo)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .pb.TEmailSingle emailArr = 2;
  for (int i = 0; i < this->emailarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->emailarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailTypeInfo)
  return target;
}

int TEmailTypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .pb.TEmailSingle emailArr = 2;
  total_size += 1 * this->emailarr_size();
  for (int i = 0; i < this->emailarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->emailarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailTypeInfo::MergeFrom(const TEmailTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  emailarr_.MergeFrom(from.emailarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailTypeInfo::CopyFrom(const TEmailTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailTypeInfo::IsInitialized() const {

  return true;
}

void TEmailTypeInfo::Swap(TEmailTypeInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    emailarr_.Swap(&other->emailarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailTypeInfo_descriptor_;
  metadata.reflection = TEmailTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailTypeMap::kTypeFieldNumber;
const int TEmailTypeMap::kEmailArrFieldNumber;
#endif  // !_MSC_VER

TEmailTypeMap::TEmailTypeMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailTypeMap)
}

void TEmailTypeMap::InitAsDefaultInstance() {
}

TEmailTypeMap::TEmailTypeMap(const TEmailTypeMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailTypeMap)
}

void TEmailTypeMap::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailTypeMap::~TEmailTypeMap() {
  // @@protoc_insertion_point(destructor:pb.TEmailTypeMap)
  SharedDtor();
}

void TEmailTypeMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailTypeMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailTypeMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailTypeMap_descriptor_;
}

const TEmailTypeMap& TEmailTypeMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailTypeMap* TEmailTypeMap::default_instance_ = NULL;

TEmailTypeMap* TEmailTypeMap::New() const {
  return new TEmailTypeMap;
}

void TEmailTypeMap::Clear() {
  type_ = 0u;
  emailarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailTypeMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailTypeMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_emailArr;
        break;
      }

      // repeated .pb.TEmailSingle emailArr = 2;
      case 2: {
        if (tag == 18) {
         parse_emailArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emailarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_emailArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailTypeMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailTypeMap)
  return false;
#undef DO_
}

void TEmailTypeMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailTypeMap)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .pb.TEmailSingle emailArr = 2;
  for (int i = 0; i < this->emailarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->emailarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailTypeMap)
}

::google::protobuf::uint8* TEmailTypeMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailTypeMap)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .pb.TEmailSingle emailArr = 2;
  for (int i = 0; i < this->emailarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->emailarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailTypeMap)
  return target;
}

int TEmailTypeMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .pb.TEmailSingle emailArr = 2;
  total_size += 1 * this->emailarr_size();
  for (int i = 0; i < this->emailarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->emailarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailTypeMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailTypeMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailTypeMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailTypeMap::MergeFrom(const TEmailTypeMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  emailarr_.MergeFrom(from.emailarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailTypeMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailTypeMap::CopyFrom(const TEmailTypeMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailTypeMap::IsInitialized() const {

  return true;
}

void TEmailTypeMap::Swap(TEmailTypeMap* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    emailarr_.Swap(&other->emailarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailTypeMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailTypeMap_descriptor_;
  metadata.reflection = TEmailTypeMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailGetUnreadRsp::kUnreadsFieldNumber;
#endif  // !_MSC_VER

TEmailGetUnreadRsp::TEmailGetUnreadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailGetUnreadRsp)
}

void TEmailGetUnreadRsp::InitAsDefaultInstance() {
}

TEmailGetUnreadRsp::TEmailGetUnreadRsp(const TEmailGetUnreadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailGetUnreadRsp)
}

void TEmailGetUnreadRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailGetUnreadRsp::~TEmailGetUnreadRsp() {
  // @@protoc_insertion_point(destructor:pb.TEmailGetUnreadRsp)
  SharedDtor();
}

void TEmailGetUnreadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailGetUnreadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailGetUnreadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailGetUnreadRsp_descriptor_;
}

const TEmailGetUnreadRsp& TEmailGetUnreadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailGetUnreadRsp* TEmailGetUnreadRsp::default_instance_ = NULL;

TEmailGetUnreadRsp* TEmailGetUnreadRsp::New() const {
  return new TEmailGetUnreadRsp;
}

void TEmailGetUnreadRsp::Clear() {
  unreads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailGetUnreadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailGetUnreadRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TEmailUnopen unreads = 1;
      case 1: {
        if (tag == 10) {
         parse_unreads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unreads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_unreads;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailGetUnreadRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailGetUnreadRsp)
  return false;
#undef DO_
}

void TEmailGetUnreadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailGetUnreadRsp)
  // repeated .pb.TEmailUnopen unreads = 1;
  for (int i = 0; i < this->unreads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unreads(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailGetUnreadRsp)
}

::google::protobuf::uint8* TEmailGetUnreadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailGetUnreadRsp)
  // repeated .pb.TEmailUnopen unreads = 1;
  for (int i = 0; i < this->unreads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unreads(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailGetUnreadRsp)
  return target;
}

int TEmailGetUnreadRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TEmailUnopen unreads = 1;
  total_size += 1 * this->unreads_size();
  for (int i = 0; i < this->unreads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unreads(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailGetUnreadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailGetUnreadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailGetUnreadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailGetUnreadRsp::MergeFrom(const TEmailGetUnreadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  unreads_.MergeFrom(from.unreads_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailGetUnreadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailGetUnreadRsp::CopyFrom(const TEmailGetUnreadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailGetUnreadRsp::IsInitialized() const {

  return true;
}

void TEmailGetUnreadRsp::Swap(TEmailGetUnreadRsp* other) {
  if (other != this) {
    unreads_.Swap(&other->unreads_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailGetUnreadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailGetUnreadRsp_descriptor_;
  metadata.reflection = TEmailGetUnreadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailGetInfoByTypeReq::kTypeFieldNumber;
const int TEmailGetInfoByTypeReq::kEidFieldNumber;
const int TEmailGetInfoByTypeReq::kOffsetFieldNumber;
#endif  // !_MSC_VER

TEmailGetInfoByTypeReq::TEmailGetInfoByTypeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailGetInfoByTypeReq)
}

void TEmailGetInfoByTypeReq::InitAsDefaultInstance() {
}

TEmailGetInfoByTypeReq::TEmailGetInfoByTypeReq(const TEmailGetInfoByTypeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailGetInfoByTypeReq)
}

void TEmailGetInfoByTypeReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  eid_ = 0u;
  offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailGetInfoByTypeReq::~TEmailGetInfoByTypeReq() {
  // @@protoc_insertion_point(destructor:pb.TEmailGetInfoByTypeReq)
  SharedDtor();
}

void TEmailGetInfoByTypeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailGetInfoByTypeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailGetInfoByTypeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailGetInfoByTypeReq_descriptor_;
}

const TEmailGetInfoByTypeReq& TEmailGetInfoByTypeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailGetInfoByTypeReq* TEmailGetInfoByTypeReq::default_instance_ = NULL;

TEmailGetInfoByTypeReq* TEmailGetInfoByTypeReq::New() const {
  return new TEmailGetInfoByTypeReq;
}

void TEmailGetInfoByTypeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TEmailGetInfoByTypeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, offset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailGetInfoByTypeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailGetInfoByTypeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eid;
        break;
      }

      // optional uint32 eid = 2;
      case 2: {
        if (tag == 16) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailGetInfoByTypeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailGetInfoByTypeReq)
  return false;
#undef DO_
}

void TEmailGetInfoByTypeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailGetInfoByTypeReq)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 eid = 2;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eid(), output);
  }

  // optional uint32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailGetInfoByTypeReq)
}

::google::protobuf::uint8* TEmailGetInfoByTypeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailGetInfoByTypeReq)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 eid = 2;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eid(), target);
  }

  // optional uint32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailGetInfoByTypeReq)
  return target;
}

int TEmailGetInfoByTypeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 eid = 2;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

    // optional uint32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailGetInfoByTypeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailGetInfoByTypeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailGetInfoByTypeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailGetInfoByTypeReq::MergeFrom(const TEmailGetInfoByTypeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailGetInfoByTypeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailGetInfoByTypeReq::CopyFrom(const TEmailGetInfoByTypeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailGetInfoByTypeReq::IsInitialized() const {

  return true;
}

void TEmailGetInfoByTypeReq::Swap(TEmailGetInfoByTypeReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(eid_, other->eid_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailGetInfoByTypeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailGetInfoByTypeReq_descriptor_;
  metadata.reflection = TEmailGetInfoByTypeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailGetInfoByTypeRsp::kEmailTypMapFieldNumber;
#endif  // !_MSC_VER

TEmailGetInfoByTypeRsp::TEmailGetInfoByTypeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailGetInfoByTypeRsp)
}

void TEmailGetInfoByTypeRsp::InitAsDefaultInstance() {
  emailtypmap_ = const_cast< ::pb::TEmailTypeMap*>(&::pb::TEmailTypeMap::default_instance());
}

TEmailGetInfoByTypeRsp::TEmailGetInfoByTypeRsp(const TEmailGetInfoByTypeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailGetInfoByTypeRsp)
}

void TEmailGetInfoByTypeRsp::SharedCtor() {
  _cached_size_ = 0;
  emailtypmap_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailGetInfoByTypeRsp::~TEmailGetInfoByTypeRsp() {
  // @@protoc_insertion_point(destructor:pb.TEmailGetInfoByTypeRsp)
  SharedDtor();
}

void TEmailGetInfoByTypeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete emailtypmap_;
  }
}

void TEmailGetInfoByTypeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailGetInfoByTypeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailGetInfoByTypeRsp_descriptor_;
}

const TEmailGetInfoByTypeRsp& TEmailGetInfoByTypeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailGetInfoByTypeRsp* TEmailGetInfoByTypeRsp::default_instance_ = NULL;

TEmailGetInfoByTypeRsp* TEmailGetInfoByTypeRsp::New() const {
  return new TEmailGetInfoByTypeRsp;
}

void TEmailGetInfoByTypeRsp::Clear() {
  if (has_emailtypmap()) {
    if (emailtypmap_ != NULL) emailtypmap_->::pb::TEmailTypeMap::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailGetInfoByTypeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailGetInfoByTypeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TEmailTypeMap emailTypMap = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emailtypmap()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailGetInfoByTypeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailGetInfoByTypeRsp)
  return false;
#undef DO_
}

void TEmailGetInfoByTypeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailGetInfoByTypeRsp)
  // optional .pb.TEmailTypeMap emailTypMap = 1;
  if (has_emailtypmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->emailtypmap(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailGetInfoByTypeRsp)
}

::google::protobuf::uint8* TEmailGetInfoByTypeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailGetInfoByTypeRsp)
  // optional .pb.TEmailTypeMap emailTypMap = 1;
  if (has_emailtypmap()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->emailtypmap(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailGetInfoByTypeRsp)
  return target;
}

int TEmailGetInfoByTypeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TEmailTypeMap emailTypMap = 1;
    if (has_emailtypmap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emailtypmap());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailGetInfoByTypeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailGetInfoByTypeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailGetInfoByTypeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailGetInfoByTypeRsp::MergeFrom(const TEmailGetInfoByTypeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_emailtypmap()) {
      mutable_emailtypmap()->::pb::TEmailTypeMap::MergeFrom(from.emailtypmap());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailGetInfoByTypeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailGetInfoByTypeRsp::CopyFrom(const TEmailGetInfoByTypeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailGetInfoByTypeRsp::IsInitialized() const {

  return true;
}

void TEmailGetInfoByTypeRsp::Swap(TEmailGetInfoByTypeRsp* other) {
  if (other != this) {
    std::swap(emailtypmap_, other->emailtypmap_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailGetInfoByTypeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailGetInfoByTypeRsp_descriptor_;
  metadata.reflection = TEmailGetInfoByTypeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailPushRsp::kUnopenEmailInfoArrFieldNumber;
#endif  // !_MSC_VER

TEmailPushRsp::TEmailPushRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailPushRsp)
}

void TEmailPushRsp::InitAsDefaultInstance() {
}

TEmailPushRsp::TEmailPushRsp(const TEmailPushRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailPushRsp)
}

void TEmailPushRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailPushRsp::~TEmailPushRsp() {
  // @@protoc_insertion_point(destructor:pb.TEmailPushRsp)
  SharedDtor();
}

void TEmailPushRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailPushRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailPushRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailPushRsp_descriptor_;
}

const TEmailPushRsp& TEmailPushRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailPushRsp* TEmailPushRsp::default_instance_ = NULL;

TEmailPushRsp* TEmailPushRsp::New() const {
  return new TEmailPushRsp;
}

void TEmailPushRsp::Clear() {
  unopenemailinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailPushRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailPushRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TEmailUnopen UnopenEmailInfoArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UnopenEmailInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unopenemailinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UnopenEmailInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailPushRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailPushRsp)
  return false;
#undef DO_
}

void TEmailPushRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailPushRsp)
  // repeated .pb.TEmailUnopen UnopenEmailInfoArr = 1;
  for (int i = 0; i < this->unopenemailinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unopenemailinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailPushRsp)
}

::google::protobuf::uint8* TEmailPushRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailPushRsp)
  // repeated .pb.TEmailUnopen UnopenEmailInfoArr = 1;
  for (int i = 0; i < this->unopenemailinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unopenemailinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailPushRsp)
  return target;
}

int TEmailPushRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TEmailUnopen UnopenEmailInfoArr = 1;
  total_size += 1 * this->unopenemailinfoarr_size();
  for (int i = 0; i < this->unopenemailinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unopenemailinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailPushRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailPushRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailPushRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailPushRsp::MergeFrom(const TEmailPushRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  unopenemailinfoarr_.MergeFrom(from.unopenemailinfoarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailPushRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailPushRsp::CopyFrom(const TEmailPushRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailPushRsp::IsInitialized() const {

  return true;
}

void TEmailPushRsp::Swap(TEmailPushRsp* other) {
  if (other != this) {
    unopenemailinfoarr_.Swap(&other->unopenemailinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailPushRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailPushRsp_descriptor_;
  metadata.reflection = TEmailPushRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailReadReq::kTypFieldNumber;
const int TEmailReadReq::kEidFieldNumber;
#endif  // !_MSC_VER

TEmailReadReq::TEmailReadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailReadReq)
}

void TEmailReadReq::InitAsDefaultInstance() {
}

TEmailReadReq::TEmailReadReq(const TEmailReadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailReadReq)
}

void TEmailReadReq::SharedCtor() {
  _cached_size_ = 0;
  typ_ = 0u;
  eid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailReadReq::~TEmailReadReq() {
  // @@protoc_insertion_point(destructor:pb.TEmailReadReq)
  SharedDtor();
}

void TEmailReadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailReadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailReadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailReadReq_descriptor_;
}

const TEmailReadReq& TEmailReadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailReadReq* TEmailReadReq::default_instance_ = NULL;

TEmailReadReq* TEmailReadReq::New() const {
  return new TEmailReadReq;
}

void TEmailReadReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TEmailReadReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(typ_, eid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailReadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailReadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 typ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typ_)));
          set_has_typ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eid;
        break;
      }

      // optional uint32 eid = 2;
      case 2: {
        if (tag == 16) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailReadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailReadReq)
  return false;
#undef DO_
}

void TEmailReadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailReadReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->typ(), output);
  }

  // optional uint32 eid = 2;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailReadReq)
}

::google::protobuf::uint8* TEmailReadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailReadReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->typ(), target);
  }

  // optional uint32 eid = 2;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailReadReq)
  return target;
}

int TEmailReadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 typ = 1;
    if (has_typ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typ());
    }

    // optional uint32 eid = 2;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailReadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailReadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailReadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailReadReq::MergeFrom(const TEmailReadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typ()) {
      set_typ(from.typ());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailReadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailReadReq::CopyFrom(const TEmailReadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailReadReq::IsInitialized() const {

  return true;
}

void TEmailReadReq::Swap(TEmailReadReq* other) {
  if (other != this) {
    std::swap(typ_, other->typ_);
    std::swap(eid_, other->eid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailReadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailReadReq_descriptor_;
  metadata.reflection = TEmailReadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailBatchReadReq::kTypFieldNumber;
#endif  // !_MSC_VER

TEmailBatchReadReq::TEmailBatchReadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailBatchReadReq)
}

void TEmailBatchReadReq::InitAsDefaultInstance() {
}

TEmailBatchReadReq::TEmailBatchReadReq(const TEmailBatchReadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailBatchReadReq)
}

void TEmailBatchReadReq::SharedCtor() {
  _cached_size_ = 0;
  typ_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailBatchReadReq::~TEmailBatchReadReq() {
  // @@protoc_insertion_point(destructor:pb.TEmailBatchReadReq)
  SharedDtor();
}

void TEmailBatchReadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailBatchReadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailBatchReadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailBatchReadReq_descriptor_;
}

const TEmailBatchReadReq& TEmailBatchReadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailBatchReadReq* TEmailBatchReadReq::default_instance_ = NULL;

TEmailBatchReadReq* TEmailBatchReadReq::New() const {
  return new TEmailBatchReadReq;
}

void TEmailBatchReadReq::Clear() {
  typ_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailBatchReadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailBatchReadReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 typ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typ_)));
          set_has_typ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailBatchReadReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailBatchReadReq)
  return false;
#undef DO_
}

void TEmailBatchReadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailBatchReadReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->typ(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailBatchReadReq)
}

::google::protobuf::uint8* TEmailBatchReadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailBatchReadReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->typ(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailBatchReadReq)
  return target;
}

int TEmailBatchReadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 typ = 1;
    if (has_typ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typ());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailBatchReadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailBatchReadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailBatchReadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailBatchReadReq::MergeFrom(const TEmailBatchReadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typ()) {
      set_typ(from.typ());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailBatchReadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailBatchReadReq::CopyFrom(const TEmailBatchReadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailBatchReadReq::IsInitialized() const {

  return true;
}

void TEmailBatchReadReq::Swap(TEmailBatchReadReq* other) {
  if (other != this) {
    std::swap(typ_, other->typ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailBatchReadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailBatchReadReq_descriptor_;
  metadata.reflection = TEmailBatchReadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailReceiveAttachmentReq::kTypFieldNumber;
const int TEmailReceiveAttachmentReq::kEidFieldNumber;
#endif  // !_MSC_VER

TEmailReceiveAttachmentReq::TEmailReceiveAttachmentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailReceiveAttachmentReq)
}

void TEmailReceiveAttachmentReq::InitAsDefaultInstance() {
}

TEmailReceiveAttachmentReq::TEmailReceiveAttachmentReq(const TEmailReceiveAttachmentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailReceiveAttachmentReq)
}

void TEmailReceiveAttachmentReq::SharedCtor() {
  _cached_size_ = 0;
  typ_ = 0u;
  eid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailReceiveAttachmentReq::~TEmailReceiveAttachmentReq() {
  // @@protoc_insertion_point(destructor:pb.TEmailReceiveAttachmentReq)
  SharedDtor();
}

void TEmailReceiveAttachmentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailReceiveAttachmentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailReceiveAttachmentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailReceiveAttachmentReq_descriptor_;
}

const TEmailReceiveAttachmentReq& TEmailReceiveAttachmentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailReceiveAttachmentReq* TEmailReceiveAttachmentReq::default_instance_ = NULL;

TEmailReceiveAttachmentReq* TEmailReceiveAttachmentReq::New() const {
  return new TEmailReceiveAttachmentReq;
}

void TEmailReceiveAttachmentReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TEmailReceiveAttachmentReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(typ_, eid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailReceiveAttachmentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailReceiveAttachmentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 typ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typ_)));
          set_has_typ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eid;
        break;
      }

      // optional uint32 eid = 2;
      case 2: {
        if (tag == 16) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailReceiveAttachmentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailReceiveAttachmentReq)
  return false;
#undef DO_
}

void TEmailReceiveAttachmentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailReceiveAttachmentReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->typ(), output);
  }

  // optional uint32 eid = 2;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailReceiveAttachmentReq)
}

::google::protobuf::uint8* TEmailReceiveAttachmentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailReceiveAttachmentReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->typ(), target);
  }

  // optional uint32 eid = 2;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailReceiveAttachmentReq)
  return target;
}

int TEmailReceiveAttachmentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 typ = 1;
    if (has_typ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typ());
    }

    // optional uint32 eid = 2;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailReceiveAttachmentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailReceiveAttachmentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailReceiveAttachmentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailReceiveAttachmentReq::MergeFrom(const TEmailReceiveAttachmentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typ()) {
      set_typ(from.typ());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailReceiveAttachmentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailReceiveAttachmentReq::CopyFrom(const TEmailReceiveAttachmentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailReceiveAttachmentReq::IsInitialized() const {

  return true;
}

void TEmailReceiveAttachmentReq::Swap(TEmailReceiveAttachmentReq* other) {
  if (other != this) {
    std::swap(typ_, other->typ_);
    std::swap(eid_, other->eid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailReceiveAttachmentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailReceiveAttachmentReq_descriptor_;
  metadata.reflection = TEmailReceiveAttachmentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailBatchReceiveAttachmentReq::kTypFieldNumber;
#endif  // !_MSC_VER

TEmailBatchReceiveAttachmentReq::TEmailBatchReceiveAttachmentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailBatchReceiveAttachmentReq)
}

void TEmailBatchReceiveAttachmentReq::InitAsDefaultInstance() {
}

TEmailBatchReceiveAttachmentReq::TEmailBatchReceiveAttachmentReq(const TEmailBatchReceiveAttachmentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailBatchReceiveAttachmentReq)
}

void TEmailBatchReceiveAttachmentReq::SharedCtor() {
  _cached_size_ = 0;
  typ_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailBatchReceiveAttachmentReq::~TEmailBatchReceiveAttachmentReq() {
  // @@protoc_insertion_point(destructor:pb.TEmailBatchReceiveAttachmentReq)
  SharedDtor();
}

void TEmailBatchReceiveAttachmentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailBatchReceiveAttachmentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailBatchReceiveAttachmentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailBatchReceiveAttachmentReq_descriptor_;
}

const TEmailBatchReceiveAttachmentReq& TEmailBatchReceiveAttachmentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailBatchReceiveAttachmentReq* TEmailBatchReceiveAttachmentReq::default_instance_ = NULL;

TEmailBatchReceiveAttachmentReq* TEmailBatchReceiveAttachmentReq::New() const {
  return new TEmailBatchReceiveAttachmentReq;
}

void TEmailBatchReceiveAttachmentReq::Clear() {
  typ_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailBatchReceiveAttachmentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailBatchReceiveAttachmentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 typ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typ_)));
          set_has_typ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailBatchReceiveAttachmentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailBatchReceiveAttachmentReq)
  return false;
#undef DO_
}

void TEmailBatchReceiveAttachmentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailBatchReceiveAttachmentReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->typ(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailBatchReceiveAttachmentReq)
}

::google::protobuf::uint8* TEmailBatchReceiveAttachmentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailBatchReceiveAttachmentReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->typ(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailBatchReceiveAttachmentReq)
  return target;
}

int TEmailBatchReceiveAttachmentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 typ = 1;
    if (has_typ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typ());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailBatchReceiveAttachmentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailBatchReceiveAttachmentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailBatchReceiveAttachmentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailBatchReceiveAttachmentReq::MergeFrom(const TEmailBatchReceiveAttachmentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typ()) {
      set_typ(from.typ());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailBatchReceiveAttachmentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailBatchReceiveAttachmentReq::CopyFrom(const TEmailBatchReceiveAttachmentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailBatchReceiveAttachmentReq::IsInitialized() const {

  return true;
}

void TEmailBatchReceiveAttachmentReq::Swap(TEmailBatchReceiveAttachmentReq* other) {
  if (other != this) {
    std::swap(typ_, other->typ_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailBatchReceiveAttachmentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailBatchReceiveAttachmentReq_descriptor_;
  metadata.reflection = TEmailBatchReceiveAttachmentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailBatchReceiveAttachmentRsp::kMailArrFieldNumber;
const int TEmailBatchReceiveAttachmentRsp::kAttachArrFieldNumber;
#endif  // !_MSC_VER

TEmailBatchReceiveAttachmentRsp::TEmailBatchReceiveAttachmentRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailBatchReceiveAttachmentRsp)
}

void TEmailBatchReceiveAttachmentRsp::InitAsDefaultInstance() {
}

TEmailBatchReceiveAttachmentRsp::TEmailBatchReceiveAttachmentRsp(const TEmailBatchReceiveAttachmentRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailBatchReceiveAttachmentRsp)
}

void TEmailBatchReceiveAttachmentRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailBatchReceiveAttachmentRsp::~TEmailBatchReceiveAttachmentRsp() {
  // @@protoc_insertion_point(destructor:pb.TEmailBatchReceiveAttachmentRsp)
  SharedDtor();
}

void TEmailBatchReceiveAttachmentRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailBatchReceiveAttachmentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailBatchReceiveAttachmentRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailBatchReceiveAttachmentRsp_descriptor_;
}

const TEmailBatchReceiveAttachmentRsp& TEmailBatchReceiveAttachmentRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailBatchReceiveAttachmentRsp* TEmailBatchReceiveAttachmentRsp::default_instance_ = NULL;

TEmailBatchReceiveAttachmentRsp* TEmailBatchReceiveAttachmentRsp::New() const {
  return new TEmailBatchReceiveAttachmentRsp;
}

void TEmailBatchReceiveAttachmentRsp::Clear() {
  mailarr_.Clear();
  attacharr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailBatchReceiveAttachmentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailBatchReceiveAttachmentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TEmailSingle mailArr = 1;
      case 1: {
        if (tag == 10) {
         parse_mailArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mailarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_mailArr;
        if (input->ExpectTag(18)) goto parse_attachArr;
        break;
      }

      // repeated .pb.TCommonReward attachArr = 2;
      case 2: {
        if (tag == 18) {
         parse_attachArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attacharr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attachArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailBatchReceiveAttachmentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailBatchReceiveAttachmentRsp)
  return false;
#undef DO_
}

void TEmailBatchReceiveAttachmentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailBatchReceiveAttachmentRsp)
  // repeated .pb.TEmailSingle mailArr = 1;
  for (int i = 0; i < this->mailarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailarr(i), output);
  }

  // repeated .pb.TCommonReward attachArr = 2;
  for (int i = 0; i < this->attacharr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attacharr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailBatchReceiveAttachmentRsp)
}

::google::protobuf::uint8* TEmailBatchReceiveAttachmentRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailBatchReceiveAttachmentRsp)
  // repeated .pb.TEmailSingle mailArr = 1;
  for (int i = 0; i < this->mailarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailarr(i), target);
  }

  // repeated .pb.TCommonReward attachArr = 2;
  for (int i = 0; i < this->attacharr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attacharr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailBatchReceiveAttachmentRsp)
  return target;
}

int TEmailBatchReceiveAttachmentRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TEmailSingle mailArr = 1;
  total_size += 1 * this->mailarr_size();
  for (int i = 0; i < this->mailarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mailarr(i));
  }

  // repeated .pb.TCommonReward attachArr = 2;
  total_size += 1 * this->attacharr_size();
  for (int i = 0; i < this->attacharr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attacharr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailBatchReceiveAttachmentRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailBatchReceiveAttachmentRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailBatchReceiveAttachmentRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailBatchReceiveAttachmentRsp::MergeFrom(const TEmailBatchReceiveAttachmentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailarr_.MergeFrom(from.mailarr_);
  attacharr_.MergeFrom(from.attacharr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailBatchReceiveAttachmentRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailBatchReceiveAttachmentRsp::CopyFrom(const TEmailBatchReceiveAttachmentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailBatchReceiveAttachmentRsp::IsInitialized() const {

  return true;
}

void TEmailBatchReceiveAttachmentRsp::Swap(TEmailBatchReceiveAttachmentRsp* other) {
  if (other != this) {
    mailarr_.Swap(&other->mailarr_);
    attacharr_.Swap(&other->attacharr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailBatchReceiveAttachmentRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailBatchReceiveAttachmentRsp_descriptor_;
  metadata.reflection = TEmailBatchReceiveAttachmentRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailCancelCollectReq::kTypFieldNumber;
const int TEmailCancelCollectReq::kEidFieldNumber;
#endif  // !_MSC_VER

TEmailCancelCollectReq::TEmailCancelCollectReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailCancelCollectReq)
}

void TEmailCancelCollectReq::InitAsDefaultInstance() {
}

TEmailCancelCollectReq::TEmailCancelCollectReq(const TEmailCancelCollectReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailCancelCollectReq)
}

void TEmailCancelCollectReq::SharedCtor() {
  _cached_size_ = 0;
  typ_ = 0u;
  eid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailCancelCollectReq::~TEmailCancelCollectReq() {
  // @@protoc_insertion_point(destructor:pb.TEmailCancelCollectReq)
  SharedDtor();
}

void TEmailCancelCollectReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailCancelCollectReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailCancelCollectReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailCancelCollectReq_descriptor_;
}

const TEmailCancelCollectReq& TEmailCancelCollectReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailCancelCollectReq* TEmailCancelCollectReq::default_instance_ = NULL;

TEmailCancelCollectReq* TEmailCancelCollectReq::New() const {
  return new TEmailCancelCollectReq;
}

void TEmailCancelCollectReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TEmailCancelCollectReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(typ_, eid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailCancelCollectReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailCancelCollectReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 typ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typ_)));
          set_has_typ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eid;
        break;
      }

      // optional uint32 eid = 2;
      case 2: {
        if (tag == 16) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailCancelCollectReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailCancelCollectReq)
  return false;
#undef DO_
}

void TEmailCancelCollectReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailCancelCollectReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->typ(), output);
  }

  // optional uint32 eid = 2;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailCancelCollectReq)
}

::google::protobuf::uint8* TEmailCancelCollectReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailCancelCollectReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->typ(), target);
  }

  // optional uint32 eid = 2;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailCancelCollectReq)
  return target;
}

int TEmailCancelCollectReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 typ = 1;
    if (has_typ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typ());
    }

    // optional uint32 eid = 2;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailCancelCollectReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailCancelCollectReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailCancelCollectReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailCancelCollectReq::MergeFrom(const TEmailCancelCollectReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typ()) {
      set_typ(from.typ());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailCancelCollectReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailCancelCollectReq::CopyFrom(const TEmailCancelCollectReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailCancelCollectReq::IsInitialized() const {

  return true;
}

void TEmailCancelCollectReq::Swap(TEmailCancelCollectReq* other) {
  if (other != this) {
    std::swap(typ_, other->typ_);
    std::swap(eid_, other->eid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailCancelCollectReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailCancelCollectReq_descriptor_;
  metadata.reflection = TEmailCancelCollectReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailBatchDelReq::kTypFieldNumber;
const int TEmailBatchDelReq::kEidFieldNumber;
#endif  // !_MSC_VER

TEmailBatchDelReq::TEmailBatchDelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailBatchDelReq)
}

void TEmailBatchDelReq::InitAsDefaultInstance() {
}

TEmailBatchDelReq::TEmailBatchDelReq(const TEmailBatchDelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailBatchDelReq)
}

void TEmailBatchDelReq::SharedCtor() {
  _cached_size_ = 0;
  typ_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailBatchDelReq::~TEmailBatchDelReq() {
  // @@protoc_insertion_point(destructor:pb.TEmailBatchDelReq)
  SharedDtor();
}

void TEmailBatchDelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailBatchDelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailBatchDelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailBatchDelReq_descriptor_;
}

const TEmailBatchDelReq& TEmailBatchDelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailBatchDelReq* TEmailBatchDelReq::default_instance_ = NULL;

TEmailBatchDelReq* TEmailBatchDelReq::New() const {
  return new TEmailBatchDelReq;
}

void TEmailBatchDelReq::Clear() {
  typ_ = 0u;
  eid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailBatchDelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailBatchDelReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 typ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typ_)));
          set_has_typ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eid;
        break;
      }

      // repeated uint32 eid = 2;
      case 2: {
        if (tag == 16) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_eid())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_eid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailBatchDelReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailBatchDelReq)
  return false;
#undef DO_
}

void TEmailBatchDelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailBatchDelReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->typ(), output);
  }

  // repeated uint32 eid = 2;
  for (int i = 0; i < this->eid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->eid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailBatchDelReq)
}

::google::protobuf::uint8* TEmailBatchDelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailBatchDelReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->typ(), target);
  }

  // repeated uint32 eid = 2;
  for (int i = 0; i < this->eid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->eid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailBatchDelReq)
  return target;
}

int TEmailBatchDelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 typ = 1;
    if (has_typ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typ());
    }

  }
  // repeated uint32 eid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->eid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->eid(i));
    }
    total_size += 1 * this->eid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailBatchDelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailBatchDelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailBatchDelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailBatchDelReq::MergeFrom(const TEmailBatchDelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  eid_.MergeFrom(from.eid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typ()) {
      set_typ(from.typ());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailBatchDelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailBatchDelReq::CopyFrom(const TEmailBatchDelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailBatchDelReq::IsInitialized() const {

  return true;
}

void TEmailBatchDelReq::Swap(TEmailBatchDelReq* other) {
  if (other != this) {
    std::swap(typ_, other->typ_);
    eid_.Swap(&other->eid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailBatchDelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailBatchDelReq_descriptor_;
  metadata.reflection = TEmailBatchDelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailCollectionReq::kTypFieldNumber;
const int TEmailCollectionReq::kEidFieldNumber;
#endif  // !_MSC_VER

TEmailCollectionReq::TEmailCollectionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailCollectionReq)
}

void TEmailCollectionReq::InitAsDefaultInstance() {
}

TEmailCollectionReq::TEmailCollectionReq(const TEmailCollectionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailCollectionReq)
}

void TEmailCollectionReq::SharedCtor() {
  _cached_size_ = 0;
  typ_ = 0u;
  eid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailCollectionReq::~TEmailCollectionReq() {
  // @@protoc_insertion_point(destructor:pb.TEmailCollectionReq)
  SharedDtor();
}

void TEmailCollectionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailCollectionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailCollectionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailCollectionReq_descriptor_;
}

const TEmailCollectionReq& TEmailCollectionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailCollectionReq* TEmailCollectionReq::default_instance_ = NULL;

TEmailCollectionReq* TEmailCollectionReq::New() const {
  return new TEmailCollectionReq;
}

void TEmailCollectionReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TEmailCollectionReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(typ_, eid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailCollectionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailCollectionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 typ = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typ_)));
          set_has_typ();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_eid;
        break;
      }

      // optional uint32 eid = 2;
      case 2: {
        if (tag == 16) {
         parse_eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailCollectionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailCollectionReq)
  return false;
#undef DO_
}

void TEmailCollectionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailCollectionReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->typ(), output);
  }

  // optional uint32 eid = 2;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailCollectionReq)
}

::google::protobuf::uint8* TEmailCollectionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailCollectionReq)
  // optional uint32 typ = 1;
  if (has_typ()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->typ(), target);
  }

  // optional uint32 eid = 2;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailCollectionReq)
  return target;
}

int TEmailCollectionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 typ = 1;
    if (has_typ()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typ());
    }

    // optional uint32 eid = 2;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailCollectionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailCollectionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailCollectionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailCollectionReq::MergeFrom(const TEmailCollectionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_typ()) {
      set_typ(from.typ());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailCollectionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailCollectionReq::CopyFrom(const TEmailCollectionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailCollectionReq::IsInitialized() const {

  return true;
}

void TEmailCollectionReq::Swap(TEmailCollectionReq* other) {
  if (other != this) {
    std::swap(typ_, other->typ_);
    std::swap(eid_, other->eid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailCollectionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailCollectionReq_descriptor_;
  metadata.reflection = TEmailCollectionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailGetCollectionEmailReq::kEidFieldNumber;
const int TEmailGetCollectionEmailReq::kOffsetFieldNumber;
#endif  // !_MSC_VER

TEmailGetCollectionEmailReq::TEmailGetCollectionEmailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailGetCollectionEmailReq)
}

void TEmailGetCollectionEmailReq::InitAsDefaultInstance() {
}

TEmailGetCollectionEmailReq::TEmailGetCollectionEmailReq(const TEmailGetCollectionEmailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailGetCollectionEmailReq)
}

void TEmailGetCollectionEmailReq::SharedCtor() {
  _cached_size_ = 0;
  eid_ = 0u;
  offset_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailGetCollectionEmailReq::~TEmailGetCollectionEmailReq() {
  // @@protoc_insertion_point(destructor:pb.TEmailGetCollectionEmailReq)
  SharedDtor();
}

void TEmailGetCollectionEmailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailGetCollectionEmailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailGetCollectionEmailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailGetCollectionEmailReq_descriptor_;
}

const TEmailGetCollectionEmailReq& TEmailGetCollectionEmailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailGetCollectionEmailReq* TEmailGetCollectionEmailReq::default_instance_ = NULL;

TEmailGetCollectionEmailReq* TEmailGetCollectionEmailReq::New() const {
  return new TEmailGetCollectionEmailReq;
}

void TEmailGetCollectionEmailReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TEmailGetCollectionEmailReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(eid_, offset_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailGetCollectionEmailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailGetCollectionEmailReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 eid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional uint32 offset = 2;
      case 2: {
        if (tag == 16) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailGetCollectionEmailReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailGetCollectionEmailReq)
  return false;
#undef DO_
}

void TEmailGetCollectionEmailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailGetCollectionEmailReq)
  // optional uint32 eid = 1;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eid(), output);
  }

  // optional uint32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailGetCollectionEmailReq)
}

::google::protobuf::uint8* TEmailGetCollectionEmailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailGetCollectionEmailReq)
  // optional uint32 eid = 1;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eid(), target);
  }

  // optional uint32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailGetCollectionEmailReq)
  return target;
}

int TEmailGetCollectionEmailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 eid = 1;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

    // optional uint32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailGetCollectionEmailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailGetCollectionEmailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailGetCollectionEmailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailGetCollectionEmailReq::MergeFrom(const TEmailGetCollectionEmailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eid()) {
      set_eid(from.eid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailGetCollectionEmailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailGetCollectionEmailReq::CopyFrom(const TEmailGetCollectionEmailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailGetCollectionEmailReq::IsInitialized() const {

  return true;
}

void TEmailGetCollectionEmailReq::Swap(TEmailGetCollectionEmailReq* other) {
  if (other != this) {
    std::swap(eid_, other->eid_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailGetCollectionEmailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailGetCollectionEmailReq_descriptor_;
  metadata.reflection = TEmailGetCollectionEmailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailGetCollectionEmailRsp::kCollectArrFieldNumber;
#endif  // !_MSC_VER

TEmailGetCollectionEmailRsp::TEmailGetCollectionEmailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailGetCollectionEmailRsp)
}

void TEmailGetCollectionEmailRsp::InitAsDefaultInstance() {
}

TEmailGetCollectionEmailRsp::TEmailGetCollectionEmailRsp(const TEmailGetCollectionEmailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailGetCollectionEmailRsp)
}

void TEmailGetCollectionEmailRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailGetCollectionEmailRsp::~TEmailGetCollectionEmailRsp() {
  // @@protoc_insertion_point(destructor:pb.TEmailGetCollectionEmailRsp)
  SharedDtor();
}

void TEmailGetCollectionEmailRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailGetCollectionEmailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailGetCollectionEmailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailGetCollectionEmailRsp_descriptor_;
}

const TEmailGetCollectionEmailRsp& TEmailGetCollectionEmailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailGetCollectionEmailRsp* TEmailGetCollectionEmailRsp::default_instance_ = NULL;

TEmailGetCollectionEmailRsp* TEmailGetCollectionEmailRsp::New() const {
  return new TEmailGetCollectionEmailRsp;
}

void TEmailGetCollectionEmailRsp::Clear() {
  collectarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailGetCollectionEmailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailGetCollectionEmailRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TEmailSingle collectArr = 1;
      case 1: {
        if (tag == 10) {
         parse_collectArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_collectarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_collectArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailGetCollectionEmailRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailGetCollectionEmailRsp)
  return false;
#undef DO_
}

void TEmailGetCollectionEmailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailGetCollectionEmailRsp)
  // repeated .pb.TEmailSingle collectArr = 1;
  for (int i = 0; i < this->collectarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->collectarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailGetCollectionEmailRsp)
}

::google::protobuf::uint8* TEmailGetCollectionEmailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailGetCollectionEmailRsp)
  // repeated .pb.TEmailSingle collectArr = 1;
  for (int i = 0; i < this->collectarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->collectarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailGetCollectionEmailRsp)
  return target;
}

int TEmailGetCollectionEmailRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TEmailSingle collectArr = 1;
  total_size += 1 * this->collectarr_size();
  for (int i = 0; i < this->collectarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->collectarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailGetCollectionEmailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailGetCollectionEmailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailGetCollectionEmailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailGetCollectionEmailRsp::MergeFrom(const TEmailGetCollectionEmailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  collectarr_.MergeFrom(from.collectarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailGetCollectionEmailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailGetCollectionEmailRsp::CopyFrom(const TEmailGetCollectionEmailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailGetCollectionEmailRsp::IsInitialized() const {

  return true;
}

void TEmailGetCollectionEmailRsp::Swap(TEmailGetCollectionEmailRsp* other) {
  if (other != this) {
    collectarr_.Swap(&other->collectarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailGetCollectionEmailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailGetCollectionEmailRsp_descriptor_;
  metadata.reflection = TEmailGetCollectionEmailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailSendGuildEmailReq::kTitleFieldNumber;
const int TEmailSendGuildEmailReq::kContentFieldNumber;
const int TEmailSendGuildEmailReq::kUidArrFieldNumber;
#endif  // !_MSC_VER

TEmailSendGuildEmailReq::TEmailSendGuildEmailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailSendGuildEmailReq)
}

void TEmailSendGuildEmailReq::InitAsDefaultInstance() {
}

TEmailSendGuildEmailReq::TEmailSendGuildEmailReq(const TEmailSendGuildEmailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailSendGuildEmailReq)
}

void TEmailSendGuildEmailReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailSendGuildEmailReq::~TEmailSendGuildEmailReq() {
  // @@protoc_insertion_point(destructor:pb.TEmailSendGuildEmailReq)
  SharedDtor();
}

void TEmailSendGuildEmailReq::SharedDtor() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void TEmailSendGuildEmailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailSendGuildEmailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailSendGuildEmailReq_descriptor_;
}

const TEmailSendGuildEmailReq& TEmailSendGuildEmailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailSendGuildEmailReq* TEmailSendGuildEmailReq::default_instance_ = NULL;

TEmailSendGuildEmailReq* TEmailSendGuildEmailReq::New() const {
  return new TEmailSendGuildEmailReq;
}

void TEmailSendGuildEmailReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  uidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailSendGuildEmailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailSendGuildEmailReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Title = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Content;
        break;
      }

      // optional string Content = 2;
      case 2: {
        if (tag == 18) {
         parse_Content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UidArr;
        break;
      }

      // repeated uint64 UidArr = 3;
      case 3: {
        if (tag == 24) {
         parse_UidArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_uidarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_uidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UidArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailSendGuildEmailReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailSendGuildEmailReq)
  return false;
#undef DO_
}

void TEmailSendGuildEmailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailSendGuildEmailReq)
  // optional string Title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->title(), output);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->content(), output);
  }

  // repeated uint64 UidArr = 3;
  for (int i = 0; i < this->uidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->uidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailSendGuildEmailReq)
}

::google::protobuf::uint8* TEmailSendGuildEmailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailSendGuildEmailReq)
  // optional string Title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string Content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // repeated uint64 UidArr = 3;
  for (int i = 0; i < this->uidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->uidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailSendGuildEmailReq)
  return target;
}

int TEmailSendGuildEmailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string Content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated uint64 UidArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->uidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->uidarr(i));
    }
    total_size += 1 * this->uidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailSendGuildEmailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailSendGuildEmailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailSendGuildEmailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailSendGuildEmailReq::MergeFrom(const TEmailSendGuildEmailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  uidarr_.MergeFrom(from.uidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailSendGuildEmailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailSendGuildEmailReq::CopyFrom(const TEmailSendGuildEmailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailSendGuildEmailReq::IsInitialized() const {

  return true;
}

void TEmailSendGuildEmailReq::Swap(TEmailSendGuildEmailReq* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    uidarr_.Swap(&other->uidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailSendGuildEmailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailSendGuildEmailReq_descriptor_;
  metadata.reflection = TEmailSendGuildEmailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailGetEmailContentReq::kUidFieldNumber;
const int TEmailGetEmailContentReq::kEidFieldNumber;
#endif  // !_MSC_VER

TEmailGetEmailContentReq::TEmailGetEmailContentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailGetEmailContentReq)
}

void TEmailGetEmailContentReq::InitAsDefaultInstance() {
}

TEmailGetEmailContentReq::TEmailGetEmailContentReq(const TEmailGetEmailContentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailGetEmailContentReq)
}

void TEmailGetEmailContentReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  eid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailGetEmailContentReq::~TEmailGetEmailContentReq() {
  // @@protoc_insertion_point(destructor:pb.TEmailGetEmailContentReq)
  SharedDtor();
}

void TEmailGetEmailContentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TEmailGetEmailContentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailGetEmailContentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailGetEmailContentReq_descriptor_;
}

const TEmailGetEmailContentReq& TEmailGetEmailContentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailGetEmailContentReq* TEmailGetEmailContentReq::default_instance_ = NULL;

TEmailGetEmailContentReq* TEmailGetEmailContentReq::New() const {
  return new TEmailGetEmailContentReq;
}

void TEmailGetEmailContentReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TEmailGetEmailContentReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, eid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailGetEmailContentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailGetEmailContentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Eid;
        break;
      }

      // optional uint32 Eid = 2;
      case 2: {
        if (tag == 16) {
         parse_Eid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eid_)));
          set_has_eid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailGetEmailContentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailGetEmailContentReq)
  return false;
#undef DO_
}

void TEmailGetEmailContentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailGetEmailContentReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 Eid = 2;
  if (has_eid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->eid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailGetEmailContentReq)
}

::google::protobuf::uint8* TEmailGetEmailContentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailGetEmailContentReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 Eid = 2;
  if (has_eid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->eid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailGetEmailContentReq)
  return target;
}

int TEmailGetEmailContentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 Eid = 2;
    if (has_eid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailGetEmailContentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailGetEmailContentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailGetEmailContentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailGetEmailContentReq::MergeFrom(const TEmailGetEmailContentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_eid()) {
      set_eid(from.eid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailGetEmailContentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailGetEmailContentReq::CopyFrom(const TEmailGetEmailContentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailGetEmailContentReq::IsInitialized() const {

  return true;
}

void TEmailGetEmailContentReq::Swap(TEmailGetEmailContentReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(eid_, other->eid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailGetEmailContentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailGetEmailContentReq_descriptor_;
  metadata.reflection = TEmailGetEmailContentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TEmailGetEmailContentRsp::kContentFieldNumber;
#endif  // !_MSC_VER

TEmailGetEmailContentRsp::TEmailGetEmailContentRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TEmailGetEmailContentRsp)
}

void TEmailGetEmailContentRsp::InitAsDefaultInstance() {
}

TEmailGetEmailContentRsp::TEmailGetEmailContentRsp(const TEmailGetEmailContentRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TEmailGetEmailContentRsp)
}

void TEmailGetEmailContentRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TEmailGetEmailContentRsp::~TEmailGetEmailContentRsp() {
  // @@protoc_insertion_point(destructor:pb.TEmailGetEmailContentRsp)
  SharedDtor();
}

void TEmailGetEmailContentRsp::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void TEmailGetEmailContentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TEmailGetEmailContentRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TEmailGetEmailContentRsp_descriptor_;
}

const TEmailGetEmailContentRsp& TEmailGetEmailContentRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fEmail_2eproto();
  return *default_instance_;
}

TEmailGetEmailContentRsp* TEmailGetEmailContentRsp::default_instance_ = NULL;

TEmailGetEmailContentRsp* TEmailGetEmailContentRsp::New() const {
  return new TEmailGetEmailContentRsp;
}

void TEmailGetEmailContentRsp::Clear() {
  if (has_content()) {
    if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      content_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TEmailGetEmailContentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TEmailGetEmailContentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Content = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TEmailGetEmailContentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TEmailGetEmailContentRsp)
  return false;
#undef DO_
}

void TEmailGetEmailContentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TEmailGetEmailContentRsp)
  // optional string Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TEmailGetEmailContentRsp)
}

::google::protobuf::uint8* TEmailGetEmailContentRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TEmailGetEmailContentRsp)
  // optional string Content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TEmailGetEmailContentRsp)
  return target;
}

int TEmailGetEmailContentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TEmailGetEmailContentRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TEmailGetEmailContentRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TEmailGetEmailContentRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TEmailGetEmailContentRsp::MergeFrom(const TEmailGetEmailContentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TEmailGetEmailContentRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TEmailGetEmailContentRsp::CopyFrom(const TEmailGetEmailContentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEmailGetEmailContentRsp::IsInitialized() const {

  return true;
}

void TEmailGetEmailContentRsp::Swap(TEmailGetEmailContentRsp* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TEmailGetEmailContentRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TEmailGetEmailContentRsp_descriptor_;
  metadata.reflection = TEmailGetEmailContentRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
