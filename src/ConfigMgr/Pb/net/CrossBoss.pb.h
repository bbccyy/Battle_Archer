// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossBoss.proto

#ifndef PROTOBUF_net_2fCrossBoss_2eproto__INCLUDED
#define PROTOBUF_net_2fCrossBoss_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

class TBossInfo;
class TBossRecordInfo;
class TBossRankInfo;
class TBossPosInfo;
class TBossGetBaseInfoRsp;
class TBossGetMapInfoReq;
class TBossGetMapInfoRsp;
class TBossDoBattleReq;
class TBossDoBattleRsp;
class TBossBeginShowReq;
class TBossGetRankArrRep;
class TBossGetRankArrRsp;
class TBossLeaveBattleReq;
class TBossGetRecordRep;
class TBossGetRecordRsp;
class TBossBuyChallengeNumReq;
class TBossBuyChallengeNumRsp;
class TBossGetServerTeamInfoRsp;
class TBossGetMyFmtRsp;
class TBossSetMyFmtReq;
class TBossFirstAtkNotify;
class TBossFinalRankNotify;

enum EBossStatus {
  NOT_TRIGGERED = 1,
  IN_RESURRECTION = 2,
  BOSS_ACCEPTABLE = 3
};
bool EBossStatus_IsValid(int value);
const EBossStatus EBossStatus_MIN = NOT_TRIGGERED;
const EBossStatus EBossStatus_MAX = BOSS_ACCEPTABLE;
const int EBossStatus_ARRAYSIZE = EBossStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBossStatus_descriptor();
inline const ::std::string& EBossStatus_Name(EBossStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBossStatus_descriptor(), value);
}
inline bool EBossStatus_Parse(
    const ::std::string& name, EBossStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBossStatus>(
    EBossStatus_descriptor(), name, value);
}
enum EBossRecordType {
  Top = 1,
  Recent = 2
};
bool EBossRecordType_IsValid(int value);
const EBossRecordType EBossRecordType_MIN = Top;
const EBossRecordType EBossRecordType_MAX = Recent;
const int EBossRecordType_ARRAYSIZE = EBossRecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBossRecordType_descriptor();
inline const ::std::string& EBossRecordType_Name(EBossRecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBossRecordType_descriptor(), value);
}
inline bool EBossRecordType_Parse(
    const ::std::string& name, EBossRecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBossRecordType>(
    EBossRecordType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TBossInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossInfo : public ::google::protobuf::Message {
 public:
  TBossInfo();
  virtual ~TBossInfo();

  TBossInfo(const TBossInfo& from);

  inline TBossInfo& operator=(const TBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossInfo& default_instance();

  void Swap(TBossInfo* other);

  // implements Message ----------------------------------------------

  TBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossInfo& from);
  void MergeFrom(const TBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossInfo</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional .pb.EBossStatus Status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossInfo</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBossStatus status() const;
  inline void set_status(::pb::EBossStatus value);

  // optional uint64 KillTime = 3;
  inline bool has_killtime() const;
  inline void clear_killtime();
  static const int kKillTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBossInfo</name>
  	<Function>
  		<name>killtime</name>
  		<replaceName>KillTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_killtime</name>
  		<replaceName>KillTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_killtime</name>
  		<replaceName>KillTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 killtime() const;
  inline void set_killtime(::google::protobuf::uint64 value);

  // optional uint64 BeginTime = 4;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBossInfo</name>
  	<Function>
  		<name>begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begintime() const;
  inline void set_begintime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TBossInfo)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_killtime();
  inline void clear_has_killtime();
  inline void set_has_begintime();
  inline void clear_has_begintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  int status_;
  ::google::protobuf::uint64 killtime_;
  ::google::protobuf::uint64 begintime_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossRecordInfo : public ::google::protobuf::Message {
 public:
  TBossRecordInfo();
  virtual ~TBossRecordInfo();

  TBossRecordInfo(const TBossRecordInfo& from);

  inline TBossRecordInfo& operator=(const TBossRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossRecordInfo& default_instance();

  void Swap(TBossRecordInfo* other);

  // implements Message ----------------------------------------------

  TBossRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossRecordInfo& from);
  void MergeFrom(const TBossRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RecordId = 1;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossRecordInfo</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordid() const;
  inline void set_recordid(::google::protobuf::uint64 value);

  // optional uint64 RecordTime = 2;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossRecordInfo</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // optional uint64 TotalDamage = 3;
  inline bool has_totaldamage() const;
  inline void clear_totaldamage();
  static const int kTotalDamageFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBossRecordInfo</name>
  	<Function>
  		<name>totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totaldamage() const;
  inline void set_totaldamage(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBossRecordInfo</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo);

  // @@protoc_insertion_point(class_scope:pb.TBossRecordInfo)
 private:
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_totaldamage();
  inline void clear_has_totaldamage();
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 recordid_;
  ::google::protobuf::uint64 recordtime_;
  ::google::protobuf::uint64 totaldamage_;
  ::pb::TUserSimpleInfo* atkuserinfo_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossRankInfo : public ::google::protobuf::Message {
 public:
  TBossRankInfo();
  virtual ~TBossRankInfo();

  TBossRankInfo(const TBossRankInfo& from);

  inline TBossRankInfo& operator=(const TBossRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossRankInfo& default_instance();

  void Swap(TBossRankInfo* other);

  // implements Message ----------------------------------------------

  TBossRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossRankInfo& from);
  void MergeFrom(const TBossRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossRankInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint64 TotalDamage = 2;
  inline bool has_totaldamage() const;
  inline void clear_totaldamage();
  static const int kTotalDamageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossRankInfo</name>
  	<Function>
  		<name>totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totaldamage</name>
  		<replaceName>TotalDamage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 totaldamage() const;
  inline void set_totaldamage(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo SimpleInfo = 3;
  inline bool has_simpleinfo() const;
  inline void clear_simpleinfo();
  static const int kSimpleInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBossRankInfo</name>
  	<Function>
  		<name>simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_simpleinfo</name>
  		<replaceName>SimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& simpleinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_simpleinfo();
  inline ::pb::TUserSimpleInfo* release_simpleinfo();
  inline void set_allocated_simpleinfo(::pb::TUserSimpleInfo* simpleinfo);

  // @@protoc_insertion_point(class_scope:pb.TBossRankInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_totaldamage();
  inline void clear_has_totaldamage();
  inline void set_has_simpleinfo();
  inline void clear_has_simpleinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 totaldamage_;
  ::pb::TUserSimpleInfo* simpleinfo_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossPosInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossPosInfo : public ::google::protobuf::Message {
 public:
  TBossPosInfo();
  virtual ~TBossPosInfo();

  TBossPosInfo(const TBossPosInfo& from);

  inline TBossPosInfo& operator=(const TBossPosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossPosInfo& default_instance();

  void Swap(TBossPosInfo* other);

  // implements Message ----------------------------------------------

  TBossPosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossPosInfo& from);
  void MergeFrom(const TBossPosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossPosInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 Hid = 2;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossPosInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBossPosInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossPosInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossGetBaseInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossGetBaseInfoRsp : public ::google::protobuf::Message {
 public:
  TBossGetBaseInfoRsp();
  virtual ~TBossGetBaseInfoRsp();

  TBossGetBaseInfoRsp(const TBossGetBaseInfoRsp& from);

  inline TBossGetBaseInfoRsp& operator=(const TBossGetBaseInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossGetBaseInfoRsp& default_instance();

  void Swap(TBossGetBaseInfoRsp* other);

  // implements Message ----------------------------------------------

  TBossGetBaseInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossGetBaseInfoRsp& from);
  void MergeFrom(const TBossGetBaseInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string SceneId = 1;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossGetBaseInfoRsp</name>
  	<Function>
  		<name>sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& sceneid() const;
  inline void set_sceneid(const ::std::string& value);
  inline void set_sceneid(const char* value);
  inline void set_sceneid(const char* value, size_t size);
  inline ::std::string* mutable_sceneid();
  inline ::std::string* release_sceneid();
  inline void set_allocated_sceneid(::std::string* sceneid);

  // optional uint32 LeftChallengeNum = 2;
  inline bool has_leftchallengenum() const;
  inline void clear_leftchallengenum();
  static const int kLeftChallengeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossGetBaseInfoRsp</name>
  	<Function>
  		<name>leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 leftchallengenum() const;
  inline void set_leftchallengenum(::google::protobuf::uint32 value);

  // optional uint32 BuyChallengeNum = 3;
  inline bool has_buychallengenum() const;
  inline void clear_buychallengenum();
  static const int kBuyChallengeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBossGetBaseInfoRsp</name>
  	<Function>
  		<name>buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buychallengenum() const;
  inline void set_buychallengenum(::google::protobuf::uint32 value);

  // optional uint32 BossId = 4;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBossGetBaseInfoRsp</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBossGetBaseInfoRsp)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_leftchallengenum();
  inline void clear_has_leftchallengenum();
  inline void set_has_buychallengenum();
  inline void clear_has_buychallengenum();
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sceneid_;
  ::google::protobuf::uint32 leftchallengenum_;
  ::google::protobuf::uint32 buychallengenum_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossGetBaseInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossGetMapInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossGetMapInfoReq : public ::google::protobuf::Message {
 public:
  TBossGetMapInfoReq();
  virtual ~TBossGetMapInfoReq();

  TBossGetMapInfoReq(const TBossGetMapInfoReq& from);

  inline TBossGetMapInfoReq& operator=(const TBossGetMapInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossGetMapInfoReq& default_instance();

  void Swap(TBossGetMapInfoReq* other);

  // implements Message ----------------------------------------------

  TBossGetMapInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossGetMapInfoReq& from);
  void MergeFrom(const TBossGetMapInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossGetMapInfoReq</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBossGetMapInfoReq)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossGetMapInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossGetMapInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossGetMapInfoRsp : public ::google::protobuf::Message {
 public:
  TBossGetMapInfoRsp();
  virtual ~TBossGetMapInfoRsp();

  TBossGetMapInfoRsp(const TBossGetMapInfoRsp& from);

  inline TBossGetMapInfoRsp& operator=(const TBossGetMapInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossGetMapInfoRsp& default_instance();

  void Swap(TBossGetMapInfoRsp* other);

  // implements Message ----------------------------------------------

  TBossGetMapInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossGetMapInfoRsp& from);
  void MergeFrom(const TBossGetMapInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBossInfo BossInfo = 1;
  inline int bossinfo_size() const;
  inline void clear_bossinfo();
  static const int kBossInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossGetMapInfoRsp</name>
  	<Function>
  		<name>bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossinfo</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>bossinfo_size</name>
  		<replaceName>BossInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBossInfo& bossinfo(int index) const;
  inline ::pb::TBossInfo* mutable_bossinfo(int index);
  inline ::pb::TBossInfo* add_bossinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossInfo >&
      bossinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBossInfo >*
      mutable_bossinfo();

  // @@protoc_insertion_point(class_scope:pb.TBossGetMapInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBossInfo > bossinfo_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossGetMapInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossDoBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossDoBattleReq : public ::google::protobuf::Message {
 public:
  TBossDoBattleReq();
  virtual ~TBossDoBattleReq();

  TBossDoBattleReq(const TBossDoBattleReq& from);

  inline TBossDoBattleReq& operator=(const TBossDoBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossDoBattleReq& default_instance();

  void Swap(TBossDoBattleReq* other);

  // implements Message ----------------------------------------------

  TBossDoBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossDoBattleReq& from);
  void MergeFrom(const TBossDoBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossDoBattleReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossDoBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TBossDoBattleReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossDoBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossDoBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossDoBattleRsp : public ::google::protobuf::Message {
 public:
  TBossDoBattleRsp();
  virtual ~TBossDoBattleRsp();

  TBossDoBattleRsp(const TBossDoBattleRsp& from);

  inline TBossDoBattleRsp& operator=(const TBossDoBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossDoBattleRsp& default_instance();

  void Swap(TBossDoBattleRsp* other);

  // implements Message ----------------------------------------------

  TBossDoBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossDoBattleRsp& from);
  void MergeFrom(const TBossDoBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleResult BattleResult = 1;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossDoBattleRsp</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>BattleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleresult() const;
  inline ::pb::TBattleResult* mutable_battleresult();
  inline ::pb::TBattleResult* release_battleresult();
  inline void set_allocated_battleresult(::pb::TBattleResult* battleresult);

  // optional bool BattleValid = 2;
  inline bool has_battlevalid() const;
  inline void clear_battlevalid();
  static const int kBattleValidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossDoBattleRsp</name>
  	<Function>
  		<name>battlevalid</name>
  		<replaceName>BattleValid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlevalid</name>
  		<replaceName>BattleValid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlevalid</name>
  		<replaceName>BattleValid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool battlevalid() const;
  inline void set_battlevalid(bool value);

  // @@protoc_insertion_point(class_scope:pb.TBossDoBattleRsp)
 private:
  inline void set_has_battleresult();
  inline void clear_has_battleresult();
  inline void set_has_battlevalid();
  inline void clear_has_battlevalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleResult* battleresult_;
  bool battlevalid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossDoBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossBeginShowReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossBeginShowReq : public ::google::protobuf::Message {
 public:
  TBossBeginShowReq();
  virtual ~TBossBeginShowReq();

  TBossBeginShowReq(const TBossBeginShowReq& from);

  inline TBossBeginShowReq& operator=(const TBossBeginShowReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossBeginShowReq& default_instance();

  void Swap(TBossBeginShowReq* other);

  // implements Message ----------------------------------------------

  TBossBeginShowReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossBeginShowReq& from);
  void MergeFrom(const TBossBeginShowReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossBeginShowReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBossBeginShowReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossBeginShowReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossGetRankArrRep</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossGetRankArrRep : public ::google::protobuf::Message {
 public:
  TBossGetRankArrRep();
  virtual ~TBossGetRankArrRep();

  TBossGetRankArrRep(const TBossGetRankArrRep& from);

  inline TBossGetRankArrRep& operator=(const TBossGetRankArrRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossGetRankArrRep& default_instance();

  void Swap(TBossGetRankArrRep* other);

  // implements Message ----------------------------------------------

  TBossGetRankArrRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossGetRankArrRep& from);
  void MergeFrom(const TBossGetRankArrRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossGetRankArrRep</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBossGetRankArrRep)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossGetRankArrRep* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossGetRankArrRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossGetRankArrRsp : public ::google::protobuf::Message {
 public:
  TBossGetRankArrRsp();
  virtual ~TBossGetRankArrRsp();

  TBossGetRankArrRsp(const TBossGetRankArrRsp& from);

  inline TBossGetRankArrRsp& operator=(const TBossGetRankArrRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossGetRankArrRsp& default_instance();

  void Swap(TBossGetRankArrRsp* other);

  // implements Message ----------------------------------------------

  TBossGetRankArrRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossGetRankArrRsp& from);
  void MergeFrom(const TBossGetRankArrRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBossRankInfo UserRankArr = 1;
  inline int userrankarr_size() const;
  inline void clear_userrankarr();
  static const int kUserRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossGetRankArrRsp</name>
  	<Function>
  		<name>userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userrankarr_size</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBossRankInfo& userrankarr(int index) const;
  inline ::pb::TBossRankInfo* mutable_userrankarr(int index);
  inline ::pb::TBossRankInfo* add_userrankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossRankInfo >&
      userrankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBossRankInfo >*
      mutable_userrankarr();

  // optional .pb.TBossRankInfo SelfRank = 2;
  inline bool has_selfrank() const;
  inline void clear_selfrank();
  static const int kSelfRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossGetRankArrRsp</name>
  	<Function>
  		<name>selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBossRankInfo& selfrank() const;
  inline ::pb::TBossRankInfo* mutable_selfrank();
  inline ::pb::TBossRankInfo* release_selfrank();
  inline void set_allocated_selfrank(::pb::TBossRankInfo* selfrank);

  // @@protoc_insertion_point(class_scope:pb.TBossGetRankArrRsp)
 private:
  inline void set_has_selfrank();
  inline void clear_has_selfrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBossRankInfo > userrankarr_;
  ::pb::TBossRankInfo* selfrank_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossGetRankArrRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossLeaveBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossLeaveBattleReq : public ::google::protobuf::Message {
 public:
  TBossLeaveBattleReq();
  virtual ~TBossLeaveBattleReq();

  TBossLeaveBattleReq(const TBossLeaveBattleReq& from);

  inline TBossLeaveBattleReq& operator=(const TBossLeaveBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossLeaveBattleReq& default_instance();

  void Swap(TBossLeaveBattleReq* other);

  // implements Message ----------------------------------------------

  TBossLeaveBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossLeaveBattleReq& from);
  void MergeFrom(const TBossLeaveBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossLeaveBattleReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBossLeaveBattleReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossLeaveBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossGetRecordRep</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossGetRecordRep : public ::google::protobuf::Message {
 public:
  TBossGetRecordRep();
  virtual ~TBossGetRecordRep();

  TBossGetRecordRep(const TBossGetRecordRep& from);

  inline TBossGetRecordRep& operator=(const TBossGetRecordRep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossGetRecordRep& default_instance();

  void Swap(TBossGetRecordRep* other);

  // implements Message ----------------------------------------------

  TBossGetRecordRep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossGetRecordRep& from);
  void MergeFrom(const TBossGetRecordRep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossGetRecordRep</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional .pb.EBossRecordType RecordType = 2;
  inline bool has_recordtype() const;
  inline void clear_recordtype();
  static const int kRecordTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossGetRecordRep</name>
  	<Function>
  		<name>recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBossRecordType recordtype() const;
  inline void set_recordtype(::pb::EBossRecordType value);

  // @@protoc_insertion_point(class_scope:pb.TBossGetRecordRep)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_recordtype();
  inline void clear_has_recordtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 bossid_;
  int recordtype_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossGetRecordRep* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossGetRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossGetRecordRsp : public ::google::protobuf::Message {
 public:
  TBossGetRecordRsp();
  virtual ~TBossGetRecordRsp();

  TBossGetRecordRsp(const TBossGetRecordRsp& from);

  inline TBossGetRecordRsp& operator=(const TBossGetRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossGetRecordRsp& default_instance();

  void Swap(TBossGetRecordRsp* other);

  // implements Message ----------------------------------------------

  TBossGetRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossGetRecordRsp& from);
  void MergeFrom(const TBossGetRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBossRecordInfo RecordRank = 1;
  inline int recordrank_size() const;
  inline void clear_recordrank();
  static const int kRecordRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossGetRecordRsp</name>
  	<Function>
  		<name>recordrank</name>
  		<replaceName>RecordRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordrank</name>
  		<replaceName>RecordRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordrank</name>
  		<replaceName>RecordRank</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordrank</name>
  		<replaceName>RecordRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordrank_size</name>
  		<replaceName>RecordRank</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBossRecordInfo& recordrank(int index) const;
  inline ::pb::TBossRecordInfo* mutable_recordrank(int index);
  inline ::pb::TBossRecordInfo* add_recordrank();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossRecordInfo >&
      recordrank() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBossRecordInfo >*
      mutable_recordrank();

  // optional bool Valid = 2;
  inline bool has_valid() const;
  inline void clear_valid();
  static const int kValidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossGetRecordRsp</name>
  	<Function>
  		<name>valid</name>
  		<replaceName>Valid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_valid</name>
  		<replaceName>Valid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_valid</name>
  		<replaceName>Valid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool valid() const;
  inline void set_valid(bool value);

  // @@protoc_insertion_point(class_scope:pb.TBossGetRecordRsp)
 private:
  inline void set_has_valid();
  inline void clear_has_valid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBossRecordInfo > recordrank_;
  bool valid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossGetRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossBuyChallengeNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossBuyChallengeNumReq : public ::google::protobuf::Message {
 public:
  TBossBuyChallengeNumReq();
  virtual ~TBossBuyChallengeNumReq();

  TBossBuyChallengeNumReq(const TBossBuyChallengeNumReq& from);

  inline TBossBuyChallengeNumReq& operator=(const TBossBuyChallengeNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossBuyChallengeNumReq& default_instance();

  void Swap(TBossBuyChallengeNumReq* other);

  // implements Message ----------------------------------------------

  TBossBuyChallengeNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossBuyChallengeNumReq& from);
  void MergeFrom(const TBossBuyChallengeNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossBuyChallengeNumReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBossBuyChallengeNumReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossBuyChallengeNumReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossBuyChallengeNumRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossBuyChallengeNumRsp : public ::google::protobuf::Message {
 public:
  TBossBuyChallengeNumRsp();
  virtual ~TBossBuyChallengeNumRsp();

  TBossBuyChallengeNumRsp(const TBossBuyChallengeNumRsp& from);

  inline TBossBuyChallengeNumRsp& operator=(const TBossBuyChallengeNumRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossBuyChallengeNumRsp& default_instance();

  void Swap(TBossBuyChallengeNumRsp* other);

  // implements Message ----------------------------------------------

  TBossBuyChallengeNumRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossBuyChallengeNumRsp& from);
  void MergeFrom(const TBossBuyChallengeNumRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LeftChallengeNum = 1;
  inline bool has_leftchallengenum() const;
  inline void clear_leftchallengenum();
  static const int kLeftChallengeNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossBuyChallengeNumRsp</name>
  	<Function>
  		<name>leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 leftchallengenum() const;
  inline void set_leftchallengenum(::google::protobuf::uint32 value);

  // optional uint32 BuyChallengeNum = 2;
  inline bool has_buychallengenum() const;
  inline void clear_buychallengenum();
  static const int kBuyChallengeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossBuyChallengeNumRsp</name>
  	<Function>
  		<name>buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buychallengenum() const;
  inline void set_buychallengenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBossBuyChallengeNumRsp)
 private:
  inline void set_has_leftchallengenum();
  inline void clear_has_leftchallengenum();
  inline void set_has_buychallengenum();
  inline void clear_has_buychallengenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 leftchallengenum_;
  ::google::protobuf::uint32 buychallengenum_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossBuyChallengeNumRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossGetServerTeamInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossGetServerTeamInfoRsp : public ::google::protobuf::Message {
 public:
  TBossGetServerTeamInfoRsp();
  virtual ~TBossGetServerTeamInfoRsp();

  TBossGetServerTeamInfoRsp(const TBossGetServerTeamInfoRsp& from);

  inline TBossGetServerTeamInfoRsp& operator=(const TBossGetServerTeamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossGetServerTeamInfoRsp& default_instance();

  void Swap(TBossGetServerTeamInfoRsp* other);

  // implements Message ----------------------------------------------

  TBossGetServerTeamInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossGetServerTeamInfoRsp& from);
  void MergeFrom(const TBossGetServerTeamInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ServerTeamId = 1;
  inline bool has_serverteamid() const;
  inline void clear_serverteamid();
  static const int kServerTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossGetServerTeamInfoRsp</name>
  	<Function>
  		<name>serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 serverteamid() const;
  inline void set_serverteamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBossGetServerTeamInfoRsp)
 private:
  inline void set_has_serverteamid();
  inline void clear_has_serverteamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serverteamid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossGetServerTeamInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossGetMyFmtRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossGetMyFmtRsp : public ::google::protobuf::Message {
 public:
  TBossGetMyFmtRsp();
  virtual ~TBossGetMyFmtRsp();

  TBossGetMyFmtRsp(const TBossGetMyFmtRsp& from);

  inline TBossGetMyFmtRsp& operator=(const TBossGetMyFmtRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossGetMyFmtRsp& default_instance();

  void Swap(TBossGetMyFmtRsp* other);

  // implements Message ----------------------------------------------

  TBossGetMyFmtRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossGetMyFmtRsp& from);
  void MergeFrom(const TBossGetMyFmtRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBossPosInfo ArrPos = 1;
  inline int arrpos_size() const;
  inline void clear_arrpos();
  static const int kArrPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossGetMyFmtRsp</name>
  	<Function>
  		<name>arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrpos_size</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBossPosInfo& arrpos(int index) const;
  inline ::pb::TBossPosInfo* mutable_arrpos(int index);
  inline ::pb::TBossPosInfo* add_arrpos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossPosInfo >&
      arrpos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBossPosInfo >*
      mutable_arrpos();

  // @@protoc_insertion_point(class_scope:pb.TBossGetMyFmtRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBossPosInfo > arrpos_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossGetMyFmtRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossSetMyFmtReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossSetMyFmtReq : public ::google::protobuf::Message {
 public:
  TBossSetMyFmtReq();
  virtual ~TBossSetMyFmtReq();

  TBossSetMyFmtReq(const TBossSetMyFmtReq& from);

  inline TBossSetMyFmtReq& operator=(const TBossSetMyFmtReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossSetMyFmtReq& default_instance();

  void Swap(TBossSetMyFmtReq* other);

  // implements Message ----------------------------------------------

  TBossSetMyFmtReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossSetMyFmtReq& from);
  void MergeFrom(const TBossSetMyFmtReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBossPosInfo ArrPos = 1;
  inline int arrpos_size() const;
  inline void clear_arrpos();
  static const int kArrPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossSetMyFmtReq</name>
  	<Function>
  		<name>arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrpos_size</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBossPosInfo& arrpos(int index) const;
  inline ::pb::TBossPosInfo* mutable_arrpos(int index);
  inline ::pb::TBossPosInfo* add_arrpos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossPosInfo >&
      arrpos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBossPosInfo >*
      mutable_arrpos();

  // @@protoc_insertion_point(class_scope:pb.TBossSetMyFmtReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBossPosInfo > arrpos_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossSetMyFmtReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossFirstAtkNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossFirstAtkNotify : public ::google::protobuf::Message {
 public:
  TBossFirstAtkNotify();
  virtual ~TBossFirstAtkNotify();

  TBossFirstAtkNotify(const TBossFirstAtkNotify& from);

  inline TBossFirstAtkNotify& operator=(const TBossFirstAtkNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossFirstAtkNotify& default_instance();

  void Swap(TBossFirstAtkNotify* other);

  // implements Message ----------------------------------------------

  TBossFirstAtkNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossFirstAtkNotify& from);
  void MergeFrom(const TBossFirstAtkNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossFirstAtkNotify</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint64 BeginTime = 2;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossFirstAtkNotify</name>
  	<Function>
  		<name>begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begintime</name>
  		<replaceName>BeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begintime() const;
  inline void set_begintime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TBossFirstAtkNotify)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_begintime();
  inline void clear_has_begintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 begintime_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossFirstAtkNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBossFinalRankNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossBoss.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBossFinalRankNotify : public ::google::protobuf::Message {
 public:
  TBossFinalRankNotify();
  virtual ~TBossFinalRankNotify();

  TBossFinalRankNotify(const TBossFinalRankNotify& from);

  inline TBossFinalRankNotify& operator=(const TBossFinalRankNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBossFinalRankNotify& default_instance();

  void Swap(TBossFinalRankNotify* other);

  // implements Message ----------------------------------------------

  TBossFinalRankNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBossFinalRankNotify& from);
  void MergeFrom(const TBossFinalRankNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBossFinalRankNotify</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional .pb.TBossRankInfo SelfRank = 2;
  inline bool has_selfrank() const;
  inline void clear_selfrank();
  static const int kSelfRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBossFinalRankNotify</name>
  	<Function>
  		<name>selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_selfrank</name>
  		<replaceName>SelfRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBossRankInfo& selfrank() const;
  inline ::pb::TBossRankInfo* mutable_selfrank();
  inline ::pb::TBossRankInfo* release_selfrank();
  inline void set_allocated_selfrank(::pb::TBossRankInfo* selfrank);

  // repeated .pb.TCommonReward RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBossFinalRankNotify</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // repeated .pb.TBossRankInfo UserRankArr = 4;
  inline int userrankarr_size() const;
  inline void clear_userrankarr();
  static const int kUserRankArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBossFinalRankNotify</name>
  	<Function>
  		<name>userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userrankarr</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userrankarr_size</name>
  		<replaceName>UserRankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBossRankInfo& userrankarr(int index) const;
  inline ::pb::TBossRankInfo* mutable_userrankarr(int index);
  inline ::pb::TBossRankInfo* add_userrankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossRankInfo >&
      userrankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBossRankInfo >*
      mutable_userrankarr();

  // @@protoc_insertion_point(class_scope:pb.TBossFinalRankNotify)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_selfrank();
  inline void clear_has_selfrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBossRankInfo* selfrank_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBossRankInfo > userrankarr_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossBoss_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossBoss_2eproto();

  void InitAsDefaultInstance();
  static TBossFinalRankNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TBossInfo

// optional uint32 BossId = 1;
inline bool TBossInfo::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossInfo::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossInfo::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossInfo::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBossInfo::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBossInfo.BossId)
  return bossid_;
}
inline void TBossInfo::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossInfo.BossId)
}

// optional .pb.EBossStatus Status = 2;
inline bool TBossInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossInfo::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::pb::EBossStatus TBossInfo::status() const {
  // @@protoc_insertion_point(field_get:pb.TBossInfo.Status)
  return static_cast< ::pb::EBossStatus >(status_);
}
inline void TBossInfo::set_status(::pb::EBossStatus value) {
  assert(::pb::EBossStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossInfo.Status)
}

// optional uint64 KillTime = 3;
inline bool TBossInfo::has_killtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBossInfo::set_has_killtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBossInfo::clear_has_killtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBossInfo::clear_killtime() {
  killtime_ = GOOGLE_ULONGLONG(0);
  clear_has_killtime();
}
inline ::google::protobuf::uint64 TBossInfo::killtime() const {
  // @@protoc_insertion_point(field_get:pb.TBossInfo.KillTime)
  return killtime_;
}
inline void TBossInfo::set_killtime(::google::protobuf::uint64 value) {
  set_has_killtime();
  killtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossInfo.KillTime)
}

// optional uint64 BeginTime = 4;
inline bool TBossInfo::has_begintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBossInfo::set_has_begintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBossInfo::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBossInfo::clear_begintime() {
  begintime_ = GOOGLE_ULONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::uint64 TBossInfo::begintime() const {
  // @@protoc_insertion_point(field_get:pb.TBossInfo.BeginTime)
  return begintime_;
}
inline void TBossInfo::set_begintime(::google::protobuf::uint64 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossInfo.BeginTime)
}

// -------------------------------------------------------------------

// TBossRecordInfo

// optional uint64 RecordId = 1;
inline bool TBossRecordInfo::has_recordid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossRecordInfo::set_has_recordid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossRecordInfo::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossRecordInfo::clear_recordid() {
  recordid_ = GOOGLE_ULONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::uint64 TBossRecordInfo::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TBossRecordInfo.RecordId)
  return recordid_;
}
inline void TBossRecordInfo::set_recordid(::google::protobuf::uint64 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossRecordInfo.RecordId)
}

// optional uint64 RecordTime = 2;
inline bool TBossRecordInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossRecordInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossRecordInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossRecordInfo::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TBossRecordInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TBossRecordInfo.RecordTime)
  return recordtime_;
}
inline void TBossRecordInfo::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossRecordInfo.RecordTime)
}

// optional uint64 TotalDamage = 3;
inline bool TBossRecordInfo::has_totaldamage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBossRecordInfo::set_has_totaldamage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBossRecordInfo::clear_has_totaldamage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBossRecordInfo::clear_totaldamage() {
  totaldamage_ = GOOGLE_ULONGLONG(0);
  clear_has_totaldamage();
}
inline ::google::protobuf::uint64 TBossRecordInfo::totaldamage() const {
  // @@protoc_insertion_point(field_get:pb.TBossRecordInfo.TotalDamage)
  return totaldamage_;
}
inline void TBossRecordInfo::set_totaldamage(::google::protobuf::uint64 value) {
  set_has_totaldamage();
  totaldamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossRecordInfo.TotalDamage)
}

// optional .pb.TUserSimpleInfo AtkUserInfo = 4;
inline bool TBossRecordInfo::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBossRecordInfo::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBossRecordInfo::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBossRecordInfo::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfo& TBossRecordInfo::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBossRecordInfo.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TBossRecordInfo::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBossRecordInfo.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TBossRecordInfo::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TBossRecordInfo::set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBossRecordInfo.AtkUserInfo)
}

// -------------------------------------------------------------------

// TBossRankInfo

// optional uint32 Rank = 1;
inline bool TBossRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossRankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TBossRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TBossRankInfo.Rank)
  return rank_;
}
inline void TBossRankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossRankInfo.Rank)
}

// optional uint64 TotalDamage = 2;
inline bool TBossRankInfo::has_totaldamage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossRankInfo::set_has_totaldamage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossRankInfo::clear_has_totaldamage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossRankInfo::clear_totaldamage() {
  totaldamage_ = GOOGLE_ULONGLONG(0);
  clear_has_totaldamage();
}
inline ::google::protobuf::uint64 TBossRankInfo::totaldamage() const {
  // @@protoc_insertion_point(field_get:pb.TBossRankInfo.TotalDamage)
  return totaldamage_;
}
inline void TBossRankInfo::set_totaldamage(::google::protobuf::uint64 value) {
  set_has_totaldamage();
  totaldamage_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossRankInfo.TotalDamage)
}

// optional .pb.TUserSimpleInfo SimpleInfo = 3;
inline bool TBossRankInfo::has_simpleinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBossRankInfo::set_has_simpleinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBossRankInfo::clear_has_simpleinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBossRankInfo::clear_simpleinfo() {
  if (simpleinfo_ != NULL) simpleinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_simpleinfo();
}
inline const ::pb::TUserSimpleInfo& TBossRankInfo::simpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBossRankInfo.SimpleInfo)
  return simpleinfo_ != NULL ? *simpleinfo_ : *default_instance_->simpleinfo_;
}
inline ::pb::TUserSimpleInfo* TBossRankInfo::mutable_simpleinfo() {
  set_has_simpleinfo();
  if (simpleinfo_ == NULL) simpleinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBossRankInfo.SimpleInfo)
  return simpleinfo_;
}
inline ::pb::TUserSimpleInfo* TBossRankInfo::release_simpleinfo() {
  clear_has_simpleinfo();
  ::pb::TUserSimpleInfo* temp = simpleinfo_;
  simpleinfo_ = NULL;
  return temp;
}
inline void TBossRankInfo::set_allocated_simpleinfo(::pb::TUserSimpleInfo* simpleinfo) {
  delete simpleinfo_;
  simpleinfo_ = simpleinfo;
  if (simpleinfo) {
    set_has_simpleinfo();
  } else {
    clear_has_simpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBossRankInfo.SimpleInfo)
}

// -------------------------------------------------------------------

// TBossPosInfo

// optional uint32 Pos = 1;
inline bool TBossPosInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossPosInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossPosInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossPosInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TBossPosInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TBossPosInfo.Pos)
  return pos_;
}
inline void TBossPosInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossPosInfo.Pos)
}

// optional uint32 Hid = 2;
inline bool TBossPosInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossPosInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossPosInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossPosInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TBossPosInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TBossPosInfo.Hid)
  return hid_;
}
inline void TBossPosInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossPosInfo.Hid)
}

// -------------------------------------------------------------------

// TBossGetBaseInfoRsp

// optional string SceneId = 1;
inline bool TBossGetBaseInfoRsp::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossGetBaseInfoRsp::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossGetBaseInfoRsp::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossGetBaseInfoRsp::clear_sceneid() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_->clear();
  }
  clear_has_sceneid();
}
inline const ::std::string& TBossGetBaseInfoRsp::sceneid() const {
  // @@protoc_insertion_point(field_get:pb.TBossGetBaseInfoRsp.SceneId)
  return *sceneid_;
}
inline void TBossGetBaseInfoRsp::set_sceneid(const ::std::string& value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBossGetBaseInfoRsp.SceneId)
}
inline void TBossGetBaseInfoRsp::set_sceneid(const char* value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBossGetBaseInfoRsp.SceneId)
}
inline void TBossGetBaseInfoRsp::set_sceneid(const char* value, size_t size) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBossGetBaseInfoRsp.SceneId)
}
inline ::std::string* TBossGetBaseInfoRsp::mutable_sceneid() {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBossGetBaseInfoRsp.SceneId)
  return sceneid_;
}
inline ::std::string* TBossGetBaseInfoRsp::release_sceneid() {
  clear_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sceneid_;
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBossGetBaseInfoRsp::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (sceneid) {
    set_has_sceneid();
    sceneid_ = sceneid;
  } else {
    clear_has_sceneid();
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBossGetBaseInfoRsp.SceneId)
}

// optional uint32 LeftChallengeNum = 2;
inline bool TBossGetBaseInfoRsp::has_leftchallengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossGetBaseInfoRsp::set_has_leftchallengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossGetBaseInfoRsp::clear_has_leftchallengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossGetBaseInfoRsp::clear_leftchallengenum() {
  leftchallengenum_ = 0u;
  clear_has_leftchallengenum();
}
inline ::google::protobuf::uint32 TBossGetBaseInfoRsp::leftchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBossGetBaseInfoRsp.LeftChallengeNum)
  return leftchallengenum_;
}
inline void TBossGetBaseInfoRsp::set_leftchallengenum(::google::protobuf::uint32 value) {
  set_has_leftchallengenum();
  leftchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossGetBaseInfoRsp.LeftChallengeNum)
}

// optional uint32 BuyChallengeNum = 3;
inline bool TBossGetBaseInfoRsp::has_buychallengenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBossGetBaseInfoRsp::set_has_buychallengenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBossGetBaseInfoRsp::clear_has_buychallengenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBossGetBaseInfoRsp::clear_buychallengenum() {
  buychallengenum_ = 0u;
  clear_has_buychallengenum();
}
inline ::google::protobuf::uint32 TBossGetBaseInfoRsp::buychallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBossGetBaseInfoRsp.BuyChallengeNum)
  return buychallengenum_;
}
inline void TBossGetBaseInfoRsp::set_buychallengenum(::google::protobuf::uint32 value) {
  set_has_buychallengenum();
  buychallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossGetBaseInfoRsp.BuyChallengeNum)
}

// optional uint32 BossId = 4;
inline bool TBossGetBaseInfoRsp::has_bossid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBossGetBaseInfoRsp::set_has_bossid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBossGetBaseInfoRsp::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBossGetBaseInfoRsp::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBossGetBaseInfoRsp::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBossGetBaseInfoRsp.BossId)
  return bossid_;
}
inline void TBossGetBaseInfoRsp::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossGetBaseInfoRsp.BossId)
}

// -------------------------------------------------------------------

// TBossGetMapInfoReq

// optional uint32 MapId = 1;
inline bool TBossGetMapInfoReq::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossGetMapInfoReq::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossGetMapInfoReq::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossGetMapInfoReq::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TBossGetMapInfoReq::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TBossGetMapInfoReq.MapId)
  return mapid_;
}
inline void TBossGetMapInfoReq::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossGetMapInfoReq.MapId)
}

// -------------------------------------------------------------------

// TBossGetMapInfoRsp

// repeated .pb.TBossInfo BossInfo = 1;
inline int TBossGetMapInfoRsp::bossinfo_size() const {
  return bossinfo_.size();
}
inline void TBossGetMapInfoRsp::clear_bossinfo() {
  bossinfo_.Clear();
}
inline const ::pb::TBossInfo& TBossGetMapInfoRsp::bossinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBossGetMapInfoRsp.BossInfo)
  return bossinfo_.Get(index);
}
inline ::pb::TBossInfo* TBossGetMapInfoRsp::mutable_bossinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBossGetMapInfoRsp.BossInfo)
  return bossinfo_.Mutable(index);
}
inline ::pb::TBossInfo* TBossGetMapInfoRsp::add_bossinfo() {
  // @@protoc_insertion_point(field_add:pb.TBossGetMapInfoRsp.BossInfo)
  return bossinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossInfo >&
TBossGetMapInfoRsp::bossinfo() const {
  // @@protoc_insertion_point(field_list:pb.TBossGetMapInfoRsp.BossInfo)
  return bossinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBossInfo >*
TBossGetMapInfoRsp::mutable_bossinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBossGetMapInfoRsp.BossInfo)
  return &bossinfo_;
}

// -------------------------------------------------------------------

// TBossDoBattleReq

// optional uint32 BossId = 1;
inline bool TBossDoBattleReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossDoBattleReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossDoBattleReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossDoBattleReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBossDoBattleReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBossDoBattleReq.BossId)
  return bossid_;
}
inline void TBossDoBattleReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossDoBattleReq.BossId)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TBossDoBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossDoBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossDoBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossDoBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TBossDoBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TBossDoBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TBossDoBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TBossDoBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TBossDoBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TBossDoBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBossDoBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TBossDoBattleRsp

// optional .pb.TBattleResult BattleResult = 1;
inline bool TBossDoBattleRsp::has_battleresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossDoBattleRsp::set_has_battleresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossDoBattleRsp::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossDoBattleRsp::clear_battleresult() {
  if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
  clear_has_battleresult();
}
inline const ::pb::TBattleResult& TBossDoBattleRsp::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TBossDoBattleRsp.BattleResult)
  return battleresult_ != NULL ? *battleresult_ : *default_instance_->battleresult_;
}
inline ::pb::TBattleResult* TBossDoBattleRsp::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == NULL) battleresult_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TBossDoBattleRsp.BattleResult)
  return battleresult_;
}
inline ::pb::TBattleResult* TBossDoBattleRsp::release_battleresult() {
  clear_has_battleresult();
  ::pb::TBattleResult* temp = battleresult_;
  battleresult_ = NULL;
  return temp;
}
inline void TBossDoBattleRsp::set_allocated_battleresult(::pb::TBattleResult* battleresult) {
  delete battleresult_;
  battleresult_ = battleresult;
  if (battleresult) {
    set_has_battleresult();
  } else {
    clear_has_battleresult();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBossDoBattleRsp.BattleResult)
}

// optional bool BattleValid = 2;
inline bool TBossDoBattleRsp::has_battlevalid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossDoBattleRsp::set_has_battlevalid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossDoBattleRsp::clear_has_battlevalid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossDoBattleRsp::clear_battlevalid() {
  battlevalid_ = false;
  clear_has_battlevalid();
}
inline bool TBossDoBattleRsp::battlevalid() const {
  // @@protoc_insertion_point(field_get:pb.TBossDoBattleRsp.BattleValid)
  return battlevalid_;
}
inline void TBossDoBattleRsp::set_battlevalid(bool value) {
  set_has_battlevalid();
  battlevalid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossDoBattleRsp.BattleValid)
}

// -------------------------------------------------------------------

// TBossBeginShowReq

// optional uint32 BossId = 1;
inline bool TBossBeginShowReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossBeginShowReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossBeginShowReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossBeginShowReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBossBeginShowReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBossBeginShowReq.BossId)
  return bossid_;
}
inline void TBossBeginShowReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossBeginShowReq.BossId)
}

// -------------------------------------------------------------------

// TBossGetRankArrRep

// optional uint32 BossId = 1;
inline bool TBossGetRankArrRep::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossGetRankArrRep::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossGetRankArrRep::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossGetRankArrRep::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBossGetRankArrRep::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBossGetRankArrRep.BossId)
  return bossid_;
}
inline void TBossGetRankArrRep::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossGetRankArrRep.BossId)
}

// -------------------------------------------------------------------

// TBossGetRankArrRsp

// repeated .pb.TBossRankInfo UserRankArr = 1;
inline int TBossGetRankArrRsp::userrankarr_size() const {
  return userrankarr_.size();
}
inline void TBossGetRankArrRsp::clear_userrankarr() {
  userrankarr_.Clear();
}
inline const ::pb::TBossRankInfo& TBossGetRankArrRsp::userrankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBossGetRankArrRsp.UserRankArr)
  return userrankarr_.Get(index);
}
inline ::pb::TBossRankInfo* TBossGetRankArrRsp::mutable_userrankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBossGetRankArrRsp.UserRankArr)
  return userrankarr_.Mutable(index);
}
inline ::pb::TBossRankInfo* TBossGetRankArrRsp::add_userrankarr() {
  // @@protoc_insertion_point(field_add:pb.TBossGetRankArrRsp.UserRankArr)
  return userrankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossRankInfo >&
TBossGetRankArrRsp::userrankarr() const {
  // @@protoc_insertion_point(field_list:pb.TBossGetRankArrRsp.UserRankArr)
  return userrankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBossRankInfo >*
TBossGetRankArrRsp::mutable_userrankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBossGetRankArrRsp.UserRankArr)
  return &userrankarr_;
}

// optional .pb.TBossRankInfo SelfRank = 2;
inline bool TBossGetRankArrRsp::has_selfrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossGetRankArrRsp::set_has_selfrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossGetRankArrRsp::clear_has_selfrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossGetRankArrRsp::clear_selfrank() {
  if (selfrank_ != NULL) selfrank_->::pb::TBossRankInfo::Clear();
  clear_has_selfrank();
}
inline const ::pb::TBossRankInfo& TBossGetRankArrRsp::selfrank() const {
  // @@protoc_insertion_point(field_get:pb.TBossGetRankArrRsp.SelfRank)
  return selfrank_ != NULL ? *selfrank_ : *default_instance_->selfrank_;
}
inline ::pb::TBossRankInfo* TBossGetRankArrRsp::mutable_selfrank() {
  set_has_selfrank();
  if (selfrank_ == NULL) selfrank_ = new ::pb::TBossRankInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBossGetRankArrRsp.SelfRank)
  return selfrank_;
}
inline ::pb::TBossRankInfo* TBossGetRankArrRsp::release_selfrank() {
  clear_has_selfrank();
  ::pb::TBossRankInfo* temp = selfrank_;
  selfrank_ = NULL;
  return temp;
}
inline void TBossGetRankArrRsp::set_allocated_selfrank(::pb::TBossRankInfo* selfrank) {
  delete selfrank_;
  selfrank_ = selfrank;
  if (selfrank) {
    set_has_selfrank();
  } else {
    clear_has_selfrank();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBossGetRankArrRsp.SelfRank)
}

// -------------------------------------------------------------------

// TBossLeaveBattleReq

// optional uint32 BossId = 1;
inline bool TBossLeaveBattleReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossLeaveBattleReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossLeaveBattleReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossLeaveBattleReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBossLeaveBattleReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBossLeaveBattleReq.BossId)
  return bossid_;
}
inline void TBossLeaveBattleReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossLeaveBattleReq.BossId)
}

// -------------------------------------------------------------------

// TBossGetRecordRep

// optional uint32 BossId = 1;
inline bool TBossGetRecordRep::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossGetRecordRep::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossGetRecordRep::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossGetRecordRep::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBossGetRecordRep::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBossGetRecordRep.BossId)
  return bossid_;
}
inline void TBossGetRecordRep::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossGetRecordRep.BossId)
}

// optional .pb.EBossRecordType RecordType = 2;
inline bool TBossGetRecordRep::has_recordtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossGetRecordRep::set_has_recordtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossGetRecordRep::clear_has_recordtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossGetRecordRep::clear_recordtype() {
  recordtype_ = 1;
  clear_has_recordtype();
}
inline ::pb::EBossRecordType TBossGetRecordRep::recordtype() const {
  // @@protoc_insertion_point(field_get:pb.TBossGetRecordRep.RecordType)
  return static_cast< ::pb::EBossRecordType >(recordtype_);
}
inline void TBossGetRecordRep::set_recordtype(::pb::EBossRecordType value) {
  assert(::pb::EBossRecordType_IsValid(value));
  set_has_recordtype();
  recordtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossGetRecordRep.RecordType)
}

// -------------------------------------------------------------------

// TBossGetRecordRsp

// repeated .pb.TBossRecordInfo RecordRank = 1;
inline int TBossGetRecordRsp::recordrank_size() const {
  return recordrank_.size();
}
inline void TBossGetRecordRsp::clear_recordrank() {
  recordrank_.Clear();
}
inline const ::pb::TBossRecordInfo& TBossGetRecordRsp::recordrank(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBossGetRecordRsp.RecordRank)
  return recordrank_.Get(index);
}
inline ::pb::TBossRecordInfo* TBossGetRecordRsp::mutable_recordrank(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBossGetRecordRsp.RecordRank)
  return recordrank_.Mutable(index);
}
inline ::pb::TBossRecordInfo* TBossGetRecordRsp::add_recordrank() {
  // @@protoc_insertion_point(field_add:pb.TBossGetRecordRsp.RecordRank)
  return recordrank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossRecordInfo >&
TBossGetRecordRsp::recordrank() const {
  // @@protoc_insertion_point(field_list:pb.TBossGetRecordRsp.RecordRank)
  return recordrank_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBossRecordInfo >*
TBossGetRecordRsp::mutable_recordrank() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBossGetRecordRsp.RecordRank)
  return &recordrank_;
}

// optional bool Valid = 2;
inline bool TBossGetRecordRsp::has_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossGetRecordRsp::set_has_valid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossGetRecordRsp::clear_has_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossGetRecordRsp::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool TBossGetRecordRsp::valid() const {
  // @@protoc_insertion_point(field_get:pb.TBossGetRecordRsp.Valid)
  return valid_;
}
inline void TBossGetRecordRsp::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossGetRecordRsp.Valid)
}

// -------------------------------------------------------------------

// TBossBuyChallengeNumReq

// optional uint32 Num = 1;
inline bool TBossBuyChallengeNumReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossBuyChallengeNumReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossBuyChallengeNumReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossBuyChallengeNumReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TBossBuyChallengeNumReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TBossBuyChallengeNumReq.Num)
  return num_;
}
inline void TBossBuyChallengeNumReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossBuyChallengeNumReq.Num)
}

// -------------------------------------------------------------------

// TBossBuyChallengeNumRsp

// optional uint32 LeftChallengeNum = 1;
inline bool TBossBuyChallengeNumRsp::has_leftchallengenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossBuyChallengeNumRsp::set_has_leftchallengenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossBuyChallengeNumRsp::clear_has_leftchallengenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossBuyChallengeNumRsp::clear_leftchallengenum() {
  leftchallengenum_ = 0u;
  clear_has_leftchallengenum();
}
inline ::google::protobuf::uint32 TBossBuyChallengeNumRsp::leftchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBossBuyChallengeNumRsp.LeftChallengeNum)
  return leftchallengenum_;
}
inline void TBossBuyChallengeNumRsp::set_leftchallengenum(::google::protobuf::uint32 value) {
  set_has_leftchallengenum();
  leftchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossBuyChallengeNumRsp.LeftChallengeNum)
}

// optional uint32 BuyChallengeNum = 2;
inline bool TBossBuyChallengeNumRsp::has_buychallengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossBuyChallengeNumRsp::set_has_buychallengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossBuyChallengeNumRsp::clear_has_buychallengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossBuyChallengeNumRsp::clear_buychallengenum() {
  buychallengenum_ = 0u;
  clear_has_buychallengenum();
}
inline ::google::protobuf::uint32 TBossBuyChallengeNumRsp::buychallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBossBuyChallengeNumRsp.BuyChallengeNum)
  return buychallengenum_;
}
inline void TBossBuyChallengeNumRsp::set_buychallengenum(::google::protobuf::uint32 value) {
  set_has_buychallengenum();
  buychallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossBuyChallengeNumRsp.BuyChallengeNum)
}

// -------------------------------------------------------------------

// TBossGetServerTeamInfoRsp

// optional uint32 ServerTeamId = 1;
inline bool TBossGetServerTeamInfoRsp::has_serverteamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossGetServerTeamInfoRsp::set_has_serverteamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossGetServerTeamInfoRsp::clear_has_serverteamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossGetServerTeamInfoRsp::clear_serverteamid() {
  serverteamid_ = 0u;
  clear_has_serverteamid();
}
inline ::google::protobuf::uint32 TBossGetServerTeamInfoRsp::serverteamid() const {
  // @@protoc_insertion_point(field_get:pb.TBossGetServerTeamInfoRsp.ServerTeamId)
  return serverteamid_;
}
inline void TBossGetServerTeamInfoRsp::set_serverteamid(::google::protobuf::uint32 value) {
  set_has_serverteamid();
  serverteamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossGetServerTeamInfoRsp.ServerTeamId)
}

// -------------------------------------------------------------------

// TBossGetMyFmtRsp

// repeated .pb.TBossPosInfo ArrPos = 1;
inline int TBossGetMyFmtRsp::arrpos_size() const {
  return arrpos_.size();
}
inline void TBossGetMyFmtRsp::clear_arrpos() {
  arrpos_.Clear();
}
inline const ::pb::TBossPosInfo& TBossGetMyFmtRsp::arrpos(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBossGetMyFmtRsp.ArrPos)
  return arrpos_.Get(index);
}
inline ::pb::TBossPosInfo* TBossGetMyFmtRsp::mutable_arrpos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBossGetMyFmtRsp.ArrPos)
  return arrpos_.Mutable(index);
}
inline ::pb::TBossPosInfo* TBossGetMyFmtRsp::add_arrpos() {
  // @@protoc_insertion_point(field_add:pb.TBossGetMyFmtRsp.ArrPos)
  return arrpos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossPosInfo >&
TBossGetMyFmtRsp::arrpos() const {
  // @@protoc_insertion_point(field_list:pb.TBossGetMyFmtRsp.ArrPos)
  return arrpos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBossPosInfo >*
TBossGetMyFmtRsp::mutable_arrpos() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBossGetMyFmtRsp.ArrPos)
  return &arrpos_;
}

// -------------------------------------------------------------------

// TBossSetMyFmtReq

// repeated .pb.TBossPosInfo ArrPos = 1;
inline int TBossSetMyFmtReq::arrpos_size() const {
  return arrpos_.size();
}
inline void TBossSetMyFmtReq::clear_arrpos() {
  arrpos_.Clear();
}
inline const ::pb::TBossPosInfo& TBossSetMyFmtReq::arrpos(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBossSetMyFmtReq.ArrPos)
  return arrpos_.Get(index);
}
inline ::pb::TBossPosInfo* TBossSetMyFmtReq::mutable_arrpos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBossSetMyFmtReq.ArrPos)
  return arrpos_.Mutable(index);
}
inline ::pb::TBossPosInfo* TBossSetMyFmtReq::add_arrpos() {
  // @@protoc_insertion_point(field_add:pb.TBossSetMyFmtReq.ArrPos)
  return arrpos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossPosInfo >&
TBossSetMyFmtReq::arrpos() const {
  // @@protoc_insertion_point(field_list:pb.TBossSetMyFmtReq.ArrPos)
  return arrpos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBossPosInfo >*
TBossSetMyFmtReq::mutable_arrpos() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBossSetMyFmtReq.ArrPos)
  return &arrpos_;
}

// -------------------------------------------------------------------

// TBossFirstAtkNotify

// optional uint32 BossId = 1;
inline bool TBossFirstAtkNotify::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossFirstAtkNotify::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossFirstAtkNotify::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossFirstAtkNotify::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBossFirstAtkNotify::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBossFirstAtkNotify.BossId)
  return bossid_;
}
inline void TBossFirstAtkNotify::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossFirstAtkNotify.BossId)
}

// optional uint64 BeginTime = 2;
inline bool TBossFirstAtkNotify::has_begintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossFirstAtkNotify::set_has_begintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossFirstAtkNotify::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossFirstAtkNotify::clear_begintime() {
  begintime_ = GOOGLE_ULONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::uint64 TBossFirstAtkNotify::begintime() const {
  // @@protoc_insertion_point(field_get:pb.TBossFirstAtkNotify.BeginTime)
  return begintime_;
}
inline void TBossFirstAtkNotify::set_begintime(::google::protobuf::uint64 value) {
  set_has_begintime();
  begintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossFirstAtkNotify.BeginTime)
}

// -------------------------------------------------------------------

// TBossFinalRankNotify

// optional uint32 BossId = 1;
inline bool TBossFinalRankNotify::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBossFinalRankNotify::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBossFinalRankNotify::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBossFinalRankNotify::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TBossFinalRankNotify::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TBossFinalRankNotify.BossId)
  return bossid_;
}
inline void TBossFinalRankNotify::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBossFinalRankNotify.BossId)
}

// optional .pb.TBossRankInfo SelfRank = 2;
inline bool TBossFinalRankNotify::has_selfrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBossFinalRankNotify::set_has_selfrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBossFinalRankNotify::clear_has_selfrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBossFinalRankNotify::clear_selfrank() {
  if (selfrank_ != NULL) selfrank_->::pb::TBossRankInfo::Clear();
  clear_has_selfrank();
}
inline const ::pb::TBossRankInfo& TBossFinalRankNotify::selfrank() const {
  // @@protoc_insertion_point(field_get:pb.TBossFinalRankNotify.SelfRank)
  return selfrank_ != NULL ? *selfrank_ : *default_instance_->selfrank_;
}
inline ::pb::TBossRankInfo* TBossFinalRankNotify::mutable_selfrank() {
  set_has_selfrank();
  if (selfrank_ == NULL) selfrank_ = new ::pb::TBossRankInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBossFinalRankNotify.SelfRank)
  return selfrank_;
}
inline ::pb::TBossRankInfo* TBossFinalRankNotify::release_selfrank() {
  clear_has_selfrank();
  ::pb::TBossRankInfo* temp = selfrank_;
  selfrank_ = NULL;
  return temp;
}
inline void TBossFinalRankNotify::set_allocated_selfrank(::pb::TBossRankInfo* selfrank) {
  delete selfrank_;
  selfrank_ = selfrank;
  if (selfrank) {
    set_has_selfrank();
  } else {
    clear_has_selfrank();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBossFinalRankNotify.SelfRank)
}

// repeated .pb.TCommonReward RewardArr = 3;
inline int TBossFinalRankNotify::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TBossFinalRankNotify::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TBossFinalRankNotify::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBossFinalRankNotify.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TBossFinalRankNotify::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBossFinalRankNotify.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TBossFinalRankNotify::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TBossFinalRankNotify.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBossFinalRankNotify::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TBossFinalRankNotify.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBossFinalRankNotify::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBossFinalRankNotify.RewardArr)
  return &rewardarr_;
}

// repeated .pb.TBossRankInfo UserRankArr = 4;
inline int TBossFinalRankNotify::userrankarr_size() const {
  return userrankarr_.size();
}
inline void TBossFinalRankNotify::clear_userrankarr() {
  userrankarr_.Clear();
}
inline const ::pb::TBossRankInfo& TBossFinalRankNotify::userrankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBossFinalRankNotify.UserRankArr)
  return userrankarr_.Get(index);
}
inline ::pb::TBossRankInfo* TBossFinalRankNotify::mutable_userrankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBossFinalRankNotify.UserRankArr)
  return userrankarr_.Mutable(index);
}
inline ::pb::TBossRankInfo* TBossFinalRankNotify::add_userrankarr() {
  // @@protoc_insertion_point(field_add:pb.TBossFinalRankNotify.UserRankArr)
  return userrankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBossRankInfo >&
TBossFinalRankNotify::userrankarr() const {
  // @@protoc_insertion_point(field_list:pb.TBossFinalRankNotify.UserRankArr)
  return userrankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBossRankInfo >*
TBossFinalRankNotify::mutable_userrankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBossFinalRankNotify.UserRankArr)
  return &userrankarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EBossStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EBossStatus>() {
  return ::pb::EBossStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::EBossRecordType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EBossRecordType>() {
  return ::pb::EBossRecordType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCrossBoss_2eproto__INCLUDED
