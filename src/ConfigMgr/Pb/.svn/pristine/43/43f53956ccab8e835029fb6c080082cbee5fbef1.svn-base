// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GuildWish.proto

#ifndef PROTOBUF_net_2fGuildWish_2eproto__INCLUDED
#define PROTOBUF_net_2fGuildWish_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fGuildWish_2eproto();
void protobuf_AssignDesc_net_2fGuildWish_2eproto();
void protobuf_ShutdownFile_net_2fGuildWish_2eproto();

class TGuildWishInfo;
class TGuildWishRecord;
class TGuildGetWishListRsp;
class TGuildGetWishReceiveRecordRsp;
class TGuildGetWishGiveRecordRsp;
class TGuildWishFragmentReq;
class TGuildGiftFragmentReq;
class TGuildShowFragReq;
class TGuildUpdateWishNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TGuildWishInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWish.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWishInfo : public ::google::protobuf::Message {
 public:
  TGuildWishInfo();
  virtual ~TGuildWishInfo();

  TGuildWishInfo(const TGuildWishInfo& from);

  inline TGuildWishInfo& operator=(const TGuildWishInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWishInfo& default_instance();

  void Swap(TGuildWishInfo* other);

  // implements Message ----------------------------------------------

  TGuildWishInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWishInfo& from);
  void MergeFrom(const TGuildWishInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint64 Time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishInfo</name>
  	<Function>
  		<name>time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint32 FragmentId = 3;
  inline bool has_fragmentid() const;
  inline void clear_fragmentid();
  static const int kFragmentIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishInfo</name>
  	<Function>
  		<name>fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fragmentid() const;
  inline void set_fragmentid(::google::protobuf::uint32 value);

  // optional uint32 FragmentNum = 4;
  inline bool has_fragmentnum() const;
  inline void clear_fragmentnum();
  static const int kFragmentNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishInfo</name>
  	<Function>
  		<name>fragmentnum</name>
  		<replaceName>FragmentNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fragmentnum</name>
  		<replaceName>FragmentNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fragmentnum</name>
  		<replaceName>FragmentNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fragmentnum() const;
  inline void set_fragmentnum(::google::protobuf::uint32 value);

  // optional uint32 ReceiveNum = 5;
  inline bool has_receivenum() const;
  inline void clear_receivenum();
  static const int kReceiveNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishInfo</name>
  	<Function>
  		<name>receivenum</name>
  		<replaceName>ReceiveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receivenum</name>
  		<replaceName>ReceiveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivenum</name>
  		<replaceName>ReceiveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivenum() const;
  inline void set_receivenum(::google::protobuf::uint32 value);

  // optional uint32 GiveNum = 6;
  inline bool has_givenum() const;
  inline void clear_givenum();
  static const int kGiveNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishInfo</name>
  	<Function>
  		<name>givenum</name>
  		<replaceName>GiveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_givenum</name>
  		<replaceName>GiveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_givenum</name>
  		<replaceName>GiveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 givenum() const;
  inline void set_givenum(::google::protobuf::uint32 value);

  // repeated uint32 FragmentIdArr = 7;
  inline int fragmentidarr_size() const;
  inline void clear_fragmentidarr();
  static const int kFragmentIdArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishInfo</name>
  	<Function>
  		<name>fragmentidarr</name>
  		<replaceName>FragmentIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fragmentidarr</name>
  		<replaceName>FragmentIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fragmentidarr</name>
  		<replaceName>FragmentIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fragmentidarr</name>
  		<replaceName>FragmentIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fragmentidarr_size</name>
  		<replaceName>FragmentIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fragmentidarr(int index) const;
  inline void set_fragmentidarr(int index, ::google::protobuf::uint32 value);
  inline void add_fragmentidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fragmentidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fragmentidarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildWishInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_fragmentid();
  inline void clear_has_fragmentid();
  inline void set_has_fragmentnum();
  inline void clear_has_fragmentnum();
  inline void set_has_receivenum();
  inline void clear_has_receivenum();
  inline void set_has_givenum();
  inline void clear_has_givenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 fragmentid_;
  ::google::protobuf::uint32 fragmentnum_;
  ::google::protobuf::uint32 receivenum_;
  ::google::protobuf::uint32 givenum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fragmentidarr_;
  friend void  protobuf_AddDesc_net_2fGuildWish_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWish_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWish_2eproto();

  void InitAsDefaultInstance();
  static TGuildWishInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWishRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWish.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWishRecord : public ::google::protobuf::Message {
 public:
  TGuildWishRecord();
  virtual ~TGuildWishRecord();

  TGuildWishRecord(const TGuildWishRecord& from);

  inline TGuildWishRecord& operator=(const TGuildWishRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWishRecord& default_instance();

  void Swap(TGuildWishRecord* other);

  // implements Message ----------------------------------------------

  TGuildWishRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWishRecord& from);
  void MergeFrom(const TGuildWishRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RecordId = 1;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishRecord</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 recordid() const;
  inline void set_recordid(::google::protobuf::uint32 value);

  // optional uint32 FragmentId = 2;
  inline bool has_fragmentid() const;
  inline void clear_fragmentid();
  static const int kFragmentIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishRecord</name>
  	<Function>
  		<name>fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fragmentid() const;
  inline void set_fragmentid(::google::protobuf::uint32 value);

  // optional uint64 Uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishRecord</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishRecord</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint64 GiveTime = 5;
  inline bool has_givetime() const;
  inline void clear_givetime();
  static const int kGiveTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishRecord</name>
  	<Function>
  		<name>givetime</name>
  		<replaceName>GiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_givetime</name>
  		<replaceName>GiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_givetime</name>
  		<replaceName>GiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 givetime() const;
  inline void set_givetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildWishRecord)
 private:
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_fragmentid();
  inline void clear_has_fragmentid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_givetime();
  inline void clear_has_givetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 recordid_;
  ::google::protobuf::uint32 fragmentid_;
  ::google::protobuf::uint64 uid_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 givetime_;
  friend void  protobuf_AddDesc_net_2fGuildWish_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWish_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWish_2eproto();

  void InitAsDefaultInstance();
  static TGuildWishRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetWishListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWish.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetWishListRsp : public ::google::protobuf::Message {
 public:
  TGuildGetWishListRsp();
  virtual ~TGuildGetWishListRsp();

  TGuildGetWishListRsp(const TGuildGetWishListRsp& from);

  inline TGuildGetWishListRsp& operator=(const TGuildGetWishListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetWishListRsp& default_instance();

  void Swap(TGuildGetWishListRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetWishListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetWishListRsp& from);
  void MergeFrom(const TGuildGetWishListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWishInfo WishArr = 1;
  inline int wisharr_size() const;
  inline void clear_wisharr();
  static const int kWishArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetWishListRsp</name>
  	<Function>
  		<name>wisharr</name>
  		<replaceName>WishArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_wisharr</name>
  		<replaceName>WishArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_wisharr</name>
  		<replaceName>WishArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wisharr</name>
  		<replaceName>WishArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>wisharr_size</name>
  		<replaceName>WishArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWishInfo& wisharr(int index) const;
  inline ::pb::TGuildWishInfo* mutable_wisharr(int index);
  inline ::pb::TGuildWishInfo* add_wisharr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishInfo >&
      wisharr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishInfo >*
      mutable_wisharr();

  // @@protoc_insertion_point(class_scope:pb.TGuildGetWishListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishInfo > wisharr_;
  friend void  protobuf_AddDesc_net_2fGuildWish_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWish_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWish_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetWishListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetWishReceiveRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWish.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetWishReceiveRecordRsp : public ::google::protobuf::Message {
 public:
  TGuildGetWishReceiveRecordRsp();
  virtual ~TGuildGetWishReceiveRecordRsp();

  TGuildGetWishReceiveRecordRsp(const TGuildGetWishReceiveRecordRsp& from);

  inline TGuildGetWishReceiveRecordRsp& operator=(const TGuildGetWishReceiveRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetWishReceiveRecordRsp& default_instance();

  void Swap(TGuildGetWishReceiveRecordRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetWishReceiveRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetWishReceiveRecordRsp& from);
  void MergeFrom(const TGuildGetWishReceiveRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWishRecord RecordArr = 1;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetWishReceiveRecordRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWishRecord& recordarr(int index) const;
  inline ::pb::TGuildWishRecord* mutable_recordarr(int index);
  inline ::pb::TGuildWishRecord* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishRecord >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishRecord >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildGetWishReceiveRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishRecord > recordarr_;
  friend void  protobuf_AddDesc_net_2fGuildWish_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWish_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWish_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetWishReceiveRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetWishGiveRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWish.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetWishGiveRecordRsp : public ::google::protobuf::Message {
 public:
  TGuildGetWishGiveRecordRsp();
  virtual ~TGuildGetWishGiveRecordRsp();

  TGuildGetWishGiveRecordRsp(const TGuildGetWishGiveRecordRsp& from);

  inline TGuildGetWishGiveRecordRsp& operator=(const TGuildGetWishGiveRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetWishGiveRecordRsp& default_instance();

  void Swap(TGuildGetWishGiveRecordRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetWishGiveRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetWishGiveRecordRsp& from);
  void MergeFrom(const TGuildGetWishGiveRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWishRecord RecordArr = 1;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetWishGiveRecordRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWishRecord& recordarr(int index) const;
  inline ::pb::TGuildWishRecord* mutable_recordarr(int index);
  inline ::pb::TGuildWishRecord* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishRecord >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishRecord >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildGetWishGiveRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishRecord > recordarr_;
  friend void  protobuf_AddDesc_net_2fGuildWish_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWish_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWish_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetWishGiveRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildWishFragmentReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWish.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildWishFragmentReq : public ::google::protobuf::Message {
 public:
  TGuildWishFragmentReq();
  virtual ~TGuildWishFragmentReq();

  TGuildWishFragmentReq(const TGuildWishFragmentReq& from);

  inline TGuildWishFragmentReq& operator=(const TGuildWishFragmentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildWishFragmentReq& default_instance();

  void Swap(TGuildWishFragmentReq* other);

  // implements Message ----------------------------------------------

  TGuildWishFragmentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildWishFragmentReq& from);
  void MergeFrom(const TGuildWishFragmentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 FragmentId = 1;
  inline int fragmentid_size() const;
  inline void clear_fragmentid();
  static const int kFragmentIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildWishFragmentReq</name>
  	<Function>
  		<name>fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fragmentid_size</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fragmentid(int index) const;
  inline void set_fragmentid(int index, ::google::protobuf::uint32 value);
  inline void add_fragmentid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fragmentid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fragmentid();

  // @@protoc_insertion_point(class_scope:pb.TGuildWishFragmentReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fragmentid_;
  friend void  protobuf_AddDesc_net_2fGuildWish_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWish_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWish_2eproto();

  void InitAsDefaultInstance();
  static TGuildWishFragmentReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGiftFragmentReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWish.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGiftFragmentReq : public ::google::protobuf::Message {
 public:
  TGuildGiftFragmentReq();
  virtual ~TGuildGiftFragmentReq();

  TGuildGiftFragmentReq(const TGuildGiftFragmentReq& from);

  inline TGuildGiftFragmentReq& operator=(const TGuildGiftFragmentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGiftFragmentReq& default_instance();

  void Swap(TGuildGiftFragmentReq* other);

  // implements Message ----------------------------------------------

  TGuildGiftFragmentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGiftFragmentReq& from);
  void MergeFrom(const TGuildGiftFragmentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FragmentId = 1;
  inline bool has_fragmentid() const;
  inline void clear_fragmentid();
  static const int kFragmentIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGiftFragmentReq</name>
  	<Function>
  		<name>fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fragmentid</name>
  		<replaceName>FragmentId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fragmentid() const;
  inline void set_fragmentid(::google::protobuf::uint32 value);

  // optional uint64 ReceiveUid = 2;
  inline bool has_receiveuid() const;
  inline void clear_receiveuid();
  static const int kReceiveUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGiftFragmentReq</name>
  	<Function>
  		<name>receiveuid</name>
  		<replaceName>ReceiveUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receiveuid</name>
  		<replaceName>ReceiveUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receiveuid</name>
  		<replaceName>ReceiveUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 receiveuid() const;
  inline void set_receiveuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGiftFragmentReq)
 private:
  inline void set_has_fragmentid();
  inline void clear_has_fragmentid();
  inline void set_has_receiveuid();
  inline void clear_has_receiveuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 receiveuid_;
  ::google::protobuf::uint32 fragmentid_;
  friend void  protobuf_AddDesc_net_2fGuildWish_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWish_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWish_2eproto();

  void InitAsDefaultInstance();
  static TGuildGiftFragmentReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildShowFragReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWish.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildShowFragReq : public ::google::protobuf::Message {
 public:
  TGuildShowFragReq();
  virtual ~TGuildShowFragReq();

  TGuildShowFragReq(const TGuildShowFragReq& from);

  inline TGuildShowFragReq& operator=(const TGuildShowFragReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildShowFragReq& default_instance();

  void Swap(TGuildShowFragReq* other);

  // implements Message ----------------------------------------------

  TGuildShowFragReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildShowFragReq& from);
  void MergeFrom(const TGuildShowFragReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 FragmentIdArr = 1;
  inline int fragmentidarr_size() const;
  inline void clear_fragmentidarr();
  static const int kFragmentIdArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildShowFragReq</name>
  	<Function>
  		<name>fragmentidarr</name>
  		<replaceName>FragmentIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fragmentidarr</name>
  		<replaceName>FragmentIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fragmentidarr</name>
  		<replaceName>FragmentIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fragmentidarr</name>
  		<replaceName>FragmentIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fragmentidarr_size</name>
  		<replaceName>FragmentIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fragmentidarr(int index) const;
  inline void set_fragmentidarr(int index, ::google::protobuf::uint32 value);
  inline void add_fragmentidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      fragmentidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_fragmentidarr();

  // @@protoc_insertion_point(class_scope:pb.TGuildShowFragReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > fragmentidarr_;
  friend void  protobuf_AddDesc_net_2fGuildWish_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWish_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWish_2eproto();

  void InitAsDefaultInstance();
  static TGuildShowFragReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildUpdateWishNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildWish.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildUpdateWishNotify : public ::google::protobuf::Message {
 public:
  TGuildUpdateWishNotify();
  virtual ~TGuildUpdateWishNotify();

  TGuildUpdateWishNotify(const TGuildUpdateWishNotify& from);

  inline TGuildUpdateWishNotify& operator=(const TGuildUpdateWishNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildUpdateWishNotify& default_instance();

  void Swap(TGuildUpdateWishNotify* other);

  // implements Message ----------------------------------------------

  TGuildUpdateWishNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildUpdateWishNotify& from);
  void MergeFrom(const TGuildUpdateWishNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildWishInfo WishArr = 1;
  inline int wisharr_size() const;
  inline void clear_wisharr();
  static const int kWishArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateWishNotify</name>
  	<Function>
  		<name>wisharr</name>
  		<replaceName>WishArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_wisharr</name>
  		<replaceName>WishArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_wisharr</name>
  		<replaceName>WishArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wisharr</name>
  		<replaceName>WishArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>wisharr_size</name>
  		<replaceName>WishArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildWishInfo& wisharr(int index) const;
  inline ::pb::TGuildWishInfo* mutable_wisharr(int index);
  inline ::pb::TGuildWishInfo* add_wisharr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishInfo >&
      wisharr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishInfo >*
      mutable_wisharr();

  // @@protoc_insertion_point(class_scope:pb.TGuildUpdateWishNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishInfo > wisharr_;
  friend void  protobuf_AddDesc_net_2fGuildWish_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildWish_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildWish_2eproto();

  void InitAsDefaultInstance();
  static TGuildUpdateWishNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TGuildWishInfo

// optional uint64 Uid = 1;
inline bool TGuildWishInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWishInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWishInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWishInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildWishInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishInfo.Uid)
  return uid_;
}
inline void TGuildWishInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWishInfo.Uid)
}

// optional uint64 Time = 2;
inline bool TGuildWishInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWishInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWishInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWishInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 TGuildWishInfo::time() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishInfo.Time)
  return time_;
}
inline void TGuildWishInfo::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWishInfo.Time)
}

// optional uint32 FragmentId = 3;
inline bool TGuildWishInfo::has_fragmentid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWishInfo::set_has_fragmentid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWishInfo::clear_has_fragmentid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWishInfo::clear_fragmentid() {
  fragmentid_ = 0u;
  clear_has_fragmentid();
}
inline ::google::protobuf::uint32 TGuildWishInfo::fragmentid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishInfo.FragmentId)
  return fragmentid_;
}
inline void TGuildWishInfo::set_fragmentid(::google::protobuf::uint32 value) {
  set_has_fragmentid();
  fragmentid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWishInfo.FragmentId)
}

// optional uint32 FragmentNum = 4;
inline bool TGuildWishInfo::has_fragmentnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWishInfo::set_has_fragmentnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWishInfo::clear_has_fragmentnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWishInfo::clear_fragmentnum() {
  fragmentnum_ = 0u;
  clear_has_fragmentnum();
}
inline ::google::protobuf::uint32 TGuildWishInfo::fragmentnum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishInfo.FragmentNum)
  return fragmentnum_;
}
inline void TGuildWishInfo::set_fragmentnum(::google::protobuf::uint32 value) {
  set_has_fragmentnum();
  fragmentnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWishInfo.FragmentNum)
}

// optional uint32 ReceiveNum = 5;
inline bool TGuildWishInfo::has_receivenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildWishInfo::set_has_receivenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildWishInfo::clear_has_receivenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildWishInfo::clear_receivenum() {
  receivenum_ = 0u;
  clear_has_receivenum();
}
inline ::google::protobuf::uint32 TGuildWishInfo::receivenum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishInfo.ReceiveNum)
  return receivenum_;
}
inline void TGuildWishInfo::set_receivenum(::google::protobuf::uint32 value) {
  set_has_receivenum();
  receivenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWishInfo.ReceiveNum)
}

// optional uint32 GiveNum = 6;
inline bool TGuildWishInfo::has_givenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildWishInfo::set_has_givenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildWishInfo::clear_has_givenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildWishInfo::clear_givenum() {
  givenum_ = 0u;
  clear_has_givenum();
}
inline ::google::protobuf::uint32 TGuildWishInfo::givenum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishInfo.GiveNum)
  return givenum_;
}
inline void TGuildWishInfo::set_givenum(::google::protobuf::uint32 value) {
  set_has_givenum();
  givenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWishInfo.GiveNum)
}

// repeated uint32 FragmentIdArr = 7;
inline int TGuildWishInfo::fragmentidarr_size() const {
  return fragmentidarr_.size();
}
inline void TGuildWishInfo::clear_fragmentidarr() {
  fragmentidarr_.Clear();
}
inline ::google::protobuf::uint32 TGuildWishInfo::fragmentidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishInfo.FragmentIdArr)
  return fragmentidarr_.Get(index);
}
inline void TGuildWishInfo::set_fragmentidarr(int index, ::google::protobuf::uint32 value) {
  fragmentidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildWishInfo.FragmentIdArr)
}
inline void TGuildWishInfo::add_fragmentidarr(::google::protobuf::uint32 value) {
  fragmentidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildWishInfo.FragmentIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGuildWishInfo::fragmentidarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWishInfo.FragmentIdArr)
  return fragmentidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGuildWishInfo::mutable_fragmentidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWishInfo.FragmentIdArr)
  return &fragmentidarr_;
}

// -------------------------------------------------------------------

// TGuildWishRecord

// optional uint32 RecordId = 1;
inline bool TGuildWishRecord::has_recordid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildWishRecord::set_has_recordid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildWishRecord::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildWishRecord::clear_recordid() {
  recordid_ = 0u;
  clear_has_recordid();
}
inline ::google::protobuf::uint32 TGuildWishRecord::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishRecord.RecordId)
  return recordid_;
}
inline void TGuildWishRecord::set_recordid(::google::protobuf::uint32 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWishRecord.RecordId)
}

// optional uint32 FragmentId = 2;
inline bool TGuildWishRecord::has_fragmentid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildWishRecord::set_has_fragmentid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildWishRecord::clear_has_fragmentid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildWishRecord::clear_fragmentid() {
  fragmentid_ = 0u;
  clear_has_fragmentid();
}
inline ::google::protobuf::uint32 TGuildWishRecord::fragmentid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishRecord.FragmentId)
  return fragmentid_;
}
inline void TGuildWishRecord::set_fragmentid(::google::protobuf::uint32 value) {
  set_has_fragmentid();
  fragmentid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWishRecord.FragmentId)
}

// optional uint64 Uid = 3;
inline bool TGuildWishRecord::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildWishRecord::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildWishRecord::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildWishRecord::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TGuildWishRecord::uid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishRecord.Uid)
  return uid_;
}
inline void TGuildWishRecord::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWishRecord.Uid)
}

// optional .pb.TUserSimpleInfo UserInfo = 4;
inline bool TGuildWishRecord::has_userinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildWishRecord::set_has_userinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildWishRecord::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildWishRecord::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TGuildWishRecord::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishRecord.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TGuildWishRecord::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TGuildWishRecord.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TGuildWishRecord::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TGuildWishRecord::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildWishRecord.UserInfo)
}

// optional uint64 GiveTime = 5;
inline bool TGuildWishRecord::has_givetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildWishRecord::set_has_givetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildWishRecord::clear_has_givetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildWishRecord::clear_givetime() {
  givetime_ = GOOGLE_ULONGLONG(0);
  clear_has_givetime();
}
inline ::google::protobuf::uint64 TGuildWishRecord::givetime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishRecord.GiveTime)
  return givetime_;
}
inline void TGuildWishRecord::set_givetime(::google::protobuf::uint64 value) {
  set_has_givetime();
  givetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildWishRecord.GiveTime)
}

// -------------------------------------------------------------------

// TGuildGetWishListRsp

// repeated .pb.TGuildWishInfo WishArr = 1;
inline int TGuildGetWishListRsp::wisharr_size() const {
  return wisharr_.size();
}
inline void TGuildGetWishListRsp::clear_wisharr() {
  wisharr_.Clear();
}
inline const ::pb::TGuildWishInfo& TGuildGetWishListRsp::wisharr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetWishListRsp.WishArr)
  return wisharr_.Get(index);
}
inline ::pb::TGuildWishInfo* TGuildGetWishListRsp::mutable_wisharr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetWishListRsp.WishArr)
  return wisharr_.Mutable(index);
}
inline ::pb::TGuildWishInfo* TGuildGetWishListRsp::add_wisharr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetWishListRsp.WishArr)
  return wisharr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishInfo >&
TGuildGetWishListRsp::wisharr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetWishListRsp.WishArr)
  return wisharr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishInfo >*
TGuildGetWishListRsp::mutable_wisharr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetWishListRsp.WishArr)
  return &wisharr_;
}

// -------------------------------------------------------------------

// TGuildGetWishReceiveRecordRsp

// repeated .pb.TGuildWishRecord RecordArr = 1;
inline int TGuildGetWishReceiveRecordRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TGuildGetWishReceiveRecordRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TGuildWishRecord& TGuildGetWishReceiveRecordRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetWishReceiveRecordRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TGuildWishRecord* TGuildGetWishReceiveRecordRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetWishReceiveRecordRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TGuildWishRecord* TGuildGetWishReceiveRecordRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetWishReceiveRecordRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishRecord >&
TGuildGetWishReceiveRecordRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetWishReceiveRecordRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishRecord >*
TGuildGetWishReceiveRecordRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetWishReceiveRecordRsp.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TGuildGetWishGiveRecordRsp

// repeated .pb.TGuildWishRecord RecordArr = 1;
inline int TGuildGetWishGiveRecordRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TGuildGetWishGiveRecordRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TGuildWishRecord& TGuildGetWishGiveRecordRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetWishGiveRecordRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TGuildWishRecord* TGuildGetWishGiveRecordRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetWishGiveRecordRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TGuildWishRecord* TGuildGetWishGiveRecordRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetWishGiveRecordRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishRecord >&
TGuildGetWishGiveRecordRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetWishGiveRecordRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishRecord >*
TGuildGetWishGiveRecordRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetWishGiveRecordRsp.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TGuildWishFragmentReq

// repeated uint32 FragmentId = 1;
inline int TGuildWishFragmentReq::fragmentid_size() const {
  return fragmentid_.size();
}
inline void TGuildWishFragmentReq::clear_fragmentid() {
  fragmentid_.Clear();
}
inline ::google::protobuf::uint32 TGuildWishFragmentReq::fragmentid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildWishFragmentReq.FragmentId)
  return fragmentid_.Get(index);
}
inline void TGuildWishFragmentReq::set_fragmentid(int index, ::google::protobuf::uint32 value) {
  fragmentid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildWishFragmentReq.FragmentId)
}
inline void TGuildWishFragmentReq::add_fragmentid(::google::protobuf::uint32 value) {
  fragmentid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildWishFragmentReq.FragmentId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGuildWishFragmentReq::fragmentid() const {
  // @@protoc_insertion_point(field_list:pb.TGuildWishFragmentReq.FragmentId)
  return fragmentid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGuildWishFragmentReq::mutable_fragmentid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildWishFragmentReq.FragmentId)
  return &fragmentid_;
}

// -------------------------------------------------------------------

// TGuildGiftFragmentReq

// optional uint32 FragmentId = 1;
inline bool TGuildGiftFragmentReq::has_fragmentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGiftFragmentReq::set_has_fragmentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGiftFragmentReq::clear_has_fragmentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGiftFragmentReq::clear_fragmentid() {
  fragmentid_ = 0u;
  clear_has_fragmentid();
}
inline ::google::protobuf::uint32 TGuildGiftFragmentReq::fragmentid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGiftFragmentReq.FragmentId)
  return fragmentid_;
}
inline void TGuildGiftFragmentReq::set_fragmentid(::google::protobuf::uint32 value) {
  set_has_fragmentid();
  fragmentid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGiftFragmentReq.FragmentId)
}

// optional uint64 ReceiveUid = 2;
inline bool TGuildGiftFragmentReq::has_receiveuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildGiftFragmentReq::set_has_receiveuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildGiftFragmentReq::clear_has_receiveuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildGiftFragmentReq::clear_receiveuid() {
  receiveuid_ = GOOGLE_ULONGLONG(0);
  clear_has_receiveuid();
}
inline ::google::protobuf::uint64 TGuildGiftFragmentReq::receiveuid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGiftFragmentReq.ReceiveUid)
  return receiveuid_;
}
inline void TGuildGiftFragmentReq::set_receiveuid(::google::protobuf::uint64 value) {
  set_has_receiveuid();
  receiveuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGiftFragmentReq.ReceiveUid)
}

// -------------------------------------------------------------------

// TGuildShowFragReq

// repeated uint32 FragmentIdArr = 1;
inline int TGuildShowFragReq::fragmentidarr_size() const {
  return fragmentidarr_.size();
}
inline void TGuildShowFragReq::clear_fragmentidarr() {
  fragmentidarr_.Clear();
}
inline ::google::protobuf::uint32 TGuildShowFragReq::fragmentidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildShowFragReq.FragmentIdArr)
  return fragmentidarr_.Get(index);
}
inline void TGuildShowFragReq::set_fragmentidarr(int index, ::google::protobuf::uint32 value) {
  fragmentidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGuildShowFragReq.FragmentIdArr)
}
inline void TGuildShowFragReq::add_fragmentidarr(::google::protobuf::uint32 value) {
  fragmentidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGuildShowFragReq.FragmentIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGuildShowFragReq::fragmentidarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildShowFragReq.FragmentIdArr)
  return fragmentidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGuildShowFragReq::mutable_fragmentidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildShowFragReq.FragmentIdArr)
  return &fragmentidarr_;
}

// -------------------------------------------------------------------

// TGuildUpdateWishNotify

// repeated .pb.TGuildWishInfo WishArr = 1;
inline int TGuildUpdateWishNotify::wisharr_size() const {
  return wisharr_.size();
}
inline void TGuildUpdateWishNotify::clear_wisharr() {
  wisharr_.Clear();
}
inline const ::pb::TGuildWishInfo& TGuildUpdateWishNotify::wisharr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateWishNotify.WishArr)
  return wisharr_.Get(index);
}
inline ::pb::TGuildWishInfo* TGuildUpdateWishNotify::mutable_wisharr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildUpdateWishNotify.WishArr)
  return wisharr_.Mutable(index);
}
inline ::pb::TGuildWishInfo* TGuildUpdateWishNotify::add_wisharr() {
  // @@protoc_insertion_point(field_add:pb.TGuildUpdateWishNotify.WishArr)
  return wisharr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishInfo >&
TGuildUpdateWishNotify::wisharr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildUpdateWishNotify.WishArr)
  return wisharr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildWishInfo >*
TGuildUpdateWishNotify::mutable_wisharr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildUpdateWishNotify.WishArr)
  return &wisharr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fGuildWish_2eproto__INCLUDED
