// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Battle.proto

#ifndef PROTOBUF_net_2fBattle_2eproto__INCLUDED
#define PROTOBUF_net_2fBattle_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/Attributer.pb.h"
#include "net/BattleBase.pb.h"
#include "net/BattleStarter.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fBattle_2eproto();
void protobuf_AssignDesc_net_2fBattle_2eproto();
void protobuf_ShutdownFile_net_2fBattle_2eproto();

class TBTActionInfo;
class TModuleAttrInfo;
class TDebugExtraInfo;
class TRankSingle;
class TRankInfo;
class TTDEnemy;
class TTDFriend;
class TUnitInfo;
class TArmyInfo;
class TSceneInfo;
class TExtraOption;
class TBattleUserInput;
class TBattleFieldInput;
class TBattleArgs;
class TUnitInfoAfterBattle;
class TArmyInfoAfterBattle;
class TBattleResult;
class TBattleBTRecord;
class TGroupMatchResult;
class TGroupMatchArgs;
class TBattleResultReq;
class TBattleLocalResultReq;
class TBattleResultRsp;
class TBattleCheckParam;
class TArmyFormation;
class TUnitFormation;
class TGetBattleArgsWithUidListRsp;
class TBatchBattleArgs;
class TBatchBattleResult;
class TGetBattleArgsWithParamReq;
class TGetBattleArgsWithParamRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TBTActionInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBTActionInfo : public ::google::protobuf::Message {
 public:
  TBTActionInfo();
  virtual ~TBTActionInfo();

  TBTActionInfo(const TBTActionInfo& from);

  inline TBTActionInfo& operator=(const TBTActionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBTActionInfo& default_instance();

  void Swap(TBTActionInfo* other);

  // implements Message ----------------------------------------------

  TBTActionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBTActionInfo& from);
  void MergeFrom(const TBTActionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 CmdTime = 1;
  inline bool has_cmdtime() const;
  inline void clear_cmdtime();
  static const int kCmdTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBTActionInfo</name>
  	<Function>
  		<name>cmdtime</name>
  		<replaceName>CmdTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cmdtime</name>
  		<replaceName>CmdTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cmdtime</name>
  		<replaceName>CmdTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 cmdtime() const;
  inline void set_cmdtime(::google::protobuf::int32 value);

  // required .pb.EBTAction BTAction = 2;
  inline bool has_btaction() const;
  inline void clear_btaction();
  static const int kBTActionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBTActionInfo</name>
  	<Function>
  		<name>btaction</name>
  		<replaceName>BTAction</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_btaction</name>
  		<replaceName>BTAction</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_btaction</name>
  		<replaceName>BTAction</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBTAction btaction() const;
  inline void set_btaction(::pb::EBTAction value);

  // repeated int32 ParamInts = 3;
  inline int paramints_size() const;
  inline void clear_paramints();
  static const int kParamIntsFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBTActionInfo</name>
  	<Function>
  		<name>paramints</name>
  		<replaceName>ParamInts</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_paramints</name>
  		<replaceName>ParamInts</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_paramints</name>
  		<replaceName>ParamInts</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paramints</name>
  		<replaceName>ParamInts</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>paramints_size</name>
  		<replaceName>ParamInts</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 paramints(int index) const;
  inline void set_paramints(int index, ::google::protobuf::int32 value);
  inline void add_paramints(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      paramints() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_paramints();

  // repeated string ParamStrings = 4;
  inline int paramstrings_size() const;
  inline void clear_paramstrings();
  static const int kParamStringsFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBTActionInfo</name>
  	<Function>
  		<name>paramstrings</name>
  		<replaceName>ParamStrings</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_paramstrings</name>
  		<replaceName>ParamStrings</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_paramstrings</name>
  		<replaceName>ParamStrings</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paramstrings</name>
  		<replaceName>ParamStrings</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>paramstrings_size</name>
  		<replaceName>ParamStrings</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& paramstrings(int index) const;
  inline ::std::string* mutable_paramstrings(int index);
  inline void set_paramstrings(int index, const ::std::string& value);
  inline void set_paramstrings(int index, const char* value);
  inline void set_paramstrings(int index, const char* value, size_t size);
  inline ::std::string* add_paramstrings();
  inline void add_paramstrings(const ::std::string& value);
  inline void add_paramstrings(const char* value);
  inline void add_paramstrings(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& paramstrings() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_paramstrings();

  // optional int32 FieldNum = 5;
  inline bool has_fieldnum() const;
  inline void clear_fieldnum();
  static const int kFieldNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBTActionInfo</name>
  	<Function>
  		<name>fieldnum</name>
  		<replaceName>FieldNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldnum</name>
  		<replaceName>FieldNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldnum</name>
  		<replaceName>FieldNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 fieldnum() const;
  inline void set_fieldnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TBTActionInfo)
 private:
  inline void set_has_cmdtime();
  inline void clear_has_cmdtime();
  inline void set_has_btaction();
  inline void clear_has_btaction();
  inline void set_has_fieldnum();
  inline void clear_has_fieldnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 cmdtime_;
  int btaction_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > paramints_;
  ::google::protobuf::RepeatedPtrField< ::std::string> paramstrings_;
  ::google::protobuf::int32 fieldnum_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBTActionInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TModuleAttrInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TModuleAttrInfo : public ::google::protobuf::Message {
 public:
  TModuleAttrInfo();
  virtual ~TModuleAttrInfo();

  TModuleAttrInfo(const TModuleAttrInfo& from);

  inline TModuleAttrInfo& operator=(const TModuleAttrInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TModuleAttrInfo& default_instance();

  void Swap(TModuleAttrInfo* other);

  // implements Message ----------------------------------------------

  TModuleAttrInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TModuleAttrInfo& from);
  void MergeFrom(const TModuleAttrInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 ModuleName = 1;
  inline bool has_modulename() const;
  inline void clear_modulename();
  static const int kModuleNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TModuleAttrInfo</name>
  	<Function>
  		<name>modulename</name>
  		<replaceName>ModuleName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_modulename</name>
  		<replaceName>ModuleName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_modulename</name>
  		<replaceName>ModuleName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 modulename() const;
  inline void set_modulename(::google::protobuf::uint32 value);

  // repeated .pb.TAttribute AttrArr = 2;
  inline int attrarr_size() const;
  inline void clear_attrarr();
  static const int kAttrArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TModuleAttrInfo</name>
  	<Function>
  		<name>attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attrarr_size</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAttribute& attrarr(int index) const;
  inline ::pb::TAttribute* mutable_attrarr(int index);
  inline ::pb::TAttribute* add_attrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >&
      attrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >*
      mutable_attrarr();

  // @@protoc_insertion_point(class_scope:pb.TModuleAttrInfo)
 private:
  inline void set_has_modulename();
  inline void clear_has_modulename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAttribute > attrarr_;
  ::google::protobuf::uint32 modulename_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TModuleAttrInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TDebugExtraInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TDebugExtraInfo : public ::google::protobuf::Message {
 public:
  TDebugExtraInfo();
  virtual ~TDebugExtraInfo();

  TDebugExtraInfo(const TDebugExtraInfo& from);

  inline TDebugExtraInfo& operator=(const TDebugExtraInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TDebugExtraInfo& default_instance();

  void Swap(TDebugExtraInfo* other);

  // implements Message ----------------------------------------------

  TDebugExtraInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TDebugExtraInfo& from);
  void MergeFrom(const TDebugExtraInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TModuleAttrInfo ModuleAttrInfo = 1;
  inline int moduleattrinfo_size() const;
  inline void clear_moduleattrinfo();
  static const int kModuleAttrInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TDebugExtraInfo</name>
  	<Function>
  		<name>moduleattrinfo</name>
  		<replaceName>ModuleAttrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_moduleattrinfo</name>
  		<replaceName>ModuleAttrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_moduleattrinfo</name>
  		<replaceName>ModuleAttrInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_moduleattrinfo</name>
  		<replaceName>ModuleAttrInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>moduleattrinfo_size</name>
  		<replaceName>ModuleAttrInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TModuleAttrInfo& moduleattrinfo(int index) const;
  inline ::pb::TModuleAttrInfo* mutable_moduleattrinfo(int index);
  inline ::pb::TModuleAttrInfo* add_moduleattrinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TModuleAttrInfo >&
      moduleattrinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TModuleAttrInfo >*
      mutable_moduleattrinfo();

  // @@protoc_insertion_point(class_scope:pb.TDebugExtraInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TModuleAttrInfo > moduleattrinfo_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TDebugExtraInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRankSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRankSingle : public ::google::protobuf::Message {
 public:
  TRankSingle();
  virtual ~TRankSingle();

  TRankSingle(const TRankSingle& from);

  inline TRankSingle& operator=(const TRankSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRankSingle& default_instance();

  void Swap(TRankSingle* other);

  // implements Message ----------------------------------------------

  TRankSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRankSingle& from);
  void MergeFrom(const TRankSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRankSingle</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRankSingle</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TRankSingle)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 rank_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TRankSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRankInfo : public ::google::protobuf::Message {
 public:
  TRankInfo();
  virtual ~TRankInfo();

  TRankInfo(const TRankInfo& from);

  inline TRankInfo& operator=(const TRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRankInfo& default_instance();

  void Swap(TRankInfo* other);

  // implements Message ----------------------------------------------

  TRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRankInfo& from);
  void MergeFrom(const TRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TRankSingle RankSelf = 1;
  inline int rankself_size() const;
  inline void clear_rankself();
  static const int kRankSelfFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRankInfo</name>
  	<Function>
  		<name>rankself</name>
  		<replaceName>RankSelf</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankself</name>
  		<replaceName>RankSelf</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankself</name>
  		<replaceName>RankSelf</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankself</name>
  		<replaceName>RankSelf</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankself_size</name>
  		<replaceName>RankSelf</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRankSingle& rankself(int index) const;
  inline ::pb::TRankSingle* mutable_rankself(int index);
  inline ::pb::TRankSingle* add_rankself();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >&
      rankself() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >*
      mutable_rankself();

  // repeated .pb.TRankSingle RankEnemy = 2;
  inline int rankenemy_size() const;
  inline void clear_rankenemy();
  static const int kRankEnemyFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRankInfo</name>
  	<Function>
  		<name>rankenemy</name>
  		<replaceName>RankEnemy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankenemy</name>
  		<replaceName>RankEnemy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankenemy</name>
  		<replaceName>RankEnemy</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankenemy</name>
  		<replaceName>RankEnemy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankenemy_size</name>
  		<replaceName>RankEnemy</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRankSingle& rankenemy(int index) const;
  inline ::pb::TRankSingle* mutable_rankenemy(int index);
  inline ::pb::TRankSingle* add_rankenemy();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >&
      rankenemy() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >*
      mutable_rankenemy();

  // @@protoc_insertion_point(class_scope:pb.TRankInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle > rankself_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle > rankenemy_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTDEnemy</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTDEnemy : public ::google::protobuf::Message {
 public:
  TTDEnemy();
  virtual ~TTDEnemy();

  TTDEnemy(const TTDEnemy& from);

  inline TTDEnemy& operator=(const TTDEnemy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTDEnemy& default_instance();

  void Swap(TTDEnemy* other);

  // implements Message ----------------------------------------------

  TTDEnemy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTDEnemy& from);
  void MergeFrom(const TTDEnemy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUnitInfo UnitArr = 1;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTDEnemy</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitInfo& unitarr(int index) const;
  inline ::pb::TUnitInfo* mutable_unitarr(int index);
  inline ::pb::TUnitInfo* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
      mutable_unitarr();

  // repeated .pb.TTDTimeInfo TimeInfo = 2;
  inline int timeinfo_size() const;
  inline void clear_timeinfo();
  static const int kTimeInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTDEnemy</name>
  	<Function>
  		<name>timeinfo</name>
  		<replaceName>TimeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_timeinfo</name>
  		<replaceName>TimeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_timeinfo</name>
  		<replaceName>TimeInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_timeinfo</name>
  		<replaceName>TimeInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>timeinfo_size</name>
  		<replaceName>TimeInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTDTimeInfo& timeinfo(int index) const;
  inline ::pb::TTDTimeInfo* mutable_timeinfo(int index);
  inline ::pb::TTDTimeInfo* add_timeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTDTimeInfo >&
      timeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTDTimeInfo >*
      mutable_timeinfo();

  // repeated .pb.TSkillCount SkillCounter = 3;
  inline int skillcounter_size() const;
  inline void clear_skillcounter();
  static const int kSkillCounterFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTDEnemy</name>
  	<Function>
  		<name>skillcounter</name>
  		<replaceName>SkillCounter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skillcounter</name>
  		<replaceName>SkillCounter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skillcounter</name>
  		<replaceName>SkillCounter</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillcounter</name>
  		<replaceName>SkillCounter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skillcounter_size</name>
  		<replaceName>SkillCounter</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSkillCount& skillcounter(int index) const;
  inline ::pb::TSkillCount* mutable_skillcounter(int index);
  inline ::pb::TSkillCount* add_skillcounter();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >&
      skillcounter() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >*
      mutable_skillcounter();

  // @@protoc_insertion_point(class_scope:pb.TTDEnemy)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo > unitarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTDTimeInfo > timeinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount > skillcounter_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TTDEnemy* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTDFriend</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTDFriend : public ::google::protobuf::Message {
 public:
  TTDFriend();
  virtual ~TTDFriend();

  TTDFriend(const TTDFriend& from);

  inline TTDFriend& operator=(const TTDFriend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTDFriend& default_instance();

  void Swap(TTDFriend* other);

  // implements Message ----------------------------------------------

  TTDFriend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTDFriend& from);
  void MergeFrom(const TTDFriend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUnitInfo UnitArr = 1;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTDFriend</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitInfo& unitarr(int index) const;
  inline ::pb::TUnitInfo* mutable_unitarr(int index);
  inline ::pb::TUnitInfo* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
      mutable_unitarr();

  // optional int32 EnergyLimit = 2;
  inline bool has_energylimit() const;
  inline void clear_energylimit();
  static const int kEnergyLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTDFriend</name>
  	<Function>
  		<name>energylimit</name>
  		<replaceName>EnergyLimit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_energylimit</name>
  		<replaceName>EnergyLimit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_energylimit</name>
  		<replaceName>EnergyLimit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 energylimit() const;
  inline void set_energylimit(::google::protobuf::int32 value);

  // repeated .pb.TPointBuff PointBuffArr = 3;
  inline int pointbuffarr_size() const;
  inline void clear_pointbuffarr();
  static const int kPointBuffArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTDFriend</name>
  	<Function>
  		<name>pointbuffarr</name>
  		<replaceName>PointBuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_pointbuffarr</name>
  		<replaceName>PointBuffArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_pointbuffarr</name>
  		<replaceName>PointBuffArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pointbuffarr</name>
  		<replaceName>PointBuffArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>pointbuffarr_size</name>
  		<replaceName>PointBuffArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TPointBuff& pointbuffarr(int index) const;
  inline ::pb::TPointBuff* mutable_pointbuffarr(int index);
  inline ::pb::TPointBuff* add_pointbuffarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TPointBuff >&
      pointbuffarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TPointBuff >*
      mutable_pointbuffarr();

  // optional int32 EnergyType = 4;
  inline bool has_energytype() const;
  inline void clear_energytype();
  static const int kEnergyTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTDFriend</name>
  	<Function>
  		<name>energytype</name>
  		<replaceName>EnergyType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_energytype</name>
  		<replaceName>EnergyType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_energytype</name>
  		<replaceName>EnergyType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 energytype() const;
  inline void set_energytype(::google::protobuf::int32 value);

  // optional uint32 MaxArmy1Num = 5;
  inline bool has_maxarmy1num() const;
  inline void clear_maxarmy1num();
  static const int kMaxArmy1NumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTDFriend</name>
  	<Function>
  		<name>maxarmy1num</name>
  		<replaceName>MaxArmy1Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxarmy1num</name>
  		<replaceName>MaxArmy1Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxarmy1num</name>
  		<replaceName>MaxArmy1Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxarmy1num() const;
  inline void set_maxarmy1num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTDFriend)
 private:
  inline void set_has_energylimit();
  inline void clear_has_energylimit();
  inline void set_has_energytype();
  inline void clear_has_energytype();
  inline void set_has_maxarmy1num();
  inline void clear_has_maxarmy1num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo > unitarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TPointBuff > pointbuffarr_;
  ::google::protobuf::int32 energylimit_;
  ::google::protobuf::int32 energytype_;
  ::google::protobuf::uint32 maxarmy1num_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TTDFriend* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnitInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnitInfo : public ::google::protobuf::Message {
 public:
  TUnitInfo();
  virtual ~TUnitInfo();

  TUnitInfo(const TUnitInfo& from);

  inline TUnitInfo& operator=(const TUnitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnitInfo& default_instance();

  void Swap(TUnitInfo* other);

  // implements Message ----------------------------------------------

  TUnitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnitInfo& from);
  void MergeFrom(const TUnitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // required uint32 Htid = 2;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // required uint32 Pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // required uint32 Level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 5;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional uint32 CurRage = 6;
  inline bool has_currage() const;
  inline void clear_currage();
  static const int kCurRageFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 currage() const;
  inline void set_currage(::google::protobuf::uint32 value);

  // repeated .pb.TSkillAttribute SkillArr = 7;
  inline int skillarr_size() const;
  inline void clear_skillarr();
  static const int kSkillArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>skillarr</name>
  		<replaceName>SkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_skillarr</name>
  		<replaceName>SkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_skillarr</name>
  		<replaceName>SkillArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillarr</name>
  		<replaceName>SkillArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>skillarr_size</name>
  		<replaceName>SkillArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSkillAttribute& skillarr(int index) const;
  inline ::pb::TSkillAttribute* mutable_skillarr(int index);
  inline ::pb::TSkillAttribute* add_skillarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >&
      skillarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >*
      mutable_skillarr();

  // repeated .pb.TAttribute AttrArr = 8;
  inline int attrarr_size() const;
  inline void clear_attrarr();
  static const int kAttrArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attrarr_size</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAttribute& attrarr(int index) const;
  inline ::pb::TAttribute* mutable_attrarr(int index);
  inline ::pb::TAttribute* add_attrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >&
      attrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >*
      mutable_attrarr();

  // optional uint32 BaseSizeScale = 9;
  inline bool has_basesizescale() const;
  inline void clear_basesizescale();
  static const int kBaseSizeScaleFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>basesizescale</name>
  		<replaceName>BaseSizeScale</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_basesizescale</name>
  		<replaceName>BaseSizeScale</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_basesizescale</name>
  		<replaceName>BaseSizeScale</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 basesizescale() const;
  inline void set_basesizescale(::google::protobuf::uint32 value);

  // optional uint32 TroopId = 10;
  inline bool has_troopid() const;
  inline void clear_troopid();
  static const int kTroopIdFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>troopid</name>
  		<replaceName>TroopId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_troopid</name>
  		<replaceName>TroopId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_troopid</name>
  		<replaceName>TroopId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 troopid() const;
  inline void set_troopid(::google::protobuf::uint32 value);

  // optional uint32 TroopNum = 11;
  inline bool has_troopnum() const;
  inline void clear_troopnum();
  static const int kTroopNumFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>troopnum</name>
  		<replaceName>TroopNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_troopnum</name>
  		<replaceName>TroopNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_troopnum</name>
  		<replaceName>TroopNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 troopnum() const;
  inline void set_troopnum(::google::protobuf::uint32 value);

  // optional uint32 Star = 13;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 AdvLv = 14;
  inline bool has_advlv() const;
  inline void clear_advlv();
  static const int kAdvLvFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>advlv</name>
  		<replaceName>AdvLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_advlv</name>
  		<replaceName>AdvLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_advlv</name>
  		<replaceName>AdvLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 advlv() const;
  inline void set_advlv(::google::protobuf::uint32 value);

  // optional .pb.TDebugExtraInfo DebugInfo = 15;
  inline bool has_debuginfo() const;
  inline void clear_debuginfo();
  static const int kDebugInfoFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>debuginfo</name>
  		<replaceName>DebugInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_debuginfo</name>
  		<replaceName>DebugInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_debuginfo</name>
  		<replaceName>DebugInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_debuginfo</name>
  		<replaceName>DebugInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TDebugExtraInfo& debuginfo() const;
  inline ::pb::TDebugExtraInfo* mutable_debuginfo();
  inline ::pb::TDebugExtraInfo* release_debuginfo();
  inline void set_allocated_debuginfo(::pb::TDebugExtraInfo* debuginfo);

  // optional uint64 FightForce = 16;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 LinkTo = 17;
  inline bool has_linkto() const;
  inline void clear_linkto();
  static const int kLinkToFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>linkto</name>
  		<replaceName>LinkTo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_linkto</name>
  		<replaceName>LinkTo</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_linkto</name>
  		<replaceName>LinkTo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 linkto() const;
  inline void set_linkto(::google::protobuf::uint32 value);

  // optional .pb.TWarRidingInfo WarRiding = 18;
  inline bool has_warriding() const;
  inline void clear_warriding();
  static const int kWarRidingFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>warriding</name>
  		<replaceName>WarRiding</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_warriding</name>
  		<replaceName>WarRiding</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_warriding</name>
  		<replaceName>WarRiding</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warriding</name>
  		<replaceName>WarRiding</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWarRidingInfo& warriding() const;
  inline ::pb::TWarRidingInfo* mutable_warriding();
  inline ::pb::TWarRidingInfo* release_warriding();
  inline void set_allocated_warriding(::pb::TWarRidingInfo* warriding);

  // optional uint32 ChainSoulTo = 19;
  inline bool has_chainsoulto() const;
  inline void clear_chainsoulto();
  static const int kChainSoulToFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>chainsoulto</name>
  		<replaceName>ChainSoulTo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chainsoulto</name>
  		<replaceName>ChainSoulTo</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chainsoulto</name>
  		<replaceName>ChainSoulTo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chainsoulto() const;
  inline void set_chainsoulto(::google::protobuf::uint32 value);

  // optional .pb.TBattleSoulInfo BattleSoul = 20;
  inline bool has_battlesoul() const;
  inline void clear_battlesoul();
  static const int kBattleSoulFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfo</name>
  	<Function>
  		<name>battlesoul</name>
  		<replaceName>BattleSoul</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlesoul</name>
  		<replaceName>BattleSoul</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlesoul</name>
  		<replaceName>BattleSoul</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlesoul</name>
  		<replaceName>BattleSoul</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleSoulInfo& battlesoul() const;
  inline ::pb::TBattleSoulInfo* mutable_battlesoul();
  inline ::pb::TBattleSoulInfo* release_battlesoul();
  inline void set_allocated_battlesoul(::pb::TBattleSoulInfo* battlesoul);

  // @@protoc_insertion_point(class_scope:pb.TUnitInfo)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_currage();
  inline void clear_has_currage();
  inline void set_has_basesizescale();
  inline void clear_has_basesizescale();
  inline void set_has_troopid();
  inline void clear_has_troopid();
  inline void set_has_troopnum();
  inline void clear_has_troopnum();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_advlv();
  inline void clear_has_advlv();
  inline void set_has_debuginfo();
  inline void clear_has_debuginfo();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_linkto();
  inline void clear_has_linkto();
  inline void set_has_warriding();
  inline void clear_has_warriding();
  inline void set_has_chainsoulto();
  inline void clear_has_chainsoulto();
  inline void set_has_battlesoul();
  inline void clear_has_battlesoul();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute > skillarr_;
  ::google::protobuf::uint32 currage_;
  ::google::protobuf::uint32 basesizescale_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAttribute > attrarr_;
  ::google::protobuf::uint32 troopid_;
  ::google::protobuf::uint32 troopnum_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 advlv_;
  ::pb::TDebugExtraInfo* debuginfo_;
  ::google::protobuf::uint64 fightforce_;
  ::pb::TWarRidingInfo* warriding_;
  ::google::protobuf::uint32 linkto_;
  ::google::protobuf::uint32 chainsoulto_;
  ::pb::TBattleSoulInfo* battlesoul_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TUnitInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArmyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArmyInfo : public ::google::protobuf::Message {
 public:
  TArmyInfo();
  virtual ~TArmyInfo();

  TArmyInfo(const TArmyInfo& from);

  inline TArmyInfo& operator=(const TArmyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArmyInfo& default_instance();

  void Swap(TArmyInfo* other);

  // implements Message ----------------------------------------------

  TArmyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArmyInfo& from);
  void MergeFrom(const TArmyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUnitInfo UnitArr = 1;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArmyInfo</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitInfo& unitarr(int index) const;
  inline ::pb::TUnitInfo* mutable_unitarr(int index);
  inline ::pb::TUnitInfo* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
      mutable_unitarr();

  // optional string PlayerName = 2;
  inline bool has_playername() const;
  inline void clear_playername();
  static const int kPlayerNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TArmyInfo</name>
  	<Function>
  		<name>playername</name>
  		<replaceName>PlayerName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playername</name>
  		<replaceName>PlayerName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playername</name>
  		<replaceName>PlayerName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& playername() const;
  inline void set_playername(const ::std::string& value);
  inline void set_playername(const char* value);
  inline void set_playername(const char* value, size_t size);
  inline ::std::string* mutable_playername();
  inline ::std::string* release_playername();
  inline void set_allocated_playername(::std::string* playername);

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TArmyInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 HeadId = 4;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TArmyInfo</name>
  	<Function>
  		<name>headid</name>
  		<replaceName>HeadId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_headid</name>
  		<replaceName>HeadId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_headid</name>
  		<replaceName>HeadId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint64 Uid = 5;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TArmyInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // repeated .pb.TSkillAttribute ArmySkillArr = 6;
  inline int armyskillarr_size() const;
  inline void clear_armyskillarr();
  static const int kArmySkillArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TArmyInfo</name>
  	<Function>
  		<name>armyskillarr</name>
  		<replaceName>ArmySkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armyskillarr</name>
  		<replaceName>ArmySkillArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armyskillarr</name>
  		<replaceName>ArmySkillArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyskillarr</name>
  		<replaceName>ArmySkillArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armyskillarr_size</name>
  		<replaceName>ArmySkillArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSkillAttribute& armyskillarr(int index) const;
  inline ::pb::TSkillAttribute* mutable_armyskillarr(int index);
  inline ::pb::TSkillAttribute* add_armyskillarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >&
      armyskillarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >*
      mutable_armyskillarr();

  // optional int32 ArmyId = 7;
  inline bool has_armyid() const;
  inline void clear_armyid();
  static const int kArmyIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TArmyInfo</name>
  	<Function>
  		<name>armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 armyid() const;
  inline void set_armyid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TArmyInfo)
 private:
  inline void set_has_playername();
  inline void clear_has_playername();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_armyid();
  inline void clear_has_armyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo > unitarr_;
  ::std::string* playername_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::int32 armyid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute > armyskillarr_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TArmyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TSceneInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TSceneInfo : public ::google::protobuf::Message {
 public:
  TSceneInfo();
  virtual ~TSceneInfo();

  TSceneInfo(const TSceneInfo& from);

  inline TSceneInfo& operator=(const TSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TSceneInfo& default_instance();

  void Swap(TSceneInfo* other);

  // implements Message ----------------------------------------------

  TSceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TSceneInfo& from);
  void MergeFrom(const TSceneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ConfName = 1;
  inline bool has_confname() const;
  inline void clear_confname();
  static const int kConfNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TSceneInfo</name>
  	<Function>
  		<name>confname</name>
  		<replaceName>ConfName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_confname</name>
  		<replaceName>ConfName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_confname</name>
  		<replaceName>ConfName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& confname() const;
  inline void set_confname(const ::std::string& value);
  inline void set_confname(const char* value);
  inline void set_confname(const char* value, size_t size);
  inline ::std::string* mutable_confname();
  inline ::std::string* release_confname();
  inline void set_allocated_confname(::std::string* confname);

  // required uint32 ConfIndex = 2;
  inline bool has_confindex() const;
  inline void clear_confindex();
  static const int kConfIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TSceneInfo</name>
  	<Function>
  		<name>confindex</name>
  		<replaceName>ConfIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_confindex</name>
  		<replaceName>ConfIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_confindex</name>
  		<replaceName>ConfIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 confindex() const;
  inline void set_confindex(::google::protobuf::uint32 value);

  // required uint32 TimeLimit = 3;
  inline bool has_timelimit() const;
  inline void clear_timelimit();
  static const int kTimeLimitFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TSceneInfo</name>
  	<Function>
  		<name>timelimit</name>
  		<replaceName>TimeLimit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_timelimit</name>
  		<replaceName>TimeLimit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_timelimit</name>
  		<replaceName>TimeLimit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 timelimit() const;
  inline void set_timelimit(::google::protobuf::uint32 value);

  // optional uint32 CutSceneMethod = 4;
  inline bool has_cutscenemethod() const;
  inline void clear_cutscenemethod();
  static const int kCutSceneMethodFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TSceneInfo</name>
  	<Function>
  		<name>cutscenemethod</name>
  		<replaceName>CutSceneMethod</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cutscenemethod</name>
  		<replaceName>CutSceneMethod</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cutscenemethod</name>
  		<replaceName>CutSceneMethod</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cutscenemethod() const;
  inline void set_cutscenemethod(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TSceneInfo)
 private:
  inline void set_has_confname();
  inline void clear_has_confname();
  inline void set_has_confindex();
  inline void clear_has_confindex();
  inline void set_has_timelimit();
  inline void clear_has_timelimit();
  inline void set_has_cutscenemethod();
  inline void clear_has_cutscenemethod();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* confname_;
  ::google::protobuf::uint32 confindex_;
  ::google::protobuf::uint32 timelimit_;
  ::google::protobuf::uint32 cutscenemethod_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TSceneInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TExtraOption</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TExtraOption : public ::google::protobuf::Message {
 public:
  TExtraOption();
  virtual ~TExtraOption();

  TExtraOption(const TExtraOption& from);

  inline TExtraOption& operator=(const TExtraOption& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TExtraOption& default_instance();

  void Swap(TExtraOption* other);

  // implements Message ----------------------------------------------

  TExtraOption* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TExtraOption& from);
  void MergeFrom(const TExtraOption& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool NeedAuto = 1;
  inline bool has_needauto() const;
  inline void clear_needauto();
  static const int kNeedAutoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>needauto</name>
  		<replaceName>NeedAuto</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needauto</name>
  		<replaceName>NeedAuto</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needauto</name>
  		<replaceName>NeedAuto</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool needauto() const;
  inline void set_needauto(bool value);

  // optional bool LayerHideAuto = 2;
  inline bool has_layerhideauto() const;
  inline void clear_layerhideauto();
  static const int kLayerHideAutoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerhideauto</name>
  		<replaceName>LayerHideAuto</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerhideauto</name>
  		<replaceName>LayerHideAuto</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerhideauto</name>
  		<replaceName>LayerHideAuto</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool layerhideauto() const;
  inline void set_layerhideauto(bool value);

  // optional bool LayerHideHeadShot = 3;
  inline bool has_layerhideheadshot() const;
  inline void clear_layerhideheadshot();
  static const int kLayerHideHeadShotFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerhideheadshot</name>
  		<replaceName>LayerHideHeadShot</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerhideheadshot</name>
  		<replaceName>LayerHideHeadShot</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerhideheadshot</name>
  		<replaceName>LayerHideHeadShot</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool layerhideheadshot() const;
  inline void set_layerhideheadshot(bool value);

  // optional bool LayerHideSkip = 4;
  inline bool has_layerhideskip() const;
  inline void clear_layerhideskip();
  static const int kLayerHideSkipFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerhideskip</name>
  		<replaceName>LayerHideSkip</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerhideskip</name>
  		<replaceName>LayerHideSkip</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerhideskip</name>
  		<replaceName>LayerHideSkip</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool layerhideskip() const;
  inline void set_layerhideskip(bool value);

  // optional bool LayerHideSpeed = 5;
  inline bool has_layerhidespeed() const;
  inline void clear_layerhidespeed();
  static const int kLayerHideSpeedFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerhidespeed</name>
  		<replaceName>LayerHideSpeed</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerhidespeed</name>
  		<replaceName>LayerHideSpeed</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerhidespeed</name>
  		<replaceName>LayerHideSpeed</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool layerhidespeed() const;
  inline void set_layerhidespeed(bool value);

  // optional bool LayerHidePause = 6;
  inline bool has_layerhidepause() const;
  inline void clear_layerhidepause();
  static const int kLayerHidePauseFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerhidepause</name>
  		<replaceName>LayerHidePause</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerhidepause</name>
  		<replaceName>LayerHidePause</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerhidepause</name>
  		<replaceName>LayerHidePause</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool layerhidepause() const;
  inline void set_layerhidepause(bool value);

  // optional bool IsFirstAttack = 7;
  inline bool has_isfirstattack() const;
  inline void clear_isfirstattack();
  static const int kIsFirstAttackFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>isfirstattack</name>
  		<replaceName>IsFirstAttack</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isfirstattack</name>
  		<replaceName>IsFirstAttack</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isfirstattack</name>
  		<replaceName>IsFirstAttack</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isfirstattack() const;
  inline void set_isfirstattack(bool value);

  // optional bool NeedDoStatistics = 8;
  inline bool has_needdostatistics() const;
  inline void clear_needdostatistics();
  static const int kNeedDoStatisticsFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>needdostatistics</name>
  		<replaceName>NeedDoStatistics</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needdostatistics</name>
  		<replaceName>NeedDoStatistics</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needdostatistics</name>
  		<replaceName>NeedDoStatistics</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool needdostatistics() const;
  inline void set_needdostatistics(bool value);

  // optional uint32 LayerSkipHideTime = 9;
  inline bool has_layerskiphidetime() const;
  inline void clear_layerskiphidetime();
  static const int kLayerSkipHideTimeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerskiphidetime</name>
  		<replaceName>LayerSkipHideTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerskiphidetime</name>
  		<replaceName>LayerSkipHideTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerskiphidetime</name>
  		<replaceName>LayerSkipHideTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerskiphidetime() const;
  inline void set_layerskiphidetime(::google::protobuf::uint32 value);

  // optional uint32 UnlockLevel = 10;
  inline bool has_unlocklevel() const;
  inline void clear_unlocklevel();
  static const int kUnlockLevelFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>unlocklevel</name>
  		<replaceName>UnlockLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_unlocklevel</name>
  		<replaceName>UnlockLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unlocklevel</name>
  		<replaceName>UnlockLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 unlocklevel() const;
  inline void set_unlocklevel(::google::protobuf::uint32 value);

  // optional bool LayerHideTime = 11;
  inline bool has_layerhidetime() const;
  inline void clear_layerhidetime();
  static const int kLayerHideTimeFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerhidetime</name>
  		<replaceName>LayerHideTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerhidetime</name>
  		<replaceName>LayerHideTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerhidetime</name>
  		<replaceName>LayerHideTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool layerhidetime() const;
  inline void set_layerhidetime(bool value);

  // optional bool LayerHideCoin = 12;
  inline bool has_layerhidecoin() const;
  inline void clear_layerhidecoin();
  static const int kLayerHideCoinFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerhidecoin</name>
  		<replaceName>LayerHideCoin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerhidecoin</name>
  		<replaceName>LayerHideCoin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerhidecoin</name>
  		<replaceName>LayerHideCoin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool layerhidecoin() const;
  inline void set_layerhidecoin(bool value);

  // optional bool IsStoryBattle = 13;
  inline bool has_isstorybattle() const;
  inline void clear_isstorybattle();
  static const int kIsStoryBattleFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>isstorybattle</name>
  		<replaceName>IsStoryBattle</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isstorybattle</name>
  		<replaceName>IsStoryBattle</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isstorybattle</name>
  		<replaceName>IsStoryBattle</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isstorybattle() const;
  inline void set_isstorybattle(bool value);

  // optional bool LayerHideCameraOffset = 14;
  inline bool has_layerhidecameraoffset() const;
  inline void clear_layerhidecameraoffset();
  static const int kLayerHideCameraOffsetFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerhidecameraoffset</name>
  		<replaceName>LayerHideCameraOffset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerhidecameraoffset</name>
  		<replaceName>LayerHideCameraOffset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerhidecameraoffset</name>
  		<replaceName>LayerHideCameraOffset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool layerhidecameraoffset() const;
  inline void set_layerhidecameraoffset(bool value);

  // optional bool LayerHideScreenNum = 15;
  inline bool has_layerhidescreennum() const;
  inline void clear_layerhidescreennum();
  static const int kLayerHideScreenNumFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerhidescreennum</name>
  		<replaceName>LayerHideScreenNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerhidescreennum</name>
  		<replaceName>LayerHideScreenNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerhidescreennum</name>
  		<replaceName>LayerHideScreenNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool layerhidescreennum() const;
  inline void set_layerhidescreennum(bool value);

  // optional bool LayerHideChat = 16;
  inline bool has_layerhidechat() const;
  inline void clear_layerhidechat();
  static const int kLayerHideChatFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerhidechat</name>
  		<replaceName>LayerHideChat</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerhidechat</name>
  		<replaceName>LayerHideChat</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerhidechat</name>
  		<replaceName>LayerHideChat</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool layerhidechat() const;
  inline void set_layerhidechat(bool value);

  // optional bool LayerHideRestart = 17;
  inline bool has_layerhiderestart() const;
  inline void clear_layerhiderestart();
  static const int kLayerHideRestartFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>layerhiderestart</name>
  		<replaceName>LayerHideRestart</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerhiderestart</name>
  		<replaceName>LayerHideRestart</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerhiderestart</name>
  		<replaceName>LayerHideRestart</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool layerhiderestart() const;
  inline void set_layerhiderestart(bool value);

  // optional .pb.TSpecialEntrance SpecialEntrance = 18;
  inline bool has_specialentrance() const;
  inline void clear_specialentrance();
  static const int kSpecialEntranceFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>TExtraOption</name>
  	<Function>
  		<name>specialentrance</name>
  		<replaceName>SpecialEntrance</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_specialentrance</name>
  		<replaceName>SpecialEntrance</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_specialentrance</name>
  		<replaceName>SpecialEntrance</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_specialentrance</name>
  		<replaceName>SpecialEntrance</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSpecialEntrance& specialentrance() const;
  inline ::pb::TSpecialEntrance* mutable_specialentrance();
  inline ::pb::TSpecialEntrance* release_specialentrance();
  inline void set_allocated_specialentrance(::pb::TSpecialEntrance* specialentrance);

  // @@protoc_insertion_point(class_scope:pb.TExtraOption)
 private:
  inline void set_has_needauto();
  inline void clear_has_needauto();
  inline void set_has_layerhideauto();
  inline void clear_has_layerhideauto();
  inline void set_has_layerhideheadshot();
  inline void clear_has_layerhideheadshot();
  inline void set_has_layerhideskip();
  inline void clear_has_layerhideskip();
  inline void set_has_layerhidespeed();
  inline void clear_has_layerhidespeed();
  inline void set_has_layerhidepause();
  inline void clear_has_layerhidepause();
  inline void set_has_isfirstattack();
  inline void clear_has_isfirstattack();
  inline void set_has_needdostatistics();
  inline void clear_has_needdostatistics();
  inline void set_has_layerskiphidetime();
  inline void clear_has_layerskiphidetime();
  inline void set_has_unlocklevel();
  inline void clear_has_unlocklevel();
  inline void set_has_layerhidetime();
  inline void clear_has_layerhidetime();
  inline void set_has_layerhidecoin();
  inline void clear_has_layerhidecoin();
  inline void set_has_isstorybattle();
  inline void clear_has_isstorybattle();
  inline void set_has_layerhidecameraoffset();
  inline void clear_has_layerhidecameraoffset();
  inline void set_has_layerhidescreennum();
  inline void clear_has_layerhidescreennum();
  inline void set_has_layerhidechat();
  inline void clear_has_layerhidechat();
  inline void set_has_layerhiderestart();
  inline void clear_has_layerhiderestart();
  inline void set_has_specialentrance();
  inline void clear_has_specialentrance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool needauto_;
  bool layerhideauto_;
  bool layerhideheadshot_;
  bool layerhideskip_;
  bool layerhidespeed_;
  bool layerhidepause_;
  bool isfirstattack_;
  bool needdostatistics_;
  ::google::protobuf::uint32 layerskiphidetime_;
  ::google::protobuf::uint32 unlocklevel_;
  bool layerhidetime_;
  bool layerhidecoin_;
  bool isstorybattle_;
  bool layerhidecameraoffset_;
  bool layerhidescreennum_;
  bool layerhidechat_;
  bool layerhiderestart_;
  ::pb::TSpecialEntrance* specialentrance_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TExtraOption* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleUserInput</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleUserInput : public ::google::protobuf::Message {
 public:
  TBattleUserInput();
  virtual ~TBattleUserInput();

  TBattleUserInput(const TBattleUserInput& from);

  inline TBattleUserInput& operator=(const TBattleUserInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleUserInput& default_instance();

  void Swap(TBattleUserInput* other);

  // implements Message ----------------------------------------------

  TBattleUserInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleUserInput& from);
  void MergeFrom(const TBattleUserInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBattleFieldInput Input = 1;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleUserInput</name>
  	<Function>
  		<name>input</name>
  		<replaceName>Input</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_input</name>
  		<replaceName>Input</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_input</name>
  		<replaceName>Input</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_input</name>
  		<replaceName>Input</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>input_size</name>
  		<replaceName>Input</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleFieldInput& input(int index) const;
  inline ::pb::TBattleFieldInput* mutable_input(int index);
  inline ::pb::TBattleFieldInput* add_input();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleFieldInput >&
      input() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleFieldInput >*
      mutable_input();

  // @@protoc_insertion_point(class_scope:pb.TBattleUserInput)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBattleFieldInput > input_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBattleUserInput* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleFieldInput</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleFieldInput : public ::google::protobuf::Message {
 public:
  TBattleFieldInput();
  virtual ~TBattleFieldInput();

  TBattleFieldInput(const TBattleFieldInput& from);

  inline TBattleFieldInput& operator=(const TBattleFieldInput& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleFieldInput& default_instance();

  void Swap(TBattleFieldInput* other);

  // implements Message ----------------------------------------------

  TBattleFieldInput* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleFieldInput& from);
  void MergeFrom(const TBattleFieldInput& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 FrameTime = 1;
  inline bool has_frametime() const;
  inline void clear_frametime();
  static const int kFrameTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleFieldInput</name>
  	<Function>
  		<name>frametime</name>
  		<replaceName>FrameTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_frametime</name>
  		<replaceName>FrameTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_frametime</name>
  		<replaceName>FrameTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 frametime() const;
  inline void set_frametime(::google::protobuf::int32 value);

  // optional uint32 Eid = 2;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBattleFieldInput</name>
  	<Function>
  		<name>eid</name>
  		<replaceName>Eid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eid</name>
  		<replaceName>Eid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eid</name>
  		<replaceName>Eid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eid() const;
  inline void set_eid(::google::protobuf::uint32 value);

  // required uint32 Event = 3;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBattleFieldInput</name>
  	<Function>
  		<name>event</name>
  		<replaceName>Event</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_event</name>
  		<replaceName>Event</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_event</name>
  		<replaceName>Event</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 event() const;
  inline void set_event(::google::protobuf::uint32 value);

  // optional uint32 FieldNum = 4;
  inline bool has_fieldnum() const;
  inline void clear_fieldnum();
  static const int kFieldNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBattleFieldInput</name>
  	<Function>
  		<name>fieldnum</name>
  		<replaceName>FieldNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldnum</name>
  		<replaceName>FieldNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldnum</name>
  		<replaceName>FieldNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fieldnum() const;
  inline void set_fieldnum(::google::protobuf::uint32 value);

  // optional uint32 Index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBattleFieldInput</name>
  	<Function>
  		<name>index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 Data1 = 6;
  inline bool has_data1() const;
  inline void clear_data1();
  static const int kData1FieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBattleFieldInput</name>
  	<Function>
  		<name>data1</name>
  		<replaceName>Data1</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_data1</name>
  		<replaceName>Data1</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_data1</name>
  		<replaceName>Data1</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 data1() const;
  inline void set_data1(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBattleFieldInput)
 private:
  inline void set_has_frametime();
  inline void clear_has_frametime();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_fieldnum();
  inline void clear_has_fieldnum();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_data1();
  inline void clear_has_data1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 frametime_;
  ::google::protobuf::uint32 eid_;
  ::google::protobuf::uint32 event_;
  ::google::protobuf::uint32 fieldnum_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 data1_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBattleFieldInput* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleArgs</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleArgs : public ::google::protobuf::Message {
 public:
  TBattleArgs();
  virtual ~TBattleArgs();

  TBattleArgs(const TBattleArgs& from);

  inline TBattleArgs& operator=(const TBattleArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleArgs& default_instance();

  void Swap(TBattleArgs* other);

  // implements Message ----------------------------------------------

  TBattleArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleArgs& from);
  void MergeFrom(const TBattleArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.EBattleType BattleType = 1;
  inline bool has_battletype() const;
  inline void clear_battletype();
  static const int kBattleTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>battletype</name>
  		<replaceName>BattleType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battletype</name>
  		<replaceName>BattleType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battletype</name>
  		<replaceName>BattleType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBattleType battletype() const;
  inline void set_battletype(::pb::EBattleType value);

  // repeated .pb.TArmyInfo Army1Arr = 2;
  inline int army1arr_size() const;
  inline void clear_army1arr();
  static const int kArmy1ArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>army1arr_size</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyInfo& army1arr(int index) const;
  inline ::pb::TArmyInfo* mutable_army1arr(int index);
  inline ::pb::TArmyInfo* add_army1arr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
      army1arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
      mutable_army1arr();

  // repeated .pb.TArmyInfo Army2Arr = 3;
  inline int army2arr_size() const;
  inline void clear_army2arr();
  static const int kArmy2ArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>army2arr_size</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyInfo& army2arr(int index) const;
  inline ::pb::TArmyInfo* mutable_army2arr(int index);
  inline ::pb::TArmyInfo* add_army2arr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
      army2arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
      mutable_army2arr();

  // repeated .pb.TSceneInfo SceneConf = 4;
  inline int sceneconf_size() const;
  inline void clear_sceneconf();
  static const int kSceneConfFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>sceneconf</name>
  		<replaceName>SceneConf</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_sceneconf</name>
  		<replaceName>SceneConf</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_sceneconf</name>
  		<replaceName>SceneConf</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneconf</name>
  		<replaceName>SceneConf</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>sceneconf_size</name>
  		<replaceName>SceneConf</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSceneInfo& sceneconf(int index) const;
  inline ::pb::TSceneInfo* mutable_sceneconf(int index);
  inline ::pb::TSceneInfo* add_sceneconf();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSceneInfo >&
      sceneconf() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSceneInfo >*
      mutable_sceneconf();

  // repeated uint32 BehaviorIdArr = 5;
  inline int behavioridarr_size() const;
  inline void clear_behavioridarr();
  static const int kBehaviorIdArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>behavioridarr</name>
  		<replaceName>BehaviorIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_behavioridarr</name>
  		<replaceName>BehaviorIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_behavioridarr</name>
  		<replaceName>BehaviorIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_behavioridarr</name>
  		<replaceName>BehaviorIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>behavioridarr_size</name>
  		<replaceName>BehaviorIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 behavioridarr(int index) const;
  inline void set_behavioridarr(int index, ::google::protobuf::uint32 value);
  inline void add_behavioridarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      behavioridarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_behavioridarr();

  // optional uint32 FrameDelt = 6;
  inline bool has_framedelt() const;
  inline void clear_framedelt();
  static const int kFrameDeltFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>framedelt</name>
  		<replaceName>FrameDelt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_framedelt</name>
  		<replaceName>FrameDelt</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_framedelt</name>
  		<replaceName>FrameDelt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 framedelt() const;
  inline void set_framedelt(::google::protobuf::uint32 value);

  // required uint32 RandomSeed = 7;
  inline bool has_randomseed() const;
  inline void clear_randomseed();
  static const int kRandomSeedFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>randomseed</name>
  		<replaceName>RandomSeed</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_randomseed</name>
  		<replaceName>RandomSeed</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_randomseed</name>
  		<replaceName>RandomSeed</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 randomseed() const;
  inline void set_randomseed(::google::protobuf::uint32 value);

  // optional .pb.TExtraOption ExtraOption = 8;
  inline bool has_extraoption() const;
  inline void clear_extraoption();
  static const int kExtraOptionFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>extraoption</name>
  		<replaceName>ExtraOption</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extraoption</name>
  		<replaceName>ExtraOption</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_extraoption</name>
  		<replaceName>ExtraOption</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extraoption</name>
  		<replaceName>ExtraOption</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TExtraOption& extraoption() const;
  inline ::pb::TExtraOption* mutable_extraoption();
  inline ::pb::TExtraOption* release_extraoption();
  inline void set_allocated_extraoption(::pb::TExtraOption* extraoption);

  // optional uint32 BattleId = 9;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleIdFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleid() const;
  inline void set_battleid(::google::protobuf::uint32 value);

  // optional .pb.EBattleStarter BattleStarter = 10;
  inline bool has_battlestarter() const;
  inline void clear_battlestarter();
  static const int kBattleStarterFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>battlestarter</name>
  		<replaceName>BattleStarter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlestarter</name>
  		<replaceName>BattleStarter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlestarter</name>
  		<replaceName>BattleStarter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBattleStarter battlestarter() const;
  inline void set_battlestarter(::pb::EBattleStarter value);

  // optional .pb.TBattleUserInput RecordInputs = 13;
  inline bool has_recordinputs() const;
  inline void clear_recordinputs();
  static const int kRecordInputsFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>recordinputs</name>
  		<replaceName>RecordInputs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordinputs</name>
  		<replaceName>RecordInputs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_recordinputs</name>
  		<replaceName>RecordInputs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordinputs</name>
  		<replaceName>RecordInputs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleUserInput& recordinputs() const;
  inline ::pb::TBattleUserInput* mutable_recordinputs();
  inline ::pb::TBattleUserInput* release_recordinputs();
  inline void set_allocated_recordinputs(::pb::TBattleUserInput* recordinputs);

  // optional bool HasUserInput = 12;
  inline bool has_hasuserinput() const;
  inline void clear_hasuserinput();
  static const int kHasUserInputFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>hasuserinput</name>
  		<replaceName>HasUserInput</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hasuserinput</name>
  		<replaceName>HasUserInput</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hasuserinput</name>
  		<replaceName>HasUserInput</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool hasuserinput() const;
  inline void set_hasuserinput(bool value);

  // optional string FrontendVersion = 14;
  inline bool has_frontendversion() const;
  inline void clear_frontendversion();
  static const int kFrontendVersionFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>frontendversion</name>
  		<replaceName>FrontendVersion</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_frontendversion</name>
  		<replaceName>FrontendVersion</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_frontendversion</name>
  		<replaceName>FrontendVersion</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& frontendversion() const;
  inline void set_frontendversion(const ::std::string& value);
  inline void set_frontendversion(const char* value);
  inline void set_frontendversion(const char* value, size_t size);
  inline ::std::string* mutable_frontendversion();
  inline ::std::string* release_frontendversion();
  inline void set_allocated_frontendversion(::std::string* frontendversion);

  // optional .pb.TRankInfo RankInfo = 15;
  inline bool has_rankinfo() const;
  inline void clear_rankinfo();
  static const int kRankInfoFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRankInfo& rankinfo() const;
  inline ::pb::TRankInfo* mutable_rankinfo();
  inline ::pb::TRankInfo* release_rankinfo();
  inline void set_allocated_rankinfo(::pb::TRankInfo* rankinfo);

  // optional .pb.TTDEnemy TDEnemy = 16;
  inline bool has_tdenemy() const;
  inline void clear_tdenemy();
  static const int kTDEnemyFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>tdenemy</name>
  		<replaceName>TDEnemy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tdenemy</name>
  		<replaceName>TDEnemy</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_tdenemy</name>
  		<replaceName>TDEnemy</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tdenemy</name>
  		<replaceName>TDEnemy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTDEnemy& tdenemy() const;
  inline ::pb::TTDEnemy* mutable_tdenemy();
  inline ::pb::TTDEnemy* release_tdenemy();
  inline void set_allocated_tdenemy(::pb::TTDEnemy* tdenemy);

  // optional .pb.TTDFriend TDFriend = 17;
  inline bool has_tdfriend() const;
  inline void clear_tdfriend();
  static const int kTDFriendFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>tdfriend</name>
  		<replaceName>TDFriend</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tdfriend</name>
  		<replaceName>TDFriend</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_tdfriend</name>
  		<replaceName>TDFriend</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tdfriend</name>
  		<replaceName>TDFriend</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTDFriend& tdfriend() const;
  inline ::pb::TTDFriend* mutable_tdfriend();
  inline ::pb::TTDFriend* release_tdfriend();
  inline void set_allocated_tdfriend(::pb::TTDFriend* tdfriend);

  // optional .pb.TTDRecordInfo TDRecordInfo = 18;
  inline bool has_tdrecordinfo() const;
  inline void clear_tdrecordinfo();
  static const int kTDRecordInfoFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>tdrecordinfo</name>
  		<replaceName>TDRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tdrecordinfo</name>
  		<replaceName>TDRecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_tdrecordinfo</name>
  		<replaceName>TDRecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tdrecordinfo</name>
  		<replaceName>TDRecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTDRecordInfo& tdrecordinfo() const;
  inline ::pb::TTDRecordInfo* mutable_tdrecordinfo();
  inline ::pb::TTDRecordInfo* release_tdrecordinfo();
  inline void set_allocated_tdrecordinfo(::pb::TTDRecordInfo* tdrecordinfo);

  // optional .pb.TWheelWarRidingInfo WheelWarRidingInfo = 19;
  inline bool has_wheelwarridinginfo() const;
  inline void clear_wheelwarridinginfo();
  static const int kWheelWarRidingInfoFieldNumber = 19;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>wheelwarridinginfo</name>
  		<replaceName>WheelWarRidingInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_wheelwarridinginfo</name>
  		<replaceName>WheelWarRidingInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_wheelwarridinginfo</name>
  		<replaceName>WheelWarRidingInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wheelwarridinginfo</name>
  		<replaceName>WheelWarRidingInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWheelWarRidingInfo& wheelwarridinginfo() const;
  inline ::pb::TWheelWarRidingInfo* mutable_wheelwarridinginfo();
  inline ::pb::TWheelWarRidingInfo* release_wheelwarridinginfo();
  inline void set_allocated_wheelwarridinginfo(::pb::TWheelWarRidingInfo* wheelwarridinginfo);

  // optional string BackendVersion = 20;
  inline bool has_backendversion() const;
  inline void clear_backendversion();
  static const int kBackendVersionFieldNumber = 20;
  /*FOR2LUA
  <Record>
  	<name>TBattleArgs</name>
  	<Function>
  		<name>backendversion</name>
  		<replaceName>BackendVersion</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_backendversion</name>
  		<replaceName>BackendVersion</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_backendversion</name>
  		<replaceName>BackendVersion</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& backendversion() const;
  inline void set_backendversion(const ::std::string& value);
  inline void set_backendversion(const char* value);
  inline void set_backendversion(const char* value, size_t size);
  inline ::std::string* mutable_backendversion();
  inline ::std::string* release_backendversion();
  inline void set_allocated_backendversion(::std::string* backendversion);

  // @@protoc_insertion_point(class_scope:pb.TBattleArgs)
 private:
  inline void set_has_battletype();
  inline void clear_has_battletype();
  inline void set_has_framedelt();
  inline void clear_has_framedelt();
  inline void set_has_randomseed();
  inline void clear_has_randomseed();
  inline void set_has_extraoption();
  inline void clear_has_extraoption();
  inline void set_has_battleid();
  inline void clear_has_battleid();
  inline void set_has_battlestarter();
  inline void clear_has_battlestarter();
  inline void set_has_recordinputs();
  inline void clear_has_recordinputs();
  inline void set_has_hasuserinput();
  inline void clear_has_hasuserinput();
  inline void set_has_frontendversion();
  inline void clear_has_frontendversion();
  inline void set_has_rankinfo();
  inline void clear_has_rankinfo();
  inline void set_has_tdenemy();
  inline void clear_has_tdenemy();
  inline void set_has_tdfriend();
  inline void clear_has_tdfriend();
  inline void set_has_tdrecordinfo();
  inline void clear_has_tdrecordinfo();
  inline void set_has_wheelwarridinginfo();
  inline void clear_has_wheelwarridinginfo();
  inline void set_has_backendversion();
  inline void clear_has_backendversion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo > army1arr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo > army2arr_;
  int battletype_;
  ::google::protobuf::uint32 framedelt_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSceneInfo > sceneconf_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > behavioridarr_;
  ::pb::TExtraOption* extraoption_;
  ::google::protobuf::uint32 randomseed_;
  ::google::protobuf::uint32 battleid_;
  ::pb::TBattleUserInput* recordinputs_;
  int battlestarter_;
  bool hasuserinput_;
  ::std::string* frontendversion_;
  ::pb::TRankInfo* rankinfo_;
  ::pb::TTDEnemy* tdenemy_;
  ::pb::TTDFriend* tdfriend_;
  ::pb::TTDRecordInfo* tdrecordinfo_;
  ::pb::TWheelWarRidingInfo* wheelwarridinginfo_;
  ::std::string* backendversion_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBattleArgs* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnitInfoAfterBattle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnitInfoAfterBattle : public ::google::protobuf::Message {
 public:
  TUnitInfoAfterBattle();
  virtual ~TUnitInfoAfterBattle();

  TUnitInfoAfterBattle(const TUnitInfoAfterBattle& from);

  inline TUnitInfoAfterBattle& operator=(const TUnitInfoAfterBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnitInfoAfterBattle& default_instance();

  void Swap(TUnitInfoAfterBattle* other);

  // implements Message ----------------------------------------------

  TUnitInfoAfterBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnitInfoAfterBattle& from);
  void MergeFrom(const TUnitInfoAfterBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // required uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 3;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 4;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // optional uint32 CurRage = 5;
  inline bool has_currage() const;
  inline void clear_currage();
  static const int kCurRageFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 currage() const;
  inline void set_currage(::google::protobuf::uint32 value);

  // optional uint64 DamageOut = 6;
  inline bool has_damageout() const;
  inline void clear_damageout();
  static const int kDamageOutFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damageout</name>
  		<replaceName>DamageOut</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damageout() const;
  inline void set_damageout(::google::protobuf::uint64 value);

  // optional uint64 DamageIn = 7;
  inline bool has_damagein() const;
  inline void clear_damagein();
  static const int kDamageInFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagein</name>
  		<replaceName>DamageIn</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damagein() const;
  inline void set_damagein(::google::protobuf::uint64 value);

  // optional uint32 InjuredSoldier = 8;
  inline bool has_injuredsoldier() const;
  inline void clear_injuredsoldier();
  static const int kInjuredSoldierFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>injuredsoldier</name>
  		<replaceName>InjuredSoldier</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_injuredsoldier</name>
  		<replaceName>InjuredSoldier</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_injuredsoldier</name>
  		<replaceName>InjuredSoldier</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 injuredsoldier() const;
  inline void set_injuredsoldier(::google::protobuf::uint32 value);

  // optional uint32 DeadSoldier = 9;
  inline bool has_deadsoldier() const;
  inline void clear_deadsoldier();
  static const int kDeadSoldierFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>deadsoldier</name>
  		<replaceName>DeadSoldier</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deadsoldier</name>
  		<replaceName>DeadSoldier</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deadsoldier</name>
  		<replaceName>DeadSoldier</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 deadsoldier() const;
  inline void set_deadsoldier(::google::protobuf::uint32 value);

  // optional uint32 KillEnemySoldier = 10;
  inline bool has_killenemysoldier() const;
  inline void clear_killenemysoldier();
  static const int kKillEnemySoldierFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>killenemysoldier</name>
  		<replaceName>KillEnemySoldier</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_killenemysoldier</name>
  		<replaceName>KillEnemySoldier</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_killenemysoldier</name>
  		<replaceName>KillEnemySoldier</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 killenemysoldier() const;
  inline void set_killenemysoldier(::google::protobuf::uint32 value);

  // optional uint32 Htid = 11;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional .pb.TUnitStatistics UnitStatistic = 12;
  inline bool has_unitstatistic() const;
  inline void clear_unitstatistic();
  static const int kUnitStatisticFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>unitstatistic</name>
  		<replaceName>UnitStatistic</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_unitstatistic</name>
  		<replaceName>UnitStatistic</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_unitstatistic</name>
  		<replaceName>UnitStatistic</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitstatistic</name>
  		<replaceName>UnitStatistic</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitStatistics& unitstatistic() const;
  inline ::pb::TUnitStatistics* mutable_unitstatistic();
  inline ::pb::TUnitStatistics* release_unitstatistic();
  inline void set_allocated_unitstatistic(::pb::TUnitStatistics* unitstatistic);

  // optional uint64 HealOut = 13;
  inline bool has_healout() const;
  inline void clear_healout();
  static const int kHealOutFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TUnitInfoAfterBattle</name>
  	<Function>
  		<name>healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_healout</name>
  		<replaceName>HealOut</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 healout() const;
  inline void set_healout(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUnitInfoAfterBattle)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_currage();
  inline void clear_has_currage();
  inline void set_has_damageout();
  inline void clear_has_damageout();
  inline void set_has_damagein();
  inline void clear_has_damagein();
  inline void set_has_injuredsoldier();
  inline void clear_has_injuredsoldier();
  inline void set_has_deadsoldier();
  inline void clear_has_deadsoldier();
  inline void set_has_killenemysoldier();
  inline void clear_has_killenemysoldier();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_unitstatistic();
  inline void clear_has_unitstatistic();
  inline void set_has_healout();
  inline void clear_has_healout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint64 damageout_;
  ::google::protobuf::uint32 currage_;
  ::google::protobuf::uint32 injuredsoldier_;
  ::google::protobuf::uint64 damagein_;
  ::google::protobuf::uint32 deadsoldier_;
  ::google::protobuf::uint32 killenemysoldier_;
  ::pb::TUnitStatistics* unitstatistic_;
  ::google::protobuf::uint64 healout_;
  ::google::protobuf::uint32 htid_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TUnitInfoAfterBattle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArmyInfoAfterBattle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArmyInfoAfterBattle : public ::google::protobuf::Message {
 public:
  TArmyInfoAfterBattle();
  virtual ~TArmyInfoAfterBattle();

  TArmyInfoAfterBattle(const TArmyInfoAfterBattle& from);

  inline TArmyInfoAfterBattle& operator=(const TArmyInfoAfterBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArmyInfoAfterBattle& default_instance();

  void Swap(TArmyInfoAfterBattle* other);

  // implements Message ----------------------------------------------

  TArmyInfoAfterBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArmyInfoAfterBattle& from);
  void MergeFrom(const TArmyInfoAfterBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUnitInfoAfterBattle UnitArr = 1;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArmyInfoAfterBattle</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitInfoAfterBattle& unitarr(int index) const;
  inline ::pb::TUnitInfoAfterBattle* mutable_unitarr(int index);
  inline ::pb::TUnitInfoAfterBattle* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfoAfterBattle >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfoAfterBattle >*
      mutable_unitarr();

  // @@protoc_insertion_point(class_scope:pb.TArmyInfoAfterBattle)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfoAfterBattle > unitarr_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TArmyInfoAfterBattle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleResult</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleResult : public ::google::protobuf::Message {
 public:
  TBattleResult();
  virtual ~TBattleResult();

  TBattleResult(const TBattleResult& from);

  inline TBattleResult& operator=(const TBattleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleResult& default_instance();

  void Swap(TBattleResult* other);

  // implements Message ----------------------------------------------

  TBattleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleResult& from);
  void MergeFrom(const TBattleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // required uint32 StarLevel = 2;
  inline bool has_starlevel() const;
  inline void clear_starlevel();
  static const int kStarLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>starlevel</name>
  		<replaceName>StarLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlevel</name>
  		<replaceName>StarLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlevel</name>
  		<replaceName>StarLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlevel() const;
  inline void set_starlevel(::google::protobuf::uint32 value);

  // optional string ErrMsg = 3;
  inline bool has_errmsg() const;
  inline void clear_errmsg();
  static const int kErrMsgFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>errmsg</name>
  		<replaceName>ErrMsg</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_errmsg</name>
  		<replaceName>ErrMsg</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_errmsg</name>
  		<replaceName>ErrMsg</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& errmsg() const;
  inline void set_errmsg(const ::std::string& value);
  inline void set_errmsg(const char* value);
  inline void set_errmsg(const char* value, size_t size);
  inline ::std::string* mutable_errmsg();
  inline ::std::string* release_errmsg();
  inline void set_allocated_errmsg(::std::string* errmsg);

  // repeated .pb.TArmyInfoAfterBattle Army1Arr = 5;
  inline int army1arr_size() const;
  inline void clear_army1arr();
  static const int kArmy1ArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army1arr</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>army1arr_size</name>
  		<replaceName>Army1Arr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyInfoAfterBattle& army1arr(int index) const;
  inline ::pb::TArmyInfoAfterBattle* mutable_army1arr(int index);
  inline ::pb::TArmyInfoAfterBattle* add_army1arr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfoAfterBattle >&
      army1arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfoAfterBattle >*
      mutable_army1arr();

  // repeated .pb.TArmyInfoAfterBattle Army2Arr = 6;
  inline int army2arr_size() const;
  inline void clear_army2arr();
  static const int kArmy2ArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_army2arr</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>army2arr_size</name>
  		<replaceName>Army2Arr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyInfoAfterBattle& army2arr(int index) const;
  inline ::pb::TArmyInfoAfterBattle* mutable_army2arr(int index);
  inline ::pb::TArmyInfoAfterBattle* add_army2arr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfoAfterBattle >&
      army2arr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfoAfterBattle >*
      mutable_army2arr();

  // optional bytes BattleReportStr = 7;
  inline bool has_battlereportstr() const;
  inline void clear_battlereportstr();
  static const int kBattleReportStrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>battlereportstr</name>
  		<replaceName>BattleReportStr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlereportstr</name>
  		<replaceName>BattleReportStr</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlereportstr</name>
  		<replaceName>BattleReportStr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battlereportstr() const;
  inline void set_battlereportstr(const ::std::string& value);
  inline void set_battlereportstr(const char* value);
  inline void set_battlereportstr(const void* value, size_t size);
  inline ::std::string* mutable_battlereportstr();
  inline ::std::string* release_battlereportstr();
  inline void set_allocated_battlereportstr(::std::string* battlereportstr);

  // optional uint64 BattleTime = 8;
  inline bool has_battletime() const;
  inline void clear_battletime();
  static const int kBattleTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>battletime</name>
  		<replaceName>BattleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battletime</name>
  		<replaceName>BattleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battletime</name>
  		<replaceName>BattleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 battletime() const;
  inline void set_battletime(::google::protobuf::uint64 value);

  // optional string BattleFirewallVersion = 9;
  inline bool has_battlefirewallversion() const;
  inline void clear_battlefirewallversion();
  static const int kBattleFirewallVersionFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>battlefirewallversion</name>
  		<replaceName>BattleFirewallVersion</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlefirewallversion</name>
  		<replaceName>BattleFirewallVersion</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlefirewallversion</name>
  		<replaceName>BattleFirewallVersion</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battlefirewallversion() const;
  inline void set_battlefirewallversion(const ::std::string& value);
  inline void set_battlefirewallversion(const char* value);
  inline void set_battlefirewallversion(const char* value, size_t size);
  inline ::std::string* mutable_battlefirewallversion();
  inline ::std::string* release_battlefirewallversion();
  inline void set_allocated_battlefirewallversion(::std::string* battlefirewallversion);

  // optional uint32 ScreenIndex = 10;
  inline bool has_screenindex() const;
  inline void clear_screenindex();
  static const int kScreenIndexFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>screenindex</name>
  		<replaceName>ScreenIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_screenindex</name>
  		<replaceName>ScreenIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_screenindex</name>
  		<replaceName>ScreenIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 screenindex() const;
  inline void set_screenindex(::google::protobuf::uint32 value);

  // optional uint64 RecordId = 11;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordid() const;
  inline void set_recordid(::google::protobuf::uint64 value);

  // optional .pb.TBattleBTRecord BattleBTRecord = 12;
  inline bool has_battlebtrecord() const;
  inline void clear_battlebtrecord();
  static const int kBattleBTRecordFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>battlebtrecord</name>
  		<replaceName>BattleBTRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlebtrecord</name>
  		<replaceName>BattleBTRecord</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlebtrecord</name>
  		<replaceName>BattleBTRecord</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlebtrecord</name>
  		<replaceName>BattleBTRecord</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleBTRecord& battlebtrecord() const;
  inline ::pb::TBattleBTRecord* mutable_battlebtrecord();
  inline ::pb::TBattleBTRecord* release_battlebtrecord();
  inline void set_allocated_battlebtrecord(::pb::TBattleBTRecord* battlebtrecord);

  // optional .pb.TSkillCountInfo SkillCountInfo = 13;
  inline bool has_skillcountinfo() const;
  inline void clear_skillcountinfo();
  static const int kSkillCountInfoFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>skillcountinfo</name>
  		<replaceName>SkillCountInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_skillcountinfo</name>
  		<replaceName>SkillCountInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_skillcountinfo</name>
  		<replaceName>SkillCountInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_skillcountinfo</name>
  		<replaceName>SkillCountInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSkillCountInfo& skillcountinfo() const;
  inline ::pb::TSkillCountInfo* mutable_skillcountinfo();
  inline ::pb::TSkillCountInfo* release_skillcountinfo();
  inline void set_allocated_skillcountinfo(::pb::TSkillCountInfo* skillcountinfo);

  // optional uint32 ValidWaveNumber = 14;
  inline bool has_validwavenumber() const;
  inline void clear_validwavenumber();
  static const int kValidWaveNumberFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>validwavenumber</name>
  		<replaceName>ValidWaveNumber</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_validwavenumber</name>
  		<replaceName>ValidWaveNumber</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_validwavenumber</name>
  		<replaceName>ValidWaveNumber</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 validwavenumber() const;
  inline void set_validwavenumber(::google::protobuf::uint32 value);

  // optional .pb.TTDRecordInfo TDRecordInfo = 15;
  inline bool has_tdrecordinfo() const;
  inline void clear_tdrecordinfo();
  static const int kTDRecordInfoFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>tdrecordinfo</name>
  		<replaceName>TDRecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tdrecordinfo</name>
  		<replaceName>TDRecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_tdrecordinfo</name>
  		<replaceName>TDRecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tdrecordinfo</name>
  		<replaceName>TDRecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTDRecordInfo& tdrecordinfo() const;
  inline ::pb::TTDRecordInfo* mutable_tdrecordinfo();
  inline ::pb::TTDRecordInfo* release_tdrecordinfo();
  inline void set_allocated_tdrecordinfo(::pb::TTDRecordInfo* tdrecordinfo);

  // optional uint32 ResultId = 16;
  inline bool has_resultid() const;
  inline void clear_resultid();
  static const int kResultIdFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>resultid</name>
  		<replaceName>ResultId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resultid</name>
  		<replaceName>ResultId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resultid</name>
  		<replaceName>ResultId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resultid() const;
  inline void set_resultid(::google::protobuf::uint32 value);

  // optional .pb.TWheelWarFieldStatus WheelWarFieldStatus = 17;
  inline bool has_wheelwarfieldstatus() const;
  inline void clear_wheelwarfieldstatus();
  static const int kWheelWarFieldStatusFieldNumber = 17;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>wheelwarfieldstatus</name>
  		<replaceName>WheelWarFieldStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_wheelwarfieldstatus</name>
  		<replaceName>WheelWarFieldStatus</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_wheelwarfieldstatus</name>
  		<replaceName>WheelWarFieldStatus</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wheelwarfieldstatus</name>
  		<replaceName>WheelWarFieldStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TWheelWarFieldStatus& wheelwarfieldstatus() const;
  inline ::pb::TWheelWarFieldStatus* mutable_wheelwarfieldstatus();
  inline ::pb::TWheelWarFieldStatus* release_wheelwarfieldstatus();
  inline void set_allocated_wheelwarfieldstatus(::pb::TWheelWarFieldStatus* wheelwarfieldstatus);

  // optional bool Questioned = 18;
  inline bool has_questioned() const;
  inline void clear_questioned();
  static const int kQuestionedFieldNumber = 18;
  /*FOR2LUA
  <Record>
  	<name>TBattleResult</name>
  	<Function>
  		<name>questioned</name>
  		<replaceName>Questioned</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_questioned</name>
  		<replaceName>Questioned</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_questioned</name>
  		<replaceName>Questioned</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool questioned() const;
  inline void set_questioned(bool value);

  // @@protoc_insertion_point(class_scope:pb.TBattleResult)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();
  inline void set_has_starlevel();
  inline void clear_has_starlevel();
  inline void set_has_errmsg();
  inline void clear_has_errmsg();
  inline void set_has_battlereportstr();
  inline void clear_has_battlereportstr();
  inline void set_has_battletime();
  inline void clear_has_battletime();
  inline void set_has_battlefirewallversion();
  inline void clear_has_battlefirewallversion();
  inline void set_has_screenindex();
  inline void clear_has_screenindex();
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_battlebtrecord();
  inline void clear_has_battlebtrecord();
  inline void set_has_skillcountinfo();
  inline void clear_has_skillcountinfo();
  inline void set_has_validwavenumber();
  inline void clear_has_validwavenumber();
  inline void set_has_tdrecordinfo();
  inline void clear_has_tdrecordinfo();
  inline void set_has_resultid();
  inline void clear_has_resultid();
  inline void set_has_wheelwarfieldstatus();
  inline void clear_has_wheelwarfieldstatus();
  inline void set_has_questioned();
  inline void clear_has_questioned();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  ::std::string* errmsg_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfoAfterBattle > army1arr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfoAfterBattle > army2arr_;
  ::google::protobuf::uint32 starlevel_;
  ::google::protobuf::uint32 screenindex_;
  ::std::string* battlereportstr_;
  ::google::protobuf::uint64 battletime_;
  ::std::string* battlefirewallversion_;
  ::google::protobuf::uint64 recordid_;
  ::pb::TBattleBTRecord* battlebtrecord_;
  ::pb::TSkillCountInfo* skillcountinfo_;
  ::pb::TTDRecordInfo* tdrecordinfo_;
  ::google::protobuf::uint32 validwavenumber_;
  ::google::protobuf::uint32 resultid_;
  ::pb::TWheelWarFieldStatus* wheelwarfieldstatus_;
  bool questioned_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBattleResult* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleBTRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleBTRecord : public ::google::protobuf::Message {
 public:
  TBattleBTRecord();
  virtual ~TBattleBTRecord();

  TBattleBTRecord(const TBattleBTRecord& from);

  inline TBattleBTRecord& operator=(const TBattleBTRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleBTRecord& default_instance();

  void Swap(TBattleBTRecord* other);

  // implements Message ----------------------------------------------

  TBattleBTRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleBTRecord& from);
  void MergeFrom(const TBattleBTRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBTActionInfo BTActionInfoArr = 1;
  inline int btactioninfoarr_size() const;
  inline void clear_btactioninfoarr();
  static const int kBTActionInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleBTRecord</name>
  	<Function>
  		<name>btactioninfoarr</name>
  		<replaceName>BTActionInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_btactioninfoarr</name>
  		<replaceName>BTActionInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_btactioninfoarr</name>
  		<replaceName>BTActionInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_btactioninfoarr</name>
  		<replaceName>BTActionInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>btactioninfoarr_size</name>
  		<replaceName>BTActionInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBTActionInfo& btactioninfoarr(int index) const;
  inline ::pb::TBTActionInfo* mutable_btactioninfoarr(int index);
  inline ::pb::TBTActionInfo* add_btactioninfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBTActionInfo >&
      btactioninfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBTActionInfo >*
      mutable_btactioninfoarr();

  // @@protoc_insertion_point(class_scope:pb.TBattleBTRecord)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBTActionInfo > btactioninfoarr_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBattleBTRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGroupMatchResult</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGroupMatchResult : public ::google::protobuf::Message {
 public:
  TGroupMatchResult();
  virtual ~TGroupMatchResult();

  TGroupMatchResult(const TGroupMatchResult& from);

  inline TGroupMatchResult& operator=(const TGroupMatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupMatchResult& default_instance();

  void Swap(TGroupMatchResult* other);

  // implements Message ----------------------------------------------

  TGroupMatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupMatchResult& from);
  void MergeFrom(const TGroupMatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.EGroupMatchType Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGroupMatchResult</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGroupMatchType type() const;
  inline void set_type(::pb::EGroupMatchType value);

  // repeated .pb.TBattleResult GroupResults = 2;
  inline int groupresults_size() const;
  inline void clear_groupresults();
  static const int kGroupResultsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGroupMatchResult</name>
  	<Function>
  		<name>groupresults</name>
  		<replaceName>GroupResults</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_groupresults</name>
  		<replaceName>GroupResults</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_groupresults</name>
  		<replaceName>GroupResults</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_groupresults</name>
  		<replaceName>GroupResults</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>groupresults_size</name>
  		<replaceName>GroupResults</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& groupresults(int index) const;
  inline ::pb::TBattleResult* mutable_groupresults(int index);
  inline ::pb::TBattleResult* add_groupresults();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleResult >&
      groupresults() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleResult >*
      mutable_groupresults();

  // repeated .pb.TArmyInfo GroupArmys = 3;
  inline int grouparmys_size() const;
  inline void clear_grouparmys();
  static const int kGroupArmysFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGroupMatchResult</name>
  	<Function>
  		<name>grouparmys</name>
  		<replaceName>GroupArmys</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_grouparmys</name>
  		<replaceName>GroupArmys</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_grouparmys</name>
  		<replaceName>GroupArmys</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grouparmys</name>
  		<replaceName>GroupArmys</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>grouparmys_size</name>
  		<replaceName>GroupArmys</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyInfo& grouparmys(int index) const;
  inline ::pb::TArmyInfo* mutable_grouparmys(int index);
  inline ::pb::TArmyInfo* add_grouparmys();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
      grouparmys() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
      mutable_grouparmys();

  // @@protoc_insertion_point(class_scope:pb.TGroupMatchResult)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBattleResult > groupresults_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo > grouparmys_;
  int type_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TGroupMatchResult* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGroupMatchArgs</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGroupMatchArgs : public ::google::protobuf::Message {
 public:
  TGroupMatchArgs();
  virtual ~TGroupMatchArgs();

  TGroupMatchArgs(const TGroupMatchArgs& from);

  inline TGroupMatchArgs& operator=(const TGroupMatchArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGroupMatchArgs& default_instance();

  void Swap(TGroupMatchArgs* other);

  // implements Message ----------------------------------------------

  TGroupMatchArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGroupMatchArgs& from);
  void MergeFrom(const TGroupMatchArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pb.EGroupMatchType Type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGroupMatchArgs</name>
  	<Function>
  		<name>type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>Type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGroupMatchType type() const;
  inline void set_type(::pb::EGroupMatchType value);

  // optional .pb.TBattleArgs BaseBattleArgs = 2;
  inline bool has_basebattleargs() const;
  inline void clear_basebattleargs();
  static const int kBaseBattleArgsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGroupMatchArgs</name>
  	<Function>
  		<name>basebattleargs</name>
  		<replaceName>BaseBattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_basebattleargs</name>
  		<replaceName>BaseBattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_basebattleargs</name>
  		<replaceName>BaseBattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_basebattleargs</name>
  		<replaceName>BaseBattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& basebattleargs() const;
  inline ::pb::TBattleArgs* mutable_basebattleargs();
  inline ::pb::TBattleArgs* release_basebattleargs();
  inline void set_allocated_basebattleargs(::pb::TBattleArgs* basebattleargs);

  // repeated .pb.TArmyInfo GroupArmys = 3;
  inline int grouparmys_size() const;
  inline void clear_grouparmys();
  static const int kGroupArmysFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGroupMatchArgs</name>
  	<Function>
  		<name>grouparmys</name>
  		<replaceName>GroupArmys</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_grouparmys</name>
  		<replaceName>GroupArmys</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_grouparmys</name>
  		<replaceName>GroupArmys</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grouparmys</name>
  		<replaceName>GroupArmys</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>grouparmys_size</name>
  		<replaceName>GroupArmys</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyInfo& grouparmys(int index) const;
  inline ::pb::TArmyInfo* mutable_grouparmys(int index);
  inline ::pb::TArmyInfo* add_grouparmys();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
      grouparmys() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
      mutable_grouparmys();

  // @@protoc_insertion_point(class_scope:pb.TGroupMatchArgs)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_basebattleargs();
  inline void clear_has_basebattleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* basebattleargs_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo > grouparmys_;
  int type_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TGroupMatchArgs* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleResultReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleResultReq : public ::google::protobuf::Message {
 public:
  TBattleResultReq();
  virtual ~TBattleResultReq();

  TBattleResultReq(const TBattleResultReq& from);

  inline TBattleResultReq& operator=(const TBattleResultReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleResultReq& default_instance();

  void Swap(TBattleResultReq* other);

  // implements Message ----------------------------------------------

  TBattleResultReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleResultReq& from);
  void MergeFrom(const TBattleResultReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 rid = 1;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleResultReq</name>
  	<Function>
  		<name>rid</name>
  		<replaceName>rid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rid</name>
  		<replaceName>rid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rid</name>
  		<replaceName>rid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBattleResultReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TBattleResultReq)
 private:
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rid_;
  ::std::string* serverid_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBattleResultReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleLocalResultReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleLocalResultReq : public ::google::protobuf::Message {
 public:
  TBattleLocalResultReq();
  virtual ~TBattleLocalResultReq();

  TBattleLocalResultReq(const TBattleLocalResultReq& from);

  inline TBattleLocalResultReq& operator=(const TBattleLocalResultReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleLocalResultReq& default_instance();

  void Swap(TBattleLocalResultReq* other);

  // implements Message ----------------------------------------------

  TBattleLocalResultReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleLocalResultReq& from);
  void MergeFrom(const TBattleLocalResultReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string LocalId = 1;
  inline bool has_localid() const;
  inline void clear_localid();
  static const int kLocalIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleLocalResultReq</name>
  	<Function>
  		<name>localid</name>
  		<replaceName>LocalId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_localid</name>
  		<replaceName>LocalId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_localid</name>
  		<replaceName>LocalId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& localid() const;
  inline void set_localid(const ::std::string& value);
  inline void set_localid(const char* value);
  inline void set_localid(const char* value, size_t size);
  inline ::std::string* mutable_localid();
  inline ::std::string* release_localid();
  inline void set_allocated_localid(::std::string* localid);

  // optional uint64 Rid = 2;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBattleLocalResultReq</name>
  	<Function>
  		<name>rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rid</name>
  		<replaceName>Rid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rid() const;
  inline void set_rid(::google::protobuf::uint64 value);

  // optional string ServerId = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBattleLocalResultReq</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TBattleLocalResultReq)
 private:
  inline void set_has_localid();
  inline void clear_has_localid();
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* localid_;
  ::google::protobuf::uint64 rid_;
  ::std::string* serverid_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBattleLocalResultReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleResultRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleResultRsp : public ::google::protobuf::Message {
 public:
  TBattleResultRsp();
  virtual ~TBattleResultRsp();

  TBattleResultRsp(const TBattleResultRsp& from);

  inline TBattleResultRsp& operator=(const TBattleResultRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleResultRsp& default_instance();

  void Swap(TBattleResultRsp* other);

  // implements Message ----------------------------------------------

  TBattleResultRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleResultRsp& from);
  void MergeFrom(const TBattleResultRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleResult battleResult = 1;
  inline bool has_battleresult() const;
  inline void clear_battleresult();
  static const int kBattleResultFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleResultRsp</name>
  	<Function>
  		<name>battleresult</name>
  		<replaceName>battleResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresult</name>
  		<replaceName>battleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleresult</name>
  		<replaceName>battleResult</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresult</name>
  		<replaceName>battleResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleresult() const;
  inline ::pb::TBattleResult* mutable_battleresult();
  inline ::pb::TBattleResult* release_battleresult();
  inline void set_allocated_battleresult(::pb::TBattleResult* battleresult);

  // @@protoc_insertion_point(class_scope:pb.TBattleResultRsp)
 private:
  inline void set_has_battleresult();
  inline void clear_has_battleresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleResult* battleresult_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBattleResultRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBattleCheckParam</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBattleCheckParam : public ::google::protobuf::Message {
 public:
  TBattleCheckParam();
  virtual ~TBattleCheckParam();

  TBattleCheckParam(const TBattleCheckParam& from);

  inline TBattleCheckParam& operator=(const TBattleCheckParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBattleCheckParam& default_instance();

  void Swap(TBattleCheckParam* other);

  // implements Message ----------------------------------------------

  TBattleCheckParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBattleCheckParam& from);
  void MergeFrom(const TBattleCheckParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string BattleConfVer = 1;
  inline bool has_battleconfver() const;
  inline void clear_battleconfver();
  static const int kBattleConfVerFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBattleCheckParam</name>
  	<Function>
  		<name>battleconfver</name>
  		<replaceName>BattleConfVer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleconfver</name>
  		<replaceName>BattleConfVer</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleconfver</name>
  		<replaceName>BattleConfVer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleconfver() const;
  inline void set_battleconfver(const ::std::string& value);
  inline void set_battleconfver(const char* value);
  inline void set_battleconfver(const char* value, size_t size);
  inline ::std::string* mutable_battleconfver();
  inline ::std::string* release_battleconfver();
  inline void set_allocated_battleconfver(::std::string* battleconfver);

  // repeated .pb.TArmyFormation MyArmyFormation = 2;
  inline int myarmyformation_size() const;
  inline void clear_myarmyformation();
  static const int kMyArmyFormationFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBattleCheckParam</name>
  	<Function>
  		<name>myarmyformation</name>
  		<replaceName>MyArmyFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_myarmyformation</name>
  		<replaceName>MyArmyFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_myarmyformation</name>
  		<replaceName>MyArmyFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myarmyformation</name>
  		<replaceName>MyArmyFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>myarmyformation_size</name>
  		<replaceName>MyArmyFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyFormation& myarmyformation(int index) const;
  inline ::pb::TArmyFormation* mutable_myarmyformation(int index);
  inline ::pb::TArmyFormation* add_myarmyformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyFormation >&
      myarmyformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyFormation >*
      mutable_myarmyformation();

  // @@protoc_insertion_point(class_scope:pb.TBattleCheckParam)
 private:
  inline void set_has_battleconfver();
  inline void clear_has_battleconfver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleconfver_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyFormation > myarmyformation_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBattleCheckParam* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TArmyFormation</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TArmyFormation : public ::google::protobuf::Message {
 public:
  TArmyFormation();
  virtual ~TArmyFormation();

  TArmyFormation(const TArmyFormation& from);

  inline TArmyFormation& operator=(const TArmyFormation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TArmyFormation& default_instance();

  void Swap(TArmyFormation* other);

  // implements Message ----------------------------------------------

  TArmyFormation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TArmyFormation& from);
  void MergeFrom(const TArmyFormation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUnitFormation TeamFormation = 1;
  inline int teamformation_size() const;
  inline void clear_teamformation();
  static const int kTeamFormationFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TArmyFormation</name>
  	<Function>
  		<name>teamformation</name>
  		<replaceName>TeamFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_teamformation</name>
  		<replaceName>TeamFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_teamformation</name>
  		<replaceName>TeamFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamformation</name>
  		<replaceName>TeamFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>teamformation_size</name>
  		<replaceName>TeamFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitFormation& teamformation(int index) const;
  inline ::pb::TUnitFormation* mutable_teamformation(int index);
  inline ::pb::TUnitFormation* add_teamformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
      teamformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
      mutable_teamformation();

  // @@protoc_insertion_point(class_scope:pb.TArmyFormation)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation > teamformation_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TArmyFormation* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUnitFormation</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUnitFormation : public ::google::protobuf::Message {
 public:
  TUnitFormation();
  virtual ~TUnitFormation();

  TUnitFormation(const TUnitFormation& from);

  inline TUnitFormation& operator=(const TUnitFormation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUnitFormation& default_instance();

  void Swap(TUnitFormation* other);

  // implements Message ----------------------------------------------

  TUnitFormation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUnitFormation& from);
  void MergeFrom(const TUnitFormation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUnitFormation</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUnitFormation</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUnitFormation)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TUnitFormation* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGetBattleArgsWithUidListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGetBattleArgsWithUidListRsp : public ::google::protobuf::Message {
 public:
  TGetBattleArgsWithUidListRsp();
  virtual ~TGetBattleArgsWithUidListRsp();

  TGetBattleArgsWithUidListRsp(const TGetBattleArgsWithUidListRsp& from);

  inline TGetBattleArgsWithUidListRsp& operator=(const TGetBattleArgsWithUidListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGetBattleArgsWithUidListRsp& default_instance();

  void Swap(TGetBattleArgsWithUidListRsp* other);

  // implements Message ----------------------------------------------

  TGetBattleArgsWithUidListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGetBattleArgsWithUidListRsp& from);
  void MergeFrom(const TGetBattleArgsWithUidListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TArmyInfo OtherUserArmyArr = 1;
  inline int otheruserarmyarr_size() const;
  inline void clear_otheruserarmyarr();
  static const int kOtherUserArmyArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsWithUidListRsp</name>
  	<Function>
  		<name>otheruserarmyarr</name>
  		<replaceName>OtherUserArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_otheruserarmyarr</name>
  		<replaceName>OtherUserArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_otheruserarmyarr</name>
  		<replaceName>OtherUserArmyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_otheruserarmyarr</name>
  		<replaceName>OtherUserArmyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>otheruserarmyarr_size</name>
  		<replaceName>OtherUserArmyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyInfo& otheruserarmyarr(int index) const;
  inline ::pb::TArmyInfo* mutable_otheruserarmyarr(int index);
  inline ::pb::TArmyInfo* add_otheruserarmyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
      otheruserarmyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
      mutable_otheruserarmyarr();

  // @@protoc_insertion_point(class_scope:pb.TGetBattleArgsWithUidListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo > otheruserarmyarr_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TGetBattleArgsWithUidListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBatchBattleArgs</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBatchBattleArgs : public ::google::protobuf::Message {
 public:
  TBatchBattleArgs();
  virtual ~TBatchBattleArgs();

  TBatchBattleArgs(const TBatchBattleArgs& from);

  inline TBatchBattleArgs& operator=(const TBatchBattleArgs& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBatchBattleArgs& default_instance();

  void Swap(TBatchBattleArgs* other);

  // implements Message ----------------------------------------------

  TBatchBattleArgs* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBatchBattleArgs& from);
  void MergeFrom(const TBatchBattleArgs& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBattleArgs BattleArgsArr = 1;
  inline int battleargsarr_size() const;
  inline void clear_battleargsarr();
  static const int kBattleArgsArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBatchBattleArgs</name>
  	<Function>
  		<name>battleargsarr</name>
  		<replaceName>BattleArgsArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battleargsarr</name>
  		<replaceName>BattleArgsArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battleargsarr</name>
  		<replaceName>BattleArgsArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargsarr</name>
  		<replaceName>BattleArgsArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battleargsarr_size</name>
  		<replaceName>BattleArgsArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargsarr(int index) const;
  inline ::pb::TBattleArgs* mutable_battleargsarr(int index);
  inline ::pb::TBattleArgs* add_battleargsarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >&
      battleargsarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >*
      mutable_battleargsarr();

  // @@protoc_insertion_point(class_scope:pb.TBatchBattleArgs)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs > battleargsarr_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBatchBattleArgs* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBatchBattleResult</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBatchBattleResult : public ::google::protobuf::Message {
 public:
  TBatchBattleResult();
  virtual ~TBatchBattleResult();

  TBatchBattleResult(const TBatchBattleResult& from);

  inline TBatchBattleResult& operator=(const TBatchBattleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBatchBattleResult& default_instance();

  void Swap(TBatchBattleResult* other);

  // implements Message ----------------------------------------------

  TBatchBattleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBatchBattleResult& from);
  void MergeFrom(const TBatchBattleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes BattleResultArr = 1;
  inline int battleresultarr_size() const;
  inline void clear_battleresultarr();
  static const int kBattleResultArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBatchBattleResult</name>
  	<Function>
  		<name>battleresultarr</name>
  		<replaceName>BattleResultArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battleresultarr</name>
  		<replaceName>BattleResultArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battleresultarr</name>
  		<replaceName>BattleResultArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresultarr</name>
  		<replaceName>BattleResultArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battleresultarr_size</name>
  		<replaceName>BattleResultArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresultarr(int index) const;
  inline ::std::string* mutable_battleresultarr(int index);
  inline void set_battleresultarr(int index, const ::std::string& value);
  inline void set_battleresultarr(int index, const char* value);
  inline void set_battleresultarr(int index, const void* value, size_t size);
  inline ::std::string* add_battleresultarr();
  inline void add_battleresultarr(const ::std::string& value);
  inline void add_battleresultarr(const char* value);
  inline void add_battleresultarr(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& battleresultarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_battleresultarr();

  // @@protoc_insertion_point(class_scope:pb.TBatchBattleResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> battleresultarr_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TBatchBattleResult* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGetBattleArgsWithParamReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGetBattleArgsWithParamReq : public ::google::protobuf::Message {
 public:
  TGetBattleArgsWithParamReq();
  virtual ~TGetBattleArgsWithParamReq();

  TGetBattleArgsWithParamReq(const TGetBattleArgsWithParamReq& from);

  inline TGetBattleArgsWithParamReq& operator=(const TGetBattleArgsWithParamReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGetBattleArgsWithParamReq& default_instance();

  void Swap(TGetBattleArgsWithParamReq* other);

  // implements Message ----------------------------------------------

  TGetBattleArgsWithParamReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGetBattleArgsWithParamReq& from);
  void MergeFrom(const TGetBattleArgsWithParamReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 BattleInfoId = 1;
  inline bool has_battleinfoid() const;
  inline void clear_battleinfoid();
  static const int kBattleInfoIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsWithParamReq</name>
  	<Function>
  		<name>battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleinfoid() const;
  inline void set_battleinfoid(::google::protobuf::uint32 value);

  // required .pb.EBattleStarter BattleStarter = 2;
  inline bool has_battlestarter() const;
  inline void clear_battlestarter();
  static const int kBattleStarterFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsWithParamReq</name>
  	<Function>
  		<name>battlestarter</name>
  		<replaceName>BattleStarter</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlestarter</name>
  		<replaceName>BattleStarter</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlestarter</name>
  		<replaceName>BattleStarter</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EBattleStarter battlestarter() const;
  inline void set_battlestarter(::pb::EBattleStarter value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsWithParamReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TGetBattleArgsWithParamReq)
 private:
  inline void set_has_battleinfoid();
  inline void clear_has_battleinfoid();
  inline void set_has_battlestarter();
  inline void clear_has_battlestarter();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 battleinfoid_;
  int battlestarter_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TGetBattleArgsWithParamReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGetBattleArgsWithParamRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Battle.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGetBattleArgsWithParamRsp : public ::google::protobuf::Message {
 public:
  TGetBattleArgsWithParamRsp();
  virtual ~TGetBattleArgsWithParamRsp();

  TGetBattleArgsWithParamRsp(const TGetBattleArgsWithParamRsp& from);

  inline TGetBattleArgsWithParamRsp& operator=(const TGetBattleArgsWithParamRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGetBattleArgsWithParamRsp& default_instance();

  void Swap(TGetBattleArgsWithParamRsp* other);

  // implements Message ----------------------------------------------

  TGetBattleArgsWithParamRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGetBattleArgsWithParamRsp& from);
  void MergeFrom(const TGetBattleArgsWithParamRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGetBattleArgsWithParamRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TGetBattleArgsWithParamRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fBattle_2eproto();
  friend void protobuf_AssignDesc_net_2fBattle_2eproto();
  friend void protobuf_ShutdownFile_net_2fBattle_2eproto();

  void InitAsDefaultInstance();
  static TGetBattleArgsWithParamRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TBTActionInfo

// optional int32 CmdTime = 1;
inline bool TBTActionInfo::has_cmdtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBTActionInfo::set_has_cmdtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBTActionInfo::clear_has_cmdtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBTActionInfo::clear_cmdtime() {
  cmdtime_ = 0;
  clear_has_cmdtime();
}
inline ::google::protobuf::int32 TBTActionInfo::cmdtime() const {
  // @@protoc_insertion_point(field_get:pb.TBTActionInfo.CmdTime)
  return cmdtime_;
}
inline void TBTActionInfo::set_cmdtime(::google::protobuf::int32 value) {
  set_has_cmdtime();
  cmdtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBTActionInfo.CmdTime)
}

// required .pb.EBTAction BTAction = 2;
inline bool TBTActionInfo::has_btaction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBTActionInfo::set_has_btaction() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBTActionInfo::clear_has_btaction() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBTActionInfo::clear_btaction() {
  btaction_ = 0;
  clear_has_btaction();
}
inline ::pb::EBTAction TBTActionInfo::btaction() const {
  // @@protoc_insertion_point(field_get:pb.TBTActionInfo.BTAction)
  return static_cast< ::pb::EBTAction >(btaction_);
}
inline void TBTActionInfo::set_btaction(::pb::EBTAction value) {
  assert(::pb::EBTAction_IsValid(value));
  set_has_btaction();
  btaction_ = value;
  // @@protoc_insertion_point(field_set:pb.TBTActionInfo.BTAction)
}

// repeated int32 ParamInts = 3;
inline int TBTActionInfo::paramints_size() const {
  return paramints_.size();
}
inline void TBTActionInfo::clear_paramints() {
  paramints_.Clear();
}
inline ::google::protobuf::int32 TBTActionInfo::paramints(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBTActionInfo.ParamInts)
  return paramints_.Get(index);
}
inline void TBTActionInfo::set_paramints(int index, ::google::protobuf::int32 value) {
  paramints_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBTActionInfo.ParamInts)
}
inline void TBTActionInfo::add_paramints(::google::protobuf::int32 value) {
  paramints_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBTActionInfo.ParamInts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TBTActionInfo::paramints() const {
  // @@protoc_insertion_point(field_list:pb.TBTActionInfo.ParamInts)
  return paramints_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TBTActionInfo::mutable_paramints() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBTActionInfo.ParamInts)
  return &paramints_;
}

// repeated string ParamStrings = 4;
inline int TBTActionInfo::paramstrings_size() const {
  return paramstrings_.size();
}
inline void TBTActionInfo::clear_paramstrings() {
  paramstrings_.Clear();
}
inline const ::std::string& TBTActionInfo::paramstrings(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBTActionInfo.ParamStrings)
  return paramstrings_.Get(index);
}
inline ::std::string* TBTActionInfo::mutable_paramstrings(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBTActionInfo.ParamStrings)
  return paramstrings_.Mutable(index);
}
inline void TBTActionInfo::set_paramstrings(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TBTActionInfo.ParamStrings)
  paramstrings_.Mutable(index)->assign(value);
}
inline void TBTActionInfo::set_paramstrings(int index, const char* value) {
  paramstrings_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBTActionInfo.ParamStrings)
}
inline void TBTActionInfo::set_paramstrings(int index, const char* value, size_t size) {
  paramstrings_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBTActionInfo.ParamStrings)
}
inline ::std::string* TBTActionInfo::add_paramstrings() {
  return paramstrings_.Add();
}
inline void TBTActionInfo::add_paramstrings(const ::std::string& value) {
  paramstrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TBTActionInfo.ParamStrings)
}
inline void TBTActionInfo::add_paramstrings(const char* value) {
  paramstrings_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TBTActionInfo.ParamStrings)
}
inline void TBTActionInfo::add_paramstrings(const char* value, size_t size) {
  paramstrings_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TBTActionInfo.ParamStrings)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TBTActionInfo::paramstrings() const {
  // @@protoc_insertion_point(field_list:pb.TBTActionInfo.ParamStrings)
  return paramstrings_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TBTActionInfo::mutable_paramstrings() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBTActionInfo.ParamStrings)
  return &paramstrings_;
}

// optional int32 FieldNum = 5;
inline bool TBTActionInfo::has_fieldnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBTActionInfo::set_has_fieldnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBTActionInfo::clear_has_fieldnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBTActionInfo::clear_fieldnum() {
  fieldnum_ = 0;
  clear_has_fieldnum();
}
inline ::google::protobuf::int32 TBTActionInfo::fieldnum() const {
  // @@protoc_insertion_point(field_get:pb.TBTActionInfo.FieldNum)
  return fieldnum_;
}
inline void TBTActionInfo::set_fieldnum(::google::protobuf::int32 value) {
  set_has_fieldnum();
  fieldnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBTActionInfo.FieldNum)
}

// -------------------------------------------------------------------

// TModuleAttrInfo

// required uint32 ModuleName = 1;
inline bool TModuleAttrInfo::has_modulename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TModuleAttrInfo::set_has_modulename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TModuleAttrInfo::clear_has_modulename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TModuleAttrInfo::clear_modulename() {
  modulename_ = 0u;
  clear_has_modulename();
}
inline ::google::protobuf::uint32 TModuleAttrInfo::modulename() const {
  // @@protoc_insertion_point(field_get:pb.TModuleAttrInfo.ModuleName)
  return modulename_;
}
inline void TModuleAttrInfo::set_modulename(::google::protobuf::uint32 value) {
  set_has_modulename();
  modulename_ = value;
  // @@protoc_insertion_point(field_set:pb.TModuleAttrInfo.ModuleName)
}

// repeated .pb.TAttribute AttrArr = 2;
inline int TModuleAttrInfo::attrarr_size() const {
  return attrarr_.size();
}
inline void TModuleAttrInfo::clear_attrarr() {
  attrarr_.Clear();
}
inline const ::pb::TAttribute& TModuleAttrInfo::attrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TModuleAttrInfo.AttrArr)
  return attrarr_.Get(index);
}
inline ::pb::TAttribute* TModuleAttrInfo::mutable_attrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TModuleAttrInfo.AttrArr)
  return attrarr_.Mutable(index);
}
inline ::pb::TAttribute* TModuleAttrInfo::add_attrarr() {
  // @@protoc_insertion_point(field_add:pb.TModuleAttrInfo.AttrArr)
  return attrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >&
TModuleAttrInfo::attrarr() const {
  // @@protoc_insertion_point(field_list:pb.TModuleAttrInfo.AttrArr)
  return attrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >*
TModuleAttrInfo::mutable_attrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TModuleAttrInfo.AttrArr)
  return &attrarr_;
}

// -------------------------------------------------------------------

// TDebugExtraInfo

// repeated .pb.TModuleAttrInfo ModuleAttrInfo = 1;
inline int TDebugExtraInfo::moduleattrinfo_size() const {
  return moduleattrinfo_.size();
}
inline void TDebugExtraInfo::clear_moduleattrinfo() {
  moduleattrinfo_.Clear();
}
inline const ::pb::TModuleAttrInfo& TDebugExtraInfo::moduleattrinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TDebugExtraInfo.ModuleAttrInfo)
  return moduleattrinfo_.Get(index);
}
inline ::pb::TModuleAttrInfo* TDebugExtraInfo::mutable_moduleattrinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TDebugExtraInfo.ModuleAttrInfo)
  return moduleattrinfo_.Mutable(index);
}
inline ::pb::TModuleAttrInfo* TDebugExtraInfo::add_moduleattrinfo() {
  // @@protoc_insertion_point(field_add:pb.TDebugExtraInfo.ModuleAttrInfo)
  return moduleattrinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TModuleAttrInfo >&
TDebugExtraInfo::moduleattrinfo() const {
  // @@protoc_insertion_point(field_list:pb.TDebugExtraInfo.ModuleAttrInfo)
  return moduleattrinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TModuleAttrInfo >*
TDebugExtraInfo::mutable_moduleattrinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TDebugExtraInfo.ModuleAttrInfo)
  return &moduleattrinfo_;
}

// -------------------------------------------------------------------

// TRankSingle

// optional uint32 Hid = 1;
inline bool TRankSingle::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRankSingle::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRankSingle::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRankSingle::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TRankSingle::hid() const {
  // @@protoc_insertion_point(field_get:pb.TRankSingle.Hid)
  return hid_;
}
inline void TRankSingle::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRankSingle.Hid)
}

// optional uint32 Rank = 2;
inline bool TRankSingle::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRankSingle::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRankSingle::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRankSingle::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TRankSingle::rank() const {
  // @@protoc_insertion_point(field_get:pb.TRankSingle.Rank)
  return rank_;
}
inline void TRankSingle::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TRankSingle.Rank)
}

// -------------------------------------------------------------------

// TRankInfo

// repeated .pb.TRankSingle RankSelf = 1;
inline int TRankInfo::rankself_size() const {
  return rankself_.size();
}
inline void TRankInfo::clear_rankself() {
  rankself_.Clear();
}
inline const ::pb::TRankSingle& TRankInfo::rankself(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRankInfo.RankSelf)
  return rankself_.Get(index);
}
inline ::pb::TRankSingle* TRankInfo::mutable_rankself(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRankInfo.RankSelf)
  return rankself_.Mutable(index);
}
inline ::pb::TRankSingle* TRankInfo::add_rankself() {
  // @@protoc_insertion_point(field_add:pb.TRankInfo.RankSelf)
  return rankself_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >&
TRankInfo::rankself() const {
  // @@protoc_insertion_point(field_list:pb.TRankInfo.RankSelf)
  return rankself_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >*
TRankInfo::mutable_rankself() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRankInfo.RankSelf)
  return &rankself_;
}

// repeated .pb.TRankSingle RankEnemy = 2;
inline int TRankInfo::rankenemy_size() const {
  return rankenemy_.size();
}
inline void TRankInfo::clear_rankenemy() {
  rankenemy_.Clear();
}
inline const ::pb::TRankSingle& TRankInfo::rankenemy(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRankInfo.RankEnemy)
  return rankenemy_.Get(index);
}
inline ::pb::TRankSingle* TRankInfo::mutable_rankenemy(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRankInfo.RankEnemy)
  return rankenemy_.Mutable(index);
}
inline ::pb::TRankSingle* TRankInfo::add_rankenemy() {
  // @@protoc_insertion_point(field_add:pb.TRankInfo.RankEnemy)
  return rankenemy_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >&
TRankInfo::rankenemy() const {
  // @@protoc_insertion_point(field_list:pb.TRankInfo.RankEnemy)
  return rankenemy_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRankSingle >*
TRankInfo::mutable_rankenemy() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRankInfo.RankEnemy)
  return &rankenemy_;
}

// -------------------------------------------------------------------

// TTDEnemy

// repeated .pb.TUnitInfo UnitArr = 1;
inline int TTDEnemy::unitarr_size() const {
  return unitarr_.size();
}
inline void TTDEnemy::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TUnitInfo& TTDEnemy::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTDEnemy.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TUnitInfo* TTDEnemy::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTDEnemy.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TUnitInfo* TTDEnemy::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TTDEnemy.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
TTDEnemy::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TTDEnemy.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
TTDEnemy::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTDEnemy.UnitArr)
  return &unitarr_;
}

// repeated .pb.TTDTimeInfo TimeInfo = 2;
inline int TTDEnemy::timeinfo_size() const {
  return timeinfo_.size();
}
inline void TTDEnemy::clear_timeinfo() {
  timeinfo_.Clear();
}
inline const ::pb::TTDTimeInfo& TTDEnemy::timeinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTDEnemy.TimeInfo)
  return timeinfo_.Get(index);
}
inline ::pb::TTDTimeInfo* TTDEnemy::mutable_timeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTDEnemy.TimeInfo)
  return timeinfo_.Mutable(index);
}
inline ::pb::TTDTimeInfo* TTDEnemy::add_timeinfo() {
  // @@protoc_insertion_point(field_add:pb.TTDEnemy.TimeInfo)
  return timeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTDTimeInfo >&
TTDEnemy::timeinfo() const {
  // @@protoc_insertion_point(field_list:pb.TTDEnemy.TimeInfo)
  return timeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTDTimeInfo >*
TTDEnemy::mutable_timeinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTDEnemy.TimeInfo)
  return &timeinfo_;
}

// repeated .pb.TSkillCount SkillCounter = 3;
inline int TTDEnemy::skillcounter_size() const {
  return skillcounter_.size();
}
inline void TTDEnemy::clear_skillcounter() {
  skillcounter_.Clear();
}
inline const ::pb::TSkillCount& TTDEnemy::skillcounter(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTDEnemy.SkillCounter)
  return skillcounter_.Get(index);
}
inline ::pb::TSkillCount* TTDEnemy::mutable_skillcounter(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTDEnemy.SkillCounter)
  return skillcounter_.Mutable(index);
}
inline ::pb::TSkillCount* TTDEnemy::add_skillcounter() {
  // @@protoc_insertion_point(field_add:pb.TTDEnemy.SkillCounter)
  return skillcounter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >&
TTDEnemy::skillcounter() const {
  // @@protoc_insertion_point(field_list:pb.TTDEnemy.SkillCounter)
  return skillcounter_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillCount >*
TTDEnemy::mutable_skillcounter() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTDEnemy.SkillCounter)
  return &skillcounter_;
}

// -------------------------------------------------------------------

// TTDFriend

// repeated .pb.TUnitInfo UnitArr = 1;
inline int TTDFriend::unitarr_size() const {
  return unitarr_.size();
}
inline void TTDFriend::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TUnitInfo& TTDFriend::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTDFriend.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TUnitInfo* TTDFriend::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTDFriend.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TUnitInfo* TTDFriend::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TTDFriend.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
TTDFriend::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TTDFriend.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
TTDFriend::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTDFriend.UnitArr)
  return &unitarr_;
}

// optional int32 EnergyLimit = 2;
inline bool TTDFriend::has_energylimit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTDFriend::set_has_energylimit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTDFriend::clear_has_energylimit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTDFriend::clear_energylimit() {
  energylimit_ = 0;
  clear_has_energylimit();
}
inline ::google::protobuf::int32 TTDFriend::energylimit() const {
  // @@protoc_insertion_point(field_get:pb.TTDFriend.EnergyLimit)
  return energylimit_;
}
inline void TTDFriend::set_energylimit(::google::protobuf::int32 value) {
  set_has_energylimit();
  energylimit_ = value;
  // @@protoc_insertion_point(field_set:pb.TTDFriend.EnergyLimit)
}

// repeated .pb.TPointBuff PointBuffArr = 3;
inline int TTDFriend::pointbuffarr_size() const {
  return pointbuffarr_.size();
}
inline void TTDFriend::clear_pointbuffarr() {
  pointbuffarr_.Clear();
}
inline const ::pb::TPointBuff& TTDFriend::pointbuffarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTDFriend.PointBuffArr)
  return pointbuffarr_.Get(index);
}
inline ::pb::TPointBuff* TTDFriend::mutable_pointbuffarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTDFriend.PointBuffArr)
  return pointbuffarr_.Mutable(index);
}
inline ::pb::TPointBuff* TTDFriend::add_pointbuffarr() {
  // @@protoc_insertion_point(field_add:pb.TTDFriend.PointBuffArr)
  return pointbuffarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TPointBuff >&
TTDFriend::pointbuffarr() const {
  // @@protoc_insertion_point(field_list:pb.TTDFriend.PointBuffArr)
  return pointbuffarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TPointBuff >*
TTDFriend::mutable_pointbuffarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTDFriend.PointBuffArr)
  return &pointbuffarr_;
}

// optional int32 EnergyType = 4;
inline bool TTDFriend::has_energytype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTDFriend::set_has_energytype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTDFriend::clear_has_energytype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTDFriend::clear_energytype() {
  energytype_ = 0;
  clear_has_energytype();
}
inline ::google::protobuf::int32 TTDFriend::energytype() const {
  // @@protoc_insertion_point(field_get:pb.TTDFriend.EnergyType)
  return energytype_;
}
inline void TTDFriend::set_energytype(::google::protobuf::int32 value) {
  set_has_energytype();
  energytype_ = value;
  // @@protoc_insertion_point(field_set:pb.TTDFriend.EnergyType)
}

// optional uint32 MaxArmy1Num = 5;
inline bool TTDFriend::has_maxarmy1num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTDFriend::set_has_maxarmy1num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTDFriend::clear_has_maxarmy1num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTDFriend::clear_maxarmy1num() {
  maxarmy1num_ = 0u;
  clear_has_maxarmy1num();
}
inline ::google::protobuf::uint32 TTDFriend::maxarmy1num() const {
  // @@protoc_insertion_point(field_get:pb.TTDFriend.MaxArmy1Num)
  return maxarmy1num_;
}
inline void TTDFriend::set_maxarmy1num(::google::protobuf::uint32 value) {
  set_has_maxarmy1num();
  maxarmy1num_ = value;
  // @@protoc_insertion_point(field_set:pb.TTDFriend.MaxArmy1Num)
}

// -------------------------------------------------------------------

// TUnitInfo

// required uint32 Hid = 1;
inline bool TUnitInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnitInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnitInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnitInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TUnitInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.Hid)
  return hid_;
}
inline void TUnitInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.Hid)
}

// required uint32 Htid = 2;
inline bool TUnitInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnitInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnitInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnitInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TUnitInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.Htid)
  return htid_;
}
inline void TUnitInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.Htid)
}

// required uint32 Pos = 3;
inline bool TUnitInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnitInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnitInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnitInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TUnitInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.Pos)
  return pos_;
}
inline void TUnitInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.Pos)
}

// required uint32 Level = 4;
inline bool TUnitInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUnitInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUnitInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUnitInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TUnitInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.Level)
  return level_;
}
inline void TUnitInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.Level)
}

// optional uint64 CurHp = 5;
inline bool TUnitInfo::has_curhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUnitInfo::set_has_curhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUnitInfo::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUnitInfo::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TUnitInfo::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.CurHp)
  return curhp_;
}
inline void TUnitInfo::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.CurHp)
}

// optional uint32 CurRage = 6;
inline bool TUnitInfo::has_currage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUnitInfo::set_has_currage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUnitInfo::clear_has_currage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUnitInfo::clear_currage() {
  currage_ = 0u;
  clear_has_currage();
}
inline ::google::protobuf::uint32 TUnitInfo::currage() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.CurRage)
  return currage_;
}
inline void TUnitInfo::set_currage(::google::protobuf::uint32 value) {
  set_has_currage();
  currage_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.CurRage)
}

// repeated .pb.TSkillAttribute SkillArr = 7;
inline int TUnitInfo::skillarr_size() const {
  return skillarr_.size();
}
inline void TUnitInfo::clear_skillarr() {
  skillarr_.Clear();
}
inline const ::pb::TSkillAttribute& TUnitInfo::skillarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.SkillArr)
  return skillarr_.Get(index);
}
inline ::pb::TSkillAttribute* TUnitInfo::mutable_skillarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnitInfo.SkillArr)
  return skillarr_.Mutable(index);
}
inline ::pb::TSkillAttribute* TUnitInfo::add_skillarr() {
  // @@protoc_insertion_point(field_add:pb.TUnitInfo.SkillArr)
  return skillarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >&
TUnitInfo::skillarr() const {
  // @@protoc_insertion_point(field_list:pb.TUnitInfo.SkillArr)
  return skillarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >*
TUnitInfo::mutable_skillarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnitInfo.SkillArr)
  return &skillarr_;
}

// repeated .pb.TAttribute AttrArr = 8;
inline int TUnitInfo::attrarr_size() const {
  return attrarr_.size();
}
inline void TUnitInfo::clear_attrarr() {
  attrarr_.Clear();
}
inline const ::pb::TAttribute& TUnitInfo::attrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.AttrArr)
  return attrarr_.Get(index);
}
inline ::pb::TAttribute* TUnitInfo::mutable_attrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUnitInfo.AttrArr)
  return attrarr_.Mutable(index);
}
inline ::pb::TAttribute* TUnitInfo::add_attrarr() {
  // @@protoc_insertion_point(field_add:pb.TUnitInfo.AttrArr)
  return attrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >&
TUnitInfo::attrarr() const {
  // @@protoc_insertion_point(field_list:pb.TUnitInfo.AttrArr)
  return attrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAttribute >*
TUnitInfo::mutable_attrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUnitInfo.AttrArr)
  return &attrarr_;
}

// optional uint32 BaseSizeScale = 9;
inline bool TUnitInfo::has_basesizescale() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TUnitInfo::set_has_basesizescale() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TUnitInfo::clear_has_basesizescale() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TUnitInfo::clear_basesizescale() {
  basesizescale_ = 0u;
  clear_has_basesizescale();
}
inline ::google::protobuf::uint32 TUnitInfo::basesizescale() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.BaseSizeScale)
  return basesizescale_;
}
inline void TUnitInfo::set_basesizescale(::google::protobuf::uint32 value) {
  set_has_basesizescale();
  basesizescale_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.BaseSizeScale)
}

// optional uint32 TroopId = 10;
inline bool TUnitInfo::has_troopid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TUnitInfo::set_has_troopid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TUnitInfo::clear_has_troopid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TUnitInfo::clear_troopid() {
  troopid_ = 0u;
  clear_has_troopid();
}
inline ::google::protobuf::uint32 TUnitInfo::troopid() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.TroopId)
  return troopid_;
}
inline void TUnitInfo::set_troopid(::google::protobuf::uint32 value) {
  set_has_troopid();
  troopid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.TroopId)
}

// optional uint32 TroopNum = 11;
inline bool TUnitInfo::has_troopnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TUnitInfo::set_has_troopnum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TUnitInfo::clear_has_troopnum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TUnitInfo::clear_troopnum() {
  troopnum_ = 0u;
  clear_has_troopnum();
}
inline ::google::protobuf::uint32 TUnitInfo::troopnum() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.TroopNum)
  return troopnum_;
}
inline void TUnitInfo::set_troopnum(::google::protobuf::uint32 value) {
  set_has_troopnum();
  troopnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.TroopNum)
}

// optional uint32 Star = 13;
inline bool TUnitInfo::has_star() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TUnitInfo::set_has_star() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TUnitInfo::clear_has_star() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TUnitInfo::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 TUnitInfo::star() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.Star)
  return star_;
}
inline void TUnitInfo::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.Star)
}

// optional uint32 AdvLv = 14;
inline bool TUnitInfo::has_advlv() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TUnitInfo::set_has_advlv() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TUnitInfo::clear_has_advlv() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TUnitInfo::clear_advlv() {
  advlv_ = 0u;
  clear_has_advlv();
}
inline ::google::protobuf::uint32 TUnitInfo::advlv() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.AdvLv)
  return advlv_;
}
inline void TUnitInfo::set_advlv(::google::protobuf::uint32 value) {
  set_has_advlv();
  advlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.AdvLv)
}

// optional .pb.TDebugExtraInfo DebugInfo = 15;
inline bool TUnitInfo::has_debuginfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TUnitInfo::set_has_debuginfo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TUnitInfo::clear_has_debuginfo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TUnitInfo::clear_debuginfo() {
  if (debuginfo_ != NULL) debuginfo_->::pb::TDebugExtraInfo::Clear();
  clear_has_debuginfo();
}
inline const ::pb::TDebugExtraInfo& TUnitInfo::debuginfo() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.DebugInfo)
  return debuginfo_ != NULL ? *debuginfo_ : *default_instance_->debuginfo_;
}
inline ::pb::TDebugExtraInfo* TUnitInfo::mutable_debuginfo() {
  set_has_debuginfo();
  if (debuginfo_ == NULL) debuginfo_ = new ::pb::TDebugExtraInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUnitInfo.DebugInfo)
  return debuginfo_;
}
inline ::pb::TDebugExtraInfo* TUnitInfo::release_debuginfo() {
  clear_has_debuginfo();
  ::pb::TDebugExtraInfo* temp = debuginfo_;
  debuginfo_ = NULL;
  return temp;
}
inline void TUnitInfo::set_allocated_debuginfo(::pb::TDebugExtraInfo* debuginfo) {
  delete debuginfo_;
  debuginfo_ = debuginfo;
  if (debuginfo) {
    set_has_debuginfo();
  } else {
    clear_has_debuginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUnitInfo.DebugInfo)
}

// optional uint64 FightForce = 16;
inline bool TUnitInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TUnitInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TUnitInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TUnitInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TUnitInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.FightForce)
  return fightforce_;
}
inline void TUnitInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.FightForce)
}

// optional uint32 LinkTo = 17;
inline bool TUnitInfo::has_linkto() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TUnitInfo::set_has_linkto() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TUnitInfo::clear_has_linkto() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TUnitInfo::clear_linkto() {
  linkto_ = 0u;
  clear_has_linkto();
}
inline ::google::protobuf::uint32 TUnitInfo::linkto() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.LinkTo)
  return linkto_;
}
inline void TUnitInfo::set_linkto(::google::protobuf::uint32 value) {
  set_has_linkto();
  linkto_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.LinkTo)
}

// optional .pb.TWarRidingInfo WarRiding = 18;
inline bool TUnitInfo::has_warriding() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TUnitInfo::set_has_warriding() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TUnitInfo::clear_has_warriding() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TUnitInfo::clear_warriding() {
  if (warriding_ != NULL) warriding_->::pb::TWarRidingInfo::Clear();
  clear_has_warriding();
}
inline const ::pb::TWarRidingInfo& TUnitInfo::warriding() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.WarRiding)
  return warriding_ != NULL ? *warriding_ : *default_instance_->warriding_;
}
inline ::pb::TWarRidingInfo* TUnitInfo::mutable_warriding() {
  set_has_warriding();
  if (warriding_ == NULL) warriding_ = new ::pb::TWarRidingInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUnitInfo.WarRiding)
  return warriding_;
}
inline ::pb::TWarRidingInfo* TUnitInfo::release_warriding() {
  clear_has_warriding();
  ::pb::TWarRidingInfo* temp = warriding_;
  warriding_ = NULL;
  return temp;
}
inline void TUnitInfo::set_allocated_warriding(::pb::TWarRidingInfo* warriding) {
  delete warriding_;
  warriding_ = warriding;
  if (warriding) {
    set_has_warriding();
  } else {
    clear_has_warriding();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUnitInfo.WarRiding)
}

// optional uint32 ChainSoulTo = 19;
inline bool TUnitInfo::has_chainsoulto() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TUnitInfo::set_has_chainsoulto() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TUnitInfo::clear_has_chainsoulto() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TUnitInfo::clear_chainsoulto() {
  chainsoulto_ = 0u;
  clear_has_chainsoulto();
}
inline ::google::protobuf::uint32 TUnitInfo::chainsoulto() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.ChainSoulTo)
  return chainsoulto_;
}
inline void TUnitInfo::set_chainsoulto(::google::protobuf::uint32 value) {
  set_has_chainsoulto();
  chainsoulto_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfo.ChainSoulTo)
}

// optional .pb.TBattleSoulInfo BattleSoul = 20;
inline bool TUnitInfo::has_battlesoul() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TUnitInfo::set_has_battlesoul() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TUnitInfo::clear_has_battlesoul() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TUnitInfo::clear_battlesoul() {
  if (battlesoul_ != NULL) battlesoul_->::pb::TBattleSoulInfo::Clear();
  clear_has_battlesoul();
}
inline const ::pb::TBattleSoulInfo& TUnitInfo::battlesoul() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfo.BattleSoul)
  return battlesoul_ != NULL ? *battlesoul_ : *default_instance_->battlesoul_;
}
inline ::pb::TBattleSoulInfo* TUnitInfo::mutable_battlesoul() {
  set_has_battlesoul();
  if (battlesoul_ == NULL) battlesoul_ = new ::pb::TBattleSoulInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUnitInfo.BattleSoul)
  return battlesoul_;
}
inline ::pb::TBattleSoulInfo* TUnitInfo::release_battlesoul() {
  clear_has_battlesoul();
  ::pb::TBattleSoulInfo* temp = battlesoul_;
  battlesoul_ = NULL;
  return temp;
}
inline void TUnitInfo::set_allocated_battlesoul(::pb::TBattleSoulInfo* battlesoul) {
  delete battlesoul_;
  battlesoul_ = battlesoul;
  if (battlesoul) {
    set_has_battlesoul();
  } else {
    clear_has_battlesoul();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUnitInfo.BattleSoul)
}

// -------------------------------------------------------------------

// TArmyInfo

// repeated .pb.TUnitInfo UnitArr = 1;
inline int TArmyInfo::unitarr_size() const {
  return unitarr_.size();
}
inline void TArmyInfo::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TUnitInfo& TArmyInfo::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArmyInfo.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TUnitInfo* TArmyInfo::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArmyInfo.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TUnitInfo* TArmyInfo::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TArmyInfo.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
TArmyInfo::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TArmyInfo.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
TArmyInfo::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArmyInfo.UnitArr)
  return &unitarr_;
}

// optional string PlayerName = 2;
inline bool TArmyInfo::has_playername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TArmyInfo::set_has_playername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TArmyInfo::clear_has_playername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TArmyInfo::clear_playername() {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_->clear();
  }
  clear_has_playername();
}
inline const ::std::string& TArmyInfo::playername() const {
  // @@protoc_insertion_point(field_get:pb.TArmyInfo.PlayerName)
  return *playername_;
}
inline void TArmyInfo::set_playername(const ::std::string& value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TArmyInfo.PlayerName)
}
inline void TArmyInfo::set_playername(const char* value) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TArmyInfo.PlayerName)
}
inline void TArmyInfo::set_playername(const char* value, size_t size) {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  playername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TArmyInfo.PlayerName)
}
inline ::std::string* TArmyInfo::mutable_playername() {
  set_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    playername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TArmyInfo.PlayerName)
  return playername_;
}
inline ::std::string* TArmyInfo::release_playername() {
  clear_has_playername();
  if (playername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = playername_;
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TArmyInfo::set_allocated_playername(::std::string* playername) {
  if (playername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete playername_;
  }
  if (playername) {
    set_has_playername();
    playername_ = playername;
  } else {
    clear_has_playername();
    playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TArmyInfo.PlayerName)
}

// optional uint64 FightForce = 3;
inline bool TArmyInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TArmyInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TArmyInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TArmyInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TArmyInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TArmyInfo.FightForce)
  return fightforce_;
}
inline void TArmyInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmyInfo.FightForce)
}

// optional uint32 HeadId = 4;
inline bool TArmyInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TArmyInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TArmyInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TArmyInfo::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 TArmyInfo::headid() const {
  // @@protoc_insertion_point(field_get:pb.TArmyInfo.HeadId)
  return headid_;
}
inline void TArmyInfo::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmyInfo.HeadId)
}

// optional uint64 Uid = 5;
inline bool TArmyInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TArmyInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TArmyInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TArmyInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TArmyInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TArmyInfo.Uid)
  return uid_;
}
inline void TArmyInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmyInfo.Uid)
}

// repeated .pb.TSkillAttribute ArmySkillArr = 6;
inline int TArmyInfo::armyskillarr_size() const {
  return armyskillarr_.size();
}
inline void TArmyInfo::clear_armyskillarr() {
  armyskillarr_.Clear();
}
inline const ::pb::TSkillAttribute& TArmyInfo::armyskillarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArmyInfo.ArmySkillArr)
  return armyskillarr_.Get(index);
}
inline ::pb::TSkillAttribute* TArmyInfo::mutable_armyskillarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArmyInfo.ArmySkillArr)
  return armyskillarr_.Mutable(index);
}
inline ::pb::TSkillAttribute* TArmyInfo::add_armyskillarr() {
  // @@protoc_insertion_point(field_add:pb.TArmyInfo.ArmySkillArr)
  return armyskillarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >&
TArmyInfo::armyskillarr() const {
  // @@protoc_insertion_point(field_list:pb.TArmyInfo.ArmySkillArr)
  return armyskillarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSkillAttribute >*
TArmyInfo::mutable_armyskillarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArmyInfo.ArmySkillArr)
  return &armyskillarr_;
}

// optional int32 ArmyId = 7;
inline bool TArmyInfo::has_armyid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TArmyInfo::set_has_armyid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TArmyInfo::clear_has_armyid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TArmyInfo::clear_armyid() {
  armyid_ = 0;
  clear_has_armyid();
}
inline ::google::protobuf::int32 TArmyInfo::armyid() const {
  // @@protoc_insertion_point(field_get:pb.TArmyInfo.ArmyId)
  return armyid_;
}
inline void TArmyInfo::set_armyid(::google::protobuf::int32 value) {
  set_has_armyid();
  armyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TArmyInfo.ArmyId)
}

// -------------------------------------------------------------------

// TSceneInfo

// required string ConfName = 1;
inline bool TSceneInfo::has_confname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSceneInfo::set_has_confname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSceneInfo::clear_has_confname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSceneInfo::clear_confname() {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_->clear();
  }
  clear_has_confname();
}
inline const ::std::string& TSceneInfo::confname() const {
  // @@protoc_insertion_point(field_get:pb.TSceneInfo.ConfName)
  return *confname_;
}
inline void TSceneInfo::set_confname(const ::std::string& value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TSceneInfo.ConfName)
}
inline void TSceneInfo::set_confname(const char* value) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TSceneInfo.ConfName)
}
inline void TSceneInfo::set_confname(const char* value, size_t size) {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  confname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TSceneInfo.ConfName)
}
inline ::std::string* TSceneInfo::mutable_confname() {
  set_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    confname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TSceneInfo.ConfName)
  return confname_;
}
inline ::std::string* TSceneInfo::release_confname() {
  clear_has_confname();
  if (confname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = confname_;
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TSceneInfo::set_allocated_confname(::std::string* confname) {
  if (confname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete confname_;
  }
  if (confname) {
    set_has_confname();
    confname_ = confname;
  } else {
    clear_has_confname();
    confname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TSceneInfo.ConfName)
}

// required uint32 ConfIndex = 2;
inline bool TSceneInfo::has_confindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSceneInfo::set_has_confindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSceneInfo::clear_has_confindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSceneInfo::clear_confindex() {
  confindex_ = 0u;
  clear_has_confindex();
}
inline ::google::protobuf::uint32 TSceneInfo::confindex() const {
  // @@protoc_insertion_point(field_get:pb.TSceneInfo.ConfIndex)
  return confindex_;
}
inline void TSceneInfo::set_confindex(::google::protobuf::uint32 value) {
  set_has_confindex();
  confindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TSceneInfo.ConfIndex)
}

// required uint32 TimeLimit = 3;
inline bool TSceneInfo::has_timelimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSceneInfo::set_has_timelimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSceneInfo::clear_has_timelimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSceneInfo::clear_timelimit() {
  timelimit_ = 0u;
  clear_has_timelimit();
}
inline ::google::protobuf::uint32 TSceneInfo::timelimit() const {
  // @@protoc_insertion_point(field_get:pb.TSceneInfo.TimeLimit)
  return timelimit_;
}
inline void TSceneInfo::set_timelimit(::google::protobuf::uint32 value) {
  set_has_timelimit();
  timelimit_ = value;
  // @@protoc_insertion_point(field_set:pb.TSceneInfo.TimeLimit)
}

// optional uint32 CutSceneMethod = 4;
inline bool TSceneInfo::has_cutscenemethod() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSceneInfo::set_has_cutscenemethod() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSceneInfo::clear_has_cutscenemethod() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSceneInfo::clear_cutscenemethod() {
  cutscenemethod_ = 0u;
  clear_has_cutscenemethod();
}
inline ::google::protobuf::uint32 TSceneInfo::cutscenemethod() const {
  // @@protoc_insertion_point(field_get:pb.TSceneInfo.CutSceneMethod)
  return cutscenemethod_;
}
inline void TSceneInfo::set_cutscenemethod(::google::protobuf::uint32 value) {
  set_has_cutscenemethod();
  cutscenemethod_ = value;
  // @@protoc_insertion_point(field_set:pb.TSceneInfo.CutSceneMethod)
}

// -------------------------------------------------------------------

// TExtraOption

// optional bool NeedAuto = 1;
inline bool TExtraOption::has_needauto() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TExtraOption::set_has_needauto() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TExtraOption::clear_has_needauto() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TExtraOption::clear_needauto() {
  needauto_ = false;
  clear_has_needauto();
}
inline bool TExtraOption::needauto() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.NeedAuto)
  return needauto_;
}
inline void TExtraOption::set_needauto(bool value) {
  set_has_needauto();
  needauto_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.NeedAuto)
}

// optional bool LayerHideAuto = 2;
inline bool TExtraOption::has_layerhideauto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TExtraOption::set_has_layerhideauto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TExtraOption::clear_has_layerhideauto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TExtraOption::clear_layerhideauto() {
  layerhideauto_ = false;
  clear_has_layerhideauto();
}
inline bool TExtraOption::layerhideauto() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerHideAuto)
  return layerhideauto_;
}
inline void TExtraOption::set_layerhideauto(bool value) {
  set_has_layerhideauto();
  layerhideauto_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerHideAuto)
}

// optional bool LayerHideHeadShot = 3;
inline bool TExtraOption::has_layerhideheadshot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TExtraOption::set_has_layerhideheadshot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TExtraOption::clear_has_layerhideheadshot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TExtraOption::clear_layerhideheadshot() {
  layerhideheadshot_ = false;
  clear_has_layerhideheadshot();
}
inline bool TExtraOption::layerhideheadshot() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerHideHeadShot)
  return layerhideheadshot_;
}
inline void TExtraOption::set_layerhideheadshot(bool value) {
  set_has_layerhideheadshot();
  layerhideheadshot_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerHideHeadShot)
}

// optional bool LayerHideSkip = 4;
inline bool TExtraOption::has_layerhideskip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TExtraOption::set_has_layerhideskip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TExtraOption::clear_has_layerhideskip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TExtraOption::clear_layerhideskip() {
  layerhideskip_ = false;
  clear_has_layerhideskip();
}
inline bool TExtraOption::layerhideskip() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerHideSkip)
  return layerhideskip_;
}
inline void TExtraOption::set_layerhideskip(bool value) {
  set_has_layerhideskip();
  layerhideskip_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerHideSkip)
}

// optional bool LayerHideSpeed = 5;
inline bool TExtraOption::has_layerhidespeed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TExtraOption::set_has_layerhidespeed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TExtraOption::clear_has_layerhidespeed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TExtraOption::clear_layerhidespeed() {
  layerhidespeed_ = false;
  clear_has_layerhidespeed();
}
inline bool TExtraOption::layerhidespeed() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerHideSpeed)
  return layerhidespeed_;
}
inline void TExtraOption::set_layerhidespeed(bool value) {
  set_has_layerhidespeed();
  layerhidespeed_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerHideSpeed)
}

// optional bool LayerHidePause = 6;
inline bool TExtraOption::has_layerhidepause() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TExtraOption::set_has_layerhidepause() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TExtraOption::clear_has_layerhidepause() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TExtraOption::clear_layerhidepause() {
  layerhidepause_ = false;
  clear_has_layerhidepause();
}
inline bool TExtraOption::layerhidepause() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerHidePause)
  return layerhidepause_;
}
inline void TExtraOption::set_layerhidepause(bool value) {
  set_has_layerhidepause();
  layerhidepause_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerHidePause)
}

// optional bool IsFirstAttack = 7;
inline bool TExtraOption::has_isfirstattack() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TExtraOption::set_has_isfirstattack() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TExtraOption::clear_has_isfirstattack() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TExtraOption::clear_isfirstattack() {
  isfirstattack_ = false;
  clear_has_isfirstattack();
}
inline bool TExtraOption::isfirstattack() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.IsFirstAttack)
  return isfirstattack_;
}
inline void TExtraOption::set_isfirstattack(bool value) {
  set_has_isfirstattack();
  isfirstattack_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.IsFirstAttack)
}

// optional bool NeedDoStatistics = 8;
inline bool TExtraOption::has_needdostatistics() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TExtraOption::set_has_needdostatistics() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TExtraOption::clear_has_needdostatistics() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TExtraOption::clear_needdostatistics() {
  needdostatistics_ = false;
  clear_has_needdostatistics();
}
inline bool TExtraOption::needdostatistics() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.NeedDoStatistics)
  return needdostatistics_;
}
inline void TExtraOption::set_needdostatistics(bool value) {
  set_has_needdostatistics();
  needdostatistics_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.NeedDoStatistics)
}

// optional uint32 LayerSkipHideTime = 9;
inline bool TExtraOption::has_layerskiphidetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TExtraOption::set_has_layerskiphidetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TExtraOption::clear_has_layerskiphidetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TExtraOption::clear_layerskiphidetime() {
  layerskiphidetime_ = 0u;
  clear_has_layerskiphidetime();
}
inline ::google::protobuf::uint32 TExtraOption::layerskiphidetime() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerSkipHideTime)
  return layerskiphidetime_;
}
inline void TExtraOption::set_layerskiphidetime(::google::protobuf::uint32 value) {
  set_has_layerskiphidetime();
  layerskiphidetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerSkipHideTime)
}

// optional uint32 UnlockLevel = 10;
inline bool TExtraOption::has_unlocklevel() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TExtraOption::set_has_unlocklevel() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TExtraOption::clear_has_unlocklevel() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TExtraOption::clear_unlocklevel() {
  unlocklevel_ = 0u;
  clear_has_unlocklevel();
}
inline ::google::protobuf::uint32 TExtraOption::unlocklevel() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.UnlockLevel)
  return unlocklevel_;
}
inline void TExtraOption::set_unlocklevel(::google::protobuf::uint32 value) {
  set_has_unlocklevel();
  unlocklevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.UnlockLevel)
}

// optional bool LayerHideTime = 11;
inline bool TExtraOption::has_layerhidetime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TExtraOption::set_has_layerhidetime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TExtraOption::clear_has_layerhidetime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TExtraOption::clear_layerhidetime() {
  layerhidetime_ = false;
  clear_has_layerhidetime();
}
inline bool TExtraOption::layerhidetime() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerHideTime)
  return layerhidetime_;
}
inline void TExtraOption::set_layerhidetime(bool value) {
  set_has_layerhidetime();
  layerhidetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerHideTime)
}

// optional bool LayerHideCoin = 12;
inline bool TExtraOption::has_layerhidecoin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TExtraOption::set_has_layerhidecoin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TExtraOption::clear_has_layerhidecoin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TExtraOption::clear_layerhidecoin() {
  layerhidecoin_ = false;
  clear_has_layerhidecoin();
}
inline bool TExtraOption::layerhidecoin() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerHideCoin)
  return layerhidecoin_;
}
inline void TExtraOption::set_layerhidecoin(bool value) {
  set_has_layerhidecoin();
  layerhidecoin_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerHideCoin)
}

// optional bool IsStoryBattle = 13;
inline bool TExtraOption::has_isstorybattle() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TExtraOption::set_has_isstorybattle() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TExtraOption::clear_has_isstorybattle() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TExtraOption::clear_isstorybattle() {
  isstorybattle_ = false;
  clear_has_isstorybattle();
}
inline bool TExtraOption::isstorybattle() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.IsStoryBattle)
  return isstorybattle_;
}
inline void TExtraOption::set_isstorybattle(bool value) {
  set_has_isstorybattle();
  isstorybattle_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.IsStoryBattle)
}

// optional bool LayerHideCameraOffset = 14;
inline bool TExtraOption::has_layerhidecameraoffset() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TExtraOption::set_has_layerhidecameraoffset() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TExtraOption::clear_has_layerhidecameraoffset() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TExtraOption::clear_layerhidecameraoffset() {
  layerhidecameraoffset_ = false;
  clear_has_layerhidecameraoffset();
}
inline bool TExtraOption::layerhidecameraoffset() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerHideCameraOffset)
  return layerhidecameraoffset_;
}
inline void TExtraOption::set_layerhidecameraoffset(bool value) {
  set_has_layerhidecameraoffset();
  layerhidecameraoffset_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerHideCameraOffset)
}

// optional bool LayerHideScreenNum = 15;
inline bool TExtraOption::has_layerhidescreennum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TExtraOption::set_has_layerhidescreennum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TExtraOption::clear_has_layerhidescreennum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TExtraOption::clear_layerhidescreennum() {
  layerhidescreennum_ = false;
  clear_has_layerhidescreennum();
}
inline bool TExtraOption::layerhidescreennum() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerHideScreenNum)
  return layerhidescreennum_;
}
inline void TExtraOption::set_layerhidescreennum(bool value) {
  set_has_layerhidescreennum();
  layerhidescreennum_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerHideScreenNum)
}

// optional bool LayerHideChat = 16;
inline bool TExtraOption::has_layerhidechat() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TExtraOption::set_has_layerhidechat() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TExtraOption::clear_has_layerhidechat() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TExtraOption::clear_layerhidechat() {
  layerhidechat_ = false;
  clear_has_layerhidechat();
}
inline bool TExtraOption::layerhidechat() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerHideChat)
  return layerhidechat_;
}
inline void TExtraOption::set_layerhidechat(bool value) {
  set_has_layerhidechat();
  layerhidechat_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerHideChat)
}

// optional bool LayerHideRestart = 17;
inline bool TExtraOption::has_layerhiderestart() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TExtraOption::set_has_layerhiderestart() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TExtraOption::clear_has_layerhiderestart() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TExtraOption::clear_layerhiderestart() {
  layerhiderestart_ = false;
  clear_has_layerhiderestart();
}
inline bool TExtraOption::layerhiderestart() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.LayerHideRestart)
  return layerhiderestart_;
}
inline void TExtraOption::set_layerhiderestart(bool value) {
  set_has_layerhiderestart();
  layerhiderestart_ = value;
  // @@protoc_insertion_point(field_set:pb.TExtraOption.LayerHideRestart)
}

// optional .pb.TSpecialEntrance SpecialEntrance = 18;
inline bool TExtraOption::has_specialentrance() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TExtraOption::set_has_specialentrance() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TExtraOption::clear_has_specialentrance() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TExtraOption::clear_specialentrance() {
  if (specialentrance_ != NULL) specialentrance_->::pb::TSpecialEntrance::Clear();
  clear_has_specialentrance();
}
inline const ::pb::TSpecialEntrance& TExtraOption::specialentrance() const {
  // @@protoc_insertion_point(field_get:pb.TExtraOption.SpecialEntrance)
  return specialentrance_ != NULL ? *specialentrance_ : *default_instance_->specialentrance_;
}
inline ::pb::TSpecialEntrance* TExtraOption::mutable_specialentrance() {
  set_has_specialentrance();
  if (specialentrance_ == NULL) specialentrance_ = new ::pb::TSpecialEntrance;
  // @@protoc_insertion_point(field_mutable:pb.TExtraOption.SpecialEntrance)
  return specialentrance_;
}
inline ::pb::TSpecialEntrance* TExtraOption::release_specialentrance() {
  clear_has_specialentrance();
  ::pb::TSpecialEntrance* temp = specialentrance_;
  specialentrance_ = NULL;
  return temp;
}
inline void TExtraOption::set_allocated_specialentrance(::pb::TSpecialEntrance* specialentrance) {
  delete specialentrance_;
  specialentrance_ = specialentrance;
  if (specialentrance) {
    set_has_specialentrance();
  } else {
    clear_has_specialentrance();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TExtraOption.SpecialEntrance)
}

// -------------------------------------------------------------------

// TBattleUserInput

// repeated .pb.TBattleFieldInput Input = 1;
inline int TBattleUserInput::input_size() const {
  return input_.size();
}
inline void TBattleUserInput::clear_input() {
  input_.Clear();
}
inline const ::pb::TBattleFieldInput& TBattleUserInput::input(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleUserInput.Input)
  return input_.Get(index);
}
inline ::pb::TBattleFieldInput* TBattleUserInput::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleUserInput.Input)
  return input_.Mutable(index);
}
inline ::pb::TBattleFieldInput* TBattleUserInput::add_input() {
  // @@protoc_insertion_point(field_add:pb.TBattleUserInput.Input)
  return input_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleFieldInput >&
TBattleUserInput::input() const {
  // @@protoc_insertion_point(field_list:pb.TBattleUserInput.Input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleFieldInput >*
TBattleUserInput::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleUserInput.Input)
  return &input_;
}

// -------------------------------------------------------------------

// TBattleFieldInput

// required int32 FrameTime = 1;
inline bool TBattleFieldInput::has_frametime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBattleFieldInput::set_has_frametime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBattleFieldInput::clear_has_frametime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBattleFieldInput::clear_frametime() {
  frametime_ = 0;
  clear_has_frametime();
}
inline ::google::protobuf::int32 TBattleFieldInput::frametime() const {
  // @@protoc_insertion_point(field_get:pb.TBattleFieldInput.FrameTime)
  return frametime_;
}
inline void TBattleFieldInput::set_frametime(::google::protobuf::int32 value) {
  set_has_frametime();
  frametime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleFieldInput.FrameTime)
}

// optional uint32 Eid = 2;
inline bool TBattleFieldInput::has_eid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBattleFieldInput::set_has_eid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBattleFieldInput::clear_has_eid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBattleFieldInput::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
inline ::google::protobuf::uint32 TBattleFieldInput::eid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleFieldInput.Eid)
  return eid_;
}
inline void TBattleFieldInput::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleFieldInput.Eid)
}

// required uint32 Event = 3;
inline bool TBattleFieldInput::has_event() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBattleFieldInput::set_has_event() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBattleFieldInput::clear_has_event() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBattleFieldInput::clear_event() {
  event_ = 0u;
  clear_has_event();
}
inline ::google::protobuf::uint32 TBattleFieldInput::event() const {
  // @@protoc_insertion_point(field_get:pb.TBattleFieldInput.Event)
  return event_;
}
inline void TBattleFieldInput::set_event(::google::protobuf::uint32 value) {
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleFieldInput.Event)
}

// optional uint32 FieldNum = 4;
inline bool TBattleFieldInput::has_fieldnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBattleFieldInput::set_has_fieldnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBattleFieldInput::clear_has_fieldnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBattleFieldInput::clear_fieldnum() {
  fieldnum_ = 0u;
  clear_has_fieldnum();
}
inline ::google::protobuf::uint32 TBattleFieldInput::fieldnum() const {
  // @@protoc_insertion_point(field_get:pb.TBattleFieldInput.FieldNum)
  return fieldnum_;
}
inline void TBattleFieldInput::set_fieldnum(::google::protobuf::uint32 value) {
  set_has_fieldnum();
  fieldnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleFieldInput.FieldNum)
}

// optional uint32 Index = 5;
inline bool TBattleFieldInput::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBattleFieldInput::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBattleFieldInput::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBattleFieldInput::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 TBattleFieldInput::index() const {
  // @@protoc_insertion_point(field_get:pb.TBattleFieldInput.Index)
  return index_;
}
inline void TBattleFieldInput::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleFieldInput.Index)
}

// optional uint32 Data1 = 6;
inline bool TBattleFieldInput::has_data1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TBattleFieldInput::set_has_data1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TBattleFieldInput::clear_has_data1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TBattleFieldInput::clear_data1() {
  data1_ = 0u;
  clear_has_data1();
}
inline ::google::protobuf::uint32 TBattleFieldInput::data1() const {
  // @@protoc_insertion_point(field_get:pb.TBattleFieldInput.Data1)
  return data1_;
}
inline void TBattleFieldInput::set_data1(::google::protobuf::uint32 value) {
  set_has_data1();
  data1_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleFieldInput.Data1)
}

// -------------------------------------------------------------------

// TBattleArgs

// required .pb.EBattleType BattleType = 1;
inline bool TBattleArgs::has_battletype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBattleArgs::set_has_battletype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBattleArgs::clear_has_battletype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBattleArgs::clear_battletype() {
  battletype_ = 1;
  clear_has_battletype();
}
inline ::pb::EBattleType TBattleArgs::battletype() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.BattleType)
  return static_cast< ::pb::EBattleType >(battletype_);
}
inline void TBattleArgs::set_battletype(::pb::EBattleType value) {
  assert(::pb::EBattleType_IsValid(value));
  set_has_battletype();
  battletype_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleArgs.BattleType)
}

// repeated .pb.TArmyInfo Army1Arr = 2;
inline int TBattleArgs::army1arr_size() const {
  return army1arr_.size();
}
inline void TBattleArgs::clear_army1arr() {
  army1arr_.Clear();
}
inline const ::pb::TArmyInfo& TBattleArgs::army1arr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.Army1Arr)
  return army1arr_.Get(index);
}
inline ::pb::TArmyInfo* TBattleArgs::mutable_army1arr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.Army1Arr)
  return army1arr_.Mutable(index);
}
inline ::pb::TArmyInfo* TBattleArgs::add_army1arr() {
  // @@protoc_insertion_point(field_add:pb.TBattleArgs.Army1Arr)
  return army1arr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
TBattleArgs::army1arr() const {
  // @@protoc_insertion_point(field_list:pb.TBattleArgs.Army1Arr)
  return army1arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
TBattleArgs::mutable_army1arr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleArgs.Army1Arr)
  return &army1arr_;
}

// repeated .pb.TArmyInfo Army2Arr = 3;
inline int TBattleArgs::army2arr_size() const {
  return army2arr_.size();
}
inline void TBattleArgs::clear_army2arr() {
  army2arr_.Clear();
}
inline const ::pb::TArmyInfo& TBattleArgs::army2arr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.Army2Arr)
  return army2arr_.Get(index);
}
inline ::pb::TArmyInfo* TBattleArgs::mutable_army2arr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.Army2Arr)
  return army2arr_.Mutable(index);
}
inline ::pb::TArmyInfo* TBattleArgs::add_army2arr() {
  // @@protoc_insertion_point(field_add:pb.TBattleArgs.Army2Arr)
  return army2arr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
TBattleArgs::army2arr() const {
  // @@protoc_insertion_point(field_list:pb.TBattleArgs.Army2Arr)
  return army2arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
TBattleArgs::mutable_army2arr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleArgs.Army2Arr)
  return &army2arr_;
}

// repeated .pb.TSceneInfo SceneConf = 4;
inline int TBattleArgs::sceneconf_size() const {
  return sceneconf_.size();
}
inline void TBattleArgs::clear_sceneconf() {
  sceneconf_.Clear();
}
inline const ::pb::TSceneInfo& TBattleArgs::sceneconf(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.SceneConf)
  return sceneconf_.Get(index);
}
inline ::pb::TSceneInfo* TBattleArgs::mutable_sceneconf(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.SceneConf)
  return sceneconf_.Mutable(index);
}
inline ::pb::TSceneInfo* TBattleArgs::add_sceneconf() {
  // @@protoc_insertion_point(field_add:pb.TBattleArgs.SceneConf)
  return sceneconf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSceneInfo >&
TBattleArgs::sceneconf() const {
  // @@protoc_insertion_point(field_list:pb.TBattleArgs.SceneConf)
  return sceneconf_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSceneInfo >*
TBattleArgs::mutable_sceneconf() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleArgs.SceneConf)
  return &sceneconf_;
}

// repeated uint32 BehaviorIdArr = 5;
inline int TBattleArgs::behavioridarr_size() const {
  return behavioridarr_.size();
}
inline void TBattleArgs::clear_behavioridarr() {
  behavioridarr_.Clear();
}
inline ::google::protobuf::uint32 TBattleArgs::behavioridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.BehaviorIdArr)
  return behavioridarr_.Get(index);
}
inline void TBattleArgs::set_behavioridarr(int index, ::google::protobuf::uint32 value) {
  behavioridarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TBattleArgs.BehaviorIdArr)
}
inline void TBattleArgs::add_behavioridarr(::google::protobuf::uint32 value) {
  behavioridarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TBattleArgs.BehaviorIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TBattleArgs::behavioridarr() const {
  // @@protoc_insertion_point(field_list:pb.TBattleArgs.BehaviorIdArr)
  return behavioridarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TBattleArgs::mutable_behavioridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleArgs.BehaviorIdArr)
  return &behavioridarr_;
}

// optional uint32 FrameDelt = 6;
inline bool TBattleArgs::has_framedelt() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TBattleArgs::set_has_framedelt() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TBattleArgs::clear_has_framedelt() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TBattleArgs::clear_framedelt() {
  framedelt_ = 0u;
  clear_has_framedelt();
}
inline ::google::protobuf::uint32 TBattleArgs::framedelt() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.FrameDelt)
  return framedelt_;
}
inline void TBattleArgs::set_framedelt(::google::protobuf::uint32 value) {
  set_has_framedelt();
  framedelt_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleArgs.FrameDelt)
}

// required uint32 RandomSeed = 7;
inline bool TBattleArgs::has_randomseed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TBattleArgs::set_has_randomseed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TBattleArgs::clear_has_randomseed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TBattleArgs::clear_randomseed() {
  randomseed_ = 0u;
  clear_has_randomseed();
}
inline ::google::protobuf::uint32 TBattleArgs::randomseed() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.RandomSeed)
  return randomseed_;
}
inline void TBattleArgs::set_randomseed(::google::protobuf::uint32 value) {
  set_has_randomseed();
  randomseed_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleArgs.RandomSeed)
}

// optional .pb.TExtraOption ExtraOption = 8;
inline bool TBattleArgs::has_extraoption() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TBattleArgs::set_has_extraoption() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TBattleArgs::clear_has_extraoption() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TBattleArgs::clear_extraoption() {
  if (extraoption_ != NULL) extraoption_->::pb::TExtraOption::Clear();
  clear_has_extraoption();
}
inline const ::pb::TExtraOption& TBattleArgs::extraoption() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.ExtraOption)
  return extraoption_ != NULL ? *extraoption_ : *default_instance_->extraoption_;
}
inline ::pb::TExtraOption* TBattleArgs::mutable_extraoption() {
  set_has_extraoption();
  if (extraoption_ == NULL) extraoption_ = new ::pb::TExtraOption;
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.ExtraOption)
  return extraoption_;
}
inline ::pb::TExtraOption* TBattleArgs::release_extraoption() {
  clear_has_extraoption();
  ::pb::TExtraOption* temp = extraoption_;
  extraoption_ = NULL;
  return temp;
}
inline void TBattleArgs::set_allocated_extraoption(::pb::TExtraOption* extraoption) {
  delete extraoption_;
  extraoption_ = extraoption;
  if (extraoption) {
    set_has_extraoption();
  } else {
    clear_has_extraoption();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleArgs.ExtraOption)
}

// optional uint32 BattleId = 9;
inline bool TBattleArgs::has_battleid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TBattleArgs::set_has_battleid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TBattleArgs::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TBattleArgs::clear_battleid() {
  battleid_ = 0u;
  clear_has_battleid();
}
inline ::google::protobuf::uint32 TBattleArgs::battleid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.BattleId)
  return battleid_;
}
inline void TBattleArgs::set_battleid(::google::protobuf::uint32 value) {
  set_has_battleid();
  battleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleArgs.BattleId)
}

// optional .pb.EBattleStarter BattleStarter = 10;
inline bool TBattleArgs::has_battlestarter() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TBattleArgs::set_has_battlestarter() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TBattleArgs::clear_has_battlestarter() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TBattleArgs::clear_battlestarter() {
  battlestarter_ = 0;
  clear_has_battlestarter();
}
inline ::pb::EBattleStarter TBattleArgs::battlestarter() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.BattleStarter)
  return static_cast< ::pb::EBattleStarter >(battlestarter_);
}
inline void TBattleArgs::set_battlestarter(::pb::EBattleStarter value) {
  assert(::pb::EBattleStarter_IsValid(value));
  set_has_battlestarter();
  battlestarter_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleArgs.BattleStarter)
}

// optional .pb.TBattleUserInput RecordInputs = 13;
inline bool TBattleArgs::has_recordinputs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TBattleArgs::set_has_recordinputs() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TBattleArgs::clear_has_recordinputs() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TBattleArgs::clear_recordinputs() {
  if (recordinputs_ != NULL) recordinputs_->::pb::TBattleUserInput::Clear();
  clear_has_recordinputs();
}
inline const ::pb::TBattleUserInput& TBattleArgs::recordinputs() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.RecordInputs)
  return recordinputs_ != NULL ? *recordinputs_ : *default_instance_->recordinputs_;
}
inline ::pb::TBattleUserInput* TBattleArgs::mutable_recordinputs() {
  set_has_recordinputs();
  if (recordinputs_ == NULL) recordinputs_ = new ::pb::TBattleUserInput;
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.RecordInputs)
  return recordinputs_;
}
inline ::pb::TBattleUserInput* TBattleArgs::release_recordinputs() {
  clear_has_recordinputs();
  ::pb::TBattleUserInput* temp = recordinputs_;
  recordinputs_ = NULL;
  return temp;
}
inline void TBattleArgs::set_allocated_recordinputs(::pb::TBattleUserInput* recordinputs) {
  delete recordinputs_;
  recordinputs_ = recordinputs;
  if (recordinputs) {
    set_has_recordinputs();
  } else {
    clear_has_recordinputs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleArgs.RecordInputs)
}

// optional bool HasUserInput = 12;
inline bool TBattleArgs::has_hasuserinput() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TBattleArgs::set_has_hasuserinput() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TBattleArgs::clear_has_hasuserinput() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TBattleArgs::clear_hasuserinput() {
  hasuserinput_ = false;
  clear_has_hasuserinput();
}
inline bool TBattleArgs::hasuserinput() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.HasUserInput)
  return hasuserinput_;
}
inline void TBattleArgs::set_hasuserinput(bool value) {
  set_has_hasuserinput();
  hasuserinput_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleArgs.HasUserInput)
}

// optional string FrontendVersion = 14;
inline bool TBattleArgs::has_frontendversion() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TBattleArgs::set_has_frontendversion() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TBattleArgs::clear_has_frontendversion() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TBattleArgs::clear_frontendversion() {
  if (frontendversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frontendversion_->clear();
  }
  clear_has_frontendversion();
}
inline const ::std::string& TBattleArgs::frontendversion() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.FrontendVersion)
  return *frontendversion_;
}
inline void TBattleArgs::set_frontendversion(const ::std::string& value) {
  set_has_frontendversion();
  if (frontendversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frontendversion_ = new ::std::string;
  }
  frontendversion_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleArgs.FrontendVersion)
}
inline void TBattleArgs::set_frontendversion(const char* value) {
  set_has_frontendversion();
  if (frontendversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frontendversion_ = new ::std::string;
  }
  frontendversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleArgs.FrontendVersion)
}
inline void TBattleArgs::set_frontendversion(const char* value, size_t size) {
  set_has_frontendversion();
  if (frontendversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frontendversion_ = new ::std::string;
  }
  frontendversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleArgs.FrontendVersion)
}
inline ::std::string* TBattleArgs::mutable_frontendversion() {
  set_has_frontendversion();
  if (frontendversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    frontendversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.FrontendVersion)
  return frontendversion_;
}
inline ::std::string* TBattleArgs::release_frontendversion() {
  clear_has_frontendversion();
  if (frontendversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = frontendversion_;
    frontendversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleArgs::set_allocated_frontendversion(::std::string* frontendversion) {
  if (frontendversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete frontendversion_;
  }
  if (frontendversion) {
    set_has_frontendversion();
    frontendversion_ = frontendversion;
  } else {
    clear_has_frontendversion();
    frontendversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleArgs.FrontendVersion)
}

// optional .pb.TRankInfo RankInfo = 15;
inline bool TBattleArgs::has_rankinfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TBattleArgs::set_has_rankinfo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TBattleArgs::clear_has_rankinfo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TBattleArgs::clear_rankinfo() {
  if (rankinfo_ != NULL) rankinfo_->::pb::TRankInfo::Clear();
  clear_has_rankinfo();
}
inline const ::pb::TRankInfo& TBattleArgs::rankinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.RankInfo)
  return rankinfo_ != NULL ? *rankinfo_ : *default_instance_->rankinfo_;
}
inline ::pb::TRankInfo* TBattleArgs::mutable_rankinfo() {
  set_has_rankinfo();
  if (rankinfo_ == NULL) rankinfo_ = new ::pb::TRankInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.RankInfo)
  return rankinfo_;
}
inline ::pb::TRankInfo* TBattleArgs::release_rankinfo() {
  clear_has_rankinfo();
  ::pb::TRankInfo* temp = rankinfo_;
  rankinfo_ = NULL;
  return temp;
}
inline void TBattleArgs::set_allocated_rankinfo(::pb::TRankInfo* rankinfo) {
  delete rankinfo_;
  rankinfo_ = rankinfo;
  if (rankinfo) {
    set_has_rankinfo();
  } else {
    clear_has_rankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleArgs.RankInfo)
}

// optional .pb.TTDEnemy TDEnemy = 16;
inline bool TBattleArgs::has_tdenemy() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TBattleArgs::set_has_tdenemy() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TBattleArgs::clear_has_tdenemy() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TBattleArgs::clear_tdenemy() {
  if (tdenemy_ != NULL) tdenemy_->::pb::TTDEnemy::Clear();
  clear_has_tdenemy();
}
inline const ::pb::TTDEnemy& TBattleArgs::tdenemy() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.TDEnemy)
  return tdenemy_ != NULL ? *tdenemy_ : *default_instance_->tdenemy_;
}
inline ::pb::TTDEnemy* TBattleArgs::mutable_tdenemy() {
  set_has_tdenemy();
  if (tdenemy_ == NULL) tdenemy_ = new ::pb::TTDEnemy;
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.TDEnemy)
  return tdenemy_;
}
inline ::pb::TTDEnemy* TBattleArgs::release_tdenemy() {
  clear_has_tdenemy();
  ::pb::TTDEnemy* temp = tdenemy_;
  tdenemy_ = NULL;
  return temp;
}
inline void TBattleArgs::set_allocated_tdenemy(::pb::TTDEnemy* tdenemy) {
  delete tdenemy_;
  tdenemy_ = tdenemy;
  if (tdenemy) {
    set_has_tdenemy();
  } else {
    clear_has_tdenemy();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleArgs.TDEnemy)
}

// optional .pb.TTDFriend TDFriend = 17;
inline bool TBattleArgs::has_tdfriend() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TBattleArgs::set_has_tdfriend() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TBattleArgs::clear_has_tdfriend() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TBattleArgs::clear_tdfriend() {
  if (tdfriend_ != NULL) tdfriend_->::pb::TTDFriend::Clear();
  clear_has_tdfriend();
}
inline const ::pb::TTDFriend& TBattleArgs::tdfriend() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.TDFriend)
  return tdfriend_ != NULL ? *tdfriend_ : *default_instance_->tdfriend_;
}
inline ::pb::TTDFriend* TBattleArgs::mutable_tdfriend() {
  set_has_tdfriend();
  if (tdfriend_ == NULL) tdfriend_ = new ::pb::TTDFriend;
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.TDFriend)
  return tdfriend_;
}
inline ::pb::TTDFriend* TBattleArgs::release_tdfriend() {
  clear_has_tdfriend();
  ::pb::TTDFriend* temp = tdfriend_;
  tdfriend_ = NULL;
  return temp;
}
inline void TBattleArgs::set_allocated_tdfriend(::pb::TTDFriend* tdfriend) {
  delete tdfriend_;
  tdfriend_ = tdfriend;
  if (tdfriend) {
    set_has_tdfriend();
  } else {
    clear_has_tdfriend();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleArgs.TDFriend)
}

// optional .pb.TTDRecordInfo TDRecordInfo = 18;
inline bool TBattleArgs::has_tdrecordinfo() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TBattleArgs::set_has_tdrecordinfo() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TBattleArgs::clear_has_tdrecordinfo() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TBattleArgs::clear_tdrecordinfo() {
  if (tdrecordinfo_ != NULL) tdrecordinfo_->::pb::TTDRecordInfo::Clear();
  clear_has_tdrecordinfo();
}
inline const ::pb::TTDRecordInfo& TBattleArgs::tdrecordinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.TDRecordInfo)
  return tdrecordinfo_ != NULL ? *tdrecordinfo_ : *default_instance_->tdrecordinfo_;
}
inline ::pb::TTDRecordInfo* TBattleArgs::mutable_tdrecordinfo() {
  set_has_tdrecordinfo();
  if (tdrecordinfo_ == NULL) tdrecordinfo_ = new ::pb::TTDRecordInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.TDRecordInfo)
  return tdrecordinfo_;
}
inline ::pb::TTDRecordInfo* TBattleArgs::release_tdrecordinfo() {
  clear_has_tdrecordinfo();
  ::pb::TTDRecordInfo* temp = tdrecordinfo_;
  tdrecordinfo_ = NULL;
  return temp;
}
inline void TBattleArgs::set_allocated_tdrecordinfo(::pb::TTDRecordInfo* tdrecordinfo) {
  delete tdrecordinfo_;
  tdrecordinfo_ = tdrecordinfo;
  if (tdrecordinfo) {
    set_has_tdrecordinfo();
  } else {
    clear_has_tdrecordinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleArgs.TDRecordInfo)
}

// optional .pb.TWheelWarRidingInfo WheelWarRidingInfo = 19;
inline bool TBattleArgs::has_wheelwarridinginfo() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TBattleArgs::set_has_wheelwarridinginfo() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TBattleArgs::clear_has_wheelwarridinginfo() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TBattleArgs::clear_wheelwarridinginfo() {
  if (wheelwarridinginfo_ != NULL) wheelwarridinginfo_->::pb::TWheelWarRidingInfo::Clear();
  clear_has_wheelwarridinginfo();
}
inline const ::pb::TWheelWarRidingInfo& TBattleArgs::wheelwarridinginfo() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.WheelWarRidingInfo)
  return wheelwarridinginfo_ != NULL ? *wheelwarridinginfo_ : *default_instance_->wheelwarridinginfo_;
}
inline ::pb::TWheelWarRidingInfo* TBattleArgs::mutable_wheelwarridinginfo() {
  set_has_wheelwarridinginfo();
  if (wheelwarridinginfo_ == NULL) wheelwarridinginfo_ = new ::pb::TWheelWarRidingInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.WheelWarRidingInfo)
  return wheelwarridinginfo_;
}
inline ::pb::TWheelWarRidingInfo* TBattleArgs::release_wheelwarridinginfo() {
  clear_has_wheelwarridinginfo();
  ::pb::TWheelWarRidingInfo* temp = wheelwarridinginfo_;
  wheelwarridinginfo_ = NULL;
  return temp;
}
inline void TBattleArgs::set_allocated_wheelwarridinginfo(::pb::TWheelWarRidingInfo* wheelwarridinginfo) {
  delete wheelwarridinginfo_;
  wheelwarridinginfo_ = wheelwarridinginfo;
  if (wheelwarridinginfo) {
    set_has_wheelwarridinginfo();
  } else {
    clear_has_wheelwarridinginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleArgs.WheelWarRidingInfo)
}

// optional string BackendVersion = 20;
inline bool TBattleArgs::has_backendversion() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TBattleArgs::set_has_backendversion() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TBattleArgs::clear_has_backendversion() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TBattleArgs::clear_backendversion() {
  if (backendversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backendversion_->clear();
  }
  clear_has_backendversion();
}
inline const ::std::string& TBattleArgs::backendversion() const {
  // @@protoc_insertion_point(field_get:pb.TBattleArgs.BackendVersion)
  return *backendversion_;
}
inline void TBattleArgs::set_backendversion(const ::std::string& value) {
  set_has_backendversion();
  if (backendversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backendversion_ = new ::std::string;
  }
  backendversion_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleArgs.BackendVersion)
}
inline void TBattleArgs::set_backendversion(const char* value) {
  set_has_backendversion();
  if (backendversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backendversion_ = new ::std::string;
  }
  backendversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleArgs.BackendVersion)
}
inline void TBattleArgs::set_backendversion(const char* value, size_t size) {
  set_has_backendversion();
  if (backendversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backendversion_ = new ::std::string;
  }
  backendversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleArgs.BackendVersion)
}
inline ::std::string* TBattleArgs::mutable_backendversion() {
  set_has_backendversion();
  if (backendversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    backendversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleArgs.BackendVersion)
  return backendversion_;
}
inline ::std::string* TBattleArgs::release_backendversion() {
  clear_has_backendversion();
  if (backendversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = backendversion_;
    backendversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleArgs::set_allocated_backendversion(::std::string* backendversion) {
  if (backendversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete backendversion_;
  }
  if (backendversion) {
    set_has_backendversion();
    backendversion_ = backendversion;
  } else {
    clear_has_backendversion();
    backendversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleArgs.BackendVersion)
}

// -------------------------------------------------------------------

// TUnitInfoAfterBattle

// required uint32 Hid = 1;
inline bool TUnitInfoAfterBattle::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnitInfoAfterBattle::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnitInfoAfterBattle::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TUnitInfoAfterBattle::hid() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.Hid)
  return hid_;
}
inline void TUnitInfoAfterBattle::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.Hid)
}

// required uint32 Pos = 2;
inline bool TUnitInfoAfterBattle::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnitInfoAfterBattle::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnitInfoAfterBattle::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TUnitInfoAfterBattle::pos() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.Pos)
  return pos_;
}
inline void TUnitInfoAfterBattle::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.Pos)
}

// optional uint64 CurHp = 3;
inline bool TUnitInfoAfterBattle::has_curhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_curhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUnitInfoAfterBattle::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUnitInfoAfterBattle::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TUnitInfoAfterBattle::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.CurHp)
  return curhp_;
}
inline void TUnitInfoAfterBattle::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.CurHp)
}

// optional uint64 MaxHp = 4;
inline bool TUnitInfoAfterBattle::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUnitInfoAfterBattle::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUnitInfoAfterBattle::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TUnitInfoAfterBattle::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.MaxHp)
  return maxhp_;
}
inline void TUnitInfoAfterBattle::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.MaxHp)
}

// optional uint32 CurRage = 5;
inline bool TUnitInfoAfterBattle::has_currage() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_currage() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUnitInfoAfterBattle::clear_has_currage() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUnitInfoAfterBattle::clear_currage() {
  currage_ = 0u;
  clear_has_currage();
}
inline ::google::protobuf::uint32 TUnitInfoAfterBattle::currage() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.CurRage)
  return currage_;
}
inline void TUnitInfoAfterBattle::set_currage(::google::protobuf::uint32 value) {
  set_has_currage();
  currage_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.CurRage)
}

// optional uint64 DamageOut = 6;
inline bool TUnitInfoAfterBattle::has_damageout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_damageout() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUnitInfoAfterBattle::clear_has_damageout() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUnitInfoAfterBattle::clear_damageout() {
  damageout_ = GOOGLE_ULONGLONG(0);
  clear_has_damageout();
}
inline ::google::protobuf::uint64 TUnitInfoAfterBattle::damageout() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.DamageOut)
  return damageout_;
}
inline void TUnitInfoAfterBattle::set_damageout(::google::protobuf::uint64 value) {
  set_has_damageout();
  damageout_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.DamageOut)
}

// optional uint64 DamageIn = 7;
inline bool TUnitInfoAfterBattle::has_damagein() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_damagein() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TUnitInfoAfterBattle::clear_has_damagein() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TUnitInfoAfterBattle::clear_damagein() {
  damagein_ = GOOGLE_ULONGLONG(0);
  clear_has_damagein();
}
inline ::google::protobuf::uint64 TUnitInfoAfterBattle::damagein() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.DamageIn)
  return damagein_;
}
inline void TUnitInfoAfterBattle::set_damagein(::google::protobuf::uint64 value) {
  set_has_damagein();
  damagein_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.DamageIn)
}

// optional uint32 InjuredSoldier = 8;
inline bool TUnitInfoAfterBattle::has_injuredsoldier() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_injuredsoldier() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TUnitInfoAfterBattle::clear_has_injuredsoldier() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TUnitInfoAfterBattle::clear_injuredsoldier() {
  injuredsoldier_ = 0u;
  clear_has_injuredsoldier();
}
inline ::google::protobuf::uint32 TUnitInfoAfterBattle::injuredsoldier() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.InjuredSoldier)
  return injuredsoldier_;
}
inline void TUnitInfoAfterBattle::set_injuredsoldier(::google::protobuf::uint32 value) {
  set_has_injuredsoldier();
  injuredsoldier_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.InjuredSoldier)
}

// optional uint32 DeadSoldier = 9;
inline bool TUnitInfoAfterBattle::has_deadsoldier() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_deadsoldier() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TUnitInfoAfterBattle::clear_has_deadsoldier() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TUnitInfoAfterBattle::clear_deadsoldier() {
  deadsoldier_ = 0u;
  clear_has_deadsoldier();
}
inline ::google::protobuf::uint32 TUnitInfoAfterBattle::deadsoldier() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.DeadSoldier)
  return deadsoldier_;
}
inline void TUnitInfoAfterBattle::set_deadsoldier(::google::protobuf::uint32 value) {
  set_has_deadsoldier();
  deadsoldier_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.DeadSoldier)
}

// optional uint32 KillEnemySoldier = 10;
inline bool TUnitInfoAfterBattle::has_killenemysoldier() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_killenemysoldier() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TUnitInfoAfterBattle::clear_has_killenemysoldier() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TUnitInfoAfterBattle::clear_killenemysoldier() {
  killenemysoldier_ = 0u;
  clear_has_killenemysoldier();
}
inline ::google::protobuf::uint32 TUnitInfoAfterBattle::killenemysoldier() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.KillEnemySoldier)
  return killenemysoldier_;
}
inline void TUnitInfoAfterBattle::set_killenemysoldier(::google::protobuf::uint32 value) {
  set_has_killenemysoldier();
  killenemysoldier_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.KillEnemySoldier)
}

// optional uint32 Htid = 11;
inline bool TUnitInfoAfterBattle::has_htid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_htid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TUnitInfoAfterBattle::clear_has_htid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TUnitInfoAfterBattle::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TUnitInfoAfterBattle::htid() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.Htid)
  return htid_;
}
inline void TUnitInfoAfterBattle::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.Htid)
}

// optional .pb.TUnitStatistics UnitStatistic = 12;
inline bool TUnitInfoAfterBattle::has_unitstatistic() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_unitstatistic() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TUnitInfoAfterBattle::clear_has_unitstatistic() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TUnitInfoAfterBattle::clear_unitstatistic() {
  if (unitstatistic_ != NULL) unitstatistic_->::pb::TUnitStatistics::Clear();
  clear_has_unitstatistic();
}
inline const ::pb::TUnitStatistics& TUnitInfoAfterBattle::unitstatistic() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.UnitStatistic)
  return unitstatistic_ != NULL ? *unitstatistic_ : *default_instance_->unitstatistic_;
}
inline ::pb::TUnitStatistics* TUnitInfoAfterBattle::mutable_unitstatistic() {
  set_has_unitstatistic();
  if (unitstatistic_ == NULL) unitstatistic_ = new ::pb::TUnitStatistics;
  // @@protoc_insertion_point(field_mutable:pb.TUnitInfoAfterBattle.UnitStatistic)
  return unitstatistic_;
}
inline ::pb::TUnitStatistics* TUnitInfoAfterBattle::release_unitstatistic() {
  clear_has_unitstatistic();
  ::pb::TUnitStatistics* temp = unitstatistic_;
  unitstatistic_ = NULL;
  return temp;
}
inline void TUnitInfoAfterBattle::set_allocated_unitstatistic(::pb::TUnitStatistics* unitstatistic) {
  delete unitstatistic_;
  unitstatistic_ = unitstatistic;
  if (unitstatistic) {
    set_has_unitstatistic();
  } else {
    clear_has_unitstatistic();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUnitInfoAfterBattle.UnitStatistic)
}

// optional uint64 HealOut = 13;
inline bool TUnitInfoAfterBattle::has_healout() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TUnitInfoAfterBattle::set_has_healout() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TUnitInfoAfterBattle::clear_has_healout() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TUnitInfoAfterBattle::clear_healout() {
  healout_ = GOOGLE_ULONGLONG(0);
  clear_has_healout();
}
inline ::google::protobuf::uint64 TUnitInfoAfterBattle::healout() const {
  // @@protoc_insertion_point(field_get:pb.TUnitInfoAfterBattle.HealOut)
  return healout_;
}
inline void TUnitInfoAfterBattle::set_healout(::google::protobuf::uint64 value) {
  set_has_healout();
  healout_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitInfoAfterBattle.HealOut)
}

// -------------------------------------------------------------------

// TArmyInfoAfterBattle

// repeated .pb.TUnitInfoAfterBattle UnitArr = 1;
inline int TArmyInfoAfterBattle::unitarr_size() const {
  return unitarr_.size();
}
inline void TArmyInfoAfterBattle::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TUnitInfoAfterBattle& TArmyInfoAfterBattle::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArmyInfoAfterBattle.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TUnitInfoAfterBattle* TArmyInfoAfterBattle::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArmyInfoAfterBattle.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TUnitInfoAfterBattle* TArmyInfoAfterBattle::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TArmyInfoAfterBattle.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfoAfterBattle >&
TArmyInfoAfterBattle::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TArmyInfoAfterBattle.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfoAfterBattle >*
TArmyInfoAfterBattle::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArmyInfoAfterBattle.UnitArr)
  return &unitarr_;
}

// -------------------------------------------------------------------

// TBattleResult

// required .pb.TBattleArgs BattleArgs = 1;
inline bool TBattleResult::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBattleResult::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBattleResult::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBattleResult::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TBattleResult::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TBattleResult::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TBattleResult.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TBattleResult::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TBattleResult::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleResult.BattleArgs)
}

// required uint32 StarLevel = 2;
inline bool TBattleResult::has_starlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBattleResult::set_has_starlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBattleResult::clear_has_starlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBattleResult::clear_starlevel() {
  starlevel_ = 0u;
  clear_has_starlevel();
}
inline ::google::protobuf::uint32 TBattleResult::starlevel() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.StarLevel)
  return starlevel_;
}
inline void TBattleResult::set_starlevel(::google::protobuf::uint32 value) {
  set_has_starlevel();
  starlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleResult.StarLevel)
}

// optional string ErrMsg = 3;
inline bool TBattleResult::has_errmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBattleResult::set_has_errmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBattleResult::clear_has_errmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBattleResult::clear_errmsg() {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_->clear();
  }
  clear_has_errmsg();
}
inline const ::std::string& TBattleResult::errmsg() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.ErrMsg)
  return *errmsg_;
}
inline void TBattleResult::set_errmsg(const ::std::string& value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleResult.ErrMsg)
}
inline void TBattleResult::set_errmsg(const char* value) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleResult.ErrMsg)
}
inline void TBattleResult::set_errmsg(const char* value, size_t size) {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  errmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleResult.ErrMsg)
}
inline ::std::string* TBattleResult::mutable_errmsg() {
  set_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    errmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleResult.ErrMsg)
  return errmsg_;
}
inline ::std::string* TBattleResult::release_errmsg() {
  clear_has_errmsg();
  if (errmsg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = errmsg_;
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleResult::set_allocated_errmsg(::std::string* errmsg) {
  if (errmsg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete errmsg_;
  }
  if (errmsg) {
    set_has_errmsg();
    errmsg_ = errmsg;
  } else {
    clear_has_errmsg();
    errmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleResult.ErrMsg)
}

// repeated .pb.TArmyInfoAfterBattle Army1Arr = 5;
inline int TBattleResult::army1arr_size() const {
  return army1arr_.size();
}
inline void TBattleResult::clear_army1arr() {
  army1arr_.Clear();
}
inline const ::pb::TArmyInfoAfterBattle& TBattleResult::army1arr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.Army1Arr)
  return army1arr_.Get(index);
}
inline ::pb::TArmyInfoAfterBattle* TBattleResult::mutable_army1arr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleResult.Army1Arr)
  return army1arr_.Mutable(index);
}
inline ::pb::TArmyInfoAfterBattle* TBattleResult::add_army1arr() {
  // @@protoc_insertion_point(field_add:pb.TBattleResult.Army1Arr)
  return army1arr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfoAfterBattle >&
TBattleResult::army1arr() const {
  // @@protoc_insertion_point(field_list:pb.TBattleResult.Army1Arr)
  return army1arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfoAfterBattle >*
TBattleResult::mutable_army1arr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleResult.Army1Arr)
  return &army1arr_;
}

// repeated .pb.TArmyInfoAfterBattle Army2Arr = 6;
inline int TBattleResult::army2arr_size() const {
  return army2arr_.size();
}
inline void TBattleResult::clear_army2arr() {
  army2arr_.Clear();
}
inline const ::pb::TArmyInfoAfterBattle& TBattleResult::army2arr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.Army2Arr)
  return army2arr_.Get(index);
}
inline ::pb::TArmyInfoAfterBattle* TBattleResult::mutable_army2arr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleResult.Army2Arr)
  return army2arr_.Mutable(index);
}
inline ::pb::TArmyInfoAfterBattle* TBattleResult::add_army2arr() {
  // @@protoc_insertion_point(field_add:pb.TBattleResult.Army2Arr)
  return army2arr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfoAfterBattle >&
TBattleResult::army2arr() const {
  // @@protoc_insertion_point(field_list:pb.TBattleResult.Army2Arr)
  return army2arr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfoAfterBattle >*
TBattleResult::mutable_army2arr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleResult.Army2Arr)
  return &army2arr_;
}

// optional bytes BattleReportStr = 7;
inline bool TBattleResult::has_battlereportstr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TBattleResult::set_has_battlereportstr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TBattleResult::clear_has_battlereportstr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TBattleResult::clear_battlereportstr() {
  if (battlereportstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereportstr_->clear();
  }
  clear_has_battlereportstr();
}
inline const ::std::string& TBattleResult::battlereportstr() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.BattleReportStr)
  return *battlereportstr_;
}
inline void TBattleResult::set_battlereportstr(const ::std::string& value) {
  set_has_battlereportstr();
  if (battlereportstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereportstr_ = new ::std::string;
  }
  battlereportstr_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleResult.BattleReportStr)
}
inline void TBattleResult::set_battlereportstr(const char* value) {
  set_has_battlereportstr();
  if (battlereportstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereportstr_ = new ::std::string;
  }
  battlereportstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleResult.BattleReportStr)
}
inline void TBattleResult::set_battlereportstr(const void* value, size_t size) {
  set_has_battlereportstr();
  if (battlereportstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereportstr_ = new ::std::string;
  }
  battlereportstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleResult.BattleReportStr)
}
inline ::std::string* TBattleResult::mutable_battlereportstr() {
  set_has_battlereportstr();
  if (battlereportstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlereportstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleResult.BattleReportStr)
  return battlereportstr_;
}
inline ::std::string* TBattleResult::release_battlereportstr() {
  clear_has_battlereportstr();
  if (battlereportstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battlereportstr_;
    battlereportstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleResult::set_allocated_battlereportstr(::std::string* battlereportstr) {
  if (battlereportstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlereportstr_;
  }
  if (battlereportstr) {
    set_has_battlereportstr();
    battlereportstr_ = battlereportstr;
  } else {
    clear_has_battlereportstr();
    battlereportstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleResult.BattleReportStr)
}

// optional uint64 BattleTime = 8;
inline bool TBattleResult::has_battletime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TBattleResult::set_has_battletime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TBattleResult::clear_has_battletime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TBattleResult::clear_battletime() {
  battletime_ = GOOGLE_ULONGLONG(0);
  clear_has_battletime();
}
inline ::google::protobuf::uint64 TBattleResult::battletime() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.BattleTime)
  return battletime_;
}
inline void TBattleResult::set_battletime(::google::protobuf::uint64 value) {
  set_has_battletime();
  battletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleResult.BattleTime)
}

// optional string BattleFirewallVersion = 9;
inline bool TBattleResult::has_battlefirewallversion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TBattleResult::set_has_battlefirewallversion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TBattleResult::clear_has_battlefirewallversion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TBattleResult::clear_battlefirewallversion() {
  if (battlefirewallversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlefirewallversion_->clear();
  }
  clear_has_battlefirewallversion();
}
inline const ::std::string& TBattleResult::battlefirewallversion() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.BattleFirewallVersion)
  return *battlefirewallversion_;
}
inline void TBattleResult::set_battlefirewallversion(const ::std::string& value) {
  set_has_battlefirewallversion();
  if (battlefirewallversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlefirewallversion_ = new ::std::string;
  }
  battlefirewallversion_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleResult.BattleFirewallVersion)
}
inline void TBattleResult::set_battlefirewallversion(const char* value) {
  set_has_battlefirewallversion();
  if (battlefirewallversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlefirewallversion_ = new ::std::string;
  }
  battlefirewallversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleResult.BattleFirewallVersion)
}
inline void TBattleResult::set_battlefirewallversion(const char* value, size_t size) {
  set_has_battlefirewallversion();
  if (battlefirewallversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlefirewallversion_ = new ::std::string;
  }
  battlefirewallversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleResult.BattleFirewallVersion)
}
inline ::std::string* TBattleResult::mutable_battlefirewallversion() {
  set_has_battlefirewallversion();
  if (battlefirewallversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battlefirewallversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleResult.BattleFirewallVersion)
  return battlefirewallversion_;
}
inline ::std::string* TBattleResult::release_battlefirewallversion() {
  clear_has_battlefirewallversion();
  if (battlefirewallversion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battlefirewallversion_;
    battlefirewallversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleResult::set_allocated_battlefirewallversion(::std::string* battlefirewallversion) {
  if (battlefirewallversion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlefirewallversion_;
  }
  if (battlefirewallversion) {
    set_has_battlefirewallversion();
    battlefirewallversion_ = battlefirewallversion;
  } else {
    clear_has_battlefirewallversion();
    battlefirewallversion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleResult.BattleFirewallVersion)
}

// optional uint32 ScreenIndex = 10;
inline bool TBattleResult::has_screenindex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TBattleResult::set_has_screenindex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TBattleResult::clear_has_screenindex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TBattleResult::clear_screenindex() {
  screenindex_ = 0u;
  clear_has_screenindex();
}
inline ::google::protobuf::uint32 TBattleResult::screenindex() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.ScreenIndex)
  return screenindex_;
}
inline void TBattleResult::set_screenindex(::google::protobuf::uint32 value) {
  set_has_screenindex();
  screenindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleResult.ScreenIndex)
}

// optional uint64 RecordId = 11;
inline bool TBattleResult::has_recordid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TBattleResult::set_has_recordid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TBattleResult::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TBattleResult::clear_recordid() {
  recordid_ = GOOGLE_ULONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::uint64 TBattleResult::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.RecordId)
  return recordid_;
}
inline void TBattleResult::set_recordid(::google::protobuf::uint64 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleResult.RecordId)
}

// optional .pb.TBattleBTRecord BattleBTRecord = 12;
inline bool TBattleResult::has_battlebtrecord() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TBattleResult::set_has_battlebtrecord() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TBattleResult::clear_has_battlebtrecord() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TBattleResult::clear_battlebtrecord() {
  if (battlebtrecord_ != NULL) battlebtrecord_->::pb::TBattleBTRecord::Clear();
  clear_has_battlebtrecord();
}
inline const ::pb::TBattleBTRecord& TBattleResult::battlebtrecord() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.BattleBTRecord)
  return battlebtrecord_ != NULL ? *battlebtrecord_ : *default_instance_->battlebtrecord_;
}
inline ::pb::TBattleBTRecord* TBattleResult::mutable_battlebtrecord() {
  set_has_battlebtrecord();
  if (battlebtrecord_ == NULL) battlebtrecord_ = new ::pb::TBattleBTRecord;
  // @@protoc_insertion_point(field_mutable:pb.TBattleResult.BattleBTRecord)
  return battlebtrecord_;
}
inline ::pb::TBattleBTRecord* TBattleResult::release_battlebtrecord() {
  clear_has_battlebtrecord();
  ::pb::TBattleBTRecord* temp = battlebtrecord_;
  battlebtrecord_ = NULL;
  return temp;
}
inline void TBattleResult::set_allocated_battlebtrecord(::pb::TBattleBTRecord* battlebtrecord) {
  delete battlebtrecord_;
  battlebtrecord_ = battlebtrecord;
  if (battlebtrecord) {
    set_has_battlebtrecord();
  } else {
    clear_has_battlebtrecord();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleResult.BattleBTRecord)
}

// optional .pb.TSkillCountInfo SkillCountInfo = 13;
inline bool TBattleResult::has_skillcountinfo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TBattleResult::set_has_skillcountinfo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TBattleResult::clear_has_skillcountinfo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TBattleResult::clear_skillcountinfo() {
  if (skillcountinfo_ != NULL) skillcountinfo_->::pb::TSkillCountInfo::Clear();
  clear_has_skillcountinfo();
}
inline const ::pb::TSkillCountInfo& TBattleResult::skillcountinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.SkillCountInfo)
  return skillcountinfo_ != NULL ? *skillcountinfo_ : *default_instance_->skillcountinfo_;
}
inline ::pb::TSkillCountInfo* TBattleResult::mutable_skillcountinfo() {
  set_has_skillcountinfo();
  if (skillcountinfo_ == NULL) skillcountinfo_ = new ::pb::TSkillCountInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBattleResult.SkillCountInfo)
  return skillcountinfo_;
}
inline ::pb::TSkillCountInfo* TBattleResult::release_skillcountinfo() {
  clear_has_skillcountinfo();
  ::pb::TSkillCountInfo* temp = skillcountinfo_;
  skillcountinfo_ = NULL;
  return temp;
}
inline void TBattleResult::set_allocated_skillcountinfo(::pb::TSkillCountInfo* skillcountinfo) {
  delete skillcountinfo_;
  skillcountinfo_ = skillcountinfo;
  if (skillcountinfo) {
    set_has_skillcountinfo();
  } else {
    clear_has_skillcountinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleResult.SkillCountInfo)
}

// optional uint32 ValidWaveNumber = 14;
inline bool TBattleResult::has_validwavenumber() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TBattleResult::set_has_validwavenumber() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TBattleResult::clear_has_validwavenumber() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TBattleResult::clear_validwavenumber() {
  validwavenumber_ = 0u;
  clear_has_validwavenumber();
}
inline ::google::protobuf::uint32 TBattleResult::validwavenumber() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.ValidWaveNumber)
  return validwavenumber_;
}
inline void TBattleResult::set_validwavenumber(::google::protobuf::uint32 value) {
  set_has_validwavenumber();
  validwavenumber_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleResult.ValidWaveNumber)
}

// optional .pb.TTDRecordInfo TDRecordInfo = 15;
inline bool TBattleResult::has_tdrecordinfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TBattleResult::set_has_tdrecordinfo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TBattleResult::clear_has_tdrecordinfo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TBattleResult::clear_tdrecordinfo() {
  if (tdrecordinfo_ != NULL) tdrecordinfo_->::pb::TTDRecordInfo::Clear();
  clear_has_tdrecordinfo();
}
inline const ::pb::TTDRecordInfo& TBattleResult::tdrecordinfo() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.TDRecordInfo)
  return tdrecordinfo_ != NULL ? *tdrecordinfo_ : *default_instance_->tdrecordinfo_;
}
inline ::pb::TTDRecordInfo* TBattleResult::mutable_tdrecordinfo() {
  set_has_tdrecordinfo();
  if (tdrecordinfo_ == NULL) tdrecordinfo_ = new ::pb::TTDRecordInfo;
  // @@protoc_insertion_point(field_mutable:pb.TBattleResult.TDRecordInfo)
  return tdrecordinfo_;
}
inline ::pb::TTDRecordInfo* TBattleResult::release_tdrecordinfo() {
  clear_has_tdrecordinfo();
  ::pb::TTDRecordInfo* temp = tdrecordinfo_;
  tdrecordinfo_ = NULL;
  return temp;
}
inline void TBattleResult::set_allocated_tdrecordinfo(::pb::TTDRecordInfo* tdrecordinfo) {
  delete tdrecordinfo_;
  tdrecordinfo_ = tdrecordinfo;
  if (tdrecordinfo) {
    set_has_tdrecordinfo();
  } else {
    clear_has_tdrecordinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleResult.TDRecordInfo)
}

// optional uint32 ResultId = 16;
inline bool TBattleResult::has_resultid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TBattleResult::set_has_resultid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TBattleResult::clear_has_resultid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TBattleResult::clear_resultid() {
  resultid_ = 0u;
  clear_has_resultid();
}
inline ::google::protobuf::uint32 TBattleResult::resultid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.ResultId)
  return resultid_;
}
inline void TBattleResult::set_resultid(::google::protobuf::uint32 value) {
  set_has_resultid();
  resultid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleResult.ResultId)
}

// optional .pb.TWheelWarFieldStatus WheelWarFieldStatus = 17;
inline bool TBattleResult::has_wheelwarfieldstatus() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TBattleResult::set_has_wheelwarfieldstatus() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TBattleResult::clear_has_wheelwarfieldstatus() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TBattleResult::clear_wheelwarfieldstatus() {
  if (wheelwarfieldstatus_ != NULL) wheelwarfieldstatus_->::pb::TWheelWarFieldStatus::Clear();
  clear_has_wheelwarfieldstatus();
}
inline const ::pb::TWheelWarFieldStatus& TBattleResult::wheelwarfieldstatus() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.WheelWarFieldStatus)
  return wheelwarfieldstatus_ != NULL ? *wheelwarfieldstatus_ : *default_instance_->wheelwarfieldstatus_;
}
inline ::pb::TWheelWarFieldStatus* TBattleResult::mutable_wheelwarfieldstatus() {
  set_has_wheelwarfieldstatus();
  if (wheelwarfieldstatus_ == NULL) wheelwarfieldstatus_ = new ::pb::TWheelWarFieldStatus;
  // @@protoc_insertion_point(field_mutable:pb.TBattleResult.WheelWarFieldStatus)
  return wheelwarfieldstatus_;
}
inline ::pb::TWheelWarFieldStatus* TBattleResult::release_wheelwarfieldstatus() {
  clear_has_wheelwarfieldstatus();
  ::pb::TWheelWarFieldStatus* temp = wheelwarfieldstatus_;
  wheelwarfieldstatus_ = NULL;
  return temp;
}
inline void TBattleResult::set_allocated_wheelwarfieldstatus(::pb::TWheelWarFieldStatus* wheelwarfieldstatus) {
  delete wheelwarfieldstatus_;
  wheelwarfieldstatus_ = wheelwarfieldstatus;
  if (wheelwarfieldstatus) {
    set_has_wheelwarfieldstatus();
  } else {
    clear_has_wheelwarfieldstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleResult.WheelWarFieldStatus)
}

// optional bool Questioned = 18;
inline bool TBattleResult::has_questioned() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TBattleResult::set_has_questioned() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TBattleResult::clear_has_questioned() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TBattleResult::clear_questioned() {
  questioned_ = false;
  clear_has_questioned();
}
inline bool TBattleResult::questioned() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResult.Questioned)
  return questioned_;
}
inline void TBattleResult::set_questioned(bool value) {
  set_has_questioned();
  questioned_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleResult.Questioned)
}

// -------------------------------------------------------------------

// TBattleBTRecord

// repeated .pb.TBTActionInfo BTActionInfoArr = 1;
inline int TBattleBTRecord::btactioninfoarr_size() const {
  return btactioninfoarr_.size();
}
inline void TBattleBTRecord::clear_btactioninfoarr() {
  btactioninfoarr_.Clear();
}
inline const ::pb::TBTActionInfo& TBattleBTRecord::btactioninfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleBTRecord.BTActionInfoArr)
  return btactioninfoarr_.Get(index);
}
inline ::pb::TBTActionInfo* TBattleBTRecord::mutable_btactioninfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleBTRecord.BTActionInfoArr)
  return btactioninfoarr_.Mutable(index);
}
inline ::pb::TBTActionInfo* TBattleBTRecord::add_btactioninfoarr() {
  // @@protoc_insertion_point(field_add:pb.TBattleBTRecord.BTActionInfoArr)
  return btactioninfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBTActionInfo >&
TBattleBTRecord::btactioninfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TBattleBTRecord.BTActionInfoArr)
  return btactioninfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBTActionInfo >*
TBattleBTRecord::mutable_btactioninfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleBTRecord.BTActionInfoArr)
  return &btactioninfoarr_;
}

// -------------------------------------------------------------------

// TGroupMatchResult

// required .pb.EGroupMatchType Type = 1;
inline bool TGroupMatchResult::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGroupMatchResult::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGroupMatchResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGroupMatchResult::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pb::EGroupMatchType TGroupMatchResult::type() const {
  // @@protoc_insertion_point(field_get:pb.TGroupMatchResult.Type)
  return static_cast< ::pb::EGroupMatchType >(type_);
}
inline void TGroupMatchResult::set_type(::pb::EGroupMatchType value) {
  assert(::pb::EGroupMatchType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TGroupMatchResult.Type)
}

// repeated .pb.TBattleResult GroupResults = 2;
inline int TGroupMatchResult::groupresults_size() const {
  return groupresults_.size();
}
inline void TGroupMatchResult::clear_groupresults() {
  groupresults_.Clear();
}
inline const ::pb::TBattleResult& TGroupMatchResult::groupresults(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGroupMatchResult.GroupResults)
  return groupresults_.Get(index);
}
inline ::pb::TBattleResult* TGroupMatchResult::mutable_groupresults(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGroupMatchResult.GroupResults)
  return groupresults_.Mutable(index);
}
inline ::pb::TBattleResult* TGroupMatchResult::add_groupresults() {
  // @@protoc_insertion_point(field_add:pb.TGroupMatchResult.GroupResults)
  return groupresults_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleResult >&
TGroupMatchResult::groupresults() const {
  // @@protoc_insertion_point(field_list:pb.TGroupMatchResult.GroupResults)
  return groupresults_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleResult >*
TGroupMatchResult::mutable_groupresults() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGroupMatchResult.GroupResults)
  return &groupresults_;
}

// repeated .pb.TArmyInfo GroupArmys = 3;
inline int TGroupMatchResult::grouparmys_size() const {
  return grouparmys_.size();
}
inline void TGroupMatchResult::clear_grouparmys() {
  grouparmys_.Clear();
}
inline const ::pb::TArmyInfo& TGroupMatchResult::grouparmys(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGroupMatchResult.GroupArmys)
  return grouparmys_.Get(index);
}
inline ::pb::TArmyInfo* TGroupMatchResult::mutable_grouparmys(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGroupMatchResult.GroupArmys)
  return grouparmys_.Mutable(index);
}
inline ::pb::TArmyInfo* TGroupMatchResult::add_grouparmys() {
  // @@protoc_insertion_point(field_add:pb.TGroupMatchResult.GroupArmys)
  return grouparmys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
TGroupMatchResult::grouparmys() const {
  // @@protoc_insertion_point(field_list:pb.TGroupMatchResult.GroupArmys)
  return grouparmys_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
TGroupMatchResult::mutable_grouparmys() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGroupMatchResult.GroupArmys)
  return &grouparmys_;
}

// -------------------------------------------------------------------

// TGroupMatchArgs

// required .pb.EGroupMatchType Type = 1;
inline bool TGroupMatchArgs::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGroupMatchArgs::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGroupMatchArgs::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGroupMatchArgs::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::pb::EGroupMatchType TGroupMatchArgs::type() const {
  // @@protoc_insertion_point(field_get:pb.TGroupMatchArgs.Type)
  return static_cast< ::pb::EGroupMatchType >(type_);
}
inline void TGroupMatchArgs::set_type(::pb::EGroupMatchType value) {
  assert(::pb::EGroupMatchType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TGroupMatchArgs.Type)
}

// optional .pb.TBattleArgs BaseBattleArgs = 2;
inline bool TGroupMatchArgs::has_basebattleargs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGroupMatchArgs::set_has_basebattleargs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGroupMatchArgs::clear_has_basebattleargs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGroupMatchArgs::clear_basebattleargs() {
  if (basebattleargs_ != NULL) basebattleargs_->::pb::TBattleArgs::Clear();
  clear_has_basebattleargs();
}
inline const ::pb::TBattleArgs& TGroupMatchArgs::basebattleargs() const {
  // @@protoc_insertion_point(field_get:pb.TGroupMatchArgs.BaseBattleArgs)
  return basebattleargs_ != NULL ? *basebattleargs_ : *default_instance_->basebattleargs_;
}
inline ::pb::TBattleArgs* TGroupMatchArgs::mutable_basebattleargs() {
  set_has_basebattleargs();
  if (basebattleargs_ == NULL) basebattleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TGroupMatchArgs.BaseBattleArgs)
  return basebattleargs_;
}
inline ::pb::TBattleArgs* TGroupMatchArgs::release_basebattleargs() {
  clear_has_basebattleargs();
  ::pb::TBattleArgs* temp = basebattleargs_;
  basebattleargs_ = NULL;
  return temp;
}
inline void TGroupMatchArgs::set_allocated_basebattleargs(::pb::TBattleArgs* basebattleargs) {
  delete basebattleargs_;
  basebattleargs_ = basebattleargs;
  if (basebattleargs) {
    set_has_basebattleargs();
  } else {
    clear_has_basebattleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGroupMatchArgs.BaseBattleArgs)
}

// repeated .pb.TArmyInfo GroupArmys = 3;
inline int TGroupMatchArgs::grouparmys_size() const {
  return grouparmys_.size();
}
inline void TGroupMatchArgs::clear_grouparmys() {
  grouparmys_.Clear();
}
inline const ::pb::TArmyInfo& TGroupMatchArgs::grouparmys(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGroupMatchArgs.GroupArmys)
  return grouparmys_.Get(index);
}
inline ::pb::TArmyInfo* TGroupMatchArgs::mutable_grouparmys(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGroupMatchArgs.GroupArmys)
  return grouparmys_.Mutable(index);
}
inline ::pb::TArmyInfo* TGroupMatchArgs::add_grouparmys() {
  // @@protoc_insertion_point(field_add:pb.TGroupMatchArgs.GroupArmys)
  return grouparmys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
TGroupMatchArgs::grouparmys() const {
  // @@protoc_insertion_point(field_list:pb.TGroupMatchArgs.GroupArmys)
  return grouparmys_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
TGroupMatchArgs::mutable_grouparmys() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGroupMatchArgs.GroupArmys)
  return &grouparmys_;
}

// -------------------------------------------------------------------

// TBattleResultReq

// optional uint64 rid = 1;
inline bool TBattleResultReq::has_rid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBattleResultReq::set_has_rid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBattleResultReq::clear_has_rid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBattleResultReq::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 TBattleResultReq::rid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResultReq.rid)
  return rid_;
}
inline void TBattleResultReq::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleResultReq.rid)
}

// optional string ServerId = 2;
inline bool TBattleResultReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBattleResultReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBattleResultReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBattleResultReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TBattleResultReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResultReq.ServerId)
  return *serverid_;
}
inline void TBattleResultReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleResultReq.ServerId)
}
inline void TBattleResultReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleResultReq.ServerId)
}
inline void TBattleResultReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleResultReq.ServerId)
}
inline ::std::string* TBattleResultReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleResultReq.ServerId)
  return serverid_;
}
inline ::std::string* TBattleResultReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleResultReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleResultReq.ServerId)
}

// -------------------------------------------------------------------

// TBattleLocalResultReq

// optional string LocalId = 1;
inline bool TBattleLocalResultReq::has_localid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBattleLocalResultReq::set_has_localid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBattleLocalResultReq::clear_has_localid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBattleLocalResultReq::clear_localid() {
  if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localid_->clear();
  }
  clear_has_localid();
}
inline const ::std::string& TBattleLocalResultReq::localid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleLocalResultReq.LocalId)
  return *localid_;
}
inline void TBattleLocalResultReq::set_localid(const ::std::string& value) {
  set_has_localid();
  if (localid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localid_ = new ::std::string;
  }
  localid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleLocalResultReq.LocalId)
}
inline void TBattleLocalResultReq::set_localid(const char* value) {
  set_has_localid();
  if (localid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localid_ = new ::std::string;
  }
  localid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleLocalResultReq.LocalId)
}
inline void TBattleLocalResultReq::set_localid(const char* value, size_t size) {
  set_has_localid();
  if (localid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localid_ = new ::std::string;
  }
  localid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleLocalResultReq.LocalId)
}
inline ::std::string* TBattleLocalResultReq::mutable_localid() {
  set_has_localid();
  if (localid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    localid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleLocalResultReq.LocalId)
  return localid_;
}
inline ::std::string* TBattleLocalResultReq::release_localid() {
  clear_has_localid();
  if (localid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = localid_;
    localid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleLocalResultReq::set_allocated_localid(::std::string* localid) {
  if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localid_;
  }
  if (localid) {
    set_has_localid();
    localid_ = localid;
  } else {
    clear_has_localid();
    localid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleLocalResultReq.LocalId)
}

// optional uint64 Rid = 2;
inline bool TBattleLocalResultReq::has_rid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBattleLocalResultReq::set_has_rid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBattleLocalResultReq::clear_has_rid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBattleLocalResultReq::clear_rid() {
  rid_ = GOOGLE_ULONGLONG(0);
  clear_has_rid();
}
inline ::google::protobuf::uint64 TBattleLocalResultReq::rid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleLocalResultReq.Rid)
  return rid_;
}
inline void TBattleLocalResultReq::set_rid(::google::protobuf::uint64 value) {
  set_has_rid();
  rid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBattleLocalResultReq.Rid)
}

// optional string ServerId = 3;
inline bool TBattleLocalResultReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBattleLocalResultReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBattleLocalResultReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBattleLocalResultReq::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TBattleLocalResultReq::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TBattleLocalResultReq.ServerId)
  return *serverid_;
}
inline void TBattleLocalResultReq::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleLocalResultReq.ServerId)
}
inline void TBattleLocalResultReq::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleLocalResultReq.ServerId)
}
inline void TBattleLocalResultReq::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleLocalResultReq.ServerId)
}
inline ::std::string* TBattleLocalResultReq::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleLocalResultReq.ServerId)
  return serverid_;
}
inline ::std::string* TBattleLocalResultReq::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleLocalResultReq::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleLocalResultReq.ServerId)
}

// -------------------------------------------------------------------

// TBattleResultRsp

// optional .pb.TBattleResult battleResult = 1;
inline bool TBattleResultRsp::has_battleresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBattleResultRsp::set_has_battleresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBattleResultRsp::clear_has_battleresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBattleResultRsp::clear_battleresult() {
  if (battleresult_ != NULL) battleresult_->::pb::TBattleResult::Clear();
  clear_has_battleresult();
}
inline const ::pb::TBattleResult& TBattleResultRsp::battleresult() const {
  // @@protoc_insertion_point(field_get:pb.TBattleResultRsp.battleResult)
  return battleresult_ != NULL ? *battleresult_ : *default_instance_->battleresult_;
}
inline ::pb::TBattleResult* TBattleResultRsp::mutable_battleresult() {
  set_has_battleresult();
  if (battleresult_ == NULL) battleresult_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TBattleResultRsp.battleResult)
  return battleresult_;
}
inline ::pb::TBattleResult* TBattleResultRsp::release_battleresult() {
  clear_has_battleresult();
  ::pb::TBattleResult* temp = battleresult_;
  battleresult_ = NULL;
  return temp;
}
inline void TBattleResultRsp::set_allocated_battleresult(::pb::TBattleResult* battleresult) {
  delete battleresult_;
  battleresult_ = battleresult;
  if (battleresult) {
    set_has_battleresult();
  } else {
    clear_has_battleresult();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleResultRsp.battleResult)
}

// -------------------------------------------------------------------

// TBattleCheckParam

// optional string BattleConfVer = 1;
inline bool TBattleCheckParam::has_battleconfver() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBattleCheckParam::set_has_battleconfver() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBattleCheckParam::clear_has_battleconfver() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBattleCheckParam::clear_battleconfver() {
  if (battleconfver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleconfver_->clear();
  }
  clear_has_battleconfver();
}
inline const ::std::string& TBattleCheckParam::battleconfver() const {
  // @@protoc_insertion_point(field_get:pb.TBattleCheckParam.BattleConfVer)
  return *battleconfver_;
}
inline void TBattleCheckParam::set_battleconfver(const ::std::string& value) {
  set_has_battleconfver();
  if (battleconfver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleconfver_ = new ::std::string;
  }
  battleconfver_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TBattleCheckParam.BattleConfVer)
}
inline void TBattleCheckParam::set_battleconfver(const char* value) {
  set_has_battleconfver();
  if (battleconfver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleconfver_ = new ::std::string;
  }
  battleconfver_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBattleCheckParam.BattleConfVer)
}
inline void TBattleCheckParam::set_battleconfver(const char* value, size_t size) {
  set_has_battleconfver();
  if (battleconfver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleconfver_ = new ::std::string;
  }
  battleconfver_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBattleCheckParam.BattleConfVer)
}
inline ::std::string* TBattleCheckParam::mutable_battleconfver() {
  set_has_battleconfver();
  if (battleconfver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleconfver_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TBattleCheckParam.BattleConfVer)
  return battleconfver_;
}
inline ::std::string* TBattleCheckParam::release_battleconfver() {
  clear_has_battleconfver();
  if (battleconfver_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleconfver_;
    battleconfver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TBattleCheckParam::set_allocated_battleconfver(::std::string* battleconfver) {
  if (battleconfver_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleconfver_;
  }
  if (battleconfver) {
    set_has_battleconfver();
    battleconfver_ = battleconfver;
  } else {
    clear_has_battleconfver();
    battleconfver_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TBattleCheckParam.BattleConfVer)
}

// repeated .pb.TArmyFormation MyArmyFormation = 2;
inline int TBattleCheckParam::myarmyformation_size() const {
  return myarmyformation_.size();
}
inline void TBattleCheckParam::clear_myarmyformation() {
  myarmyformation_.Clear();
}
inline const ::pb::TArmyFormation& TBattleCheckParam::myarmyformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBattleCheckParam.MyArmyFormation)
  return myarmyformation_.Get(index);
}
inline ::pb::TArmyFormation* TBattleCheckParam::mutable_myarmyformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBattleCheckParam.MyArmyFormation)
  return myarmyformation_.Mutable(index);
}
inline ::pb::TArmyFormation* TBattleCheckParam::add_myarmyformation() {
  // @@protoc_insertion_point(field_add:pb.TBattleCheckParam.MyArmyFormation)
  return myarmyformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyFormation >&
TBattleCheckParam::myarmyformation() const {
  // @@protoc_insertion_point(field_list:pb.TBattleCheckParam.MyArmyFormation)
  return myarmyformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyFormation >*
TBattleCheckParam::mutable_myarmyformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBattleCheckParam.MyArmyFormation)
  return &myarmyformation_;
}

// -------------------------------------------------------------------

// TArmyFormation

// repeated .pb.TUnitFormation TeamFormation = 1;
inline int TArmyFormation::teamformation_size() const {
  return teamformation_.size();
}
inline void TArmyFormation::clear_teamformation() {
  teamformation_.Clear();
}
inline const ::pb::TUnitFormation& TArmyFormation::teamformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TArmyFormation.TeamFormation)
  return teamformation_.Get(index);
}
inline ::pb::TUnitFormation* TArmyFormation::mutable_teamformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TArmyFormation.TeamFormation)
  return teamformation_.Mutable(index);
}
inline ::pb::TUnitFormation* TArmyFormation::add_teamformation() {
  // @@protoc_insertion_point(field_add:pb.TArmyFormation.TeamFormation)
  return teamformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
TArmyFormation::teamformation() const {
  // @@protoc_insertion_point(field_list:pb.TArmyFormation.TeamFormation)
  return teamformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
TArmyFormation::mutable_teamformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TArmyFormation.TeamFormation)
  return &teamformation_;
}

// -------------------------------------------------------------------

// TUnitFormation

// optional uint32 Hid = 1;
inline bool TUnitFormation::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUnitFormation::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUnitFormation::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUnitFormation::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TUnitFormation::hid() const {
  // @@protoc_insertion_point(field_get:pb.TUnitFormation.Hid)
  return hid_;
}
inline void TUnitFormation::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitFormation.Hid)
}

// optional uint32 Pos = 2;
inline bool TUnitFormation::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUnitFormation::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUnitFormation::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUnitFormation::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TUnitFormation::pos() const {
  // @@protoc_insertion_point(field_get:pb.TUnitFormation.Pos)
  return pos_;
}
inline void TUnitFormation::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TUnitFormation.Pos)
}

// -------------------------------------------------------------------

// TGetBattleArgsWithUidListRsp

// repeated .pb.TArmyInfo OtherUserArmyArr = 1;
inline int TGetBattleArgsWithUidListRsp::otheruserarmyarr_size() const {
  return otheruserarmyarr_.size();
}
inline void TGetBattleArgsWithUidListRsp::clear_otheruserarmyarr() {
  otheruserarmyarr_.Clear();
}
inline const ::pb::TArmyInfo& TGetBattleArgsWithUidListRsp::otheruserarmyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsWithUidListRsp.OtherUserArmyArr)
  return otheruserarmyarr_.Get(index);
}
inline ::pb::TArmyInfo* TGetBattleArgsWithUidListRsp::mutable_otheruserarmyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGetBattleArgsWithUidListRsp.OtherUserArmyArr)
  return otheruserarmyarr_.Mutable(index);
}
inline ::pb::TArmyInfo* TGetBattleArgsWithUidListRsp::add_otheruserarmyarr() {
  // @@protoc_insertion_point(field_add:pb.TGetBattleArgsWithUidListRsp.OtherUserArmyArr)
  return otheruserarmyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >&
TGetBattleArgsWithUidListRsp::otheruserarmyarr() const {
  // @@protoc_insertion_point(field_list:pb.TGetBattleArgsWithUidListRsp.OtherUserArmyArr)
  return otheruserarmyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyInfo >*
TGetBattleArgsWithUidListRsp::mutable_otheruserarmyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGetBattleArgsWithUidListRsp.OtherUserArmyArr)
  return &otheruserarmyarr_;
}

// -------------------------------------------------------------------

// TBatchBattleArgs

// repeated .pb.TBattleArgs BattleArgsArr = 1;
inline int TBatchBattleArgs::battleargsarr_size() const {
  return battleargsarr_.size();
}
inline void TBatchBattleArgs::clear_battleargsarr() {
  battleargsarr_.Clear();
}
inline const ::pb::TBattleArgs& TBatchBattleArgs::battleargsarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBatchBattleArgs.BattleArgsArr)
  return battleargsarr_.Get(index);
}
inline ::pb::TBattleArgs* TBatchBattleArgs::mutable_battleargsarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBatchBattleArgs.BattleArgsArr)
  return battleargsarr_.Mutable(index);
}
inline ::pb::TBattleArgs* TBatchBattleArgs::add_battleargsarr() {
  // @@protoc_insertion_point(field_add:pb.TBatchBattleArgs.BattleArgsArr)
  return battleargsarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >&
TBatchBattleArgs::battleargsarr() const {
  // @@protoc_insertion_point(field_list:pb.TBatchBattleArgs.BattleArgsArr)
  return battleargsarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBattleArgs >*
TBatchBattleArgs::mutable_battleargsarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBatchBattleArgs.BattleArgsArr)
  return &battleargsarr_;
}

// -------------------------------------------------------------------

// TBatchBattleResult

// repeated bytes BattleResultArr = 1;
inline int TBatchBattleResult::battleresultarr_size() const {
  return battleresultarr_.size();
}
inline void TBatchBattleResult::clear_battleresultarr() {
  battleresultarr_.Clear();
}
inline const ::std::string& TBatchBattleResult::battleresultarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBatchBattleResult.BattleResultArr)
  return battleresultarr_.Get(index);
}
inline ::std::string* TBatchBattleResult::mutable_battleresultarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBatchBattleResult.BattleResultArr)
  return battleresultarr_.Mutable(index);
}
inline void TBatchBattleResult::set_battleresultarr(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TBatchBattleResult.BattleResultArr)
  battleresultarr_.Mutable(index)->assign(value);
}
inline void TBatchBattleResult::set_battleresultarr(int index, const char* value) {
  battleresultarr_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TBatchBattleResult.BattleResultArr)
}
inline void TBatchBattleResult::set_battleresultarr(int index, const void* value, size_t size) {
  battleresultarr_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TBatchBattleResult.BattleResultArr)
}
inline ::std::string* TBatchBattleResult::add_battleresultarr() {
  return battleresultarr_.Add();
}
inline void TBatchBattleResult::add_battleresultarr(const ::std::string& value) {
  battleresultarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TBatchBattleResult.BattleResultArr)
}
inline void TBatchBattleResult::add_battleresultarr(const char* value) {
  battleresultarr_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TBatchBattleResult.BattleResultArr)
}
inline void TBatchBattleResult::add_battleresultarr(const void* value, size_t size) {
  battleresultarr_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TBatchBattleResult.BattleResultArr)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TBatchBattleResult::battleresultarr() const {
  // @@protoc_insertion_point(field_list:pb.TBatchBattleResult.BattleResultArr)
  return battleresultarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TBatchBattleResult::mutable_battleresultarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBatchBattleResult.BattleResultArr)
  return &battleresultarr_;
}

// -------------------------------------------------------------------

// TGetBattleArgsWithParamReq

// required uint32 BattleInfoId = 1;
inline bool TGetBattleArgsWithParamReq::has_battleinfoid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGetBattleArgsWithParamReq::set_has_battleinfoid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGetBattleArgsWithParamReq::clear_has_battleinfoid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGetBattleArgsWithParamReq::clear_battleinfoid() {
  battleinfoid_ = 0u;
  clear_has_battleinfoid();
}
inline ::google::protobuf::uint32 TGetBattleArgsWithParamReq::battleinfoid() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsWithParamReq.BattleInfoId)
  return battleinfoid_;
}
inline void TGetBattleArgsWithParamReq::set_battleinfoid(::google::protobuf::uint32 value) {
  set_has_battleinfoid();
  battleinfoid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsWithParamReq.BattleInfoId)
}

// required .pb.EBattleStarter BattleStarter = 2;
inline bool TGetBattleArgsWithParamReq::has_battlestarter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGetBattleArgsWithParamReq::set_has_battlestarter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGetBattleArgsWithParamReq::clear_has_battlestarter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGetBattleArgsWithParamReq::clear_battlestarter() {
  battlestarter_ = 0;
  clear_has_battlestarter();
}
inline ::pb::EBattleStarter TGetBattleArgsWithParamReq::battlestarter() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsWithParamReq.BattleStarter)
  return static_cast< ::pb::EBattleStarter >(battlestarter_);
}
inline void TGetBattleArgsWithParamReq::set_battlestarter(::pb::EBattleStarter value) {
  assert(::pb::EBattleStarter_IsValid(value));
  set_has_battlestarter();
  battlestarter_ = value;
  // @@protoc_insertion_point(field_set:pb.TGetBattleArgsWithParamReq.BattleStarter)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 3;
inline bool TGetBattleArgsWithParamReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGetBattleArgsWithParamReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGetBattleArgsWithParamReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGetBattleArgsWithParamReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TGetBattleArgsWithParamReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsWithParamReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TGetBattleArgsWithParamReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TGetBattleArgsWithParamReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TGetBattleArgsWithParamReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TGetBattleArgsWithParamReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGetBattleArgsWithParamReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TGetBattleArgsWithParamRsp

// optional .pb.TBattleArgs BattleArgs = 1;
inline bool TGetBattleArgsWithParamRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGetBattleArgsWithParamRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGetBattleArgsWithParamRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGetBattleArgsWithParamRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TGetBattleArgsWithParamRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TGetBattleArgsWithParamRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TGetBattleArgsWithParamRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TGetBattleArgsWithParamRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TGetBattleArgsWithParamRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TGetBattleArgsWithParamRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGetBattleArgsWithParamRsp.BattleArgs)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fBattle_2eproto__INCLUDED
