// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GuildUser.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/GuildUser.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TDonateBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TDonateBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildMyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildMyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildUpdateMyGuildNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildUpdateMyGuildNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildReceiveDonateBoxReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildReceiveDonateBoxReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildReceiveDonateBoxRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildReceiveDonateBoxRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildReceiveSalaryRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildReceiveSalaryRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildPost_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fGuildUser_2eproto() {
  protobuf_AddDesc_net_2fGuildUser_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/GuildUser.proto");
  GOOGLE_CHECK(file != NULL);
  TDonateBox_descriptor_ = file->message_type(0);
  static const int TDonateBox_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDonateBox, boxindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDonateBox, receivetime_),
  };
  TDonateBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TDonateBox_descriptor_,
      TDonateBox::default_instance_,
      TDonateBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDonateBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TDonateBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TDonateBox));
  TGuildApply_descriptor_ = file->message_type(1);
  static const int TGuildApply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildApply, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildApply, applytime_),
  };
  TGuildApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildApply_descriptor_,
      TGuildApply::default_instance_,
      TGuildApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildApply));
  TGuildMyInfo_descriptor_ = file->message_type(2);
  static const int TGuildMyInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, quittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, donatenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, boxarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, applyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, rpgpost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, weekdonate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, salarytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, daydonate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, gainnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, sendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, tmfrewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, lastweekdonate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, freesendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, entertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, atknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, buyatknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, wishfragnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, giftfragnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, tmfrewardnum_),
  };
  TGuildMyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildMyInfo_descriptor_,
      TGuildMyInfo::default_instance_,
      TGuildMyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildMyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildMyInfo));
  TGuildUpdateMyGuildNotify_descriptor_ = file->message_type(3);
  static const int TGuildUpdateMyGuildNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateMyGuildNotify, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateMyGuildNotify, quittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateMyGuildNotify, applyarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateMyGuildNotify, rpgpost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateMyGuildNotify, donatenum_),
  };
  TGuildUpdateMyGuildNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildUpdateMyGuildNotify_descriptor_,
      TGuildUpdateMyGuildNotify::default_instance_,
      TGuildUpdateMyGuildNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateMyGuildNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateMyGuildNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildUpdateMyGuildNotify));
  TGuildReceiveDonateBoxReq_descriptor_ = file->message_type(4);
  static const int TGuildReceiveDonateBoxReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveDonateBoxReq, boxindex_),
  };
  TGuildReceiveDonateBoxReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildReceiveDonateBoxReq_descriptor_,
      TGuildReceiveDonateBoxReq::default_instance_,
      TGuildReceiveDonateBoxReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveDonateBoxReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveDonateBoxReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildReceiveDonateBoxReq));
  TGuildReceiveDonateBoxRsp_descriptor_ = file->message_type(5);
  static const int TGuildReceiveDonateBoxRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveDonateBoxRsp, rewardarray_),
  };
  TGuildReceiveDonateBoxRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildReceiveDonateBoxRsp_descriptor_,
      TGuildReceiveDonateBoxRsp::default_instance_,
      TGuildReceiveDonateBoxRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveDonateBoxRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveDonateBoxRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildReceiveDonateBoxRsp));
  TGuildReceiveSalaryRsp_descriptor_ = file->message_type(6);
  static const int TGuildReceiveSalaryRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveSalaryRsp, rewardarray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveSalaryRsp, salarytime_),
  };
  TGuildReceiveSalaryRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildReceiveSalaryRsp_descriptor_,
      TGuildReceiveSalaryRsp::default_instance_,
      TGuildReceiveSalaryRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveSalaryRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildReceiveSalaryRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildReceiveSalaryRsp));
  EGuildPost_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fGuildUser_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TDonateBox_descriptor_, &TDonateBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildApply_descriptor_, &TGuildApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildMyInfo_descriptor_, &TGuildMyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildUpdateMyGuildNotify_descriptor_, &TGuildUpdateMyGuildNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildReceiveDonateBoxReq_descriptor_, &TGuildReceiveDonateBoxReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildReceiveDonateBoxRsp_descriptor_, &TGuildReceiveDonateBoxRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildReceiveSalaryRsp_descriptor_, &TGuildReceiveSalaryRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fGuildUser_2eproto() {
  delete TDonateBox::default_instance_;
  delete TDonateBox_reflection_;
  delete TGuildApply::default_instance_;
  delete TGuildApply_reflection_;
  delete TGuildMyInfo::default_instance_;
  delete TGuildMyInfo_reflection_;
  delete TGuildUpdateMyGuildNotify::default_instance_;
  delete TGuildUpdateMyGuildNotify_reflection_;
  delete TGuildReceiveDonateBoxReq::default_instance_;
  delete TGuildReceiveDonateBoxReq_reflection_;
  delete TGuildReceiveDonateBoxRsp::default_instance_;
  delete TGuildReceiveDonateBoxRsp_reflection_;
  delete TGuildReceiveSalaryRsp::default_instance_;
  delete TGuildReceiveSalaryRsp_reflection_;
}

void protobuf_AddDesc_net_2fGuildUser_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/GuildUser.proto\022\002pb\032\026net/CommonRew"
    "ard.proto\"3\n\nTDonateBox\022\020\n\010BoxIndex\030\001 \001("
    "\r\022\023\n\013ReceiveTime\030\002 \001(\004\"1\n\013TGuildApply\022\017\n"
    "\007GuildId\030\001 \001(\004\022\021\n\tApplyTime\030\002 \001(\004\"\277\003\n\014TG"
    "uildMyInfo\022\017\n\007GuildId\030\001 \001(\004\022\020\n\010QuitTime\030"
    "\002 \001(\004\022\021\n\tDonateNum\030\003 \001(\r\022\036\n\006BoxArr\030\004 \003(\013"
    "2\016.pb.TDonateBox\022!\n\010ApplyArr\030\005 \003(\0132\017.pb."
    "TGuildApply\022\037\n\007RpgPost\030\006 \001(\0162\016.pb.EGuild"
    "Post\022\022\n\nWeekDonate\030\007 \001(\r\022\022\n\nSalaryTime\030\010"
    " \001(\004\022\021\n\tDayDonate\030\t \001(\r\022\017\n\007GainNum\030\n \001(\r"
    "\022\017\n\007SendNum\030\013 \001(\r\022\025\n\rTMFRewardTime\030\014 \001(\004"
    "\022\026\n\016LastWeekDonate\030\r \001(\r\022\023\n\013FreeSendNum\030"
    "\016 \001(\r\022\021\n\tEnterTime\030\017 \001(\004\022\016\n\006AtkNum\030\020 \001(\r"
    "\022\021\n\tBuyAtkNum\030\021 \001(\r\022\023\n\013WishFragNum\030\022 \001(\r"
    "\022\023\n\013GiftFragNum\030\023 \001(\r\022\024\n\014TMFRewardNum\030\024 "
    "\001(\r\"\225\001\n\031TGuildUpdateMyGuildNotify\022\017\n\007Gui"
    "ldId\030\001 \001(\004\022\020\n\010QuitTime\030\002 \001(\004\022!\n\010ApplyArr"
    "\030\003 \003(\0132\017.pb.TGuildApply\022\037\n\007RpgPost\030\004 \001(\016"
    "2\016.pb.EGuildPost\022\021\n\tDonateNum\030\005 \001(\r\"-\n\031T"
    "GuildReceiveDonateBoxReq\022\020\n\010BoxIndex\030\001 \001"
    "(\r\"C\n\031TGuildReceiveDonateBoxRsp\022&\n\013Rewar"
    "dArray\030\001 \003(\0132\021.pb.TCommonReward\"T\n\026TGuil"
    "dReceiveSalaryRsp\022&\n\013RewardArray\030\001 \003(\0132\021"
    ".pb.TCommonReward\022\022\n\nSalaryTime\030\002 \001(\004*N\n"
    "\nEGuildPost\022\r\n\tPOST_NONE\020\000\022\017\n\013POST_MEMBE"
    "R\020\001\022\017\n\013POST_LEADER\020\002\022\017\n\013POST_DEPUTY\020\003", 1037);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/GuildUser.proto", &protobuf_RegisterTypes);
  TDonateBox::default_instance_ = new TDonateBox();
  TGuildApply::default_instance_ = new TGuildApply();
  TGuildMyInfo::default_instance_ = new TGuildMyInfo();
  TGuildUpdateMyGuildNotify::default_instance_ = new TGuildUpdateMyGuildNotify();
  TGuildReceiveDonateBoxReq::default_instance_ = new TGuildReceiveDonateBoxReq();
  TGuildReceiveDonateBoxRsp::default_instance_ = new TGuildReceiveDonateBoxRsp();
  TGuildReceiveSalaryRsp::default_instance_ = new TGuildReceiveSalaryRsp();
  TDonateBox::default_instance_->InitAsDefaultInstance();
  TGuildApply::default_instance_->InitAsDefaultInstance();
  TGuildMyInfo::default_instance_->InitAsDefaultInstance();
  TGuildUpdateMyGuildNotify::default_instance_->InitAsDefaultInstance();
  TGuildReceiveDonateBoxReq::default_instance_->InitAsDefaultInstance();
  TGuildReceiveDonateBoxRsp::default_instance_->InitAsDefaultInstance();
  TGuildReceiveSalaryRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fGuildUser_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fGuildUser_2eproto {
  StaticDescriptorInitializer_net_2fGuildUser_2eproto() {
    protobuf_AddDesc_net_2fGuildUser_2eproto();
  }
} static_descriptor_initializer_net_2fGuildUser_2eproto_;
const ::google::protobuf::EnumDescriptor* EGuildPost_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildPost_descriptor_;
}
bool EGuildPost_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TDonateBox::kBoxIndexFieldNumber;
const int TDonateBox::kReceiveTimeFieldNumber;
#endif  // !_MSC_VER

TDonateBox::TDonateBox()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TDonateBox)
}

void TDonateBox::InitAsDefaultInstance() {
}

TDonateBox::TDonateBox(const TDonateBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TDonateBox)
}

void TDonateBox::SharedCtor() {
  _cached_size_ = 0;
  boxindex_ = 0u;
  receivetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TDonateBox::~TDonateBox() {
  // @@protoc_insertion_point(destructor:pb.TDonateBox)
  SharedDtor();
}

void TDonateBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TDonateBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TDonateBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TDonateBox_descriptor_;
}

const TDonateBox& TDonateBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildUser_2eproto();
  return *default_instance_;
}

TDonateBox* TDonateBox::default_instance_ = NULL;

TDonateBox* TDonateBox::New() const {
  return new TDonateBox;
}

void TDonateBox::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TDonateBox*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(receivetime_, boxindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TDonateBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TDonateBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BoxIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxindex_)));
          set_has_boxindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceiveTime;
        break;
      }

      // optional uint64 ReceiveTime = 2;
      case 2: {
        if (tag == 16) {
         parse_ReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receivetime_)));
          set_has_receivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TDonateBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TDonateBox)
  return false;
#undef DO_
}

void TDonateBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TDonateBox)
  // optional uint32 BoxIndex = 1;
  if (has_boxindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boxindex(), output);
  }

  // optional uint64 ReceiveTime = 2;
  if (has_receivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->receivetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TDonateBox)
}

::google::protobuf::uint8* TDonateBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TDonateBox)
  // optional uint32 BoxIndex = 1;
  if (has_boxindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boxindex(), target);
  }

  // optional uint64 ReceiveTime = 2;
  if (has_receivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->receivetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TDonateBox)
  return target;
}

int TDonateBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BoxIndex = 1;
    if (has_boxindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxindex());
    }

    // optional uint64 ReceiveTime = 2;
    if (has_receivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receivetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TDonateBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TDonateBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TDonateBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TDonateBox::MergeFrom(const TDonateBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxindex()) {
      set_boxindex(from.boxindex());
    }
    if (from.has_receivetime()) {
      set_receivetime(from.receivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TDonateBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TDonateBox::CopyFrom(const TDonateBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDonateBox::IsInitialized() const {

  return true;
}

void TDonateBox::Swap(TDonateBox* other) {
  if (other != this) {
    std::swap(boxindex_, other->boxindex_);
    std::swap(receivetime_, other->receivetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TDonateBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TDonateBox_descriptor_;
  metadata.reflection = TDonateBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildApply::kGuildIdFieldNumber;
const int TGuildApply::kApplyTimeFieldNumber;
#endif  // !_MSC_VER

TGuildApply::TGuildApply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildApply)
}

void TGuildApply::InitAsDefaultInstance() {
}

TGuildApply::TGuildApply(const TGuildApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildApply)
}

void TGuildApply::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  applytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildApply::~TGuildApply() {
  // @@protoc_insertion_point(destructor:pb.TGuildApply)
  SharedDtor();
}

void TGuildApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildApply_descriptor_;
}

const TGuildApply& TGuildApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildUser_2eproto();
  return *default_instance_;
}

TGuildApply* TGuildApply::default_instance_ = NULL;

TGuildApply* TGuildApply::New() const {
  return new TGuildApply;
}

void TGuildApply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildApply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guildid_, applytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildApply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ApplyTime;
        break;
      }

      // optional uint64 ApplyTime = 2;
      case 2: {
        if (tag == 16) {
         parse_ApplyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &applytime_)));
          set_has_applytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildApply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildApply)
  return false;
#undef DO_
}

void TGuildApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildApply)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional uint64 ApplyTime = 2;
  if (has_applytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->applytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildApply)
}

::google::protobuf::uint8* TGuildApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildApply)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional uint64 ApplyTime = 2;
  if (has_applytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->applytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildApply)
  return target;
}

int TGuildApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint64 ApplyTime = 2;
    if (has_applytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->applytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildApply::MergeFrom(const TGuildApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_applytime()) {
      set_applytime(from.applytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildApply::CopyFrom(const TGuildApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildApply::IsInitialized() const {

  return true;
}

void TGuildApply::Swap(TGuildApply* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(applytime_, other->applytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildApply_descriptor_;
  metadata.reflection = TGuildApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildMyInfo::kGuildIdFieldNumber;
const int TGuildMyInfo::kQuitTimeFieldNumber;
const int TGuildMyInfo::kDonateNumFieldNumber;
const int TGuildMyInfo::kBoxArrFieldNumber;
const int TGuildMyInfo::kApplyArrFieldNumber;
const int TGuildMyInfo::kRpgPostFieldNumber;
const int TGuildMyInfo::kWeekDonateFieldNumber;
const int TGuildMyInfo::kSalaryTimeFieldNumber;
const int TGuildMyInfo::kDayDonateFieldNumber;
const int TGuildMyInfo::kGainNumFieldNumber;
const int TGuildMyInfo::kSendNumFieldNumber;
const int TGuildMyInfo::kTMFRewardTimeFieldNumber;
const int TGuildMyInfo::kLastWeekDonateFieldNumber;
const int TGuildMyInfo::kFreeSendNumFieldNumber;
const int TGuildMyInfo::kEnterTimeFieldNumber;
const int TGuildMyInfo::kAtkNumFieldNumber;
const int TGuildMyInfo::kBuyAtkNumFieldNumber;
const int TGuildMyInfo::kWishFragNumFieldNumber;
const int TGuildMyInfo::kGiftFragNumFieldNumber;
const int TGuildMyInfo::kTMFRewardNumFieldNumber;
#endif  // !_MSC_VER

TGuildMyInfo::TGuildMyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildMyInfo)
}

void TGuildMyInfo::InitAsDefaultInstance() {
}

TGuildMyInfo::TGuildMyInfo(const TGuildMyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildMyInfo)
}

void TGuildMyInfo::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  quittime_ = GOOGLE_ULONGLONG(0);
  donatenum_ = 0u;
  rpgpost_ = 0;
  weekdonate_ = 0u;
  salarytime_ = GOOGLE_ULONGLONG(0);
  daydonate_ = 0u;
  gainnum_ = 0u;
  sendnum_ = 0u;
  tmfrewardtime_ = GOOGLE_ULONGLONG(0);
  lastweekdonate_ = 0u;
  freesendnum_ = 0u;
  entertime_ = GOOGLE_ULONGLONG(0);
  atknum_ = 0u;
  buyatknum_ = 0u;
  wishfragnum_ = 0u;
  giftfragnum_ = 0u;
  tmfrewardnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildMyInfo::~TGuildMyInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildMyInfo)
  SharedDtor();
}

void TGuildMyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildMyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildMyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildMyInfo_descriptor_;
}

const TGuildMyInfo& TGuildMyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildUser_2eproto();
  return *default_instance_;
}

TGuildMyInfo* TGuildMyInfo::default_instance_ = NULL;

TGuildMyInfo* TGuildMyInfo::New() const {
  return new TGuildMyInfo;
}

void TGuildMyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildMyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 231) {
    ZR_(guildid_, quittime_);
    ZR_(donatenum_, rpgpost_);
    ZR_(salarytime_, weekdonate_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(daydonate_, atknum_);
  }
  ZR_(buyatknum_, tmfrewardnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  boxarr_.Clear();
  applyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildMyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildMyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_QuitTime;
        break;
      }

      // optional uint64 QuitTime = 2;
      case 2: {
        if (tag == 16) {
         parse_QuitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quittime_)));
          set_has_quittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DonateNum;
        break;
      }

      // optional uint32 DonateNum = 3;
      case 3: {
        if (tag == 24) {
         parse_DonateNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatenum_)));
          set_has_donatenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BoxArr;
        break;
      }

      // repeated .pb.TDonateBox BoxArr = 4;
      case 4: {
        if (tag == 34) {
         parse_BoxArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BoxArr;
        if (input->ExpectTag(42)) goto parse_ApplyArr;
        break;
      }

      // repeated .pb.TGuildApply ApplyArr = 5;
      case 5: {
        if (tag == 42) {
         parse_ApplyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ApplyArr;
        if (input->ExpectTag(48)) goto parse_RpgPost;
        break;
      }

      // optional .pb.EGuildPost RpgPost = 6;
      case 6: {
        if (tag == 48) {
         parse_RpgPost:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuildPost_IsValid(value)) {
            set_rpgpost(static_cast< ::pb::EGuildPost >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_WeekDonate;
        break;
      }

      // optional uint32 WeekDonate = 7;
      case 7: {
        if (tag == 56) {
         parse_WeekDonate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekdonate_)));
          set_has_weekdonate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_SalaryTime;
        break;
      }

      // optional uint64 SalaryTime = 8;
      case 8: {
        if (tag == 64) {
         parse_SalaryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &salarytime_)));
          set_has_salarytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_DayDonate;
        break;
      }

      // optional uint32 DayDonate = 9;
      case 9: {
        if (tag == 72) {
         parse_DayDonate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daydonate_)));
          set_has_daydonate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_GainNum;
        break;
      }

      // optional uint32 GainNum = 10;
      case 10: {
        if (tag == 80) {
         parse_GainNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gainnum_)));
          set_has_gainnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_SendNum;
        break;
      }

      // optional uint32 SendNum = 11;
      case 11: {
        if (tag == 88) {
         parse_SendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendnum_)));
          set_has_sendnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_TMFRewardTime;
        break;
      }

      // optional uint64 TMFRewardTime = 12;
      case 12: {
        if (tag == 96) {
         parse_TMFRewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tmfrewardtime_)));
          set_has_tmfrewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_LastWeekDonate;
        break;
      }

      // optional uint32 LastWeekDonate = 13;
      case 13: {
        if (tag == 104) {
         parse_LastWeekDonate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastweekdonate_)));
          set_has_lastweekdonate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_FreeSendNum;
        break;
      }

      // optional uint32 FreeSendNum = 14;
      case 14: {
        if (tag == 112) {
         parse_FreeSendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freesendnum_)));
          set_has_freesendnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_EnterTime;
        break;
      }

      // optional uint64 EnterTime = 15;
      case 15: {
        if (tag == 120) {
         parse_EnterTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entertime_)));
          set_has_entertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_AtkNum;
        break;
      }

      // optional uint32 AtkNum = 16;
      case 16: {
        if (tag == 128) {
         parse_AtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atknum_)));
          set_has_atknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_BuyAtkNum;
        break;
      }

      // optional uint32 BuyAtkNum = 17;
      case 17: {
        if (tag == 136) {
         parse_BuyAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyatknum_)));
          set_has_buyatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_WishFragNum;
        break;
      }

      // optional uint32 WishFragNum = 18;
      case 18: {
        if (tag == 144) {
         parse_WishFragNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wishfragnum_)));
          set_has_wishfragnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_GiftFragNum;
        break;
      }

      // optional uint32 GiftFragNum = 19;
      case 19: {
        if (tag == 152) {
         parse_GiftFragNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftfragnum_)));
          set_has_giftfragnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_TMFRewardNum;
        break;
      }

      // optional uint32 TMFRewardNum = 20;
      case 20: {
        if (tag == 160) {
         parse_TMFRewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tmfrewardnum_)));
          set_has_tmfrewardnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildMyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildMyInfo)
  return false;
#undef DO_
}

void TGuildMyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildMyInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional uint64 QuitTime = 2;
  if (has_quittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->quittime(), output);
  }

  // optional uint32 DonateNum = 3;
  if (has_donatenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->donatenum(), output);
  }

  // repeated .pb.TDonateBox BoxArr = 4;
  for (int i = 0; i < this->boxarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->boxarr(i), output);
  }

  // repeated .pb.TGuildApply ApplyArr = 5;
  for (int i = 0; i < this->applyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->applyarr(i), output);
  }

  // optional .pb.EGuildPost RpgPost = 6;
  if (has_rpgpost()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->rpgpost(), output);
  }

  // optional uint32 WeekDonate = 7;
  if (has_weekdonate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->weekdonate(), output);
  }

  // optional uint64 SalaryTime = 8;
  if (has_salarytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->salarytime(), output);
  }

  // optional uint32 DayDonate = 9;
  if (has_daydonate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->daydonate(), output);
  }

  // optional uint32 GainNum = 10;
  if (has_gainnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->gainnum(), output);
  }

  // optional uint32 SendNum = 11;
  if (has_sendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sendnum(), output);
  }

  // optional uint64 TMFRewardTime = 12;
  if (has_tmfrewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->tmfrewardtime(), output);
  }

  // optional uint32 LastWeekDonate = 13;
  if (has_lastweekdonate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->lastweekdonate(), output);
  }

  // optional uint32 FreeSendNum = 14;
  if (has_freesendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->freesendnum(), output);
  }

  // optional uint64 EnterTime = 15;
  if (has_entertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->entertime(), output);
  }

  // optional uint32 AtkNum = 16;
  if (has_atknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->atknum(), output);
  }

  // optional uint32 BuyAtkNum = 17;
  if (has_buyatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->buyatknum(), output);
  }

  // optional uint32 WishFragNum = 18;
  if (has_wishfragnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->wishfragnum(), output);
  }

  // optional uint32 GiftFragNum = 19;
  if (has_giftfragnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->giftfragnum(), output);
  }

  // optional uint32 TMFRewardNum = 20;
  if (has_tmfrewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->tmfrewardnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildMyInfo)
}

::google::protobuf::uint8* TGuildMyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildMyInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional uint64 QuitTime = 2;
  if (has_quittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->quittime(), target);
  }

  // optional uint32 DonateNum = 3;
  if (has_donatenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->donatenum(), target);
  }

  // repeated .pb.TDonateBox BoxArr = 4;
  for (int i = 0; i < this->boxarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->boxarr(i), target);
  }

  // repeated .pb.TGuildApply ApplyArr = 5;
  for (int i = 0; i < this->applyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->applyarr(i), target);
  }

  // optional .pb.EGuildPost RpgPost = 6;
  if (has_rpgpost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->rpgpost(), target);
  }

  // optional uint32 WeekDonate = 7;
  if (has_weekdonate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->weekdonate(), target);
  }

  // optional uint64 SalaryTime = 8;
  if (has_salarytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->salarytime(), target);
  }

  // optional uint32 DayDonate = 9;
  if (has_daydonate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->daydonate(), target);
  }

  // optional uint32 GainNum = 10;
  if (has_gainnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->gainnum(), target);
  }

  // optional uint32 SendNum = 11;
  if (has_sendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sendnum(), target);
  }

  // optional uint64 TMFRewardTime = 12;
  if (has_tmfrewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->tmfrewardtime(), target);
  }

  // optional uint32 LastWeekDonate = 13;
  if (has_lastweekdonate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->lastweekdonate(), target);
  }

  // optional uint32 FreeSendNum = 14;
  if (has_freesendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->freesendnum(), target);
  }

  // optional uint64 EnterTime = 15;
  if (has_entertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->entertime(), target);
  }

  // optional uint32 AtkNum = 16;
  if (has_atknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->atknum(), target);
  }

  // optional uint32 BuyAtkNum = 17;
  if (has_buyatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->buyatknum(), target);
  }

  // optional uint32 WishFragNum = 18;
  if (has_wishfragnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->wishfragnum(), target);
  }

  // optional uint32 GiftFragNum = 19;
  if (has_giftfragnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->giftfragnum(), target);
  }

  // optional uint32 TMFRewardNum = 20;
  if (has_tmfrewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->tmfrewardnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildMyInfo)
  return target;
}

int TGuildMyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint64 QuitTime = 2;
    if (has_quittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quittime());
    }

    // optional uint32 DonateNum = 3;
    if (has_donatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatenum());
    }

    // optional .pb.EGuildPost RpgPost = 6;
    if (has_rpgpost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rpgpost());
    }

    // optional uint32 WeekDonate = 7;
    if (has_weekdonate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekdonate());
    }

    // optional uint64 SalaryTime = 8;
    if (has_salarytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->salarytime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 DayDonate = 9;
    if (has_daydonate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daydonate());
    }

    // optional uint32 GainNum = 10;
    if (has_gainnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gainnum());
    }

    // optional uint32 SendNum = 11;
    if (has_sendnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendnum());
    }

    // optional uint64 TMFRewardTime = 12;
    if (has_tmfrewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tmfrewardtime());
    }

    // optional uint32 LastWeekDonate = 13;
    if (has_lastweekdonate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastweekdonate());
    }

    // optional uint32 FreeSendNum = 14;
    if (has_freesendnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freesendnum());
    }

    // optional uint64 EnterTime = 15;
    if (has_entertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->entertime());
    }

    // optional uint32 AtkNum = 16;
    if (has_atknum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atknum());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 BuyAtkNum = 17;
    if (has_buyatknum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyatknum());
    }

    // optional uint32 WishFragNum = 18;
    if (has_wishfragnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wishfragnum());
    }

    // optional uint32 GiftFragNum = 19;
    if (has_giftfragnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftfragnum());
    }

    // optional uint32 TMFRewardNum = 20;
    if (has_tmfrewardnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tmfrewardnum());
    }

  }
  // repeated .pb.TDonateBox BoxArr = 4;
  total_size += 1 * this->boxarr_size();
  for (int i = 0; i < this->boxarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxarr(i));
  }

  // repeated .pb.TGuildApply ApplyArr = 5;
  total_size += 1 * this->applyarr_size();
  for (int i = 0; i < this->applyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildMyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildMyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildMyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildMyInfo::MergeFrom(const TGuildMyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxarr_.MergeFrom(from.boxarr_);
  applyarr_.MergeFrom(from.applyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_quittime()) {
      set_quittime(from.quittime());
    }
    if (from.has_donatenum()) {
      set_donatenum(from.donatenum());
    }
    if (from.has_rpgpost()) {
      set_rpgpost(from.rpgpost());
    }
    if (from.has_weekdonate()) {
      set_weekdonate(from.weekdonate());
    }
    if (from.has_salarytime()) {
      set_salarytime(from.salarytime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_daydonate()) {
      set_daydonate(from.daydonate());
    }
    if (from.has_gainnum()) {
      set_gainnum(from.gainnum());
    }
    if (from.has_sendnum()) {
      set_sendnum(from.sendnum());
    }
    if (from.has_tmfrewardtime()) {
      set_tmfrewardtime(from.tmfrewardtime());
    }
    if (from.has_lastweekdonate()) {
      set_lastweekdonate(from.lastweekdonate());
    }
    if (from.has_freesendnum()) {
      set_freesendnum(from.freesendnum());
    }
    if (from.has_entertime()) {
      set_entertime(from.entertime());
    }
    if (from.has_atknum()) {
      set_atknum(from.atknum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_buyatknum()) {
      set_buyatknum(from.buyatknum());
    }
    if (from.has_wishfragnum()) {
      set_wishfragnum(from.wishfragnum());
    }
    if (from.has_giftfragnum()) {
      set_giftfragnum(from.giftfragnum());
    }
    if (from.has_tmfrewardnum()) {
      set_tmfrewardnum(from.tmfrewardnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildMyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildMyInfo::CopyFrom(const TGuildMyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildMyInfo::IsInitialized() const {

  return true;
}

void TGuildMyInfo::Swap(TGuildMyInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(quittime_, other->quittime_);
    std::swap(donatenum_, other->donatenum_);
    boxarr_.Swap(&other->boxarr_);
    applyarr_.Swap(&other->applyarr_);
    std::swap(rpgpost_, other->rpgpost_);
    std::swap(weekdonate_, other->weekdonate_);
    std::swap(salarytime_, other->salarytime_);
    std::swap(daydonate_, other->daydonate_);
    std::swap(gainnum_, other->gainnum_);
    std::swap(sendnum_, other->sendnum_);
    std::swap(tmfrewardtime_, other->tmfrewardtime_);
    std::swap(lastweekdonate_, other->lastweekdonate_);
    std::swap(freesendnum_, other->freesendnum_);
    std::swap(entertime_, other->entertime_);
    std::swap(atknum_, other->atknum_);
    std::swap(buyatknum_, other->buyatknum_);
    std::swap(wishfragnum_, other->wishfragnum_);
    std::swap(giftfragnum_, other->giftfragnum_);
    std::swap(tmfrewardnum_, other->tmfrewardnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildMyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildMyInfo_descriptor_;
  metadata.reflection = TGuildMyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildUpdateMyGuildNotify::kGuildIdFieldNumber;
const int TGuildUpdateMyGuildNotify::kQuitTimeFieldNumber;
const int TGuildUpdateMyGuildNotify::kApplyArrFieldNumber;
const int TGuildUpdateMyGuildNotify::kRpgPostFieldNumber;
const int TGuildUpdateMyGuildNotify::kDonateNumFieldNumber;
#endif  // !_MSC_VER

TGuildUpdateMyGuildNotify::TGuildUpdateMyGuildNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildUpdateMyGuildNotify)
}

void TGuildUpdateMyGuildNotify::InitAsDefaultInstance() {
}

TGuildUpdateMyGuildNotify::TGuildUpdateMyGuildNotify(const TGuildUpdateMyGuildNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildUpdateMyGuildNotify)
}

void TGuildUpdateMyGuildNotify::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  quittime_ = GOOGLE_ULONGLONG(0);
  rpgpost_ = 0;
  donatenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildUpdateMyGuildNotify::~TGuildUpdateMyGuildNotify() {
  // @@protoc_insertion_point(destructor:pb.TGuildUpdateMyGuildNotify)
  SharedDtor();
}

void TGuildUpdateMyGuildNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildUpdateMyGuildNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildUpdateMyGuildNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildUpdateMyGuildNotify_descriptor_;
}

const TGuildUpdateMyGuildNotify& TGuildUpdateMyGuildNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildUser_2eproto();
  return *default_instance_;
}

TGuildUpdateMyGuildNotify* TGuildUpdateMyGuildNotify::default_instance_ = NULL;

TGuildUpdateMyGuildNotify* TGuildUpdateMyGuildNotify::New() const {
  return new TGuildUpdateMyGuildNotify;
}

void TGuildUpdateMyGuildNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildUpdateMyGuildNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guildid_, quittime_);
  ZR_(rpgpost_, donatenum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  applyarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildUpdateMyGuildNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildUpdateMyGuildNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_QuitTime;
        break;
      }

      // optional uint64 QuitTime = 2;
      case 2: {
        if (tag == 16) {
         parse_QuitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quittime_)));
          set_has_quittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ApplyArr;
        break;
      }

      // repeated .pb.TGuildApply ApplyArr = 3;
      case 3: {
        if (tag == 26) {
         parse_ApplyArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applyarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ApplyArr;
        if (input->ExpectTag(32)) goto parse_RpgPost;
        break;
      }

      // optional .pb.EGuildPost RpgPost = 4;
      case 4: {
        if (tag == 32) {
         parse_RpgPost:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuildPost_IsValid(value)) {
            set_rpgpost(static_cast< ::pb::EGuildPost >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DonateNum;
        break;
      }

      // optional uint32 DonateNum = 5;
      case 5: {
        if (tag == 40) {
         parse_DonateNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatenum_)));
          set_has_donatenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildUpdateMyGuildNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildUpdateMyGuildNotify)
  return false;
#undef DO_
}

void TGuildUpdateMyGuildNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildUpdateMyGuildNotify)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional uint64 QuitTime = 2;
  if (has_quittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->quittime(), output);
  }

  // repeated .pb.TGuildApply ApplyArr = 3;
  for (int i = 0; i < this->applyarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->applyarr(i), output);
  }

  // optional .pb.EGuildPost RpgPost = 4;
  if (has_rpgpost()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->rpgpost(), output);
  }

  // optional uint32 DonateNum = 5;
  if (has_donatenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->donatenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildUpdateMyGuildNotify)
}

::google::protobuf::uint8* TGuildUpdateMyGuildNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildUpdateMyGuildNotify)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional uint64 QuitTime = 2;
  if (has_quittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->quittime(), target);
  }

  // repeated .pb.TGuildApply ApplyArr = 3;
  for (int i = 0; i < this->applyarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->applyarr(i), target);
  }

  // optional .pb.EGuildPost RpgPost = 4;
  if (has_rpgpost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->rpgpost(), target);
  }

  // optional uint32 DonateNum = 5;
  if (has_donatenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->donatenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildUpdateMyGuildNotify)
  return target;
}

int TGuildUpdateMyGuildNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint64 QuitTime = 2;
    if (has_quittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quittime());
    }

    // optional .pb.EGuildPost RpgPost = 4;
    if (has_rpgpost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rpgpost());
    }

    // optional uint32 DonateNum = 5;
    if (has_donatenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatenum());
    }

  }
  // repeated .pb.TGuildApply ApplyArr = 3;
  total_size += 1 * this->applyarr_size();
  for (int i = 0; i < this->applyarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applyarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildUpdateMyGuildNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildUpdateMyGuildNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildUpdateMyGuildNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildUpdateMyGuildNotify::MergeFrom(const TGuildUpdateMyGuildNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyarr_.MergeFrom(from.applyarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_quittime()) {
      set_quittime(from.quittime());
    }
    if (from.has_rpgpost()) {
      set_rpgpost(from.rpgpost());
    }
    if (from.has_donatenum()) {
      set_donatenum(from.donatenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildUpdateMyGuildNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildUpdateMyGuildNotify::CopyFrom(const TGuildUpdateMyGuildNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildUpdateMyGuildNotify::IsInitialized() const {

  return true;
}

void TGuildUpdateMyGuildNotify::Swap(TGuildUpdateMyGuildNotify* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(quittime_, other->quittime_);
    applyarr_.Swap(&other->applyarr_);
    std::swap(rpgpost_, other->rpgpost_);
    std::swap(donatenum_, other->donatenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildUpdateMyGuildNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildUpdateMyGuildNotify_descriptor_;
  metadata.reflection = TGuildUpdateMyGuildNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildReceiveDonateBoxReq::kBoxIndexFieldNumber;
#endif  // !_MSC_VER

TGuildReceiveDonateBoxReq::TGuildReceiveDonateBoxReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildReceiveDonateBoxReq)
}

void TGuildReceiveDonateBoxReq::InitAsDefaultInstance() {
}

TGuildReceiveDonateBoxReq::TGuildReceiveDonateBoxReq(const TGuildReceiveDonateBoxReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildReceiveDonateBoxReq)
}

void TGuildReceiveDonateBoxReq::SharedCtor() {
  _cached_size_ = 0;
  boxindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildReceiveDonateBoxReq::~TGuildReceiveDonateBoxReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildReceiveDonateBoxReq)
  SharedDtor();
}

void TGuildReceiveDonateBoxReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildReceiveDonateBoxReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildReceiveDonateBoxReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildReceiveDonateBoxReq_descriptor_;
}

const TGuildReceiveDonateBoxReq& TGuildReceiveDonateBoxReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildUser_2eproto();
  return *default_instance_;
}

TGuildReceiveDonateBoxReq* TGuildReceiveDonateBoxReq::default_instance_ = NULL;

TGuildReceiveDonateBoxReq* TGuildReceiveDonateBoxReq::New() const {
  return new TGuildReceiveDonateBoxReq;
}

void TGuildReceiveDonateBoxReq::Clear() {
  boxindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildReceiveDonateBoxReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildReceiveDonateBoxReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BoxIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxindex_)));
          set_has_boxindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildReceiveDonateBoxReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildReceiveDonateBoxReq)
  return false;
#undef DO_
}

void TGuildReceiveDonateBoxReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildReceiveDonateBoxReq)
  // optional uint32 BoxIndex = 1;
  if (has_boxindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->boxindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildReceiveDonateBoxReq)
}

::google::protobuf::uint8* TGuildReceiveDonateBoxReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildReceiveDonateBoxReq)
  // optional uint32 BoxIndex = 1;
  if (has_boxindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->boxindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildReceiveDonateBoxReq)
  return target;
}

int TGuildReceiveDonateBoxReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BoxIndex = 1;
    if (has_boxindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildReceiveDonateBoxReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildReceiveDonateBoxReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildReceiveDonateBoxReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildReceiveDonateBoxReq::MergeFrom(const TGuildReceiveDonateBoxReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boxindex()) {
      set_boxindex(from.boxindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildReceiveDonateBoxReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildReceiveDonateBoxReq::CopyFrom(const TGuildReceiveDonateBoxReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildReceiveDonateBoxReq::IsInitialized() const {

  return true;
}

void TGuildReceiveDonateBoxReq::Swap(TGuildReceiveDonateBoxReq* other) {
  if (other != this) {
    std::swap(boxindex_, other->boxindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildReceiveDonateBoxReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildReceiveDonateBoxReq_descriptor_;
  metadata.reflection = TGuildReceiveDonateBoxReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildReceiveDonateBoxRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TGuildReceiveDonateBoxRsp::TGuildReceiveDonateBoxRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildReceiveDonateBoxRsp)
}

void TGuildReceiveDonateBoxRsp::InitAsDefaultInstance() {
}

TGuildReceiveDonateBoxRsp::TGuildReceiveDonateBoxRsp(const TGuildReceiveDonateBoxRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildReceiveDonateBoxRsp)
}

void TGuildReceiveDonateBoxRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildReceiveDonateBoxRsp::~TGuildReceiveDonateBoxRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildReceiveDonateBoxRsp)
  SharedDtor();
}

void TGuildReceiveDonateBoxRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildReceiveDonateBoxRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildReceiveDonateBoxRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildReceiveDonateBoxRsp_descriptor_;
}

const TGuildReceiveDonateBoxRsp& TGuildReceiveDonateBoxRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildUser_2eproto();
  return *default_instance_;
}

TGuildReceiveDonateBoxRsp* TGuildReceiveDonateBoxRsp::default_instance_ = NULL;

TGuildReceiveDonateBoxRsp* TGuildReceiveDonateBoxRsp::New() const {
  return new TGuildReceiveDonateBoxRsp;
}

void TGuildReceiveDonateBoxRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildReceiveDonateBoxRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildReceiveDonateBoxRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildReceiveDonateBoxRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildReceiveDonateBoxRsp)
  return false;
#undef DO_
}

void TGuildReceiveDonateBoxRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildReceiveDonateBoxRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildReceiveDonateBoxRsp)
}

::google::protobuf::uint8* TGuildReceiveDonateBoxRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildReceiveDonateBoxRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildReceiveDonateBoxRsp)
  return target;
}

int TGuildReceiveDonateBoxRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildReceiveDonateBoxRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildReceiveDonateBoxRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildReceiveDonateBoxRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildReceiveDonateBoxRsp::MergeFrom(const TGuildReceiveDonateBoxRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildReceiveDonateBoxRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildReceiveDonateBoxRsp::CopyFrom(const TGuildReceiveDonateBoxRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildReceiveDonateBoxRsp::IsInitialized() const {

  return true;
}

void TGuildReceiveDonateBoxRsp::Swap(TGuildReceiveDonateBoxRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildReceiveDonateBoxRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildReceiveDonateBoxRsp_descriptor_;
  metadata.reflection = TGuildReceiveDonateBoxRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildReceiveSalaryRsp::kRewardArrayFieldNumber;
const int TGuildReceiveSalaryRsp::kSalaryTimeFieldNumber;
#endif  // !_MSC_VER

TGuildReceiveSalaryRsp::TGuildReceiveSalaryRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildReceiveSalaryRsp)
}

void TGuildReceiveSalaryRsp::InitAsDefaultInstance() {
}

TGuildReceiveSalaryRsp::TGuildReceiveSalaryRsp(const TGuildReceiveSalaryRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildReceiveSalaryRsp)
}

void TGuildReceiveSalaryRsp::SharedCtor() {
  _cached_size_ = 0;
  salarytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildReceiveSalaryRsp::~TGuildReceiveSalaryRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildReceiveSalaryRsp)
  SharedDtor();
}

void TGuildReceiveSalaryRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildReceiveSalaryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildReceiveSalaryRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildReceiveSalaryRsp_descriptor_;
}

const TGuildReceiveSalaryRsp& TGuildReceiveSalaryRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildUser_2eproto();
  return *default_instance_;
}

TGuildReceiveSalaryRsp* TGuildReceiveSalaryRsp::default_instance_ = NULL;

TGuildReceiveSalaryRsp* TGuildReceiveSalaryRsp::New() const {
  return new TGuildReceiveSalaryRsp;
}

void TGuildReceiveSalaryRsp::Clear() {
  salarytime_ = GOOGLE_ULONGLONG(0);
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildReceiveSalaryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildReceiveSalaryRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectTag(16)) goto parse_SalaryTime;
        break;
      }

      // optional uint64 SalaryTime = 2;
      case 2: {
        if (tag == 16) {
         parse_SalaryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &salarytime_)));
          set_has_salarytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildReceiveSalaryRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildReceiveSalaryRsp)
  return false;
#undef DO_
}

void TGuildReceiveSalaryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildReceiveSalaryRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  // optional uint64 SalaryTime = 2;
  if (has_salarytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->salarytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildReceiveSalaryRsp)
}

::google::protobuf::uint8* TGuildReceiveSalaryRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildReceiveSalaryRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  // optional uint64 SalaryTime = 2;
  if (has_salarytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->salarytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildReceiveSalaryRsp)
  return target;
}

int TGuildReceiveSalaryRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 SalaryTime = 2;
    if (has_salarytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->salarytime());
    }

  }
  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildReceiveSalaryRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildReceiveSalaryRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildReceiveSalaryRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildReceiveSalaryRsp::MergeFrom(const TGuildReceiveSalaryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_salarytime()) {
      set_salarytime(from.salarytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildReceiveSalaryRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildReceiveSalaryRsp::CopyFrom(const TGuildReceiveSalaryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildReceiveSalaryRsp::IsInitialized() const {

  return true;
}

void TGuildReceiveSalaryRsp::Swap(TGuildReceiveSalaryRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(salarytime_, other->salarytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildReceiveSalaryRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildReceiveSalaryRsp_descriptor_;
  metadata.reflection = TGuildReceiveSalaryRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
