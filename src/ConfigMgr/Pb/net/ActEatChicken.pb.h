// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActEatChicken.proto

#ifndef PROTOBUF_net_2fActEatChicken_2eproto__INCLUDED
#define PROTOBUF_net_2fActEatChicken_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/OpenActivity.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActEatChicken_2eproto();
void protobuf_AssignDesc_net_2fActEatChicken_2eproto();
void protobuf_ShutdownFile_net_2fActEatChicken_2eproto();

class TActEatChickenGetInfoRsp;
class TActEatChickenEatChickenReq;
class TActEatChickenEatChickenRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActEatChickenGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActEatChicken.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActEatChickenGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActEatChickenGetInfoRsp();
  virtual ~TActEatChickenGetInfoRsp();

  TActEatChickenGetInfoRsp(const TActEatChickenGetInfoRsp& from);

  inline TActEatChickenGetInfoRsp& operator=(const TActEatChickenGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActEatChickenGetInfoRsp& default_instance();

  void Swap(TActEatChickenGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActEatChickenGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActEatChickenGetInfoRsp& from);
  void MergeFrom(const TActEatChickenGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActivityRewardInfo ArrEatInfo = 1;
  inline int arreatinfo_size() const;
  inline void clear_arreatinfo();
  static const int kArrEatInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActEatChickenGetInfoRsp</name>
  	<Function>
  		<name>arreatinfo</name>
  		<replaceName>ArrEatInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arreatinfo</name>
  		<replaceName>ArrEatInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arreatinfo</name>
  		<replaceName>ArrEatInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arreatinfo</name>
  		<replaceName>ArrEatInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arreatinfo_size</name>
  		<replaceName>ArrEatInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActivityRewardInfo& arreatinfo(int index) const;
  inline ::pb::TActivityRewardInfo* mutable_arreatinfo(int index);
  inline ::pb::TActivityRewardInfo* add_arreatinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
      arreatinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
      mutable_arreatinfo();

  // @@protoc_insertion_point(class_scope:pb.TActEatChickenGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo > arreatinfo_;
  friend void  protobuf_AddDesc_net_2fActEatChicken_2eproto();
  friend void protobuf_AssignDesc_net_2fActEatChicken_2eproto();
  friend void protobuf_ShutdownFile_net_2fActEatChicken_2eproto();

  void InitAsDefaultInstance();
  static TActEatChickenGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActEatChickenEatChickenReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActEatChicken.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActEatChickenEatChickenReq : public ::google::protobuf::Message {
 public:
  TActEatChickenEatChickenReq();
  virtual ~TActEatChickenEatChickenReq();

  TActEatChickenEatChickenReq(const TActEatChickenEatChickenReq& from);

  inline TActEatChickenEatChickenReq& operator=(const TActEatChickenEatChickenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActEatChickenEatChickenReq& default_instance();

  void Swap(TActEatChickenEatChickenReq* other);

  // implements Message ----------------------------------------------

  TActEatChickenEatChickenReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActEatChickenEatChickenReq& from);
  void MergeFrom(const TActEatChickenEatChickenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActEatChickenEatChickenReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 IsReplenishment = 2;
  inline bool has_isreplenishment() const;
  inline void clear_isreplenishment();
  static const int kIsReplenishmentFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActEatChickenEatChickenReq</name>
  	<Function>
  		<name>isreplenishment</name>
  		<replaceName>IsReplenishment</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isreplenishment</name>
  		<replaceName>IsReplenishment</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isreplenishment</name>
  		<replaceName>IsReplenishment</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isreplenishment() const;
  inline void set_isreplenishment(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActEatChickenEatChickenReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_isreplenishment();
  inline void clear_has_isreplenishment();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 isreplenishment_;
  friend void  protobuf_AddDesc_net_2fActEatChicken_2eproto();
  friend void protobuf_AssignDesc_net_2fActEatChicken_2eproto();
  friend void protobuf_ShutdownFile_net_2fActEatChicken_2eproto();

  void InitAsDefaultInstance();
  static TActEatChickenEatChickenReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActEatChickenEatChickenRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActEatChicken.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActEatChickenEatChickenRsp : public ::google::protobuf::Message {
 public:
  TActEatChickenEatChickenRsp();
  virtual ~TActEatChickenEatChickenRsp();

  TActEatChickenEatChickenRsp(const TActEatChickenEatChickenRsp& from);

  inline TActEatChickenEatChickenRsp& operator=(const TActEatChickenEatChickenRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActEatChickenEatChickenRsp& default_instance();

  void Swap(TActEatChickenEatChickenRsp* other);

  // implements Message ----------------------------------------------

  TActEatChickenEatChickenRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActEatChickenEatChickenRsp& from);
  void MergeFrom(const TActEatChickenEatChickenRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward ArrReward = 1;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActEatChickenEatChickenRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TActEatChickenEatChickenRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fActEatChicken_2eproto();
  friend void protobuf_AssignDesc_net_2fActEatChicken_2eproto();
  friend void protobuf_ShutdownFile_net_2fActEatChicken_2eproto();

  void InitAsDefaultInstance();
  static TActEatChickenEatChickenRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TActEatChickenGetInfoRsp

// repeated .pb.TActivityRewardInfo ArrEatInfo = 1;
inline int TActEatChickenGetInfoRsp::arreatinfo_size() const {
  return arreatinfo_.size();
}
inline void TActEatChickenGetInfoRsp::clear_arreatinfo() {
  arreatinfo_.Clear();
}
inline const ::pb::TActivityRewardInfo& TActEatChickenGetInfoRsp::arreatinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActEatChickenGetInfoRsp.ArrEatInfo)
  return arreatinfo_.Get(index);
}
inline ::pb::TActivityRewardInfo* TActEatChickenGetInfoRsp::mutable_arreatinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActEatChickenGetInfoRsp.ArrEatInfo)
  return arreatinfo_.Mutable(index);
}
inline ::pb::TActivityRewardInfo* TActEatChickenGetInfoRsp::add_arreatinfo() {
  // @@protoc_insertion_point(field_add:pb.TActEatChickenGetInfoRsp.ArrEatInfo)
  return arreatinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >&
TActEatChickenGetInfoRsp::arreatinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActEatChickenGetInfoRsp.ArrEatInfo)
  return arreatinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActivityRewardInfo >*
TActEatChickenGetInfoRsp::mutable_arreatinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActEatChickenGetInfoRsp.ArrEatInfo)
  return &arreatinfo_;
}

// -------------------------------------------------------------------

// TActEatChickenEatChickenReq

// optional uint32 Id = 1;
inline bool TActEatChickenEatChickenReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActEatChickenEatChickenReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActEatChickenEatChickenReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActEatChickenEatChickenReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActEatChickenEatChickenReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActEatChickenEatChickenReq.Id)
  return id_;
}
inline void TActEatChickenEatChickenReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActEatChickenEatChickenReq.Id)
}

// optional uint32 IsReplenishment = 2;
inline bool TActEatChickenEatChickenReq::has_isreplenishment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActEatChickenEatChickenReq::set_has_isreplenishment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActEatChickenEatChickenReq::clear_has_isreplenishment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActEatChickenEatChickenReq::clear_isreplenishment() {
  isreplenishment_ = 0u;
  clear_has_isreplenishment();
}
inline ::google::protobuf::uint32 TActEatChickenEatChickenReq::isreplenishment() const {
  // @@protoc_insertion_point(field_get:pb.TActEatChickenEatChickenReq.IsReplenishment)
  return isreplenishment_;
}
inline void TActEatChickenEatChickenReq::set_isreplenishment(::google::protobuf::uint32 value) {
  set_has_isreplenishment();
  isreplenishment_ = value;
  // @@protoc_insertion_point(field_set:pb.TActEatChickenEatChickenReq.IsReplenishment)
}

// -------------------------------------------------------------------

// TActEatChickenEatChickenRsp

// repeated .pb.TCommonReward ArrReward = 1;
inline int TActEatChickenEatChickenRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TActEatChickenEatChickenRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TActEatChickenEatChickenRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActEatChickenEatChickenRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TActEatChickenEatChickenRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActEatChickenEatChickenRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TActEatChickenEatChickenRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TActEatChickenEatChickenRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActEatChickenEatChickenRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TActEatChickenEatChickenRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActEatChickenEatChickenRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActEatChickenEatChickenRsp.ArrReward)
  return &arrreward_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActEatChicken_2eproto__INCLUDED
