// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GuildEnemy.proto

#ifndef PROTOBUF_net_2fGuildEnemy_2eproto__INCLUDED
#define PROTOBUF_net_2fGuildEnemy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fGuildEnemy_2eproto();
void protobuf_AssignDesc_net_2fGuildEnemy_2eproto();
void protobuf_ShutdownFile_net_2fGuildEnemy_2eproto();

class TGuildEnemyUnit;
class TGuildEnemySingle;
class TGuildGetEnemyListRsp;
class TGuildEnemyStartBattleReq;
class TGuildEnemyStartBattleRsp;
class TGuildEnemyReportBattleReq;
class TGuildEnemyBuyAtkNumReq;
class TGuildUpdateEnemyNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TGuildEnemyUnit</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildEnemyUnit : public ::google::protobuf::Message {
 public:
  TGuildEnemyUnit();
  virtual ~TGuildEnemyUnit();

  TGuildEnemyUnit(const TGuildEnemyUnit& from);

  inline TGuildEnemyUnit& operator=(const TGuildEnemyUnit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildEnemyUnit& default_instance();

  void Swap(TGuildEnemyUnit* other);

  // implements Message ----------------------------------------------

  TGuildEnemyUnit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildEnemyUnit& from);
  void MergeFrom(const TGuildEnemyUnit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyUnit</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Htid = 2;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyUnit</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint64 CurrentHp = 3;
  inline bool has_currenthp() const;
  inline void clear_currenthp();
  static const int kCurrentHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyUnit</name>
  	<Function>
  		<name>currenthp</name>
  		<replaceName>CurrentHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currenthp</name>
  		<replaceName>CurrentHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currenthp</name>
  		<replaceName>CurrentHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 currenthp() const;
  inline void set_currenthp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 4;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyUnit</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // optional uint32 BattlePos = 5;
  inline bool has_battlepos() const;
  inline void clear_battlepos();
  static const int kBattlePosFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyUnit</name>
  	<Function>
  		<name>battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlepos</name>
  		<replaceName>BattlePos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battlepos() const;
  inline void set_battlepos(::google::protobuf::uint32 value);

  // optional uint32 ScreenNum = 6;
  inline bool has_screennum() const;
  inline void clear_screennum();
  static const int kScreenNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyUnit</name>
  	<Function>
  		<name>screennum</name>
  		<replaceName>ScreenNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_screennum</name>
  		<replaceName>ScreenNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_screennum</name>
  		<replaceName>ScreenNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 screennum() const;
  inline void set_screennum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildEnemyUnit)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_currenthp();
  inline void clear_has_currenthp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_battlepos();
  inline void clear_has_battlepos();
  inline void set_has_screennum();
  inline void clear_has_screennum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint64 currenthp_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint32 battlepos_;
  ::google::protobuf::uint32 screennum_;
  friend void  protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildEnemy_2eproto();

  void InitAsDefaultInstance();
  static TGuildEnemyUnit* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildEnemySingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildEnemySingle : public ::google::protobuf::Message {
 public:
  TGuildEnemySingle();
  virtual ~TGuildEnemySingle();

  TGuildEnemySingle(const TGuildEnemySingle& from);

  inline TGuildEnemySingle& operator=(const TGuildEnemySingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildEnemySingle& default_instance();

  void Swap(TGuildEnemySingle* other);

  // implements Message ----------------------------------------------

  TGuildEnemySingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildEnemySingle& from);
  void MergeFrom(const TGuildEnemySingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemySingle</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // optional uint32 EnemyTid = 2;
  inline bool has_enemytid() const;
  inline void clear_enemytid();
  static const int kEnemyTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemySingle</name>
  	<Function>
  		<name>enemytid</name>
  		<replaceName>EnemyTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemytid</name>
  		<replaceName>EnemyTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemytid</name>
  		<replaceName>EnemyTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemytid() const;
  inline void set_enemytid(::google::protobuf::uint32 value);

  // optional uint32 EnemyPos = 3;
  inline bool has_enemypos() const;
  inline void clear_enemypos();
  static const int kEnemyPosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemySingle</name>
  	<Function>
  		<name>enemypos</name>
  		<replaceName>EnemyPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemypos</name>
  		<replaceName>EnemyPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemypos</name>
  		<replaceName>EnemyPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemypos() const;
  inline void set_enemypos(::google::protobuf::uint32 value);

  // optional uint64 PassTime = 4;
  inline bool has_passtime() const;
  inline void clear_passtime();
  static const int kPassTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemySingle</name>
  	<Function>
  		<name>passtime</name>
  		<replaceName>PassTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_passtime</name>
  		<replaceName>PassTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_passtime</name>
  		<replaceName>PassTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 passtime() const;
  inline void set_passtime(::google::protobuf::uint64 value);

  // repeated .pb.TGuildEnemyUnit UnitArr = 5;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemySingle</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildEnemyUnit& unitarr(int index) const;
  inline ::pb::TGuildEnemyUnit* mutable_unitarr(int index);
  inline ::pb::TGuildEnemyUnit* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemyUnit >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemyUnit >*
      mutable_unitarr();

  // optional uint32 BattleInfoId = 6;
  inline bool has_battleinfoid() const;
  inline void clear_battleinfoid();
  static const int kBattleInfoIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemySingle</name>
  	<Function>
  		<name>battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfoid</name>
  		<replaceName>BattleInfoId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleinfoid() const;
  inline void set_battleinfoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildEnemySingle)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_enemytid();
  inline void clear_has_enemytid();
  inline void set_has_enemypos();
  inline void clear_has_enemypos();
  inline void set_has_passtime();
  inline void clear_has_passtime();
  inline void set_has_battleinfoid();
  inline void clear_has_battleinfoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 enemyid_;
  ::google::protobuf::uint32 enemytid_;
  ::google::protobuf::uint64 passtime_;
  ::google::protobuf::uint32 enemypos_;
  ::google::protobuf::uint32 battleinfoid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemyUnit > unitarr_;
  friend void  protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildEnemy_2eproto();

  void InitAsDefaultInstance();
  static TGuildEnemySingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildGetEnemyListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildGetEnemyListRsp : public ::google::protobuf::Message {
 public:
  TGuildGetEnemyListRsp();
  virtual ~TGuildGetEnemyListRsp();

  TGuildGetEnemyListRsp(const TGuildGetEnemyListRsp& from);

  inline TGuildGetEnemyListRsp& operator=(const TGuildGetEnemyListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildGetEnemyListRsp& default_instance();

  void Swap(TGuildGetEnemyListRsp* other);

  // implements Message ----------------------------------------------

  TGuildGetEnemyListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildGetEnemyListRsp& from);
  void MergeFrom(const TGuildGetEnemyListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TriggerUid = 1;
  inline bool has_triggeruid() const;
  inline void clear_triggeruid();
  static const int kTriggerUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetEnemyListRsp</name>
  	<Function>
  		<name>triggeruid</name>
  		<replaceName>TriggerUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggeruid</name>
  		<replaceName>TriggerUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggeruid</name>
  		<replaceName>TriggerUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 triggeruid() const;
  inline void set_triggeruid(::google::protobuf::uint64 value);

  // optional string TriggerUname = 2;
  inline bool has_triggeruname() const;
  inline void clear_triggeruname();
  static const int kTriggerUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetEnemyListRsp</name>
  	<Function>
  		<name>triggeruname</name>
  		<replaceName>TriggerUname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggeruname</name>
  		<replaceName>TriggerUname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggeruname</name>
  		<replaceName>TriggerUname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& triggeruname() const;
  inline void set_triggeruname(const ::std::string& value);
  inline void set_triggeruname(const char* value);
  inline void set_triggeruname(const char* value, size_t size);
  inline ::std::string* mutable_triggeruname();
  inline ::std::string* release_triggeruname();
  inline void set_allocated_triggeruname(::std::string* triggeruname);

  // optional uint32 GroupTid = 3;
  inline bool has_grouptid() const;
  inline void clear_grouptid();
  static const int kGroupTidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetEnemyListRsp</name>
  	<Function>
  		<name>grouptid</name>
  		<replaceName>GroupTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grouptid</name>
  		<replaceName>GroupTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grouptid</name>
  		<replaceName>GroupTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 grouptid() const;
  inline void set_grouptid(::google::protobuf::uint32 value);

  // optional uint64 ExpireTime = 4;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpireTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetEnemyListRsp</name>
  	<Function>
  		<name>expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint64 value);

  // repeated .pb.TGuildEnemySingle EnemyArr = 5;
  inline int enemyarr_size() const;
  inline void clear_enemyarr();
  static const int kEnemyArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetEnemyListRsp</name>
  	<Function>
  		<name>enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemyarr_size</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildEnemySingle& enemyarr(int index) const;
  inline ::pb::TGuildEnemySingle* mutable_enemyarr(int index);
  inline ::pb::TGuildEnemySingle* add_enemyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemySingle >&
      enemyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemySingle >*
      mutable_enemyarr();

  // optional uint64 UpdateTime = 6;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildGetEnemyListRsp</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildGetEnemyListRsp)
 private:
  inline void set_has_triggeruid();
  inline void clear_has_triggeruid();
  inline void set_has_triggeruname();
  inline void clear_has_triggeruname();
  inline void set_has_grouptid();
  inline void clear_has_grouptid();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 triggeruid_;
  ::std::string* triggeruname_;
  ::google::protobuf::uint64 expiretime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemySingle > enemyarr_;
  ::google::protobuf::uint64 updatetime_;
  ::google::protobuf::uint32 grouptid_;
  friend void  protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildEnemy_2eproto();

  void InitAsDefaultInstance();
  static TGuildGetEnemyListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildEnemyStartBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildEnemyStartBattleReq : public ::google::protobuf::Message {
 public:
  TGuildEnemyStartBattleReq();
  virtual ~TGuildEnemyStartBattleReq();

  TGuildEnemyStartBattleReq(const TGuildEnemyStartBattleReq& from);

  inline TGuildEnemyStartBattleReq& operator=(const TGuildEnemyStartBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildEnemyStartBattleReq& default_instance();

  void Swap(TGuildEnemyStartBattleReq* other);

  // implements Message ----------------------------------------------

  TGuildEnemyStartBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildEnemyStartBattleReq& from);
  void MergeFrom(const TGuildEnemyStartBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyStartBattleReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyStartBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // @@protoc_insertion_point(class_scope:pb.TGuildEnemyStartBattleReq)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint32 enemyid_;
  friend void  protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildEnemy_2eproto();

  void InitAsDefaultInstance();
  static TGuildEnemyStartBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildEnemyStartBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildEnemyStartBattleRsp : public ::google::protobuf::Message {
 public:
  TGuildEnemyStartBattleRsp();
  virtual ~TGuildEnemyStartBattleRsp();

  TGuildEnemyStartBattleRsp(const TGuildEnemyStartBattleRsp& from);

  inline TGuildEnemyStartBattleRsp& operator=(const TGuildEnemyStartBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildEnemyStartBattleRsp& default_instance();

  void Swap(TGuildEnemyStartBattleRsp* other);

  // implements Message ----------------------------------------------

  TGuildEnemyStartBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildEnemyStartBattleRsp& from);
  void MergeFrom(const TGuildEnemyStartBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGuildEnemyUnit UnitArr = 1;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyStartBattleRsp</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildEnemyUnit& unitarr(int index) const;
  inline ::pb::TGuildEnemyUnit* mutable_unitarr(int index);
  inline ::pb::TGuildEnemyUnit* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemyUnit >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemyUnit >*
      mutable_unitarr();

  // optional .pb.TBattleArgs BattleArgs = 2;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyStartBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // optional uint64 UpdateTime = 3;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyStartBattleRsp</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildEnemyStartBattleRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemyUnit > unitarr_;
  ::pb::TBattleArgs* battleargs_;
  ::google::protobuf::uint64 updatetime_;
  friend void  protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildEnemy_2eproto();

  void InitAsDefaultInstance();
  static TGuildEnemyStartBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildEnemyReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildEnemyReportBattleReq : public ::google::protobuf::Message {
 public:
  TGuildEnemyReportBattleReq();
  virtual ~TGuildEnemyReportBattleReq();

  TGuildEnemyReportBattleReq(const TGuildEnemyReportBattleReq& from);

  inline TGuildEnemyReportBattleReq& operator=(const TGuildEnemyReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildEnemyReportBattleReq& default_instance();

  void Swap(TGuildEnemyReportBattleReq* other);

  // implements Message ----------------------------------------------

  TGuildEnemyReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildEnemyReportBattleReq& from);
  void MergeFrom(const TGuildEnemyReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 EnemyId = 1;
  inline bool has_enemyid() const;
  inline void clear_enemyid();
  static const int kEnemyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyReportBattleReq</name>
  	<Function>
  		<name>enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyid</name>
  		<replaceName>EnemyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 enemyid() const;
  inline void set_enemyid(::google::protobuf::uint32 value);

  // optional .pb.TBattleResult BattleRet = 2;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyReportBattleReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleret() const;
  inline ::pb::TBattleResult* mutable_battleret();
  inline ::pb::TBattleResult* release_battleret();
  inline void set_allocated_battleret(::pb::TBattleResult* battleret);

  // @@protoc_insertion_point(class_scope:pb.TGuildEnemyReportBattleReq)
 private:
  inline void set_has_enemyid();
  inline void clear_has_enemyid();
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleResult* battleret_;
  ::google::protobuf::uint32 enemyid_;
  friend void  protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildEnemy_2eproto();

  void InitAsDefaultInstance();
  static TGuildEnemyReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildEnemyBuyAtkNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildEnemyBuyAtkNumReq : public ::google::protobuf::Message {
 public:
  TGuildEnemyBuyAtkNumReq();
  virtual ~TGuildEnemyBuyAtkNumReq();

  TGuildEnemyBuyAtkNumReq(const TGuildEnemyBuyAtkNumReq& from);

  inline TGuildEnemyBuyAtkNumReq& operator=(const TGuildEnemyBuyAtkNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildEnemyBuyAtkNumReq& default_instance();

  void Swap(TGuildEnemyBuyAtkNumReq* other);

  // implements Message ----------------------------------------------

  TGuildEnemyBuyAtkNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildEnemyBuyAtkNumReq& from);
  void MergeFrom(const TGuildEnemyBuyAtkNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuyNum = 1;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildEnemyBuyAtkNumReq</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildEnemyBuyAtkNumReq)
 private:
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildEnemy_2eproto();

  void InitAsDefaultInstance();
  static TGuildEnemyBuyAtkNumReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGuildUpdateEnemyNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GuildEnemy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGuildUpdateEnemyNotify : public ::google::protobuf::Message {
 public:
  TGuildUpdateEnemyNotify();
  virtual ~TGuildUpdateEnemyNotify();

  TGuildUpdateEnemyNotify(const TGuildUpdateEnemyNotify& from);

  inline TGuildUpdateEnemyNotify& operator=(const TGuildUpdateEnemyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGuildUpdateEnemyNotify& default_instance();

  void Swap(TGuildUpdateEnemyNotify* other);

  // implements Message ----------------------------------------------

  TGuildUpdateEnemyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGuildUpdateEnemyNotify& from);
  void MergeFrom(const TGuildUpdateEnemyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TriggerUid = 1;
  inline bool has_triggeruid() const;
  inline void clear_triggeruid();
  static const int kTriggerUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateEnemyNotify</name>
  	<Function>
  		<name>triggeruid</name>
  		<replaceName>TriggerUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggeruid</name>
  		<replaceName>TriggerUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggeruid</name>
  		<replaceName>TriggerUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 triggeruid() const;
  inline void set_triggeruid(::google::protobuf::uint64 value);

  // optional string TriggerUname = 2;
  inline bool has_triggeruname() const;
  inline void clear_triggeruname();
  static const int kTriggerUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateEnemyNotify</name>
  	<Function>
  		<name>triggeruname</name>
  		<replaceName>TriggerUname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_triggeruname</name>
  		<replaceName>TriggerUname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_triggeruname</name>
  		<replaceName>TriggerUname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& triggeruname() const;
  inline void set_triggeruname(const ::std::string& value);
  inline void set_triggeruname(const char* value);
  inline void set_triggeruname(const char* value, size_t size);
  inline ::std::string* mutable_triggeruname();
  inline ::std::string* release_triggeruname();
  inline void set_allocated_triggeruname(::std::string* triggeruname);

  // optional uint32 GroupTid = 3;
  inline bool has_grouptid() const;
  inline void clear_grouptid();
  static const int kGroupTidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateEnemyNotify</name>
  	<Function>
  		<name>grouptid</name>
  		<replaceName>GroupTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_grouptid</name>
  		<replaceName>GroupTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_grouptid</name>
  		<replaceName>GroupTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 grouptid() const;
  inline void set_grouptid(::google::protobuf::uint32 value);

  // optional uint64 ExpireTime = 4;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpireTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateEnemyNotify</name>
  	<Function>
  		<name>expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_expiretime</name>
  		<replaceName>ExpireTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint64 value);

  // repeated .pb.TGuildEnemySingle EnemyArr = 5;
  inline int enemyarr_size() const;
  inline void clear_enemyarr();
  static const int kEnemyArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateEnemyNotify</name>
  	<Function>
  		<name>enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyarr</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemyarr_size</name>
  		<replaceName>EnemyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGuildEnemySingle& enemyarr(int index) const;
  inline ::pb::TGuildEnemySingle* mutable_enemyarr(int index);
  inline ::pb::TGuildEnemySingle* add_enemyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemySingle >&
      enemyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemySingle >*
      mutable_enemyarr();

  // optional uint64 UpdateTime = 6;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TGuildUpdateEnemyNotify</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGuildUpdateEnemyNotify)
 private:
  inline void set_has_triggeruid();
  inline void clear_has_triggeruid();
  inline void set_has_triggeruname();
  inline void clear_has_triggeruname();
  inline void set_has_grouptid();
  inline void clear_has_grouptid();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 triggeruid_;
  ::std::string* triggeruname_;
  ::google::protobuf::uint64 expiretime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemySingle > enemyarr_;
  ::google::protobuf::uint64 updatetime_;
  ::google::protobuf::uint32 grouptid_;
  friend void  protobuf_AddDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_AssignDesc_net_2fGuildEnemy_2eproto();
  friend void protobuf_ShutdownFile_net_2fGuildEnemy_2eproto();

  void InitAsDefaultInstance();
  static TGuildUpdateEnemyNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TGuildEnemyUnit

// optional uint32 Hid = 1;
inline bool TGuildEnemyUnit::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildEnemyUnit::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildEnemyUnit::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildEnemyUnit::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TGuildEnemyUnit::hid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyUnit.Hid)
  return hid_;
}
inline void TGuildEnemyUnit::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemyUnit.Hid)
}

// optional uint32 Htid = 2;
inline bool TGuildEnemyUnit::has_htid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildEnemyUnit::set_has_htid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildEnemyUnit::clear_has_htid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildEnemyUnit::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TGuildEnemyUnit::htid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyUnit.Htid)
  return htid_;
}
inline void TGuildEnemyUnit::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemyUnit.Htid)
}

// optional uint64 CurrentHp = 3;
inline bool TGuildEnemyUnit::has_currenthp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildEnemyUnit::set_has_currenthp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildEnemyUnit::clear_has_currenthp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildEnemyUnit::clear_currenthp() {
  currenthp_ = GOOGLE_ULONGLONG(0);
  clear_has_currenthp();
}
inline ::google::protobuf::uint64 TGuildEnemyUnit::currenthp() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyUnit.CurrentHp)
  return currenthp_;
}
inline void TGuildEnemyUnit::set_currenthp(::google::protobuf::uint64 value) {
  set_has_currenthp();
  currenthp_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemyUnit.CurrentHp)
}

// optional uint64 MaxHp = 4;
inline bool TGuildEnemyUnit::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildEnemyUnit::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildEnemyUnit::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildEnemyUnit::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TGuildEnemyUnit::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyUnit.MaxHp)
  return maxhp_;
}
inline void TGuildEnemyUnit::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemyUnit.MaxHp)
}

// optional uint32 BattlePos = 5;
inline bool TGuildEnemyUnit::has_battlepos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TGuildEnemyUnit::set_has_battlepos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TGuildEnemyUnit::clear_has_battlepos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TGuildEnemyUnit::clear_battlepos() {
  battlepos_ = 0u;
  clear_has_battlepos();
}
inline ::google::protobuf::uint32 TGuildEnemyUnit::battlepos() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyUnit.BattlePos)
  return battlepos_;
}
inline void TGuildEnemyUnit::set_battlepos(::google::protobuf::uint32 value) {
  set_has_battlepos();
  battlepos_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemyUnit.BattlePos)
}

// optional uint32 ScreenNum = 6;
inline bool TGuildEnemyUnit::has_screennum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildEnemyUnit::set_has_screennum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildEnemyUnit::clear_has_screennum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildEnemyUnit::clear_screennum() {
  screennum_ = 0u;
  clear_has_screennum();
}
inline ::google::protobuf::uint32 TGuildEnemyUnit::screennum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyUnit.ScreenNum)
  return screennum_;
}
inline void TGuildEnemyUnit::set_screennum(::google::protobuf::uint32 value) {
  set_has_screennum();
  screennum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemyUnit.ScreenNum)
}

// -------------------------------------------------------------------

// TGuildEnemySingle

// optional uint32 EnemyId = 1;
inline bool TGuildEnemySingle::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildEnemySingle::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildEnemySingle::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildEnemySingle::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TGuildEnemySingle::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemySingle.EnemyId)
  return enemyid_;
}
inline void TGuildEnemySingle::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemySingle.EnemyId)
}

// optional uint32 EnemyTid = 2;
inline bool TGuildEnemySingle::has_enemytid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildEnemySingle::set_has_enemytid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildEnemySingle::clear_has_enemytid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildEnemySingle::clear_enemytid() {
  enemytid_ = 0u;
  clear_has_enemytid();
}
inline ::google::protobuf::uint32 TGuildEnemySingle::enemytid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemySingle.EnemyTid)
  return enemytid_;
}
inline void TGuildEnemySingle::set_enemytid(::google::protobuf::uint32 value) {
  set_has_enemytid();
  enemytid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemySingle.EnemyTid)
}

// optional uint32 EnemyPos = 3;
inline bool TGuildEnemySingle::has_enemypos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildEnemySingle::set_has_enemypos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildEnemySingle::clear_has_enemypos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildEnemySingle::clear_enemypos() {
  enemypos_ = 0u;
  clear_has_enemypos();
}
inline ::google::protobuf::uint32 TGuildEnemySingle::enemypos() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemySingle.EnemyPos)
  return enemypos_;
}
inline void TGuildEnemySingle::set_enemypos(::google::protobuf::uint32 value) {
  set_has_enemypos();
  enemypos_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemySingle.EnemyPos)
}

// optional uint64 PassTime = 4;
inline bool TGuildEnemySingle::has_passtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildEnemySingle::set_has_passtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildEnemySingle::clear_has_passtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildEnemySingle::clear_passtime() {
  passtime_ = GOOGLE_ULONGLONG(0);
  clear_has_passtime();
}
inline ::google::protobuf::uint64 TGuildEnemySingle::passtime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemySingle.PassTime)
  return passtime_;
}
inline void TGuildEnemySingle::set_passtime(::google::protobuf::uint64 value) {
  set_has_passtime();
  passtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemySingle.PassTime)
}

// repeated .pb.TGuildEnemyUnit UnitArr = 5;
inline int TGuildEnemySingle::unitarr_size() const {
  return unitarr_.size();
}
inline void TGuildEnemySingle::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TGuildEnemyUnit& TGuildEnemySingle::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemySingle.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TGuildEnemyUnit* TGuildEnemySingle::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildEnemySingle.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TGuildEnemyUnit* TGuildEnemySingle::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildEnemySingle.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemyUnit >&
TGuildEnemySingle::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildEnemySingle.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemyUnit >*
TGuildEnemySingle::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildEnemySingle.UnitArr)
  return &unitarr_;
}

// optional uint32 BattleInfoId = 6;
inline bool TGuildEnemySingle::has_battleinfoid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildEnemySingle::set_has_battleinfoid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildEnemySingle::clear_has_battleinfoid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildEnemySingle::clear_battleinfoid() {
  battleinfoid_ = 0u;
  clear_has_battleinfoid();
}
inline ::google::protobuf::uint32 TGuildEnemySingle::battleinfoid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemySingle.BattleInfoId)
  return battleinfoid_;
}
inline void TGuildEnemySingle::set_battleinfoid(::google::protobuf::uint32 value) {
  set_has_battleinfoid();
  battleinfoid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemySingle.BattleInfoId)
}

// -------------------------------------------------------------------

// TGuildGetEnemyListRsp

// optional uint64 TriggerUid = 1;
inline bool TGuildGetEnemyListRsp::has_triggeruid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildGetEnemyListRsp::set_has_triggeruid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildGetEnemyListRsp::clear_has_triggeruid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildGetEnemyListRsp::clear_triggeruid() {
  triggeruid_ = GOOGLE_ULONGLONG(0);
  clear_has_triggeruid();
}
inline ::google::protobuf::uint64 TGuildGetEnemyListRsp::triggeruid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetEnemyListRsp.TriggerUid)
  return triggeruid_;
}
inline void TGuildGetEnemyListRsp::set_triggeruid(::google::protobuf::uint64 value) {
  set_has_triggeruid();
  triggeruid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetEnemyListRsp.TriggerUid)
}

// optional string TriggerUname = 2;
inline bool TGuildGetEnemyListRsp::has_triggeruname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildGetEnemyListRsp::set_has_triggeruname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildGetEnemyListRsp::clear_has_triggeruname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildGetEnemyListRsp::clear_triggeruname() {
  if (triggeruname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggeruname_->clear();
  }
  clear_has_triggeruname();
}
inline const ::std::string& TGuildGetEnemyListRsp::triggeruname() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetEnemyListRsp.TriggerUname)
  return *triggeruname_;
}
inline void TGuildGetEnemyListRsp::set_triggeruname(const ::std::string& value) {
  set_has_triggeruname();
  if (triggeruname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggeruname_ = new ::std::string;
  }
  triggeruname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildGetEnemyListRsp.TriggerUname)
}
inline void TGuildGetEnemyListRsp::set_triggeruname(const char* value) {
  set_has_triggeruname();
  if (triggeruname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggeruname_ = new ::std::string;
  }
  triggeruname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildGetEnemyListRsp.TriggerUname)
}
inline void TGuildGetEnemyListRsp::set_triggeruname(const char* value, size_t size) {
  set_has_triggeruname();
  if (triggeruname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggeruname_ = new ::std::string;
  }
  triggeruname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildGetEnemyListRsp.TriggerUname)
}
inline ::std::string* TGuildGetEnemyListRsp::mutable_triggeruname() {
  set_has_triggeruname();
  if (triggeruname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggeruname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetEnemyListRsp.TriggerUname)
  return triggeruname_;
}
inline ::std::string* TGuildGetEnemyListRsp::release_triggeruname() {
  clear_has_triggeruname();
  if (triggeruname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = triggeruname_;
    triggeruname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildGetEnemyListRsp::set_allocated_triggeruname(::std::string* triggeruname) {
  if (triggeruname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete triggeruname_;
  }
  if (triggeruname) {
    set_has_triggeruname();
    triggeruname_ = triggeruname;
  } else {
    clear_has_triggeruname();
    triggeruname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildGetEnemyListRsp.TriggerUname)
}

// optional uint32 GroupTid = 3;
inline bool TGuildGetEnemyListRsp::has_grouptid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildGetEnemyListRsp::set_has_grouptid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildGetEnemyListRsp::clear_has_grouptid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildGetEnemyListRsp::clear_grouptid() {
  grouptid_ = 0u;
  clear_has_grouptid();
}
inline ::google::protobuf::uint32 TGuildGetEnemyListRsp::grouptid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetEnemyListRsp.GroupTid)
  return grouptid_;
}
inline void TGuildGetEnemyListRsp::set_grouptid(::google::protobuf::uint32 value) {
  set_has_grouptid();
  grouptid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetEnemyListRsp.GroupTid)
}

// optional uint64 ExpireTime = 4;
inline bool TGuildGetEnemyListRsp::has_expiretime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildGetEnemyListRsp::set_has_expiretime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildGetEnemyListRsp::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildGetEnemyListRsp::clear_expiretime() {
  expiretime_ = GOOGLE_ULONGLONG(0);
  clear_has_expiretime();
}
inline ::google::protobuf::uint64 TGuildGetEnemyListRsp::expiretime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetEnemyListRsp.ExpireTime)
  return expiretime_;
}
inline void TGuildGetEnemyListRsp::set_expiretime(::google::protobuf::uint64 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetEnemyListRsp.ExpireTime)
}

// repeated .pb.TGuildEnemySingle EnemyArr = 5;
inline int TGuildGetEnemyListRsp::enemyarr_size() const {
  return enemyarr_.size();
}
inline void TGuildGetEnemyListRsp::clear_enemyarr() {
  enemyarr_.Clear();
}
inline const ::pb::TGuildEnemySingle& TGuildGetEnemyListRsp::enemyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetEnemyListRsp.EnemyArr)
  return enemyarr_.Get(index);
}
inline ::pb::TGuildEnemySingle* TGuildGetEnemyListRsp::mutable_enemyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildGetEnemyListRsp.EnemyArr)
  return enemyarr_.Mutable(index);
}
inline ::pb::TGuildEnemySingle* TGuildGetEnemyListRsp::add_enemyarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildGetEnemyListRsp.EnemyArr)
  return enemyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemySingle >&
TGuildGetEnemyListRsp::enemyarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildGetEnemyListRsp.EnemyArr)
  return enemyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemySingle >*
TGuildGetEnemyListRsp::mutable_enemyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildGetEnemyListRsp.EnemyArr)
  return &enemyarr_;
}

// optional uint64 UpdateTime = 6;
inline bool TGuildGetEnemyListRsp::has_updatetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildGetEnemyListRsp::set_has_updatetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildGetEnemyListRsp::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildGetEnemyListRsp::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 TGuildGetEnemyListRsp::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildGetEnemyListRsp.UpdateTime)
  return updatetime_;
}
inline void TGuildGetEnemyListRsp::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildGetEnemyListRsp.UpdateTime)
}

// -------------------------------------------------------------------

// TGuildEnemyStartBattleReq

// optional uint32 EnemyId = 1;
inline bool TGuildEnemyStartBattleReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildEnemyStartBattleReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildEnemyStartBattleReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildEnemyStartBattleReq::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TGuildEnemyStartBattleReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyStartBattleReq.EnemyId)
  return enemyid_;
}
inline void TGuildEnemyStartBattleReq::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemyStartBattleReq.EnemyId)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TGuildEnemyStartBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildEnemyStartBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildEnemyStartBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildEnemyStartBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TGuildEnemyStartBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyStartBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TGuildEnemyStartBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TGuildEnemyStartBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TGuildEnemyStartBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TGuildEnemyStartBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildEnemyStartBattleReq.BattleCheckParam)
}

// -------------------------------------------------------------------

// TGuildEnemyStartBattleRsp

// repeated .pb.TGuildEnemyUnit UnitArr = 1;
inline int TGuildEnemyStartBattleRsp::unitarr_size() const {
  return unitarr_.size();
}
inline void TGuildEnemyStartBattleRsp::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TGuildEnemyUnit& TGuildEnemyStartBattleRsp::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyStartBattleRsp.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TGuildEnemyUnit* TGuildEnemyStartBattleRsp::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildEnemyStartBattleRsp.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TGuildEnemyUnit* TGuildEnemyStartBattleRsp::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildEnemyStartBattleRsp.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemyUnit >&
TGuildEnemyStartBattleRsp::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildEnemyStartBattleRsp.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemyUnit >*
TGuildEnemyStartBattleRsp::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildEnemyStartBattleRsp.UnitArr)
  return &unitarr_;
}

// optional .pb.TBattleArgs BattleArgs = 2;
inline bool TGuildEnemyStartBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildEnemyStartBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildEnemyStartBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildEnemyStartBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TGuildEnemyStartBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyStartBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TGuildEnemyStartBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TGuildEnemyStartBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TGuildEnemyStartBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TGuildEnemyStartBattleRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildEnemyStartBattleRsp.BattleArgs)
}

// optional uint64 UpdateTime = 3;
inline bool TGuildEnemyStartBattleRsp::has_updatetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildEnemyStartBattleRsp::set_has_updatetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildEnemyStartBattleRsp::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildEnemyStartBattleRsp::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 TGuildEnemyStartBattleRsp::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyStartBattleRsp.UpdateTime)
  return updatetime_;
}
inline void TGuildEnemyStartBattleRsp::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemyStartBattleRsp.UpdateTime)
}

// -------------------------------------------------------------------

// TGuildEnemyReportBattleReq

// optional uint32 EnemyId = 1;
inline bool TGuildEnemyReportBattleReq::has_enemyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildEnemyReportBattleReq::set_has_enemyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildEnemyReportBattleReq::clear_has_enemyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildEnemyReportBattleReq::clear_enemyid() {
  enemyid_ = 0u;
  clear_has_enemyid();
}
inline ::google::protobuf::uint32 TGuildEnemyReportBattleReq::enemyid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyReportBattleReq.EnemyId)
  return enemyid_;
}
inline void TGuildEnemyReportBattleReq::set_enemyid(::google::protobuf::uint32 value) {
  set_has_enemyid();
  enemyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemyReportBattleReq.EnemyId)
}

// optional .pb.TBattleResult BattleRet = 2;
inline bool TGuildEnemyReportBattleReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildEnemyReportBattleReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildEnemyReportBattleReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildEnemyReportBattleReq::clear_battleret() {
  if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
  clear_has_battleret();
}
inline const ::pb::TBattleResult& TGuildEnemyReportBattleReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyReportBattleReq.BattleRet)
  return battleret_ != NULL ? *battleret_ : *default_instance_->battleret_;
}
inline ::pb::TBattleResult* TGuildEnemyReportBattleReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == NULL) battleret_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TGuildEnemyReportBattleReq.BattleRet)
  return battleret_;
}
inline ::pb::TBattleResult* TGuildEnemyReportBattleReq::release_battleret() {
  clear_has_battleret();
  ::pb::TBattleResult* temp = battleret_;
  battleret_ = NULL;
  return temp;
}
inline void TGuildEnemyReportBattleReq::set_allocated_battleret(::pb::TBattleResult* battleret) {
  delete battleret_;
  battleret_ = battleret;
  if (battleret) {
    set_has_battleret();
  } else {
    clear_has_battleret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildEnemyReportBattleReq.BattleRet)
}

// -------------------------------------------------------------------

// TGuildEnemyBuyAtkNumReq

// optional uint32 BuyNum = 1;
inline bool TGuildEnemyBuyAtkNumReq::has_buynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildEnemyBuyAtkNumReq::set_has_buynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildEnemyBuyAtkNumReq::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildEnemyBuyAtkNumReq::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TGuildEnemyBuyAtkNumReq::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TGuildEnemyBuyAtkNumReq.BuyNum)
  return buynum_;
}
inline void TGuildEnemyBuyAtkNumReq::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildEnemyBuyAtkNumReq.BuyNum)
}

// -------------------------------------------------------------------

// TGuildUpdateEnemyNotify

// optional uint64 TriggerUid = 1;
inline bool TGuildUpdateEnemyNotify::has_triggeruid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGuildUpdateEnemyNotify::set_has_triggeruid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGuildUpdateEnemyNotify::clear_has_triggeruid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGuildUpdateEnemyNotify::clear_triggeruid() {
  triggeruid_ = GOOGLE_ULONGLONG(0);
  clear_has_triggeruid();
}
inline ::google::protobuf::uint64 TGuildUpdateEnemyNotify::triggeruid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateEnemyNotify.TriggerUid)
  return triggeruid_;
}
inline void TGuildUpdateEnemyNotify::set_triggeruid(::google::protobuf::uint64 value) {
  set_has_triggeruid();
  triggeruid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildUpdateEnemyNotify.TriggerUid)
}

// optional string TriggerUname = 2;
inline bool TGuildUpdateEnemyNotify::has_triggeruname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGuildUpdateEnemyNotify::set_has_triggeruname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGuildUpdateEnemyNotify::clear_has_triggeruname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGuildUpdateEnemyNotify::clear_triggeruname() {
  if (triggeruname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggeruname_->clear();
  }
  clear_has_triggeruname();
}
inline const ::std::string& TGuildUpdateEnemyNotify::triggeruname() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateEnemyNotify.TriggerUname)
  return *triggeruname_;
}
inline void TGuildUpdateEnemyNotify::set_triggeruname(const ::std::string& value) {
  set_has_triggeruname();
  if (triggeruname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggeruname_ = new ::std::string;
  }
  triggeruname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TGuildUpdateEnemyNotify.TriggerUname)
}
inline void TGuildUpdateEnemyNotify::set_triggeruname(const char* value) {
  set_has_triggeruname();
  if (triggeruname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggeruname_ = new ::std::string;
  }
  triggeruname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TGuildUpdateEnemyNotify.TriggerUname)
}
inline void TGuildUpdateEnemyNotify::set_triggeruname(const char* value, size_t size) {
  set_has_triggeruname();
  if (triggeruname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggeruname_ = new ::std::string;
  }
  triggeruname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TGuildUpdateEnemyNotify.TriggerUname)
}
inline ::std::string* TGuildUpdateEnemyNotify::mutable_triggeruname() {
  set_has_triggeruname();
  if (triggeruname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    triggeruname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TGuildUpdateEnemyNotify.TriggerUname)
  return triggeruname_;
}
inline ::std::string* TGuildUpdateEnemyNotify::release_triggeruname() {
  clear_has_triggeruname();
  if (triggeruname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = triggeruname_;
    triggeruname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TGuildUpdateEnemyNotify::set_allocated_triggeruname(::std::string* triggeruname) {
  if (triggeruname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete triggeruname_;
  }
  if (triggeruname) {
    set_has_triggeruname();
    triggeruname_ = triggeruname;
  } else {
    clear_has_triggeruname();
    triggeruname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TGuildUpdateEnemyNotify.TriggerUname)
}

// optional uint32 GroupTid = 3;
inline bool TGuildUpdateEnemyNotify::has_grouptid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TGuildUpdateEnemyNotify::set_has_grouptid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TGuildUpdateEnemyNotify::clear_has_grouptid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TGuildUpdateEnemyNotify::clear_grouptid() {
  grouptid_ = 0u;
  clear_has_grouptid();
}
inline ::google::protobuf::uint32 TGuildUpdateEnemyNotify::grouptid() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateEnemyNotify.GroupTid)
  return grouptid_;
}
inline void TGuildUpdateEnemyNotify::set_grouptid(::google::protobuf::uint32 value) {
  set_has_grouptid();
  grouptid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildUpdateEnemyNotify.GroupTid)
}

// optional uint64 ExpireTime = 4;
inline bool TGuildUpdateEnemyNotify::has_expiretime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TGuildUpdateEnemyNotify::set_has_expiretime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TGuildUpdateEnemyNotify::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TGuildUpdateEnemyNotify::clear_expiretime() {
  expiretime_ = GOOGLE_ULONGLONG(0);
  clear_has_expiretime();
}
inline ::google::protobuf::uint64 TGuildUpdateEnemyNotify::expiretime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateEnemyNotify.ExpireTime)
  return expiretime_;
}
inline void TGuildUpdateEnemyNotify::set_expiretime(::google::protobuf::uint64 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildUpdateEnemyNotify.ExpireTime)
}

// repeated .pb.TGuildEnemySingle EnemyArr = 5;
inline int TGuildUpdateEnemyNotify::enemyarr_size() const {
  return enemyarr_.size();
}
inline void TGuildUpdateEnemyNotify::clear_enemyarr() {
  enemyarr_.Clear();
}
inline const ::pb::TGuildEnemySingle& TGuildUpdateEnemyNotify::enemyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateEnemyNotify.EnemyArr)
  return enemyarr_.Get(index);
}
inline ::pb::TGuildEnemySingle* TGuildUpdateEnemyNotify::mutable_enemyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGuildUpdateEnemyNotify.EnemyArr)
  return enemyarr_.Mutable(index);
}
inline ::pb::TGuildEnemySingle* TGuildUpdateEnemyNotify::add_enemyarr() {
  // @@protoc_insertion_point(field_add:pb.TGuildUpdateEnemyNotify.EnemyArr)
  return enemyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemySingle >&
TGuildUpdateEnemyNotify::enemyarr() const {
  // @@protoc_insertion_point(field_list:pb.TGuildUpdateEnemyNotify.EnemyArr)
  return enemyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGuildEnemySingle >*
TGuildUpdateEnemyNotify::mutable_enemyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGuildUpdateEnemyNotify.EnemyArr)
  return &enemyarr_;
}

// optional uint64 UpdateTime = 6;
inline bool TGuildUpdateEnemyNotify::has_updatetime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TGuildUpdateEnemyNotify::set_has_updatetime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TGuildUpdateEnemyNotify::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TGuildUpdateEnemyNotify::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 TGuildUpdateEnemyNotify::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TGuildUpdateEnemyNotify.UpdateTime)
  return updatetime_;
}
inline void TGuildUpdateEnemyNotify::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGuildUpdateEnemyNotify.UpdateTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fGuildEnemy_2eproto__INCLUDED
