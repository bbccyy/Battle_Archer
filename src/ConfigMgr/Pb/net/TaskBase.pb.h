// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TaskBase.proto

#ifndef PROTOBUF_net_2fTaskBase_2eproto__INCLUDED
#define PROTOBUF_net_2fTaskBase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTaskBase_2eproto();
void protobuf_AssignDesc_net_2fTaskBase_2eproto();
void protobuf_ShutdownFile_net_2fTaskBase_2eproto();

class TTaskData;

enum ETaskStatus {
  NOTCOMPLETE = 1,
  COMPLETED = 2,
  AWARDED = 3,
  SERVERCOMPLETE = 4
};
bool ETaskStatus_IsValid(int value);
const ETaskStatus ETaskStatus_MIN = NOTCOMPLETE;
const ETaskStatus ETaskStatus_MAX = SERVERCOMPLETE;
const int ETaskStatus_ARRAYSIZE = ETaskStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETaskStatus_descriptor();
inline const ::std::string& ETaskStatus_Name(ETaskStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETaskStatus_descriptor(), value);
}
inline bool ETaskStatus_Parse(
    const ::std::string& name, ETaskStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETaskStatus>(
    ETaskStatus_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TTaskData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TaskBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTaskData : public ::google::protobuf::Message {
 public:
  TTaskData();
  virtual ~TTaskData();

  TTaskData(const TTaskData& from);

  inline TTaskData& operator=(const TTaskData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTaskData& default_instance();

  void Swap(TTaskData* other);

  // implements Message ----------------------------------------------

  TTaskData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTaskData& from);
  void MergeFrom(const TTaskData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTaskData</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 tid() const;
  inline void set_tid(::google::protobuf::int32 value);

  // optional .pb.ETaskStatus Status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTaskData</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETaskStatus status() const;
  inline void set_status(::pb::ETaskStatus value);

  // optional int32 Value = 4;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTaskData</name>
  	<Function>
  		<name>value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_value</name>
  		<replaceName>Value</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional int64 StartTime = 5;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTaskData</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 starttime() const;
  inline void set_starttime(::google::protobuf::int64 value);

  // optional int64 EndTime = 6;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TTaskData</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:pb.TTaskData)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 tid_;
  int status_;
  ::google::protobuf::int64 starttime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int32 value_;
  friend void  protobuf_AddDesc_net_2fTaskBase_2eproto();
  friend void protobuf_AssignDesc_net_2fTaskBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fTaskBase_2eproto();

  void InitAsDefaultInstance();
  static TTaskData* default_instance_;
};
// ===================================================================


// ===================================================================

// TTaskData

// optional int32 Tid = 1;
inline bool TTaskData::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTaskData::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTaskData::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTaskData::clear_tid() {
  tid_ = 0;
  clear_has_tid();
}
inline ::google::protobuf::int32 TTaskData::tid() const {
  // @@protoc_insertion_point(field_get:pb.TTaskData.Tid)
  return tid_;
}
inline void TTaskData::set_tid(::google::protobuf::int32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTaskData.Tid)
}

// optional .pb.ETaskStatus Status = 3;
inline bool TTaskData::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTaskData::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTaskData::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTaskData::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::pb::ETaskStatus TTaskData::status() const {
  // @@protoc_insertion_point(field_get:pb.TTaskData.Status)
  return static_cast< ::pb::ETaskStatus >(status_);
}
inline void TTaskData::set_status(::pb::ETaskStatus value) {
  assert(::pb::ETaskStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TTaskData.Status)
}

// optional int32 Value = 4;
inline bool TTaskData::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTaskData::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTaskData::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTaskData::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 TTaskData::value() const {
  // @@protoc_insertion_point(field_get:pb.TTaskData.Value)
  return value_;
}
inline void TTaskData::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:pb.TTaskData.Value)
}

// optional int64 StartTime = 5;
inline bool TTaskData::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTaskData::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTaskData::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTaskData::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::int64 TTaskData::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TTaskData.StartTime)
  return starttime_;
}
inline void TTaskData::set_starttime(::google::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTaskData.StartTime)
}

// optional int64 EndTime = 6;
inline bool TTaskData::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTaskData::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTaskData::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTaskData::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 TTaskData::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TTaskData.EndTime)
  return endtime_;
}
inline void TTaskData::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTaskData.EndTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ETaskStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ETaskStatus>() {
  return ::pb::ETaskStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTaskBase_2eproto__INCLUDED
