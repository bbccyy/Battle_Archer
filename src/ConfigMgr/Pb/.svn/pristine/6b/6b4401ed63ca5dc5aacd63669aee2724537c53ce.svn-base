// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/MonthCard.proto

#ifndef PROTOBUF_net_2fMonthCard_2eproto__INCLUDED
#define PROTOBUF_net_2fMonthCard_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fMonthCard_2eproto();
void protobuf_AssignDesc_net_2fMonthCard_2eproto();
void protobuf_ShutdownFile_net_2fMonthCard_2eproto();

class TMonthCardInfo;
class TMonthCardGetInfoRsp;
class TMonthCardReceiveRewardReq;
class TMonthCardReceiveRewardRsp;
class TMonthCardBuyNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TMonthCardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MonthCard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMonthCardInfo : public ::google::protobuf::Message {
 public:
  TMonthCardInfo();
  virtual ~TMonthCardInfo();

  TMonthCardInfo(const TMonthCardInfo& from);

  inline TMonthCardInfo& operator=(const TMonthCardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMonthCardInfo& default_instance();

  void Swap(TMonthCardInfo* other);

  // implements Message ----------------------------------------------

  TMonthCardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMonthCardInfo& from);
  void MergeFrom(const TMonthCardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ProductId = 1;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMonthCardInfo</name>
  	<Function>
  		<name>productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 productid() const;
  inline void set_productid(::google::protobuf::uint32 value);

  // optional uint64 ReceiveTime = 2;
  inline bool has_receivetime() const;
  inline void clear_receivetime();
  static const int kReceiveTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TMonthCardInfo</name>
  	<Function>
  		<name>receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivetime</name>
  		<replaceName>ReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 receivetime() const;
  inline void set_receivetime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TMonthCardInfo</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TMonthCardInfo)
 private:
  inline void set_has_productid();
  inline void clear_has_productid();
  inline void set_has_receivetime();
  inline void clear_has_receivetime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 receivetime_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint32 productid_;
  friend void  protobuf_AddDesc_net_2fMonthCard_2eproto();
  friend void protobuf_AssignDesc_net_2fMonthCard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMonthCard_2eproto();

  void InitAsDefaultInstance();
  static TMonthCardInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMonthCardGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MonthCard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMonthCardGetInfoRsp : public ::google::protobuf::Message {
 public:
  TMonthCardGetInfoRsp();
  virtual ~TMonthCardGetInfoRsp();

  TMonthCardGetInfoRsp(const TMonthCardGetInfoRsp& from);

  inline TMonthCardGetInfoRsp& operator=(const TMonthCardGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMonthCardGetInfoRsp& default_instance();

  void Swap(TMonthCardGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TMonthCardGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMonthCardGetInfoRsp& from);
  void MergeFrom(const TMonthCardGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TMonthCardInfo CardInfoArr = 1;
  inline int cardinfoarr_size() const;
  inline void clear_cardinfoarr();
  static const int kCardInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMonthCardGetInfoRsp</name>
  	<Function>
  		<name>cardinfoarr</name>
  		<replaceName>CardInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_cardinfoarr</name>
  		<replaceName>CardInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_cardinfoarr</name>
  		<replaceName>CardInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cardinfoarr</name>
  		<replaceName>CardInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>cardinfoarr_size</name>
  		<replaceName>CardInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMonthCardInfo& cardinfoarr(int index) const;
  inline ::pb::TMonthCardInfo* mutable_cardinfoarr(int index);
  inline ::pb::TMonthCardInfo* add_cardinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TMonthCardInfo >&
      cardinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TMonthCardInfo >*
      mutable_cardinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TMonthCardGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TMonthCardInfo > cardinfoarr_;
  friend void  protobuf_AddDesc_net_2fMonthCard_2eproto();
  friend void protobuf_AssignDesc_net_2fMonthCard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMonthCard_2eproto();

  void InitAsDefaultInstance();
  static TMonthCardGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMonthCardReceiveRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MonthCard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMonthCardReceiveRewardReq : public ::google::protobuf::Message {
 public:
  TMonthCardReceiveRewardReq();
  virtual ~TMonthCardReceiveRewardReq();

  TMonthCardReceiveRewardReq(const TMonthCardReceiveRewardReq& from);

  inline TMonthCardReceiveRewardReq& operator=(const TMonthCardReceiveRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMonthCardReceiveRewardReq& default_instance();

  void Swap(TMonthCardReceiveRewardReq* other);

  // implements Message ----------------------------------------------

  TMonthCardReceiveRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMonthCardReceiveRewardReq& from);
  void MergeFrom(const TMonthCardReceiveRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ProductId = 1;
  inline bool has_productid() const;
  inline void clear_productid();
  static const int kProductIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMonthCardReceiveRewardReq</name>
  	<Function>
  		<name>productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_productid</name>
  		<replaceName>ProductId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 productid() const;
  inline void set_productid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TMonthCardReceiveRewardReq)
 private:
  inline void set_has_productid();
  inline void clear_has_productid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 productid_;
  friend void  protobuf_AddDesc_net_2fMonthCard_2eproto();
  friend void protobuf_AssignDesc_net_2fMonthCard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMonthCard_2eproto();

  void InitAsDefaultInstance();
  static TMonthCardReceiveRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMonthCardReceiveRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MonthCard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMonthCardReceiveRewardRsp : public ::google::protobuf::Message {
 public:
  TMonthCardReceiveRewardRsp();
  virtual ~TMonthCardReceiveRewardRsp();

  TMonthCardReceiveRewardRsp(const TMonthCardReceiveRewardRsp& from);

  inline TMonthCardReceiveRewardRsp& operator=(const TMonthCardReceiveRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMonthCardReceiveRewardRsp& default_instance();

  void Swap(TMonthCardReceiveRewardRsp* other);

  // implements Message ----------------------------------------------

  TMonthCardReceiveRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMonthCardReceiveRewardRsp& from);
  void MergeFrom(const TMonthCardReceiveRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMonthCardReceiveRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TMonthCardReceiveRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fMonthCard_2eproto();
  friend void protobuf_AssignDesc_net_2fMonthCard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMonthCard_2eproto();

  void InitAsDefaultInstance();
  static TMonthCardReceiveRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TMonthCardBuyNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/MonthCard.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TMonthCardBuyNotify : public ::google::protobuf::Message {
 public:
  TMonthCardBuyNotify();
  virtual ~TMonthCardBuyNotify();

  TMonthCardBuyNotify(const TMonthCardBuyNotify& from);

  inline TMonthCardBuyNotify& operator=(const TMonthCardBuyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TMonthCardBuyNotify& default_instance();

  void Swap(TMonthCardBuyNotify* other);

  // implements Message ----------------------------------------------

  TMonthCardBuyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TMonthCardBuyNotify& from);
  void MergeFrom(const TMonthCardBuyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TMonthCardInfo CardInfo = 1;
  inline bool has_cardinfo() const;
  inline void clear_cardinfo();
  static const int kCardInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TMonthCardBuyNotify</name>
  	<Function>
  		<name>cardinfo</name>
  		<replaceName>CardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cardinfo</name>
  		<replaceName>CardInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_cardinfo</name>
  		<replaceName>CardInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cardinfo</name>
  		<replaceName>CardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TMonthCardInfo& cardinfo() const;
  inline ::pb::TMonthCardInfo* mutable_cardinfo();
  inline ::pb::TMonthCardInfo* release_cardinfo();
  inline void set_allocated_cardinfo(::pb::TMonthCardInfo* cardinfo);

  // @@protoc_insertion_point(class_scope:pb.TMonthCardBuyNotify)
 private:
  inline void set_has_cardinfo();
  inline void clear_has_cardinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TMonthCardInfo* cardinfo_;
  friend void  protobuf_AddDesc_net_2fMonthCard_2eproto();
  friend void protobuf_AssignDesc_net_2fMonthCard_2eproto();
  friend void protobuf_ShutdownFile_net_2fMonthCard_2eproto();

  void InitAsDefaultInstance();
  static TMonthCardBuyNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TMonthCardInfo

// optional uint32 ProductId = 1;
inline bool TMonthCardInfo::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMonthCardInfo::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMonthCardInfo::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMonthCardInfo::clear_productid() {
  productid_ = 0u;
  clear_has_productid();
}
inline ::google::protobuf::uint32 TMonthCardInfo::productid() const {
  // @@protoc_insertion_point(field_get:pb.TMonthCardInfo.ProductId)
  return productid_;
}
inline void TMonthCardInfo::set_productid(::google::protobuf::uint32 value) {
  set_has_productid();
  productid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMonthCardInfo.ProductId)
}

// optional uint64 ReceiveTime = 2;
inline bool TMonthCardInfo::has_receivetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TMonthCardInfo::set_has_receivetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TMonthCardInfo::clear_has_receivetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TMonthCardInfo::clear_receivetime() {
  receivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_receivetime();
}
inline ::google::protobuf::uint64 TMonthCardInfo::receivetime() const {
  // @@protoc_insertion_point(field_get:pb.TMonthCardInfo.ReceiveTime)
  return receivetime_;
}
inline void TMonthCardInfo::set_receivetime(::google::protobuf::uint64 value) {
  set_has_receivetime();
  receivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TMonthCardInfo.ReceiveTime)
}

// optional uint64 EndTime = 3;
inline bool TMonthCardInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TMonthCardInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TMonthCardInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TMonthCardInfo::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TMonthCardInfo::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TMonthCardInfo.EndTime)
  return endtime_;
}
inline void TMonthCardInfo::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TMonthCardInfo.EndTime)
}

// -------------------------------------------------------------------

// TMonthCardGetInfoRsp

// repeated .pb.TMonthCardInfo CardInfoArr = 1;
inline int TMonthCardGetInfoRsp::cardinfoarr_size() const {
  return cardinfoarr_.size();
}
inline void TMonthCardGetInfoRsp::clear_cardinfoarr() {
  cardinfoarr_.Clear();
}
inline const ::pb::TMonthCardInfo& TMonthCardGetInfoRsp::cardinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TMonthCardGetInfoRsp.CardInfoArr)
  return cardinfoarr_.Get(index);
}
inline ::pb::TMonthCardInfo* TMonthCardGetInfoRsp::mutable_cardinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TMonthCardGetInfoRsp.CardInfoArr)
  return cardinfoarr_.Mutable(index);
}
inline ::pb::TMonthCardInfo* TMonthCardGetInfoRsp::add_cardinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TMonthCardGetInfoRsp.CardInfoArr)
  return cardinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TMonthCardInfo >&
TMonthCardGetInfoRsp::cardinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TMonthCardGetInfoRsp.CardInfoArr)
  return cardinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TMonthCardInfo >*
TMonthCardGetInfoRsp::mutable_cardinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TMonthCardGetInfoRsp.CardInfoArr)
  return &cardinfoarr_;
}

// -------------------------------------------------------------------

// TMonthCardReceiveRewardReq

// optional uint32 ProductId = 1;
inline bool TMonthCardReceiveRewardReq::has_productid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMonthCardReceiveRewardReq::set_has_productid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMonthCardReceiveRewardReq::clear_has_productid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMonthCardReceiveRewardReq::clear_productid() {
  productid_ = 0u;
  clear_has_productid();
}
inline ::google::protobuf::uint32 TMonthCardReceiveRewardReq::productid() const {
  // @@protoc_insertion_point(field_get:pb.TMonthCardReceiveRewardReq.ProductId)
  return productid_;
}
inline void TMonthCardReceiveRewardReq::set_productid(::google::protobuf::uint32 value) {
  set_has_productid();
  productid_ = value;
  // @@protoc_insertion_point(field_set:pb.TMonthCardReceiveRewardReq.ProductId)
}

// -------------------------------------------------------------------

// TMonthCardReceiveRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TMonthCardReceiveRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TMonthCardReceiveRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TMonthCardReceiveRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TMonthCardReceiveRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TMonthCardReceiveRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TMonthCardReceiveRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TMonthCardReceiveRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TMonthCardReceiveRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TMonthCardReceiveRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TMonthCardReceiveRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TMonthCardReceiveRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TMonthCardReceiveRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TMonthCardBuyNotify

// optional .pb.TMonthCardInfo CardInfo = 1;
inline bool TMonthCardBuyNotify::has_cardinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TMonthCardBuyNotify::set_has_cardinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TMonthCardBuyNotify::clear_has_cardinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TMonthCardBuyNotify::clear_cardinfo() {
  if (cardinfo_ != NULL) cardinfo_->::pb::TMonthCardInfo::Clear();
  clear_has_cardinfo();
}
inline const ::pb::TMonthCardInfo& TMonthCardBuyNotify::cardinfo() const {
  // @@protoc_insertion_point(field_get:pb.TMonthCardBuyNotify.CardInfo)
  return cardinfo_ != NULL ? *cardinfo_ : *default_instance_->cardinfo_;
}
inline ::pb::TMonthCardInfo* TMonthCardBuyNotify::mutable_cardinfo() {
  set_has_cardinfo();
  if (cardinfo_ == NULL) cardinfo_ = new ::pb::TMonthCardInfo;
  // @@protoc_insertion_point(field_mutable:pb.TMonthCardBuyNotify.CardInfo)
  return cardinfo_;
}
inline ::pb::TMonthCardInfo* TMonthCardBuyNotify::release_cardinfo() {
  clear_has_cardinfo();
  ::pb::TMonthCardInfo* temp = cardinfo_;
  cardinfo_ = NULL;
  return temp;
}
inline void TMonthCardBuyNotify::set_allocated_cardinfo(::pb::TMonthCardInfo* cardinfo) {
  delete cardinfo_;
  cardinfo_ = cardinfo;
  if (cardinfo) {
    set_has_cardinfo();
  } else {
    clear_has_cardinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TMonthCardBuyNotify.CardInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fMonthCard_2eproto__INCLUDED
