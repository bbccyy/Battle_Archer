// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ChatFrame.proto

#ifndef PROTOBUF_net_2fChatFrame_2eproto__INCLUDED
#define PROTOBUF_net_2fChatFrame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fChatFrame_2eproto();
void protobuf_AssignDesc_net_2fChatFrame_2eproto();
void protobuf_ShutdownFile_net_2fChatFrame_2eproto();

class TChatFrameGetInfoRsp;
class TChatFrameSetChatFrameReq;
class TChatFrameChangeNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TChatFrameGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ChatFrame.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatFrameGetInfoRsp : public ::google::protobuf::Message {
 public:
  TChatFrameGetInfoRsp();
  virtual ~TChatFrameGetInfoRsp();

  TChatFrameGetInfoRsp(const TChatFrameGetInfoRsp& from);

  inline TChatFrameGetInfoRsp& operator=(const TChatFrameGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatFrameGetInfoRsp& default_instance();

  void Swap(TChatFrameGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TChatFrameGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatFrameGetInfoRsp& from);
  void MergeFrom(const TChatFrameGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 ActiveChatFrameArray = 1;
  inline int activechatframearray_size() const;
  inline void clear_activechatframearray();
  static const int kActiveChatFrameArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatFrameGetInfoRsp</name>
  	<Function>
  		<name>activechatframearray</name>
  		<replaceName>ActiveChatFrameArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_activechatframearray</name>
  		<replaceName>ActiveChatFrameArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_activechatframearray</name>
  		<replaceName>ActiveChatFrameArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activechatframearray</name>
  		<replaceName>ActiveChatFrameArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>activechatframearray_size</name>
  		<replaceName>ActiveChatFrameArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 activechatframearray(int index) const;
  inline void set_activechatframearray(int index, ::google::protobuf::uint32 value);
  inline void add_activechatframearray(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      activechatframearray() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_activechatframearray();

  // optional uint32 NowUsedChatFrameTid = 2;
  inline bool has_nowusedchatframetid() const;
  inline void clear_nowusedchatframetid();
  static const int kNowUsedChatFrameTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatFrameGetInfoRsp</name>
  	<Function>
  		<name>nowusedchatframetid</name>
  		<replaceName>NowUsedChatFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nowusedchatframetid</name>
  		<replaceName>NowUsedChatFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nowusedchatframetid</name>
  		<replaceName>NowUsedChatFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 nowusedchatframetid() const;
  inline void set_nowusedchatframetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TChatFrameGetInfoRsp)
 private:
  inline void set_has_nowusedchatframetid();
  inline void clear_has_nowusedchatframetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > activechatframearray_;
  ::google::protobuf::uint32 nowusedchatframetid_;
  friend void  protobuf_AddDesc_net_2fChatFrame_2eproto();
  friend void protobuf_AssignDesc_net_2fChatFrame_2eproto();
  friend void protobuf_ShutdownFile_net_2fChatFrame_2eproto();

  void InitAsDefaultInstance();
  static TChatFrameGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatFrameSetChatFrameReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ChatFrame.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatFrameSetChatFrameReq : public ::google::protobuf::Message {
 public:
  TChatFrameSetChatFrameReq();
  virtual ~TChatFrameSetChatFrameReq();

  TChatFrameSetChatFrameReq(const TChatFrameSetChatFrameReq& from);

  inline TChatFrameSetChatFrameReq& operator=(const TChatFrameSetChatFrameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatFrameSetChatFrameReq& default_instance();

  void Swap(TChatFrameSetChatFrameReq* other);

  // implements Message ----------------------------------------------

  TChatFrameSetChatFrameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatFrameSetChatFrameReq& from);
  void MergeFrom(const TChatFrameSetChatFrameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ChatFrameTid = 1;
  inline bool has_chatframetid() const;
  inline void clear_chatframetid();
  static const int kChatFrameTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatFrameSetChatFrameReq</name>
  	<Function>
  		<name>chatframetid</name>
  		<replaceName>ChatFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_chatframetid</name>
  		<replaceName>ChatFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_chatframetid</name>
  		<replaceName>ChatFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 chatframetid() const;
  inline void set_chatframetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TChatFrameSetChatFrameReq)
 private:
  inline void set_has_chatframetid();
  inline void clear_has_chatframetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 chatframetid_;
  friend void  protobuf_AddDesc_net_2fChatFrame_2eproto();
  friend void protobuf_AssignDesc_net_2fChatFrame_2eproto();
  friend void protobuf_ShutdownFile_net_2fChatFrame_2eproto();

  void InitAsDefaultInstance();
  static TChatFrameSetChatFrameReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TChatFrameChangeNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ChatFrame.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TChatFrameChangeNotify : public ::google::protobuf::Message {
 public:
  TChatFrameChangeNotify();
  virtual ~TChatFrameChangeNotify();

  TChatFrameChangeNotify(const TChatFrameChangeNotify& from);

  inline TChatFrameChangeNotify& operator=(const TChatFrameChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TChatFrameChangeNotify& default_instance();

  void Swap(TChatFrameChangeNotify* other);

  // implements Message ----------------------------------------------

  TChatFrameChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TChatFrameChangeNotify& from);
  void MergeFrom(const TChatFrameChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 NowUsedChatFrameTid = 1;
  inline bool has_nowusedchatframetid() const;
  inline void clear_nowusedchatframetid();
  static const int kNowUsedChatFrameTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TChatFrameChangeNotify</name>
  	<Function>
  		<name>nowusedchatframetid</name>
  		<replaceName>NowUsedChatFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nowusedchatframetid</name>
  		<replaceName>NowUsedChatFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nowusedchatframetid</name>
  		<replaceName>NowUsedChatFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 nowusedchatframetid() const;
  inline void set_nowusedchatframetid(::google::protobuf::uint32 value);

  // optional uint32 ActiveChatFrameTid = 2;
  inline bool has_activechatframetid() const;
  inline void clear_activechatframetid();
  static const int kActiveChatFrameTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TChatFrameChangeNotify</name>
  	<Function>
  		<name>activechatframetid</name>
  		<replaceName>ActiveChatFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_activechatframetid</name>
  		<replaceName>ActiveChatFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_activechatframetid</name>
  		<replaceName>ActiveChatFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 activechatframetid() const;
  inline void set_activechatframetid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TChatFrameChangeNotify)
 private:
  inline void set_has_nowusedchatframetid();
  inline void clear_has_nowusedchatframetid();
  inline void set_has_activechatframetid();
  inline void clear_has_activechatframetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 nowusedchatframetid_;
  ::google::protobuf::uint32 activechatframetid_;
  friend void  protobuf_AddDesc_net_2fChatFrame_2eproto();
  friend void protobuf_AssignDesc_net_2fChatFrame_2eproto();
  friend void protobuf_ShutdownFile_net_2fChatFrame_2eproto();

  void InitAsDefaultInstance();
  static TChatFrameChangeNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TChatFrameGetInfoRsp

// repeated uint32 ActiveChatFrameArray = 1;
inline int TChatFrameGetInfoRsp::activechatframearray_size() const {
  return activechatframearray_.size();
}
inline void TChatFrameGetInfoRsp::clear_activechatframearray() {
  activechatframearray_.Clear();
}
inline ::google::protobuf::uint32 TChatFrameGetInfoRsp::activechatframearray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TChatFrameGetInfoRsp.ActiveChatFrameArray)
  return activechatframearray_.Get(index);
}
inline void TChatFrameGetInfoRsp::set_activechatframearray(int index, ::google::protobuf::uint32 value) {
  activechatframearray_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TChatFrameGetInfoRsp.ActiveChatFrameArray)
}
inline void TChatFrameGetInfoRsp::add_activechatframearray(::google::protobuf::uint32 value) {
  activechatframearray_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TChatFrameGetInfoRsp.ActiveChatFrameArray)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TChatFrameGetInfoRsp::activechatframearray() const {
  // @@protoc_insertion_point(field_list:pb.TChatFrameGetInfoRsp.ActiveChatFrameArray)
  return activechatframearray_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TChatFrameGetInfoRsp::mutable_activechatframearray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TChatFrameGetInfoRsp.ActiveChatFrameArray)
  return &activechatframearray_;
}

// optional uint32 NowUsedChatFrameTid = 2;
inline bool TChatFrameGetInfoRsp::has_nowusedchatframetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatFrameGetInfoRsp::set_has_nowusedchatframetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatFrameGetInfoRsp::clear_has_nowusedchatframetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatFrameGetInfoRsp::clear_nowusedchatframetid() {
  nowusedchatframetid_ = 0u;
  clear_has_nowusedchatframetid();
}
inline ::google::protobuf::uint32 TChatFrameGetInfoRsp::nowusedchatframetid() const {
  // @@protoc_insertion_point(field_get:pb.TChatFrameGetInfoRsp.NowUsedChatFrameTid)
  return nowusedchatframetid_;
}
inline void TChatFrameGetInfoRsp::set_nowusedchatframetid(::google::protobuf::uint32 value) {
  set_has_nowusedchatframetid();
  nowusedchatframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatFrameGetInfoRsp.NowUsedChatFrameTid)
}

// -------------------------------------------------------------------

// TChatFrameSetChatFrameReq

// optional uint32 ChatFrameTid = 1;
inline bool TChatFrameSetChatFrameReq::has_chatframetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatFrameSetChatFrameReq::set_has_chatframetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatFrameSetChatFrameReq::clear_has_chatframetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatFrameSetChatFrameReq::clear_chatframetid() {
  chatframetid_ = 0u;
  clear_has_chatframetid();
}
inline ::google::protobuf::uint32 TChatFrameSetChatFrameReq::chatframetid() const {
  // @@protoc_insertion_point(field_get:pb.TChatFrameSetChatFrameReq.ChatFrameTid)
  return chatframetid_;
}
inline void TChatFrameSetChatFrameReq::set_chatframetid(::google::protobuf::uint32 value) {
  set_has_chatframetid();
  chatframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatFrameSetChatFrameReq.ChatFrameTid)
}

// -------------------------------------------------------------------

// TChatFrameChangeNotify

// optional uint32 NowUsedChatFrameTid = 1;
inline bool TChatFrameChangeNotify::has_nowusedchatframetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TChatFrameChangeNotify::set_has_nowusedchatframetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TChatFrameChangeNotify::clear_has_nowusedchatframetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TChatFrameChangeNotify::clear_nowusedchatframetid() {
  nowusedchatframetid_ = 0u;
  clear_has_nowusedchatframetid();
}
inline ::google::protobuf::uint32 TChatFrameChangeNotify::nowusedchatframetid() const {
  // @@protoc_insertion_point(field_get:pb.TChatFrameChangeNotify.NowUsedChatFrameTid)
  return nowusedchatframetid_;
}
inline void TChatFrameChangeNotify::set_nowusedchatframetid(::google::protobuf::uint32 value) {
  set_has_nowusedchatframetid();
  nowusedchatframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatFrameChangeNotify.NowUsedChatFrameTid)
}

// optional uint32 ActiveChatFrameTid = 2;
inline bool TChatFrameChangeNotify::has_activechatframetid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TChatFrameChangeNotify::set_has_activechatframetid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TChatFrameChangeNotify::clear_has_activechatframetid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TChatFrameChangeNotify::clear_activechatframetid() {
  activechatframetid_ = 0u;
  clear_has_activechatframetid();
}
inline ::google::protobuf::uint32 TChatFrameChangeNotify::activechatframetid() const {
  // @@protoc_insertion_point(field_get:pb.TChatFrameChangeNotify.ActiveChatFrameTid)
  return activechatframetid_;
}
inline void TChatFrameChangeNotify::set_activechatframetid(::google::protobuf::uint32 value) {
  set_has_activechatframetid();
  activechatframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TChatFrameChangeNotify.ActiveChatFrameTid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fChatFrame_2eproto__INCLUDED
