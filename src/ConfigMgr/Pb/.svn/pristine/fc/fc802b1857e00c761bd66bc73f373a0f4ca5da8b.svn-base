// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossConquer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CrossConquer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TConquerCityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerCityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerStageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerStageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerAllyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerAllyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerGetServerTeamInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerGetServerTeamInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerGetBaseInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerGetBaseInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerSetTargetCityReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerSetTargetCityReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerSetTargetCityRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerSetTargetCityRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerGetAllyInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerGetAllyInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerGetAllyInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerGetAllyInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerMoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerMoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerAttackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerAttackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerTouchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerTouchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerSetUserOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerSetUserOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerSetArmyOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerSetArmyOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerGetRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerGetRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerGetRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerGetRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerLevelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerLevelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerShopInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerShopInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TConquerBaseInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TConquerBaseInfoRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EConquerStage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EConquerAdjust_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCrossConquer_2eproto() {
  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CrossConquer.proto");
  GOOGLE_CHECK(file != NULL);
  TConquerCityInfo_descriptor_ = file->message_type(0);
  static const int TConquerCityInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerCityInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerCityInfo, conquerallyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerCityInfo, conquerallyname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerCityInfo, defallyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerCityInfo, atkallycnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerCityInfo, fieldstageid_),
  };
  TConquerCityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerCityInfo_descriptor_,
      TConquerCityInfo::default_instance_,
      TConquerCityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerCityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerCityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerCityInfo));
  TConquerMapInfo_descriptor_ = file->message_type(1);
  static const int TConquerMapInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerMapInfo, mapseqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerMapInfo, arrcityinfo_),
  };
  TConquerMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerMapInfo_descriptor_,
      TConquerMapInfo::default_instance_,
      TConquerMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerMapInfo));
  TConquerStageInfo_descriptor_ = file->message_type(2);
  static const int TConquerStageInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerStageInfo, curstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerStageInfo, lockstagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerStageInfo, warstagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerStageInfo, warduration_),
  };
  TConquerStageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerStageInfo_descriptor_,
      TConquerStageInfo::default_instance_,
      TConquerStageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerStageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerStageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerStageInfo));
  TConquerAllyInfo_descriptor_ = file->message_type(3);
  static const int TConquerAllyInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerAllyInfo, conquerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerAllyInfo, allyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerAllyInfo, conquercityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerAllyInfo, targetcityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerAllyInfo, currentfieldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerAllyInfo, adjustresult_),
  };
  TConquerAllyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerAllyInfo_descriptor_,
      TConquerAllyInfo::default_instance_,
      TConquerAllyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerAllyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerAllyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerAllyInfo));
  TConquerUserInfo_descriptor_ = file->message_type(4);
  static const int TConquerUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerUserInfo, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerUserInfo, score_),
  };
  TConquerUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerUserInfo_descriptor_,
      TConquerUserInfo::default_instance_,
      TConquerUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerUserInfo));
  TConquerGetServerTeamInfoRsp_descriptor_ = file->message_type(5);
  static const int TConquerGetServerTeamInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetServerTeamInfoRsp, serverteamid_),
  };
  TConquerGetServerTeamInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerGetServerTeamInfoRsp_descriptor_,
      TConquerGetServerTeamInfoRsp::default_instance_,
      TConquerGetServerTeamInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetServerTeamInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetServerTeamInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerGetServerTeamInfoRsp));
  TConquerGetBaseInfoRsp_descriptor_ = file->message_type(6);
  static const int TConquerGetBaseInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetBaseInfoRsp, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetBaseInfoRsp, allyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetBaseInfoRsp, userinfo_),
  };
  TConquerGetBaseInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerGetBaseInfoRsp_descriptor_,
      TConquerGetBaseInfoRsp::default_instance_,
      TConquerGetBaseInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetBaseInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetBaseInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerGetBaseInfoRsp));
  TConquerSetTargetCityReq_descriptor_ = file->message_type(7);
  static const int TConquerSetTargetCityReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetTargetCityReq, targetcityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetTargetCityReq, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetTargetCityReq, guildpost_),
  };
  TConquerSetTargetCityReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerSetTargetCityReq_descriptor_,
      TConquerSetTargetCityReq::default_instance_,
      TConquerSetTargetCityReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetTargetCityReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetTargetCityReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerSetTargetCityReq));
  TConquerSetTargetCityRsp_descriptor_ = file->message_type(8);
  static const int TConquerSetTargetCityRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetTargetCityRsp, targetcityid_),
  };
  TConquerSetTargetCityRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerSetTargetCityRsp_descriptor_,
      TConquerSetTargetCityRsp::default_instance_,
      TConquerSetTargetCityRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetTargetCityRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetTargetCityRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerSetTargetCityRsp));
  TConquerGetAllyInfoReq_descriptor_ = file->message_type(9);
  static const int TConquerGetAllyInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetAllyInfoReq, cityid_),
  };
  TConquerGetAllyInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerGetAllyInfoReq_descriptor_,
      TConquerGetAllyInfoReq::default_instance_,
      TConquerGetAllyInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetAllyInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetAllyInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerGetAllyInfoReq));
  TConquerGetAllyInfoRsp_descriptor_ = file->message_type(10);
  static const int TConquerGetAllyInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetAllyInfoRsp, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetAllyInfoRsp, defallyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetAllyInfoRsp, arratkallyinfo_),
  };
  TConquerGetAllyInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerGetAllyInfoRsp_descriptor_,
      TConquerGetAllyInfoRsp::default_instance_,
      TConquerGetAllyInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetAllyInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetAllyInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerGetAllyInfoRsp));
  TConquerMoveReq_descriptor_ = file->message_type(11);
  static const int TConquerMoveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerMoveReq, targetpos_),
  };
  TConquerMoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerMoveReq_descriptor_,
      TConquerMoveReq::default_instance_,
      TConquerMoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerMoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerMoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerMoveReq));
  TConquerAttackReq_descriptor_ = file->message_type(12);
  static const int TConquerAttackReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerAttackReq, targetid_),
  };
  TConquerAttackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerAttackReq_descriptor_,
      TConquerAttackReq::default_instance_,
      TConquerAttackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerAttackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerAttackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerAttackReq));
  TConquerTouchReq_descriptor_ = file->message_type(13);
  static const int TConquerTouchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerTouchReq, targetbid_),
  };
  TConquerTouchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerTouchReq_descriptor_,
      TConquerTouchReq::default_instance_,
      TConquerTouchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerTouchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerTouchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerTouchReq));
  TConquerSetUserOptReq_descriptor_ = file->message_type(14);
  static const int TConquerSetUserOptReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetUserOptReq, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetUserOptReq, autoattack_),
  };
  TConquerSetUserOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerSetUserOptReq_descriptor_,
      TConquerSetUserOptReq::default_instance_,
      TConquerSetUserOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetUserOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetUserOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerSetUserOptReq));
  TConquerSetArmyOptReq_descriptor_ = file->message_type(15);
  static const int TConquerSetArmyOptReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetArmyOptReq, goalid_),
  };
  TConquerSetArmyOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerSetArmyOptReq_descriptor_,
      TConquerSetArmyOptReq::default_instance_,
      TConquerSetArmyOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetArmyOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerSetArmyOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerSetArmyOptReq));
  TConquerRankInfo_descriptor_ = file->message_type(16);
  static const int TConquerRankInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerRankInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerRankInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerRankInfo, imagehtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerRankInfo, imageframetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerRankInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerRankInfo, killcnt_),
  };
  TConquerRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerRankInfo_descriptor_,
      TConquerRankInfo::default_instance_,
      TConquerRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerRankInfo));
  TConquerGetRankListReq_descriptor_ = file->message_type(17);
  static const int TConquerGetRankListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetRankListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetRankListReq, limit_),
  };
  TConquerGetRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerGetRankListReq_descriptor_,
      TConquerGetRankListReq::default_instance_,
      TConquerGetRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerGetRankListReq));
  TConquerGetRankListRsp_descriptor_ = file->message_type(18);
  static const int TConquerGetRankListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetRankListRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetRankListRsp, myrank_),
  };
  TConquerGetRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerGetRankListRsp_descriptor_,
      TConquerGetRankListRsp::default_instance_,
      TConquerGetRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerGetRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerGetRankListRsp));
  TConquerLevelInfo_descriptor_ = file->message_type(19);
  static const int TConquerLevelInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerLevelInfo, conquerlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerLevelInfo, deadline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerLevelInfo, seasontime_),
  };
  TConquerLevelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerLevelInfo_descriptor_,
      TConquerLevelInfo::default_instance_,
      TConquerLevelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerLevelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerLevelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerLevelInfo));
  TConquerShopInfoRsp_descriptor_ = file->message_type(20);
  static const int TConquerShopInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerShopInfoRsp, singleshoparray_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerShopInfoRsp, conquerlevelinfo_),
  };
  TConquerShopInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerShopInfoRsp_descriptor_,
      TConquerShopInfoRsp::default_instance_,
      TConquerShopInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerShopInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerShopInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerShopInfoRsp));
  TConquerBaseInfoRsp_descriptor_ = file->message_type(21);
  static const int TConquerBaseInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerBaseInfoRsp, stageinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerBaseInfoRsp, mapinfo_),
  };
  TConquerBaseInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TConquerBaseInfoRsp_descriptor_,
      TConquerBaseInfoRsp::default_instance_,
      TConquerBaseInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerBaseInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TConquerBaseInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TConquerBaseInfoRsp));
  EConquerStage_descriptor_ = file->enum_type(0);
  EConquerAdjust_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCrossConquer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerCityInfo_descriptor_, &TConquerCityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerMapInfo_descriptor_, &TConquerMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerStageInfo_descriptor_, &TConquerStageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerAllyInfo_descriptor_, &TConquerAllyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerUserInfo_descriptor_, &TConquerUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerGetServerTeamInfoRsp_descriptor_, &TConquerGetServerTeamInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerGetBaseInfoRsp_descriptor_, &TConquerGetBaseInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerSetTargetCityReq_descriptor_, &TConquerSetTargetCityReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerSetTargetCityRsp_descriptor_, &TConquerSetTargetCityRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerGetAllyInfoReq_descriptor_, &TConquerGetAllyInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerGetAllyInfoRsp_descriptor_, &TConquerGetAllyInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerMoveReq_descriptor_, &TConquerMoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerAttackReq_descriptor_, &TConquerAttackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerTouchReq_descriptor_, &TConquerTouchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerSetUserOptReq_descriptor_, &TConquerSetUserOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerSetArmyOptReq_descriptor_, &TConquerSetArmyOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerRankInfo_descriptor_, &TConquerRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerGetRankListReq_descriptor_, &TConquerGetRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerGetRankListRsp_descriptor_, &TConquerGetRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerLevelInfo_descriptor_, &TConquerLevelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerShopInfoRsp_descriptor_, &TConquerShopInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TConquerBaseInfoRsp_descriptor_, &TConquerBaseInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCrossConquer_2eproto() {
  delete TConquerCityInfo::default_instance_;
  delete TConquerCityInfo_reflection_;
  delete TConquerMapInfo::default_instance_;
  delete TConquerMapInfo_reflection_;
  delete TConquerStageInfo::default_instance_;
  delete TConquerStageInfo_reflection_;
  delete TConquerAllyInfo::default_instance_;
  delete TConquerAllyInfo_reflection_;
  delete TConquerUserInfo::default_instance_;
  delete TConquerUserInfo_reflection_;
  delete TConquerGetServerTeamInfoRsp::default_instance_;
  delete TConquerGetServerTeamInfoRsp_reflection_;
  delete TConquerGetBaseInfoRsp::default_instance_;
  delete TConquerGetBaseInfoRsp_reflection_;
  delete TConquerSetTargetCityReq::default_instance_;
  delete TConquerSetTargetCityReq_reflection_;
  delete TConquerSetTargetCityRsp::default_instance_;
  delete TConquerSetTargetCityRsp_reflection_;
  delete TConquerGetAllyInfoReq::default_instance_;
  delete TConquerGetAllyInfoReq_reflection_;
  delete TConquerGetAllyInfoRsp::default_instance_;
  delete TConquerGetAllyInfoRsp_reflection_;
  delete TConquerMoveReq::default_instance_;
  delete TConquerMoveReq_reflection_;
  delete TConquerAttackReq::default_instance_;
  delete TConquerAttackReq_reflection_;
  delete TConquerTouchReq::default_instance_;
  delete TConquerTouchReq_reflection_;
  delete TConquerSetUserOptReq::default_instance_;
  delete TConquerSetUserOptReq_reflection_;
  delete TConquerSetArmyOptReq::default_instance_;
  delete TConquerSetArmyOptReq_reflection_;
  delete TConquerRankInfo::default_instance_;
  delete TConquerRankInfo_reflection_;
  delete TConquerGetRankListReq::default_instance_;
  delete TConquerGetRankListReq_reflection_;
  delete TConquerGetRankListRsp::default_instance_;
  delete TConquerGetRankListRsp_reflection_;
  delete TConquerLevelInfo::default_instance_;
  delete TConquerLevelInfo_reflection_;
  delete TConquerShopInfoRsp::default_instance_;
  delete TConquerShopInfoRsp_reflection_;
  delete TConquerBaseInfoRsp::default_instance_;
  delete TConquerBaseInfoRsp_reflection_;
}

void protobuf_AddDesc_net_2fCrossConquer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::pb::protobuf_AddDesc_net_2fAlliance_2eproto();
  ::pb::protobuf_AddDesc_net_2fShop_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026net/CrossConquer.proto\022\002pb\032\021module/Uti"
    "l.proto\032\022net/Alliance.proto\032\016net/Shop.pr"
    "oto\"\217\001\n\020TConquerCityInfo\022\016\n\006CityId\030\001 \001(\r"
    "\022\025\n\rConquerAllyId\030\002 \001(\004\022\027\n\017ConquerAllyNa"
    "me\030\003 \001(\t\022\021\n\tDefAllyId\030\004 \001(\004\022\022\n\nAtkAllyCn"
    "t\030\005 \001(\r\022\024\n\014FieldStageID\030\007 \001(\r\"N\n\017TConque"
    "rMapInfo\022\020\n\010MapSeqId\030\001 \001(\r\022)\n\013ArrCityInf"
    "o\030\002 \003(\0132\024.pb.TConquerCityInfo\"z\n\021TConque"
    "rStageInfo\022#\n\010CurStage\030\002 \001(\0162\021.pb.EConqu"
    "erStage\022\025\n\rLockStageTime\030\003 \001(\003\022\024\n\014WarSta"
    "geTime\030\004 \001(\003\022\023\n\013WarDuration\030\005 \001(\005\"\247\001\n\020TC"
    "onquerAllyInfo\022\024\n\014ConquerLevel\030\001 \001(\r\022\016\n\006"
    "AllyId\030\002 \001(\004\022\025\n\rConquerCityId\030\003 \001(\r\022\024\n\014T"
    "argetCityId\030\004 \001(\r\022\026\n\016CurrentFieldId\030\005 \001("
    "\r\022(\n\014AdjustResult\030\006 \001(\0162\022.pb.EConquerAdj"
    "ust\"1\n\020TConquerUserInfo\022\016\n\006UserId\030\002 \001(\004\022"
    "\r\n\005Score\030\003 \001(\r\"4\n\034TConquerGetServerTeamI"
    "nfoRsp\022\024\n\014ServerTeamId\030\001 \001(\r\"v\n\026TConquer"
    "GetBaseInfoRsp\022\014\n\004Open\030\001 \001(\010\022&\n\010AllyInfo"
    "\030\002 \001(\0132\024.pb.TConquerAllyInfo\022&\n\010UserInfo"
    "\030\003 \001(\0132\024.pb.TConquerUserInfo\"T\n\030TConquer"
    "SetTargetCityReq\022\024\n\014TargetCityId\030\001 \001(\r\022\017"
    "\n\007GuildId\030\002 \001(\004\022\021\n\tGuildPost\030\003 \001(\r\"0\n\030TC"
    "onquerSetTargetCityRsp\022\024\n\014TargetCityId\030\001"
    " \001(\r\"(\n\026TConquerGetAllyInfoReq\022\016\n\006CityId"
    "\030\001 \001(\r\"\207\001\n\026TConquerGetAllyInfoRsp\022\016\n\006Cit"
    "yId\030\001 \001(\r\022,\n\013DefAllyInfo\030\002 \001(\0132\027.pb.TAll"
    "ianceSimpleInfo\022/\n\016ArrAtkAllyInfo\030\003 \003(\0132"
    "\027.pb.TAllianceSimpleInfo\"7\n\017TConquerMove"
    "Req\022$\n\tTargetPos\030\001 \001(\0132\021.pb.PbVector2_In"
    "t\"%\n\021TConquerAttackReq\022\020\n\010TargetId\030\001 \001(\004"
    "\"%\n\020TConquerTouchReq\022\021\n\tTargetBid\030\001 \001(\004\""
    "=\n\025TConquerSetUserOptReq\022\020\n\010TargetId\030\001 \001"
    "(\004\022\022\n\nAutoAttack\030\002 \001(\010\"\'\n\025TConquerSetArm"
    "yOptReq\022\016\n\006GoalId\030\001 \001(\r\"\225\001\n\020TConquerRank"
    "Info\022\013\n\003Uid\030\001 \001(\004\022\r\n\005Uname\030\002 \001(\t\022\021\n\tImag"
    "eHtid\030\003 \001(\r\022\025\n\rImageFrameTid\030\004 \001(\r\022\r\n\005Ti"
    "tle\030\005 \001(\r\022\014\n\004Rank\030\n \001(\r\022\r\n\005Score\030\013 \001(\r\022\017"
    "\n\007KillCnt\030\014 \001(\r\"7\n\026TConquerGetRankListRe"
    "q\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"O\n\026TCon"
    "querGetRankListRsp\022%\n\007RankArr\030\001 \003(\0132\024.pb"
    ".TConquerRankInfo\022\016\n\006MyRank\030\002 \001(\005\"O\n\021TCo"
    "nquerLevelInfo\022\024\n\014ConquerLevel\030\001 \001(\r\022\020\n\010"
    "Deadline\030\002 \001(\004\022\022\n\nSeasonTime\030\003 \001(\004\"x\n\023TC"
    "onquerShopInfoRsp\0220\n\017SingleShopArray\030\001 \003"
    "(\0132\027.pb.TShopSingleShopInfo\022/\n\020ConquerLe"
    "velInfo\030\002 \001(\0132\025.pb.TConquerLevelInfo\"e\n\023"
    "TConquerBaseInfoRsp\022(\n\tStageInfo\030\001 \001(\0132\025"
    ".pb.TConquerStageInfo\022$\n\007MapInfo\030\002 \001(\0132\023"
    ".pb.TConquerMapInfo*u\n\rEConquerStage\022\032\n\026"
    "ECONQUER_STAGE_INVALID\020\000\022\027\n\023ECONQUER_STA"
    "GE_WAIT\020\001\022\027\n\023ECONQUER_STAGE_LOCK\020\002\022\026\n\022EC"
    "ONQUER_STAGE_WAR\020\003*K\n\016EConquerAdjust\022\014\n\010"
    "NoChange\020\000\022\013\n\007Another\020\001\022\016\n\nDisqualify\020\002\022"
    "\016\n\nAutoDefend\020\003", 2175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CrossConquer.proto", &protobuf_RegisterTypes);
  TConquerCityInfo::default_instance_ = new TConquerCityInfo();
  TConquerMapInfo::default_instance_ = new TConquerMapInfo();
  TConquerStageInfo::default_instance_ = new TConquerStageInfo();
  TConquerAllyInfo::default_instance_ = new TConquerAllyInfo();
  TConquerUserInfo::default_instance_ = new TConquerUserInfo();
  TConquerGetServerTeamInfoRsp::default_instance_ = new TConquerGetServerTeamInfoRsp();
  TConquerGetBaseInfoRsp::default_instance_ = new TConquerGetBaseInfoRsp();
  TConquerSetTargetCityReq::default_instance_ = new TConquerSetTargetCityReq();
  TConquerSetTargetCityRsp::default_instance_ = new TConquerSetTargetCityRsp();
  TConquerGetAllyInfoReq::default_instance_ = new TConquerGetAllyInfoReq();
  TConquerGetAllyInfoRsp::default_instance_ = new TConquerGetAllyInfoRsp();
  TConquerMoveReq::default_instance_ = new TConquerMoveReq();
  TConquerAttackReq::default_instance_ = new TConquerAttackReq();
  TConquerTouchReq::default_instance_ = new TConquerTouchReq();
  TConquerSetUserOptReq::default_instance_ = new TConquerSetUserOptReq();
  TConquerSetArmyOptReq::default_instance_ = new TConquerSetArmyOptReq();
  TConquerRankInfo::default_instance_ = new TConquerRankInfo();
  TConquerGetRankListReq::default_instance_ = new TConquerGetRankListReq();
  TConquerGetRankListRsp::default_instance_ = new TConquerGetRankListRsp();
  TConquerLevelInfo::default_instance_ = new TConquerLevelInfo();
  TConquerShopInfoRsp::default_instance_ = new TConquerShopInfoRsp();
  TConquerBaseInfoRsp::default_instance_ = new TConquerBaseInfoRsp();
  TConquerCityInfo::default_instance_->InitAsDefaultInstance();
  TConquerMapInfo::default_instance_->InitAsDefaultInstance();
  TConquerStageInfo::default_instance_->InitAsDefaultInstance();
  TConquerAllyInfo::default_instance_->InitAsDefaultInstance();
  TConquerUserInfo::default_instance_->InitAsDefaultInstance();
  TConquerGetServerTeamInfoRsp::default_instance_->InitAsDefaultInstance();
  TConquerGetBaseInfoRsp::default_instance_->InitAsDefaultInstance();
  TConquerSetTargetCityReq::default_instance_->InitAsDefaultInstance();
  TConquerSetTargetCityRsp::default_instance_->InitAsDefaultInstance();
  TConquerGetAllyInfoReq::default_instance_->InitAsDefaultInstance();
  TConquerGetAllyInfoRsp::default_instance_->InitAsDefaultInstance();
  TConquerMoveReq::default_instance_->InitAsDefaultInstance();
  TConquerAttackReq::default_instance_->InitAsDefaultInstance();
  TConquerTouchReq::default_instance_->InitAsDefaultInstance();
  TConquerSetUserOptReq::default_instance_->InitAsDefaultInstance();
  TConquerSetArmyOptReq::default_instance_->InitAsDefaultInstance();
  TConquerRankInfo::default_instance_->InitAsDefaultInstance();
  TConquerGetRankListReq::default_instance_->InitAsDefaultInstance();
  TConquerGetRankListRsp::default_instance_->InitAsDefaultInstance();
  TConquerLevelInfo::default_instance_->InitAsDefaultInstance();
  TConquerShopInfoRsp::default_instance_->InitAsDefaultInstance();
  TConquerBaseInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCrossConquer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCrossConquer_2eproto {
  StaticDescriptorInitializer_net_2fCrossConquer_2eproto() {
    protobuf_AddDesc_net_2fCrossConquer_2eproto();
  }
} static_descriptor_initializer_net_2fCrossConquer_2eproto_;
const ::google::protobuf::EnumDescriptor* EConquerStage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EConquerStage_descriptor_;
}
bool EConquerStage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EConquerAdjust_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EConquerAdjust_descriptor_;
}
bool EConquerAdjust_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerCityInfo::kCityIdFieldNumber;
const int TConquerCityInfo::kConquerAllyIdFieldNumber;
const int TConquerCityInfo::kConquerAllyNameFieldNumber;
const int TConquerCityInfo::kDefAllyIdFieldNumber;
const int TConquerCityInfo::kAtkAllyCntFieldNumber;
const int TConquerCityInfo::kFieldStageIDFieldNumber;
#endif  // !_MSC_VER

TConquerCityInfo::TConquerCityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerCityInfo)
}

void TConquerCityInfo::InitAsDefaultInstance() {
}

TConquerCityInfo::TConquerCityInfo(const TConquerCityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerCityInfo)
}

void TConquerCityInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cityid_ = 0u;
  conquerallyid_ = GOOGLE_ULONGLONG(0);
  conquerallyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defallyid_ = GOOGLE_ULONGLONG(0);
  atkallycnt_ = 0u;
  fieldstageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerCityInfo::~TConquerCityInfo() {
  // @@protoc_insertion_point(destructor:pb.TConquerCityInfo)
  SharedDtor();
}

void TConquerCityInfo::SharedDtor() {
  if (conquerallyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete conquerallyname_;
  }
  if (this != default_instance_) {
  }
}

void TConquerCityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerCityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerCityInfo_descriptor_;
}

const TConquerCityInfo& TConquerCityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerCityInfo* TConquerCityInfo::default_instance_ = NULL;

TConquerCityInfo* TConquerCityInfo::New() const {
  return new TConquerCityInfo;
}

void TConquerCityInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TConquerCityInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(cityid_, fieldstageid_);
    conquerallyid_ = GOOGLE_ULONGLONG(0);
    if (has_conquerallyname()) {
      if (conquerallyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        conquerallyname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerCityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerCityInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ConquerAllyId;
        break;
      }

      // optional uint64 ConquerAllyId = 2;
      case 2: {
        if (tag == 16) {
         parse_ConquerAllyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conquerallyid_)));
          set_has_conquerallyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ConquerAllyName;
        break;
      }

      // optional string ConquerAllyName = 3;
      case 3: {
        if (tag == 26) {
         parse_ConquerAllyName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conquerallyname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->conquerallyname().data(), this->conquerallyname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "conquerallyname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DefAllyId;
        break;
      }

      // optional uint64 DefAllyId = 4;
      case 4: {
        if (tag == 32) {
         parse_DefAllyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &defallyid_)));
          set_has_defallyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AtkAllyCnt;
        break;
      }

      // optional uint32 AtkAllyCnt = 5;
      case 5: {
        if (tag == 40) {
         parse_AtkAllyCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &atkallycnt_)));
          set_has_atkallycnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_FieldStageID;
        break;
      }

      // optional uint32 FieldStageID = 7;
      case 7: {
        if (tag == 56) {
         parse_FieldStageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fieldstageid_)));
          set_has_fieldstageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerCityInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerCityInfo)
  return false;
#undef DO_
}

void TConquerCityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerCityInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint64 ConquerAllyId = 2;
  if (has_conquerallyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->conquerallyid(), output);
  }

  // optional string ConquerAllyName = 3;
  if (has_conquerallyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conquerallyname().data(), this->conquerallyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "conquerallyname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->conquerallyname(), output);
  }

  // optional uint64 DefAllyId = 4;
  if (has_defallyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->defallyid(), output);
  }

  // optional uint32 AtkAllyCnt = 5;
  if (has_atkallycnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->atkallycnt(), output);
  }

  // optional uint32 FieldStageID = 7;
  if (has_fieldstageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->fieldstageid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerCityInfo)
}

::google::protobuf::uint8* TConquerCityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerCityInfo)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint64 ConquerAllyId = 2;
  if (has_conquerallyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->conquerallyid(), target);
  }

  // optional string ConquerAllyName = 3;
  if (has_conquerallyname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conquerallyname().data(), this->conquerallyname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "conquerallyname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->conquerallyname(), target);
  }

  // optional uint64 DefAllyId = 4;
  if (has_defallyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->defallyid(), target);
  }

  // optional uint32 AtkAllyCnt = 5;
  if (has_atkallycnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->atkallycnt(), target);
  }

  // optional uint32 FieldStageID = 7;
  if (has_fieldstageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->fieldstageid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerCityInfo)
  return target;
}

int TConquerCityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint64 ConquerAllyId = 2;
    if (has_conquerallyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conquerallyid());
    }

    // optional string ConquerAllyName = 3;
    if (has_conquerallyname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conquerallyname());
    }

    // optional uint64 DefAllyId = 4;
    if (has_defallyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->defallyid());
    }

    // optional uint32 AtkAllyCnt = 5;
    if (has_atkallycnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->atkallycnt());
    }

    // optional uint32 FieldStageID = 7;
    if (has_fieldstageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fieldstageid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerCityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerCityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerCityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerCityInfo::MergeFrom(const TConquerCityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_conquerallyid()) {
      set_conquerallyid(from.conquerallyid());
    }
    if (from.has_conquerallyname()) {
      set_conquerallyname(from.conquerallyname());
    }
    if (from.has_defallyid()) {
      set_defallyid(from.defallyid());
    }
    if (from.has_atkallycnt()) {
      set_atkallycnt(from.atkallycnt());
    }
    if (from.has_fieldstageid()) {
      set_fieldstageid(from.fieldstageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerCityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerCityInfo::CopyFrom(const TConquerCityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerCityInfo::IsInitialized() const {

  return true;
}

void TConquerCityInfo::Swap(TConquerCityInfo* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(conquerallyid_, other->conquerallyid_);
    std::swap(conquerallyname_, other->conquerallyname_);
    std::swap(defallyid_, other->defallyid_);
    std::swap(atkallycnt_, other->atkallycnt_);
    std::swap(fieldstageid_, other->fieldstageid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerCityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerCityInfo_descriptor_;
  metadata.reflection = TConquerCityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerMapInfo::kMapSeqIdFieldNumber;
const int TConquerMapInfo::kArrCityInfoFieldNumber;
#endif  // !_MSC_VER

TConquerMapInfo::TConquerMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerMapInfo)
}

void TConquerMapInfo::InitAsDefaultInstance() {
}

TConquerMapInfo::TConquerMapInfo(const TConquerMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerMapInfo)
}

void TConquerMapInfo::SharedCtor() {
  _cached_size_ = 0;
  mapseqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerMapInfo::~TConquerMapInfo() {
  // @@protoc_insertion_point(destructor:pb.TConquerMapInfo)
  SharedDtor();
}

void TConquerMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerMapInfo_descriptor_;
}

const TConquerMapInfo& TConquerMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerMapInfo* TConquerMapInfo::default_instance_ = NULL;

TConquerMapInfo* TConquerMapInfo::New() const {
  return new TConquerMapInfo;
}

void TConquerMapInfo::Clear() {
  mapseqid_ = 0u;
  arrcityinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerMapInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MapSeqId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapseqid_)));
          set_has_mapseqid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrCityInfo;
        break;
      }

      // repeated .pb.TConquerCityInfo ArrCityInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrCityInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrcityinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrCityInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerMapInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerMapInfo)
  return false;
#undef DO_
}

void TConquerMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerMapInfo)
  // optional uint32 MapSeqId = 1;
  if (has_mapseqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapseqid(), output);
  }

  // repeated .pb.TConquerCityInfo ArrCityInfo = 2;
  for (int i = 0; i < this->arrcityinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrcityinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerMapInfo)
}

::google::protobuf::uint8* TConquerMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerMapInfo)
  // optional uint32 MapSeqId = 1;
  if (has_mapseqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapseqid(), target);
  }

  // repeated .pb.TConquerCityInfo ArrCityInfo = 2;
  for (int i = 0; i < this->arrcityinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrcityinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerMapInfo)
  return target;
}

int TConquerMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MapSeqId = 1;
    if (has_mapseqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapseqid());
    }

  }
  // repeated .pb.TConquerCityInfo ArrCityInfo = 2;
  total_size += 1 * this->arrcityinfo_size();
  for (int i = 0; i < this->arrcityinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrcityinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerMapInfo::MergeFrom(const TConquerMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrcityinfo_.MergeFrom(from.arrcityinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapseqid()) {
      set_mapseqid(from.mapseqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerMapInfo::CopyFrom(const TConquerMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerMapInfo::IsInitialized() const {

  return true;
}

void TConquerMapInfo::Swap(TConquerMapInfo* other) {
  if (other != this) {
    std::swap(mapseqid_, other->mapseqid_);
    arrcityinfo_.Swap(&other->arrcityinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerMapInfo_descriptor_;
  metadata.reflection = TConquerMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerStageInfo::kCurStageFieldNumber;
const int TConquerStageInfo::kLockStageTimeFieldNumber;
const int TConquerStageInfo::kWarStageTimeFieldNumber;
const int TConquerStageInfo::kWarDurationFieldNumber;
#endif  // !_MSC_VER

TConquerStageInfo::TConquerStageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerStageInfo)
}

void TConquerStageInfo::InitAsDefaultInstance() {
}

TConquerStageInfo::TConquerStageInfo(const TConquerStageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerStageInfo)
}

void TConquerStageInfo::SharedCtor() {
  _cached_size_ = 0;
  curstage_ = 0;
  lockstagetime_ = GOOGLE_LONGLONG(0);
  warstagetime_ = GOOGLE_LONGLONG(0);
  warduration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerStageInfo::~TConquerStageInfo() {
  // @@protoc_insertion_point(destructor:pb.TConquerStageInfo)
  SharedDtor();
}

void TConquerStageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerStageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerStageInfo_descriptor_;
}

const TConquerStageInfo& TConquerStageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerStageInfo* TConquerStageInfo::default_instance_ = NULL;

TConquerStageInfo* TConquerStageInfo::New() const {
  return new TConquerStageInfo;
}

void TConquerStageInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TConquerStageInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(lockstagetime_, warstagetime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerStageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EConquerStage CurStage = 2;
      case 2: {
        if (tag == 16) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EConquerStage_IsValid(value)) {
            set_curstage(static_cast< ::pb::EConquerStage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LockStageTime;
        break;
      }

      // optional int64 LockStageTime = 3;
      case 3: {
        if (tag == 24) {
         parse_LockStageTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lockstagetime_)));
          set_has_lockstagetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_WarStageTime;
        break;
      }

      // optional int64 WarStageTime = 4;
      case 4: {
        if (tag == 32) {
         parse_WarStageTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &warstagetime_)));
          set_has_warstagetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_WarDuration;
        break;
      }

      // optional int32 WarDuration = 5;
      case 5: {
        if (tag == 40) {
         parse_WarDuration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warduration_)));
          set_has_warduration();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerStageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerStageInfo)
  return false;
#undef DO_
}

void TConquerStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerStageInfo)
  // optional .pb.EConquerStage CurStage = 2;
  if (has_curstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->curstage(), output);
  }

  // optional int64 LockStageTime = 3;
  if (has_lockstagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lockstagetime(), output);
  }

  // optional int64 WarStageTime = 4;
  if (has_warstagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->warstagetime(), output);
  }

  // optional int32 WarDuration = 5;
  if (has_warduration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->warduration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerStageInfo)
}

::google::protobuf::uint8* TConquerStageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerStageInfo)
  // optional .pb.EConquerStage CurStage = 2;
  if (has_curstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->curstage(), target);
  }

  // optional int64 LockStageTime = 3;
  if (has_lockstagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lockstagetime(), target);
  }

  // optional int64 WarStageTime = 4;
  if (has_warstagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->warstagetime(), target);
  }

  // optional int32 WarDuration = 5;
  if (has_warduration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->warduration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerStageInfo)
  return target;
}

int TConquerStageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EConquerStage CurStage = 2;
    if (has_curstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->curstage());
    }

    // optional int64 LockStageTime = 3;
    if (has_lockstagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lockstagetime());
    }

    // optional int64 WarStageTime = 4;
    if (has_warstagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->warstagetime());
    }

    // optional int32 WarDuration = 5;
    if (has_warduration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warduration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerStageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerStageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerStageInfo::MergeFrom(const TConquerStageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curstage()) {
      set_curstage(from.curstage());
    }
    if (from.has_lockstagetime()) {
      set_lockstagetime(from.lockstagetime());
    }
    if (from.has_warstagetime()) {
      set_warstagetime(from.warstagetime());
    }
    if (from.has_warduration()) {
      set_warduration(from.warduration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerStageInfo::CopyFrom(const TConquerStageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerStageInfo::IsInitialized() const {

  return true;
}

void TConquerStageInfo::Swap(TConquerStageInfo* other) {
  if (other != this) {
    std::swap(curstage_, other->curstage_);
    std::swap(lockstagetime_, other->lockstagetime_);
    std::swap(warstagetime_, other->warstagetime_);
    std::swap(warduration_, other->warduration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerStageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerStageInfo_descriptor_;
  metadata.reflection = TConquerStageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerAllyInfo::kConquerLevelFieldNumber;
const int TConquerAllyInfo::kAllyIdFieldNumber;
const int TConquerAllyInfo::kConquerCityIdFieldNumber;
const int TConquerAllyInfo::kTargetCityIdFieldNumber;
const int TConquerAllyInfo::kCurrentFieldIdFieldNumber;
const int TConquerAllyInfo::kAdjustResultFieldNumber;
#endif  // !_MSC_VER

TConquerAllyInfo::TConquerAllyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerAllyInfo)
}

void TConquerAllyInfo::InitAsDefaultInstance() {
}

TConquerAllyInfo::TConquerAllyInfo(const TConquerAllyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerAllyInfo)
}

void TConquerAllyInfo::SharedCtor() {
  _cached_size_ = 0;
  conquerlevel_ = 0u;
  allyid_ = GOOGLE_ULONGLONG(0);
  conquercityid_ = 0u;
  targetcityid_ = 0u;
  currentfieldid_ = 0u;
  adjustresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerAllyInfo::~TConquerAllyInfo() {
  // @@protoc_insertion_point(destructor:pb.TConquerAllyInfo)
  SharedDtor();
}

void TConquerAllyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerAllyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerAllyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerAllyInfo_descriptor_;
}

const TConquerAllyInfo& TConquerAllyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerAllyInfo* TConquerAllyInfo::default_instance_ = NULL;

TConquerAllyInfo* TConquerAllyInfo::New() const {
  return new TConquerAllyInfo;
}

void TConquerAllyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TConquerAllyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(allyid_, adjustresult_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerAllyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerAllyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ConquerLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conquerlevel_)));
          set_has_conquerlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AllyId;
        break;
      }

      // optional uint64 AllyId = 2;
      case 2: {
        if (tag == 16) {
         parse_AllyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &allyid_)));
          set_has_allyid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ConquerCityId;
        break;
      }

      // optional uint32 ConquerCityId = 3;
      case 3: {
        if (tag == 24) {
         parse_ConquerCityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conquercityid_)));
          set_has_conquercityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TargetCityId;
        break;
      }

      // optional uint32 TargetCityId = 4;
      case 4: {
        if (tag == 32) {
         parse_TargetCityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetcityid_)));
          set_has_targetcityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurrentFieldId;
        break;
      }

      // optional uint32 CurrentFieldId = 5;
      case 5: {
        if (tag == 40) {
         parse_CurrentFieldId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentfieldid_)));
          set_has_currentfieldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_AdjustResult;
        break;
      }

      // optional .pb.EConquerAdjust AdjustResult = 6;
      case 6: {
        if (tag == 48) {
         parse_AdjustResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EConquerAdjust_IsValid(value)) {
            set_adjustresult(static_cast< ::pb::EConquerAdjust >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerAllyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerAllyInfo)
  return false;
#undef DO_
}

void TConquerAllyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerAllyInfo)
  // optional uint32 ConquerLevel = 1;
  if (has_conquerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->conquerlevel(), output);
  }

  // optional uint64 AllyId = 2;
  if (has_allyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->allyid(), output);
  }

  // optional uint32 ConquerCityId = 3;
  if (has_conquercityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->conquercityid(), output);
  }

  // optional uint32 TargetCityId = 4;
  if (has_targetcityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->targetcityid(), output);
  }

  // optional uint32 CurrentFieldId = 5;
  if (has_currentfieldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->currentfieldid(), output);
  }

  // optional .pb.EConquerAdjust AdjustResult = 6;
  if (has_adjustresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->adjustresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerAllyInfo)
}

::google::protobuf::uint8* TConquerAllyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerAllyInfo)
  // optional uint32 ConquerLevel = 1;
  if (has_conquerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->conquerlevel(), target);
  }

  // optional uint64 AllyId = 2;
  if (has_allyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->allyid(), target);
  }

  // optional uint32 ConquerCityId = 3;
  if (has_conquercityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->conquercityid(), target);
  }

  // optional uint32 TargetCityId = 4;
  if (has_targetcityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->targetcityid(), target);
  }

  // optional uint32 CurrentFieldId = 5;
  if (has_currentfieldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->currentfieldid(), target);
  }

  // optional .pb.EConquerAdjust AdjustResult = 6;
  if (has_adjustresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->adjustresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerAllyInfo)
  return target;
}

int TConquerAllyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ConquerLevel = 1;
    if (has_conquerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conquerlevel());
    }

    // optional uint64 AllyId = 2;
    if (has_allyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->allyid());
    }

    // optional uint32 ConquerCityId = 3;
    if (has_conquercityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conquercityid());
    }

    // optional uint32 TargetCityId = 4;
    if (has_targetcityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetcityid());
    }

    // optional uint32 CurrentFieldId = 5;
    if (has_currentfieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentfieldid());
    }

    // optional .pb.EConquerAdjust AdjustResult = 6;
    if (has_adjustresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->adjustresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerAllyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerAllyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerAllyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerAllyInfo::MergeFrom(const TConquerAllyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conquerlevel()) {
      set_conquerlevel(from.conquerlevel());
    }
    if (from.has_allyid()) {
      set_allyid(from.allyid());
    }
    if (from.has_conquercityid()) {
      set_conquercityid(from.conquercityid());
    }
    if (from.has_targetcityid()) {
      set_targetcityid(from.targetcityid());
    }
    if (from.has_currentfieldid()) {
      set_currentfieldid(from.currentfieldid());
    }
    if (from.has_adjustresult()) {
      set_adjustresult(from.adjustresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerAllyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerAllyInfo::CopyFrom(const TConquerAllyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerAllyInfo::IsInitialized() const {

  return true;
}

void TConquerAllyInfo::Swap(TConquerAllyInfo* other) {
  if (other != this) {
    std::swap(conquerlevel_, other->conquerlevel_);
    std::swap(allyid_, other->allyid_);
    std::swap(conquercityid_, other->conquercityid_);
    std::swap(targetcityid_, other->targetcityid_);
    std::swap(currentfieldid_, other->currentfieldid_);
    std::swap(adjustresult_, other->adjustresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerAllyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerAllyInfo_descriptor_;
  metadata.reflection = TConquerAllyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerUserInfo::kUserIdFieldNumber;
const int TConquerUserInfo::kScoreFieldNumber;
#endif  // !_MSC_VER

TConquerUserInfo::TConquerUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerUserInfo)
}

void TConquerUserInfo::InitAsDefaultInstance() {
}

TConquerUserInfo::TConquerUserInfo(const TConquerUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerUserInfo)
}

void TConquerUserInfo::SharedCtor() {
  _cached_size_ = 0;
  userid_ = GOOGLE_ULONGLONG(0);
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerUserInfo::~TConquerUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TConquerUserInfo)
  SharedDtor();
}

void TConquerUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerUserInfo_descriptor_;
}

const TConquerUserInfo& TConquerUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerUserInfo* TConquerUserInfo::default_instance_ = NULL;

TConquerUserInfo* TConquerUserInfo::New() const {
  return new TConquerUserInfo;
}

void TConquerUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TConquerUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(userid_, score_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 UserId = 2;
      case 2: {
        if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 3;
      case 3: {
        if (tag == 24) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerUserInfo)
  return false;
#undef DO_
}

void TConquerUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerUserInfo)
  // optional uint64 UserId = 2;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->userid(), output);
  }

  // optional uint32 Score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerUserInfo)
}

::google::protobuf::uint8* TConquerUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerUserInfo)
  // optional uint64 UserId = 2;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->userid(), target);
  }

  // optional uint32 Score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerUserInfo)
  return target;
}

int TConquerUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 UserId = 2;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint32 Score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerUserInfo::MergeFrom(const TConquerUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerUserInfo::CopyFrom(const TConquerUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerUserInfo::IsInitialized() const {

  return true;
}

void TConquerUserInfo::Swap(TConquerUserInfo* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerUserInfo_descriptor_;
  metadata.reflection = TConquerUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerGetServerTeamInfoRsp::kServerTeamIdFieldNumber;
#endif  // !_MSC_VER

TConquerGetServerTeamInfoRsp::TConquerGetServerTeamInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerGetServerTeamInfoRsp)
}

void TConquerGetServerTeamInfoRsp::InitAsDefaultInstance() {
}

TConquerGetServerTeamInfoRsp::TConquerGetServerTeamInfoRsp(const TConquerGetServerTeamInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerGetServerTeamInfoRsp)
}

void TConquerGetServerTeamInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  serverteamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerGetServerTeamInfoRsp::~TConquerGetServerTeamInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TConquerGetServerTeamInfoRsp)
  SharedDtor();
}

void TConquerGetServerTeamInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerGetServerTeamInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerGetServerTeamInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerGetServerTeamInfoRsp_descriptor_;
}

const TConquerGetServerTeamInfoRsp& TConquerGetServerTeamInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerGetServerTeamInfoRsp* TConquerGetServerTeamInfoRsp::default_instance_ = NULL;

TConquerGetServerTeamInfoRsp* TConquerGetServerTeamInfoRsp::New() const {
  return new TConquerGetServerTeamInfoRsp;
}

void TConquerGetServerTeamInfoRsp::Clear() {
  serverteamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerGetServerTeamInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerGetServerTeamInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ServerTeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverteamid_)));
          set_has_serverteamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerGetServerTeamInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerGetServerTeamInfoRsp)
  return false;
#undef DO_
}

void TConquerGetServerTeamInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerGetServerTeamInfoRsp)
  // optional uint32 ServerTeamId = 1;
  if (has_serverteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->serverteamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerGetServerTeamInfoRsp)
}

::google::protobuf::uint8* TConquerGetServerTeamInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerGetServerTeamInfoRsp)
  // optional uint32 ServerTeamId = 1;
  if (has_serverteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->serverteamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerGetServerTeamInfoRsp)
  return target;
}

int TConquerGetServerTeamInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ServerTeamId = 1;
    if (has_serverteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverteamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerGetServerTeamInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerGetServerTeamInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerGetServerTeamInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerGetServerTeamInfoRsp::MergeFrom(const TConquerGetServerTeamInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverteamid()) {
      set_serverteamid(from.serverteamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerGetServerTeamInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerGetServerTeamInfoRsp::CopyFrom(const TConquerGetServerTeamInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerGetServerTeamInfoRsp::IsInitialized() const {

  return true;
}

void TConquerGetServerTeamInfoRsp::Swap(TConquerGetServerTeamInfoRsp* other) {
  if (other != this) {
    std::swap(serverteamid_, other->serverteamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerGetServerTeamInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerGetServerTeamInfoRsp_descriptor_;
  metadata.reflection = TConquerGetServerTeamInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerGetBaseInfoRsp::kOpenFieldNumber;
const int TConquerGetBaseInfoRsp::kAllyInfoFieldNumber;
const int TConquerGetBaseInfoRsp::kUserInfoFieldNumber;
#endif  // !_MSC_VER

TConquerGetBaseInfoRsp::TConquerGetBaseInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerGetBaseInfoRsp)
}

void TConquerGetBaseInfoRsp::InitAsDefaultInstance() {
  allyinfo_ = const_cast< ::pb::TConquerAllyInfo*>(&::pb::TConquerAllyInfo::default_instance());
  userinfo_ = const_cast< ::pb::TConquerUserInfo*>(&::pb::TConquerUserInfo::default_instance());
}

TConquerGetBaseInfoRsp::TConquerGetBaseInfoRsp(const TConquerGetBaseInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerGetBaseInfoRsp)
}

void TConquerGetBaseInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  open_ = false;
  allyinfo_ = NULL;
  userinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerGetBaseInfoRsp::~TConquerGetBaseInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TConquerGetBaseInfoRsp)
  SharedDtor();
}

void TConquerGetBaseInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete allyinfo_;
    delete userinfo_;
  }
}

void TConquerGetBaseInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerGetBaseInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerGetBaseInfoRsp_descriptor_;
}

const TConquerGetBaseInfoRsp& TConquerGetBaseInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerGetBaseInfoRsp* TConquerGetBaseInfoRsp::default_instance_ = NULL;

TConquerGetBaseInfoRsp* TConquerGetBaseInfoRsp::New() const {
  return new TConquerGetBaseInfoRsp;
}

void TConquerGetBaseInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    open_ = false;
    if (has_allyinfo()) {
      if (allyinfo_ != NULL) allyinfo_->::pb::TConquerAllyInfo::Clear();
    }
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TConquerUserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerGetBaseInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerGetBaseInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Open = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AllyInfo;
        break;
      }

      // optional .pb.TConquerAllyInfo AllyInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AllyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TConquerUserInfo UserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerGetBaseInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerGetBaseInfoRsp)
  return false;
#undef DO_
}

void TConquerGetBaseInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerGetBaseInfoRsp)
  // optional bool Open = 1;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->open(), output);
  }

  // optional .pb.TConquerAllyInfo AllyInfo = 2;
  if (has_allyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->allyinfo(), output);
  }

  // optional .pb.TConquerUserInfo UserInfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerGetBaseInfoRsp)
}

::google::protobuf::uint8* TConquerGetBaseInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerGetBaseInfoRsp)
  // optional bool Open = 1;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->open(), target);
  }

  // optional .pb.TConquerAllyInfo AllyInfo = 2;
  if (has_allyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->allyinfo(), target);
  }

  // optional .pb.TConquerUserInfo UserInfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerGetBaseInfoRsp)
  return target;
}

int TConquerGetBaseInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Open = 1;
    if (has_open()) {
      total_size += 1 + 1;
    }

    // optional .pb.TConquerAllyInfo AllyInfo = 2;
    if (has_allyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allyinfo());
    }

    // optional .pb.TConquerUserInfo UserInfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerGetBaseInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerGetBaseInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerGetBaseInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerGetBaseInfoRsp::MergeFrom(const TConquerGetBaseInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_allyinfo()) {
      mutable_allyinfo()->::pb::TConquerAllyInfo::MergeFrom(from.allyinfo());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TConquerUserInfo::MergeFrom(from.userinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerGetBaseInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerGetBaseInfoRsp::CopyFrom(const TConquerGetBaseInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerGetBaseInfoRsp::IsInitialized() const {

  return true;
}

void TConquerGetBaseInfoRsp::Swap(TConquerGetBaseInfoRsp* other) {
  if (other != this) {
    std::swap(open_, other->open_);
    std::swap(allyinfo_, other->allyinfo_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerGetBaseInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerGetBaseInfoRsp_descriptor_;
  metadata.reflection = TConquerGetBaseInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerSetTargetCityReq::kTargetCityIdFieldNumber;
const int TConquerSetTargetCityReq::kGuildIdFieldNumber;
const int TConquerSetTargetCityReq::kGuildPostFieldNumber;
#endif  // !_MSC_VER

TConquerSetTargetCityReq::TConquerSetTargetCityReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerSetTargetCityReq)
}

void TConquerSetTargetCityReq::InitAsDefaultInstance() {
}

TConquerSetTargetCityReq::TConquerSetTargetCityReq(const TConquerSetTargetCityReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerSetTargetCityReq)
}

void TConquerSetTargetCityReq::SharedCtor() {
  _cached_size_ = 0;
  targetcityid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildpost_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerSetTargetCityReq::~TConquerSetTargetCityReq() {
  // @@protoc_insertion_point(destructor:pb.TConquerSetTargetCityReq)
  SharedDtor();
}

void TConquerSetTargetCityReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerSetTargetCityReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerSetTargetCityReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerSetTargetCityReq_descriptor_;
}

const TConquerSetTargetCityReq& TConquerSetTargetCityReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerSetTargetCityReq* TConquerSetTargetCityReq::default_instance_ = NULL;

TConquerSetTargetCityReq* TConquerSetTargetCityReq::New() const {
  return new TConquerSetTargetCityReq;
}

void TConquerSetTargetCityReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TConquerSetTargetCityReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(guildid_, guildpost_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerSetTargetCityReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerSetTargetCityReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetCityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetcityid_)));
          set_has_targetcityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GuildId;
        break;
      }

      // optional uint64 GuildId = 2;
      case 2: {
        if (tag == 16) {
         parse_GuildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GuildPost;
        break;
      }

      // optional uint32 GuildPost = 3;
      case 3: {
        if (tag == 24) {
         parse_GuildPost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildpost_)));
          set_has_guildpost();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerSetTargetCityReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerSetTargetCityReq)
  return false;
#undef DO_
}

void TConquerSetTargetCityReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerSetTargetCityReq)
  // optional uint32 TargetCityId = 1;
  if (has_targetcityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetcityid(), output);
  }

  // optional uint64 GuildId = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // optional uint32 GuildPost = 3;
  if (has_guildpost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guildpost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerSetTargetCityReq)
}

::google::protobuf::uint8* TConquerSetTargetCityReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerSetTargetCityReq)
  // optional uint32 TargetCityId = 1;
  if (has_targetcityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetcityid(), target);
  }

  // optional uint64 GuildId = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // optional uint32 GuildPost = 3;
  if (has_guildpost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guildpost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerSetTargetCityReq)
  return target;
}

int TConquerSetTargetCityReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetCityId = 1;
    if (has_targetcityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetcityid());
    }

    // optional uint64 GuildId = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 GuildPost = 3;
    if (has_guildpost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildpost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerSetTargetCityReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerSetTargetCityReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerSetTargetCityReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerSetTargetCityReq::MergeFrom(const TConquerSetTargetCityReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetcityid()) {
      set_targetcityid(from.targetcityid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildpost()) {
      set_guildpost(from.guildpost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerSetTargetCityReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerSetTargetCityReq::CopyFrom(const TConquerSetTargetCityReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerSetTargetCityReq::IsInitialized() const {

  return true;
}

void TConquerSetTargetCityReq::Swap(TConquerSetTargetCityReq* other) {
  if (other != this) {
    std::swap(targetcityid_, other->targetcityid_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildpost_, other->guildpost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerSetTargetCityReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerSetTargetCityReq_descriptor_;
  metadata.reflection = TConquerSetTargetCityReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerSetTargetCityRsp::kTargetCityIdFieldNumber;
#endif  // !_MSC_VER

TConquerSetTargetCityRsp::TConquerSetTargetCityRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerSetTargetCityRsp)
}

void TConquerSetTargetCityRsp::InitAsDefaultInstance() {
}

TConquerSetTargetCityRsp::TConquerSetTargetCityRsp(const TConquerSetTargetCityRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerSetTargetCityRsp)
}

void TConquerSetTargetCityRsp::SharedCtor() {
  _cached_size_ = 0;
  targetcityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerSetTargetCityRsp::~TConquerSetTargetCityRsp() {
  // @@protoc_insertion_point(destructor:pb.TConquerSetTargetCityRsp)
  SharedDtor();
}

void TConquerSetTargetCityRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerSetTargetCityRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerSetTargetCityRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerSetTargetCityRsp_descriptor_;
}

const TConquerSetTargetCityRsp& TConquerSetTargetCityRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerSetTargetCityRsp* TConquerSetTargetCityRsp::default_instance_ = NULL;

TConquerSetTargetCityRsp* TConquerSetTargetCityRsp::New() const {
  return new TConquerSetTargetCityRsp;
}

void TConquerSetTargetCityRsp::Clear() {
  targetcityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerSetTargetCityRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerSetTargetCityRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetCityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetcityid_)));
          set_has_targetcityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerSetTargetCityRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerSetTargetCityRsp)
  return false;
#undef DO_
}

void TConquerSetTargetCityRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerSetTargetCityRsp)
  // optional uint32 TargetCityId = 1;
  if (has_targetcityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetcityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerSetTargetCityRsp)
}

::google::protobuf::uint8* TConquerSetTargetCityRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerSetTargetCityRsp)
  // optional uint32 TargetCityId = 1;
  if (has_targetcityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetcityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerSetTargetCityRsp)
  return target;
}

int TConquerSetTargetCityRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetCityId = 1;
    if (has_targetcityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetcityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerSetTargetCityRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerSetTargetCityRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerSetTargetCityRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerSetTargetCityRsp::MergeFrom(const TConquerSetTargetCityRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetcityid()) {
      set_targetcityid(from.targetcityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerSetTargetCityRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerSetTargetCityRsp::CopyFrom(const TConquerSetTargetCityRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerSetTargetCityRsp::IsInitialized() const {

  return true;
}

void TConquerSetTargetCityRsp::Swap(TConquerSetTargetCityRsp* other) {
  if (other != this) {
    std::swap(targetcityid_, other->targetcityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerSetTargetCityRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerSetTargetCityRsp_descriptor_;
  metadata.reflection = TConquerSetTargetCityRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerGetAllyInfoReq::kCityIdFieldNumber;
#endif  // !_MSC_VER

TConquerGetAllyInfoReq::TConquerGetAllyInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerGetAllyInfoReq)
}

void TConquerGetAllyInfoReq::InitAsDefaultInstance() {
}

TConquerGetAllyInfoReq::TConquerGetAllyInfoReq(const TConquerGetAllyInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerGetAllyInfoReq)
}

void TConquerGetAllyInfoReq::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerGetAllyInfoReq::~TConquerGetAllyInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TConquerGetAllyInfoReq)
  SharedDtor();
}

void TConquerGetAllyInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerGetAllyInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerGetAllyInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerGetAllyInfoReq_descriptor_;
}

const TConquerGetAllyInfoReq& TConquerGetAllyInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerGetAllyInfoReq* TConquerGetAllyInfoReq::default_instance_ = NULL;

TConquerGetAllyInfoReq* TConquerGetAllyInfoReq::New() const {
  return new TConquerGetAllyInfoReq;
}

void TConquerGetAllyInfoReq::Clear() {
  cityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerGetAllyInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerGetAllyInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerGetAllyInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerGetAllyInfoReq)
  return false;
#undef DO_
}

void TConquerGetAllyInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerGetAllyInfoReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerGetAllyInfoReq)
}

::google::protobuf::uint8* TConquerGetAllyInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerGetAllyInfoReq)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerGetAllyInfoReq)
  return target;
}

int TConquerGetAllyInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerGetAllyInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerGetAllyInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerGetAllyInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerGetAllyInfoReq::MergeFrom(const TConquerGetAllyInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerGetAllyInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerGetAllyInfoReq::CopyFrom(const TConquerGetAllyInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerGetAllyInfoReq::IsInitialized() const {

  return true;
}

void TConquerGetAllyInfoReq::Swap(TConquerGetAllyInfoReq* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerGetAllyInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerGetAllyInfoReq_descriptor_;
  metadata.reflection = TConquerGetAllyInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerGetAllyInfoRsp::kCityIdFieldNumber;
const int TConquerGetAllyInfoRsp::kDefAllyInfoFieldNumber;
const int TConquerGetAllyInfoRsp::kArrAtkAllyInfoFieldNumber;
#endif  // !_MSC_VER

TConquerGetAllyInfoRsp::TConquerGetAllyInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerGetAllyInfoRsp)
}

void TConquerGetAllyInfoRsp::InitAsDefaultInstance() {
  defallyinfo_ = const_cast< ::pb::TAllianceSimpleInfo*>(&::pb::TAllianceSimpleInfo::default_instance());
}

TConquerGetAllyInfoRsp::TConquerGetAllyInfoRsp(const TConquerGetAllyInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerGetAllyInfoRsp)
}

void TConquerGetAllyInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  cityid_ = 0u;
  defallyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerGetAllyInfoRsp::~TConquerGetAllyInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TConquerGetAllyInfoRsp)
  SharedDtor();
}

void TConquerGetAllyInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete defallyinfo_;
  }
}

void TConquerGetAllyInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerGetAllyInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerGetAllyInfoRsp_descriptor_;
}

const TConquerGetAllyInfoRsp& TConquerGetAllyInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerGetAllyInfoRsp* TConquerGetAllyInfoRsp::default_instance_ = NULL;

TConquerGetAllyInfoRsp* TConquerGetAllyInfoRsp::New() const {
  return new TConquerGetAllyInfoRsp;
}

void TConquerGetAllyInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cityid_ = 0u;
    if (has_defallyinfo()) {
      if (defallyinfo_ != NULL) defallyinfo_->::pb::TAllianceSimpleInfo::Clear();
    }
  }
  arratkallyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerGetAllyInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerGetAllyInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CityId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_DefAllyInfo;
        break;
      }

      // optional .pb.TAllianceSimpleInfo DefAllyInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_DefAllyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defallyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrAtkAllyInfo;
        break;
      }

      // repeated .pb.TAllianceSimpleInfo ArrAtkAllyInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrAtkAllyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arratkallyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrAtkAllyInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerGetAllyInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerGetAllyInfoRsp)
  return false;
#undef DO_
}

void TConquerGetAllyInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerGetAllyInfoRsp)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional .pb.TAllianceSimpleInfo DefAllyInfo = 2;
  if (has_defallyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->defallyinfo(), output);
  }

  // repeated .pb.TAllianceSimpleInfo ArrAtkAllyInfo = 3;
  for (int i = 0; i < this->arratkallyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arratkallyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerGetAllyInfoRsp)
}

::google::protobuf::uint8* TConquerGetAllyInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerGetAllyInfoRsp)
  // optional uint32 CityId = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional .pb.TAllianceSimpleInfo DefAllyInfo = 2;
  if (has_defallyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->defallyinfo(), target);
  }

  // repeated .pb.TAllianceSimpleInfo ArrAtkAllyInfo = 3;
  for (int i = 0; i < this->arratkallyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arratkallyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerGetAllyInfoRsp)
  return target;
}

int TConquerGetAllyInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CityId = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional .pb.TAllianceSimpleInfo DefAllyInfo = 2;
    if (has_defallyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->defallyinfo());
    }

  }
  // repeated .pb.TAllianceSimpleInfo ArrAtkAllyInfo = 3;
  total_size += 1 * this->arratkallyinfo_size();
  for (int i = 0; i < this->arratkallyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arratkallyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerGetAllyInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerGetAllyInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerGetAllyInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerGetAllyInfoRsp::MergeFrom(const TConquerGetAllyInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arratkallyinfo_.MergeFrom(from.arratkallyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_defallyinfo()) {
      mutable_defallyinfo()->::pb::TAllianceSimpleInfo::MergeFrom(from.defallyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerGetAllyInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerGetAllyInfoRsp::CopyFrom(const TConquerGetAllyInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerGetAllyInfoRsp::IsInitialized() const {

  return true;
}

void TConquerGetAllyInfoRsp::Swap(TConquerGetAllyInfoRsp* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(defallyinfo_, other->defallyinfo_);
    arratkallyinfo_.Swap(&other->arratkallyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerGetAllyInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerGetAllyInfoRsp_descriptor_;
  metadata.reflection = TConquerGetAllyInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerMoveReq::kTargetPosFieldNumber;
#endif  // !_MSC_VER

TConquerMoveReq::TConquerMoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerMoveReq)
}

void TConquerMoveReq::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

TConquerMoveReq::TConquerMoveReq(const TConquerMoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerMoveReq)
}

void TConquerMoveReq::SharedCtor() {
  _cached_size_ = 0;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerMoveReq::~TConquerMoveReq() {
  // @@protoc_insertion_point(destructor:pb.TConquerMoveReq)
  SharedDtor();
}

void TConquerMoveReq::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
  }
}

void TConquerMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerMoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerMoveReq_descriptor_;
}

const TConquerMoveReq& TConquerMoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerMoveReq* TConquerMoveReq::default_instance_ = NULL;

TConquerMoveReq* TConquerMoveReq::New() const {
  return new TConquerMoveReq;
}

void TConquerMoveReq::Clear() {
  if (has_targetpos()) {
    if (targetpos_ != NULL) targetpos_->::pb::PbVector2_Int::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerMoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PbVector2_Int TargetPos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerMoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerMoveReq)
  return false;
#undef DO_
}

void TConquerMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerMoveReq)
  // optional .pb.PbVector2_Int TargetPos = 1;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerMoveReq)
}

::google::protobuf::uint8* TConquerMoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerMoveReq)
  // optional .pb.PbVector2_Int TargetPos = 1;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerMoveReq)
  return target;
}

int TConquerMoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PbVector2_Int TargetPos = 1;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerMoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerMoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerMoveReq::MergeFrom(const TConquerMoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetpos()) {
      mutable_targetpos()->::pb::PbVector2_Int::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerMoveReq::CopyFrom(const TConquerMoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerMoveReq::IsInitialized() const {

  return true;
}

void TConquerMoveReq::Swap(TConquerMoveReq* other) {
  if (other != this) {
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerMoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerMoveReq_descriptor_;
  metadata.reflection = TConquerMoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerAttackReq::kTargetIdFieldNumber;
#endif  // !_MSC_VER

TConquerAttackReq::TConquerAttackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerAttackReq)
}

void TConquerAttackReq::InitAsDefaultInstance() {
}

TConquerAttackReq::TConquerAttackReq(const TConquerAttackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerAttackReq)
}

void TConquerAttackReq::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerAttackReq::~TConquerAttackReq() {
  // @@protoc_insertion_point(destructor:pb.TConquerAttackReq)
  SharedDtor();
}

void TConquerAttackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerAttackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerAttackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerAttackReq_descriptor_;
}

const TConquerAttackReq& TConquerAttackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerAttackReq* TConquerAttackReq::default_instance_ = NULL;

TConquerAttackReq* TConquerAttackReq::New() const {
  return new TConquerAttackReq;
}

void TConquerAttackReq::Clear() {
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerAttackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerAttackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TargetId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerAttackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerAttackReq)
  return false;
#undef DO_
}

void TConquerAttackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerAttackReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerAttackReq)
}

::google::protobuf::uint8* TConquerAttackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerAttackReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerAttackReq)
  return target;
}

int TConquerAttackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TargetId = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerAttackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerAttackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerAttackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerAttackReq::MergeFrom(const TConquerAttackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerAttackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerAttackReq::CopyFrom(const TConquerAttackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerAttackReq::IsInitialized() const {

  return true;
}

void TConquerAttackReq::Swap(TConquerAttackReq* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerAttackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerAttackReq_descriptor_;
  metadata.reflection = TConquerAttackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerTouchReq::kTargetBidFieldNumber;
#endif  // !_MSC_VER

TConquerTouchReq::TConquerTouchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerTouchReq)
}

void TConquerTouchReq::InitAsDefaultInstance() {
}

TConquerTouchReq::TConquerTouchReq(const TConquerTouchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerTouchReq)
}

void TConquerTouchReq::SharedCtor() {
  _cached_size_ = 0;
  targetbid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerTouchReq::~TConquerTouchReq() {
  // @@protoc_insertion_point(destructor:pb.TConquerTouchReq)
  SharedDtor();
}

void TConquerTouchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerTouchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerTouchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerTouchReq_descriptor_;
}

const TConquerTouchReq& TConquerTouchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerTouchReq* TConquerTouchReq::default_instance_ = NULL;

TConquerTouchReq* TConquerTouchReq::New() const {
  return new TConquerTouchReq;
}

void TConquerTouchReq::Clear() {
  targetbid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerTouchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerTouchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TargetBid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetbid_)));
          set_has_targetbid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerTouchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerTouchReq)
  return false;
#undef DO_
}

void TConquerTouchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerTouchReq)
  // optional uint64 TargetBid = 1;
  if (has_targetbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerTouchReq)
}

::google::protobuf::uint8* TConquerTouchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerTouchReq)
  // optional uint64 TargetBid = 1;
  if (has_targetbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerTouchReq)
  return target;
}

int TConquerTouchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TargetBid = 1;
    if (has_targetbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerTouchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerTouchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerTouchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerTouchReq::MergeFrom(const TConquerTouchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetbid()) {
      set_targetbid(from.targetbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerTouchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerTouchReq::CopyFrom(const TConquerTouchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerTouchReq::IsInitialized() const {

  return true;
}

void TConquerTouchReq::Swap(TConquerTouchReq* other) {
  if (other != this) {
    std::swap(targetbid_, other->targetbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerTouchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerTouchReq_descriptor_;
  metadata.reflection = TConquerTouchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerSetUserOptReq::kTargetIdFieldNumber;
const int TConquerSetUserOptReq::kAutoAttackFieldNumber;
#endif  // !_MSC_VER

TConquerSetUserOptReq::TConquerSetUserOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerSetUserOptReq)
}

void TConquerSetUserOptReq::InitAsDefaultInstance() {
}

TConquerSetUserOptReq::TConquerSetUserOptReq(const TConquerSetUserOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerSetUserOptReq)
}

void TConquerSetUserOptReq::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = GOOGLE_ULONGLONG(0);
  autoattack_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerSetUserOptReq::~TConquerSetUserOptReq() {
  // @@protoc_insertion_point(destructor:pb.TConquerSetUserOptReq)
  SharedDtor();
}

void TConquerSetUserOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerSetUserOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerSetUserOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerSetUserOptReq_descriptor_;
}

const TConquerSetUserOptReq& TConquerSetUserOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerSetUserOptReq* TConquerSetUserOptReq::default_instance_ = NULL;

TConquerSetUserOptReq* TConquerSetUserOptReq::New() const {
  return new TConquerSetUserOptReq;
}

void TConquerSetUserOptReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TConquerSetUserOptReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetid_, autoattack_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerSetUserOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerSetUserOptReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TargetId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AutoAttack;
        break;
      }

      // optional bool AutoAttack = 2;
      case 2: {
        if (tag == 16) {
         parse_AutoAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoattack_)));
          set_has_autoattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerSetUserOptReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerSetUserOptReq)
  return false;
#undef DO_
}

void TConquerSetUserOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerSetUserOptReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetid(), output);
  }

  // optional bool AutoAttack = 2;
  if (has_autoattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autoattack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerSetUserOptReq)
}

::google::protobuf::uint8* TConquerSetUserOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerSetUserOptReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetid(), target);
  }

  // optional bool AutoAttack = 2;
  if (has_autoattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autoattack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerSetUserOptReq)
  return target;
}

int TConquerSetUserOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TargetId = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional bool AutoAttack = 2;
    if (has_autoattack()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerSetUserOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerSetUserOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerSetUserOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerSetUserOptReq::MergeFrom(const TConquerSetUserOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_autoattack()) {
      set_autoattack(from.autoattack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerSetUserOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerSetUserOptReq::CopyFrom(const TConquerSetUserOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerSetUserOptReq::IsInitialized() const {

  return true;
}

void TConquerSetUserOptReq::Swap(TConquerSetUserOptReq* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(autoattack_, other->autoattack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerSetUserOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerSetUserOptReq_descriptor_;
  metadata.reflection = TConquerSetUserOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerSetArmyOptReq::kGoalIdFieldNumber;
#endif  // !_MSC_VER

TConquerSetArmyOptReq::TConquerSetArmyOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerSetArmyOptReq)
}

void TConquerSetArmyOptReq::InitAsDefaultInstance() {
}

TConquerSetArmyOptReq::TConquerSetArmyOptReq(const TConquerSetArmyOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerSetArmyOptReq)
}

void TConquerSetArmyOptReq::SharedCtor() {
  _cached_size_ = 0;
  goalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerSetArmyOptReq::~TConquerSetArmyOptReq() {
  // @@protoc_insertion_point(destructor:pb.TConquerSetArmyOptReq)
  SharedDtor();
}

void TConquerSetArmyOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerSetArmyOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerSetArmyOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerSetArmyOptReq_descriptor_;
}

const TConquerSetArmyOptReq& TConquerSetArmyOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerSetArmyOptReq* TConquerSetArmyOptReq::default_instance_ = NULL;

TConquerSetArmyOptReq* TConquerSetArmyOptReq::New() const {
  return new TConquerSetArmyOptReq;
}

void TConquerSetArmyOptReq::Clear() {
  goalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerSetArmyOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerSetArmyOptReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GoalId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goalid_)));
          set_has_goalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerSetArmyOptReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerSetArmyOptReq)
  return false;
#undef DO_
}

void TConquerSetArmyOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerSetArmyOptReq)
  // optional uint32 GoalId = 1;
  if (has_goalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerSetArmyOptReq)
}

::google::protobuf::uint8* TConquerSetArmyOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerSetArmyOptReq)
  // optional uint32 GoalId = 1;
  if (has_goalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerSetArmyOptReq)
  return target;
}

int TConquerSetArmyOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GoalId = 1;
    if (has_goalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerSetArmyOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerSetArmyOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerSetArmyOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerSetArmyOptReq::MergeFrom(const TConquerSetArmyOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goalid()) {
      set_goalid(from.goalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerSetArmyOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerSetArmyOptReq::CopyFrom(const TConquerSetArmyOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerSetArmyOptReq::IsInitialized() const {

  return true;
}

void TConquerSetArmyOptReq::Swap(TConquerSetArmyOptReq* other) {
  if (other != this) {
    std::swap(goalid_, other->goalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerSetArmyOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerSetArmyOptReq_descriptor_;
  metadata.reflection = TConquerSetArmyOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerRankInfo::kUidFieldNumber;
const int TConquerRankInfo::kUnameFieldNumber;
const int TConquerRankInfo::kImageHtidFieldNumber;
const int TConquerRankInfo::kImageFrameTidFieldNumber;
const int TConquerRankInfo::kTitleFieldNumber;
const int TConquerRankInfo::kRankFieldNumber;
const int TConquerRankInfo::kScoreFieldNumber;
const int TConquerRankInfo::kKillCntFieldNumber;
#endif  // !_MSC_VER

TConquerRankInfo::TConquerRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerRankInfo)
}

void TConquerRankInfo::InitAsDefaultInstance() {
}

TConquerRankInfo::TConquerRankInfo(const TConquerRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerRankInfo)
}

void TConquerRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagehtid_ = 0u;
  imageframetid_ = 0u;
  title_ = 0u;
  rank_ = 0u;
  score_ = 0u;
  killcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerRankInfo::~TConquerRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TConquerRankInfo)
  SharedDtor();
}

void TConquerRankInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TConquerRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerRankInfo_descriptor_;
}

const TConquerRankInfo& TConquerRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerRankInfo* TConquerRankInfo::default_instance_ = NULL;

TConquerRankInfo* TConquerRankInfo::New() const {
  return new TConquerRankInfo;
}

void TConquerRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TConquerRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(imagehtid_, killcnt_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ImageHtid;
        break;
      }

      // optional uint32 ImageHtid = 3;
      case 3: {
        if (tag == 24) {
         parse_ImageHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagehtid_)));
          set_has_imagehtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ImageFrameTid;
        break;
      }

      // optional uint32 ImageFrameTid = 4;
      case 4: {
        if (tag == 32) {
         parse_ImageFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imageframetid_)));
          set_has_imageframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Title;
        break;
      }

      // optional uint32 Title = 5;
      case 5: {
        if (tag == 40) {
         parse_Title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 10;
      case 10: {
        if (tag == 80) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 11;
      case 11: {
        if (tag == 88) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_KillCnt;
        break;
      }

      // optional uint32 KillCnt = 12;
      case 12: {
        if (tag == 96) {
         parse_KillCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcnt_)));
          set_has_killcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerRankInfo)
  return false;
#undef DO_
}

void TConquerRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerRankInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 ImageHtid = 3;
  if (has_imagehtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->imagehtid(), output);
  }

  // optional uint32 ImageFrameTid = 4;
  if (has_imageframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->imageframetid(), output);
  }

  // optional uint32 Title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->title(), output);
  }

  // optional uint32 Rank = 10;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rank(), output);
  }

  // optional uint32 Score = 11;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->score(), output);
  }

  // optional uint32 KillCnt = 12;
  if (has_killcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->killcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerRankInfo)
}

::google::protobuf::uint8* TConquerRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerRankInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional uint32 ImageHtid = 3;
  if (has_imagehtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->imagehtid(), target);
  }

  // optional uint32 ImageFrameTid = 4;
  if (has_imageframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->imageframetid(), target);
  }

  // optional uint32 Title = 5;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->title(), target);
  }

  // optional uint32 Rank = 10;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rank(), target);
  }

  // optional uint32 Score = 11;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->score(), target);
  }

  // optional uint32 KillCnt = 12;
  if (has_killcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->killcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerRankInfo)
  return target;
}

int TConquerRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 ImageHtid = 3;
    if (has_imagehtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagehtid());
    }

    // optional uint32 ImageFrameTid = 4;
    if (has_imageframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imageframetid());
    }

    // optional uint32 Title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint32 Rank = 10;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 Score = 11;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 KillCnt = 12;
    if (has_killcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerRankInfo::MergeFrom(const TConquerRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_imagehtid()) {
      set_imagehtid(from.imagehtid());
    }
    if (from.has_imageframetid()) {
      set_imageframetid(from.imageframetid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_killcnt()) {
      set_killcnt(from.killcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerRankInfo::CopyFrom(const TConquerRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerRankInfo::IsInitialized() const {

  return true;
}

void TConquerRankInfo::Swap(TConquerRankInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(imagehtid_, other->imagehtid_);
    std::swap(imageframetid_, other->imageframetid_);
    std::swap(title_, other->title_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(killcnt_, other->killcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerRankInfo_descriptor_;
  metadata.reflection = TConquerRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerGetRankListReq::kOffsetFieldNumber;
const int TConquerGetRankListReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TConquerGetRankListReq::TConquerGetRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerGetRankListReq)
}

void TConquerGetRankListReq::InitAsDefaultInstance() {
}

TConquerGetRankListReq::TConquerGetRankListReq(const TConquerGetRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerGetRankListReq)
}

void TConquerGetRankListReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerGetRankListReq::~TConquerGetRankListReq() {
  // @@protoc_insertion_point(destructor:pb.TConquerGetRankListReq)
  SharedDtor();
}

void TConquerGetRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerGetRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerGetRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerGetRankListReq_descriptor_;
}

const TConquerGetRankListReq& TConquerGetRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerGetRankListReq* TConquerGetRankListReq::default_instance_ = NULL;

TConquerGetRankListReq* TConquerGetRankListReq::New() const {
  return new TConquerGetRankListReq;
}

void TConquerGetRankListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TConquerGetRankListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerGetRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerGetRankListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerGetRankListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerGetRankListReq)
  return false;
#undef DO_
}

void TConquerGetRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerGetRankListReq)
}

::google::protobuf::uint8* TConquerGetRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerGetRankListReq)
  return target;
}

int TConquerGetRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerGetRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerGetRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerGetRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerGetRankListReq::MergeFrom(const TConquerGetRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerGetRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerGetRankListReq::CopyFrom(const TConquerGetRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerGetRankListReq::IsInitialized() const {

  return true;
}

void TConquerGetRankListReq::Swap(TConquerGetRankListReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerGetRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerGetRankListReq_descriptor_;
  metadata.reflection = TConquerGetRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerGetRankListRsp::kRankArrFieldNumber;
const int TConquerGetRankListRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TConquerGetRankListRsp::TConquerGetRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerGetRankListRsp)
}

void TConquerGetRankListRsp::InitAsDefaultInstance() {
}

TConquerGetRankListRsp::TConquerGetRankListRsp(const TConquerGetRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerGetRankListRsp)
}

void TConquerGetRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerGetRankListRsp::~TConquerGetRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TConquerGetRankListRsp)
  SharedDtor();
}

void TConquerGetRankListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerGetRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerGetRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerGetRankListRsp_descriptor_;
}

const TConquerGetRankListRsp& TConquerGetRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerGetRankListRsp* TConquerGetRankListRsp::default_instance_ = NULL;

TConquerGetRankListRsp* TConquerGetRankListRsp::New() const {
  return new TConquerGetRankListRsp;
}

void TConquerGetRankListRsp::Clear() {
  myrank_ = 0;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerGetRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerGetRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TConquerRankInfo RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerGetRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerGetRankListRsp)
  return false;
#undef DO_
}

void TConquerGetRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerGetRankListRsp)
  // repeated .pb.TConquerRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerGetRankListRsp)
}

::google::protobuf::uint8* TConquerGetRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerGetRankListRsp)
  // repeated .pb.TConquerRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerGetRankListRsp)
  return target;
}

int TConquerGetRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TConquerRankInfo RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerGetRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerGetRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerGetRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerGetRankListRsp::MergeFrom(const TConquerGetRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerGetRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerGetRankListRsp::CopyFrom(const TConquerGetRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerGetRankListRsp::IsInitialized() const {

  return true;
}

void TConquerGetRankListRsp::Swap(TConquerGetRankListRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerGetRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerGetRankListRsp_descriptor_;
  metadata.reflection = TConquerGetRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerLevelInfo::kConquerLevelFieldNumber;
const int TConquerLevelInfo::kDeadlineFieldNumber;
const int TConquerLevelInfo::kSeasonTimeFieldNumber;
#endif  // !_MSC_VER

TConquerLevelInfo::TConquerLevelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerLevelInfo)
}

void TConquerLevelInfo::InitAsDefaultInstance() {
}

TConquerLevelInfo::TConquerLevelInfo(const TConquerLevelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerLevelInfo)
}

void TConquerLevelInfo::SharedCtor() {
  _cached_size_ = 0;
  conquerlevel_ = 0u;
  deadline_ = GOOGLE_ULONGLONG(0);
  seasontime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerLevelInfo::~TConquerLevelInfo() {
  // @@protoc_insertion_point(destructor:pb.TConquerLevelInfo)
  SharedDtor();
}

void TConquerLevelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TConquerLevelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerLevelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerLevelInfo_descriptor_;
}

const TConquerLevelInfo& TConquerLevelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerLevelInfo* TConquerLevelInfo::default_instance_ = NULL;

TConquerLevelInfo* TConquerLevelInfo::New() const {
  return new TConquerLevelInfo;
}

void TConquerLevelInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TConquerLevelInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(deadline_, conquerlevel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerLevelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerLevelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ConquerLevel = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &conquerlevel_)));
          set_has_conquerlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Deadline;
        break;
      }

      // optional uint64 Deadline = 2;
      case 2: {
        if (tag == 16) {
         parse_Deadline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deadline_)));
          set_has_deadline();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SeasonTime;
        break;
      }

      // optional uint64 SeasonTime = 3;
      case 3: {
        if (tag == 24) {
         parse_SeasonTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &seasontime_)));
          set_has_seasontime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerLevelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerLevelInfo)
  return false;
#undef DO_
}

void TConquerLevelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerLevelInfo)
  // optional uint32 ConquerLevel = 1;
  if (has_conquerlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->conquerlevel(), output);
  }

  // optional uint64 Deadline = 2;
  if (has_deadline()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->deadline(), output);
  }

  // optional uint64 SeasonTime = 3;
  if (has_seasontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->seasontime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerLevelInfo)
}

::google::protobuf::uint8* TConquerLevelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerLevelInfo)
  // optional uint32 ConquerLevel = 1;
  if (has_conquerlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->conquerlevel(), target);
  }

  // optional uint64 Deadline = 2;
  if (has_deadline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->deadline(), target);
  }

  // optional uint64 SeasonTime = 3;
  if (has_seasontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->seasontime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerLevelInfo)
  return target;
}

int TConquerLevelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ConquerLevel = 1;
    if (has_conquerlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->conquerlevel());
    }

    // optional uint64 Deadline = 2;
    if (has_deadline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deadline());
    }

    // optional uint64 SeasonTime = 3;
    if (has_seasontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->seasontime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerLevelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerLevelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerLevelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerLevelInfo::MergeFrom(const TConquerLevelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_conquerlevel()) {
      set_conquerlevel(from.conquerlevel());
    }
    if (from.has_deadline()) {
      set_deadline(from.deadline());
    }
    if (from.has_seasontime()) {
      set_seasontime(from.seasontime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerLevelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerLevelInfo::CopyFrom(const TConquerLevelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerLevelInfo::IsInitialized() const {

  return true;
}

void TConquerLevelInfo::Swap(TConquerLevelInfo* other) {
  if (other != this) {
    std::swap(conquerlevel_, other->conquerlevel_);
    std::swap(deadline_, other->deadline_);
    std::swap(seasontime_, other->seasontime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerLevelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerLevelInfo_descriptor_;
  metadata.reflection = TConquerLevelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerShopInfoRsp::kSingleShopArrayFieldNumber;
const int TConquerShopInfoRsp::kConquerLevelInfoFieldNumber;
#endif  // !_MSC_VER

TConquerShopInfoRsp::TConquerShopInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerShopInfoRsp)
}

void TConquerShopInfoRsp::InitAsDefaultInstance() {
  conquerlevelinfo_ = const_cast< ::pb::TConquerLevelInfo*>(&::pb::TConquerLevelInfo::default_instance());
}

TConquerShopInfoRsp::TConquerShopInfoRsp(const TConquerShopInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerShopInfoRsp)
}

void TConquerShopInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  conquerlevelinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerShopInfoRsp::~TConquerShopInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TConquerShopInfoRsp)
  SharedDtor();
}

void TConquerShopInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete conquerlevelinfo_;
  }
}

void TConquerShopInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerShopInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerShopInfoRsp_descriptor_;
}

const TConquerShopInfoRsp& TConquerShopInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerShopInfoRsp* TConquerShopInfoRsp::default_instance_ = NULL;

TConquerShopInfoRsp* TConquerShopInfoRsp::New() const {
  return new TConquerShopInfoRsp;
}

void TConquerShopInfoRsp::Clear() {
  if (has_conquerlevelinfo()) {
    if (conquerlevelinfo_ != NULL) conquerlevelinfo_->::pb::TConquerLevelInfo::Clear();
  }
  singleshoparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerShopInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerShopInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TShopSingleShopInfo SingleShopArray = 1;
      case 1: {
        if (tag == 10) {
         parse_SingleShopArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singleshoparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_SingleShopArray;
        if (input->ExpectTag(18)) goto parse_ConquerLevelInfo;
        break;
      }

      // optional .pb.TConquerLevelInfo ConquerLevelInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ConquerLevelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_conquerlevelinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerShopInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerShopInfoRsp)
  return false;
#undef DO_
}

void TConquerShopInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerShopInfoRsp)
  // repeated .pb.TShopSingleShopInfo SingleShopArray = 1;
  for (int i = 0; i < this->singleshoparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->singleshoparray(i), output);
  }

  // optional .pb.TConquerLevelInfo ConquerLevelInfo = 2;
  if (has_conquerlevelinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->conquerlevelinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerShopInfoRsp)
}

::google::protobuf::uint8* TConquerShopInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerShopInfoRsp)
  // repeated .pb.TShopSingleShopInfo SingleShopArray = 1;
  for (int i = 0; i < this->singleshoparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->singleshoparray(i), target);
  }

  // optional .pb.TConquerLevelInfo ConquerLevelInfo = 2;
  if (has_conquerlevelinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->conquerlevelinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerShopInfoRsp)
  return target;
}

int TConquerShopInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TConquerLevelInfo ConquerLevelInfo = 2;
    if (has_conquerlevelinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->conquerlevelinfo());
    }

  }
  // repeated .pb.TShopSingleShopInfo SingleShopArray = 1;
  total_size += 1 * this->singleshoparray_size();
  for (int i = 0; i < this->singleshoparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->singleshoparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerShopInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerShopInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerShopInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerShopInfoRsp::MergeFrom(const TConquerShopInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  singleshoparray_.MergeFrom(from.singleshoparray_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_conquerlevelinfo()) {
      mutable_conquerlevelinfo()->::pb::TConquerLevelInfo::MergeFrom(from.conquerlevelinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerShopInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerShopInfoRsp::CopyFrom(const TConquerShopInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerShopInfoRsp::IsInitialized() const {

  return true;
}

void TConquerShopInfoRsp::Swap(TConquerShopInfoRsp* other) {
  if (other != this) {
    singleshoparray_.Swap(&other->singleshoparray_);
    std::swap(conquerlevelinfo_, other->conquerlevelinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerShopInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerShopInfoRsp_descriptor_;
  metadata.reflection = TConquerShopInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TConquerBaseInfoRsp::kStageInfoFieldNumber;
const int TConquerBaseInfoRsp::kMapInfoFieldNumber;
#endif  // !_MSC_VER

TConquerBaseInfoRsp::TConquerBaseInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TConquerBaseInfoRsp)
}

void TConquerBaseInfoRsp::InitAsDefaultInstance() {
  stageinfo_ = const_cast< ::pb::TConquerStageInfo*>(&::pb::TConquerStageInfo::default_instance());
  mapinfo_ = const_cast< ::pb::TConquerMapInfo*>(&::pb::TConquerMapInfo::default_instance());
}

TConquerBaseInfoRsp::TConquerBaseInfoRsp(const TConquerBaseInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TConquerBaseInfoRsp)
}

void TConquerBaseInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  stageinfo_ = NULL;
  mapinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TConquerBaseInfoRsp::~TConquerBaseInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TConquerBaseInfoRsp)
  SharedDtor();
}

void TConquerBaseInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete stageinfo_;
    delete mapinfo_;
  }
}

void TConquerBaseInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TConquerBaseInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TConquerBaseInfoRsp_descriptor_;
}

const TConquerBaseInfoRsp& TConquerBaseInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossConquer_2eproto();
  return *default_instance_;
}

TConquerBaseInfoRsp* TConquerBaseInfoRsp::default_instance_ = NULL;

TConquerBaseInfoRsp* TConquerBaseInfoRsp::New() const {
  return new TConquerBaseInfoRsp;
}

void TConquerBaseInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_stageinfo()) {
      if (stageinfo_ != NULL) stageinfo_->::pb::TConquerStageInfo::Clear();
    }
    if (has_mapinfo()) {
      if (mapinfo_ != NULL) mapinfo_->::pb::TConquerMapInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TConquerBaseInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TConquerBaseInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TConquerStageInfo StageInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MapInfo;
        break;
      }

      // optional .pb.TConquerMapInfo MapInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_MapInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TConquerBaseInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TConquerBaseInfoRsp)
  return false;
#undef DO_
}

void TConquerBaseInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TConquerBaseInfoRsp)
  // optional .pb.TConquerStageInfo StageInfo = 1;
  if (has_stageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stageinfo(), output);
  }

  // optional .pb.TConquerMapInfo MapInfo = 2;
  if (has_mapinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mapinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TConquerBaseInfoRsp)
}

::google::protobuf::uint8* TConquerBaseInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TConquerBaseInfoRsp)
  // optional .pb.TConquerStageInfo StageInfo = 1;
  if (has_stageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stageinfo(), target);
  }

  // optional .pb.TConquerMapInfo MapInfo = 2;
  if (has_mapinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mapinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TConquerBaseInfoRsp)
  return target;
}

int TConquerBaseInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TConquerStageInfo StageInfo = 1;
    if (has_stageinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stageinfo());
    }

    // optional .pb.TConquerMapInfo MapInfo = 2;
    if (has_mapinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TConquerBaseInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TConquerBaseInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TConquerBaseInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TConquerBaseInfoRsp::MergeFrom(const TConquerBaseInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageinfo()) {
      mutable_stageinfo()->::pb::TConquerStageInfo::MergeFrom(from.stageinfo());
    }
    if (from.has_mapinfo()) {
      mutable_mapinfo()->::pb::TConquerMapInfo::MergeFrom(from.mapinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TConquerBaseInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TConquerBaseInfoRsp::CopyFrom(const TConquerBaseInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TConquerBaseInfoRsp::IsInitialized() const {

  return true;
}

void TConquerBaseInfoRsp::Swap(TConquerBaseInfoRsp* other) {
  if (other != this) {
    std::swap(stageinfo_, other->stageinfo_);
    std::swap(mapinfo_, other->mapinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TConquerBaseInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TConquerBaseInfoRsp_descriptor_;
  metadata.reflection = TConquerBaseInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
