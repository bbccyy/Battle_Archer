// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GrowFund.proto

#ifndef PROTOBUF_net_2fGrowFund_2eproto__INCLUDED
#define PROTOBUF_net_2fGrowFund_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fGrowFund_2eproto();
void protobuf_AssignDesc_net_2fGrowFund_2eproto();
void protobuf_ShutdownFile_net_2fGrowFund_2eproto();

class TGrowFundGetInfoRsp;
class TGrowFundSingleInfo;
class TGrowFundReceiveRewardReq;
class TGrowFundBuyNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TGrowFundGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GrowFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGrowFundGetInfoRsp : public ::google::protobuf::Message {
 public:
  TGrowFundGetInfoRsp();
  virtual ~TGrowFundGetInfoRsp();

  TGrowFundGetInfoRsp(const TGrowFundGetInfoRsp& from);

  inline TGrowFundGetInfoRsp& operator=(const TGrowFundGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGrowFundGetInfoRsp& default_instance();

  void Swap(TGrowFundGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TGrowFundGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGrowFundGetInfoRsp& from);
  void MergeFrom(const TGrowFundGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TGrowFundSingleInfo GrowFundArr = 1;
  inline int growfundarr_size() const;
  inline void clear_growfundarr();
  static const int kGrowFundArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGrowFundGetInfoRsp</name>
  	<Function>
  		<name>growfundarr</name>
  		<replaceName>GrowFundArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_growfundarr</name>
  		<replaceName>GrowFundArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_growfundarr</name>
  		<replaceName>GrowFundArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_growfundarr</name>
  		<replaceName>GrowFundArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>growfundarr_size</name>
  		<replaceName>GrowFundArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TGrowFundSingleInfo& growfundarr(int index) const;
  inline ::pb::TGrowFundSingleInfo* mutable_growfundarr(int index);
  inline ::pb::TGrowFundSingleInfo* add_growfundarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TGrowFundSingleInfo >&
      growfundarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TGrowFundSingleInfo >*
      mutable_growfundarr();

  // @@protoc_insertion_point(class_scope:pb.TGrowFundGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TGrowFundSingleInfo > growfundarr_;
  friend void  protobuf_AddDesc_net_2fGrowFund_2eproto();
  friend void protobuf_AssignDesc_net_2fGrowFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fGrowFund_2eproto();

  void InitAsDefaultInstance();
  static TGrowFundGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGrowFundSingleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GrowFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGrowFundSingleInfo : public ::google::protobuf::Message {
 public:
  TGrowFundSingleInfo();
  virtual ~TGrowFundSingleInfo();

  TGrowFundSingleInfo(const TGrowFundSingleInfo& from);

  inline TGrowFundSingleInfo& operator=(const TGrowFundSingleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGrowFundSingleInfo& default_instance();

  void Swap(TGrowFundSingleInfo* other);

  // implements Message ----------------------------------------------

  TGrowFundSingleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGrowFundSingleInfo& from);
  void MergeFrom(const TGrowFundSingleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GrowFundId = 1;
  inline bool has_growfundid() const;
  inline void clear_growfundid();
  static const int kGrowFundIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGrowFundSingleInfo</name>
  	<Function>
  		<name>growfundid</name>
  		<replaceName>GrowFundId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_growfundid</name>
  		<replaceName>GrowFundId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_growfundid</name>
  		<replaceName>GrowFundId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 growfundid() const;
  inline void set_growfundid(::google::protobuf::uint32 value);

  // optional uint64 BuyTime = 2;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGrowFundSingleInfo</name>
  	<Function>
  		<name>buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buytime() const;
  inline void set_buytime(::google::protobuf::uint64 value);

  // repeated uint32 ReceivedRewardIndex = 3;
  inline int receivedrewardindex_size() const;
  inline void clear_receivedrewardindex();
  static const int kReceivedRewardIndexFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TGrowFundSingleInfo</name>
  	<Function>
  		<name>receivedrewardindex</name>
  		<replaceName>ReceivedRewardIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_receivedrewardindex</name>
  		<replaceName>ReceivedRewardIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_receivedrewardindex</name>
  		<replaceName>ReceivedRewardIndex</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivedrewardindex</name>
  		<replaceName>ReceivedRewardIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>receivedrewardindex_size</name>
  		<replaceName>ReceivedRewardIndex</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 receivedrewardindex(int index) const;
  inline void set_receivedrewardindex(int index, ::google::protobuf::uint32 value);
  inline void add_receivedrewardindex(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      receivedrewardindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_receivedrewardindex();

  // @@protoc_insertion_point(class_scope:pb.TGrowFundSingleInfo)
 private:
  inline void set_has_growfundid();
  inline void clear_has_growfundid();
  inline void set_has_buytime();
  inline void clear_has_buytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 buytime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > receivedrewardindex_;
  ::google::protobuf::uint32 growfundid_;
  friend void  protobuf_AddDesc_net_2fGrowFund_2eproto();
  friend void protobuf_AssignDesc_net_2fGrowFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fGrowFund_2eproto();

  void InitAsDefaultInstance();
  static TGrowFundSingleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGrowFundReceiveRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GrowFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGrowFundReceiveRewardReq : public ::google::protobuf::Message {
 public:
  TGrowFundReceiveRewardReq();
  virtual ~TGrowFundReceiveRewardReq();

  TGrowFundReceiveRewardReq(const TGrowFundReceiveRewardReq& from);

  inline TGrowFundReceiveRewardReq& operator=(const TGrowFundReceiveRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGrowFundReceiveRewardReq& default_instance();

  void Swap(TGrowFundReceiveRewardReq* other);

  // implements Message ----------------------------------------------

  TGrowFundReceiveRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGrowFundReceiveRewardReq& from);
  void MergeFrom(const TGrowFundReceiveRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GrowFundId = 1;
  inline bool has_growfundid() const;
  inline void clear_growfundid();
  static const int kGrowFundIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGrowFundReceiveRewardReq</name>
  	<Function>
  		<name>growfundid</name>
  		<replaceName>GrowFundId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_growfundid</name>
  		<replaceName>GrowFundId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_growfundid</name>
  		<replaceName>GrowFundId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 growfundid() const;
  inline void set_growfundid(::google::protobuf::uint32 value);

  // optional uint32 RewardIndex = 2;
  inline bool has_rewardindex() const;
  inline void clear_rewardindex();
  static const int kRewardIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGrowFundReceiveRewardReq</name>
  	<Function>
  		<name>rewardindex</name>
  		<replaceName>RewardIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardindex</name>
  		<replaceName>RewardIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardindex</name>
  		<replaceName>RewardIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardindex() const;
  inline void set_rewardindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TGrowFundReceiveRewardReq)
 private:
  inline void set_has_growfundid();
  inline void clear_has_growfundid();
  inline void set_has_rewardindex();
  inline void clear_has_rewardindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 growfundid_;
  ::google::protobuf::uint32 rewardindex_;
  friend void  protobuf_AddDesc_net_2fGrowFund_2eproto();
  friend void protobuf_AssignDesc_net_2fGrowFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fGrowFund_2eproto();

  void InitAsDefaultInstance();
  static TGrowFundReceiveRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TGrowFundBuyNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/GrowFund.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TGrowFundBuyNotify : public ::google::protobuf::Message {
 public:
  TGrowFundBuyNotify();
  virtual ~TGrowFundBuyNotify();

  TGrowFundBuyNotify(const TGrowFundBuyNotify& from);

  inline TGrowFundBuyNotify& operator=(const TGrowFundBuyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TGrowFundBuyNotify& default_instance();

  void Swap(TGrowFundBuyNotify* other);

  // implements Message ----------------------------------------------

  TGrowFundBuyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TGrowFundBuyNotify& from);
  void MergeFrom(const TGrowFundBuyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GrowFundId = 1;
  inline bool has_growfundid() const;
  inline void clear_growfundid();
  static const int kGrowFundIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TGrowFundBuyNotify</name>
  	<Function>
  		<name>growfundid</name>
  		<replaceName>GrowFundId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_growfundid</name>
  		<replaceName>GrowFundId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_growfundid</name>
  		<replaceName>GrowFundId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 growfundid() const;
  inline void set_growfundid(::google::protobuf::uint32 value);

  // optional uint64 BuyTime = 2;
  inline bool has_buytime() const;
  inline void clear_buytime();
  static const int kBuyTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TGrowFundBuyNotify</name>
  	<Function>
  		<name>buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buytime</name>
  		<replaceName>BuyTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buytime() const;
  inline void set_buytime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TGrowFundBuyNotify)
 private:
  inline void set_has_growfundid();
  inline void clear_has_growfundid();
  inline void set_has_buytime();
  inline void clear_has_buytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 buytime_;
  ::google::protobuf::uint32 growfundid_;
  friend void  protobuf_AddDesc_net_2fGrowFund_2eproto();
  friend void protobuf_AssignDesc_net_2fGrowFund_2eproto();
  friend void protobuf_ShutdownFile_net_2fGrowFund_2eproto();

  void InitAsDefaultInstance();
  static TGrowFundBuyNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TGrowFundGetInfoRsp

// repeated .pb.TGrowFundSingleInfo GrowFundArr = 1;
inline int TGrowFundGetInfoRsp::growfundarr_size() const {
  return growfundarr_.size();
}
inline void TGrowFundGetInfoRsp::clear_growfundarr() {
  growfundarr_.Clear();
}
inline const ::pb::TGrowFundSingleInfo& TGrowFundGetInfoRsp::growfundarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGrowFundGetInfoRsp.GrowFundArr)
  return growfundarr_.Get(index);
}
inline ::pb::TGrowFundSingleInfo* TGrowFundGetInfoRsp::mutable_growfundarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TGrowFundGetInfoRsp.GrowFundArr)
  return growfundarr_.Mutable(index);
}
inline ::pb::TGrowFundSingleInfo* TGrowFundGetInfoRsp::add_growfundarr() {
  // @@protoc_insertion_point(field_add:pb.TGrowFundGetInfoRsp.GrowFundArr)
  return growfundarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TGrowFundSingleInfo >&
TGrowFundGetInfoRsp::growfundarr() const {
  // @@protoc_insertion_point(field_list:pb.TGrowFundGetInfoRsp.GrowFundArr)
  return growfundarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TGrowFundSingleInfo >*
TGrowFundGetInfoRsp::mutable_growfundarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGrowFundGetInfoRsp.GrowFundArr)
  return &growfundarr_;
}

// -------------------------------------------------------------------

// TGrowFundSingleInfo

// optional uint32 GrowFundId = 1;
inline bool TGrowFundSingleInfo::has_growfundid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGrowFundSingleInfo::set_has_growfundid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGrowFundSingleInfo::clear_has_growfundid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGrowFundSingleInfo::clear_growfundid() {
  growfundid_ = 0u;
  clear_has_growfundid();
}
inline ::google::protobuf::uint32 TGrowFundSingleInfo::growfundid() const {
  // @@protoc_insertion_point(field_get:pb.TGrowFundSingleInfo.GrowFundId)
  return growfundid_;
}
inline void TGrowFundSingleInfo::set_growfundid(::google::protobuf::uint32 value) {
  set_has_growfundid();
  growfundid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGrowFundSingleInfo.GrowFundId)
}

// optional uint64 BuyTime = 2;
inline bool TGrowFundSingleInfo::has_buytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGrowFundSingleInfo::set_has_buytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGrowFundSingleInfo::clear_has_buytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGrowFundSingleInfo::clear_buytime() {
  buytime_ = GOOGLE_ULONGLONG(0);
  clear_has_buytime();
}
inline ::google::protobuf::uint64 TGrowFundSingleInfo::buytime() const {
  // @@protoc_insertion_point(field_get:pb.TGrowFundSingleInfo.BuyTime)
  return buytime_;
}
inline void TGrowFundSingleInfo::set_buytime(::google::protobuf::uint64 value) {
  set_has_buytime();
  buytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGrowFundSingleInfo.BuyTime)
}

// repeated uint32 ReceivedRewardIndex = 3;
inline int TGrowFundSingleInfo::receivedrewardindex_size() const {
  return receivedrewardindex_.size();
}
inline void TGrowFundSingleInfo::clear_receivedrewardindex() {
  receivedrewardindex_.Clear();
}
inline ::google::protobuf::uint32 TGrowFundSingleInfo::receivedrewardindex(int index) const {
  // @@protoc_insertion_point(field_get:pb.TGrowFundSingleInfo.ReceivedRewardIndex)
  return receivedrewardindex_.Get(index);
}
inline void TGrowFundSingleInfo::set_receivedrewardindex(int index, ::google::protobuf::uint32 value) {
  receivedrewardindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TGrowFundSingleInfo.ReceivedRewardIndex)
}
inline void TGrowFundSingleInfo::add_receivedrewardindex(::google::protobuf::uint32 value) {
  receivedrewardindex_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TGrowFundSingleInfo.ReceivedRewardIndex)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TGrowFundSingleInfo::receivedrewardindex() const {
  // @@protoc_insertion_point(field_list:pb.TGrowFundSingleInfo.ReceivedRewardIndex)
  return receivedrewardindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TGrowFundSingleInfo::mutable_receivedrewardindex() {
  // @@protoc_insertion_point(field_mutable_list:pb.TGrowFundSingleInfo.ReceivedRewardIndex)
  return &receivedrewardindex_;
}

// -------------------------------------------------------------------

// TGrowFundReceiveRewardReq

// optional uint32 GrowFundId = 1;
inline bool TGrowFundReceiveRewardReq::has_growfundid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGrowFundReceiveRewardReq::set_has_growfundid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGrowFundReceiveRewardReq::clear_has_growfundid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGrowFundReceiveRewardReq::clear_growfundid() {
  growfundid_ = 0u;
  clear_has_growfundid();
}
inline ::google::protobuf::uint32 TGrowFundReceiveRewardReq::growfundid() const {
  // @@protoc_insertion_point(field_get:pb.TGrowFundReceiveRewardReq.GrowFundId)
  return growfundid_;
}
inline void TGrowFundReceiveRewardReq::set_growfundid(::google::protobuf::uint32 value) {
  set_has_growfundid();
  growfundid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGrowFundReceiveRewardReq.GrowFundId)
}

// optional uint32 RewardIndex = 2;
inline bool TGrowFundReceiveRewardReq::has_rewardindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGrowFundReceiveRewardReq::set_has_rewardindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGrowFundReceiveRewardReq::clear_has_rewardindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGrowFundReceiveRewardReq::clear_rewardindex() {
  rewardindex_ = 0u;
  clear_has_rewardindex();
}
inline ::google::protobuf::uint32 TGrowFundReceiveRewardReq::rewardindex() const {
  // @@protoc_insertion_point(field_get:pb.TGrowFundReceiveRewardReq.RewardIndex)
  return rewardindex_;
}
inline void TGrowFundReceiveRewardReq::set_rewardindex(::google::protobuf::uint32 value) {
  set_has_rewardindex();
  rewardindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TGrowFundReceiveRewardReq.RewardIndex)
}

// -------------------------------------------------------------------

// TGrowFundBuyNotify

// optional uint32 GrowFundId = 1;
inline bool TGrowFundBuyNotify::has_growfundid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TGrowFundBuyNotify::set_has_growfundid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TGrowFundBuyNotify::clear_has_growfundid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TGrowFundBuyNotify::clear_growfundid() {
  growfundid_ = 0u;
  clear_has_growfundid();
}
inline ::google::protobuf::uint32 TGrowFundBuyNotify::growfundid() const {
  // @@protoc_insertion_point(field_get:pb.TGrowFundBuyNotify.GrowFundId)
  return growfundid_;
}
inline void TGrowFundBuyNotify::set_growfundid(::google::protobuf::uint32 value) {
  set_has_growfundid();
  growfundid_ = value;
  // @@protoc_insertion_point(field_set:pb.TGrowFundBuyNotify.GrowFundId)
}

// optional uint64 BuyTime = 2;
inline bool TGrowFundBuyNotify::has_buytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TGrowFundBuyNotify::set_has_buytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TGrowFundBuyNotify::clear_has_buytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TGrowFundBuyNotify::clear_buytime() {
  buytime_ = GOOGLE_ULONGLONG(0);
  clear_has_buytime();
}
inline ::google::protobuf::uint64 TGrowFundBuyNotify::buytime() const {
  // @@protoc_insertion_point(field_get:pb.TGrowFundBuyNotify.BuyTime)
  return buytime_;
}
inline void TGrowFundBuyNotify::set_buytime(::google::protobuf::uint64 value) {
  set_has_buytime();
  buytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TGrowFundBuyNotify.BuyTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fGrowFund_2eproto__INCLUDED
