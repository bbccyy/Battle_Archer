// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/AdventureBase.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/AdventureBase.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TAdventureUserSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureUserSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TUserInfoWithPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TUserInfoWithPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureMapStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureMapStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureMapList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureMapList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventLevelExpNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventLevelExpNum_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureTeamExtraReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureTeamExtraReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureBusinessMan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureBusinessMan_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureMonsterStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureMonsterStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureMonsterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InteractItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InteractItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureEventRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureEventRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventurePassBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventurePassBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureGetTeamRankUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureGetTeamRankUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TAdventureBattleMonsterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TAdventureBattleMonsterInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EMapStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMapUserStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdvantureRecordType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMapType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamChangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdventureTeamStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdventureGetTeamType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdventurePosChangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdventureSendToMateRetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdventureRollRewardRetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdventureStartBattleRetCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdventureType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamStartPlayErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETeamMode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAdventureRefreshMapCostType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fAdventureBase_2eproto() {
  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/AdventureBase.proto");
  GOOGLE_CHECK(file != NULL);
  TAdventureUserSimpleInfo_descriptor_ = file->message_type(0);
  static const int TAdventureUserSimpleInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, playerimageframetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, curmount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, masterhtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, title_),
  };
  TAdventureUserSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureUserSimpleInfo_descriptor_,
      TAdventureUserSimpleInfo::default_instance_,
      TAdventureUserSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureUserSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureUserSimpleInfo));
  TUserInfoWithPos_descriptor_ = file->message_type(1);
  static const int TUserInfoWithPos_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfoWithPos, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfoWithPos, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfoWithPos, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfoWithPos, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfoWithPos, teammode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfoWithPos, userstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfoWithPos, battleobjectindex_),
  };
  TUserInfoWithPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TUserInfoWithPos_descriptor_,
      TUserInfoWithPos::default_instance_,
      TUserInfoWithPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfoWithPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TUserInfoWithPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TUserInfoWithPos));
  TAdventureTeamRecord_descriptor_ = file->message_type(2);
  static const int TAdventureTeamRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamRecord, recordtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamRecord, paramarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamRecord, rewardarr_),
  };
  TAdventureTeamRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamRecord_descriptor_,
      TAdventureTeamRecord::default_instance_,
      TAdventureTeamRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamRecord));
  TAdventureMapStatus_descriptor_ = file->message_type(3);
  static const int TAdventureMapStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMapStatus, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMapStatus, mapentryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMapStatus, status_),
  };
  TAdventureMapStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureMapStatus_descriptor_,
      TAdventureMapStatus::default_instance_,
      TAdventureMapStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMapStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMapStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureMapStatus));
  TAdventureMapList_descriptor_ = file->message_type(4);
  static const int TAdventureMapList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMapList, maparray_),
  };
  TAdventureMapList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureMapList_descriptor_,
      TAdventureMapList::default_instance_,
      TAdventureMapList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMapList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMapList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureMapList));
  TAdventLevelExpNum_descriptor_ = file->message_type(5);
  static const int TAdventLevelExpNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventLevelExpNum, adventurelevelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventLevelExpNum, expnum_),
  };
  TAdventLevelExpNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventLevelExpNum_descriptor_,
      TAdventLevelExpNum::default_instance_,
      TAdventLevelExpNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventLevelExpNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventLevelExpNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventLevelExpNum));
  TAdventureTeamExtraReward_descriptor_ = file->message_type(6);
  static const int TAdventureTeamExtraReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExtraReward, rewarduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExtraReward, rewardinfo_),
  };
  TAdventureTeamExtraReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureTeamExtraReward_descriptor_,
      TAdventureTeamExtraReward::default_instance_,
      TAdventureTeamExtraReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExtraReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureTeamExtraReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureTeamExtraReward));
  TAdventureGoods_descriptor_ = file->message_type(7);
  static const int TAdventureGoods_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGoods, goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGoods, boughtnum_),
  };
  TAdventureGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGoods_descriptor_,
      TAdventureGoods::default_instance_,
      TAdventureGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGoods));
  TAdventureBusinessMan_descriptor_ = file->message_type(8);
  static const int TAdventureBusinessMan_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBusinessMan, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBusinessMan, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBusinessMan, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBusinessMan, goodsarray_),
  };
  TAdventureBusinessMan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureBusinessMan_descriptor_,
      TAdventureBusinessMan::default_instance_,
      TAdventureBusinessMan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBusinessMan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBusinessMan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureBusinessMan));
  TAdventureMonsterStatus_descriptor_ = file->message_type(9);
  static const int TAdventureMonsterStatus_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterStatus, monsterpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterStatus, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterStatus, currage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterStatus, maxhp_),
  };
  TAdventureMonsterStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureMonsterStatus_descriptor_,
      TAdventureMonsterStatus::default_instance_,
      TAdventureMonsterStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureMonsterStatus));
  TAdventureMonsterInfo_descriptor_ = file->message_type(10);
  static const int TAdventureMonsterInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterInfo, layerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterInfo, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterInfo, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterInfo, battleinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterInfo, curtotalhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterInfo, maxtotalhp_),
  };
  TAdventureMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureMonsterInfo_descriptor_,
      TAdventureMonsterInfo::default_instance_,
      TAdventureMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureMonsterInfo));
  InteractItemInfo_descriptor_ = file->message_type(11);
  static const int InteractItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractItemInfo, interactitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractItemInfo, iteminact_),
  };
  InteractItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InteractItemInfo_descriptor_,
      InteractItemInfo::default_instance_,
      InteractItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InteractItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InteractItemInfo));
  TAdventureEventRet_descriptor_ = file->message_type(12);
  static const int TAdventureEventRet_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventRet, talkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventRet, behavior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventRet, interactitemarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventRet, answerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventRet, answerstarttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventRet, battleinfoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventRet, bosslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventRet, armyfightforce_),
  };
  TAdventureEventRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureEventRet_descriptor_,
      TAdventureEventRet::default_instance_,
      TAdventureEventRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureEventRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureEventRet));
  TAdventureAttr_descriptor_ = file->message_type(13);
  static const int TAdventureAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAttr, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAttr, attrnum_),
  };
  TAdventureAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureAttr_descriptor_,
      TAdventureAttr::default_instance_,
      TAdventureAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureAttr));
  TAdventureBuff_descriptor_ = file->message_type(14);
  static const int TAdventureBuff_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuff, bufftype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuff, attrarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuff, hid_),
  };
  TAdventureBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureBuff_descriptor_,
      TAdventureBuff::default_instance_,
      TAdventureBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureBuff));
  TAdventurePassBlock_descriptor_ = file->message_type(15);
  static const int TAdventurePassBlock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePassBlock, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePassBlock, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePassBlock, layeridx_),
  };
  TAdventurePassBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventurePassBlock_descriptor_,
      TAdventurePassBlock::default_instance_,
      TAdventurePassBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePassBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventurePassBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventurePassBlock));
  TAdventureGetTeamRankUserInfo_descriptor_ = file->message_type(16);
  static const int TAdventureGetTeamRankUserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamRankUserInfo, memberuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamRankUserInfo, damagevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamRankUserInfo, doeventnum_),
  };
  TAdventureGetTeamRankUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureGetTeamRankUserInfo_descriptor_,
      TAdventureGetTeamRankUserInfo::default_instance_,
      TAdventureGetTeamRankUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamRankUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureGetTeamRankUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureGetTeamRankUserInfo));
  TAdventureBattleMonsterInfo_descriptor_ = file->message_type(17);
  static const int TAdventureBattleMonsterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBattleMonsterInfo, screenindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBattleMonsterInfo, monsterarr_),
  };
  TAdventureBattleMonsterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TAdventureBattleMonsterInfo_descriptor_,
      TAdventureBattleMonsterInfo::default_instance_,
      TAdventureBattleMonsterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBattleMonsterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TAdventureBattleMonsterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TAdventureBattleMonsterInfo));
  EMapStatus_descriptor_ = file->enum_type(0);
  EMapUserStatus_descriptor_ = file->enum_type(1);
  EAdvantureRecordType_descriptor_ = file->enum_type(2);
  EMapType_descriptor_ = file->enum_type(3);
  ETeamChangeType_descriptor_ = file->enum_type(4);
  EAdventureTeamStatus_descriptor_ = file->enum_type(5);
  EAdventureGetTeamType_descriptor_ = file->enum_type(6);
  EAdventurePosChangeType_descriptor_ = file->enum_type(7);
  EAdventureSendToMateRetCode_descriptor_ = file->enum_type(8);
  EAdventureRollRewardRetCode_descriptor_ = file->enum_type(9);
  EAdventureStartBattleRetCode_descriptor_ = file->enum_type(10);
  EAdventureType_descriptor_ = file->enum_type(11);
  ETeamStartPlayErrorCode_descriptor_ = file->enum_type(12);
  ETeamMode_descriptor_ = file->enum_type(13);
  EAdventureRefreshMapCostType_descriptor_ = file->enum_type(14);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fAdventureBase_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureUserSimpleInfo_descriptor_, &TAdventureUserSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TUserInfoWithPos_descriptor_, &TUserInfoWithPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamRecord_descriptor_, &TAdventureTeamRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureMapStatus_descriptor_, &TAdventureMapStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureMapList_descriptor_, &TAdventureMapList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventLevelExpNum_descriptor_, &TAdventLevelExpNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureTeamExtraReward_descriptor_, &TAdventureTeamExtraReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGoods_descriptor_, &TAdventureGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureBusinessMan_descriptor_, &TAdventureBusinessMan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureMonsterStatus_descriptor_, &TAdventureMonsterStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureMonsterInfo_descriptor_, &TAdventureMonsterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InteractItemInfo_descriptor_, &InteractItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureEventRet_descriptor_, &TAdventureEventRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureAttr_descriptor_, &TAdventureAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureBuff_descriptor_, &TAdventureBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventurePassBlock_descriptor_, &TAdventurePassBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureGetTeamRankUserInfo_descriptor_, &TAdventureGetTeamRankUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TAdventureBattleMonsterInfo_descriptor_, &TAdventureBattleMonsterInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fAdventureBase_2eproto() {
  delete TAdventureUserSimpleInfo::default_instance_;
  delete TAdventureUserSimpleInfo_reflection_;
  delete TUserInfoWithPos::default_instance_;
  delete TUserInfoWithPos_reflection_;
  delete TAdventureTeamRecord::default_instance_;
  delete TAdventureTeamRecord_reflection_;
  delete TAdventureMapStatus::default_instance_;
  delete TAdventureMapStatus_reflection_;
  delete TAdventureMapList::default_instance_;
  delete TAdventureMapList_reflection_;
  delete TAdventLevelExpNum::default_instance_;
  delete TAdventLevelExpNum_reflection_;
  delete TAdventureTeamExtraReward::default_instance_;
  delete TAdventureTeamExtraReward_reflection_;
  delete TAdventureGoods::default_instance_;
  delete TAdventureGoods_reflection_;
  delete TAdventureBusinessMan::default_instance_;
  delete TAdventureBusinessMan_reflection_;
  delete TAdventureMonsterStatus::default_instance_;
  delete TAdventureMonsterStatus_reflection_;
  delete TAdventureMonsterInfo::default_instance_;
  delete TAdventureMonsterInfo_reflection_;
  delete InteractItemInfo::default_instance_;
  delete InteractItemInfo_reflection_;
  delete TAdventureEventRet::default_instance_;
  delete TAdventureEventRet_reflection_;
  delete TAdventureAttr::default_instance_;
  delete TAdventureAttr_reflection_;
  delete TAdventureBuff::default_instance_;
  delete TAdventureBuff_reflection_;
  delete TAdventurePassBlock::default_instance_;
  delete TAdventurePassBlock_reflection_;
  delete TAdventureGetTeamRankUserInfo::default_instance_;
  delete TAdventureGetTeamRankUserInfo_reflection_;
  delete TAdventureBattleMonsterInfo::default_instance_;
  delete TAdventureBattleMonsterInfo_reflection_;
}

void protobuf_AddDesc_net_2fAdventureBase_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_module_2fAdventureMap_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027net/AdventureBase.proto\022\002pb\032\026net/Commo"
    "nReward.proto\032\031module/AdventureMap.proto"
    "\"\201\002\n\030TAdventureUserSimpleInfo\022\013\n\003Uid\030\001 \001"
    "(\004\022\020\n\010ServerId\030\002 \001(\t\022\r\n\005Uname\030\003 \001(\t\022\014\n\004H"
    "tid\030\004 \001(\r\022\r\n\005Level\030\005 \001(\r\022\020\n\010VipLevel\030\006 \001"
    "(\r\022\022\n\nFightForce\030\007 \001(\004\022\033\n\023PlayerImageFra"
    "meTid\030\010 \001(\r\022\021\n\tGuildName\030\t \001(\t\022\020\n\010CurMou"
    "nt\030\n \001(\r\022\022\n\nMasterHtid\030\013 \001(\r\022\017\n\007GuildId\030"
    "\014 \001(\004\022\r\n\005Title\030\r \001(\r\"\263\001\n\020TUserInfoWithPo"
    "s\022\013\n\003Uid\030\001 \001(\004\022\022\n\nLayerIndex\030\002 \001(\r\022\014\n\004Po"
    "sX\030\003 \001(\005\022\014\n\004PosY\030\004 \001(\005\022\037\n\010TeamMode\030\005 \001(\016"
    "2\r.pb.ETeamMode\022&\n\nUserStatus\030\006 \001(\0162\022.pb"
    ".EMapUserStatus\022\031\n\021BattleObjectIndex\030\007 \001"
    "(\005\"|\n\024TAdventureTeamRecord\022,\n\nRecordType"
    "\030\001 \001(\0162\030.pb.EAdvantureRecordType\022\020\n\010Para"
    "mArr\030\002 \003(\004\022$\n\tRewardArr\030\003 \003(\0132\021.pb.TComm"
    "onReward\"X\n\023TAdventureMapStatus\022\r\n\005MapId"
    "\030\001 \001(\004\022\022\n\nMapEntryId\030\002 \001(\r\022\036\n\006Status\030\003 \001"
    "(\0162\016.pb.EMapStatus\">\n\021TAdventureMapList\022"
    ")\n\010MapArray\030\001 \003(\0132\027.pb.TAdventureMapStat"
    "us\">\n\022TAdventLevelExpNum\022\030\n\020AdventureLev"
    "elId\030\001 \001(\r\022\016\n\006ExpNum\030\002 \001(\r\"U\n\031TAdventure"
    "TeamExtraReward\022\021\n\tRewardUid\030\001 \001(\004\022%\n\nRe"
    "wardInfo\030\002 \001(\0132\021.pb.TCommonReward\"5\n\017TAd"
    "ventureGoods\022\017\n\007GoodsId\030\001 \001(\r\022\021\n\tBoughtN"
    "um\030\002 \001(\r\"p\n\025TAdventureBusinessMan\022\022\n\nLay"
    "erIndex\030\001 \001(\r\022\014\n\004PosX\030\002 \001(\005\022\014\n\004PosY\030\003 \001("
    "\005\022\'\n\nGoodsArray\030\004 \003(\0132\023.pb.TAdventureGoo"
    "ds\"\\\n\027TAdventureMonsterStatus\022\022\n\nMonster"
    "Pos\030\001 \001(\r\022\r\n\005CurHp\030\002 \001(\004\022\017\n\007CurRage\030\003 \001("
    "\004\022\r\n\005MaxHp\030\004 \001(\004\"\205\001\n\025TAdventureMonsterIn"
    "fo\022\022\n\nLayerIndex\030\001 \001(\r\022\014\n\004PosX\030\002 \001(\005\022\014\n\004"
    "PosY\030\003 \001(\005\022\024\n\014BattleinfoId\030\004 \001(\r\022\022\n\nCurT"
    "otalHp\030\005 \001(\004\022\022\n\nMaxTotalHp\030\006 \001(\004\"=\n\020Inte"
    "ractItemInfo\022\026\n\016InteractItemId\030\001 \001(\r\022\021\n\t"
    "ItemInAct\030\002 \001(\010\"\350\001\n\022TAdventureEventRet\022\016"
    "\n\006TalkId\030\001 \001(\r\022\'\n\010Behavior\030\002 \001(\0132\025.pb.Ad"
    "ventureBehavior\022-\n\017InteractItemArr\030\003 \003(\013"
    "2\024.pb.InteractItemInfo\022\020\n\010AnswerId\030\004 \001(\r"
    "\022\027\n\017AnswerStartTime\030\005 \001(\004\022\024\n\014BattleinfoI"
    "d\030\006 \001(\r\022\021\n\tBossLevel\030\007 \001(\r\022\026\n\016ArmyFightF"
    "orce\030\010 \001(\004\"1\n\016TAdventureAttr\022\016\n\006AttrId\030\001"
    " \001(\r\022\017\n\007AttrNum\030\002 \001(\r\"T\n\016TAdventureBuff\022"
    "\020\n\010BuffType\030\001 \001(\r\022#\n\007AttrArr\030\002 \003(\0132\022.pb."
    "TAdventureAttr\022\013\n\003Hid\030\003 \001(\r\"=\n\023TAdventur"
    "ePassBlock\022\t\n\001X\030\001 \001(\005\022\t\n\001Y\030\002 \001(\005\022\020\n\010Laye"
    "rIdx\030\003 \001(\r\"[\n\035TAdventureGetTeamRankUserI"
    "nfo\022\021\n\tMemberUid\030\001 \001(\004\022\023\n\013DamageValue\030\002 "
    "\001(\004\022\022\n\nDoEventNum\030\003 \001(\r\"c\n\033TAdventureBat"
    "tleMonsterInfo\022\023\n\013ScreenIndex\030\001 \001(\r\022/\n\nM"
    "onsterArr\030\002 \003(\0132\033.pb.TAdventureMonsterSt"
    "atus*^\n\nEMapStatus\022\025\n\021MAP_NOTACCEPTABLE\020"
    "\000\022\022\n\016MAP_ACCEPTABLE\020\001\022\022\n\016MAP_INPROGRESS\020"
    "\002\022\021\n\rMAP_COMPLETED\020\003*M\n\016EMapUserStatus\022\033"
    "\n\027MAPUSER_STATUS_INBATTLE\020\002\022\036\n\032MAPUSER_S"
    "TATUS_NOTINBATTLE\020\003*\235\001\n\024EAdvantureRecord"
    "Type\022\031\n\025RECORD_TYPE_EVENTDONE\020\001\022\033\n\027RECOR"
    "D_TYPE_EVENTREWARD\020\002\022\024\n\020RECORD_TYPE_SEND"
    "\020\003\022\032\n\026RECORD_TYPE_ACCEPTCALL\020\004\022\033\n\027RECORD"
    "_TYPE_PROGRESSRWD\020\005*1\n\010EMapType\022\022\n\016MAP_T"
    "YPE_ALONE\020\001\022\021\n\rMAP_TYPE_TEAM\020\002*\210\001\n\017ETeam"
    "ChangeType\022\024\n\020TEAM_CHANGE_JOIN\020\001\022\024\n\020TEAM"
    "_CHANGE_QUIT\020\002\022\024\n\020TEAM_CHANGE_KICK\020\003\022\027\n\023"
    "TEAM_CHANGE_DISMISS\020\004\022\032\n\026TEAM_CHANGE_LEA"
    "DERQUIT\020\005*{\n\024EAdventureTeamStatus\022\030\n\024TEA"
    "M_STATUS_NOTSTART\020\001\022\027\n\023TEAM_STATUS_DISMI"
    "SS\020\002\022\027\n\023TEAM_STATUS_STARTED\020\003\022\027\n\023TEAM_ST"
    "ATUS_EXPIRED\020\004*^\n\025EAdventureGetTeamType\022"
    "\024\n\020GETTEAM_TYPE_ALL\020\001\022\026\n\022GETTEAM_TYPE_GU"
    "ILD\020\002\022\027\n\023GETTEAM_TYPE_FRIEND\020\003*\234\001\n\027EAdve"
    "nturePosChangeType\022\027\n\023POS_CHANGE_SELFMOV"
    "E\020\001\022\033\n\027POS_CHANGE_SELFTRANSMIT\020\002\022\023\n\017POS_"
    "CHANGE_SEND\020\003\022\031\n\025POS_CHANGE_ACCEPTCALL\020\004"
    "\022\033\n\027POS_CHANGE_TRAPPOSRESET\020\005*\212\001\n\033EAdven"
    "tureSendToMateRetCode\022\017\n\013RET_CODE_OK\020\001\022\025"
    "\n\021RET_CODE_COSTFAIL\020\002\022\026\n\022RET_CODE_MATELE"
    "AVE\020\003\022\024\n\020RET_CODE_SAMEPOS\020\004\022\025\n\021RET_CODE_"
    "NOTINMAP\020\005*\201\001\n\033EAdventureRollRewardRetCo"
    "de\022\023\n\017ROLL_RETCODE_OK\020\001\022\031\n\025ROLL_RETCODE_"
    "REWARDED\020\002\022\027\n\023ROLL_RETCODE_ROLLED\020\003\022\031\n\025R"
    "OLL_RET_CODE_ROLLEND\020\004*j\n\034EAdventureStar"
    "tBattleRetCode\022\026\n\022STARTBT_RETCODE_OK\020\001\022\030"
    "\n\024STARTBT_RETCODE_DONE\020\002\022\030\n\024STARTBT_RETC"
    "ODE_INBT\020\003*\245\001\n\016EAdventureType\022\032\n\026ADVENT_"
    "TYPE_NOT_IN_MAP\020\000\022\026\n\022ADVENT_TYPE_NORMAL\020"
    "\001\022\023\n\017ADVENT_TYPE_EXP\020\002\022\024\n\020ADVENT_TYPE_TE"
    "AM\020\003\022\032\n\026ADVENT_TYPE_ACT_NORMAL\020\004\022\030\n\024ADVE"
    "NT_TYPE_ACT_TEAM\020\005*~\n\027ETeamStartPlayErro"
    "rCode\022\021\n\rTEAM_START_OK\020\000\022\025\n\021TEAM_START_I"
    "N_MAP\020\001\022\034\n\030TEAM_START_NO_ADVENT_NUM\020\002\022\033\n"
    "\027TEAM_START_GET_MAP_FAIL\020\003*b\n\tETeamMode\022"
    "\023\n\017TEAM_MODE_ALONE\020\000\022\024\n\020TEAM_MODE_LEADER"
    "\020\001\022\024\n\020TEAM_MODE_MEMBER\020\002\022\024\n\020TEAM_MODE_HE"
    "LPER\020\003*{\n\034EAdventureRefreshMapCostType\022\035"
    "\n\031ADVENT_RFR_COST_TYPE_FREE\020\001\022\035\n\031ADVENT_"
    "RFR_COST_TYPE_ITEM\020\002\022\035\n\031ADVENT_RFR_COST_"
    "TYPE_GOLD\020\003", 3851);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/AdventureBase.proto", &protobuf_RegisterTypes);
  TAdventureUserSimpleInfo::default_instance_ = new TAdventureUserSimpleInfo();
  TUserInfoWithPos::default_instance_ = new TUserInfoWithPos();
  TAdventureTeamRecord::default_instance_ = new TAdventureTeamRecord();
  TAdventureMapStatus::default_instance_ = new TAdventureMapStatus();
  TAdventureMapList::default_instance_ = new TAdventureMapList();
  TAdventLevelExpNum::default_instance_ = new TAdventLevelExpNum();
  TAdventureTeamExtraReward::default_instance_ = new TAdventureTeamExtraReward();
  TAdventureGoods::default_instance_ = new TAdventureGoods();
  TAdventureBusinessMan::default_instance_ = new TAdventureBusinessMan();
  TAdventureMonsterStatus::default_instance_ = new TAdventureMonsterStatus();
  TAdventureMonsterInfo::default_instance_ = new TAdventureMonsterInfo();
  InteractItemInfo::default_instance_ = new InteractItemInfo();
  TAdventureEventRet::default_instance_ = new TAdventureEventRet();
  TAdventureAttr::default_instance_ = new TAdventureAttr();
  TAdventureBuff::default_instance_ = new TAdventureBuff();
  TAdventurePassBlock::default_instance_ = new TAdventurePassBlock();
  TAdventureGetTeamRankUserInfo::default_instance_ = new TAdventureGetTeamRankUserInfo();
  TAdventureBattleMonsterInfo::default_instance_ = new TAdventureBattleMonsterInfo();
  TAdventureUserSimpleInfo::default_instance_->InitAsDefaultInstance();
  TUserInfoWithPos::default_instance_->InitAsDefaultInstance();
  TAdventureTeamRecord::default_instance_->InitAsDefaultInstance();
  TAdventureMapStatus::default_instance_->InitAsDefaultInstance();
  TAdventureMapList::default_instance_->InitAsDefaultInstance();
  TAdventLevelExpNum::default_instance_->InitAsDefaultInstance();
  TAdventureTeamExtraReward::default_instance_->InitAsDefaultInstance();
  TAdventureGoods::default_instance_->InitAsDefaultInstance();
  TAdventureBusinessMan::default_instance_->InitAsDefaultInstance();
  TAdventureMonsterStatus::default_instance_->InitAsDefaultInstance();
  TAdventureMonsterInfo::default_instance_->InitAsDefaultInstance();
  InteractItemInfo::default_instance_->InitAsDefaultInstance();
  TAdventureEventRet::default_instance_->InitAsDefaultInstance();
  TAdventureAttr::default_instance_->InitAsDefaultInstance();
  TAdventureBuff::default_instance_->InitAsDefaultInstance();
  TAdventurePassBlock::default_instance_->InitAsDefaultInstance();
  TAdventureGetTeamRankUserInfo::default_instance_->InitAsDefaultInstance();
  TAdventureBattleMonsterInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fAdventureBase_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fAdventureBase_2eproto {
  StaticDescriptorInitializer_net_2fAdventureBase_2eproto() {
    protobuf_AddDesc_net_2fAdventureBase_2eproto();
  }
} static_descriptor_initializer_net_2fAdventureBase_2eproto_;
const ::google::protobuf::EnumDescriptor* EMapStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMapStatus_descriptor_;
}
bool EMapStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMapUserStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMapUserStatus_descriptor_;
}
bool EMapUserStatus_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdvantureRecordType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdvantureRecordType_descriptor_;
}
bool EAdvantureRecordType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMapType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMapType_descriptor_;
}
bool EMapType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamChangeType_descriptor_;
}
bool ETeamChangeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdventureTeamStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdventureTeamStatus_descriptor_;
}
bool EAdventureTeamStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdventureGetTeamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdventureGetTeamType_descriptor_;
}
bool EAdventureGetTeamType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdventurePosChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdventurePosChangeType_descriptor_;
}
bool EAdventurePosChangeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdventureSendToMateRetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdventureSendToMateRetCode_descriptor_;
}
bool EAdventureSendToMateRetCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdventureRollRewardRetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdventureRollRewardRetCode_descriptor_;
}
bool EAdventureRollRewardRetCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdventureStartBattleRetCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdventureStartBattleRetCode_descriptor_;
}
bool EAdventureStartBattleRetCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdventureType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdventureType_descriptor_;
}
bool EAdventureType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamStartPlayErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamStartPlayErrorCode_descriptor_;
}
bool ETeamStartPlayErrorCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETeamMode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETeamMode_descriptor_;
}
bool ETeamMode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAdventureRefreshMapCostType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAdventureRefreshMapCostType_descriptor_;
}
bool EAdventureRefreshMapCostType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureUserSimpleInfo::kUidFieldNumber;
const int TAdventureUserSimpleInfo::kServerIdFieldNumber;
const int TAdventureUserSimpleInfo::kUnameFieldNumber;
const int TAdventureUserSimpleInfo::kHtidFieldNumber;
const int TAdventureUserSimpleInfo::kLevelFieldNumber;
const int TAdventureUserSimpleInfo::kVipLevelFieldNumber;
const int TAdventureUserSimpleInfo::kFightForceFieldNumber;
const int TAdventureUserSimpleInfo::kPlayerImageFrameTidFieldNumber;
const int TAdventureUserSimpleInfo::kGuildNameFieldNumber;
const int TAdventureUserSimpleInfo::kCurMountFieldNumber;
const int TAdventureUserSimpleInfo::kMasterHtidFieldNumber;
const int TAdventureUserSimpleInfo::kGuildIdFieldNumber;
const int TAdventureUserSimpleInfo::kTitleFieldNumber;
#endif  // !_MSC_VER

TAdventureUserSimpleInfo::TAdventureUserSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureUserSimpleInfo)
}

void TAdventureUserSimpleInfo::InitAsDefaultInstance() {
}

TAdventureUserSimpleInfo::TAdventureUserSimpleInfo(const TAdventureUserSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureUserSimpleInfo)
}

void TAdventureUserSimpleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  htid_ = 0u;
  level_ = 0u;
  viplevel_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  playerimageframetid_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curmount_ = 0u;
  masterhtid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  title_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureUserSimpleInfo::~TAdventureUserSimpleInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureUserSimpleInfo)
  SharedDtor();
}

void TAdventureUserSimpleInfo::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void TAdventureUserSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureUserSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureUserSimpleInfo_descriptor_;
}

const TAdventureUserSimpleInfo& TAdventureUserSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureUserSimpleInfo* TAdventureUserSimpleInfo::default_instance_ = NULL;

TAdventureUserSimpleInfo* TAdventureUserSimpleInfo::New() const {
  return new TAdventureUserSimpleInfo;
}

void TAdventureUserSimpleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureUserSimpleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(htid_, playerimageframetid_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(curmount_, title_);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureUserSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureUserSimpleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Uname;
        break;
      }

      // optional string Uname = 3;
      case 3: {
        if (tag == 26) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 4;
      case 4: {
        if (tag == 32) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 5;
      case 5: {
        if (tag == 40) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_VipLevel;
        break;
      }

      // optional uint32 VipLevel = 6;
      case 6: {
        if (tag == 48) {
         parse_VipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 7;
      case 7: {
        if (tag == 56) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_PlayerImageFrameTid;
        break;
      }

      // optional uint32 PlayerImageFrameTid = 8;
      case 8: {
        if (tag == 64) {
         parse_PlayerImageFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerimageframetid_)));
          set_has_playerimageframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 9;
      case 9: {
        if (tag == 74) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_CurMount;
        break;
      }

      // optional uint32 CurMount = 10;
      case 10: {
        if (tag == 80) {
         parse_CurMount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curmount_)));
          set_has_curmount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_MasterHtid;
        break;
      }

      // optional uint32 MasterHtid = 11;
      case 11: {
        if (tag == 88) {
         parse_MasterHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masterhtid_)));
          set_has_masterhtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_GuildId;
        break;
      }

      // optional uint64 GuildId = 12;
      case 12: {
        if (tag == 96) {
         parse_GuildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_Title;
        break;
      }

      // optional uint32 Title = 13;
      case 13: {
        if (tag == 104) {
         parse_Title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureUserSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureUserSimpleInfo)
  return false;
#undef DO_
}

void TAdventureUserSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureUserSimpleInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  // optional string Uname = 3;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->uname(), output);
  }

  // optional uint32 Htid = 4;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->htid(), output);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 VipLevel = 6;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplevel(), output);
  }

  // optional uint64 FightForce = 7;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->fightforce(), output);
  }

  // optional uint32 PlayerImageFrameTid = 8;
  if (has_playerimageframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->playerimageframetid(), output);
  }

  // optional string GuildName = 9;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->guildname(), output);
  }

  // optional uint32 CurMount = 10;
  if (has_curmount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->curmount(), output);
  }

  // optional uint32 MasterHtid = 11;
  if (has_masterhtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->masterhtid(), output);
  }

  // optional uint64 GuildId = 12;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->guildid(), output);
  }

  // optional uint32 Title = 13;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->title(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureUserSimpleInfo)
}

::google::protobuf::uint8* TAdventureUserSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureUserSimpleInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  // optional string Uname = 3;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->uname(), target);
  }

  // optional uint32 Htid = 4;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->htid(), target);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 VipLevel = 6;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplevel(), target);
  }

  // optional uint64 FightForce = 7;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->fightforce(), target);
  }

  // optional uint32 PlayerImageFrameTid = 8;
  if (has_playerimageframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->playerimageframetid(), target);
  }

  // optional string GuildName = 9;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->guildname(), target);
  }

  // optional uint32 CurMount = 10;
  if (has_curmount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->curmount(), target);
  }

  // optional uint32 MasterHtid = 11;
  if (has_masterhtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->masterhtid(), target);
  }

  // optional uint64 GuildId = 12;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->guildid(), target);
  }

  // optional uint32 Title = 13;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->title(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureUserSimpleInfo)
  return target;
}

int TAdventureUserSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional string Uname = 3;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 Htid = 4;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 VipLevel = 6;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

    // optional uint64 FightForce = 7;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 PlayerImageFrameTid = 8;
    if (has_playerimageframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerimageframetid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string GuildName = 9;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 CurMount = 10;
    if (has_curmount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curmount());
    }

    // optional uint32 MasterHtid = 11;
    if (has_masterhtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masterhtid());
    }

    // optional uint64 GuildId = 12;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 Title = 13;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureUserSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureUserSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureUserSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureUserSimpleInfo::MergeFrom(const TAdventureUserSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_playerimageframetid()) {
      set_playerimageframetid(from.playerimageframetid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_curmount()) {
      set_curmount(from.curmount());
    }
    if (from.has_masterhtid()) {
      set_masterhtid(from.masterhtid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureUserSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureUserSimpleInfo::CopyFrom(const TAdventureUserSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureUserSimpleInfo::IsInitialized() const {

  return true;
}

void TAdventureUserSimpleInfo::Swap(TAdventureUserSimpleInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(serverid_, other->serverid_);
    std::swap(uname_, other->uname_);
    std::swap(htid_, other->htid_);
    std::swap(level_, other->level_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(playerimageframetid_, other->playerimageframetid_);
    std::swap(guildname_, other->guildname_);
    std::swap(curmount_, other->curmount_);
    std::swap(masterhtid_, other->masterhtid_);
    std::swap(guildid_, other->guildid_);
    std::swap(title_, other->title_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureUserSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureUserSimpleInfo_descriptor_;
  metadata.reflection = TAdventureUserSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TUserInfoWithPos::kUidFieldNumber;
const int TUserInfoWithPos::kLayerIndexFieldNumber;
const int TUserInfoWithPos::kPosXFieldNumber;
const int TUserInfoWithPos::kPosYFieldNumber;
const int TUserInfoWithPos::kTeamModeFieldNumber;
const int TUserInfoWithPos::kUserStatusFieldNumber;
const int TUserInfoWithPos::kBattleObjectIndexFieldNumber;
#endif  // !_MSC_VER

TUserInfoWithPos::TUserInfoWithPos()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TUserInfoWithPos)
}

void TUserInfoWithPos::InitAsDefaultInstance() {
}

TUserInfoWithPos::TUserInfoWithPos(const TUserInfoWithPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TUserInfoWithPos)
}

void TUserInfoWithPos::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  layerindex_ = 0u;
  posx_ = 0;
  posy_ = 0;
  teammode_ = 0;
  userstatus_ = 2;
  battleobjectindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TUserInfoWithPos::~TUserInfoWithPos() {
  // @@protoc_insertion_point(destructor:pb.TUserInfoWithPos)
  SharedDtor();
}

void TUserInfoWithPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TUserInfoWithPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TUserInfoWithPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TUserInfoWithPos_descriptor_;
}

const TUserInfoWithPos& TUserInfoWithPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TUserInfoWithPos* TUserInfoWithPos::default_instance_ = NULL;

TUserInfoWithPos* TUserInfoWithPos::New() const {
  return new TUserInfoWithPos;
}

void TUserInfoWithPos::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TUserInfoWithPos*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(uid_, teammode_);
    userstatus_ = 2;
    battleobjectindex_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TUserInfoWithPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TUserInfoWithPos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerIndex;
        break;
      }

      // optional uint32 LayerIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 3;
      case 3: {
        if (tag == 24) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 4;
      case 4: {
        if (tag == 32) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_TeamMode;
        break;
      }

      // optional .pb.ETeamMode TeamMode = 5;
      case 5: {
        if (tag == 40) {
         parse_TeamMode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::ETeamMode_IsValid(value)) {
            set_teammode(static_cast< ::pb::ETeamMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_UserStatus;
        break;
      }

      // optional .pb.EMapUserStatus UserStatus = 6;
      case 6: {
        if (tag == 48) {
         parse_UserStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EMapUserStatus_IsValid(value)) {
            set_userstatus(static_cast< ::pb::EMapUserStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_BattleObjectIndex;
        break;
      }

      // optional int32 BattleObjectIndex = 7;
      case 7: {
        if (tag == 56) {
         parse_BattleObjectIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battleobjectindex_)));
          set_has_battleobjectindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TUserInfoWithPos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TUserInfoWithPos)
  return false;
#undef DO_
}

void TUserInfoWithPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TUserInfoWithPos)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerindex(), output);
  }

  // optional int32 PosX = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // optional int32 PosY = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // optional .pb.ETeamMode TeamMode = 5;
  if (has_teammode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->teammode(), output);
  }

  // optional .pb.EMapUserStatus UserStatus = 6;
  if (has_userstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->userstatus(), output);
  }

  // optional int32 BattleObjectIndex = 7;
  if (has_battleobjectindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->battleobjectindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TUserInfoWithPos)
}

::google::protobuf::uint8* TUserInfoWithPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TUserInfoWithPos)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 LayerIndex = 2;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerindex(), target);
  }

  // optional int32 PosX = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // optional int32 PosY = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  // optional .pb.ETeamMode TeamMode = 5;
  if (has_teammode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->teammode(), target);
  }

  // optional .pb.EMapUserStatus UserStatus = 6;
  if (has_userstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->userstatus(), target);
  }

  // optional int32 BattleObjectIndex = 7;
  if (has_battleobjectindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->battleobjectindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TUserInfoWithPos)
  return target;
}

int TUserInfoWithPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 LayerIndex = 2;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 PosX = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional .pb.ETeamMode TeamMode = 5;
    if (has_teammode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->teammode());
    }

    // optional .pb.EMapUserStatus UserStatus = 6;
    if (has_userstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->userstatus());
    }

    // optional int32 BattleObjectIndex = 7;
    if (has_battleobjectindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battleobjectindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TUserInfoWithPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TUserInfoWithPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TUserInfoWithPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TUserInfoWithPos::MergeFrom(const TUserInfoWithPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_teammode()) {
      set_teammode(from.teammode());
    }
    if (from.has_userstatus()) {
      set_userstatus(from.userstatus());
    }
    if (from.has_battleobjectindex()) {
      set_battleobjectindex(from.battleobjectindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TUserInfoWithPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TUserInfoWithPos::CopyFrom(const TUserInfoWithPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TUserInfoWithPos::IsInitialized() const {

  return true;
}

void TUserInfoWithPos::Swap(TUserInfoWithPos* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(layerindex_, other->layerindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(teammode_, other->teammode_);
    std::swap(userstatus_, other->userstatus_);
    std::swap(battleobjectindex_, other->battleobjectindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TUserInfoWithPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TUserInfoWithPos_descriptor_;
  metadata.reflection = TUserInfoWithPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamRecord::kRecordTypeFieldNumber;
const int TAdventureTeamRecord::kParamArrFieldNumber;
const int TAdventureTeamRecord::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamRecord::TAdventureTeamRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamRecord)
}

void TAdventureTeamRecord::InitAsDefaultInstance() {
}

TAdventureTeamRecord::TAdventureTeamRecord(const TAdventureTeamRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamRecord)
}

void TAdventureTeamRecord::SharedCtor() {
  _cached_size_ = 0;
  recordtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamRecord::~TAdventureTeamRecord() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamRecord)
  SharedDtor();
}

void TAdventureTeamRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureTeamRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamRecord_descriptor_;
}

const TAdventureTeamRecord& TAdventureTeamRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureTeamRecord* TAdventureTeamRecord::default_instance_ = NULL;

TAdventureTeamRecord* TAdventureTeamRecord::New() const {
  return new TAdventureTeamRecord;
}

void TAdventureTeamRecord::Clear() {
  recordtype_ = 1;
  paramarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EAdvantureRecordType RecordType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EAdvantureRecordType_IsValid(value)) {
            set_recordtype(static_cast< ::pb::EAdvantureRecordType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ParamArr;
        break;
      }

      // repeated uint64 ParamArr = 2;
      case 2: {
        if (tag == 16) {
         parse_ParamArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_paramarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_paramarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ParamArr;
        if (input->ExpectTag(26)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamRecord)
  return false;
#undef DO_
}

void TAdventureTeamRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamRecord)
  // optional .pb.EAdvantureRecordType RecordType = 1;
  if (has_recordtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->recordtype(), output);
  }

  // repeated uint64 ParamArr = 2;
  for (int i = 0; i < this->paramarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->paramarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamRecord)
}

::google::protobuf::uint8* TAdventureTeamRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamRecord)
  // optional .pb.EAdvantureRecordType RecordType = 1;
  if (has_recordtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->recordtype(), target);
  }

  // repeated uint64 ParamArr = 2;
  for (int i = 0; i < this->paramarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->paramarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamRecord)
  return target;
}

int TAdventureTeamRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EAdvantureRecordType RecordType = 1;
    if (has_recordtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordtype());
    }

  }
  // repeated uint64 ParamArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->paramarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->paramarr(i));
    }
    total_size += 1 * this->paramarr_size() + data_size;
  }

  // repeated .pb.TCommonReward RewardArr = 3;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamRecord::MergeFrom(const TAdventureTeamRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  paramarr_.MergeFrom(from.paramarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordtype()) {
      set_recordtype(from.recordtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamRecord::CopyFrom(const TAdventureTeamRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamRecord::IsInitialized() const {

  return true;
}

void TAdventureTeamRecord::Swap(TAdventureTeamRecord* other) {
  if (other != this) {
    std::swap(recordtype_, other->recordtype_);
    paramarr_.Swap(&other->paramarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamRecord_descriptor_;
  metadata.reflection = TAdventureTeamRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureMapStatus::kMapIdFieldNumber;
const int TAdventureMapStatus::kMapEntryIdFieldNumber;
const int TAdventureMapStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

TAdventureMapStatus::TAdventureMapStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureMapStatus)
}

void TAdventureMapStatus::InitAsDefaultInstance() {
}

TAdventureMapStatus::TAdventureMapStatus(const TAdventureMapStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureMapStatus)
}

void TAdventureMapStatus::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  mapentryid_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureMapStatus::~TAdventureMapStatus() {
  // @@protoc_insertion_point(destructor:pb.TAdventureMapStatus)
  SharedDtor();
}

void TAdventureMapStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureMapStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureMapStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureMapStatus_descriptor_;
}

const TAdventureMapStatus& TAdventureMapStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureMapStatus* TAdventureMapStatus::default_instance_ = NULL;

TAdventureMapStatus* TAdventureMapStatus::New() const {
  return new TAdventureMapStatus;
}

void TAdventureMapStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureMapStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mapid_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureMapStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureMapStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 MapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MapEntryId;
        break;
      }

      // optional uint32 MapEntryId = 2;
      case 2: {
        if (tag == 16) {
         parse_MapEntryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapentryid_)));
          set_has_mapentryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Status;
        break;
      }

      // optional .pb.EMapStatus Status = 3;
      case 3: {
        if (tag == 24) {
         parse_Status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EMapStatus_IsValid(value)) {
            set_status(static_cast< ::pb::EMapStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureMapStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureMapStatus)
  return false;
#undef DO_
}

void TAdventureMapStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureMapStatus)
  // optional uint64 MapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mapid(), output);
  }

  // optional uint32 MapEntryId = 2;
  if (has_mapentryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapentryid(), output);
  }

  // optional .pb.EMapStatus Status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureMapStatus)
}

::google::protobuf::uint8* TAdventureMapStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureMapStatus)
  // optional uint64 MapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mapid(), target);
  }

  // optional uint32 MapEntryId = 2;
  if (has_mapentryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapentryid(), target);
  }

  // optional .pb.EMapStatus Status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureMapStatus)
  return target;
}

int TAdventureMapStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 MapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional uint32 MapEntryId = 2;
    if (has_mapentryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapentryid());
    }

    // optional .pb.EMapStatus Status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureMapStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureMapStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureMapStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureMapStatus::MergeFrom(const TAdventureMapStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapentryid()) {
      set_mapentryid(from.mapentryid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureMapStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureMapStatus::CopyFrom(const TAdventureMapStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureMapStatus::IsInitialized() const {

  return true;
}

void TAdventureMapStatus::Swap(TAdventureMapStatus* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(mapentryid_, other->mapentryid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureMapStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureMapStatus_descriptor_;
  metadata.reflection = TAdventureMapStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureMapList::kMapArrayFieldNumber;
#endif  // !_MSC_VER

TAdventureMapList::TAdventureMapList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureMapList)
}

void TAdventureMapList::InitAsDefaultInstance() {
}

TAdventureMapList::TAdventureMapList(const TAdventureMapList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureMapList)
}

void TAdventureMapList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureMapList::~TAdventureMapList() {
  // @@protoc_insertion_point(destructor:pb.TAdventureMapList)
  SharedDtor();
}

void TAdventureMapList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureMapList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureMapList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureMapList_descriptor_;
}

const TAdventureMapList& TAdventureMapList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureMapList* TAdventureMapList::default_instance_ = NULL;

TAdventureMapList* TAdventureMapList::New() const {
  return new TAdventureMapList;
}

void TAdventureMapList::Clear() {
  maparray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureMapList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureMapList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TAdventureMapStatus MapArray = 1;
      case 1: {
        if (tag == 10) {
         parse_MapArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_maparray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_MapArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureMapList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureMapList)
  return false;
#undef DO_
}

void TAdventureMapList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureMapList)
  // repeated .pb.TAdventureMapStatus MapArray = 1;
  for (int i = 0; i < this->maparray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->maparray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureMapList)
}

::google::protobuf::uint8* TAdventureMapList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureMapList)
  // repeated .pb.TAdventureMapStatus MapArray = 1;
  for (int i = 0; i < this->maparray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->maparray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureMapList)
  return target;
}

int TAdventureMapList::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TAdventureMapStatus MapArray = 1;
  total_size += 1 * this->maparray_size();
  for (int i = 0; i < this->maparray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->maparray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureMapList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureMapList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureMapList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureMapList::MergeFrom(const TAdventureMapList& from) {
  GOOGLE_CHECK_NE(&from, this);
  maparray_.MergeFrom(from.maparray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureMapList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureMapList::CopyFrom(const TAdventureMapList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureMapList::IsInitialized() const {

  return true;
}

void TAdventureMapList::Swap(TAdventureMapList* other) {
  if (other != this) {
    maparray_.Swap(&other->maparray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureMapList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureMapList_descriptor_;
  metadata.reflection = TAdventureMapList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventLevelExpNum::kAdventureLevelIdFieldNumber;
const int TAdventLevelExpNum::kExpNumFieldNumber;
#endif  // !_MSC_VER

TAdventLevelExpNum::TAdventLevelExpNum()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventLevelExpNum)
}

void TAdventLevelExpNum::InitAsDefaultInstance() {
}

TAdventLevelExpNum::TAdventLevelExpNum(const TAdventLevelExpNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventLevelExpNum)
}

void TAdventLevelExpNum::SharedCtor() {
  _cached_size_ = 0;
  adventurelevelid_ = 0u;
  expnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventLevelExpNum::~TAdventLevelExpNum() {
  // @@protoc_insertion_point(destructor:pb.TAdventLevelExpNum)
  SharedDtor();
}

void TAdventLevelExpNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventLevelExpNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventLevelExpNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventLevelExpNum_descriptor_;
}

const TAdventLevelExpNum& TAdventLevelExpNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventLevelExpNum* TAdventLevelExpNum::default_instance_ = NULL;

TAdventLevelExpNum* TAdventLevelExpNum::New() const {
  return new TAdventLevelExpNum;
}

void TAdventLevelExpNum::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventLevelExpNum*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(adventurelevelid_, expnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventLevelExpNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventLevelExpNum)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AdventureLevelId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adventurelevelid_)));
          set_has_adventurelevelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ExpNum;
        break;
      }

      // optional uint32 ExpNum = 2;
      case 2: {
        if (tag == 16) {
         parse_ExpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expnum_)));
          set_has_expnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventLevelExpNum)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventLevelExpNum)
  return false;
#undef DO_
}

void TAdventLevelExpNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventLevelExpNum)
  // optional uint32 AdventureLevelId = 1;
  if (has_adventurelevelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->adventurelevelid(), output);
  }

  // optional uint32 ExpNum = 2;
  if (has_expnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventLevelExpNum)
}

::google::protobuf::uint8* TAdventLevelExpNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventLevelExpNum)
  // optional uint32 AdventureLevelId = 1;
  if (has_adventurelevelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->adventurelevelid(), target);
  }

  // optional uint32 ExpNum = 2;
  if (has_expnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventLevelExpNum)
  return target;
}

int TAdventLevelExpNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AdventureLevelId = 1;
    if (has_adventurelevelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adventurelevelid());
    }

    // optional uint32 ExpNum = 2;
    if (has_expnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventLevelExpNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventLevelExpNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventLevelExpNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventLevelExpNum::MergeFrom(const TAdventLevelExpNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_adventurelevelid()) {
      set_adventurelevelid(from.adventurelevelid());
    }
    if (from.has_expnum()) {
      set_expnum(from.expnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventLevelExpNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventLevelExpNum::CopyFrom(const TAdventLevelExpNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventLevelExpNum::IsInitialized() const {

  return true;
}

void TAdventLevelExpNum::Swap(TAdventLevelExpNum* other) {
  if (other != this) {
    std::swap(adventurelevelid_, other->adventurelevelid_);
    std::swap(expnum_, other->expnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventLevelExpNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventLevelExpNum_descriptor_;
  metadata.reflection = TAdventLevelExpNum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureTeamExtraReward::kRewardUidFieldNumber;
const int TAdventureTeamExtraReward::kRewardInfoFieldNumber;
#endif  // !_MSC_VER

TAdventureTeamExtraReward::TAdventureTeamExtraReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureTeamExtraReward)
}

void TAdventureTeamExtraReward::InitAsDefaultInstance() {
  rewardinfo_ = const_cast< ::pb::TCommonReward*>(&::pb::TCommonReward::default_instance());
}

TAdventureTeamExtraReward::TAdventureTeamExtraReward(const TAdventureTeamExtraReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureTeamExtraReward)
}

void TAdventureTeamExtraReward::SharedCtor() {
  _cached_size_ = 0;
  rewarduid_ = GOOGLE_ULONGLONG(0);
  rewardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureTeamExtraReward::~TAdventureTeamExtraReward() {
  // @@protoc_insertion_point(destructor:pb.TAdventureTeamExtraReward)
  SharedDtor();
}

void TAdventureTeamExtraReward::SharedDtor() {
  if (this != default_instance_) {
    delete rewardinfo_;
  }
}

void TAdventureTeamExtraReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureTeamExtraReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureTeamExtraReward_descriptor_;
}

const TAdventureTeamExtraReward& TAdventureTeamExtraReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureTeamExtraReward* TAdventureTeamExtraReward::default_instance_ = NULL;

TAdventureTeamExtraReward* TAdventureTeamExtraReward::New() const {
  return new TAdventureTeamExtraReward;
}

void TAdventureTeamExtraReward::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    rewarduid_ = GOOGLE_ULONGLONG(0);
    if (has_rewardinfo()) {
      if (rewardinfo_ != NULL) rewardinfo_->::pb::TCommonReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureTeamExtraReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureTeamExtraReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 RewardUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewarduid_)));
          set_has_rewarduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardInfo;
        break;
      }

      // optional .pb.TCommonReward RewardInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureTeamExtraReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureTeamExtraReward)
  return false;
#undef DO_
}

void TAdventureTeamExtraReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureTeamExtraReward)
  // optional uint64 RewardUid = 1;
  if (has_rewarduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rewarduid(), output);
  }

  // optional .pb.TCommonReward RewardInfo = 2;
  if (has_rewardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureTeamExtraReward)
}

::google::protobuf::uint8* TAdventureTeamExtraReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureTeamExtraReward)
  // optional uint64 RewardUid = 1;
  if (has_rewarduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rewarduid(), target);
  }

  // optional .pb.TCommonReward RewardInfo = 2;
  if (has_rewardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureTeamExtraReward)
  return target;
}

int TAdventureTeamExtraReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 RewardUid = 1;
    if (has_rewarduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewarduid());
    }

    // optional .pb.TCommonReward RewardInfo = 2;
    if (has_rewardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rewardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureTeamExtraReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureTeamExtraReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureTeamExtraReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureTeamExtraReward::MergeFrom(const TAdventureTeamExtraReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewarduid()) {
      set_rewarduid(from.rewarduid());
    }
    if (from.has_rewardinfo()) {
      mutable_rewardinfo()->::pb::TCommonReward::MergeFrom(from.rewardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureTeamExtraReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureTeamExtraReward::CopyFrom(const TAdventureTeamExtraReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureTeamExtraReward::IsInitialized() const {

  return true;
}

void TAdventureTeamExtraReward::Swap(TAdventureTeamExtraReward* other) {
  if (other != this) {
    std::swap(rewarduid_, other->rewarduid_);
    std::swap(rewardinfo_, other->rewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureTeamExtraReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureTeamExtraReward_descriptor_;
  metadata.reflection = TAdventureTeamExtraReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGoods::kGoodsIdFieldNumber;
const int TAdventureGoods::kBoughtNumFieldNumber;
#endif  // !_MSC_VER

TAdventureGoods::TAdventureGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGoods)
}

void TAdventureGoods::InitAsDefaultInstance() {
}

TAdventureGoods::TAdventureGoods(const TAdventureGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGoods)
}

void TAdventureGoods::SharedCtor() {
  _cached_size_ = 0;
  goodsid_ = 0u;
  boughtnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGoods::~TAdventureGoods() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGoods)
  SharedDtor();
}

void TAdventureGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGoods_descriptor_;
}

const TAdventureGoods& TAdventureGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureGoods* TAdventureGoods::default_instance_ = NULL;

TAdventureGoods* TAdventureGoods::New() const {
  return new TAdventureGoods;
}

void TAdventureGoods::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureGoods*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(goodsid_, boughtnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGoods)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GoodsId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodsid_)));
          set_has_goodsid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BoughtNum;
        break;
      }

      // optional uint32 BoughtNum = 2;
      case 2: {
        if (tag == 16) {
         parse_BoughtNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boughtnum_)));
          set_has_boughtnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGoods)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGoods)
  return false;
#undef DO_
}

void TAdventureGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGoods)
  // optional uint32 GoodsId = 1;
  if (has_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goodsid(), output);
  }

  // optional uint32 BoughtNum = 2;
  if (has_boughtnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boughtnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGoods)
}

::google::protobuf::uint8* TAdventureGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGoods)
  // optional uint32 GoodsId = 1;
  if (has_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goodsid(), target);
  }

  // optional uint32 BoughtNum = 2;
  if (has_boughtnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boughtnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGoods)
  return target;
}

int TAdventureGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GoodsId = 1;
    if (has_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodsid());
    }

    // optional uint32 BoughtNum = 2;
    if (has_boughtnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boughtnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGoods::MergeFrom(const TAdventureGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodsid()) {
      set_goodsid(from.goodsid());
    }
    if (from.has_boughtnum()) {
      set_boughtnum(from.boughtnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGoods::CopyFrom(const TAdventureGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGoods::IsInitialized() const {

  return true;
}

void TAdventureGoods::Swap(TAdventureGoods* other) {
  if (other != this) {
    std::swap(goodsid_, other->goodsid_);
    std::swap(boughtnum_, other->boughtnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGoods_descriptor_;
  metadata.reflection = TAdventureGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureBusinessMan::kLayerIndexFieldNumber;
const int TAdventureBusinessMan::kPosXFieldNumber;
const int TAdventureBusinessMan::kPosYFieldNumber;
const int TAdventureBusinessMan::kGoodsArrayFieldNumber;
#endif  // !_MSC_VER

TAdventureBusinessMan::TAdventureBusinessMan()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureBusinessMan)
}

void TAdventureBusinessMan::InitAsDefaultInstance() {
}

TAdventureBusinessMan::TAdventureBusinessMan(const TAdventureBusinessMan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureBusinessMan)
}

void TAdventureBusinessMan::SharedCtor() {
  _cached_size_ = 0;
  layerindex_ = 0u;
  posx_ = 0;
  posy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureBusinessMan::~TAdventureBusinessMan() {
  // @@protoc_insertion_point(destructor:pb.TAdventureBusinessMan)
  SharedDtor();
}

void TAdventureBusinessMan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureBusinessMan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureBusinessMan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureBusinessMan_descriptor_;
}

const TAdventureBusinessMan& TAdventureBusinessMan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureBusinessMan* TAdventureBusinessMan::default_instance_ = NULL;

TAdventureBusinessMan* TAdventureBusinessMan::New() const {
  return new TAdventureBusinessMan;
}

void TAdventureBusinessMan::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureBusinessMan*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(layerindex_, posx_);
    posy_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  goodsarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureBusinessMan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureBusinessMan)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 2;
      case 2: {
        if (tag == 16) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 3;
      case 3: {
        if (tag == 24) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GoodsArray;
        break;
      }

      // repeated .pb.TAdventureGoods GoodsArray = 4;
      case 4: {
        if (tag == 34) {
         parse_GoodsArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodsarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GoodsArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureBusinessMan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureBusinessMan)
  return false;
#undef DO_
}

void TAdventureBusinessMan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureBusinessMan)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerindex(), output);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posy(), output);
  }

  // repeated .pb.TAdventureGoods GoodsArray = 4;
  for (int i = 0; i < this->goodsarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->goodsarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureBusinessMan)
}

::google::protobuf::uint8* TAdventureBusinessMan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureBusinessMan)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerindex(), target);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posy(), target);
  }

  // repeated .pb.TAdventureGoods GoodsArray = 4;
  for (int i = 0; i < this->goodsarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->goodsarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureBusinessMan)
  return target;
}

int TAdventureBusinessMan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerIndex = 1;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

  }
  // repeated .pb.TAdventureGoods GoodsArray = 4;
  total_size += 1 * this->goodsarray_size();
  for (int i = 0; i < this->goodsarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodsarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureBusinessMan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureBusinessMan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureBusinessMan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureBusinessMan::MergeFrom(const TAdventureBusinessMan& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodsarray_.MergeFrom(from.goodsarray_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureBusinessMan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureBusinessMan::CopyFrom(const TAdventureBusinessMan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureBusinessMan::IsInitialized() const {

  return true;
}

void TAdventureBusinessMan::Swap(TAdventureBusinessMan* other) {
  if (other != this) {
    std::swap(layerindex_, other->layerindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    goodsarray_.Swap(&other->goodsarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureBusinessMan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureBusinessMan_descriptor_;
  metadata.reflection = TAdventureBusinessMan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureMonsterStatus::kMonsterPosFieldNumber;
const int TAdventureMonsterStatus::kCurHpFieldNumber;
const int TAdventureMonsterStatus::kCurRageFieldNumber;
const int TAdventureMonsterStatus::kMaxHpFieldNumber;
#endif  // !_MSC_VER

TAdventureMonsterStatus::TAdventureMonsterStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureMonsterStatus)
}

void TAdventureMonsterStatus::InitAsDefaultInstance() {
}

TAdventureMonsterStatus::TAdventureMonsterStatus(const TAdventureMonsterStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureMonsterStatus)
}

void TAdventureMonsterStatus::SharedCtor() {
  _cached_size_ = 0;
  monsterpos_ = 0u;
  curhp_ = GOOGLE_ULONGLONG(0);
  currage_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureMonsterStatus::~TAdventureMonsterStatus() {
  // @@protoc_insertion_point(destructor:pb.TAdventureMonsterStatus)
  SharedDtor();
}

void TAdventureMonsterStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureMonsterStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureMonsterStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureMonsterStatus_descriptor_;
}

const TAdventureMonsterStatus& TAdventureMonsterStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureMonsterStatus* TAdventureMonsterStatus::default_instance_ = NULL;

TAdventureMonsterStatus* TAdventureMonsterStatus::New() const {
  return new TAdventureMonsterStatus;
}

void TAdventureMonsterStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureMonsterStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(curhp_, monsterpos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureMonsterStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureMonsterStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MonsterPos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterpos_)));
          set_has_monsterpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurHp;
        break;
      }

      // optional uint64 CurHp = 2;
      case 2: {
        if (tag == 16) {
         parse_CurHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurRage;
        break;
      }

      // optional uint64 CurRage = 3;
      case 3: {
        if (tag == 24) {
         parse_CurRage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currage_)));
          set_has_currage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureMonsterStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureMonsterStatus)
  return false;
#undef DO_
}

void TAdventureMonsterStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureMonsterStatus)
  // optional uint32 MonsterPos = 1;
  if (has_monsterpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->monsterpos(), output);
  }

  // optional uint64 CurHp = 2;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->curhp(), output);
  }

  // optional uint64 CurRage = 3;
  if (has_currage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->currage(), output);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureMonsterStatus)
}

::google::protobuf::uint8* TAdventureMonsterStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureMonsterStatus)
  // optional uint32 MonsterPos = 1;
  if (has_monsterpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->monsterpos(), target);
  }

  // optional uint64 CurHp = 2;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->curhp(), target);
  }

  // optional uint64 CurRage = 3;
  if (has_currage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->currage(), target);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureMonsterStatus)
  return target;
}

int TAdventureMonsterStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MonsterPos = 1;
    if (has_monsterpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterpos());
    }

    // optional uint64 CurHp = 2;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint64 CurRage = 3;
    if (has_currage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currage());
    }

    // optional uint64 MaxHp = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureMonsterStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureMonsterStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureMonsterStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureMonsterStatus::MergeFrom(const TAdventureMonsterStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monsterpos()) {
      set_monsterpos(from.monsterpos());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_currage()) {
      set_currage(from.currage());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureMonsterStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureMonsterStatus::CopyFrom(const TAdventureMonsterStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureMonsterStatus::IsInitialized() const {

  return true;
}

void TAdventureMonsterStatus::Swap(TAdventureMonsterStatus* other) {
  if (other != this) {
    std::swap(monsterpos_, other->monsterpos_);
    std::swap(curhp_, other->curhp_);
    std::swap(currage_, other->currage_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureMonsterStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureMonsterStatus_descriptor_;
  metadata.reflection = TAdventureMonsterStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureMonsterInfo::kLayerIndexFieldNumber;
const int TAdventureMonsterInfo::kPosXFieldNumber;
const int TAdventureMonsterInfo::kPosYFieldNumber;
const int TAdventureMonsterInfo::kBattleinfoIdFieldNumber;
const int TAdventureMonsterInfo::kCurTotalHpFieldNumber;
const int TAdventureMonsterInfo::kMaxTotalHpFieldNumber;
#endif  // !_MSC_VER

TAdventureMonsterInfo::TAdventureMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureMonsterInfo)
}

void TAdventureMonsterInfo::InitAsDefaultInstance() {
}

TAdventureMonsterInfo::TAdventureMonsterInfo(const TAdventureMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureMonsterInfo)
}

void TAdventureMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  layerindex_ = 0u;
  posx_ = 0;
  posy_ = 0;
  battleinfoid_ = 0u;
  curtotalhp_ = GOOGLE_ULONGLONG(0);
  maxtotalhp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureMonsterInfo::~TAdventureMonsterInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureMonsterInfo)
  SharedDtor();
}

void TAdventureMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureMonsterInfo_descriptor_;
}

const TAdventureMonsterInfo& TAdventureMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureMonsterInfo* TAdventureMonsterInfo::default_instance_ = NULL;

TAdventureMonsterInfo* TAdventureMonsterInfo::New() const {
  return new TAdventureMonsterInfo;
}

void TAdventureMonsterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureMonsterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(layerindex_, maxtotalhp_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureMonsterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerindex_)));
          set_has_layerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PosX;
        break;
      }

      // optional int32 PosX = 2;
      case 2: {
        if (tag == 16) {
         parse_PosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PosY;
        break;
      }

      // optional int32 PosY = 3;
      case 3: {
        if (tag == 24) {
         parse_PosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BattleinfoId;
        break;
      }

      // optional uint32 BattleinfoId = 4;
      case 4: {
        if (tag == 32) {
         parse_BattleinfoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleinfoid_)));
          set_has_battleinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CurTotalHp;
        break;
      }

      // optional uint64 CurTotalHp = 5;
      case 5: {
        if (tag == 40) {
         parse_CurTotalHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curtotalhp_)));
          set_has_curtotalhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_MaxTotalHp;
        break;
      }

      // optional uint64 MaxTotalHp = 6;
      case 6: {
        if (tag == 48) {
         parse_MaxTotalHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxtotalhp_)));
          set_has_maxtotalhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureMonsterInfo)
  return false;
#undef DO_
}

void TAdventureMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureMonsterInfo)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerindex(), output);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->posx(), output);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posy(), output);
  }

  // optional uint32 BattleinfoId = 4;
  if (has_battleinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->battleinfoid(), output);
  }

  // optional uint64 CurTotalHp = 5;
  if (has_curtotalhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->curtotalhp(), output);
  }

  // optional uint64 MaxTotalHp = 6;
  if (has_maxtotalhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->maxtotalhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureMonsterInfo)
}

::google::protobuf::uint8* TAdventureMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureMonsterInfo)
  // optional uint32 LayerIndex = 1;
  if (has_layerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerindex(), target);
  }

  // optional int32 PosX = 2;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->posx(), target);
  }

  // optional int32 PosY = 3;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posy(), target);
  }

  // optional uint32 BattleinfoId = 4;
  if (has_battleinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->battleinfoid(), target);
  }

  // optional uint64 CurTotalHp = 5;
  if (has_curtotalhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->curtotalhp(), target);
  }

  // optional uint64 MaxTotalHp = 6;
  if (has_maxtotalhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->maxtotalhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureMonsterInfo)
  return target;
}

int TAdventureMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerIndex = 1;
    if (has_layerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerindex());
    }

    // optional int32 PosX = 2;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 PosY = 3;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional uint32 BattleinfoId = 4;
    if (has_battleinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleinfoid());
    }

    // optional uint64 CurTotalHp = 5;
    if (has_curtotalhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curtotalhp());
    }

    // optional uint64 MaxTotalHp = 6;
    if (has_maxtotalhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxtotalhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureMonsterInfo::MergeFrom(const TAdventureMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerindex()) {
      set_layerindex(from.layerindex());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_battleinfoid()) {
      set_battleinfoid(from.battleinfoid());
    }
    if (from.has_curtotalhp()) {
      set_curtotalhp(from.curtotalhp());
    }
    if (from.has_maxtotalhp()) {
      set_maxtotalhp(from.maxtotalhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureMonsterInfo::CopyFrom(const TAdventureMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureMonsterInfo::IsInitialized() const {

  return true;
}

void TAdventureMonsterInfo::Swap(TAdventureMonsterInfo* other) {
  if (other != this) {
    std::swap(layerindex_, other->layerindex_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(battleinfoid_, other->battleinfoid_);
    std::swap(curtotalhp_, other->curtotalhp_);
    std::swap(maxtotalhp_, other->maxtotalhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureMonsterInfo_descriptor_;
  metadata.reflection = TAdventureMonsterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InteractItemInfo::kInteractItemIdFieldNumber;
const int InteractItemInfo::kItemInActFieldNumber;
#endif  // !_MSC_VER

InteractItemInfo::InteractItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.InteractItemInfo)
}

void InteractItemInfo::InitAsDefaultInstance() {
}

InteractItemInfo::InteractItemInfo(const InteractItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.InteractItemInfo)
}

void InteractItemInfo::SharedCtor() {
  _cached_size_ = 0;
  interactitemid_ = 0u;
  iteminact_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InteractItemInfo::~InteractItemInfo() {
  // @@protoc_insertion_point(destructor:pb.InteractItemInfo)
  SharedDtor();
}

void InteractItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InteractItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InteractItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InteractItemInfo_descriptor_;
}

const InteractItemInfo& InteractItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

InteractItemInfo* InteractItemInfo::default_instance_ = NULL;

InteractItemInfo* InteractItemInfo::New() const {
  return new InteractItemInfo;
}

void InteractItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InteractItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(interactitemid_, iteminact_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InteractItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.InteractItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 InteractItemId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interactitemid_)));
          set_has_interactitemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ItemInAct;
        break;
      }

      // optional bool ItemInAct = 2;
      case 2: {
        if (tag == 16) {
         parse_ItemInAct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iteminact_)));
          set_has_iteminact();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.InteractItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.InteractItemInfo)
  return false;
#undef DO_
}

void InteractItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.InteractItemInfo)
  // optional uint32 InteractItemId = 1;
  if (has_interactitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->interactitemid(), output);
  }

  // optional bool ItemInAct = 2;
  if (has_iteminact()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->iteminact(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.InteractItemInfo)
}

::google::protobuf::uint8* InteractItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.InteractItemInfo)
  // optional uint32 InteractItemId = 1;
  if (has_interactitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->interactitemid(), target);
  }

  // optional bool ItemInAct = 2;
  if (has_iteminact()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->iteminact(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.InteractItemInfo)
  return target;
}

int InteractItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 InteractItemId = 1;
    if (has_interactitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interactitemid());
    }

    // optional bool ItemInAct = 2;
    if (has_iteminact()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InteractItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InteractItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InteractItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InteractItemInfo::MergeFrom(const InteractItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_interactitemid()) {
      set_interactitemid(from.interactitemid());
    }
    if (from.has_iteminact()) {
      set_iteminact(from.iteminact());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InteractItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InteractItemInfo::CopyFrom(const InteractItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InteractItemInfo::IsInitialized() const {

  return true;
}

void InteractItemInfo::Swap(InteractItemInfo* other) {
  if (other != this) {
    std::swap(interactitemid_, other->interactitemid_);
    std::swap(iteminact_, other->iteminact_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InteractItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InteractItemInfo_descriptor_;
  metadata.reflection = InteractItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureEventRet::kTalkIdFieldNumber;
const int TAdventureEventRet::kBehaviorFieldNumber;
const int TAdventureEventRet::kInteractItemArrFieldNumber;
const int TAdventureEventRet::kAnswerIdFieldNumber;
const int TAdventureEventRet::kAnswerStartTimeFieldNumber;
const int TAdventureEventRet::kBattleinfoIdFieldNumber;
const int TAdventureEventRet::kBossLevelFieldNumber;
const int TAdventureEventRet::kArmyFightForceFieldNumber;
#endif  // !_MSC_VER

TAdventureEventRet::TAdventureEventRet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureEventRet)
}

void TAdventureEventRet::InitAsDefaultInstance() {
  behavior_ = const_cast< ::pb::AdventureBehavior*>(&::pb::AdventureBehavior::default_instance());
}

TAdventureEventRet::TAdventureEventRet(const TAdventureEventRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureEventRet)
}

void TAdventureEventRet::SharedCtor() {
  _cached_size_ = 0;
  talkid_ = 0u;
  behavior_ = NULL;
  answerid_ = 0u;
  answerstarttime_ = GOOGLE_ULONGLONG(0);
  battleinfoid_ = 0u;
  bosslevel_ = 0u;
  armyfightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureEventRet::~TAdventureEventRet() {
  // @@protoc_insertion_point(destructor:pb.TAdventureEventRet)
  SharedDtor();
}

void TAdventureEventRet::SharedDtor() {
  if (this != default_instance_) {
    delete behavior_;
  }
}

void TAdventureEventRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureEventRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureEventRet_descriptor_;
}

const TAdventureEventRet& TAdventureEventRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureEventRet* TAdventureEventRet::default_instance_ = NULL;

TAdventureEventRet* TAdventureEventRet::New() const {
  return new TAdventureEventRet;
}

void TAdventureEventRet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureEventRet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 251) {
    ZR_(talkid_, answerid_);
    ZR_(answerstarttime_, armyfightforce_);
    if (has_behavior()) {
      if (behavior_ != NULL) behavior_->::pb::AdventureBehavior::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  interactitemarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureEventRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureEventRet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TalkId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talkid_)));
          set_has_talkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Behavior;
        break;
      }

      // optional .pb.AdventureBehavior Behavior = 2;
      case 2: {
        if (tag == 18) {
         parse_Behavior:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_behavior()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InteractItemArr;
        break;
      }

      // repeated .pb.InteractItemInfo InteractItemArr = 3;
      case 3: {
        if (tag == 26) {
         parse_InteractItemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_interactitemarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_InteractItemArr;
        if (input->ExpectTag(32)) goto parse_AnswerId;
        break;
      }

      // optional uint32 AnswerId = 4;
      case 4: {
        if (tag == 32) {
         parse_AnswerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answerid_)));
          set_has_answerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AnswerStartTime;
        break;
      }

      // optional uint64 AnswerStartTime = 5;
      case 5: {
        if (tag == 40) {
         parse_AnswerStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &answerstarttime_)));
          set_has_answerstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BattleinfoId;
        break;
      }

      // optional uint32 BattleinfoId = 6;
      case 6: {
        if (tag == 48) {
         parse_BattleinfoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleinfoid_)));
          set_has_battleinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_BossLevel;
        break;
      }

      // optional uint32 BossLevel = 7;
      case 7: {
        if (tag == 56) {
         parse_BossLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosslevel_)));
          set_has_bosslevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ArmyFightForce;
        break;
      }

      // optional uint64 ArmyFightForce = 8;
      case 8: {
        if (tag == 64) {
         parse_ArmyFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &armyfightforce_)));
          set_has_armyfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureEventRet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureEventRet)
  return false;
#undef DO_
}

void TAdventureEventRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureEventRet)
  // optional uint32 TalkId = 1;
  if (has_talkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->talkid(), output);
  }

  // optional .pb.AdventureBehavior Behavior = 2;
  if (has_behavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->behavior(), output);
  }

  // repeated .pb.InteractItemInfo InteractItemArr = 3;
  for (int i = 0; i < this->interactitemarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->interactitemarr(i), output);
  }

  // optional uint32 AnswerId = 4;
  if (has_answerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->answerid(), output);
  }

  // optional uint64 AnswerStartTime = 5;
  if (has_answerstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->answerstarttime(), output);
  }

  // optional uint32 BattleinfoId = 6;
  if (has_battleinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battleinfoid(), output);
  }

  // optional uint32 BossLevel = 7;
  if (has_bosslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bosslevel(), output);
  }

  // optional uint64 ArmyFightForce = 8;
  if (has_armyfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->armyfightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureEventRet)
}

::google::protobuf::uint8* TAdventureEventRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureEventRet)
  // optional uint32 TalkId = 1;
  if (has_talkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->talkid(), target);
  }

  // optional .pb.AdventureBehavior Behavior = 2;
  if (has_behavior()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->behavior(), target);
  }

  // repeated .pb.InteractItemInfo InteractItemArr = 3;
  for (int i = 0; i < this->interactitemarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->interactitemarr(i), target);
  }

  // optional uint32 AnswerId = 4;
  if (has_answerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->answerid(), target);
  }

  // optional uint64 AnswerStartTime = 5;
  if (has_answerstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->answerstarttime(), target);
  }

  // optional uint32 BattleinfoId = 6;
  if (has_battleinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battleinfoid(), target);
  }

  // optional uint32 BossLevel = 7;
  if (has_bosslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bosslevel(), target);
  }

  // optional uint64 ArmyFightForce = 8;
  if (has_armyfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->armyfightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureEventRet)
  return target;
}

int TAdventureEventRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TalkId = 1;
    if (has_talkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talkid());
    }

    // optional .pb.AdventureBehavior Behavior = 2;
    if (has_behavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->behavior());
    }

    // optional uint32 AnswerId = 4;
    if (has_answerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answerid());
    }

    // optional uint64 AnswerStartTime = 5;
    if (has_answerstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->answerstarttime());
    }

    // optional uint32 BattleinfoId = 6;
    if (has_battleinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleinfoid());
    }

    // optional uint32 BossLevel = 7;
    if (has_bosslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosslevel());
    }

    // optional uint64 ArmyFightForce = 8;
    if (has_armyfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->armyfightforce());
    }

  }
  // repeated .pb.InteractItemInfo InteractItemArr = 3;
  total_size += 1 * this->interactitemarr_size();
  for (int i = 0; i < this->interactitemarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->interactitemarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureEventRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureEventRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureEventRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureEventRet::MergeFrom(const TAdventureEventRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  interactitemarr_.MergeFrom(from.interactitemarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_talkid()) {
      set_talkid(from.talkid());
    }
    if (from.has_behavior()) {
      mutable_behavior()->::pb::AdventureBehavior::MergeFrom(from.behavior());
    }
    if (from.has_answerid()) {
      set_answerid(from.answerid());
    }
    if (from.has_answerstarttime()) {
      set_answerstarttime(from.answerstarttime());
    }
    if (from.has_battleinfoid()) {
      set_battleinfoid(from.battleinfoid());
    }
    if (from.has_bosslevel()) {
      set_bosslevel(from.bosslevel());
    }
    if (from.has_armyfightforce()) {
      set_armyfightforce(from.armyfightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureEventRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureEventRet::CopyFrom(const TAdventureEventRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureEventRet::IsInitialized() const {

  return true;
}

void TAdventureEventRet::Swap(TAdventureEventRet* other) {
  if (other != this) {
    std::swap(talkid_, other->talkid_);
    std::swap(behavior_, other->behavior_);
    interactitemarr_.Swap(&other->interactitemarr_);
    std::swap(answerid_, other->answerid_);
    std::swap(answerstarttime_, other->answerstarttime_);
    std::swap(battleinfoid_, other->battleinfoid_);
    std::swap(bosslevel_, other->bosslevel_);
    std::swap(armyfightforce_, other->armyfightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureEventRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureEventRet_descriptor_;
  metadata.reflection = TAdventureEventRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureAttr::kAttrIdFieldNumber;
const int TAdventureAttr::kAttrNumFieldNumber;
#endif  // !_MSC_VER

TAdventureAttr::TAdventureAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureAttr)
}

void TAdventureAttr::InitAsDefaultInstance() {
}

TAdventureAttr::TAdventureAttr(const TAdventureAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureAttr)
}

void TAdventureAttr::SharedCtor() {
  _cached_size_ = 0;
  attrid_ = 0u;
  attrnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureAttr::~TAdventureAttr() {
  // @@protoc_insertion_point(destructor:pb.TAdventureAttr)
  SharedDtor();
}

void TAdventureAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureAttr_descriptor_;
}

const TAdventureAttr& TAdventureAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureAttr* TAdventureAttr::default_instance_ = NULL;

TAdventureAttr* TAdventureAttr::New() const {
  return new TAdventureAttr;
}

void TAdventureAttr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureAttr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attrid_, attrnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AttrId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AttrNum;
        break;
      }

      // optional uint32 AttrNum = 2;
      case 2: {
        if (tag == 16) {
         parse_AttrNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrnum_)));
          set_has_attrnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureAttr)
  return false;
#undef DO_
}

void TAdventureAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureAttr)
  // optional uint32 AttrId = 1;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrid(), output);
  }

  // optional uint32 AttrNum = 2;
  if (has_attrnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attrnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureAttr)
}

::google::protobuf::uint8* TAdventureAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureAttr)
  // optional uint32 AttrId = 1;
  if (has_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attrid(), target);
  }

  // optional uint32 AttrNum = 2;
  if (has_attrnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attrnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureAttr)
  return target;
}

int TAdventureAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AttrId = 1;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrid());
    }

    // optional uint32 AttrNum = 2;
    if (has_attrnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureAttr::MergeFrom(const TAdventureAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_attrnum()) {
      set_attrnum(from.attrnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureAttr::CopyFrom(const TAdventureAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureAttr::IsInitialized() const {

  return true;
}

void TAdventureAttr::Swap(TAdventureAttr* other) {
  if (other != this) {
    std::swap(attrid_, other->attrid_);
    std::swap(attrnum_, other->attrnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureAttr_descriptor_;
  metadata.reflection = TAdventureAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureBuff::kBuffTypeFieldNumber;
const int TAdventureBuff::kAttrArrFieldNumber;
const int TAdventureBuff::kHidFieldNumber;
#endif  // !_MSC_VER

TAdventureBuff::TAdventureBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureBuff)
}

void TAdventureBuff::InitAsDefaultInstance() {
}

TAdventureBuff::TAdventureBuff(const TAdventureBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureBuff)
}

void TAdventureBuff::SharedCtor() {
  _cached_size_ = 0;
  bufftype_ = 0u;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureBuff::~TAdventureBuff() {
  // @@protoc_insertion_point(destructor:pb.TAdventureBuff)
  SharedDtor();
}

void TAdventureBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureBuff_descriptor_;
}

const TAdventureBuff& TAdventureBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureBuff* TAdventureBuff::default_instance_ = NULL;

TAdventureBuff* TAdventureBuff::New() const {
  return new TAdventureBuff;
}

void TAdventureBuff::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureBuff*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bufftype_, hid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attrarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureBuff)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuffType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufftype_)));
          set_has_bufftype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AttrArr;
        break;
      }

      // repeated .pb.TAdventureAttr AttrArr = 2;
      case 2: {
        if (tag == 18) {
         parse_AttrArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AttrArr;
        if (input->ExpectTag(24)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 3;
      case 3: {
        if (tag == 24) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureBuff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureBuff)
  return false;
#undef DO_
}

void TAdventureBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureBuff)
  // optional uint32 BuffType = 1;
  if (has_bufftype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bufftype(), output);
  }

  // repeated .pb.TAdventureAttr AttrArr = 2;
  for (int i = 0; i < this->attrarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attrarr(i), output);
  }

  // optional uint32 Hid = 3;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureBuff)
}

::google::protobuf::uint8* TAdventureBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureBuff)
  // optional uint32 BuffType = 1;
  if (has_bufftype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bufftype(), target);
  }

  // repeated .pb.TAdventureAttr AttrArr = 2;
  for (int i = 0; i < this->attrarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attrarr(i), target);
  }

  // optional uint32 Hid = 3;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureBuff)
  return target;
}

int TAdventureBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuffType = 1;
    if (has_bufftype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufftype());
    }

    // optional uint32 Hid = 3;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  // repeated .pb.TAdventureAttr AttrArr = 2;
  total_size += 1 * this->attrarr_size();
  for (int i = 0; i < this->attrarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureBuff::MergeFrom(const TAdventureBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrarr_.MergeFrom(from.attrarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bufftype()) {
      set_bufftype(from.bufftype());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureBuff::CopyFrom(const TAdventureBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureBuff::IsInitialized() const {

  return true;
}

void TAdventureBuff::Swap(TAdventureBuff* other) {
  if (other != this) {
    std::swap(bufftype_, other->bufftype_);
    attrarr_.Swap(&other->attrarr_);
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureBuff_descriptor_;
  metadata.reflection = TAdventureBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventurePassBlock::kXFieldNumber;
const int TAdventurePassBlock::kYFieldNumber;
const int TAdventurePassBlock::kLayerIdxFieldNumber;
#endif  // !_MSC_VER

TAdventurePassBlock::TAdventurePassBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventurePassBlock)
}

void TAdventurePassBlock::InitAsDefaultInstance() {
}

TAdventurePassBlock::TAdventurePassBlock(const TAdventurePassBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventurePassBlock)
}

void TAdventurePassBlock::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  layeridx_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventurePassBlock::~TAdventurePassBlock() {
  // @@protoc_insertion_point(destructor:pb.TAdventurePassBlock)
  SharedDtor();
}

void TAdventurePassBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventurePassBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventurePassBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventurePassBlock_descriptor_;
}

const TAdventurePassBlock& TAdventurePassBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventurePassBlock* TAdventurePassBlock::default_instance_ = NULL;

TAdventurePassBlock* TAdventurePassBlock::New() const {
  return new TAdventurePassBlock;
}

void TAdventurePassBlock::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventurePassBlock*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, layeridx_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventurePassBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventurePassBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LayerIdx;
        break;
      }

      // optional uint32 LayerIdx = 3;
      case 3: {
        if (tag == 24) {
         parse_LayerIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layeridx_)));
          set_has_layeridx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventurePassBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventurePassBlock)
  return false;
#undef DO_
}

void TAdventurePassBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventurePassBlock)
  // optional int32 X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional uint32 LayerIdx = 3;
  if (has_layeridx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->layeridx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventurePassBlock)
}

::google::protobuf::uint8* TAdventurePassBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventurePassBlock)
  // optional int32 X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional uint32 LayerIdx = 3;
  if (has_layeridx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->layeridx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventurePassBlock)
  return target;
}

int TAdventurePassBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional uint32 LayerIdx = 3;
    if (has_layeridx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layeridx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventurePassBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventurePassBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventurePassBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventurePassBlock::MergeFrom(const TAdventurePassBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_layeridx()) {
      set_layeridx(from.layeridx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventurePassBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventurePassBlock::CopyFrom(const TAdventurePassBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventurePassBlock::IsInitialized() const {

  return true;
}

void TAdventurePassBlock::Swap(TAdventurePassBlock* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(layeridx_, other->layeridx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventurePassBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventurePassBlock_descriptor_;
  metadata.reflection = TAdventurePassBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureGetTeamRankUserInfo::kMemberUidFieldNumber;
const int TAdventureGetTeamRankUserInfo::kDamageValueFieldNumber;
const int TAdventureGetTeamRankUserInfo::kDoEventNumFieldNumber;
#endif  // !_MSC_VER

TAdventureGetTeamRankUserInfo::TAdventureGetTeamRankUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureGetTeamRankUserInfo)
}

void TAdventureGetTeamRankUserInfo::InitAsDefaultInstance() {
}

TAdventureGetTeamRankUserInfo::TAdventureGetTeamRankUserInfo(const TAdventureGetTeamRankUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureGetTeamRankUserInfo)
}

void TAdventureGetTeamRankUserInfo::SharedCtor() {
  _cached_size_ = 0;
  memberuid_ = GOOGLE_ULONGLONG(0);
  damagevalue_ = GOOGLE_ULONGLONG(0);
  doeventnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureGetTeamRankUserInfo::~TAdventureGetTeamRankUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureGetTeamRankUserInfo)
  SharedDtor();
}

void TAdventureGetTeamRankUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureGetTeamRankUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureGetTeamRankUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureGetTeamRankUserInfo_descriptor_;
}

const TAdventureGetTeamRankUserInfo& TAdventureGetTeamRankUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureGetTeamRankUserInfo* TAdventureGetTeamRankUserInfo::default_instance_ = NULL;

TAdventureGetTeamRankUserInfo* TAdventureGetTeamRankUserInfo::New() const {
  return new TAdventureGetTeamRankUserInfo;
}

void TAdventureGetTeamRankUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TAdventureGetTeamRankUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(memberuid_, doeventnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureGetTeamRankUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureGetTeamRankUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 MemberUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memberuid_)));
          set_has_memberuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DamageValue;
        break;
      }

      // optional uint64 DamageValue = 2;
      case 2: {
        if (tag == 16) {
         parse_DamageValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damagevalue_)));
          set_has_damagevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DoEventNum;
        break;
      }

      // optional uint32 DoEventNum = 3;
      case 3: {
        if (tag == 24) {
         parse_DoEventNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doeventnum_)));
          set_has_doeventnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureGetTeamRankUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureGetTeamRankUserInfo)
  return false;
#undef DO_
}

void TAdventureGetTeamRankUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureGetTeamRankUserInfo)
  // optional uint64 MemberUid = 1;
  if (has_memberuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->memberuid(), output);
  }

  // optional uint64 DamageValue = 2;
  if (has_damagevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->damagevalue(), output);
  }

  // optional uint32 DoEventNum = 3;
  if (has_doeventnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->doeventnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureGetTeamRankUserInfo)
}

::google::protobuf::uint8* TAdventureGetTeamRankUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureGetTeamRankUserInfo)
  // optional uint64 MemberUid = 1;
  if (has_memberuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->memberuid(), target);
  }

  // optional uint64 DamageValue = 2;
  if (has_damagevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->damagevalue(), target);
  }

  // optional uint32 DoEventNum = 3;
  if (has_doeventnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->doeventnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureGetTeamRankUserInfo)
  return target;
}

int TAdventureGetTeamRankUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 MemberUid = 1;
    if (has_memberuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memberuid());
    }

    // optional uint64 DamageValue = 2;
    if (has_damagevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damagevalue());
    }

    // optional uint32 DoEventNum = 3;
    if (has_doeventnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->doeventnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureGetTeamRankUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureGetTeamRankUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureGetTeamRankUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureGetTeamRankUserInfo::MergeFrom(const TAdventureGetTeamRankUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_memberuid()) {
      set_memberuid(from.memberuid());
    }
    if (from.has_damagevalue()) {
      set_damagevalue(from.damagevalue());
    }
    if (from.has_doeventnum()) {
      set_doeventnum(from.doeventnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureGetTeamRankUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureGetTeamRankUserInfo::CopyFrom(const TAdventureGetTeamRankUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureGetTeamRankUserInfo::IsInitialized() const {

  return true;
}

void TAdventureGetTeamRankUserInfo::Swap(TAdventureGetTeamRankUserInfo* other) {
  if (other != this) {
    std::swap(memberuid_, other->memberuid_);
    std::swap(damagevalue_, other->damagevalue_);
    std::swap(doeventnum_, other->doeventnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureGetTeamRankUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureGetTeamRankUserInfo_descriptor_;
  metadata.reflection = TAdventureGetTeamRankUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TAdventureBattleMonsterInfo::kScreenIndexFieldNumber;
const int TAdventureBattleMonsterInfo::kMonsterArrFieldNumber;
#endif  // !_MSC_VER

TAdventureBattleMonsterInfo::TAdventureBattleMonsterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TAdventureBattleMonsterInfo)
}

void TAdventureBattleMonsterInfo::InitAsDefaultInstance() {
}

TAdventureBattleMonsterInfo::TAdventureBattleMonsterInfo(const TAdventureBattleMonsterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TAdventureBattleMonsterInfo)
}

void TAdventureBattleMonsterInfo::SharedCtor() {
  _cached_size_ = 0;
  screenindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TAdventureBattleMonsterInfo::~TAdventureBattleMonsterInfo() {
  // @@protoc_insertion_point(destructor:pb.TAdventureBattleMonsterInfo)
  SharedDtor();
}

void TAdventureBattleMonsterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TAdventureBattleMonsterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TAdventureBattleMonsterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TAdventureBattleMonsterInfo_descriptor_;
}

const TAdventureBattleMonsterInfo& TAdventureBattleMonsterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fAdventureBase_2eproto();
  return *default_instance_;
}

TAdventureBattleMonsterInfo* TAdventureBattleMonsterInfo::default_instance_ = NULL;

TAdventureBattleMonsterInfo* TAdventureBattleMonsterInfo::New() const {
  return new TAdventureBattleMonsterInfo;
}

void TAdventureBattleMonsterInfo::Clear() {
  screenindex_ = 0u;
  monsterarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TAdventureBattleMonsterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TAdventureBattleMonsterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ScreenIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screenindex_)));
          set_has_screenindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MonsterArr;
        break;
      }

      // repeated .pb.TAdventureMonsterStatus MonsterArr = 2;
      case 2: {
        if (tag == 18) {
         parse_MonsterArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsterarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MonsterArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TAdventureBattleMonsterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TAdventureBattleMonsterInfo)
  return false;
#undef DO_
}

void TAdventureBattleMonsterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TAdventureBattleMonsterInfo)
  // optional uint32 ScreenIndex = 1;
  if (has_screenindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->screenindex(), output);
  }

  // repeated .pb.TAdventureMonsterStatus MonsterArr = 2;
  for (int i = 0; i < this->monsterarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsterarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TAdventureBattleMonsterInfo)
}

::google::protobuf::uint8* TAdventureBattleMonsterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TAdventureBattleMonsterInfo)
  // optional uint32 ScreenIndex = 1;
  if (has_screenindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->screenindex(), target);
  }

  // repeated .pb.TAdventureMonsterStatus MonsterArr = 2;
  for (int i = 0; i < this->monsterarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsterarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TAdventureBattleMonsterInfo)
  return target;
}

int TAdventureBattleMonsterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ScreenIndex = 1;
    if (has_screenindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screenindex());
    }

  }
  // repeated .pb.TAdventureMonsterStatus MonsterArr = 2;
  total_size += 1 * this->monsterarr_size();
  for (int i = 0; i < this->monsterarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsterarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TAdventureBattleMonsterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TAdventureBattleMonsterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TAdventureBattleMonsterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TAdventureBattleMonsterInfo::MergeFrom(const TAdventureBattleMonsterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  monsterarr_.MergeFrom(from.monsterarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_screenindex()) {
      set_screenindex(from.screenindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TAdventureBattleMonsterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TAdventureBattleMonsterInfo::CopyFrom(const TAdventureBattleMonsterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAdventureBattleMonsterInfo::IsInitialized() const {

  return true;
}

void TAdventureBattleMonsterInfo::Swap(TAdventureBattleMonsterInfo* other) {
  if (other != this) {
    std::swap(screenindex_, other->screenindex_);
    monsterarr_.Swap(&other->monsterarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TAdventureBattleMonsterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TAdventureBattleMonsterInfo_descriptor_;
  metadata.reflection = TAdventureBattleMonsterInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
