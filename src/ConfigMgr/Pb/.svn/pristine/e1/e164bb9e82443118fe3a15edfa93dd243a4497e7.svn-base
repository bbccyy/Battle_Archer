// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/BInstance.proto

#ifndef PROTOBUF_net_2fBInstance_2eproto__INCLUDED
#define PROTOBUF_net_2fBInstance_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fBInstance_2eproto();
void protobuf_AssignDesc_net_2fBInstance_2eproto();
void protobuf_ShutdownFile_net_2fBInstance_2eproto();

class TBStrongholdBattleInfo;
class TBStrongholdInfo;
class TBChapterStarRewardInfo;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TBStrongholdBattleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBStrongholdBattleInfo : public ::google::protobuf::Message {
 public:
  TBStrongholdBattleInfo();
  virtual ~TBStrongholdBattleInfo();

  TBStrongholdBattleInfo(const TBStrongholdBattleInfo& from);

  inline TBStrongholdBattleInfo& operator=(const TBStrongholdBattleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBStrongholdBattleInfo& default_instance();

  void Swap(TBStrongholdBattleInfo* other);

  // implements Message ----------------------------------------------

  TBStrongholdBattleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBStrongholdBattleInfo& from);
  void MergeFrom(const TBStrongholdBattleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 StrongholdBattleId = 1;
  inline bool has_strongholdbattleid() const;
  inline void clear_strongholdbattleid();
  static const int kStrongholdBattleIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBStrongholdBattleInfo</name>
  	<Function>
  		<name>strongholdbattleid</name>
  		<replaceName>StrongholdBattleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdbattleid</name>
  		<replaceName>StrongholdBattleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdbattleid</name>
  		<replaceName>StrongholdBattleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdbattleid() const;
  inline void set_strongholdbattleid(::google::protobuf::uint32 value);

  // optional uint32 ChallengeSuccessNum = 2;
  inline bool has_challengesuccessnum() const;
  inline void clear_challengesuccessnum();
  static const int kChallengeSuccessNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBStrongholdBattleInfo</name>
  	<Function>
  		<name>challengesuccessnum</name>
  		<replaceName>ChallengeSuccessNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengesuccessnum</name>
  		<replaceName>ChallengeSuccessNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengesuccessnum</name>
  		<replaceName>ChallengeSuccessNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengesuccessnum() const;
  inline void set_challengesuccessnum(::google::protobuf::uint32 value);

  // optional uint32 ChallengeCurrentNum = 3;
  inline bool has_challengecurrentnum() const;
  inline void clear_challengecurrentnum();
  static const int kChallengeCurrentNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBStrongholdBattleInfo</name>
  	<Function>
  		<name>challengecurrentnum</name>
  		<replaceName>ChallengeCurrentNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengecurrentnum</name>
  		<replaceName>ChallengeCurrentNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengecurrentnum</name>
  		<replaceName>ChallengeCurrentNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengecurrentnum() const;
  inline void set_challengecurrentnum(::google::protobuf::uint32 value);

  // optional uint32 StarNum = 4;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBStrongholdBattleInfo</name>
  	<Function>
  		<name>starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starnum() const;
  inline void set_starnum(::google::protobuf::uint32 value);

  // optional uint32 ChallengeNum = 5;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBStrongholdBattleInfo</name>
  	<Function>
  		<name>challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBStrongholdBattleInfo)
 private:
  inline void set_has_strongholdbattleid();
  inline void clear_has_strongholdbattleid();
  inline void set_has_challengesuccessnum();
  inline void clear_has_challengesuccessnum();
  inline void set_has_challengecurrentnum();
  inline void clear_has_challengecurrentnum();
  inline void set_has_starnum();
  inline void clear_has_starnum();
  inline void set_has_challengenum();
  inline void clear_has_challengenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 strongholdbattleid_;
  ::google::protobuf::uint32 challengesuccessnum_;
  ::google::protobuf::uint32 challengecurrentnum_;
  ::google::protobuf::uint32 starnum_;
  ::google::protobuf::uint32 challengenum_;
  friend void  protobuf_AddDesc_net_2fBInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBInstance_2eproto();

  void InitAsDefaultInstance();
  static TBStrongholdBattleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBStrongholdInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBStrongholdInfo : public ::google::protobuf::Message {
 public:
  TBStrongholdInfo();
  virtual ~TBStrongholdInfo();

  TBStrongholdInfo(const TBStrongholdInfo& from);

  inline TBStrongholdInfo& operator=(const TBStrongholdInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBStrongholdInfo& default_instance();

  void Swap(TBStrongholdInfo* other);

  // implements Message ----------------------------------------------

  TBStrongholdInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBStrongholdInfo& from);
  void MergeFrom(const TBStrongholdInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 StrongholdId = 1;
  inline bool has_strongholdid() const;
  inline void clear_strongholdid();
  static const int kStrongholdIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBStrongholdInfo</name>
  	<Function>
  		<name>strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_strongholdid</name>
  		<replaceName>StrongholdId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 strongholdid() const;
  inline void set_strongholdid(::google::protobuf::uint32 value);

  // repeated .pb.TBStrongholdBattleInfo BattleArray = 2;
  inline int battlearray_size() const;
  inline void clear_battlearray();
  static const int kBattleArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBStrongholdInfo</name>
  	<Function>
  		<name>battlearray</name>
  		<replaceName>BattleArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_battlearray</name>
  		<replaceName>BattleArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_battlearray</name>
  		<replaceName>BattleArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlearray</name>
  		<replaceName>BattleArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>battlearray_size</name>
  		<replaceName>BattleArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBStrongholdBattleInfo& battlearray(int index) const;
  inline ::pb::TBStrongholdBattleInfo* mutable_battlearray(int index);
  inline ::pb::TBStrongholdBattleInfo* add_battlearray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBStrongholdBattleInfo >&
      battlearray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBStrongholdBattleInfo >*
      mutable_battlearray();

  // optional uint64 FirstVictoryTime = 3;
  inline bool has_firstvictorytime() const;
  inline void clear_firstvictorytime();
  static const int kFirstVictoryTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBStrongholdInfo</name>
  	<Function>
  		<name>firstvictorytime</name>
  		<replaceName>FirstVictoryTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_firstvictorytime</name>
  		<replaceName>FirstVictoryTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_firstvictorytime</name>
  		<replaceName>FirstVictoryTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 firstvictorytime() const;
  inline void set_firstvictorytime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TBStrongholdInfo)
 private:
  inline void set_has_strongholdid();
  inline void clear_has_strongholdid();
  inline void set_has_firstvictorytime();
  inline void clear_has_firstvictorytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBStrongholdBattleInfo > battlearray_;
  ::google::protobuf::uint64 firstvictorytime_;
  ::google::protobuf::uint32 strongholdid_;
  friend void  protobuf_AddDesc_net_2fBInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBInstance_2eproto();

  void InitAsDefaultInstance();
  static TBStrongholdInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBChapterStarRewardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/BInstance.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBChapterStarRewardInfo : public ::google::protobuf::Message {
 public:
  TBChapterStarRewardInfo();
  virtual ~TBChapterStarRewardInfo();

  TBChapterStarRewardInfo(const TBChapterStarRewardInfo& from);

  inline TBChapterStarRewardInfo& operator=(const TBChapterStarRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBChapterStarRewardInfo& default_instance();

  void Swap(TBChapterStarRewardInfo* other);

  // implements Message ----------------------------------------------

  TBChapterStarRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBChapterStarRewardInfo& from);
  void MergeFrom(const TBChapterStarRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 StarNum = 1;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBChapterStarRewardInfo</name>
  	<Function>
  		<name>starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starnum</name>
  		<replaceName>StarNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starnum() const;
  inline void set_starnum(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 2;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBChapterStarRewardInfo</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TBChapterStarRewardInfo)
 private:
  inline void set_has_starnum();
  inline void clear_has_starnum();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint32 starnum_;
  friend void  protobuf_AddDesc_net_2fBInstance_2eproto();
  friend void protobuf_AssignDesc_net_2fBInstance_2eproto();
  friend void protobuf_ShutdownFile_net_2fBInstance_2eproto();

  void InitAsDefaultInstance();
  static TBChapterStarRewardInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TBStrongholdBattleInfo

// optional uint32 StrongholdBattleId = 1;
inline bool TBStrongholdBattleInfo::has_strongholdbattleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBStrongholdBattleInfo::set_has_strongholdbattleid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBStrongholdBattleInfo::clear_has_strongholdbattleid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBStrongholdBattleInfo::clear_strongholdbattleid() {
  strongholdbattleid_ = 0u;
  clear_has_strongholdbattleid();
}
inline ::google::protobuf::uint32 TBStrongholdBattleInfo::strongholdbattleid() const {
  // @@protoc_insertion_point(field_get:pb.TBStrongholdBattleInfo.StrongholdBattleId)
  return strongholdbattleid_;
}
inline void TBStrongholdBattleInfo::set_strongholdbattleid(::google::protobuf::uint32 value) {
  set_has_strongholdbattleid();
  strongholdbattleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBStrongholdBattleInfo.StrongholdBattleId)
}

// optional uint32 ChallengeSuccessNum = 2;
inline bool TBStrongholdBattleInfo::has_challengesuccessnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBStrongholdBattleInfo::set_has_challengesuccessnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBStrongholdBattleInfo::clear_has_challengesuccessnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBStrongholdBattleInfo::clear_challengesuccessnum() {
  challengesuccessnum_ = 0u;
  clear_has_challengesuccessnum();
}
inline ::google::protobuf::uint32 TBStrongholdBattleInfo::challengesuccessnum() const {
  // @@protoc_insertion_point(field_get:pb.TBStrongholdBattleInfo.ChallengeSuccessNum)
  return challengesuccessnum_;
}
inline void TBStrongholdBattleInfo::set_challengesuccessnum(::google::protobuf::uint32 value) {
  set_has_challengesuccessnum();
  challengesuccessnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBStrongholdBattleInfo.ChallengeSuccessNum)
}

// optional uint32 ChallengeCurrentNum = 3;
inline bool TBStrongholdBattleInfo::has_challengecurrentnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBStrongholdBattleInfo::set_has_challengecurrentnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBStrongholdBattleInfo::clear_has_challengecurrentnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBStrongholdBattleInfo::clear_challengecurrentnum() {
  challengecurrentnum_ = 0u;
  clear_has_challengecurrentnum();
}
inline ::google::protobuf::uint32 TBStrongholdBattleInfo::challengecurrentnum() const {
  // @@protoc_insertion_point(field_get:pb.TBStrongholdBattleInfo.ChallengeCurrentNum)
  return challengecurrentnum_;
}
inline void TBStrongholdBattleInfo::set_challengecurrentnum(::google::protobuf::uint32 value) {
  set_has_challengecurrentnum();
  challengecurrentnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBStrongholdBattleInfo.ChallengeCurrentNum)
}

// optional uint32 StarNum = 4;
inline bool TBStrongholdBattleInfo::has_starnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBStrongholdBattleInfo::set_has_starnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBStrongholdBattleInfo::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBStrongholdBattleInfo::clear_starnum() {
  starnum_ = 0u;
  clear_has_starnum();
}
inline ::google::protobuf::uint32 TBStrongholdBattleInfo::starnum() const {
  // @@protoc_insertion_point(field_get:pb.TBStrongholdBattleInfo.StarNum)
  return starnum_;
}
inline void TBStrongholdBattleInfo::set_starnum(::google::protobuf::uint32 value) {
  set_has_starnum();
  starnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBStrongholdBattleInfo.StarNum)
}

// optional uint32 ChallengeNum = 5;
inline bool TBStrongholdBattleInfo::has_challengenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBStrongholdBattleInfo::set_has_challengenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBStrongholdBattleInfo::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBStrongholdBattleInfo::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 TBStrongholdBattleInfo::challengenum() const {
  // @@protoc_insertion_point(field_get:pb.TBStrongholdBattleInfo.ChallengeNum)
  return challengenum_;
}
inline void TBStrongholdBattleInfo::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBStrongholdBattleInfo.ChallengeNum)
}

// -------------------------------------------------------------------

// TBStrongholdInfo

// optional uint32 StrongholdId = 1;
inline bool TBStrongholdInfo::has_strongholdid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBStrongholdInfo::set_has_strongholdid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBStrongholdInfo::clear_has_strongholdid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBStrongholdInfo::clear_strongholdid() {
  strongholdid_ = 0u;
  clear_has_strongholdid();
}
inline ::google::protobuf::uint32 TBStrongholdInfo::strongholdid() const {
  // @@protoc_insertion_point(field_get:pb.TBStrongholdInfo.StrongholdId)
  return strongholdid_;
}
inline void TBStrongholdInfo::set_strongholdid(::google::protobuf::uint32 value) {
  set_has_strongholdid();
  strongholdid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBStrongholdInfo.StrongholdId)
}

// repeated .pb.TBStrongholdBattleInfo BattleArray = 2;
inline int TBStrongholdInfo::battlearray_size() const {
  return battlearray_.size();
}
inline void TBStrongholdInfo::clear_battlearray() {
  battlearray_.Clear();
}
inline const ::pb::TBStrongholdBattleInfo& TBStrongholdInfo::battlearray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBStrongholdInfo.BattleArray)
  return battlearray_.Get(index);
}
inline ::pb::TBStrongholdBattleInfo* TBStrongholdInfo::mutable_battlearray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBStrongholdInfo.BattleArray)
  return battlearray_.Mutable(index);
}
inline ::pb::TBStrongholdBattleInfo* TBStrongholdInfo::add_battlearray() {
  // @@protoc_insertion_point(field_add:pb.TBStrongholdInfo.BattleArray)
  return battlearray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBStrongholdBattleInfo >&
TBStrongholdInfo::battlearray() const {
  // @@protoc_insertion_point(field_list:pb.TBStrongholdInfo.BattleArray)
  return battlearray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBStrongholdBattleInfo >*
TBStrongholdInfo::mutable_battlearray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBStrongholdInfo.BattleArray)
  return &battlearray_;
}

// optional uint64 FirstVictoryTime = 3;
inline bool TBStrongholdInfo::has_firstvictorytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBStrongholdInfo::set_has_firstvictorytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBStrongholdInfo::clear_has_firstvictorytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBStrongholdInfo::clear_firstvictorytime() {
  firstvictorytime_ = GOOGLE_ULONGLONG(0);
  clear_has_firstvictorytime();
}
inline ::google::protobuf::uint64 TBStrongholdInfo::firstvictorytime() const {
  // @@protoc_insertion_point(field_get:pb.TBStrongholdInfo.FirstVictoryTime)
  return firstvictorytime_;
}
inline void TBStrongholdInfo::set_firstvictorytime(::google::protobuf::uint64 value) {
  set_has_firstvictorytime();
  firstvictorytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBStrongholdInfo.FirstVictoryTime)
}

// -------------------------------------------------------------------

// TBChapterStarRewardInfo

// optional uint32 StarNum = 1;
inline bool TBChapterStarRewardInfo::has_starnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBChapterStarRewardInfo::set_has_starnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBChapterStarRewardInfo::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBChapterStarRewardInfo::clear_starnum() {
  starnum_ = 0u;
  clear_has_starnum();
}
inline ::google::protobuf::uint32 TBChapterStarRewardInfo::starnum() const {
  // @@protoc_insertion_point(field_get:pb.TBChapterStarRewardInfo.StarNum)
  return starnum_;
}
inline void TBChapterStarRewardInfo::set_starnum(::google::protobuf::uint32 value) {
  set_has_starnum();
  starnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBChapterStarRewardInfo.StarNum)
}

// optional uint64 RewardTime = 2;
inline bool TBChapterStarRewardInfo::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBChapterStarRewardInfo::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBChapterStarRewardInfo::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBChapterStarRewardInfo::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TBChapterStarRewardInfo::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TBChapterStarRewardInfo.RewardTime)
  return rewardtime_;
}
inline void TBChapterStarRewardInfo::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TBChapterStarRewardInfo.RewardTime)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fBInstance_2eproto__INCLUDED
