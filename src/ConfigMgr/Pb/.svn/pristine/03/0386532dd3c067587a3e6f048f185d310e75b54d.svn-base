// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActMergeServer.proto

#ifndef PROTOBUF_net_2fActMergeServer_2eproto__INCLUDED
#define PROTOBUF_net_2fActMergeServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActMergeServer_2eproto();
void protobuf_AssignDesc_net_2fActMergeServer_2eproto();
void protobuf_ShutdownFile_net_2fActMergeServer_2eproto();

class TActMergeServerGetInfoRsp;
class TActMergeServerGetMergeServerInfoRsp;
class TActMergeServerGetCompensationRewardReq;
class TActMergeServerGetCompensationRewardRsp;
class TActMergeServerGetDayRewardReq;
class TActMergeServerRMBInfo;
class TActMergeServerNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActMergeServerGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMergeServer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMergeServerGetInfoRsp : public ::google::protobuf::Message {
 public:
  TActMergeServerGetInfoRsp();
  virtual ~TActMergeServerGetInfoRsp();

  TActMergeServerGetInfoRsp(const TActMergeServerGetInfoRsp& from);

  inline TActMergeServerGetInfoRsp& operator=(const TActMergeServerGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMergeServerGetInfoRsp& default_instance();

  void Swap(TActMergeServerGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TActMergeServerGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMergeServerGetInfoRsp& from);
  void MergeFrom(const TActMergeServerGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AccuDayNum = 1;
  inline bool has_accudaynum() const;
  inline void clear_accudaynum();
  static const int kAccuDayNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerGetInfoRsp</name>
  	<Function>
  		<name>accudaynum</name>
  		<replaceName>AccuDayNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_accudaynum</name>
  		<replaceName>AccuDayNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_accudaynum</name>
  		<replaceName>AccuDayNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 accudaynum() const;
  inline void set_accudaynum(::google::protobuf::uint32 value);

  // repeated uint32 arrRewardDay = 2;
  inline int arrrewardday_size() const;
  inline void clear_arrrewardday();
  static const int kArrRewardDayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerGetInfoRsp</name>
  	<Function>
  		<name>arrrewardday</name>
  		<replaceName>arrRewardDay</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrewardday</name>
  		<replaceName>arrRewardDay</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrewardday</name>
  		<replaceName>arrRewardDay</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrewardday</name>
  		<replaceName>arrRewardDay</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrewardday_size</name>
  		<replaceName>arrRewardDay</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrrewardday(int index) const;
  inline void set_arrrewardday(int index, ::google::protobuf::uint32 value);
  inline void add_arrrewardday(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrrewardday() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrrewardday();

  // repeated .pb.TActMergeServerRMBInfo ArrInfo = 3;
  inline int arrinfo_size() const;
  inline void clear_arrinfo();
  static const int kArrInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerGetInfoRsp</name>
  	<Function>
  		<name>arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrinfo_size</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActMergeServerRMBInfo& arrinfo(int index) const;
  inline ::pb::TActMergeServerRMBInfo* mutable_arrinfo(int index);
  inline ::pb::TActMergeServerRMBInfo* add_arrinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActMergeServerRMBInfo >&
      arrinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActMergeServerRMBInfo >*
      mutable_arrinfo();

  // optional uint64 CompensationRewardTime = 4;
  inline bool has_compensationrewardtime() const;
  inline void clear_compensationrewardtime();
  static const int kCompensationRewardTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerGetInfoRsp</name>
  	<Function>
  		<name>compensationrewardtime</name>
  		<replaceName>CompensationRewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_compensationrewardtime</name>
  		<replaceName>CompensationRewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_compensationrewardtime</name>
  		<replaceName>CompensationRewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 compensationrewardtime() const;
  inline void set_compensationrewardtime(::google::protobuf::uint64 value);

  // optional uint64 MergeServerTime = 5;
  inline bool has_mergeservertime() const;
  inline void clear_mergeservertime();
  static const int kMergeServerTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerGetInfoRsp</name>
  	<Function>
  		<name>mergeservertime</name>
  		<replaceName>MergeServerTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mergeservertime</name>
  		<replaceName>MergeServerTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mergeservertime</name>
  		<replaceName>MergeServerTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mergeservertime() const;
  inline void set_mergeservertime(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward RewardArr = 6;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerGetInfoRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TActMergeServerGetInfoRsp)
 private:
  inline void set_has_accudaynum();
  inline void clear_has_accudaynum();
  inline void set_has_compensationrewardtime();
  inline void clear_has_compensationrewardtime();
  inline void set_has_mergeservertime();
  inline void clear_has_mergeservertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrrewardday_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActMergeServerRMBInfo > arrinfo_;
  ::google::protobuf::uint64 compensationrewardtime_;
  ::google::protobuf::uint64 mergeservertime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 accudaynum_;
  friend void  protobuf_AddDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_AssignDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMergeServer_2eproto();

  void InitAsDefaultInstance();
  static TActMergeServerGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMergeServerGetMergeServerInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMergeServer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMergeServerGetMergeServerInfoRsp : public ::google::protobuf::Message {
 public:
  TActMergeServerGetMergeServerInfoRsp();
  virtual ~TActMergeServerGetMergeServerInfoRsp();

  TActMergeServerGetMergeServerInfoRsp(const TActMergeServerGetMergeServerInfoRsp& from);

  inline TActMergeServerGetMergeServerInfoRsp& operator=(const TActMergeServerGetMergeServerInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMergeServerGetMergeServerInfoRsp& default_instance();

  void Swap(TActMergeServerGetMergeServerInfoRsp* other);

  // implements Message ----------------------------------------------

  TActMergeServerGetMergeServerInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMergeServerGetMergeServerInfoRsp& from);
  void MergeFrom(const TActMergeServerGetMergeServerInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ServerId = 1;
  inline int serverid_size() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerGetMergeServerInfoRsp</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>serverid_size</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid(int index) const;
  inline ::std::string* mutable_serverid(int index);
  inline void set_serverid(int index, const ::std::string& value);
  inline void set_serverid(int index, const char* value);
  inline void set_serverid(int index, const char* value, size_t size);
  inline ::std::string* add_serverid();
  inline void add_serverid(const ::std::string& value);
  inline void add_serverid(const char* value);
  inline void add_serverid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& serverid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_serverid();

  // @@protoc_insertion_point(class_scope:pb.TActMergeServerGetMergeServerInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> serverid_;
  friend void  protobuf_AddDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_AssignDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMergeServer_2eproto();

  void InitAsDefaultInstance();
  static TActMergeServerGetMergeServerInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMergeServerGetCompensationRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMergeServer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMergeServerGetCompensationRewardReq : public ::google::protobuf::Message {
 public:
  TActMergeServerGetCompensationRewardReq();
  virtual ~TActMergeServerGetCompensationRewardReq();

  TActMergeServerGetCompensationRewardReq(const TActMergeServerGetCompensationRewardReq& from);

  inline TActMergeServerGetCompensationRewardReq& operator=(const TActMergeServerGetCompensationRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMergeServerGetCompensationRewardReq& default_instance();

  void Swap(TActMergeServerGetCompensationRewardReq* other);

  // implements Message ----------------------------------------------

  TActMergeServerGetCompensationRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMergeServerGetCompensationRewardReq& from);
  void MergeFrom(const TActMergeServerGetCompensationRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardId = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerGetCompensationRewardReq</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActMergeServerGetCompensationRewardReq)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rewardid_;
  friend void  protobuf_AddDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_AssignDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMergeServer_2eproto();

  void InitAsDefaultInstance();
  static TActMergeServerGetCompensationRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMergeServerGetCompensationRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMergeServer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMergeServerGetCompensationRewardRsp : public ::google::protobuf::Message {
 public:
  TActMergeServerGetCompensationRewardRsp();
  virtual ~TActMergeServerGetCompensationRewardRsp();

  TActMergeServerGetCompensationRewardRsp(const TActMergeServerGetCompensationRewardRsp& from);

  inline TActMergeServerGetCompensationRewardRsp& operator=(const TActMergeServerGetCompensationRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMergeServerGetCompensationRewardRsp& default_instance();

  void Swap(TActMergeServerGetCompensationRewardRsp* other);

  // implements Message ----------------------------------------------

  TActMergeServerGetCompensationRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMergeServerGetCompensationRewardRsp& from);
  void MergeFrom(const TActMergeServerGetCompensationRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerGetCompensationRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TActMergeServerGetCompensationRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_AssignDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMergeServer_2eproto();

  void InitAsDefaultInstance();
  static TActMergeServerGetCompensationRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMergeServerGetDayRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMergeServer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMergeServerGetDayRewardReq : public ::google::protobuf::Message {
 public:
  TActMergeServerGetDayRewardReq();
  virtual ~TActMergeServerGetDayRewardReq();

  TActMergeServerGetDayRewardReq(const TActMergeServerGetDayRewardReq& from);

  inline TActMergeServerGetDayRewardReq& operator=(const TActMergeServerGetDayRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMergeServerGetDayRewardReq& default_instance();

  void Swap(TActMergeServerGetDayRewardReq* other);

  // implements Message ----------------------------------------------

  TActMergeServerGetDayRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMergeServerGetDayRewardReq& from);
  void MergeFrom(const TActMergeServerGetDayRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Day = 1;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerGetDayRewardReq</name>
  	<Function>
  		<name>day</name>
  		<replaceName>Day</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_day</name>
  		<replaceName>Day</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_day</name>
  		<replaceName>Day</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 day() const;
  inline void set_day(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActMergeServerGetDayRewardReq)
 private:
  inline void set_has_day();
  inline void clear_has_day();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 day_;
  friend void  protobuf_AddDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_AssignDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMergeServer_2eproto();

  void InitAsDefaultInstance();
  static TActMergeServerGetDayRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMergeServerRMBInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMergeServer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMergeServerRMBInfo : public ::google::protobuf::Message {
 public:
  TActMergeServerRMBInfo();
  virtual ~TActMergeServerRMBInfo();

  TActMergeServerRMBInfo(const TActMergeServerRMBInfo& from);

  inline TActMergeServerRMBInfo& operator=(const TActMergeServerRMBInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMergeServerRMBInfo& default_instance();

  void Swap(TActMergeServerRMBInfo* other);

  // implements Message ----------------------------------------------

  TActMergeServerRMBInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMergeServerRMBInfo& from);
  void MergeFrom(const TActMergeServerRMBInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerRMBInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerRMBInfo</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActMergeServerRMBInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_AssignDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMergeServer_2eproto();

  void InitAsDefaultInstance();
  static TActMergeServerRMBInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActMergeServerNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActMergeServer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActMergeServerNotify : public ::google::protobuf::Message {
 public:
  TActMergeServerNotify();
  virtual ~TActMergeServerNotify();

  TActMergeServerNotify(const TActMergeServerNotify& from);

  inline TActMergeServerNotify& operator=(const TActMergeServerNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActMergeServerNotify& default_instance();

  void Swap(TActMergeServerNotify* other);

  // implements Message ----------------------------------------------

  TActMergeServerNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActMergeServerNotify& from);
  void MergeFrom(const TActMergeServerNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActMergeServerRMBInfo ArrInfo = 1;
  inline int arrinfo_size() const;
  inline void clear_arrinfo();
  static const int kArrInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActMergeServerNotify</name>
  	<Function>
  		<name>arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrinfo</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrinfo_size</name>
  		<replaceName>ArrInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActMergeServerRMBInfo& arrinfo(int index) const;
  inline ::pb::TActMergeServerRMBInfo* mutable_arrinfo(int index);
  inline ::pb::TActMergeServerRMBInfo* add_arrinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActMergeServerRMBInfo >&
      arrinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActMergeServerRMBInfo >*
      mutable_arrinfo();

  // @@protoc_insertion_point(class_scope:pb.TActMergeServerNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActMergeServerRMBInfo > arrinfo_;
  friend void  protobuf_AddDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_AssignDesc_net_2fActMergeServer_2eproto();
  friend void protobuf_ShutdownFile_net_2fActMergeServer_2eproto();

  void InitAsDefaultInstance();
  static TActMergeServerNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActMergeServerGetInfoRsp

// optional uint32 AccuDayNum = 1;
inline bool TActMergeServerGetInfoRsp::has_accudaynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMergeServerGetInfoRsp::set_has_accudaynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMergeServerGetInfoRsp::clear_has_accudaynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMergeServerGetInfoRsp::clear_accudaynum() {
  accudaynum_ = 0u;
  clear_has_accudaynum();
}
inline ::google::protobuf::uint32 TActMergeServerGetInfoRsp::accudaynum() const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerGetInfoRsp.AccuDayNum)
  return accudaynum_;
}
inline void TActMergeServerGetInfoRsp::set_accudaynum(::google::protobuf::uint32 value) {
  set_has_accudaynum();
  accudaynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMergeServerGetInfoRsp.AccuDayNum)
}

// repeated uint32 arrRewardDay = 2;
inline int TActMergeServerGetInfoRsp::arrrewardday_size() const {
  return arrrewardday_.size();
}
inline void TActMergeServerGetInfoRsp::clear_arrrewardday() {
  arrrewardday_.Clear();
}
inline ::google::protobuf::uint32 TActMergeServerGetInfoRsp::arrrewardday(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerGetInfoRsp.arrRewardDay)
  return arrrewardday_.Get(index);
}
inline void TActMergeServerGetInfoRsp::set_arrrewardday(int index, ::google::protobuf::uint32 value) {
  arrrewardday_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActMergeServerGetInfoRsp.arrRewardDay)
}
inline void TActMergeServerGetInfoRsp::add_arrrewardday(::google::protobuf::uint32 value) {
  arrrewardday_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActMergeServerGetInfoRsp.arrRewardDay)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActMergeServerGetInfoRsp::arrrewardday() const {
  // @@protoc_insertion_point(field_list:pb.TActMergeServerGetInfoRsp.arrRewardDay)
  return arrrewardday_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActMergeServerGetInfoRsp::mutable_arrrewardday() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMergeServerGetInfoRsp.arrRewardDay)
  return &arrrewardday_;
}

// repeated .pb.TActMergeServerRMBInfo ArrInfo = 3;
inline int TActMergeServerGetInfoRsp::arrinfo_size() const {
  return arrinfo_.size();
}
inline void TActMergeServerGetInfoRsp::clear_arrinfo() {
  arrinfo_.Clear();
}
inline const ::pb::TActMergeServerRMBInfo& TActMergeServerGetInfoRsp::arrinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerGetInfoRsp.ArrInfo)
  return arrinfo_.Get(index);
}
inline ::pb::TActMergeServerRMBInfo* TActMergeServerGetInfoRsp::mutable_arrinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActMergeServerGetInfoRsp.ArrInfo)
  return arrinfo_.Mutable(index);
}
inline ::pb::TActMergeServerRMBInfo* TActMergeServerGetInfoRsp::add_arrinfo() {
  // @@protoc_insertion_point(field_add:pb.TActMergeServerGetInfoRsp.ArrInfo)
  return arrinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActMergeServerRMBInfo >&
TActMergeServerGetInfoRsp::arrinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActMergeServerGetInfoRsp.ArrInfo)
  return arrinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActMergeServerRMBInfo >*
TActMergeServerGetInfoRsp::mutable_arrinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMergeServerGetInfoRsp.ArrInfo)
  return &arrinfo_;
}

// optional uint64 CompensationRewardTime = 4;
inline bool TActMergeServerGetInfoRsp::has_compensationrewardtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActMergeServerGetInfoRsp::set_has_compensationrewardtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActMergeServerGetInfoRsp::clear_has_compensationrewardtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActMergeServerGetInfoRsp::clear_compensationrewardtime() {
  compensationrewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_compensationrewardtime();
}
inline ::google::protobuf::uint64 TActMergeServerGetInfoRsp::compensationrewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerGetInfoRsp.CompensationRewardTime)
  return compensationrewardtime_;
}
inline void TActMergeServerGetInfoRsp::set_compensationrewardtime(::google::protobuf::uint64 value) {
  set_has_compensationrewardtime();
  compensationrewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMergeServerGetInfoRsp.CompensationRewardTime)
}

// optional uint64 MergeServerTime = 5;
inline bool TActMergeServerGetInfoRsp::has_mergeservertime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TActMergeServerGetInfoRsp::set_has_mergeservertime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TActMergeServerGetInfoRsp::clear_has_mergeservertime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TActMergeServerGetInfoRsp::clear_mergeservertime() {
  mergeservertime_ = GOOGLE_ULONGLONG(0);
  clear_has_mergeservertime();
}
inline ::google::protobuf::uint64 TActMergeServerGetInfoRsp::mergeservertime() const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerGetInfoRsp.MergeServerTime)
  return mergeservertime_;
}
inline void TActMergeServerGetInfoRsp::set_mergeservertime(::google::protobuf::uint64 value) {
  set_has_mergeservertime();
  mergeservertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMergeServerGetInfoRsp.MergeServerTime)
}

// repeated .pb.TCommonReward RewardArr = 6;
inline int TActMergeServerGetInfoRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActMergeServerGetInfoRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActMergeServerGetInfoRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerGetInfoRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActMergeServerGetInfoRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActMergeServerGetInfoRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActMergeServerGetInfoRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActMergeServerGetInfoRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActMergeServerGetInfoRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActMergeServerGetInfoRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActMergeServerGetInfoRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMergeServerGetInfoRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TActMergeServerGetMergeServerInfoRsp

// repeated string ServerId = 1;
inline int TActMergeServerGetMergeServerInfoRsp::serverid_size() const {
  return serverid_.size();
}
inline void TActMergeServerGetMergeServerInfoRsp::clear_serverid() {
  serverid_.Clear();
}
inline const ::std::string& TActMergeServerGetMergeServerInfoRsp::serverid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerGetMergeServerInfoRsp.ServerId)
  return serverid_.Get(index);
}
inline ::std::string* TActMergeServerGetMergeServerInfoRsp::mutable_serverid(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActMergeServerGetMergeServerInfoRsp.ServerId)
  return serverid_.Mutable(index);
}
inline void TActMergeServerGetMergeServerInfoRsp::set_serverid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TActMergeServerGetMergeServerInfoRsp.ServerId)
  serverid_.Mutable(index)->assign(value);
}
inline void TActMergeServerGetMergeServerInfoRsp::set_serverid(int index, const char* value) {
  serverid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TActMergeServerGetMergeServerInfoRsp.ServerId)
}
inline void TActMergeServerGetMergeServerInfoRsp::set_serverid(int index, const char* value, size_t size) {
  serverid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TActMergeServerGetMergeServerInfoRsp.ServerId)
}
inline ::std::string* TActMergeServerGetMergeServerInfoRsp::add_serverid() {
  return serverid_.Add();
}
inline void TActMergeServerGetMergeServerInfoRsp::add_serverid(const ::std::string& value) {
  serverid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TActMergeServerGetMergeServerInfoRsp.ServerId)
}
inline void TActMergeServerGetMergeServerInfoRsp::add_serverid(const char* value) {
  serverid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TActMergeServerGetMergeServerInfoRsp.ServerId)
}
inline void TActMergeServerGetMergeServerInfoRsp::add_serverid(const char* value, size_t size) {
  serverid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TActMergeServerGetMergeServerInfoRsp.ServerId)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TActMergeServerGetMergeServerInfoRsp::serverid() const {
  // @@protoc_insertion_point(field_list:pb.TActMergeServerGetMergeServerInfoRsp.ServerId)
  return serverid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TActMergeServerGetMergeServerInfoRsp::mutable_serverid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMergeServerGetMergeServerInfoRsp.ServerId)
  return &serverid_;
}

// -------------------------------------------------------------------

// TActMergeServerGetCompensationRewardReq

// optional uint32 RewardId = 1;
inline bool TActMergeServerGetCompensationRewardReq::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMergeServerGetCompensationRewardReq::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMergeServerGetCompensationRewardReq::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMergeServerGetCompensationRewardReq::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 TActMergeServerGetCompensationRewardReq::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerGetCompensationRewardReq.RewardId)
  return rewardid_;
}
inline void TActMergeServerGetCompensationRewardReq::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMergeServerGetCompensationRewardReq.RewardId)
}

// -------------------------------------------------------------------

// TActMergeServerGetCompensationRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TActMergeServerGetCompensationRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActMergeServerGetCompensationRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActMergeServerGetCompensationRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerGetCompensationRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActMergeServerGetCompensationRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActMergeServerGetCompensationRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActMergeServerGetCompensationRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActMergeServerGetCompensationRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActMergeServerGetCompensationRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActMergeServerGetCompensationRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActMergeServerGetCompensationRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMergeServerGetCompensationRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TActMergeServerGetDayRewardReq

// optional uint32 Day = 1;
inline bool TActMergeServerGetDayRewardReq::has_day() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMergeServerGetDayRewardReq::set_has_day() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMergeServerGetDayRewardReq::clear_has_day() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMergeServerGetDayRewardReq::clear_day() {
  day_ = 0u;
  clear_has_day();
}
inline ::google::protobuf::uint32 TActMergeServerGetDayRewardReq::day() const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerGetDayRewardReq.Day)
  return day_;
}
inline void TActMergeServerGetDayRewardReq::set_day(::google::protobuf::uint32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMergeServerGetDayRewardReq.Day)
}

// -------------------------------------------------------------------

// TActMergeServerRMBInfo

// optional uint32 Id = 1;
inline bool TActMergeServerRMBInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActMergeServerRMBInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActMergeServerRMBInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActMergeServerRMBInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActMergeServerRMBInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerRMBInfo.Id)
  return id_;
}
inline void TActMergeServerRMBInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMergeServerRMBInfo.Id)
}

// optional uint32 BuyNum = 2;
inline bool TActMergeServerRMBInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActMergeServerRMBInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActMergeServerRMBInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActMergeServerRMBInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TActMergeServerRMBInfo::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerRMBInfo.BuyNum)
  return buynum_;
}
inline void TActMergeServerRMBInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActMergeServerRMBInfo.BuyNum)
}

// -------------------------------------------------------------------

// TActMergeServerNotify

// repeated .pb.TActMergeServerRMBInfo ArrInfo = 1;
inline int TActMergeServerNotify::arrinfo_size() const {
  return arrinfo_.size();
}
inline void TActMergeServerNotify::clear_arrinfo() {
  arrinfo_.Clear();
}
inline const ::pb::TActMergeServerRMBInfo& TActMergeServerNotify::arrinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActMergeServerNotify.ArrInfo)
  return arrinfo_.Get(index);
}
inline ::pb::TActMergeServerRMBInfo* TActMergeServerNotify::mutable_arrinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActMergeServerNotify.ArrInfo)
  return arrinfo_.Mutable(index);
}
inline ::pb::TActMergeServerRMBInfo* TActMergeServerNotify::add_arrinfo() {
  // @@protoc_insertion_point(field_add:pb.TActMergeServerNotify.ArrInfo)
  return arrinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActMergeServerRMBInfo >&
TActMergeServerNotify::arrinfo() const {
  // @@protoc_insertion_point(field_list:pb.TActMergeServerNotify.ArrInfo)
  return arrinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActMergeServerRMBInfo >*
TActMergeServerNotify::mutable_arrinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActMergeServerNotify.ArrInfo)
  return &arrinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActMergeServer_2eproto__INCLUDED
