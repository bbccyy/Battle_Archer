// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CountryWar.proto

#ifndef PROTOBUF_net_2fCountryWar_2eproto__INCLUDED
#define PROTOBUF_net_2fCountryWar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCountryWar_2eproto();
void protobuf_AssignDesc_net_2fCountryWar_2eproto();
void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

class TCountryWarUserInfo;
class TCountryWarGuildInfo;
class TCountryWarGridInfo;
class TCountryWarGarrisonInfo;
class TCountryWarGridUserCityInfo;
class TCountryWarGridNpcBuildingInfo;
class TCountryWarHpInfo;
class TCountryWarGridFirstInfo;
class TCountryWarGridKillSiegeInfo;
class TCountryWarGridMonsterInfo;
class TCountryWarGridResourceInfo;
class TCountryWarGridTreasureInfo;
class TCountryWarMarchInfo;
class TCountryWarEnterCountryWarReq;
class TCountryWarEnterCountryWarRsp;
class TCountryWarGetMapInfoReq;
class TCountryWarGetMapInfoRsp;
class TCountryWarAttackReq;
class TCountryWarCollectResourceReq;
class TCountryWarSnatchResourceReq;
class TCountryWarCollectReturnReq;
class TCountryWarSearchTreasureReq;
class TCountryWarDigTreasureReq;
class TCountryWarGarrisonGridReq;
class TCountryWarTransportReq;
class TCountryWarInvestigateGridReq;
class TCountryWarMarchSpeedUpReq;
class TCountryWarMarchReturnReq;
class TCountryWarGarrisonReturnReq;
class TCountryWarDrawReturnReq;
class TCountryWarMoveCityReq;
class TCountryWarMoveCityRsp;
class TCountryWarInitiateAssemblyReq;
class TCountryWarCancelAssemblyReq;
class TCountryWarJoinAssemblyReq;
class TCountryWarLeaveAssemblyReq;
class TCountryWarAssemblyTeamHeroInfo;
class TCountryWarAssemblyTeamInfo;
class TCountryWarAssemblyUserInfo;
class TCountryWarAssemblyInfo;
class TCountryWarGetAssemblyListReq;
class TCountryWarGetAssemblyListRsp;
class TCountryWarGridNotify;
class TCountryWarMarchNotify;
class TCountryWarUserGuildInfoNotify;
class TCountryWarAssemblyNotify;

enum EMarchType {
  ATTACK_MONSTER = 1,
  ATTACK_NPCCITY = 2,
  ATTACK_NPCFORT = 3,
  ATTACK_USERCITY = 4,
  COLLECT = 5,
  COLLECTIONG = 6,
  SNATCH_COLLECT = 7,
  SNATCH_COLLECTING = 8,
  SEARCH_TREASURE = 9,
  SEARCHING = 10,
  DIG_TREASURE_CHEST = 11,
  DIG_TREASURE_MONSTER = 12,
  GARRISON = 13,
  ITEM_TRANSPORT = 14,
  RESOURCE_TRANSPORT = 15,
  INVESTIGATE = 16,
  ASSEMLY_ING = 17,
  JOIN_ASSEMBLY = 18,
  ASSEMBLY_ATTACK_MONSTER = 19,
  ASSEMBLY_ATTACK_NPCCITY = 20,
  ASSEMBLY_ATTACK_NPCFORT = 21,
  ASSEMBLY_ATTACK_USERCITY = 22,
  ASSEMBLY_TREASURE_MONSTER = 23,
  DRAW_ATTACK_NPCCITY = 24,
  DRAW_ATTACK_NPCFORT = 25,
  DRAW_ATTACK_USERCITY = 26,
  DRAW_ASSEMBLY_ATTACK_NPCCITY = 27,
  DRAW_ASSEMBLY_ATTACK_NPCFORT = 28,
  DRAW_ASSEMBLY_ATTACK_USERCITY = 29,
  DRAW_COLLECTIONG = 30,
  DRAW_SNATCH_COLLECT = 31,
  DRAW_SNATCH_COLLECTING = 32,
  RETURN = 99
};
bool EMarchType_IsValid(int value);
const EMarchType EMarchType_MIN = ATTACK_MONSTER;
const EMarchType EMarchType_MAX = RETURN;
const int EMarchType_ARRAYSIZE = EMarchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMarchType_descriptor();
inline const ::std::string& EMarchType_Name(EMarchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMarchType_descriptor(), value);
}
inline bool EMarchType_Parse(
    const ::std::string& name, EMarchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMarchType>(
    EMarchType_descriptor(), name, value);
}
enum EAssemblyStatus {
  IN_THE_ASSEMBLY = 1,
  FINISH_ASSEMBLY_MARCH = 2
};
bool EAssemblyStatus_IsValid(int value);
const EAssemblyStatus EAssemblyStatus_MIN = IN_THE_ASSEMBLY;
const EAssemblyStatus EAssemblyStatus_MAX = FINISH_ASSEMBLY_MARCH;
const int EAssemblyStatus_ARRAYSIZE = EAssemblyStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAssemblyStatus_descriptor();
inline const ::std::string& EAssemblyStatus_Name(EAssemblyStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAssemblyStatus_descriptor(), value);
}
inline bool EAssemblyStatus_Parse(
    const ::std::string& name, EAssemblyStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAssemblyStatus>(
    EAssemblyStatus_descriptor(), name, value);
}
enum EAssemblyTeamStatus {
  NOT_ARRIVED = 1,
  ARRIVED = 2,
  IN_DRAW = 3,
  FINISHED = 4
};
bool EAssemblyTeamStatus_IsValid(int value);
const EAssemblyTeamStatus EAssemblyTeamStatus_MIN = NOT_ARRIVED;
const EAssemblyTeamStatus EAssemblyTeamStatus_MAX = FINISHED;
const int EAssemblyTeamStatus_ARRAYSIZE = EAssemblyTeamStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAssemblyTeamStatus_descriptor();
inline const ::std::string& EAssemblyTeamStatus_Name(EAssemblyTeamStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAssemblyTeamStatus_descriptor(), value);
}
inline bool EAssemblyTeamStatus_Parse(
    const ::std::string& name, EAssemblyTeamStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAssemblyTeamStatus>(
    EAssemblyTeamStatus_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TCountryWarUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarUserInfo : public ::google::protobuf::Message {
 public:
  TCountryWarUserInfo();
  virtual ~TCountryWarUserInfo();

  TCountryWarUserInfo(const TCountryWarUserInfo& from);

  inline TCountryWarUserInfo& operator=(const TCountryWarUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarUserInfo& default_instance();

  void Swap(TCountryWarUserInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarUserInfo& from);
  void MergeFrom(const TCountryWarUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarUserInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarUserInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional string Uname = 3;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarUserInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint64 GuildId = 4;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarUserInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarUserInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_guildid();
  inline void clear_has_guildid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  ::std::string* uname_;
  ::google::protobuf::uint64 guildid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGuildInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGuildInfo : public ::google::protobuf::Message {
 public:
  TCountryWarGuildInfo();
  virtual ~TCountryWarGuildInfo();

  TCountryWarGuildInfo(const TCountryWarGuildInfo& from);

  inline TCountryWarGuildInfo& operator=(const TCountryWarGuildInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGuildInfo& default_instance();

  void Swap(TCountryWarGuildInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarGuildInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGuildInfo& from);
  void MergeFrom(const TCountryWarGuildInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGuildInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGuildInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional string GuildName = 3;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGuildInfo</name>
  	<Function>
  		<name>guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGuildInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* serverid_;
  ::std::string* guildname_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGuildInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGridInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGridInfo : public ::google::protobuf::Message {
 public:
  TCountryWarGridInfo();
  virtual ~TCountryWarGridInfo();

  TCountryWarGridInfo(const TCountryWarGridInfo& from);

  inline TCountryWarGridInfo& operator=(const TCountryWarGridInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGridInfo& default_instance();

  void Swap(TCountryWarGridInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarGridInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGridInfo& from);
  void MergeFrom(const TCountryWarGridInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GridIndex = 1;
  inline bool has_gridindex() const;
  inline void clear_gridindex();
  static const int kGridIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridInfo</name>
  	<Function>
  		<name>gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gridindex() const;
  inline void set_gridindex(::google::protobuf::uint32 value);

  // optional uint32 GridType = 2;
  inline bool has_gridtype() const;
  inline void clear_gridtype();
  static const int kGridTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridInfo</name>
  	<Function>
  		<name>gridtype</name>
  		<replaceName>GridType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridtype</name>
  		<replaceName>GridType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridtype</name>
  		<replaceName>GridType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gridtype() const;
  inline void set_gridtype(::google::protobuf::uint32 value);

  // optional .pb.TCountryWarGarrisonInfo GarrisonInfo = 3;
  inline bool has_garrisoninfo() const;
  inline void clear_garrisoninfo();
  static const int kGarrisonInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridInfo</name>
  	<Function>
  		<name>garrisoninfo</name>
  		<replaceName>GarrisonInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_garrisoninfo</name>
  		<replaceName>GarrisonInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_garrisoninfo</name>
  		<replaceName>GarrisonInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_garrisoninfo</name>
  		<replaceName>GarrisonInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGarrisonInfo& garrisoninfo() const;
  inline ::pb::TCountryWarGarrisonInfo* mutable_garrisoninfo();
  inline ::pb::TCountryWarGarrisonInfo* release_garrisoninfo();
  inline void set_allocated_garrisoninfo(::pb::TCountryWarGarrisonInfo* garrisoninfo);

  // optional .pb.TCountryWarGridUserCityInfo UserCityInfo = 4;
  inline bool has_usercityinfo() const;
  inline void clear_usercityinfo();
  static const int kUserCityInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridInfo</name>
  	<Function>
  		<name>usercityinfo</name>
  		<replaceName>UserCityInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usercityinfo</name>
  		<replaceName>UserCityInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_usercityinfo</name>
  		<replaceName>UserCityInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usercityinfo</name>
  		<replaceName>UserCityInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGridUserCityInfo& usercityinfo() const;
  inline ::pb::TCountryWarGridUserCityInfo* mutable_usercityinfo();
  inline ::pb::TCountryWarGridUserCityInfo* release_usercityinfo();
  inline void set_allocated_usercityinfo(::pb::TCountryWarGridUserCityInfo* usercityinfo);

  // optional .pb.TCountryWarGridNpcBuildingInfo NpcCityInfo = 5;
  inline bool has_npccityinfo() const;
  inline void clear_npccityinfo();
  static const int kNpcCityInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridInfo</name>
  	<Function>
  		<name>npccityinfo</name>
  		<replaceName>NpcCityInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_npccityinfo</name>
  		<replaceName>NpcCityInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_npccityinfo</name>
  		<replaceName>NpcCityInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_npccityinfo</name>
  		<replaceName>NpcCityInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGridNpcBuildingInfo& npccityinfo() const;
  inline ::pb::TCountryWarGridNpcBuildingInfo* mutable_npccityinfo();
  inline ::pb::TCountryWarGridNpcBuildingInfo* release_npccityinfo();
  inline void set_allocated_npccityinfo(::pb::TCountryWarGridNpcBuildingInfo* npccityinfo);

  // optional .pb.TCountryWarGridNpcBuildingInfo NpcFortInfo = 6;
  inline bool has_npcfortinfo() const;
  inline void clear_npcfortinfo();
  static const int kNpcFortInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridInfo</name>
  	<Function>
  		<name>npcfortinfo</name>
  		<replaceName>NpcFortInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_npcfortinfo</name>
  		<replaceName>NpcFortInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_npcfortinfo</name>
  		<replaceName>NpcFortInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_npcfortinfo</name>
  		<replaceName>NpcFortInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGridNpcBuildingInfo& npcfortinfo() const;
  inline ::pb::TCountryWarGridNpcBuildingInfo* mutable_npcfortinfo();
  inline ::pb::TCountryWarGridNpcBuildingInfo* release_npcfortinfo();
  inline void set_allocated_npcfortinfo(::pb::TCountryWarGridNpcBuildingInfo* npcfortinfo);

  // optional .pb.TCountryWarGridMonsterInfo MonsterInfo = 7;
  inline bool has_monsterinfo() const;
  inline void clear_monsterinfo();
  static const int kMonsterInfoFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridInfo</name>
  	<Function>
  		<name>monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterinfo</name>
  		<replaceName>MonsterInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGridMonsterInfo& monsterinfo() const;
  inline ::pb::TCountryWarGridMonsterInfo* mutable_monsterinfo();
  inline ::pb::TCountryWarGridMonsterInfo* release_monsterinfo();
  inline void set_allocated_monsterinfo(::pb::TCountryWarGridMonsterInfo* monsterinfo);

  // optional .pb.TCountryWarGridResourceInfo ResourceInfo = 8;
  inline bool has_resourceinfo() const;
  inline void clear_resourceinfo();
  static const int kResourceInfoFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridInfo</name>
  	<Function>
  		<name>resourceinfo</name>
  		<replaceName>ResourceInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resourceinfo</name>
  		<replaceName>ResourceInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_resourceinfo</name>
  		<replaceName>ResourceInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourceinfo</name>
  		<replaceName>ResourceInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGridResourceInfo& resourceinfo() const;
  inline ::pb::TCountryWarGridResourceInfo* mutable_resourceinfo();
  inline ::pb::TCountryWarGridResourceInfo* release_resourceinfo();
  inline void set_allocated_resourceinfo(::pb::TCountryWarGridResourceInfo* resourceinfo);

  // optional .pb.TCountryWarGridTreasureInfo TreasureInfo = 9;
  inline bool has_treasureinfo() const;
  inline void clear_treasureinfo();
  static const int kTreasureInfoFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridInfo</name>
  	<Function>
  		<name>treasureinfo</name>
  		<replaceName>TreasureInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_treasureinfo</name>
  		<replaceName>TreasureInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_treasureinfo</name>
  		<replaceName>TreasureInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasureinfo</name>
  		<replaceName>TreasureInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGridTreasureInfo& treasureinfo() const;
  inline ::pb::TCountryWarGridTreasureInfo* mutable_treasureinfo();
  inline ::pb::TCountryWarGridTreasureInfo* release_treasureinfo();
  inline void set_allocated_treasureinfo(::pb::TCountryWarGridTreasureInfo* treasureinfo);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGridInfo)
 private:
  inline void set_has_gridindex();
  inline void clear_has_gridindex();
  inline void set_has_gridtype();
  inline void clear_has_gridtype();
  inline void set_has_garrisoninfo();
  inline void clear_has_garrisoninfo();
  inline void set_has_usercityinfo();
  inline void clear_has_usercityinfo();
  inline void set_has_npccityinfo();
  inline void clear_has_npccityinfo();
  inline void set_has_npcfortinfo();
  inline void clear_has_npcfortinfo();
  inline void set_has_monsterinfo();
  inline void clear_has_monsterinfo();
  inline void set_has_resourceinfo();
  inline void clear_has_resourceinfo();
  inline void set_has_treasureinfo();
  inline void clear_has_treasureinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gridindex_;
  ::google::protobuf::uint32 gridtype_;
  ::pb::TCountryWarGarrisonInfo* garrisoninfo_;
  ::pb::TCountryWarGridUserCityInfo* usercityinfo_;
  ::pb::TCountryWarGridNpcBuildingInfo* npccityinfo_;
  ::pb::TCountryWarGridNpcBuildingInfo* npcfortinfo_;
  ::pb::TCountryWarGridMonsterInfo* monsterinfo_;
  ::pb::TCountryWarGridResourceInfo* resourceinfo_;
  ::pb::TCountryWarGridTreasureInfo* treasureinfo_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGridInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGarrisonInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGarrisonInfo : public ::google::protobuf::Message {
 public:
  TCountryWarGarrisonInfo();
  virtual ~TCountryWarGarrisonInfo();

  TCountryWarGarrisonInfo(const TCountryWarGarrisonInfo& from);

  inline TCountryWarGarrisonInfo& operator=(const TCountryWarGarrisonInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGarrisonInfo& default_instance();

  void Swap(TCountryWarGarrisonInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarGarrisonInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGarrisonInfo& from);
  void MergeFrom(const TCountryWarGarrisonInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GarrisonNum = 1;
  inline bool has_garrisonnum() const;
  inline void clear_garrisonnum();
  static const int kGarrisonNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGarrisonInfo</name>
  	<Function>
  		<name>garrisonnum</name>
  		<replaceName>GarrisonNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_garrisonnum</name>
  		<replaceName>GarrisonNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_garrisonnum</name>
  		<replaceName>GarrisonNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 garrisonnum() const;
  inline void set_garrisonnum(::google::protobuf::uint32 value);

  // optional uint64 LastestUid = 2;
  inline bool has_lastestuid() const;
  inline void clear_lastestuid();
  static const int kLastestUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGarrisonInfo</name>
  	<Function>
  		<name>lastestuid</name>
  		<replaceName>LastestUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastestuid</name>
  		<replaceName>LastestUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastestuid</name>
  		<replaceName>LastestUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastestuid() const;
  inline void set_lastestuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGarrisonInfo)
 private:
  inline void set_has_garrisonnum();
  inline void clear_has_garrisonnum();
  inline void set_has_lastestuid();
  inline void clear_has_lastestuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 lastestuid_;
  ::google::protobuf::uint32 garrisonnum_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGarrisonInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGridUserCityInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGridUserCityInfo : public ::google::protobuf::Message {
 public:
  TCountryWarGridUserCityInfo();
  virtual ~TCountryWarGridUserCityInfo();

  TCountryWarGridUserCityInfo(const TCountryWarGridUserCityInfo& from);

  inline TCountryWarGridUserCityInfo& operator=(const TCountryWarGridUserCityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGridUserCityInfo& default_instance();

  void Swap(TCountryWarGridUserCityInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarGridUserCityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGridUserCityInfo& from);
  void MergeFrom(const TCountryWarGridUserCityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridUserCityInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 CurrDur = 2;
  inline bool has_currdur() const;
  inline void clear_currdur();
  static const int kCurrDurFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridUserCityInfo</name>
  	<Function>
  		<name>currdur</name>
  		<replaceName>CurrDur</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currdur</name>
  		<replaceName>CurrDur</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currdur</name>
  		<replaceName>CurrDur</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 currdur() const;
  inline void set_currdur(::google::protobuf::uint32 value);

  // optional uint32 MaxDur = 3;
  inline bool has_maxdur() const;
  inline void clear_maxdur();
  static const int kMaxDurFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridUserCityInfo</name>
  	<Function>
  		<name>maxdur</name>
  		<replaceName>MaxDur</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxdur</name>
  		<replaceName>MaxDur</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxdur</name>
  		<replaceName>MaxDur</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxdur() const;
  inline void set_maxdur(::google::protobuf::uint32 value);

  // optional uint64 RecoverTime = 4;
  inline bool has_recovertime() const;
  inline void clear_recovertime();
  static const int kRecoverTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridUserCityInfo</name>
  	<Function>
  		<name>recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recovertime() const;
  inline void set_recovertime(::google::protobuf::uint64 value);

  // optional uint32 RecoverSpeed = 5;
  inline bool has_recoverspeed() const;
  inline void clear_recoverspeed();
  static const int kRecoverSpeedFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridUserCityInfo</name>
  	<Function>
  		<name>recoverspeed</name>
  		<replaceName>RecoverSpeed</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recoverspeed</name>
  		<replaceName>RecoverSpeed</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recoverspeed</name>
  		<replaceName>RecoverSpeed</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 recoverspeed() const;
  inline void set_recoverspeed(::google::protobuf::uint32 value);

  // optional uint32 CityLv = 6;
  inline bool has_citylv() const;
  inline void clear_citylv();
  static const int kCityLvFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridUserCityInfo</name>
  	<Function>
  		<name>citylv</name>
  		<replaceName>CityLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_citylv</name>
  		<replaceName>CityLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_citylv</name>
  		<replaceName>CityLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 citylv() const;
  inline void set_citylv(::google::protobuf::uint32 value);

  // optional bool IsFreeWar = 7;
  inline bool has_isfreewar() const;
  inline void clear_isfreewar();
  static const int kIsFreeWarFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridUserCityInfo</name>
  	<Function>
  		<name>isfreewar</name>
  		<replaceName>IsFreeWar</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isfreewar</name>
  		<replaceName>IsFreeWar</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isfreewar</name>
  		<replaceName>IsFreeWar</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isfreewar() const;
  inline void set_isfreewar(bool value);

  // optional uint64 WarEndTime = 8;
  inline bool has_warendtime() const;
  inline void clear_warendtime();
  static const int kWarEndTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridUserCityInfo</name>
  	<Function>
  		<name>warendtime</name>
  		<replaceName>WarEndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_warendtime</name>
  		<replaceName>WarEndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warendtime</name>
  		<replaceName>WarEndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 warendtime() const;
  inline void set_warendtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGridUserCityInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_currdur();
  inline void clear_has_currdur();
  inline void set_has_maxdur();
  inline void clear_has_maxdur();
  inline void set_has_recovertime();
  inline void clear_has_recovertime();
  inline void set_has_recoverspeed();
  inline void clear_has_recoverspeed();
  inline void set_has_citylv();
  inline void clear_has_citylv();
  inline void set_has_isfreewar();
  inline void clear_has_isfreewar();
  inline void set_has_warendtime();
  inline void clear_has_warendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 currdur_;
  ::google::protobuf::uint32 maxdur_;
  ::google::protobuf::uint64 recovertime_;
  ::google::protobuf::uint32 recoverspeed_;
  ::google::protobuf::uint32 citylv_;
  ::google::protobuf::uint64 warendtime_;
  bool isfreewar_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGridUserCityInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGridNpcBuildingInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGridNpcBuildingInfo : public ::google::protobuf::Message {
 public:
  TCountryWarGridNpcBuildingInfo();
  virtual ~TCountryWarGridNpcBuildingInfo();

  TCountryWarGridNpcBuildingInfo(const TCountryWarGridNpcBuildingInfo& from);

  inline TCountryWarGridNpcBuildingInfo& operator=(const TCountryWarGridNpcBuildingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGridNpcBuildingInfo& default_instance();

  void Swap(TCountryWarGridNpcBuildingInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarGridNpcBuildingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGridNpcBuildingInfo& from);
  void MergeFrom(const TCountryWarGridNpcBuildingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridNpcBuildingInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional uint64 OccupyTime = 2;
  inline bool has_occupytime() const;
  inline void clear_occupytime();
  static const int kOccupyTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridNpcBuildingInfo</name>
  	<Function>
  		<name>occupytime</name>
  		<replaceName>OccupyTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_occupytime</name>
  		<replaceName>OccupyTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_occupytime</name>
  		<replaceName>OccupyTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 occupytime() const;
  inline void set_occupytime(::google::protobuf::uint64 value);

  // optional uint32 CurrDur = 3;
  inline bool has_currdur() const;
  inline void clear_currdur();
  static const int kCurrDurFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridNpcBuildingInfo</name>
  	<Function>
  		<name>currdur</name>
  		<replaceName>CurrDur</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currdur</name>
  		<replaceName>CurrDur</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currdur</name>
  		<replaceName>CurrDur</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 currdur() const;
  inline void set_currdur(::google::protobuf::uint32 value);

  // optional uint64 RecoverTime = 4;
  inline bool has_recovertime() const;
  inline void clear_recovertime();
  static const int kRecoverTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridNpcBuildingInfo</name>
  	<Function>
  		<name>recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recovertime</name>
  		<replaceName>RecoverTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recovertime() const;
  inline void set_recovertime(::google::protobuf::uint64 value);

  // optional uint32 KilledNum = 5;
  inline bool has_killednum() const;
  inline void clear_killednum();
  static const int kKilledNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridNpcBuildingInfo</name>
  	<Function>
  		<name>killednum</name>
  		<replaceName>KilledNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_killednum</name>
  		<replaceName>KilledNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_killednum</name>
  		<replaceName>KilledNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 killednum() const;
  inline void set_killednum(::google::protobuf::uint32 value);

  // optional uint64 ResetTime = 6;
  inline bool has_resettime() const;
  inline void clear_resettime();
  static const int kResetTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridNpcBuildingInfo</name>
  	<Function>
  		<name>resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resettime</name>
  		<replaceName>ResetTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 resettime() const;
  inline void set_resettime(::google::protobuf::uint64 value);

  // repeated .pb.TCountryWarHpInfo GarrHpArray = 7;
  inline int garrhparray_size() const;
  inline void clear_garrhparray();
  static const int kGarrHpArrayFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridNpcBuildingInfo</name>
  	<Function>
  		<name>garrhparray</name>
  		<replaceName>GarrHpArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_garrhparray</name>
  		<replaceName>GarrHpArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_garrhparray</name>
  		<replaceName>GarrHpArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_garrhparray</name>
  		<replaceName>GarrHpArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>garrhparray_size</name>
  		<replaceName>GarrHpArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarHpInfo& garrhparray(int index) const;
  inline ::pb::TCountryWarHpInfo* mutable_garrhparray(int index);
  inline ::pb::TCountryWarHpInfo* add_garrhparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >&
      garrhparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >*
      mutable_garrhparray();

  // optional .pb.TCountryWarGridFirstInfo FirstInfo = 8;
  inline bool has_firstinfo() const;
  inline void clear_firstinfo();
  static const int kFirstInfoFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridNpcBuildingInfo</name>
  	<Function>
  		<name>firstinfo</name>
  		<replaceName>FirstInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_firstinfo</name>
  		<replaceName>FirstInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_firstinfo</name>
  		<replaceName>FirstInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_firstinfo</name>
  		<replaceName>FirstInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGridFirstInfo& firstinfo() const;
  inline ::pb::TCountryWarGridFirstInfo* mutable_firstinfo();
  inline ::pb::TCountryWarGridFirstInfo* release_firstinfo();
  inline void set_allocated_firstinfo(::pb::TCountryWarGridFirstInfo* firstinfo);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGridNpcBuildingInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_occupytime();
  inline void clear_has_occupytime();
  inline void set_has_currdur();
  inline void clear_has_currdur();
  inline void set_has_recovertime();
  inline void clear_has_recovertime();
  inline void set_has_killednum();
  inline void clear_has_killednum();
  inline void set_has_resettime();
  inline void clear_has_resettime();
  inline void set_has_firstinfo();
  inline void clear_has_firstinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::uint64 occupytime_;
  ::google::protobuf::uint64 recovertime_;
  ::google::protobuf::uint32 currdur_;
  ::google::protobuf::uint32 killednum_;
  ::google::protobuf::uint64 resettime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo > garrhparray_;
  ::pb::TCountryWarGridFirstInfo* firstinfo_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGridNpcBuildingInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarHpInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarHpInfo : public ::google::protobuf::Message {
 public:
  TCountryWarHpInfo();
  virtual ~TCountryWarHpInfo();

  TCountryWarHpInfo(const TCountryWarHpInfo& from);

  inline TCountryWarHpInfo& operator=(const TCountryWarHpInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarHpInfo& default_instance();

  void Swap(TCountryWarHpInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarHpInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarHpInfo& from);
  void MergeFrom(const TCountryWarHpInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Htid = 1;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarHpInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint32 HpNum = 2;
  inline bool has_hpnum() const;
  inline void clear_hpnum();
  static const int kHpNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarHpInfo</name>
  	<Function>
  		<name>hpnum</name>
  		<replaceName>HpNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hpnum</name>
  		<replaceName>HpNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hpnum</name>
  		<replaceName>HpNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hpnum() const;
  inline void set_hpnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarHpInfo)
 private:
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_hpnum();
  inline void clear_has_hpnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 hpnum_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarHpInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGridFirstInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGridFirstInfo : public ::google::protobuf::Message {
 public:
  TCountryWarGridFirstInfo();
  virtual ~TCountryWarGridFirstInfo();

  TCountryWarGridFirstInfo(const TCountryWarGridFirstInfo& from);

  inline TCountryWarGridFirstInfo& operator=(const TCountryWarGridFirstInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGridFirstInfo& default_instance();

  void Swap(TCountryWarGridFirstInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarGridFirstInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGridFirstInfo& from);
  void MergeFrom(const TCountryWarGridFirstInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 GuildId = 1;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridFirstInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string GuildName = 2;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridFirstInfo</name>
  	<Function>
  		<name>guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint64 OccupyTime = 3;
  inline bool has_occupytime() const;
  inline void clear_occupytime();
  static const int kOccupyTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridFirstInfo</name>
  	<Function>
  		<name>occupytime</name>
  		<replaceName>OccupyTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_occupytime</name>
  		<replaceName>OccupyTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_occupytime</name>
  		<replaceName>OccupyTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 occupytime() const;
  inline void set_occupytime(::google::protobuf::uint64 value);

  // repeated .pb.TCountryWarGridKillSiegeInfo FirstSiegeInfo = 4;
  inline int firstsiegeinfo_size() const;
  inline void clear_firstsiegeinfo();
  static const int kFirstSiegeInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridFirstInfo</name>
  	<Function>
  		<name>firstsiegeinfo</name>
  		<replaceName>FirstSiegeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_firstsiegeinfo</name>
  		<replaceName>FirstSiegeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_firstsiegeinfo</name>
  		<replaceName>FirstSiegeInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_firstsiegeinfo</name>
  		<replaceName>FirstSiegeInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>firstsiegeinfo_size</name>
  		<replaceName>FirstSiegeInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGridKillSiegeInfo& firstsiegeinfo(int index) const;
  inline ::pb::TCountryWarGridKillSiegeInfo* mutable_firstsiegeinfo(int index);
  inline ::pb::TCountryWarGridKillSiegeInfo* add_firstsiegeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridKillSiegeInfo >&
      firstsiegeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridKillSiegeInfo >*
      mutable_firstsiegeinfo();

  // repeated .pb.TCountryWarGridKillSiegeInfo FirstKillInfo = 5;
  inline int firstkillinfo_size() const;
  inline void clear_firstkillinfo();
  static const int kFirstKillInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridFirstInfo</name>
  	<Function>
  		<name>firstkillinfo</name>
  		<replaceName>FirstKillInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_firstkillinfo</name>
  		<replaceName>FirstKillInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_firstkillinfo</name>
  		<replaceName>FirstKillInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_firstkillinfo</name>
  		<replaceName>FirstKillInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>firstkillinfo_size</name>
  		<replaceName>FirstKillInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGridKillSiegeInfo& firstkillinfo(int index) const;
  inline ::pb::TCountryWarGridKillSiegeInfo* mutable_firstkillinfo(int index);
  inline ::pb::TCountryWarGridKillSiegeInfo* add_firstkillinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridKillSiegeInfo >&
      firstkillinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridKillSiegeInfo >*
      mutable_firstkillinfo();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGridFirstInfo)
 private:
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_occupytime();
  inline void clear_has_occupytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* guildname_;
  ::google::protobuf::uint64 occupytime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridKillSiegeInfo > firstsiegeinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridKillSiegeInfo > firstkillinfo_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGridFirstInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGridKillSiegeInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGridKillSiegeInfo : public ::google::protobuf::Message {
 public:
  TCountryWarGridKillSiegeInfo();
  virtual ~TCountryWarGridKillSiegeInfo();

  TCountryWarGridKillSiegeInfo(const TCountryWarGridKillSiegeInfo& from);

  inline TCountryWarGridKillSiegeInfo& operator=(const TCountryWarGridKillSiegeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGridKillSiegeInfo& default_instance();

  void Swap(TCountryWarGridKillSiegeInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarGridKillSiegeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGridKillSiegeInfo& from);
  void MergeFrom(const TCountryWarGridKillSiegeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridKillSiegeInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridKillSiegeInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridKillSiegeInfo</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGridKillSiegeInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGridKillSiegeInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGridMonsterInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGridMonsterInfo : public ::google::protobuf::Message {
 public:
  TCountryWarGridMonsterInfo();
  virtual ~TCountryWarGridMonsterInfo();

  TCountryWarGridMonsterInfo(const TCountryWarGridMonsterInfo& from);

  inline TCountryWarGridMonsterInfo& operator=(const TCountryWarGridMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGridMonsterInfo& default_instance();

  void Swap(TCountryWarGridMonsterInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarGridMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGridMonsterInfo& from);
  void MergeFrom(const TCountryWarGridMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCountryWarHpInfo MonsterHpArray = 1;
  inline int monsterhparray_size() const;
  inline void clear_monsterhparray();
  static const int kMonsterHpArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridMonsterInfo</name>
  	<Function>
  		<name>monsterhparray</name>
  		<replaceName>MonsterHpArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterhparray</name>
  		<replaceName>MonsterHpArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterhparray</name>
  		<replaceName>MonsterHpArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterhparray</name>
  		<replaceName>MonsterHpArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterhparray_size</name>
  		<replaceName>MonsterHpArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarHpInfo& monsterhparray(int index) const;
  inline ::pb::TCountryWarHpInfo* mutable_monsterhparray(int index);
  inline ::pb::TCountryWarHpInfo* add_monsterhparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >&
      monsterhparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >*
      mutable_monsterhparray();

  // optional uint64 StartTime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridMonsterInfo</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridMonsterInfo</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGridMonsterInfo)
 private:
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo > monsterhparray_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint64 endtime_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGridMonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGridResourceInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGridResourceInfo : public ::google::protobuf::Message {
 public:
  TCountryWarGridResourceInfo();
  virtual ~TCountryWarGridResourceInfo();

  TCountryWarGridResourceInfo(const TCountryWarGridResourceInfo& from);

  inline TCountryWarGridResourceInfo& operator=(const TCountryWarGridResourceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGridResourceInfo& default_instance();

  void Swap(TCountryWarGridResourceInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarGridResourceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGridResourceInfo& from);
  void MergeFrom(const TCountryWarGridResourceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ResourceNum = 1;
  inline bool has_resourcenum() const;
  inline void clear_resourcenum();
  static const int kResourceNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridResourceInfo</name>
  	<Function>
  		<name>resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_resourcenum</name>
  		<replaceName>ResourceNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 resourcenum() const;
  inline void set_resourcenum(::google::protobuf::uint32 value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridResourceInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 TeamId = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridResourceInfo</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint64 StartTime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridResourceInfo</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 5;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridResourceInfo</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGridResourceInfo)
 private:
  inline void set_has_resourcenum();
  inline void clear_has_resourcenum();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 resourcenum_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint64 endtime_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGridResourceInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGridTreasureInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGridTreasureInfo : public ::google::protobuf::Message {
 public:
  TCountryWarGridTreasureInfo();
  virtual ~TCountryWarGridTreasureInfo();

  TCountryWarGridTreasureInfo(const TCountryWarGridTreasureInfo& from);

  inline TCountryWarGridTreasureInfo& operator=(const TCountryWarGridTreasureInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGridTreasureInfo& default_instance();

  void Swap(TCountryWarGridTreasureInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarGridTreasureInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGridTreasureInfo& from);
  void MergeFrom(const TCountryWarGridTreasureInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 StartTime = 1;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridTreasureInfo</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 2;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridTreasureInfo</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint64 Uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridTreasureInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 TreasureId = 4;
  inline bool has_treasureid() const;
  inline void clear_treasureid();
  static const int kTreasureIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridTreasureInfo</name>
  	<Function>
  		<name>treasureid</name>
  		<replaceName>TreasureId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_treasureid</name>
  		<replaceName>TreasureId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_treasureid</name>
  		<replaceName>TreasureId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 treasureid() const;
  inline void set_treasureid(::google::protobuf::uint32 value);

  // repeated .pb.TCountryWarHpInfo MonsterHpArray = 5;
  inline int monsterhparray_size() const;
  inline void clear_monsterhparray();
  static const int kMonsterHpArrayFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridTreasureInfo</name>
  	<Function>
  		<name>monsterhparray</name>
  		<replaceName>MonsterHpArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterhparray</name>
  		<replaceName>MonsterHpArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterhparray</name>
  		<replaceName>MonsterHpArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterhparray</name>
  		<replaceName>MonsterHpArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterhparray_size</name>
  		<replaceName>MonsterHpArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarHpInfo& monsterhparray(int index) const;
  inline ::pb::TCountryWarHpInfo* mutable_monsterhparray(int index);
  inline ::pb::TCountryWarHpInfo* add_monsterhparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >&
      monsterhparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >*
      mutable_monsterhparray();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGridTreasureInfo)
 private:
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_treasureid();
  inline void clear_has_treasureid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo > monsterhparray_;
  ::google::protobuf::uint32 treasureid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGridTreasureInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarMarchInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarMarchInfo : public ::google::protobuf::Message {
 public:
  TCountryWarMarchInfo();
  virtual ~TCountryWarMarchInfo();

  TCountryWarMarchInfo(const TCountryWarMarchInfo& from);

  inline TCountryWarMarchInfo& operator=(const TCountryWarMarchInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarMarchInfo& default_instance();

  void Swap(TCountryWarMarchInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarMarchInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarMarchInfo& from);
  void MergeFrom(const TCountryWarMarchInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional .pb.EMarchType MarchType = 2;
  inline bool has_marchtype() const;
  inline void clear_marchtype();
  static const int kMarchTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchInfo</name>
  	<Function>
  		<name>marchtype</name>
  		<replaceName>MarchType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_marchtype</name>
  		<replaceName>MarchType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_marchtype</name>
  		<replaceName>MarchType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EMarchType marchtype() const;
  inline void set_marchtype(::pb::EMarchType value);

  // optional uint32 TeamId = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchInfo</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 StartGridIndex = 4;
  inline bool has_startgridindex() const;
  inline void clear_startgridindex();
  static const int kStartGridIndexFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchInfo</name>
  	<Function>
  		<name>startgridindex</name>
  		<replaceName>StartGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_startgridindex</name>
  		<replaceName>StartGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_startgridindex</name>
  		<replaceName>StartGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 startgridindex() const;
  inline void set_startgridindex(::google::protobuf::uint32 value);

  // optional uint32 EndGridIndex = 5;
  inline bool has_endgridindex() const;
  inline void clear_endgridindex();
  static const int kEndGridIndexFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchInfo</name>
  	<Function>
  		<name>endgridindex</name>
  		<replaceName>EndGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endgridindex</name>
  		<replaceName>EndGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endgridindex</name>
  		<replaceName>EndGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 endgridindex() const;
  inline void set_endgridindex(::google::protobuf::uint32 value);

  // optional uint64 StartTime = 6;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchInfo</name>
  	<Function>
  		<name>starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starttime</name>
  		<replaceName>StartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 starttime() const;
  inline void set_starttime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 7;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchInfo</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint64 SpeedUpTime = 8;
  inline bool has_speeduptime() const;
  inline void clear_speeduptime();
  static const int kSpeedUpTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchInfo</name>
  	<Function>
  		<name>speeduptime</name>
  		<replaceName>SpeedUpTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_speeduptime</name>
  		<replaceName>SpeedUpTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_speeduptime</name>
  		<replaceName>SpeedUpTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 speeduptime() const;
  inline void set_speeduptime(::google::protobuf::uint64 value);

  // optional uint32 DisPercent = 9;
  inline bool has_dispercent() const;
  inline void clear_dispercent();
  static const int kDisPercentFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchInfo</name>
  	<Function>
  		<name>dispercent</name>
  		<replaceName>DisPercent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dispercent</name>
  		<replaceName>DisPercent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dispercent</name>
  		<replaceName>DisPercent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 dispercent() const;
  inline void set_dispercent(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarMarchInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_marchtype();
  inline void clear_has_marchtype();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_startgridindex();
  inline void clear_has_startgridindex();
  inline void set_has_endgridindex();
  inline void clear_has_endgridindex();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_speeduptime();
  inline void clear_has_speeduptime();
  inline void set_has_dispercent();
  inline void clear_has_dispercent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  int marchtype_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 startgridindex_;
  ::google::protobuf::uint32 endgridindex_;
  ::google::protobuf::uint64 starttime_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint64 speeduptime_;
  ::google::protobuf::uint32 dispercent_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarMarchInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarEnterCountryWarReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarEnterCountryWarReq : public ::google::protobuf::Message {
 public:
  TCountryWarEnterCountryWarReq();
  virtual ~TCountryWarEnterCountryWarReq();

  TCountryWarEnterCountryWarReq(const TCountryWarEnterCountryWarReq& from);

  inline TCountryWarEnterCountryWarReq& operator=(const TCountryWarEnterCountryWarReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarEnterCountryWarReq& default_instance();

  void Swap(TCountryWarEnterCountryWarReq* other);

  // implements Message ----------------------------------------------

  TCountryWarEnterCountryWarReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarEnterCountryWarReq& from);
  void MergeFrom(const TCountryWarEnterCountryWarReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TCountryWarEnterCountryWarReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarEnterCountryWarReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarEnterCountryWarRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarEnterCountryWarRsp : public ::google::protobuf::Message {
 public:
  TCountryWarEnterCountryWarRsp();
  virtual ~TCountryWarEnterCountryWarRsp();

  TCountryWarEnterCountryWarRsp(const TCountryWarEnterCountryWarRsp& from);

  inline TCountryWarEnterCountryWarRsp& operator=(const TCountryWarEnterCountryWarRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarEnterCountryWarRsp& default_instance();

  void Swap(TCountryWarEnterCountryWarRsp* other);

  // implements Message ----------------------------------------------

  TCountryWarEnterCountryWarRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarEnterCountryWarRsp& from);
  void MergeFrom(const TCountryWarEnterCountryWarRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarEnterCountryWarRsp</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional uint32 GridIndex = 2;
  inline bool has_gridindex() const;
  inline void clear_gridindex();
  static const int kGridIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarEnterCountryWarRsp</name>
  	<Function>
  		<name>gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gridindex() const;
  inline void set_gridindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarEnterCountryWarRsp)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_gridindex();
  inline void clear_has_gridindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  ::google::protobuf::uint32 gridindex_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarEnterCountryWarRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGetMapInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGetMapInfoReq : public ::google::protobuf::Message {
 public:
  TCountryWarGetMapInfoReq();
  virtual ~TCountryWarGetMapInfoReq();

  TCountryWarGetMapInfoReq(const TCountryWarGetMapInfoReq& from);

  inline TCountryWarGetMapInfoReq& operator=(const TCountryWarGetMapInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGetMapInfoReq& default_instance();

  void Swap(TCountryWarGetMapInfoReq* other);

  // implements Message ----------------------------------------------

  TCountryWarGetMapInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGetMapInfoReq& from);
  void MergeFrom(const TCountryWarGetMapInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GridIndex = 1;
  inline bool has_gridindex() const;
  inline void clear_gridindex();
  static const int kGridIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGetMapInfoReq</name>
  	<Function>
  		<name>gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gridindex() const;
  inline void set_gridindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGetMapInfoReq)
 private:
  inline void set_has_gridindex();
  inline void clear_has_gridindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gridindex_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGetMapInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGetMapInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGetMapInfoRsp : public ::google::protobuf::Message {
 public:
  TCountryWarGetMapInfoRsp();
  virtual ~TCountryWarGetMapInfoRsp();

  TCountryWarGetMapInfoRsp(const TCountryWarGetMapInfoRsp& from);

  inline TCountryWarGetMapInfoRsp& operator=(const TCountryWarGetMapInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGetMapInfoRsp& default_instance();

  void Swap(TCountryWarGetMapInfoRsp* other);

  // implements Message ----------------------------------------------

  TCountryWarGetMapInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGetMapInfoRsp& from);
  void MergeFrom(const TCountryWarGetMapInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCountryWarGridInfo GridArr = 1;
  inline int gridarr_size() const;
  inline void clear_gridarr();
  static const int kGridArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGetMapInfoRsp</name>
  	<Function>
  		<name>gridarr</name>
  		<replaceName>GridArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_gridarr</name>
  		<replaceName>GridArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_gridarr</name>
  		<replaceName>GridArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridarr</name>
  		<replaceName>GridArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>gridarr_size</name>
  		<replaceName>GridArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGridInfo& gridarr(int index) const;
  inline ::pb::TCountryWarGridInfo* mutable_gridarr(int index);
  inline ::pb::TCountryWarGridInfo* add_gridarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridInfo >&
      gridarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridInfo >*
      mutable_gridarr();

  // repeated .pb.TCountryWarMarchInfo MarchArr = 2;
  inline int marcharr_size() const;
  inline void clear_marcharr();
  static const int kMarchArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGetMapInfoRsp</name>
  	<Function>
  		<name>marcharr</name>
  		<replaceName>MarchArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_marcharr</name>
  		<replaceName>MarchArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_marcharr</name>
  		<replaceName>MarchArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_marcharr</name>
  		<replaceName>MarchArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>marcharr_size</name>
  		<replaceName>MarchArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarMarchInfo& marcharr(int index) const;
  inline ::pb::TCountryWarMarchInfo* mutable_marcharr(int index);
  inline ::pb::TCountryWarMarchInfo* add_marcharr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarMarchInfo >&
      marcharr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarMarchInfo >*
      mutable_marcharr();

  // repeated .pb.TCountryWarUserInfo UserArr = 3;
  inline int userarr_size() const;
  inline void clear_userarr();
  static const int kUserArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGetMapInfoRsp</name>
  	<Function>
  		<name>userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userarr_size</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarUserInfo& userarr(int index) const;
  inline ::pb::TCountryWarUserInfo* mutable_userarr(int index);
  inline ::pb::TCountryWarUserInfo* add_userarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >&
      userarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >*
      mutable_userarr();

  // repeated .pb.TCountryWarGuildInfo GuildArr = 4;
  inline int guildarr_size() const;
  inline void clear_guildarr();
  static const int kGuildArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGetMapInfoRsp</name>
  	<Function>
  		<name>guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>guildarr_size</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGuildInfo& guildarr(int index) const;
  inline ::pb::TCountryWarGuildInfo* mutable_guildarr(int index);
  inline ::pb::TCountryWarGuildInfo* add_guildarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >&
      guildarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >*
      mutable_guildarr();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGetMapInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridInfo > gridarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarMarchInfo > marcharr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo > userarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo > guildarr_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGetMapInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarAttackReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarAttackReq : public ::google::protobuf::Message {
 public:
  TCountryWarAttackReq();
  virtual ~TCountryWarAttackReq();

  TCountryWarAttackReq(const TCountryWarAttackReq& from);

  inline TCountryWarAttackReq& operator=(const TCountryWarAttackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarAttackReq& default_instance();

  void Swap(TCountryWarAttackReq* other);

  // implements Message ----------------------------------------------

  TCountryWarAttackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarAttackReq& from);
  void MergeFrom(const TCountryWarAttackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TargetGridIndex = 1;
  inline bool has_targetgridindex() const;
  inline void clear_targetgridindex();
  static const int kTargetGridIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAttackReq</name>
  	<Function>
  		<name>targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetgridindex() const;
  inline void set_targetgridindex(::google::protobuf::uint32 value);

  // optional uint32 TeamId = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAttackReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarAttackReq)
 private:
  inline void set_has_targetgridindex();
  inline void clear_has_targetgridindex();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 targetgridindex_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarAttackReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarCollectResourceReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarCollectResourceReq : public ::google::protobuf::Message {
 public:
  TCountryWarCollectResourceReq();
  virtual ~TCountryWarCollectResourceReq();

  TCountryWarCollectResourceReq(const TCountryWarCollectResourceReq& from);

  inline TCountryWarCollectResourceReq& operator=(const TCountryWarCollectResourceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarCollectResourceReq& default_instance();

  void Swap(TCountryWarCollectResourceReq* other);

  // implements Message ----------------------------------------------

  TCountryWarCollectResourceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarCollectResourceReq& from);
  void MergeFrom(const TCountryWarCollectResourceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TargetGridIndex = 1;
  inline bool has_targetgridindex() const;
  inline void clear_targetgridindex();
  static const int kTargetGridIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarCollectResourceReq</name>
  	<Function>
  		<name>targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetgridindex() const;
  inline void set_targetgridindex(::google::protobuf::uint32 value);

  // optional uint32 TeamId = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarCollectResourceReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarCollectResourceReq)
 private:
  inline void set_has_targetgridindex();
  inline void clear_has_targetgridindex();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 targetgridindex_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarCollectResourceReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarSnatchResourceReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarSnatchResourceReq : public ::google::protobuf::Message {
 public:
  TCountryWarSnatchResourceReq();
  virtual ~TCountryWarSnatchResourceReq();

  TCountryWarSnatchResourceReq(const TCountryWarSnatchResourceReq& from);

  inline TCountryWarSnatchResourceReq& operator=(const TCountryWarSnatchResourceReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarSnatchResourceReq& default_instance();

  void Swap(TCountryWarSnatchResourceReq* other);

  // implements Message ----------------------------------------------

  TCountryWarSnatchResourceReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarSnatchResourceReq& from);
  void MergeFrom(const TCountryWarSnatchResourceReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TargetGridIndex = 1;
  inline bool has_targetgridindex() const;
  inline void clear_targetgridindex();
  static const int kTargetGridIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarSnatchResourceReq</name>
  	<Function>
  		<name>targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetgridindex() const;
  inline void set_targetgridindex(::google::protobuf::uint32 value);

  // optional uint32 TeamId = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarSnatchResourceReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarSnatchResourceReq)
 private:
  inline void set_has_targetgridindex();
  inline void clear_has_targetgridindex();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 targetgridindex_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarSnatchResourceReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarCollectReturnReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarCollectReturnReq : public ::google::protobuf::Message {
 public:
  TCountryWarCollectReturnReq();
  virtual ~TCountryWarCollectReturnReq();

  TCountryWarCollectReturnReq(const TCountryWarCollectReturnReq& from);

  inline TCountryWarCollectReturnReq& operator=(const TCountryWarCollectReturnReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarCollectReturnReq& default_instance();

  void Swap(TCountryWarCollectReturnReq* other);

  // implements Message ----------------------------------------------

  TCountryWarCollectReturnReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarCollectReturnReq& from);
  void MergeFrom(const TCountryWarCollectReturnReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarCollectReturnReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarCollectReturnReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarCollectReturnReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarSearchTreasureReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarSearchTreasureReq : public ::google::protobuf::Message {
 public:
  TCountryWarSearchTreasureReq();
  virtual ~TCountryWarSearchTreasureReq();

  TCountryWarSearchTreasureReq(const TCountryWarSearchTreasureReq& from);

  inline TCountryWarSearchTreasureReq& operator=(const TCountryWarSearchTreasureReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarSearchTreasureReq& default_instance();

  void Swap(TCountryWarSearchTreasureReq* other);

  // implements Message ----------------------------------------------

  TCountryWarSearchTreasureReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarSearchTreasureReq& from);
  void MergeFrom(const TCountryWarSearchTreasureReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TargetGridIndex = 1;
  inline bool has_targetgridindex() const;
  inline void clear_targetgridindex();
  static const int kTargetGridIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarSearchTreasureReq</name>
  	<Function>
  		<name>targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetgridindex() const;
  inline void set_targetgridindex(::google::protobuf::uint32 value);

  // repeated uint32 HidArr = 2;
  inline int hidarr_size() const;
  inline void clear_hidarr();
  static const int kHidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarSearchTreasureReq</name>
  	<Function>
  		<name>hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hidarr_size</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hidarr(int index) const;
  inline void set_hidarr(int index, ::google::protobuf::uint32 value);
  inline void add_hidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hidarr();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarSearchTreasureReq)
 private:
  inline void set_has_targetgridindex();
  inline void clear_has_targetgridindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hidarr_;
  ::google::protobuf::uint32 targetgridindex_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarSearchTreasureReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarDigTreasureReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarDigTreasureReq : public ::google::protobuf::Message {
 public:
  TCountryWarDigTreasureReq();
  virtual ~TCountryWarDigTreasureReq();

  TCountryWarDigTreasureReq(const TCountryWarDigTreasureReq& from);

  inline TCountryWarDigTreasureReq& operator=(const TCountryWarDigTreasureReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarDigTreasureReq& default_instance();

  void Swap(TCountryWarDigTreasureReq* other);

  // implements Message ----------------------------------------------

  TCountryWarDigTreasureReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarDigTreasureReq& from);
  void MergeFrom(const TCountryWarDigTreasureReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TargetGridIndex = 1;
  inline bool has_targetgridindex() const;
  inline void clear_targetgridindex();
  static const int kTargetGridIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarDigTreasureReq</name>
  	<Function>
  		<name>targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetgridindex() const;
  inline void set_targetgridindex(::google::protobuf::uint32 value);

  // optional uint32 TeamId = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarDigTreasureReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarDigTreasureReq)
 private:
  inline void set_has_targetgridindex();
  inline void clear_has_targetgridindex();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 targetgridindex_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarDigTreasureReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGarrisonGridReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGarrisonGridReq : public ::google::protobuf::Message {
 public:
  TCountryWarGarrisonGridReq();
  virtual ~TCountryWarGarrisonGridReq();

  TCountryWarGarrisonGridReq(const TCountryWarGarrisonGridReq& from);

  inline TCountryWarGarrisonGridReq& operator=(const TCountryWarGarrisonGridReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGarrisonGridReq& default_instance();

  void Swap(TCountryWarGarrisonGridReq* other);

  // implements Message ----------------------------------------------

  TCountryWarGarrisonGridReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGarrisonGridReq& from);
  void MergeFrom(const TCountryWarGarrisonGridReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TargetGridIndex = 1;
  inline bool has_targetgridindex() const;
  inline void clear_targetgridindex();
  static const int kTargetGridIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGarrisonGridReq</name>
  	<Function>
  		<name>targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetgridindex() const;
  inline void set_targetgridindex(::google::protobuf::uint32 value);

  // optional uint32 TeamId = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGarrisonGridReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGarrisonGridReq)
 private:
  inline void set_has_targetgridindex();
  inline void clear_has_targetgridindex();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 targetgridindex_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGarrisonGridReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarTransportReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarTransportReq : public ::google::protobuf::Message {
 public:
  TCountryWarTransportReq();
  virtual ~TCountryWarTransportReq();

  TCountryWarTransportReq(const TCountryWarTransportReq& from);

  inline TCountryWarTransportReq& operator=(const TCountryWarTransportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarTransportReq& default_instance();

  void Swap(TCountryWarTransportReq* other);

  // implements Message ----------------------------------------------

  TCountryWarTransportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarTransportReq& from);
  void MergeFrom(const TCountryWarTransportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TargetUid = 1;
  inline bool has_targetuid() const;
  inline void clear_targetuid();
  static const int kTargetUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarTransportReq</name>
  	<Function>
  		<name>targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetuid() const;
  inline void set_targetuid(::google::protobuf::uint64 value);

  // repeated uint32 HidArr = 2;
  inline int hidarr_size() const;
  inline void clear_hidarr();
  static const int kHidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarTransportReq</name>
  	<Function>
  		<name>hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hidarr_size</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hidarr(int index) const;
  inline void set_hidarr(int index, ::google::protobuf::uint32 value);
  inline void add_hidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hidarr();

  // repeated .pb.TCommonReward RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarTransportReq</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarTransportReq)
 private:
  inline void set_has_targetuid();
  inline void clear_has_targetuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetuid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hidarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarTransportReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarInvestigateGridReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarInvestigateGridReq : public ::google::protobuf::Message {
 public:
  TCountryWarInvestigateGridReq();
  virtual ~TCountryWarInvestigateGridReq();

  TCountryWarInvestigateGridReq(const TCountryWarInvestigateGridReq& from);

  inline TCountryWarInvestigateGridReq& operator=(const TCountryWarInvestigateGridReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarInvestigateGridReq& default_instance();

  void Swap(TCountryWarInvestigateGridReq* other);

  // implements Message ----------------------------------------------

  TCountryWarInvestigateGridReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarInvestigateGridReq& from);
  void MergeFrom(const TCountryWarInvestigateGridReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TargetGridIndex = 1;
  inline bool has_targetgridindex() const;
  inline void clear_targetgridindex();
  static const int kTargetGridIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarInvestigateGridReq</name>
  	<Function>
  		<name>targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetgridindex() const;
  inline void set_targetgridindex(::google::protobuf::uint32 value);

  // repeated uint32 HidArr = 2;
  inline int hidarr_size() const;
  inline void clear_hidarr();
  static const int kHidArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarInvestigateGridReq</name>
  	<Function>
  		<name>hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hidarr</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hidarr_size</name>
  		<replaceName>HidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hidarr(int index) const;
  inline void set_hidarr(int index, ::google::protobuf::uint32 value);
  inline void add_hidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      hidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_hidarr();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarInvestigateGridReq)
 private:
  inline void set_has_targetgridindex();
  inline void clear_has_targetgridindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > hidarr_;
  ::google::protobuf::uint32 targetgridindex_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarInvestigateGridReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarMarchSpeedUpReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarMarchSpeedUpReq : public ::google::protobuf::Message {
 public:
  TCountryWarMarchSpeedUpReq();
  virtual ~TCountryWarMarchSpeedUpReq();

  TCountryWarMarchSpeedUpReq(const TCountryWarMarchSpeedUpReq& from);

  inline TCountryWarMarchSpeedUpReq& operator=(const TCountryWarMarchSpeedUpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarMarchSpeedUpReq& default_instance();

  void Swap(TCountryWarMarchSpeedUpReq* other);

  // implements Message ----------------------------------------------

  TCountryWarMarchSpeedUpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarMarchSpeedUpReq& from);
  void MergeFrom(const TCountryWarMarchSpeedUpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchSpeedUpReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 ItemTid = 2;
  inline bool has_itemtid() const;
  inline void clear_itemtid();
  static const int kItemTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchSpeedUpReq</name>
  	<Function>
  		<name>itemtid</name>
  		<replaceName>ItemTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemtid</name>
  		<replaceName>ItemTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemtid</name>
  		<replaceName>ItemTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemtid() const;
  inline void set_itemtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarMarchSpeedUpReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_itemtid();
  inline void clear_has_itemtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 itemtid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarMarchSpeedUpReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarMarchReturnReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarMarchReturnReq : public ::google::protobuf::Message {
 public:
  TCountryWarMarchReturnReq();
  virtual ~TCountryWarMarchReturnReq();

  TCountryWarMarchReturnReq(const TCountryWarMarchReturnReq& from);

  inline TCountryWarMarchReturnReq& operator=(const TCountryWarMarchReturnReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarMarchReturnReq& default_instance();

  void Swap(TCountryWarMarchReturnReq* other);

  // implements Message ----------------------------------------------

  TCountryWarMarchReturnReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarMarchReturnReq& from);
  void MergeFrom(const TCountryWarMarchReturnReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchReturnReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarMarchReturnReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarMarchReturnReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGarrisonReturnReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGarrisonReturnReq : public ::google::protobuf::Message {
 public:
  TCountryWarGarrisonReturnReq();
  virtual ~TCountryWarGarrisonReturnReq();

  TCountryWarGarrisonReturnReq(const TCountryWarGarrisonReturnReq& from);

  inline TCountryWarGarrisonReturnReq& operator=(const TCountryWarGarrisonReturnReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGarrisonReturnReq& default_instance();

  void Swap(TCountryWarGarrisonReturnReq* other);

  // implements Message ----------------------------------------------

  TCountryWarGarrisonReturnReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGarrisonReturnReq& from);
  void MergeFrom(const TCountryWarGarrisonReturnReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGarrisonReturnReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGarrisonReturnReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGarrisonReturnReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarDrawReturnReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarDrawReturnReq : public ::google::protobuf::Message {
 public:
  TCountryWarDrawReturnReq();
  virtual ~TCountryWarDrawReturnReq();

  TCountryWarDrawReturnReq(const TCountryWarDrawReturnReq& from);

  inline TCountryWarDrawReturnReq& operator=(const TCountryWarDrawReturnReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarDrawReturnReq& default_instance();

  void Swap(TCountryWarDrawReturnReq* other);

  // implements Message ----------------------------------------------

  TCountryWarDrawReturnReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarDrawReturnReq& from);
  void MergeFrom(const TCountryWarDrawReturnReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarDrawReturnReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 GridIndex = 2;
  inline bool has_gridindex() const;
  inline void clear_gridindex();
  static const int kGridIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarDrawReturnReq</name>
  	<Function>
  		<name>gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gridindex() const;
  inline void set_gridindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarDrawReturnReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_gridindex();
  inline void clear_has_gridindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 gridindex_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarDrawReturnReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarMoveCityReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarMoveCityReq : public ::google::protobuf::Message {
 public:
  TCountryWarMoveCityReq();
  virtual ~TCountryWarMoveCityReq();

  TCountryWarMoveCityReq(const TCountryWarMoveCityReq& from);

  inline TCountryWarMoveCityReq& operator=(const TCountryWarMoveCityReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarMoveCityReq& default_instance();

  void Swap(TCountryWarMoveCityReq* other);

  // implements Message ----------------------------------------------

  TCountryWarMoveCityReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarMoveCityReq& from);
  void MergeFrom(const TCountryWarMoveCityReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsRand = 1;
  inline bool has_isrand() const;
  inline void clear_isrand();
  static const int kIsRandFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMoveCityReq</name>
  	<Function>
  		<name>isrand</name>
  		<replaceName>IsRand</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isrand</name>
  		<replaceName>IsRand</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isrand</name>
  		<replaceName>IsRand</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isrand() const;
  inline void set_isrand(bool value);

  // optional uint32 TargetGridIndex = 2;
  inline bool has_targetgridindex() const;
  inline void clear_targetgridindex();
  static const int kTargetGridIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMoveCityReq</name>
  	<Function>
  		<name>targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetgridindex() const;
  inline void set_targetgridindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarMoveCityReq)
 private:
  inline void set_has_isrand();
  inline void clear_has_isrand();
  inline void set_has_targetgridindex();
  inline void clear_has_targetgridindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool isrand_;
  ::google::protobuf::uint32 targetgridindex_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarMoveCityReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarMoveCityRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarMoveCityRsp : public ::google::protobuf::Message {
 public:
  TCountryWarMoveCityRsp();
  virtual ~TCountryWarMoveCityRsp();

  TCountryWarMoveCityRsp(const TCountryWarMoveCityRsp& from);

  inline TCountryWarMoveCityRsp& operator=(const TCountryWarMoveCityRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarMoveCityRsp& default_instance();

  void Swap(TCountryWarMoveCityRsp* other);

  // implements Message ----------------------------------------------

  TCountryWarMoveCityRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarMoveCityRsp& from);
  void MergeFrom(const TCountryWarMoveCityRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GridIndex = 1;
  inline bool has_gridindex() const;
  inline void clear_gridindex();
  static const int kGridIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMoveCityRsp</name>
  	<Function>
  		<name>gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gridindex() const;
  inline void set_gridindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarMoveCityRsp)
 private:
  inline void set_has_gridindex();
  inline void clear_has_gridindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 gridindex_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarMoveCityRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarInitiateAssemblyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarInitiateAssemblyReq : public ::google::protobuf::Message {
 public:
  TCountryWarInitiateAssemblyReq();
  virtual ~TCountryWarInitiateAssemblyReq();

  TCountryWarInitiateAssemblyReq(const TCountryWarInitiateAssemblyReq& from);

  inline TCountryWarInitiateAssemblyReq& operator=(const TCountryWarInitiateAssemblyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarInitiateAssemblyReq& default_instance();

  void Swap(TCountryWarInitiateAssemblyReq* other);

  // implements Message ----------------------------------------------

  TCountryWarInitiateAssemblyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarInitiateAssemblyReq& from);
  void MergeFrom(const TCountryWarInitiateAssemblyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarInitiateAssemblyReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 TargetGridIndex = 2;
  inline bool has_targetgridindex() const;
  inline void clear_targetgridindex();
  static const int kTargetGridIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarInitiateAssemblyReq</name>
  	<Function>
  		<name>targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetgridindex</name>
  		<replaceName>TargetGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetgridindex() const;
  inline void set_targetgridindex(::google::protobuf::uint32 value);

  // optional uint32 DurationTime = 3;
  inline bool has_durationtime() const;
  inline void clear_durationtime();
  static const int kDurationTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarInitiateAssemblyReq</name>
  	<Function>
  		<name>durationtime</name>
  		<replaceName>DurationTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_durationtime</name>
  		<replaceName>DurationTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_durationtime</name>
  		<replaceName>DurationTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 durationtime() const;
  inline void set_durationtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarInitiateAssemblyReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_targetgridindex();
  inline void clear_has_targetgridindex();
  inline void set_has_durationtime();
  inline void clear_has_durationtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 targetgridindex_;
  ::google::protobuf::uint32 durationtime_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarInitiateAssemblyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarCancelAssemblyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarCancelAssemblyReq : public ::google::protobuf::Message {
 public:
  TCountryWarCancelAssemblyReq();
  virtual ~TCountryWarCancelAssemblyReq();

  TCountryWarCancelAssemblyReq(const TCountryWarCancelAssemblyReq& from);

  inline TCountryWarCancelAssemblyReq& operator=(const TCountryWarCancelAssemblyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarCancelAssemblyReq& default_instance();

  void Swap(TCountryWarCancelAssemblyReq* other);

  // implements Message ----------------------------------------------

  TCountryWarCancelAssemblyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarCancelAssemblyReq& from);
  void MergeFrom(const TCountryWarCancelAssemblyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AssemblyId = 1;
  inline bool has_assemblyid() const;
  inline void clear_assemblyid();
  static const int kAssemblyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarCancelAssemblyReq</name>
  	<Function>
  		<name>assemblyid</name>
  		<replaceName>AssemblyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assemblyid</name>
  		<replaceName>AssemblyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assemblyid</name>
  		<replaceName>AssemblyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 assemblyid() const;
  inline void set_assemblyid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarCancelAssemblyReq)
 private:
  inline void set_has_assemblyid();
  inline void clear_has_assemblyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 assemblyid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarCancelAssemblyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarJoinAssemblyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarJoinAssemblyReq : public ::google::protobuf::Message {
 public:
  TCountryWarJoinAssemblyReq();
  virtual ~TCountryWarJoinAssemblyReq();

  TCountryWarJoinAssemblyReq(const TCountryWarJoinAssemblyReq& from);

  inline TCountryWarJoinAssemblyReq& operator=(const TCountryWarJoinAssemblyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarJoinAssemblyReq& default_instance();

  void Swap(TCountryWarJoinAssemblyReq* other);

  // implements Message ----------------------------------------------

  TCountryWarJoinAssemblyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarJoinAssemblyReq& from);
  void MergeFrom(const TCountryWarJoinAssemblyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AssemblyId = 1;
  inline bool has_assemblyid() const;
  inline void clear_assemblyid();
  static const int kAssemblyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarJoinAssemblyReq</name>
  	<Function>
  		<name>assemblyid</name>
  		<replaceName>AssemblyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assemblyid</name>
  		<replaceName>AssemblyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assemblyid</name>
  		<replaceName>AssemblyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 assemblyid() const;
  inline void set_assemblyid(::google::protobuf::uint32 value);

  // optional uint32 TeamId = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarJoinAssemblyReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarJoinAssemblyReq)
 private:
  inline void set_has_assemblyid();
  inline void clear_has_assemblyid();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 assemblyid_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarJoinAssemblyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarLeaveAssemblyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarLeaveAssemblyReq : public ::google::protobuf::Message {
 public:
  TCountryWarLeaveAssemblyReq();
  virtual ~TCountryWarLeaveAssemblyReq();

  TCountryWarLeaveAssemblyReq(const TCountryWarLeaveAssemblyReq& from);

  inline TCountryWarLeaveAssemblyReq& operator=(const TCountryWarLeaveAssemblyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarLeaveAssemblyReq& default_instance();

  void Swap(TCountryWarLeaveAssemblyReq* other);

  // implements Message ----------------------------------------------

  TCountryWarLeaveAssemblyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarLeaveAssemblyReq& from);
  void MergeFrom(const TCountryWarLeaveAssemblyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarLeaveAssemblyReq</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarLeaveAssemblyReq)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarLeaveAssemblyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarAssemblyTeamHeroInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarAssemblyTeamHeroInfo : public ::google::protobuf::Message {
 public:
  TCountryWarAssemblyTeamHeroInfo();
  virtual ~TCountryWarAssemblyTeamHeroInfo();

  TCountryWarAssemblyTeamHeroInfo(const TCountryWarAssemblyTeamHeroInfo& from);

  inline TCountryWarAssemblyTeamHeroInfo& operator=(const TCountryWarAssemblyTeamHeroInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarAssemblyTeamHeroInfo& default_instance();

  void Swap(TCountryWarAssemblyTeamHeroInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarAssemblyTeamHeroInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarAssemblyTeamHeroInfo& from);
  void MergeFrom(const TCountryWarAssemblyTeamHeroInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Htid = 1;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyTeamHeroInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint32 Level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyTeamHeroInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 Star = 3;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyTeamHeroInfo</name>
  	<Function>
  		<name>star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_star</name>
  		<replaceName>Star</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 star() const;
  inline void set_star(::google::protobuf::uint32 value);

  // optional uint32 TroopsNum = 4;
  inline bool has_troopsnum() const;
  inline void clear_troopsnum();
  static const int kTroopsNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyTeamHeroInfo</name>
  	<Function>
  		<name>troopsnum</name>
  		<replaceName>TroopsNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_troopsnum</name>
  		<replaceName>TroopsNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_troopsnum</name>
  		<replaceName>TroopsNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 troopsnum() const;
  inline void set_troopsnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarAssemblyTeamHeroInfo)
 private:
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_troopsnum();
  inline void clear_has_troopsnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 star_;
  ::google::protobuf::uint32 troopsnum_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarAssemblyTeamHeroInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarAssemblyTeamInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarAssemblyTeamInfo : public ::google::protobuf::Message {
 public:
  TCountryWarAssemblyTeamInfo();
  virtual ~TCountryWarAssemblyTeamInfo();

  TCountryWarAssemblyTeamInfo(const TCountryWarAssemblyTeamInfo& from);

  inline TCountryWarAssemblyTeamInfo& operator=(const TCountryWarAssemblyTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarAssemblyTeamInfo& default_instance();

  void Swap(TCountryWarAssemblyTeamInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarAssemblyTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarAssemblyTeamInfo& from);
  void MergeFrom(const TCountryWarAssemblyTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TCountryWarAssemblyUserInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyTeamInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarAssemblyUserInfo& userinfo() const;
  inline ::pb::TCountryWarAssemblyUserInfo* mutable_userinfo();
  inline ::pb::TCountryWarAssemblyUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TCountryWarAssemblyUserInfo* userinfo);

  // optional uint32 TeamId = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyTeamInfo</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional .pb.EAssemblyTeamStatus TeamStatus = 3;
  inline bool has_teamstatus() const;
  inline void clear_teamstatus();
  static const int kTeamStatusFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyTeamInfo</name>
  	<Function>
  		<name>teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamstatus</name>
  		<replaceName>TeamStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAssemblyTeamStatus teamstatus() const;
  inline void set_teamstatus(::pb::EAssemblyTeamStatus value);

  // optional uint32 MaxTroopsNum = 4;
  inline bool has_maxtroopsnum() const;
  inline void clear_maxtroopsnum();
  static const int kMaxTroopsNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyTeamInfo</name>
  	<Function>
  		<name>maxtroopsnum</name>
  		<replaceName>MaxTroopsNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxtroopsnum</name>
  		<replaceName>MaxTroopsNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxtroopsnum</name>
  		<replaceName>MaxTroopsNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxtroopsnum() const;
  inline void set_maxtroopsnum(::google::protobuf::uint32 value);

  // optional uint32 TroopsNum = 5;
  inline bool has_troopsnum() const;
  inline void clear_troopsnum();
  static const int kTroopsNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyTeamInfo</name>
  	<Function>
  		<name>troopsnum</name>
  		<replaceName>TroopsNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_troopsnum</name>
  		<replaceName>TroopsNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_troopsnum</name>
  		<replaceName>TroopsNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 troopsnum() const;
  inline void set_troopsnum(::google::protobuf::uint32 value);

  // repeated .pb.TCountryWarAssemblyTeamHeroInfo HeroInfoArr = 6;
  inline int heroinfoarr_size() const;
  inline void clear_heroinfoarr();
  static const int kHeroInfoArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyTeamInfo</name>
  	<Function>
  		<name>heroinfoarr</name>
  		<replaceName>HeroInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_heroinfoarr</name>
  		<replaceName>HeroInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_heroinfoarr</name>
  		<replaceName>HeroInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_heroinfoarr</name>
  		<replaceName>HeroInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>heroinfoarr_size</name>
  		<replaceName>HeroInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarAssemblyTeamHeroInfo& heroinfoarr(int index) const;
  inline ::pb::TCountryWarAssemblyTeamHeroInfo* mutable_heroinfoarr(int index);
  inline ::pb::TCountryWarAssemblyTeamHeroInfo* add_heroinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyTeamHeroInfo >&
      heroinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyTeamHeroInfo >*
      mutable_heroinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarAssemblyTeamInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_teamstatus();
  inline void clear_has_teamstatus();
  inline void set_has_maxtroopsnum();
  inline void clear_has_maxtroopsnum();
  inline void set_has_troopsnum();
  inline void clear_has_troopsnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TCountryWarAssemblyUserInfo* userinfo_;
  ::google::protobuf::uint32 teamid_;
  int teamstatus_;
  ::google::protobuf::uint32 maxtroopsnum_;
  ::google::protobuf::uint32 troopsnum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyTeamHeroInfo > heroinfoarr_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarAssemblyTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarAssemblyUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarAssemblyUserInfo : public ::google::protobuf::Message {
 public:
  TCountryWarAssemblyUserInfo();
  virtual ~TCountryWarAssemblyUserInfo();

  TCountryWarAssemblyUserInfo(const TCountryWarAssemblyUserInfo& from);

  inline TCountryWarAssemblyUserInfo& operator=(const TCountryWarAssemblyUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarAssemblyUserInfo& default_instance();

  void Swap(TCountryWarAssemblyUserInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarAssemblyUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarAssemblyUserInfo& from);
  void MergeFrom(const TCountryWarAssemblyUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyUserInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyUserInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 Level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyUserInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 CityLevel = 4;
  inline bool has_citylevel() const;
  inline void clear_citylevel();
  static const int kCityLevelFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyUserInfo</name>
  	<Function>
  		<name>citylevel</name>
  		<replaceName>CityLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_citylevel</name>
  		<replaceName>CityLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_citylevel</name>
  		<replaceName>CityLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 citylevel() const;
  inline void set_citylevel(::google::protobuf::uint32 value);

  // optional uint32 CityIndex = 5;
  inline bool has_cityindex() const;
  inline void clear_cityindex();
  static const int kCityIndexFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyUserInfo</name>
  	<Function>
  		<name>cityindex</name>
  		<replaceName>CityIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityindex</name>
  		<replaceName>CityIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityindex</name>
  		<replaceName>CityIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityindex() const;
  inline void set_cityindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCountryWarAssemblyUserInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_citylevel();
  inline void clear_has_citylevel();
  inline void set_has_cityindex();
  inline void clear_has_cityindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 citylevel_;
  ::google::protobuf::uint32 cityindex_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarAssemblyUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarAssemblyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarAssemblyInfo : public ::google::protobuf::Message {
 public:
  TCountryWarAssemblyInfo();
  virtual ~TCountryWarAssemblyInfo();

  TCountryWarAssemblyInfo(const TCountryWarAssemblyInfo& from);

  inline TCountryWarAssemblyInfo& operator=(const TCountryWarAssemblyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarAssemblyInfo& default_instance();

  void Swap(TCountryWarAssemblyInfo* other);

  // implements Message ----------------------------------------------

  TCountryWarAssemblyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarAssemblyInfo& from);
  void MergeFrom(const TCountryWarAssemblyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AssemblyId = 1;
  inline bool has_assemblyid() const;
  inline void clear_assemblyid();
  static const int kAssemblyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>assemblyid</name>
  		<replaceName>AssemblyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assemblyid</name>
  		<replaceName>AssemblyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assemblyid</name>
  		<replaceName>AssemblyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 assemblyid() const;
  inline void set_assemblyid(::google::protobuf::uint32 value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 3;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 MaxNum = 4;
  inline bool has_maxnum() const;
  inline void clear_maxnum();
  static const int kMaxNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>maxnum</name>
  		<replaceName>MaxNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxnum</name>
  		<replaceName>MaxNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxnum</name>
  		<replaceName>MaxNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxnum() const;
  inline void set_maxnum(::google::protobuf::uint32 value);

  // optional uint32 GridIndex = 5;
  inline bool has_gridindex() const;
  inline void clear_gridindex();
  static const int kGridIndexFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridindex</name>
  		<replaceName>GridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 gridindex() const;
  inline void set_gridindex(::google::protobuf::uint32 value);

  // optional uint64 CreateTime = 6;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 7;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint64 MarchEndTime = 8;
  inline bool has_marchendtime() const;
  inline void clear_marchendtime();
  static const int kMarchEndTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>marchendtime</name>
  		<replaceName>MarchEndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_marchendtime</name>
  		<replaceName>MarchEndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_marchendtime</name>
  		<replaceName>MarchEndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 marchendtime() const;
  inline void set_marchendtime(::google::protobuf::uint64 value);

  // optional uint32 EndGridIndex = 9;
  inline bool has_endgridindex() const;
  inline void clear_endgridindex();
  static const int kEndGridIndexFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>endgridindex</name>
  		<replaceName>EndGridIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endgridindex</name>
  		<replaceName>EndGridIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endgridindex</name>
  		<replaceName>EndGridIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 endgridindex() const;
  inline void set_endgridindex(::google::protobuf::uint32 value);

  // optional uint32 EndGridType = 10;
  inline bool has_endgridtype() const;
  inline void clear_endgridtype();
  static const int kEndGridTypeFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>endgridtype</name>
  		<replaceName>EndGridType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endgridtype</name>
  		<replaceName>EndGridType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endgridtype</name>
  		<replaceName>EndGridType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 endgridtype() const;
  inline void set_endgridtype(::google::protobuf::uint32 value);

  // optional uint32 EndTreasureId = 11;
  inline bool has_endtreasureid() const;
  inline void clear_endtreasureid();
  static const int kEndTreasureIdFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>endtreasureid</name>
  		<replaceName>EndTreasureId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtreasureid</name>
  		<replaceName>EndTreasureId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtreasureid</name>
  		<replaceName>EndTreasureId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 endtreasureid() const;
  inline void set_endtreasureid(::google::protobuf::uint32 value);

  // optional .pb.TCountryWarAssemblyUserInfo TargetUserInfo = 12;
  inline bool has_targetuserinfo() const;
  inline void clear_targetuserinfo();
  static const int kTargetUserInfoFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>targetuserinfo</name>
  		<replaceName>TargetUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetuserinfo</name>
  		<replaceName>TargetUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_targetuserinfo</name>
  		<replaceName>TargetUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetuserinfo</name>
  		<replaceName>TargetUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarAssemblyUserInfo& targetuserinfo() const;
  inline ::pb::TCountryWarAssemblyUserInfo* mutable_targetuserinfo();
  inline ::pb::TCountryWarAssemblyUserInfo* release_targetuserinfo();
  inline void set_allocated_targetuserinfo(::pb::TCountryWarAssemblyUserInfo* targetuserinfo);

  // optional .pb.EAssemblyStatus Status = 13;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAssemblyStatus status() const;
  inline void set_status(::pb::EAssemblyStatus value);

  // repeated .pb.TCountryWarAssemblyTeamInfo ArrTeamInfo = 14;
  inline int arrteaminfo_size() const;
  inline void clear_arrteaminfo();
  static const int kArrTeamInfoFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyInfo</name>
  	<Function>
  		<name>arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrteaminfo</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrteaminfo_size</name>
  		<replaceName>ArrTeamInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarAssemblyTeamInfo& arrteaminfo(int index) const;
  inline ::pb::TCountryWarAssemblyTeamInfo* mutable_arrteaminfo(int index);
  inline ::pb::TCountryWarAssemblyTeamInfo* add_arrteaminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyTeamInfo >&
      arrteaminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyTeamInfo >*
      mutable_arrteaminfo();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarAssemblyInfo)
 private:
  inline void set_has_assemblyid();
  inline void clear_has_assemblyid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_maxnum();
  inline void clear_has_maxnum();
  inline void set_has_gridindex();
  inline void clear_has_gridindex();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_marchendtime();
  inline void clear_has_marchendtime();
  inline void set_has_endgridindex();
  inline void clear_has_endgridindex();
  inline void set_has_endgridtype();
  inline void clear_has_endgridtype();
  inline void set_has_endtreasureid();
  inline void clear_has_endtreasureid();
  inline void set_has_targetuserinfo();
  inline void clear_has_targetuserinfo();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 assemblyid_;
  ::google::protobuf::uint32 maxnum_;
  ::std::string* uname_;
  ::google::protobuf::uint64 createtime_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint32 gridindex_;
  ::google::protobuf::uint32 endgridindex_;
  ::google::protobuf::uint64 marchendtime_;
  ::google::protobuf::uint32 endgridtype_;
  ::google::protobuf::uint32 endtreasureid_;
  ::pb::TCountryWarAssemblyUserInfo* targetuserinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyTeamInfo > arrteaminfo_;
  int status_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarAssemblyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGetAssemblyListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGetAssemblyListReq : public ::google::protobuf::Message {
 public:
  TCountryWarGetAssemblyListReq();
  virtual ~TCountryWarGetAssemblyListReq();

  TCountryWarGetAssemblyListReq(const TCountryWarGetAssemblyListReq& from);

  inline TCountryWarGetAssemblyListReq& operator=(const TCountryWarGetAssemblyListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGetAssemblyListReq& default_instance();

  void Swap(TCountryWarGetAssemblyListReq* other);

  // implements Message ----------------------------------------------

  TCountryWarGetAssemblyListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGetAssemblyListReq& from);
  void MergeFrom(const TCountryWarGetAssemblyListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGetAssemblyListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGetAssemblyListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGetAssemblyListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGetAssemblyListRsp : public ::google::protobuf::Message {
 public:
  TCountryWarGetAssemblyListRsp();
  virtual ~TCountryWarGetAssemblyListRsp();

  TCountryWarGetAssemblyListRsp(const TCountryWarGetAssemblyListRsp& from);

  inline TCountryWarGetAssemblyListRsp& operator=(const TCountryWarGetAssemblyListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGetAssemblyListRsp& default_instance();

  void Swap(TCountryWarGetAssemblyListRsp* other);

  // implements Message ----------------------------------------------

  TCountryWarGetAssemblyListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGetAssemblyListRsp& from);
  void MergeFrom(const TCountryWarGetAssemblyListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
  inline int assemblydataarray_size() const;
  inline void clear_assemblydataarray();
  static const int kAssemblyDataArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGetAssemblyListRsp</name>
  	<Function>
  		<name>assemblydataarray</name>
  		<replaceName>AssemblyDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_assemblydataarray</name>
  		<replaceName>AssemblyDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_assemblydataarray</name>
  		<replaceName>AssemblyDataArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assemblydataarray</name>
  		<replaceName>AssemblyDataArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>assemblydataarray_size</name>
  		<replaceName>AssemblyDataArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarAssemblyInfo& assemblydataarray(int index) const;
  inline ::pb::TCountryWarAssemblyInfo* mutable_assemblydataarray(int index);
  inline ::pb::TCountryWarAssemblyInfo* add_assemblydataarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyInfo >&
      assemblydataarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyInfo >*
      mutable_assemblydataarray();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGetAssemblyListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyInfo > assemblydataarray_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGetAssemblyListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarGridNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarGridNotify : public ::google::protobuf::Message {
 public:
  TCountryWarGridNotify();
  virtual ~TCountryWarGridNotify();

  TCountryWarGridNotify(const TCountryWarGridNotify& from);

  inline TCountryWarGridNotify& operator=(const TCountryWarGridNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarGridNotify& default_instance();

  void Swap(TCountryWarGridNotify* other);

  // implements Message ----------------------------------------------

  TCountryWarGridNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarGridNotify& from);
  void MergeFrom(const TCountryWarGridNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCountryWarGridInfo GridArr = 1;
  inline int gridarr_size() const;
  inline void clear_gridarr();
  static const int kGridArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridNotify</name>
  	<Function>
  		<name>gridarr</name>
  		<replaceName>GridArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_gridarr</name>
  		<replaceName>GridArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_gridarr</name>
  		<replaceName>GridArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridarr</name>
  		<replaceName>GridArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>gridarr_size</name>
  		<replaceName>GridArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGridInfo& gridarr(int index) const;
  inline ::pb::TCountryWarGridInfo* mutable_gridarr(int index);
  inline ::pb::TCountryWarGridInfo* add_gridarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridInfo >&
      gridarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridInfo >*
      mutable_gridarr();

  // repeated .pb.TCountryWarUserInfo UserArr = 2;
  inline int userarr_size() const;
  inline void clear_userarr();
  static const int kUserArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridNotify</name>
  	<Function>
  		<name>userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userarr_size</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarUserInfo& userarr(int index) const;
  inline ::pb::TCountryWarUserInfo* mutable_userarr(int index);
  inline ::pb::TCountryWarUserInfo* add_userarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >&
      userarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >*
      mutable_userarr();

  // repeated .pb.TCountryWarGuildInfo GuildArr = 3;
  inline int guildarr_size() const;
  inline void clear_guildarr();
  static const int kGuildArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarGridNotify</name>
  	<Function>
  		<name>guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>guildarr_size</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGuildInfo& guildarr(int index) const;
  inline ::pb::TCountryWarGuildInfo* mutable_guildarr(int index);
  inline ::pb::TCountryWarGuildInfo* add_guildarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >&
      guildarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >*
      mutable_guildarr();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarGridNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridInfo > gridarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo > userarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo > guildarr_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarGridNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarMarchNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarMarchNotify : public ::google::protobuf::Message {
 public:
  TCountryWarMarchNotify();
  virtual ~TCountryWarMarchNotify();

  TCountryWarMarchNotify(const TCountryWarMarchNotify& from);

  inline TCountryWarMarchNotify& operator=(const TCountryWarMarchNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarMarchNotify& default_instance();

  void Swap(TCountryWarMarchNotify* other);

  // implements Message ----------------------------------------------

  TCountryWarMarchNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarMarchNotify& from);
  void MergeFrom(const TCountryWarMarchNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCountryWarMarchInfo MarchArr = 1;
  inline int marcharr_size() const;
  inline void clear_marcharr();
  static const int kMarchArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchNotify</name>
  	<Function>
  		<name>marcharr</name>
  		<replaceName>MarchArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_marcharr</name>
  		<replaceName>MarchArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_marcharr</name>
  		<replaceName>MarchArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_marcharr</name>
  		<replaceName>MarchArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>marcharr_size</name>
  		<replaceName>MarchArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarMarchInfo& marcharr(int index) const;
  inline ::pb::TCountryWarMarchInfo* mutable_marcharr(int index);
  inline ::pb::TCountryWarMarchInfo* add_marcharr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarMarchInfo >&
      marcharr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarMarchInfo >*
      mutable_marcharr();

  // repeated .pb.TCountryWarUserInfo UserArr = 2;
  inline int userarr_size() const;
  inline void clear_userarr();
  static const int kUserArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchNotify</name>
  	<Function>
  		<name>userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userarr_size</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarUserInfo& userarr(int index) const;
  inline ::pb::TCountryWarUserInfo* mutable_userarr(int index);
  inline ::pb::TCountryWarUserInfo* add_userarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >&
      userarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >*
      mutable_userarr();

  // repeated .pb.TCountryWarGuildInfo GuildArr = 3;
  inline int guildarr_size() const;
  inline void clear_guildarr();
  static const int kGuildArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarMarchNotify</name>
  	<Function>
  		<name>guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>guildarr_size</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGuildInfo& guildarr(int index) const;
  inline ::pb::TCountryWarGuildInfo* mutable_guildarr(int index);
  inline ::pb::TCountryWarGuildInfo* add_guildarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >&
      guildarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >*
      mutable_guildarr();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarMarchNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarMarchInfo > marcharr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo > userarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo > guildarr_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarMarchNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarUserGuildInfoNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarUserGuildInfoNotify : public ::google::protobuf::Message {
 public:
  TCountryWarUserGuildInfoNotify();
  virtual ~TCountryWarUserGuildInfoNotify();

  TCountryWarUserGuildInfoNotify(const TCountryWarUserGuildInfoNotify& from);

  inline TCountryWarUserGuildInfoNotify& operator=(const TCountryWarUserGuildInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarUserGuildInfoNotify& default_instance();

  void Swap(TCountryWarUserGuildInfoNotify* other);

  // implements Message ----------------------------------------------

  TCountryWarUserGuildInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarUserGuildInfoNotify& from);
  void MergeFrom(const TCountryWarUserGuildInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCountryWarUserInfo UserArr = 3;
  inline int userarr_size() const;
  inline void clear_userarr();
  static const int kUserArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarUserGuildInfoNotify</name>
  	<Function>
  		<name>userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userarr</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userarr_size</name>
  		<replaceName>UserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarUserInfo& userarr(int index) const;
  inline ::pb::TCountryWarUserInfo* mutable_userarr(int index);
  inline ::pb::TCountryWarUserInfo* add_userarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >&
      userarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >*
      mutable_userarr();

  // repeated .pb.TCountryWarGuildInfo GuildArr = 4;
  inline int guildarr_size() const;
  inline void clear_guildarr();
  static const int kGuildArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarUserGuildInfoNotify</name>
  	<Function>
  		<name>guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildarr</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>guildarr_size</name>
  		<replaceName>GuildArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarGuildInfo& guildarr(int index) const;
  inline ::pb::TCountryWarGuildInfo* mutable_guildarr(int index);
  inline ::pb::TCountryWarGuildInfo* add_guildarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >&
      guildarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >*
      mutable_guildarr();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarUserGuildInfoNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo > userarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo > guildarr_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarUserGuildInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCountryWarAssemblyNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CountryWar.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCountryWarAssemblyNotify : public ::google::protobuf::Message {
 public:
  TCountryWarAssemblyNotify();
  virtual ~TCountryWarAssemblyNotify();

  TCountryWarAssemblyNotify(const TCountryWarAssemblyNotify& from);

  inline TCountryWarAssemblyNotify& operator=(const TCountryWarAssemblyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCountryWarAssemblyNotify& default_instance();

  void Swap(TCountryWarAssemblyNotify* other);

  // implements Message ----------------------------------------------

  TCountryWarAssemblyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCountryWarAssemblyNotify& from);
  void MergeFrom(const TCountryWarAssemblyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
  inline int assemblydataarray_size() const;
  inline void clear_assemblydataarray();
  static const int kAssemblyDataArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyNotify</name>
  	<Function>
  		<name>assemblydataarray</name>
  		<replaceName>AssemblyDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_assemblydataarray</name>
  		<replaceName>AssemblyDataArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_assemblydataarray</name>
  		<replaceName>AssemblyDataArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assemblydataarray</name>
  		<replaceName>AssemblyDataArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>assemblydataarray_size</name>
  		<replaceName>AssemblyDataArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCountryWarAssemblyInfo& assemblydataarray(int index) const;
  inline ::pb::TCountryWarAssemblyInfo* mutable_assemblydataarray(int index);
  inline ::pb::TCountryWarAssemblyInfo* add_assemblydataarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyInfo >&
      assemblydataarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyInfo >*
      mutable_assemblydataarray();

  // repeated uint32 RemoveAssemblyId = 2;
  inline int removeassemblyid_size() const;
  inline void clear_removeassemblyid();
  static const int kRemoveAssemblyIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCountryWarAssemblyNotify</name>
  	<Function>
  		<name>removeassemblyid</name>
  		<replaceName>RemoveAssemblyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_removeassemblyid</name>
  		<replaceName>RemoveAssemblyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_removeassemblyid</name>
  		<replaceName>RemoveAssemblyId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_removeassemblyid</name>
  		<replaceName>RemoveAssemblyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>removeassemblyid_size</name>
  		<replaceName>RemoveAssemblyId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 removeassemblyid(int index) const;
  inline void set_removeassemblyid(int index, ::google::protobuf::uint32 value);
  inline void add_removeassemblyid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      removeassemblyid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_removeassemblyid();

  // @@protoc_insertion_point(class_scope:pb.TCountryWarAssemblyNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyInfo > assemblydataarray_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > removeassemblyid_;
  friend void  protobuf_AddDesc_net_2fCountryWar_2eproto();
  friend void protobuf_AssignDesc_net_2fCountryWar_2eproto();
  friend void protobuf_ShutdownFile_net_2fCountryWar_2eproto();

  void InitAsDefaultInstance();
  static TCountryWarAssemblyNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TCountryWarUserInfo

// optional uint64 Uid = 1;
inline bool TCountryWarUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarUserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCountryWarUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarUserInfo.Uid)
  return uid_;
}
inline void TCountryWarUserInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarUserInfo.Uid)
}

// optional string ServerId = 2;
inline bool TCountryWarUserInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarUserInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarUserInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarUserInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TCountryWarUserInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarUserInfo.ServerId)
  return *serverid_;
}
inline void TCountryWarUserInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarUserInfo.ServerId)
}
inline void TCountryWarUserInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCountryWarUserInfo.ServerId)
}
inline void TCountryWarUserInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCountryWarUserInfo.ServerId)
}
inline ::std::string* TCountryWarUserInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarUserInfo.ServerId)
  return serverid_;
}
inline ::std::string* TCountryWarUserInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCountryWarUserInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarUserInfo.ServerId)
}

// optional string Uname = 3;
inline bool TCountryWarUserInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarUserInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarUserInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarUserInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TCountryWarUserInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarUserInfo.Uname)
  return *uname_;
}
inline void TCountryWarUserInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarUserInfo.Uname)
}
inline void TCountryWarUserInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCountryWarUserInfo.Uname)
}
inline void TCountryWarUserInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCountryWarUserInfo.Uname)
}
inline ::std::string* TCountryWarUserInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarUserInfo.Uname)
  return uname_;
}
inline ::std::string* TCountryWarUserInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCountryWarUserInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarUserInfo.Uname)
}

// optional uint64 GuildId = 4;
inline bool TCountryWarUserInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCountryWarUserInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCountryWarUserInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCountryWarUserInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TCountryWarUserInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarUserInfo.GuildId)
  return guildid_;
}
inline void TCountryWarUserInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarUserInfo.GuildId)
}

// -------------------------------------------------------------------

// TCountryWarGuildInfo

// optional uint64 GuildId = 1;
inline bool TCountryWarGuildInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGuildInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGuildInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGuildInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TCountryWarGuildInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGuildInfo.GuildId)
  return guildid_;
}
inline void TCountryWarGuildInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGuildInfo.GuildId)
}

// optional string ServerId = 2;
inline bool TCountryWarGuildInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarGuildInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarGuildInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarGuildInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TCountryWarGuildInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGuildInfo.ServerId)
  return *serverid_;
}
inline void TCountryWarGuildInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarGuildInfo.ServerId)
}
inline void TCountryWarGuildInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCountryWarGuildInfo.ServerId)
}
inline void TCountryWarGuildInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCountryWarGuildInfo.ServerId)
}
inline ::std::string* TCountryWarGuildInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGuildInfo.ServerId)
  return serverid_;
}
inline ::std::string* TCountryWarGuildInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCountryWarGuildInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGuildInfo.ServerId)
}

// optional string GuildName = 3;
inline bool TCountryWarGuildInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarGuildInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarGuildInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarGuildInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TCountryWarGuildInfo::guildname() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGuildInfo.GuildName)
  return *guildname_;
}
inline void TCountryWarGuildInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarGuildInfo.GuildName)
}
inline void TCountryWarGuildInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCountryWarGuildInfo.GuildName)
}
inline void TCountryWarGuildInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCountryWarGuildInfo.GuildName)
}
inline ::std::string* TCountryWarGuildInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGuildInfo.GuildName)
  return guildname_;
}
inline ::std::string* TCountryWarGuildInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCountryWarGuildInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGuildInfo.GuildName)
}

// -------------------------------------------------------------------

// TCountryWarGridInfo

// optional uint32 GridIndex = 1;
inline bool TCountryWarGridInfo::has_gridindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGridInfo::set_has_gridindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGridInfo::clear_has_gridindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGridInfo::clear_gridindex() {
  gridindex_ = 0u;
  clear_has_gridindex();
}
inline ::google::protobuf::uint32 TCountryWarGridInfo::gridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridInfo.GridIndex)
  return gridindex_;
}
inline void TCountryWarGridInfo::set_gridindex(::google::protobuf::uint32 value) {
  set_has_gridindex();
  gridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridInfo.GridIndex)
}

// optional uint32 GridType = 2;
inline bool TCountryWarGridInfo::has_gridtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarGridInfo::set_has_gridtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarGridInfo::clear_has_gridtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarGridInfo::clear_gridtype() {
  gridtype_ = 0u;
  clear_has_gridtype();
}
inline ::google::protobuf::uint32 TCountryWarGridInfo::gridtype() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridInfo.GridType)
  return gridtype_;
}
inline void TCountryWarGridInfo::set_gridtype(::google::protobuf::uint32 value) {
  set_has_gridtype();
  gridtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridInfo.GridType)
}

// optional .pb.TCountryWarGarrisonInfo GarrisonInfo = 3;
inline bool TCountryWarGridInfo::has_garrisoninfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarGridInfo::set_has_garrisoninfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarGridInfo::clear_has_garrisoninfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarGridInfo::clear_garrisoninfo() {
  if (garrisoninfo_ != NULL) garrisoninfo_->::pb::TCountryWarGarrisonInfo::Clear();
  clear_has_garrisoninfo();
}
inline const ::pb::TCountryWarGarrisonInfo& TCountryWarGridInfo::garrisoninfo() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridInfo.GarrisonInfo)
  return garrisoninfo_ != NULL ? *garrisoninfo_ : *default_instance_->garrisoninfo_;
}
inline ::pb::TCountryWarGarrisonInfo* TCountryWarGridInfo::mutable_garrisoninfo() {
  set_has_garrisoninfo();
  if (garrisoninfo_ == NULL) garrisoninfo_ = new ::pb::TCountryWarGarrisonInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridInfo.GarrisonInfo)
  return garrisoninfo_;
}
inline ::pb::TCountryWarGarrisonInfo* TCountryWarGridInfo::release_garrisoninfo() {
  clear_has_garrisoninfo();
  ::pb::TCountryWarGarrisonInfo* temp = garrisoninfo_;
  garrisoninfo_ = NULL;
  return temp;
}
inline void TCountryWarGridInfo::set_allocated_garrisoninfo(::pb::TCountryWarGarrisonInfo* garrisoninfo) {
  delete garrisoninfo_;
  garrisoninfo_ = garrisoninfo;
  if (garrisoninfo) {
    set_has_garrisoninfo();
  } else {
    clear_has_garrisoninfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGridInfo.GarrisonInfo)
}

// optional .pb.TCountryWarGridUserCityInfo UserCityInfo = 4;
inline bool TCountryWarGridInfo::has_usercityinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCountryWarGridInfo::set_has_usercityinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCountryWarGridInfo::clear_has_usercityinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCountryWarGridInfo::clear_usercityinfo() {
  if (usercityinfo_ != NULL) usercityinfo_->::pb::TCountryWarGridUserCityInfo::Clear();
  clear_has_usercityinfo();
}
inline const ::pb::TCountryWarGridUserCityInfo& TCountryWarGridInfo::usercityinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridInfo.UserCityInfo)
  return usercityinfo_ != NULL ? *usercityinfo_ : *default_instance_->usercityinfo_;
}
inline ::pb::TCountryWarGridUserCityInfo* TCountryWarGridInfo::mutable_usercityinfo() {
  set_has_usercityinfo();
  if (usercityinfo_ == NULL) usercityinfo_ = new ::pb::TCountryWarGridUserCityInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridInfo.UserCityInfo)
  return usercityinfo_;
}
inline ::pb::TCountryWarGridUserCityInfo* TCountryWarGridInfo::release_usercityinfo() {
  clear_has_usercityinfo();
  ::pb::TCountryWarGridUserCityInfo* temp = usercityinfo_;
  usercityinfo_ = NULL;
  return temp;
}
inline void TCountryWarGridInfo::set_allocated_usercityinfo(::pb::TCountryWarGridUserCityInfo* usercityinfo) {
  delete usercityinfo_;
  usercityinfo_ = usercityinfo;
  if (usercityinfo) {
    set_has_usercityinfo();
  } else {
    clear_has_usercityinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGridInfo.UserCityInfo)
}

// optional .pb.TCountryWarGridNpcBuildingInfo NpcCityInfo = 5;
inline bool TCountryWarGridInfo::has_npccityinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCountryWarGridInfo::set_has_npccityinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCountryWarGridInfo::clear_has_npccityinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCountryWarGridInfo::clear_npccityinfo() {
  if (npccityinfo_ != NULL) npccityinfo_->::pb::TCountryWarGridNpcBuildingInfo::Clear();
  clear_has_npccityinfo();
}
inline const ::pb::TCountryWarGridNpcBuildingInfo& TCountryWarGridInfo::npccityinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridInfo.NpcCityInfo)
  return npccityinfo_ != NULL ? *npccityinfo_ : *default_instance_->npccityinfo_;
}
inline ::pb::TCountryWarGridNpcBuildingInfo* TCountryWarGridInfo::mutable_npccityinfo() {
  set_has_npccityinfo();
  if (npccityinfo_ == NULL) npccityinfo_ = new ::pb::TCountryWarGridNpcBuildingInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridInfo.NpcCityInfo)
  return npccityinfo_;
}
inline ::pb::TCountryWarGridNpcBuildingInfo* TCountryWarGridInfo::release_npccityinfo() {
  clear_has_npccityinfo();
  ::pb::TCountryWarGridNpcBuildingInfo* temp = npccityinfo_;
  npccityinfo_ = NULL;
  return temp;
}
inline void TCountryWarGridInfo::set_allocated_npccityinfo(::pb::TCountryWarGridNpcBuildingInfo* npccityinfo) {
  delete npccityinfo_;
  npccityinfo_ = npccityinfo;
  if (npccityinfo) {
    set_has_npccityinfo();
  } else {
    clear_has_npccityinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGridInfo.NpcCityInfo)
}

// optional .pb.TCountryWarGridNpcBuildingInfo NpcFortInfo = 6;
inline bool TCountryWarGridInfo::has_npcfortinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCountryWarGridInfo::set_has_npcfortinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCountryWarGridInfo::clear_has_npcfortinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCountryWarGridInfo::clear_npcfortinfo() {
  if (npcfortinfo_ != NULL) npcfortinfo_->::pb::TCountryWarGridNpcBuildingInfo::Clear();
  clear_has_npcfortinfo();
}
inline const ::pb::TCountryWarGridNpcBuildingInfo& TCountryWarGridInfo::npcfortinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridInfo.NpcFortInfo)
  return npcfortinfo_ != NULL ? *npcfortinfo_ : *default_instance_->npcfortinfo_;
}
inline ::pb::TCountryWarGridNpcBuildingInfo* TCountryWarGridInfo::mutable_npcfortinfo() {
  set_has_npcfortinfo();
  if (npcfortinfo_ == NULL) npcfortinfo_ = new ::pb::TCountryWarGridNpcBuildingInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridInfo.NpcFortInfo)
  return npcfortinfo_;
}
inline ::pb::TCountryWarGridNpcBuildingInfo* TCountryWarGridInfo::release_npcfortinfo() {
  clear_has_npcfortinfo();
  ::pb::TCountryWarGridNpcBuildingInfo* temp = npcfortinfo_;
  npcfortinfo_ = NULL;
  return temp;
}
inline void TCountryWarGridInfo::set_allocated_npcfortinfo(::pb::TCountryWarGridNpcBuildingInfo* npcfortinfo) {
  delete npcfortinfo_;
  npcfortinfo_ = npcfortinfo;
  if (npcfortinfo) {
    set_has_npcfortinfo();
  } else {
    clear_has_npcfortinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGridInfo.NpcFortInfo)
}

// optional .pb.TCountryWarGridMonsterInfo MonsterInfo = 7;
inline bool TCountryWarGridInfo::has_monsterinfo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCountryWarGridInfo::set_has_monsterinfo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCountryWarGridInfo::clear_has_monsterinfo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCountryWarGridInfo::clear_monsterinfo() {
  if (monsterinfo_ != NULL) monsterinfo_->::pb::TCountryWarGridMonsterInfo::Clear();
  clear_has_monsterinfo();
}
inline const ::pb::TCountryWarGridMonsterInfo& TCountryWarGridInfo::monsterinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridInfo.MonsterInfo)
  return monsterinfo_ != NULL ? *monsterinfo_ : *default_instance_->monsterinfo_;
}
inline ::pb::TCountryWarGridMonsterInfo* TCountryWarGridInfo::mutable_monsterinfo() {
  set_has_monsterinfo();
  if (monsterinfo_ == NULL) monsterinfo_ = new ::pb::TCountryWarGridMonsterInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridInfo.MonsterInfo)
  return monsterinfo_;
}
inline ::pb::TCountryWarGridMonsterInfo* TCountryWarGridInfo::release_monsterinfo() {
  clear_has_monsterinfo();
  ::pb::TCountryWarGridMonsterInfo* temp = monsterinfo_;
  monsterinfo_ = NULL;
  return temp;
}
inline void TCountryWarGridInfo::set_allocated_monsterinfo(::pb::TCountryWarGridMonsterInfo* monsterinfo) {
  delete monsterinfo_;
  monsterinfo_ = monsterinfo;
  if (monsterinfo) {
    set_has_monsterinfo();
  } else {
    clear_has_monsterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGridInfo.MonsterInfo)
}

// optional .pb.TCountryWarGridResourceInfo ResourceInfo = 8;
inline bool TCountryWarGridInfo::has_resourceinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCountryWarGridInfo::set_has_resourceinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCountryWarGridInfo::clear_has_resourceinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCountryWarGridInfo::clear_resourceinfo() {
  if (resourceinfo_ != NULL) resourceinfo_->::pb::TCountryWarGridResourceInfo::Clear();
  clear_has_resourceinfo();
}
inline const ::pb::TCountryWarGridResourceInfo& TCountryWarGridInfo::resourceinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridInfo.ResourceInfo)
  return resourceinfo_ != NULL ? *resourceinfo_ : *default_instance_->resourceinfo_;
}
inline ::pb::TCountryWarGridResourceInfo* TCountryWarGridInfo::mutable_resourceinfo() {
  set_has_resourceinfo();
  if (resourceinfo_ == NULL) resourceinfo_ = new ::pb::TCountryWarGridResourceInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridInfo.ResourceInfo)
  return resourceinfo_;
}
inline ::pb::TCountryWarGridResourceInfo* TCountryWarGridInfo::release_resourceinfo() {
  clear_has_resourceinfo();
  ::pb::TCountryWarGridResourceInfo* temp = resourceinfo_;
  resourceinfo_ = NULL;
  return temp;
}
inline void TCountryWarGridInfo::set_allocated_resourceinfo(::pb::TCountryWarGridResourceInfo* resourceinfo) {
  delete resourceinfo_;
  resourceinfo_ = resourceinfo;
  if (resourceinfo) {
    set_has_resourceinfo();
  } else {
    clear_has_resourceinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGridInfo.ResourceInfo)
}

// optional .pb.TCountryWarGridTreasureInfo TreasureInfo = 9;
inline bool TCountryWarGridInfo::has_treasureinfo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TCountryWarGridInfo::set_has_treasureinfo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TCountryWarGridInfo::clear_has_treasureinfo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TCountryWarGridInfo::clear_treasureinfo() {
  if (treasureinfo_ != NULL) treasureinfo_->::pb::TCountryWarGridTreasureInfo::Clear();
  clear_has_treasureinfo();
}
inline const ::pb::TCountryWarGridTreasureInfo& TCountryWarGridInfo::treasureinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridInfo.TreasureInfo)
  return treasureinfo_ != NULL ? *treasureinfo_ : *default_instance_->treasureinfo_;
}
inline ::pb::TCountryWarGridTreasureInfo* TCountryWarGridInfo::mutable_treasureinfo() {
  set_has_treasureinfo();
  if (treasureinfo_ == NULL) treasureinfo_ = new ::pb::TCountryWarGridTreasureInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridInfo.TreasureInfo)
  return treasureinfo_;
}
inline ::pb::TCountryWarGridTreasureInfo* TCountryWarGridInfo::release_treasureinfo() {
  clear_has_treasureinfo();
  ::pb::TCountryWarGridTreasureInfo* temp = treasureinfo_;
  treasureinfo_ = NULL;
  return temp;
}
inline void TCountryWarGridInfo::set_allocated_treasureinfo(::pb::TCountryWarGridTreasureInfo* treasureinfo) {
  delete treasureinfo_;
  treasureinfo_ = treasureinfo;
  if (treasureinfo) {
    set_has_treasureinfo();
  } else {
    clear_has_treasureinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGridInfo.TreasureInfo)
}

// -------------------------------------------------------------------

// TCountryWarGarrisonInfo

// optional uint32 GarrisonNum = 1;
inline bool TCountryWarGarrisonInfo::has_garrisonnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGarrisonInfo::set_has_garrisonnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGarrisonInfo::clear_has_garrisonnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGarrisonInfo::clear_garrisonnum() {
  garrisonnum_ = 0u;
  clear_has_garrisonnum();
}
inline ::google::protobuf::uint32 TCountryWarGarrisonInfo::garrisonnum() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGarrisonInfo.GarrisonNum)
  return garrisonnum_;
}
inline void TCountryWarGarrisonInfo::set_garrisonnum(::google::protobuf::uint32 value) {
  set_has_garrisonnum();
  garrisonnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGarrisonInfo.GarrisonNum)
}

// optional uint64 LastestUid = 2;
inline bool TCountryWarGarrisonInfo::has_lastestuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarGarrisonInfo::set_has_lastestuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarGarrisonInfo::clear_has_lastestuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarGarrisonInfo::clear_lastestuid() {
  lastestuid_ = GOOGLE_ULONGLONG(0);
  clear_has_lastestuid();
}
inline ::google::protobuf::uint64 TCountryWarGarrisonInfo::lastestuid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGarrisonInfo.LastestUid)
  return lastestuid_;
}
inline void TCountryWarGarrisonInfo::set_lastestuid(::google::protobuf::uint64 value) {
  set_has_lastestuid();
  lastestuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGarrisonInfo.LastestUid)
}

// -------------------------------------------------------------------

// TCountryWarGridUserCityInfo

// optional uint64 Uid = 1;
inline bool TCountryWarGridUserCityInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGridUserCityInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGridUserCityInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGridUserCityInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCountryWarGridUserCityInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridUserCityInfo.Uid)
  return uid_;
}
inline void TCountryWarGridUserCityInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridUserCityInfo.Uid)
}

// optional uint32 CurrDur = 2;
inline bool TCountryWarGridUserCityInfo::has_currdur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarGridUserCityInfo::set_has_currdur() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarGridUserCityInfo::clear_has_currdur() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarGridUserCityInfo::clear_currdur() {
  currdur_ = 0u;
  clear_has_currdur();
}
inline ::google::protobuf::uint32 TCountryWarGridUserCityInfo::currdur() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridUserCityInfo.CurrDur)
  return currdur_;
}
inline void TCountryWarGridUserCityInfo::set_currdur(::google::protobuf::uint32 value) {
  set_has_currdur();
  currdur_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridUserCityInfo.CurrDur)
}

// optional uint32 MaxDur = 3;
inline bool TCountryWarGridUserCityInfo::has_maxdur() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarGridUserCityInfo::set_has_maxdur() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarGridUserCityInfo::clear_has_maxdur() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarGridUserCityInfo::clear_maxdur() {
  maxdur_ = 0u;
  clear_has_maxdur();
}
inline ::google::protobuf::uint32 TCountryWarGridUserCityInfo::maxdur() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridUserCityInfo.MaxDur)
  return maxdur_;
}
inline void TCountryWarGridUserCityInfo::set_maxdur(::google::protobuf::uint32 value) {
  set_has_maxdur();
  maxdur_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridUserCityInfo.MaxDur)
}

// optional uint64 RecoverTime = 4;
inline bool TCountryWarGridUserCityInfo::has_recovertime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCountryWarGridUserCityInfo::set_has_recovertime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCountryWarGridUserCityInfo::clear_has_recovertime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCountryWarGridUserCityInfo::clear_recovertime() {
  recovertime_ = GOOGLE_ULONGLONG(0);
  clear_has_recovertime();
}
inline ::google::protobuf::uint64 TCountryWarGridUserCityInfo::recovertime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridUserCityInfo.RecoverTime)
  return recovertime_;
}
inline void TCountryWarGridUserCityInfo::set_recovertime(::google::protobuf::uint64 value) {
  set_has_recovertime();
  recovertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridUserCityInfo.RecoverTime)
}

// optional uint32 RecoverSpeed = 5;
inline bool TCountryWarGridUserCityInfo::has_recoverspeed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCountryWarGridUserCityInfo::set_has_recoverspeed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCountryWarGridUserCityInfo::clear_has_recoverspeed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCountryWarGridUserCityInfo::clear_recoverspeed() {
  recoverspeed_ = 0u;
  clear_has_recoverspeed();
}
inline ::google::protobuf::uint32 TCountryWarGridUserCityInfo::recoverspeed() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridUserCityInfo.RecoverSpeed)
  return recoverspeed_;
}
inline void TCountryWarGridUserCityInfo::set_recoverspeed(::google::protobuf::uint32 value) {
  set_has_recoverspeed();
  recoverspeed_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridUserCityInfo.RecoverSpeed)
}

// optional uint32 CityLv = 6;
inline bool TCountryWarGridUserCityInfo::has_citylv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCountryWarGridUserCityInfo::set_has_citylv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCountryWarGridUserCityInfo::clear_has_citylv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCountryWarGridUserCityInfo::clear_citylv() {
  citylv_ = 0u;
  clear_has_citylv();
}
inline ::google::protobuf::uint32 TCountryWarGridUserCityInfo::citylv() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridUserCityInfo.CityLv)
  return citylv_;
}
inline void TCountryWarGridUserCityInfo::set_citylv(::google::protobuf::uint32 value) {
  set_has_citylv();
  citylv_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridUserCityInfo.CityLv)
}

// optional bool IsFreeWar = 7;
inline bool TCountryWarGridUserCityInfo::has_isfreewar() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCountryWarGridUserCityInfo::set_has_isfreewar() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCountryWarGridUserCityInfo::clear_has_isfreewar() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCountryWarGridUserCityInfo::clear_isfreewar() {
  isfreewar_ = false;
  clear_has_isfreewar();
}
inline bool TCountryWarGridUserCityInfo::isfreewar() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridUserCityInfo.IsFreeWar)
  return isfreewar_;
}
inline void TCountryWarGridUserCityInfo::set_isfreewar(bool value) {
  set_has_isfreewar();
  isfreewar_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridUserCityInfo.IsFreeWar)
}

// optional uint64 WarEndTime = 8;
inline bool TCountryWarGridUserCityInfo::has_warendtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCountryWarGridUserCityInfo::set_has_warendtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCountryWarGridUserCityInfo::clear_has_warendtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCountryWarGridUserCityInfo::clear_warendtime() {
  warendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_warendtime();
}
inline ::google::protobuf::uint64 TCountryWarGridUserCityInfo::warendtime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridUserCityInfo.WarEndTime)
  return warendtime_;
}
inline void TCountryWarGridUserCityInfo::set_warendtime(::google::protobuf::uint64 value) {
  set_has_warendtime();
  warendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridUserCityInfo.WarEndTime)
}

// -------------------------------------------------------------------

// TCountryWarGridNpcBuildingInfo

// optional uint64 GuildId = 1;
inline bool TCountryWarGridNpcBuildingInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGridNpcBuildingInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TCountryWarGridNpcBuildingInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridNpcBuildingInfo.GuildId)
  return guildid_;
}
inline void TCountryWarGridNpcBuildingInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridNpcBuildingInfo.GuildId)
}

// optional uint64 OccupyTime = 2;
inline bool TCountryWarGridNpcBuildingInfo::has_occupytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarGridNpcBuildingInfo::set_has_occupytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_has_occupytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_occupytime() {
  occupytime_ = GOOGLE_ULONGLONG(0);
  clear_has_occupytime();
}
inline ::google::protobuf::uint64 TCountryWarGridNpcBuildingInfo::occupytime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridNpcBuildingInfo.OccupyTime)
  return occupytime_;
}
inline void TCountryWarGridNpcBuildingInfo::set_occupytime(::google::protobuf::uint64 value) {
  set_has_occupytime();
  occupytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridNpcBuildingInfo.OccupyTime)
}

// optional uint32 CurrDur = 3;
inline bool TCountryWarGridNpcBuildingInfo::has_currdur() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarGridNpcBuildingInfo::set_has_currdur() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_has_currdur() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_currdur() {
  currdur_ = 0u;
  clear_has_currdur();
}
inline ::google::protobuf::uint32 TCountryWarGridNpcBuildingInfo::currdur() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridNpcBuildingInfo.CurrDur)
  return currdur_;
}
inline void TCountryWarGridNpcBuildingInfo::set_currdur(::google::protobuf::uint32 value) {
  set_has_currdur();
  currdur_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridNpcBuildingInfo.CurrDur)
}

// optional uint64 RecoverTime = 4;
inline bool TCountryWarGridNpcBuildingInfo::has_recovertime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCountryWarGridNpcBuildingInfo::set_has_recovertime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_has_recovertime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_recovertime() {
  recovertime_ = GOOGLE_ULONGLONG(0);
  clear_has_recovertime();
}
inline ::google::protobuf::uint64 TCountryWarGridNpcBuildingInfo::recovertime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridNpcBuildingInfo.RecoverTime)
  return recovertime_;
}
inline void TCountryWarGridNpcBuildingInfo::set_recovertime(::google::protobuf::uint64 value) {
  set_has_recovertime();
  recovertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridNpcBuildingInfo.RecoverTime)
}

// optional uint32 KilledNum = 5;
inline bool TCountryWarGridNpcBuildingInfo::has_killednum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCountryWarGridNpcBuildingInfo::set_has_killednum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_has_killednum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_killednum() {
  killednum_ = 0u;
  clear_has_killednum();
}
inline ::google::protobuf::uint32 TCountryWarGridNpcBuildingInfo::killednum() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridNpcBuildingInfo.KilledNum)
  return killednum_;
}
inline void TCountryWarGridNpcBuildingInfo::set_killednum(::google::protobuf::uint32 value) {
  set_has_killednum();
  killednum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridNpcBuildingInfo.KilledNum)
}

// optional uint64 ResetTime = 6;
inline bool TCountryWarGridNpcBuildingInfo::has_resettime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCountryWarGridNpcBuildingInfo::set_has_resettime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_has_resettime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_resettime() {
  resettime_ = GOOGLE_ULONGLONG(0);
  clear_has_resettime();
}
inline ::google::protobuf::uint64 TCountryWarGridNpcBuildingInfo::resettime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridNpcBuildingInfo.ResetTime)
  return resettime_;
}
inline void TCountryWarGridNpcBuildingInfo::set_resettime(::google::protobuf::uint64 value) {
  set_has_resettime();
  resettime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridNpcBuildingInfo.ResetTime)
}

// repeated .pb.TCountryWarHpInfo GarrHpArray = 7;
inline int TCountryWarGridNpcBuildingInfo::garrhparray_size() const {
  return garrhparray_.size();
}
inline void TCountryWarGridNpcBuildingInfo::clear_garrhparray() {
  garrhparray_.Clear();
}
inline const ::pb::TCountryWarHpInfo& TCountryWarGridNpcBuildingInfo::garrhparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridNpcBuildingInfo.GarrHpArray)
  return garrhparray_.Get(index);
}
inline ::pb::TCountryWarHpInfo* TCountryWarGridNpcBuildingInfo::mutable_garrhparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridNpcBuildingInfo.GarrHpArray)
  return garrhparray_.Mutable(index);
}
inline ::pb::TCountryWarHpInfo* TCountryWarGridNpcBuildingInfo::add_garrhparray() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGridNpcBuildingInfo.GarrHpArray)
  return garrhparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >&
TCountryWarGridNpcBuildingInfo::garrhparray() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGridNpcBuildingInfo.GarrHpArray)
  return garrhparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >*
TCountryWarGridNpcBuildingInfo::mutable_garrhparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGridNpcBuildingInfo.GarrHpArray)
  return &garrhparray_;
}

// optional .pb.TCountryWarGridFirstInfo FirstInfo = 8;
inline bool TCountryWarGridNpcBuildingInfo::has_firstinfo() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCountryWarGridNpcBuildingInfo::set_has_firstinfo() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_has_firstinfo() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCountryWarGridNpcBuildingInfo::clear_firstinfo() {
  if (firstinfo_ != NULL) firstinfo_->::pb::TCountryWarGridFirstInfo::Clear();
  clear_has_firstinfo();
}
inline const ::pb::TCountryWarGridFirstInfo& TCountryWarGridNpcBuildingInfo::firstinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridNpcBuildingInfo.FirstInfo)
  return firstinfo_ != NULL ? *firstinfo_ : *default_instance_->firstinfo_;
}
inline ::pb::TCountryWarGridFirstInfo* TCountryWarGridNpcBuildingInfo::mutable_firstinfo() {
  set_has_firstinfo();
  if (firstinfo_ == NULL) firstinfo_ = new ::pb::TCountryWarGridFirstInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridNpcBuildingInfo.FirstInfo)
  return firstinfo_;
}
inline ::pb::TCountryWarGridFirstInfo* TCountryWarGridNpcBuildingInfo::release_firstinfo() {
  clear_has_firstinfo();
  ::pb::TCountryWarGridFirstInfo* temp = firstinfo_;
  firstinfo_ = NULL;
  return temp;
}
inline void TCountryWarGridNpcBuildingInfo::set_allocated_firstinfo(::pb::TCountryWarGridFirstInfo* firstinfo) {
  delete firstinfo_;
  firstinfo_ = firstinfo;
  if (firstinfo) {
    set_has_firstinfo();
  } else {
    clear_has_firstinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGridNpcBuildingInfo.FirstInfo)
}

// -------------------------------------------------------------------

// TCountryWarHpInfo

// optional uint32 Htid = 1;
inline bool TCountryWarHpInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarHpInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarHpInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarHpInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TCountryWarHpInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarHpInfo.Htid)
  return htid_;
}
inline void TCountryWarHpInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarHpInfo.Htid)
}

// optional uint32 HpNum = 2;
inline bool TCountryWarHpInfo::has_hpnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarHpInfo::set_has_hpnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarHpInfo::clear_has_hpnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarHpInfo::clear_hpnum() {
  hpnum_ = 0u;
  clear_has_hpnum();
}
inline ::google::protobuf::uint32 TCountryWarHpInfo::hpnum() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarHpInfo.HpNum)
  return hpnum_;
}
inline void TCountryWarHpInfo::set_hpnum(::google::protobuf::uint32 value) {
  set_has_hpnum();
  hpnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarHpInfo.HpNum)
}

// -------------------------------------------------------------------

// TCountryWarGridFirstInfo

// optional uint64 GuildId = 1;
inline bool TCountryWarGridFirstInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGridFirstInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGridFirstInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGridFirstInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TCountryWarGridFirstInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridFirstInfo.GuildId)
  return guildid_;
}
inline void TCountryWarGridFirstInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridFirstInfo.GuildId)
}

// optional string GuildName = 2;
inline bool TCountryWarGridFirstInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarGridFirstInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarGridFirstInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarGridFirstInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TCountryWarGridFirstInfo::guildname() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridFirstInfo.GuildName)
  return *guildname_;
}
inline void TCountryWarGridFirstInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridFirstInfo.GuildName)
}
inline void TCountryWarGridFirstInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCountryWarGridFirstInfo.GuildName)
}
inline void TCountryWarGridFirstInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCountryWarGridFirstInfo.GuildName)
}
inline ::std::string* TCountryWarGridFirstInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridFirstInfo.GuildName)
  return guildname_;
}
inline ::std::string* TCountryWarGridFirstInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCountryWarGridFirstInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGridFirstInfo.GuildName)
}

// optional uint64 OccupyTime = 3;
inline bool TCountryWarGridFirstInfo::has_occupytime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarGridFirstInfo::set_has_occupytime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarGridFirstInfo::clear_has_occupytime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarGridFirstInfo::clear_occupytime() {
  occupytime_ = GOOGLE_ULONGLONG(0);
  clear_has_occupytime();
}
inline ::google::protobuf::uint64 TCountryWarGridFirstInfo::occupytime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridFirstInfo.OccupyTime)
  return occupytime_;
}
inline void TCountryWarGridFirstInfo::set_occupytime(::google::protobuf::uint64 value) {
  set_has_occupytime();
  occupytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridFirstInfo.OccupyTime)
}

// repeated .pb.TCountryWarGridKillSiegeInfo FirstSiegeInfo = 4;
inline int TCountryWarGridFirstInfo::firstsiegeinfo_size() const {
  return firstsiegeinfo_.size();
}
inline void TCountryWarGridFirstInfo::clear_firstsiegeinfo() {
  firstsiegeinfo_.Clear();
}
inline const ::pb::TCountryWarGridKillSiegeInfo& TCountryWarGridFirstInfo::firstsiegeinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridFirstInfo.FirstSiegeInfo)
  return firstsiegeinfo_.Get(index);
}
inline ::pb::TCountryWarGridKillSiegeInfo* TCountryWarGridFirstInfo::mutable_firstsiegeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridFirstInfo.FirstSiegeInfo)
  return firstsiegeinfo_.Mutable(index);
}
inline ::pb::TCountryWarGridKillSiegeInfo* TCountryWarGridFirstInfo::add_firstsiegeinfo() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGridFirstInfo.FirstSiegeInfo)
  return firstsiegeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridKillSiegeInfo >&
TCountryWarGridFirstInfo::firstsiegeinfo() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGridFirstInfo.FirstSiegeInfo)
  return firstsiegeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridKillSiegeInfo >*
TCountryWarGridFirstInfo::mutable_firstsiegeinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGridFirstInfo.FirstSiegeInfo)
  return &firstsiegeinfo_;
}

// repeated .pb.TCountryWarGridKillSiegeInfo FirstKillInfo = 5;
inline int TCountryWarGridFirstInfo::firstkillinfo_size() const {
  return firstkillinfo_.size();
}
inline void TCountryWarGridFirstInfo::clear_firstkillinfo() {
  firstkillinfo_.Clear();
}
inline const ::pb::TCountryWarGridKillSiegeInfo& TCountryWarGridFirstInfo::firstkillinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridFirstInfo.FirstKillInfo)
  return firstkillinfo_.Get(index);
}
inline ::pb::TCountryWarGridKillSiegeInfo* TCountryWarGridFirstInfo::mutable_firstkillinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridFirstInfo.FirstKillInfo)
  return firstkillinfo_.Mutable(index);
}
inline ::pb::TCountryWarGridKillSiegeInfo* TCountryWarGridFirstInfo::add_firstkillinfo() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGridFirstInfo.FirstKillInfo)
  return firstkillinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridKillSiegeInfo >&
TCountryWarGridFirstInfo::firstkillinfo() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGridFirstInfo.FirstKillInfo)
  return firstkillinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridKillSiegeInfo >*
TCountryWarGridFirstInfo::mutable_firstkillinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGridFirstInfo.FirstKillInfo)
  return &firstkillinfo_;
}

// -------------------------------------------------------------------

// TCountryWarGridKillSiegeInfo

// optional uint64 Uid = 1;
inline bool TCountryWarGridKillSiegeInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGridKillSiegeInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGridKillSiegeInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGridKillSiegeInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCountryWarGridKillSiegeInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridKillSiegeInfo.Uid)
  return uid_;
}
inline void TCountryWarGridKillSiegeInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridKillSiegeInfo.Uid)
}

// optional string Uname = 2;
inline bool TCountryWarGridKillSiegeInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarGridKillSiegeInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarGridKillSiegeInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarGridKillSiegeInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TCountryWarGridKillSiegeInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridKillSiegeInfo.Uname)
  return *uname_;
}
inline void TCountryWarGridKillSiegeInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridKillSiegeInfo.Uname)
}
inline void TCountryWarGridKillSiegeInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCountryWarGridKillSiegeInfo.Uname)
}
inline void TCountryWarGridKillSiegeInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCountryWarGridKillSiegeInfo.Uname)
}
inline ::std::string* TCountryWarGridKillSiegeInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridKillSiegeInfo.Uname)
  return uname_;
}
inline ::std::string* TCountryWarGridKillSiegeInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCountryWarGridKillSiegeInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarGridKillSiegeInfo.Uname)
}

// optional uint32 Num = 3;
inline bool TCountryWarGridKillSiegeInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarGridKillSiegeInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarGridKillSiegeInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarGridKillSiegeInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TCountryWarGridKillSiegeInfo::num() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridKillSiegeInfo.Num)
  return num_;
}
inline void TCountryWarGridKillSiegeInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridKillSiegeInfo.Num)
}

// -------------------------------------------------------------------

// TCountryWarGridMonsterInfo

// repeated .pb.TCountryWarHpInfo MonsterHpArray = 1;
inline int TCountryWarGridMonsterInfo::monsterhparray_size() const {
  return monsterhparray_.size();
}
inline void TCountryWarGridMonsterInfo::clear_monsterhparray() {
  monsterhparray_.Clear();
}
inline const ::pb::TCountryWarHpInfo& TCountryWarGridMonsterInfo::monsterhparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridMonsterInfo.MonsterHpArray)
  return monsterhparray_.Get(index);
}
inline ::pb::TCountryWarHpInfo* TCountryWarGridMonsterInfo::mutable_monsterhparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridMonsterInfo.MonsterHpArray)
  return monsterhparray_.Mutable(index);
}
inline ::pb::TCountryWarHpInfo* TCountryWarGridMonsterInfo::add_monsterhparray() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGridMonsterInfo.MonsterHpArray)
  return monsterhparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >&
TCountryWarGridMonsterInfo::monsterhparray() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGridMonsterInfo.MonsterHpArray)
  return monsterhparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >*
TCountryWarGridMonsterInfo::mutable_monsterhparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGridMonsterInfo.MonsterHpArray)
  return &monsterhparray_;
}

// optional uint64 StartTime = 2;
inline bool TCountryWarGridMonsterInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarGridMonsterInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarGridMonsterInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarGridMonsterInfo::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 TCountryWarGridMonsterInfo::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridMonsterInfo.StartTime)
  return starttime_;
}
inline void TCountryWarGridMonsterInfo::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridMonsterInfo.StartTime)
}

// optional uint64 EndTime = 3;
inline bool TCountryWarGridMonsterInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarGridMonsterInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarGridMonsterInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarGridMonsterInfo::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TCountryWarGridMonsterInfo::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridMonsterInfo.EndTime)
  return endtime_;
}
inline void TCountryWarGridMonsterInfo::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridMonsterInfo.EndTime)
}

// -------------------------------------------------------------------

// TCountryWarGridResourceInfo

// optional uint32 ResourceNum = 1;
inline bool TCountryWarGridResourceInfo::has_resourcenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGridResourceInfo::set_has_resourcenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGridResourceInfo::clear_has_resourcenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGridResourceInfo::clear_resourcenum() {
  resourcenum_ = 0u;
  clear_has_resourcenum();
}
inline ::google::protobuf::uint32 TCountryWarGridResourceInfo::resourcenum() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridResourceInfo.ResourceNum)
  return resourcenum_;
}
inline void TCountryWarGridResourceInfo::set_resourcenum(::google::protobuf::uint32 value) {
  set_has_resourcenum();
  resourcenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridResourceInfo.ResourceNum)
}

// optional uint64 Uid = 2;
inline bool TCountryWarGridResourceInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarGridResourceInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarGridResourceInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarGridResourceInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCountryWarGridResourceInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridResourceInfo.Uid)
  return uid_;
}
inline void TCountryWarGridResourceInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridResourceInfo.Uid)
}

// optional uint32 TeamId = 3;
inline bool TCountryWarGridResourceInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarGridResourceInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarGridResourceInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarGridResourceInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarGridResourceInfo::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridResourceInfo.TeamId)
  return teamid_;
}
inline void TCountryWarGridResourceInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridResourceInfo.TeamId)
}

// optional uint64 StartTime = 4;
inline bool TCountryWarGridResourceInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCountryWarGridResourceInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCountryWarGridResourceInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCountryWarGridResourceInfo::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 TCountryWarGridResourceInfo::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridResourceInfo.StartTime)
  return starttime_;
}
inline void TCountryWarGridResourceInfo::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridResourceInfo.StartTime)
}

// optional uint64 EndTime = 5;
inline bool TCountryWarGridResourceInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCountryWarGridResourceInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCountryWarGridResourceInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCountryWarGridResourceInfo::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TCountryWarGridResourceInfo::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridResourceInfo.EndTime)
  return endtime_;
}
inline void TCountryWarGridResourceInfo::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridResourceInfo.EndTime)
}

// -------------------------------------------------------------------

// TCountryWarGridTreasureInfo

// optional uint64 StartTime = 1;
inline bool TCountryWarGridTreasureInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGridTreasureInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGridTreasureInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGridTreasureInfo::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 TCountryWarGridTreasureInfo::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridTreasureInfo.StartTime)
  return starttime_;
}
inline void TCountryWarGridTreasureInfo::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridTreasureInfo.StartTime)
}

// optional uint64 EndTime = 2;
inline bool TCountryWarGridTreasureInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarGridTreasureInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarGridTreasureInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarGridTreasureInfo::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TCountryWarGridTreasureInfo::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridTreasureInfo.EndTime)
  return endtime_;
}
inline void TCountryWarGridTreasureInfo::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridTreasureInfo.EndTime)
}

// optional uint64 Uid = 3;
inline bool TCountryWarGridTreasureInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarGridTreasureInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarGridTreasureInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarGridTreasureInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCountryWarGridTreasureInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridTreasureInfo.Uid)
  return uid_;
}
inline void TCountryWarGridTreasureInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridTreasureInfo.Uid)
}

// optional uint32 TreasureId = 4;
inline bool TCountryWarGridTreasureInfo::has_treasureid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCountryWarGridTreasureInfo::set_has_treasureid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCountryWarGridTreasureInfo::clear_has_treasureid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCountryWarGridTreasureInfo::clear_treasureid() {
  treasureid_ = 0u;
  clear_has_treasureid();
}
inline ::google::protobuf::uint32 TCountryWarGridTreasureInfo::treasureid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridTreasureInfo.TreasureId)
  return treasureid_;
}
inline void TCountryWarGridTreasureInfo::set_treasureid(::google::protobuf::uint32 value) {
  set_has_treasureid();
  treasureid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGridTreasureInfo.TreasureId)
}

// repeated .pb.TCountryWarHpInfo MonsterHpArray = 5;
inline int TCountryWarGridTreasureInfo::monsterhparray_size() const {
  return monsterhparray_.size();
}
inline void TCountryWarGridTreasureInfo::clear_monsterhparray() {
  monsterhparray_.Clear();
}
inline const ::pb::TCountryWarHpInfo& TCountryWarGridTreasureInfo::monsterhparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridTreasureInfo.MonsterHpArray)
  return monsterhparray_.Get(index);
}
inline ::pb::TCountryWarHpInfo* TCountryWarGridTreasureInfo::mutable_monsterhparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridTreasureInfo.MonsterHpArray)
  return monsterhparray_.Mutable(index);
}
inline ::pb::TCountryWarHpInfo* TCountryWarGridTreasureInfo::add_monsterhparray() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGridTreasureInfo.MonsterHpArray)
  return monsterhparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >&
TCountryWarGridTreasureInfo::monsterhparray() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGridTreasureInfo.MonsterHpArray)
  return monsterhparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarHpInfo >*
TCountryWarGridTreasureInfo::mutable_monsterhparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGridTreasureInfo.MonsterHpArray)
  return &monsterhparray_;
}

// -------------------------------------------------------------------

// TCountryWarMarchInfo

// optional uint64 Uid = 1;
inline bool TCountryWarMarchInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarMarchInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarMarchInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarMarchInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCountryWarMarchInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchInfo.Uid)
  return uid_;
}
inline void TCountryWarMarchInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchInfo.Uid)
}

// optional .pb.EMarchType MarchType = 2;
inline bool TCountryWarMarchInfo::has_marchtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarMarchInfo::set_has_marchtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarMarchInfo::clear_has_marchtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarMarchInfo::clear_marchtype() {
  marchtype_ = 1;
  clear_has_marchtype();
}
inline ::pb::EMarchType TCountryWarMarchInfo::marchtype() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchInfo.MarchType)
  return static_cast< ::pb::EMarchType >(marchtype_);
}
inline void TCountryWarMarchInfo::set_marchtype(::pb::EMarchType value) {
  assert(::pb::EMarchType_IsValid(value));
  set_has_marchtype();
  marchtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchInfo.MarchType)
}

// optional uint32 TeamId = 3;
inline bool TCountryWarMarchInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarMarchInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarMarchInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarMarchInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarMarchInfo::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchInfo.TeamId)
  return teamid_;
}
inline void TCountryWarMarchInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchInfo.TeamId)
}

// optional uint32 StartGridIndex = 4;
inline bool TCountryWarMarchInfo::has_startgridindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCountryWarMarchInfo::set_has_startgridindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCountryWarMarchInfo::clear_has_startgridindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCountryWarMarchInfo::clear_startgridindex() {
  startgridindex_ = 0u;
  clear_has_startgridindex();
}
inline ::google::protobuf::uint32 TCountryWarMarchInfo::startgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchInfo.StartGridIndex)
  return startgridindex_;
}
inline void TCountryWarMarchInfo::set_startgridindex(::google::protobuf::uint32 value) {
  set_has_startgridindex();
  startgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchInfo.StartGridIndex)
}

// optional uint32 EndGridIndex = 5;
inline bool TCountryWarMarchInfo::has_endgridindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCountryWarMarchInfo::set_has_endgridindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCountryWarMarchInfo::clear_has_endgridindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCountryWarMarchInfo::clear_endgridindex() {
  endgridindex_ = 0u;
  clear_has_endgridindex();
}
inline ::google::protobuf::uint32 TCountryWarMarchInfo::endgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchInfo.EndGridIndex)
  return endgridindex_;
}
inline void TCountryWarMarchInfo::set_endgridindex(::google::protobuf::uint32 value) {
  set_has_endgridindex();
  endgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchInfo.EndGridIndex)
}

// optional uint64 StartTime = 6;
inline bool TCountryWarMarchInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCountryWarMarchInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCountryWarMarchInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCountryWarMarchInfo::clear_starttime() {
  starttime_ = GOOGLE_ULONGLONG(0);
  clear_has_starttime();
}
inline ::google::protobuf::uint64 TCountryWarMarchInfo::starttime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchInfo.StartTime)
  return starttime_;
}
inline void TCountryWarMarchInfo::set_starttime(::google::protobuf::uint64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchInfo.StartTime)
}

// optional uint64 EndTime = 7;
inline bool TCountryWarMarchInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCountryWarMarchInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCountryWarMarchInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCountryWarMarchInfo::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TCountryWarMarchInfo::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchInfo.EndTime)
  return endtime_;
}
inline void TCountryWarMarchInfo::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchInfo.EndTime)
}

// optional uint64 SpeedUpTime = 8;
inline bool TCountryWarMarchInfo::has_speeduptime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCountryWarMarchInfo::set_has_speeduptime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCountryWarMarchInfo::clear_has_speeduptime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCountryWarMarchInfo::clear_speeduptime() {
  speeduptime_ = GOOGLE_ULONGLONG(0);
  clear_has_speeduptime();
}
inline ::google::protobuf::uint64 TCountryWarMarchInfo::speeduptime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchInfo.SpeedUpTime)
  return speeduptime_;
}
inline void TCountryWarMarchInfo::set_speeduptime(::google::protobuf::uint64 value) {
  set_has_speeduptime();
  speeduptime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchInfo.SpeedUpTime)
}

// optional uint32 DisPercent = 9;
inline bool TCountryWarMarchInfo::has_dispercent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TCountryWarMarchInfo::set_has_dispercent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TCountryWarMarchInfo::clear_has_dispercent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TCountryWarMarchInfo::clear_dispercent() {
  dispercent_ = 0u;
  clear_has_dispercent();
}
inline ::google::protobuf::uint32 TCountryWarMarchInfo::dispercent() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchInfo.DisPercent)
  return dispercent_;
}
inline void TCountryWarMarchInfo::set_dispercent(::google::protobuf::uint32 value) {
  set_has_dispercent();
  dispercent_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchInfo.DisPercent)
}

// -------------------------------------------------------------------

// TCountryWarEnterCountryWarReq

// -------------------------------------------------------------------

// TCountryWarEnterCountryWarRsp

// optional uint32 MapId = 1;
inline bool TCountryWarEnterCountryWarRsp::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarEnterCountryWarRsp::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarEnterCountryWarRsp::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarEnterCountryWarRsp::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 TCountryWarEnterCountryWarRsp::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarEnterCountryWarRsp.MapId)
  return mapid_;
}
inline void TCountryWarEnterCountryWarRsp::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarEnterCountryWarRsp.MapId)
}

// optional uint32 GridIndex = 2;
inline bool TCountryWarEnterCountryWarRsp::has_gridindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarEnterCountryWarRsp::set_has_gridindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarEnterCountryWarRsp::clear_has_gridindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarEnterCountryWarRsp::clear_gridindex() {
  gridindex_ = 0u;
  clear_has_gridindex();
}
inline ::google::protobuf::uint32 TCountryWarEnterCountryWarRsp::gridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarEnterCountryWarRsp.GridIndex)
  return gridindex_;
}
inline void TCountryWarEnterCountryWarRsp::set_gridindex(::google::protobuf::uint32 value) {
  set_has_gridindex();
  gridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarEnterCountryWarRsp.GridIndex)
}

// -------------------------------------------------------------------

// TCountryWarGetMapInfoReq

// optional uint32 GridIndex = 1;
inline bool TCountryWarGetMapInfoReq::has_gridindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGetMapInfoReq::set_has_gridindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGetMapInfoReq::clear_has_gridindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGetMapInfoReq::clear_gridindex() {
  gridindex_ = 0u;
  clear_has_gridindex();
}
inline ::google::protobuf::uint32 TCountryWarGetMapInfoReq::gridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGetMapInfoReq.GridIndex)
  return gridindex_;
}
inline void TCountryWarGetMapInfoReq::set_gridindex(::google::protobuf::uint32 value) {
  set_has_gridindex();
  gridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGetMapInfoReq.GridIndex)
}

// -------------------------------------------------------------------

// TCountryWarGetMapInfoRsp

// repeated .pb.TCountryWarGridInfo GridArr = 1;
inline int TCountryWarGetMapInfoRsp::gridarr_size() const {
  return gridarr_.size();
}
inline void TCountryWarGetMapInfoRsp::clear_gridarr() {
  gridarr_.Clear();
}
inline const ::pb::TCountryWarGridInfo& TCountryWarGetMapInfoRsp::gridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGetMapInfoRsp.GridArr)
  return gridarr_.Get(index);
}
inline ::pb::TCountryWarGridInfo* TCountryWarGetMapInfoRsp::mutable_gridarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGetMapInfoRsp.GridArr)
  return gridarr_.Mutable(index);
}
inline ::pb::TCountryWarGridInfo* TCountryWarGetMapInfoRsp::add_gridarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGetMapInfoRsp.GridArr)
  return gridarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridInfo >&
TCountryWarGetMapInfoRsp::gridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGetMapInfoRsp.GridArr)
  return gridarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridInfo >*
TCountryWarGetMapInfoRsp::mutable_gridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGetMapInfoRsp.GridArr)
  return &gridarr_;
}

// repeated .pb.TCountryWarMarchInfo MarchArr = 2;
inline int TCountryWarGetMapInfoRsp::marcharr_size() const {
  return marcharr_.size();
}
inline void TCountryWarGetMapInfoRsp::clear_marcharr() {
  marcharr_.Clear();
}
inline const ::pb::TCountryWarMarchInfo& TCountryWarGetMapInfoRsp::marcharr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGetMapInfoRsp.MarchArr)
  return marcharr_.Get(index);
}
inline ::pb::TCountryWarMarchInfo* TCountryWarGetMapInfoRsp::mutable_marcharr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGetMapInfoRsp.MarchArr)
  return marcharr_.Mutable(index);
}
inline ::pb::TCountryWarMarchInfo* TCountryWarGetMapInfoRsp::add_marcharr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGetMapInfoRsp.MarchArr)
  return marcharr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarMarchInfo >&
TCountryWarGetMapInfoRsp::marcharr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGetMapInfoRsp.MarchArr)
  return marcharr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarMarchInfo >*
TCountryWarGetMapInfoRsp::mutable_marcharr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGetMapInfoRsp.MarchArr)
  return &marcharr_;
}

// repeated .pb.TCountryWarUserInfo UserArr = 3;
inline int TCountryWarGetMapInfoRsp::userarr_size() const {
  return userarr_.size();
}
inline void TCountryWarGetMapInfoRsp::clear_userarr() {
  userarr_.Clear();
}
inline const ::pb::TCountryWarUserInfo& TCountryWarGetMapInfoRsp::userarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGetMapInfoRsp.UserArr)
  return userarr_.Get(index);
}
inline ::pb::TCountryWarUserInfo* TCountryWarGetMapInfoRsp::mutable_userarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGetMapInfoRsp.UserArr)
  return userarr_.Mutable(index);
}
inline ::pb::TCountryWarUserInfo* TCountryWarGetMapInfoRsp::add_userarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGetMapInfoRsp.UserArr)
  return userarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >&
TCountryWarGetMapInfoRsp::userarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGetMapInfoRsp.UserArr)
  return userarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >*
TCountryWarGetMapInfoRsp::mutable_userarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGetMapInfoRsp.UserArr)
  return &userarr_;
}

// repeated .pb.TCountryWarGuildInfo GuildArr = 4;
inline int TCountryWarGetMapInfoRsp::guildarr_size() const {
  return guildarr_.size();
}
inline void TCountryWarGetMapInfoRsp::clear_guildarr() {
  guildarr_.Clear();
}
inline const ::pb::TCountryWarGuildInfo& TCountryWarGetMapInfoRsp::guildarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGetMapInfoRsp.GuildArr)
  return guildarr_.Get(index);
}
inline ::pb::TCountryWarGuildInfo* TCountryWarGetMapInfoRsp::mutable_guildarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGetMapInfoRsp.GuildArr)
  return guildarr_.Mutable(index);
}
inline ::pb::TCountryWarGuildInfo* TCountryWarGetMapInfoRsp::add_guildarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGetMapInfoRsp.GuildArr)
  return guildarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >&
TCountryWarGetMapInfoRsp::guildarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGetMapInfoRsp.GuildArr)
  return guildarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >*
TCountryWarGetMapInfoRsp::mutable_guildarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGetMapInfoRsp.GuildArr)
  return &guildarr_;
}

// -------------------------------------------------------------------

// TCountryWarAttackReq

// optional uint32 TargetGridIndex = 1;
inline bool TCountryWarAttackReq::has_targetgridindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarAttackReq::set_has_targetgridindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarAttackReq::clear_has_targetgridindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarAttackReq::clear_targetgridindex() {
  targetgridindex_ = 0u;
  clear_has_targetgridindex();
}
inline ::google::protobuf::uint32 TCountryWarAttackReq::targetgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAttackReq.TargetGridIndex)
  return targetgridindex_;
}
inline void TCountryWarAttackReq::set_targetgridindex(::google::protobuf::uint32 value) {
  set_has_targetgridindex();
  targetgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAttackReq.TargetGridIndex)
}

// optional uint32 TeamId = 2;
inline bool TCountryWarAttackReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarAttackReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarAttackReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarAttackReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarAttackReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAttackReq.TeamId)
  return teamid_;
}
inline void TCountryWarAttackReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAttackReq.TeamId)
}

// -------------------------------------------------------------------

// TCountryWarCollectResourceReq

// optional uint32 TargetGridIndex = 1;
inline bool TCountryWarCollectResourceReq::has_targetgridindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarCollectResourceReq::set_has_targetgridindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarCollectResourceReq::clear_has_targetgridindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarCollectResourceReq::clear_targetgridindex() {
  targetgridindex_ = 0u;
  clear_has_targetgridindex();
}
inline ::google::protobuf::uint32 TCountryWarCollectResourceReq::targetgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarCollectResourceReq.TargetGridIndex)
  return targetgridindex_;
}
inline void TCountryWarCollectResourceReq::set_targetgridindex(::google::protobuf::uint32 value) {
  set_has_targetgridindex();
  targetgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarCollectResourceReq.TargetGridIndex)
}

// optional uint32 TeamId = 2;
inline bool TCountryWarCollectResourceReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarCollectResourceReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarCollectResourceReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarCollectResourceReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarCollectResourceReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarCollectResourceReq.TeamId)
  return teamid_;
}
inline void TCountryWarCollectResourceReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarCollectResourceReq.TeamId)
}

// -------------------------------------------------------------------

// TCountryWarSnatchResourceReq

// optional uint32 TargetGridIndex = 1;
inline bool TCountryWarSnatchResourceReq::has_targetgridindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarSnatchResourceReq::set_has_targetgridindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarSnatchResourceReq::clear_has_targetgridindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarSnatchResourceReq::clear_targetgridindex() {
  targetgridindex_ = 0u;
  clear_has_targetgridindex();
}
inline ::google::protobuf::uint32 TCountryWarSnatchResourceReq::targetgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarSnatchResourceReq.TargetGridIndex)
  return targetgridindex_;
}
inline void TCountryWarSnatchResourceReq::set_targetgridindex(::google::protobuf::uint32 value) {
  set_has_targetgridindex();
  targetgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarSnatchResourceReq.TargetGridIndex)
}

// optional uint32 TeamId = 2;
inline bool TCountryWarSnatchResourceReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarSnatchResourceReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarSnatchResourceReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarSnatchResourceReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarSnatchResourceReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarSnatchResourceReq.TeamId)
  return teamid_;
}
inline void TCountryWarSnatchResourceReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarSnatchResourceReq.TeamId)
}

// -------------------------------------------------------------------

// TCountryWarCollectReturnReq

// optional uint32 TeamId = 1;
inline bool TCountryWarCollectReturnReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarCollectReturnReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarCollectReturnReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarCollectReturnReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarCollectReturnReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarCollectReturnReq.TeamId)
  return teamid_;
}
inline void TCountryWarCollectReturnReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarCollectReturnReq.TeamId)
}

// -------------------------------------------------------------------

// TCountryWarSearchTreasureReq

// optional uint32 TargetGridIndex = 1;
inline bool TCountryWarSearchTreasureReq::has_targetgridindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarSearchTreasureReq::set_has_targetgridindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarSearchTreasureReq::clear_has_targetgridindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarSearchTreasureReq::clear_targetgridindex() {
  targetgridindex_ = 0u;
  clear_has_targetgridindex();
}
inline ::google::protobuf::uint32 TCountryWarSearchTreasureReq::targetgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarSearchTreasureReq.TargetGridIndex)
  return targetgridindex_;
}
inline void TCountryWarSearchTreasureReq::set_targetgridindex(::google::protobuf::uint32 value) {
  set_has_targetgridindex();
  targetgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarSearchTreasureReq.TargetGridIndex)
}

// repeated uint32 HidArr = 2;
inline int TCountryWarSearchTreasureReq::hidarr_size() const {
  return hidarr_.size();
}
inline void TCountryWarSearchTreasureReq::clear_hidarr() {
  hidarr_.Clear();
}
inline ::google::protobuf::uint32 TCountryWarSearchTreasureReq::hidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarSearchTreasureReq.HidArr)
  return hidarr_.Get(index);
}
inline void TCountryWarSearchTreasureReq::set_hidarr(int index, ::google::protobuf::uint32 value) {
  hidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarSearchTreasureReq.HidArr)
}
inline void TCountryWarSearchTreasureReq::add_hidarr(::google::protobuf::uint32 value) {
  hidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCountryWarSearchTreasureReq.HidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCountryWarSearchTreasureReq::hidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarSearchTreasureReq.HidArr)
  return hidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCountryWarSearchTreasureReq::mutable_hidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarSearchTreasureReq.HidArr)
  return &hidarr_;
}

// -------------------------------------------------------------------

// TCountryWarDigTreasureReq

// optional uint32 TargetGridIndex = 1;
inline bool TCountryWarDigTreasureReq::has_targetgridindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarDigTreasureReq::set_has_targetgridindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarDigTreasureReq::clear_has_targetgridindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarDigTreasureReq::clear_targetgridindex() {
  targetgridindex_ = 0u;
  clear_has_targetgridindex();
}
inline ::google::protobuf::uint32 TCountryWarDigTreasureReq::targetgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarDigTreasureReq.TargetGridIndex)
  return targetgridindex_;
}
inline void TCountryWarDigTreasureReq::set_targetgridindex(::google::protobuf::uint32 value) {
  set_has_targetgridindex();
  targetgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarDigTreasureReq.TargetGridIndex)
}

// optional uint32 TeamId = 2;
inline bool TCountryWarDigTreasureReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarDigTreasureReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarDigTreasureReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarDigTreasureReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarDigTreasureReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarDigTreasureReq.TeamId)
  return teamid_;
}
inline void TCountryWarDigTreasureReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarDigTreasureReq.TeamId)
}

// -------------------------------------------------------------------

// TCountryWarGarrisonGridReq

// optional uint32 TargetGridIndex = 1;
inline bool TCountryWarGarrisonGridReq::has_targetgridindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGarrisonGridReq::set_has_targetgridindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGarrisonGridReq::clear_has_targetgridindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGarrisonGridReq::clear_targetgridindex() {
  targetgridindex_ = 0u;
  clear_has_targetgridindex();
}
inline ::google::protobuf::uint32 TCountryWarGarrisonGridReq::targetgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGarrisonGridReq.TargetGridIndex)
  return targetgridindex_;
}
inline void TCountryWarGarrisonGridReq::set_targetgridindex(::google::protobuf::uint32 value) {
  set_has_targetgridindex();
  targetgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGarrisonGridReq.TargetGridIndex)
}

// optional uint32 TeamId = 2;
inline bool TCountryWarGarrisonGridReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarGarrisonGridReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarGarrisonGridReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarGarrisonGridReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarGarrisonGridReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGarrisonGridReq.TeamId)
  return teamid_;
}
inline void TCountryWarGarrisonGridReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGarrisonGridReq.TeamId)
}

// -------------------------------------------------------------------

// TCountryWarTransportReq

// optional uint64 TargetUid = 1;
inline bool TCountryWarTransportReq::has_targetuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarTransportReq::set_has_targetuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarTransportReq::clear_has_targetuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarTransportReq::clear_targetuid() {
  targetuid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetuid();
}
inline ::google::protobuf::uint64 TCountryWarTransportReq::targetuid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarTransportReq.TargetUid)
  return targetuid_;
}
inline void TCountryWarTransportReq::set_targetuid(::google::protobuf::uint64 value) {
  set_has_targetuid();
  targetuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarTransportReq.TargetUid)
}

// repeated uint32 HidArr = 2;
inline int TCountryWarTransportReq::hidarr_size() const {
  return hidarr_.size();
}
inline void TCountryWarTransportReq::clear_hidarr() {
  hidarr_.Clear();
}
inline ::google::protobuf::uint32 TCountryWarTransportReq::hidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarTransportReq.HidArr)
  return hidarr_.Get(index);
}
inline void TCountryWarTransportReq::set_hidarr(int index, ::google::protobuf::uint32 value) {
  hidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarTransportReq.HidArr)
}
inline void TCountryWarTransportReq::add_hidarr(::google::protobuf::uint32 value) {
  hidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCountryWarTransportReq.HidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCountryWarTransportReq::hidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarTransportReq.HidArr)
  return hidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCountryWarTransportReq::mutable_hidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarTransportReq.HidArr)
  return &hidarr_;
}

// repeated .pb.TCommonReward RewardArr = 3;
inline int TCountryWarTransportReq::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCountryWarTransportReq::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCountryWarTransportReq::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarTransportReq.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCountryWarTransportReq::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarTransportReq.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCountryWarTransportReq::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarTransportReq.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCountryWarTransportReq::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarTransportReq.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCountryWarTransportReq::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarTransportReq.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TCountryWarInvestigateGridReq

// optional uint32 TargetGridIndex = 1;
inline bool TCountryWarInvestigateGridReq::has_targetgridindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarInvestigateGridReq::set_has_targetgridindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarInvestigateGridReq::clear_has_targetgridindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarInvestigateGridReq::clear_targetgridindex() {
  targetgridindex_ = 0u;
  clear_has_targetgridindex();
}
inline ::google::protobuf::uint32 TCountryWarInvestigateGridReq::targetgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarInvestigateGridReq.TargetGridIndex)
  return targetgridindex_;
}
inline void TCountryWarInvestigateGridReq::set_targetgridindex(::google::protobuf::uint32 value) {
  set_has_targetgridindex();
  targetgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarInvestigateGridReq.TargetGridIndex)
}

// repeated uint32 HidArr = 2;
inline int TCountryWarInvestigateGridReq::hidarr_size() const {
  return hidarr_.size();
}
inline void TCountryWarInvestigateGridReq::clear_hidarr() {
  hidarr_.Clear();
}
inline ::google::protobuf::uint32 TCountryWarInvestigateGridReq::hidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarInvestigateGridReq.HidArr)
  return hidarr_.Get(index);
}
inline void TCountryWarInvestigateGridReq::set_hidarr(int index, ::google::protobuf::uint32 value) {
  hidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarInvestigateGridReq.HidArr)
}
inline void TCountryWarInvestigateGridReq::add_hidarr(::google::protobuf::uint32 value) {
  hidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCountryWarInvestigateGridReq.HidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCountryWarInvestigateGridReq::hidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarInvestigateGridReq.HidArr)
  return hidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCountryWarInvestigateGridReq::mutable_hidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarInvestigateGridReq.HidArr)
  return &hidarr_;
}

// -------------------------------------------------------------------

// TCountryWarMarchSpeedUpReq

// optional uint32 TeamId = 1;
inline bool TCountryWarMarchSpeedUpReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarMarchSpeedUpReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarMarchSpeedUpReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarMarchSpeedUpReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarMarchSpeedUpReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchSpeedUpReq.TeamId)
  return teamid_;
}
inline void TCountryWarMarchSpeedUpReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchSpeedUpReq.TeamId)
}

// optional uint32 ItemTid = 2;
inline bool TCountryWarMarchSpeedUpReq::has_itemtid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarMarchSpeedUpReq::set_has_itemtid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarMarchSpeedUpReq::clear_has_itemtid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarMarchSpeedUpReq::clear_itemtid() {
  itemtid_ = 0u;
  clear_has_itemtid();
}
inline ::google::protobuf::uint32 TCountryWarMarchSpeedUpReq::itemtid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchSpeedUpReq.ItemTid)
  return itemtid_;
}
inline void TCountryWarMarchSpeedUpReq::set_itemtid(::google::protobuf::uint32 value) {
  set_has_itemtid();
  itemtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchSpeedUpReq.ItemTid)
}

// -------------------------------------------------------------------

// TCountryWarMarchReturnReq

// optional uint32 TeamId = 1;
inline bool TCountryWarMarchReturnReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarMarchReturnReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarMarchReturnReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarMarchReturnReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarMarchReturnReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchReturnReq.TeamId)
  return teamid_;
}
inline void TCountryWarMarchReturnReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMarchReturnReq.TeamId)
}

// -------------------------------------------------------------------

// TCountryWarGarrisonReturnReq

// optional uint32 TeamId = 1;
inline bool TCountryWarGarrisonReturnReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarGarrisonReturnReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarGarrisonReturnReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarGarrisonReturnReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarGarrisonReturnReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGarrisonReturnReq.TeamId)
  return teamid_;
}
inline void TCountryWarGarrisonReturnReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarGarrisonReturnReq.TeamId)
}

// -------------------------------------------------------------------

// TCountryWarDrawReturnReq

// optional uint32 TeamId = 1;
inline bool TCountryWarDrawReturnReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarDrawReturnReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarDrawReturnReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarDrawReturnReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarDrawReturnReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarDrawReturnReq.TeamId)
  return teamid_;
}
inline void TCountryWarDrawReturnReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarDrawReturnReq.TeamId)
}

// optional uint32 GridIndex = 2;
inline bool TCountryWarDrawReturnReq::has_gridindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarDrawReturnReq::set_has_gridindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarDrawReturnReq::clear_has_gridindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarDrawReturnReq::clear_gridindex() {
  gridindex_ = 0u;
  clear_has_gridindex();
}
inline ::google::protobuf::uint32 TCountryWarDrawReturnReq::gridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarDrawReturnReq.GridIndex)
  return gridindex_;
}
inline void TCountryWarDrawReturnReq::set_gridindex(::google::protobuf::uint32 value) {
  set_has_gridindex();
  gridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarDrawReturnReq.GridIndex)
}

// -------------------------------------------------------------------

// TCountryWarMoveCityReq

// optional bool IsRand = 1;
inline bool TCountryWarMoveCityReq::has_isrand() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarMoveCityReq::set_has_isrand() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarMoveCityReq::clear_has_isrand() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarMoveCityReq::clear_isrand() {
  isrand_ = false;
  clear_has_isrand();
}
inline bool TCountryWarMoveCityReq::isrand() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMoveCityReq.IsRand)
  return isrand_;
}
inline void TCountryWarMoveCityReq::set_isrand(bool value) {
  set_has_isrand();
  isrand_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMoveCityReq.IsRand)
}

// optional uint32 TargetGridIndex = 2;
inline bool TCountryWarMoveCityReq::has_targetgridindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarMoveCityReq::set_has_targetgridindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarMoveCityReq::clear_has_targetgridindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarMoveCityReq::clear_targetgridindex() {
  targetgridindex_ = 0u;
  clear_has_targetgridindex();
}
inline ::google::protobuf::uint32 TCountryWarMoveCityReq::targetgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMoveCityReq.TargetGridIndex)
  return targetgridindex_;
}
inline void TCountryWarMoveCityReq::set_targetgridindex(::google::protobuf::uint32 value) {
  set_has_targetgridindex();
  targetgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMoveCityReq.TargetGridIndex)
}

// -------------------------------------------------------------------

// TCountryWarMoveCityRsp

// optional uint32 GridIndex = 1;
inline bool TCountryWarMoveCityRsp::has_gridindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarMoveCityRsp::set_has_gridindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarMoveCityRsp::clear_has_gridindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarMoveCityRsp::clear_gridindex() {
  gridindex_ = 0u;
  clear_has_gridindex();
}
inline ::google::protobuf::uint32 TCountryWarMoveCityRsp::gridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMoveCityRsp.GridIndex)
  return gridindex_;
}
inline void TCountryWarMoveCityRsp::set_gridindex(::google::protobuf::uint32 value) {
  set_has_gridindex();
  gridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarMoveCityRsp.GridIndex)
}

// -------------------------------------------------------------------

// TCountryWarInitiateAssemblyReq

// optional uint32 TeamId = 1;
inline bool TCountryWarInitiateAssemblyReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarInitiateAssemblyReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarInitiateAssemblyReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarInitiateAssemblyReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarInitiateAssemblyReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarInitiateAssemblyReq.TeamId)
  return teamid_;
}
inline void TCountryWarInitiateAssemblyReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarInitiateAssemblyReq.TeamId)
}

// optional uint32 TargetGridIndex = 2;
inline bool TCountryWarInitiateAssemblyReq::has_targetgridindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarInitiateAssemblyReq::set_has_targetgridindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarInitiateAssemblyReq::clear_has_targetgridindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarInitiateAssemblyReq::clear_targetgridindex() {
  targetgridindex_ = 0u;
  clear_has_targetgridindex();
}
inline ::google::protobuf::uint32 TCountryWarInitiateAssemblyReq::targetgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarInitiateAssemblyReq.TargetGridIndex)
  return targetgridindex_;
}
inline void TCountryWarInitiateAssemblyReq::set_targetgridindex(::google::protobuf::uint32 value) {
  set_has_targetgridindex();
  targetgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarInitiateAssemblyReq.TargetGridIndex)
}

// optional uint32 DurationTime = 3;
inline bool TCountryWarInitiateAssemblyReq::has_durationtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarInitiateAssemblyReq::set_has_durationtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarInitiateAssemblyReq::clear_has_durationtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarInitiateAssemblyReq::clear_durationtime() {
  durationtime_ = 0u;
  clear_has_durationtime();
}
inline ::google::protobuf::uint32 TCountryWarInitiateAssemblyReq::durationtime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarInitiateAssemblyReq.DurationTime)
  return durationtime_;
}
inline void TCountryWarInitiateAssemblyReq::set_durationtime(::google::protobuf::uint32 value) {
  set_has_durationtime();
  durationtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarInitiateAssemblyReq.DurationTime)
}

// -------------------------------------------------------------------

// TCountryWarCancelAssemblyReq

// optional uint32 AssemblyId = 1;
inline bool TCountryWarCancelAssemblyReq::has_assemblyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarCancelAssemblyReq::set_has_assemblyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarCancelAssemblyReq::clear_has_assemblyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarCancelAssemblyReq::clear_assemblyid() {
  assemblyid_ = 0u;
  clear_has_assemblyid();
}
inline ::google::protobuf::uint32 TCountryWarCancelAssemblyReq::assemblyid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarCancelAssemblyReq.AssemblyId)
  return assemblyid_;
}
inline void TCountryWarCancelAssemblyReq::set_assemblyid(::google::protobuf::uint32 value) {
  set_has_assemblyid();
  assemblyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarCancelAssemblyReq.AssemblyId)
}

// -------------------------------------------------------------------

// TCountryWarJoinAssemblyReq

// optional uint32 AssemblyId = 1;
inline bool TCountryWarJoinAssemblyReq::has_assemblyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarJoinAssemblyReq::set_has_assemblyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarJoinAssemblyReq::clear_has_assemblyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarJoinAssemblyReq::clear_assemblyid() {
  assemblyid_ = 0u;
  clear_has_assemblyid();
}
inline ::google::protobuf::uint32 TCountryWarJoinAssemblyReq::assemblyid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarJoinAssemblyReq.AssemblyId)
  return assemblyid_;
}
inline void TCountryWarJoinAssemblyReq::set_assemblyid(::google::protobuf::uint32 value) {
  set_has_assemblyid();
  assemblyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarJoinAssemblyReq.AssemblyId)
}

// optional uint32 TeamId = 2;
inline bool TCountryWarJoinAssemblyReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarJoinAssemblyReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarJoinAssemblyReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarJoinAssemblyReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarJoinAssemblyReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarJoinAssemblyReq.TeamId)
  return teamid_;
}
inline void TCountryWarJoinAssemblyReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarJoinAssemblyReq.TeamId)
}

// -------------------------------------------------------------------

// TCountryWarLeaveAssemblyReq

// optional uint32 TeamId = 1;
inline bool TCountryWarLeaveAssemblyReq::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarLeaveAssemblyReq::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarLeaveAssemblyReq::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarLeaveAssemblyReq::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarLeaveAssemblyReq::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarLeaveAssemblyReq.TeamId)
  return teamid_;
}
inline void TCountryWarLeaveAssemblyReq::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarLeaveAssemblyReq.TeamId)
}

// -------------------------------------------------------------------

// TCountryWarAssemblyTeamHeroInfo

// optional uint32 Htid = 1;
inline bool TCountryWarAssemblyTeamHeroInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarAssemblyTeamHeroInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarAssemblyTeamHeroInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarAssemblyTeamHeroInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyTeamHeroInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyTeamHeroInfo.Htid)
  return htid_;
}
inline void TCountryWarAssemblyTeamHeroInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyTeamHeroInfo.Htid)
}

// optional uint32 Level = 2;
inline bool TCountryWarAssemblyTeamHeroInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarAssemblyTeamHeroInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarAssemblyTeamHeroInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarAssemblyTeamHeroInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyTeamHeroInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyTeamHeroInfo.Level)
  return level_;
}
inline void TCountryWarAssemblyTeamHeroInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyTeamHeroInfo.Level)
}

// optional uint32 Star = 3;
inline bool TCountryWarAssemblyTeamHeroInfo::has_star() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarAssemblyTeamHeroInfo::set_has_star() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarAssemblyTeamHeroInfo::clear_has_star() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarAssemblyTeamHeroInfo::clear_star() {
  star_ = 0u;
  clear_has_star();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyTeamHeroInfo::star() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyTeamHeroInfo.Star)
  return star_;
}
inline void TCountryWarAssemblyTeamHeroInfo::set_star(::google::protobuf::uint32 value) {
  set_has_star();
  star_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyTeamHeroInfo.Star)
}

// optional uint32 TroopsNum = 4;
inline bool TCountryWarAssemblyTeamHeroInfo::has_troopsnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCountryWarAssemblyTeamHeroInfo::set_has_troopsnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCountryWarAssemblyTeamHeroInfo::clear_has_troopsnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCountryWarAssemblyTeamHeroInfo::clear_troopsnum() {
  troopsnum_ = 0u;
  clear_has_troopsnum();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyTeamHeroInfo::troopsnum() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyTeamHeroInfo.TroopsNum)
  return troopsnum_;
}
inline void TCountryWarAssemblyTeamHeroInfo::set_troopsnum(::google::protobuf::uint32 value) {
  set_has_troopsnum();
  troopsnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyTeamHeroInfo.TroopsNum)
}

// -------------------------------------------------------------------

// TCountryWarAssemblyTeamInfo

// optional .pb.TCountryWarAssemblyUserInfo UserInfo = 1;
inline bool TCountryWarAssemblyTeamInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarAssemblyTeamInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarAssemblyTeamInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarAssemblyTeamInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TCountryWarAssemblyUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TCountryWarAssemblyUserInfo& TCountryWarAssemblyTeamInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyTeamInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TCountryWarAssemblyUserInfo* TCountryWarAssemblyTeamInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TCountryWarAssemblyUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarAssemblyTeamInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TCountryWarAssemblyUserInfo* TCountryWarAssemblyTeamInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TCountryWarAssemblyUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCountryWarAssemblyTeamInfo::set_allocated_userinfo(::pb::TCountryWarAssemblyUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarAssemblyTeamInfo.UserInfo)
}

// optional uint32 TeamId = 2;
inline bool TCountryWarAssemblyTeamInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarAssemblyTeamInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarAssemblyTeamInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarAssemblyTeamInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyTeamInfo::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyTeamInfo.TeamId)
  return teamid_;
}
inline void TCountryWarAssemblyTeamInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyTeamInfo.TeamId)
}

// optional .pb.EAssemblyTeamStatus TeamStatus = 3;
inline bool TCountryWarAssemblyTeamInfo::has_teamstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarAssemblyTeamInfo::set_has_teamstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarAssemblyTeamInfo::clear_has_teamstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarAssemblyTeamInfo::clear_teamstatus() {
  teamstatus_ = 1;
  clear_has_teamstatus();
}
inline ::pb::EAssemblyTeamStatus TCountryWarAssemblyTeamInfo::teamstatus() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyTeamInfo.TeamStatus)
  return static_cast< ::pb::EAssemblyTeamStatus >(teamstatus_);
}
inline void TCountryWarAssemblyTeamInfo::set_teamstatus(::pb::EAssemblyTeamStatus value) {
  assert(::pb::EAssemblyTeamStatus_IsValid(value));
  set_has_teamstatus();
  teamstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyTeamInfo.TeamStatus)
}

// optional uint32 MaxTroopsNum = 4;
inline bool TCountryWarAssemblyTeamInfo::has_maxtroopsnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCountryWarAssemblyTeamInfo::set_has_maxtroopsnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCountryWarAssemblyTeamInfo::clear_has_maxtroopsnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCountryWarAssemblyTeamInfo::clear_maxtroopsnum() {
  maxtroopsnum_ = 0u;
  clear_has_maxtroopsnum();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyTeamInfo::maxtroopsnum() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyTeamInfo.MaxTroopsNum)
  return maxtroopsnum_;
}
inline void TCountryWarAssemblyTeamInfo::set_maxtroopsnum(::google::protobuf::uint32 value) {
  set_has_maxtroopsnum();
  maxtroopsnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyTeamInfo.MaxTroopsNum)
}

// optional uint32 TroopsNum = 5;
inline bool TCountryWarAssemblyTeamInfo::has_troopsnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCountryWarAssemblyTeamInfo::set_has_troopsnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCountryWarAssemblyTeamInfo::clear_has_troopsnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCountryWarAssemblyTeamInfo::clear_troopsnum() {
  troopsnum_ = 0u;
  clear_has_troopsnum();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyTeamInfo::troopsnum() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyTeamInfo.TroopsNum)
  return troopsnum_;
}
inline void TCountryWarAssemblyTeamInfo::set_troopsnum(::google::protobuf::uint32 value) {
  set_has_troopsnum();
  troopsnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyTeamInfo.TroopsNum)
}

// repeated .pb.TCountryWarAssemblyTeamHeroInfo HeroInfoArr = 6;
inline int TCountryWarAssemblyTeamInfo::heroinfoarr_size() const {
  return heroinfoarr_.size();
}
inline void TCountryWarAssemblyTeamInfo::clear_heroinfoarr() {
  heroinfoarr_.Clear();
}
inline const ::pb::TCountryWarAssemblyTeamHeroInfo& TCountryWarAssemblyTeamInfo::heroinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyTeamInfo.HeroInfoArr)
  return heroinfoarr_.Get(index);
}
inline ::pb::TCountryWarAssemblyTeamHeroInfo* TCountryWarAssemblyTeamInfo::mutable_heroinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarAssemblyTeamInfo.HeroInfoArr)
  return heroinfoarr_.Mutable(index);
}
inline ::pb::TCountryWarAssemblyTeamHeroInfo* TCountryWarAssemblyTeamInfo::add_heroinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarAssemblyTeamInfo.HeroInfoArr)
  return heroinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyTeamHeroInfo >&
TCountryWarAssemblyTeamInfo::heroinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarAssemblyTeamInfo.HeroInfoArr)
  return heroinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyTeamHeroInfo >*
TCountryWarAssemblyTeamInfo::mutable_heroinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarAssemblyTeamInfo.HeroInfoArr)
  return &heroinfoarr_;
}

// -------------------------------------------------------------------

// TCountryWarAssemblyUserInfo

// optional uint64 Uid = 1;
inline bool TCountryWarAssemblyUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarAssemblyUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarAssemblyUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarAssemblyUserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCountryWarAssemblyUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyUserInfo.Uid)
  return uid_;
}
inline void TCountryWarAssemblyUserInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyUserInfo.Uid)
}

// optional string Uname = 2;
inline bool TCountryWarAssemblyUserInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarAssemblyUserInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarAssemblyUserInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarAssemblyUserInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TCountryWarAssemblyUserInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyUserInfo.Uname)
  return *uname_;
}
inline void TCountryWarAssemblyUserInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyUserInfo.Uname)
}
inline void TCountryWarAssemblyUserInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCountryWarAssemblyUserInfo.Uname)
}
inline void TCountryWarAssemblyUserInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCountryWarAssemblyUserInfo.Uname)
}
inline ::std::string* TCountryWarAssemblyUserInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarAssemblyUserInfo.Uname)
  return uname_;
}
inline ::std::string* TCountryWarAssemblyUserInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCountryWarAssemblyUserInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarAssemblyUserInfo.Uname)
}

// optional uint32 Level = 3;
inline bool TCountryWarAssemblyUserInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarAssemblyUserInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarAssemblyUserInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarAssemblyUserInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyUserInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyUserInfo.Level)
  return level_;
}
inline void TCountryWarAssemblyUserInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyUserInfo.Level)
}

// optional uint32 CityLevel = 4;
inline bool TCountryWarAssemblyUserInfo::has_citylevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCountryWarAssemblyUserInfo::set_has_citylevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCountryWarAssemblyUserInfo::clear_has_citylevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCountryWarAssemblyUserInfo::clear_citylevel() {
  citylevel_ = 0u;
  clear_has_citylevel();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyUserInfo::citylevel() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyUserInfo.CityLevel)
  return citylevel_;
}
inline void TCountryWarAssemblyUserInfo::set_citylevel(::google::protobuf::uint32 value) {
  set_has_citylevel();
  citylevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyUserInfo.CityLevel)
}

// optional uint32 CityIndex = 5;
inline bool TCountryWarAssemblyUserInfo::has_cityindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCountryWarAssemblyUserInfo::set_has_cityindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCountryWarAssemblyUserInfo::clear_has_cityindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCountryWarAssemblyUserInfo::clear_cityindex() {
  cityindex_ = 0u;
  clear_has_cityindex();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyUserInfo::cityindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyUserInfo.CityIndex)
  return cityindex_;
}
inline void TCountryWarAssemblyUserInfo::set_cityindex(::google::protobuf::uint32 value) {
  set_has_cityindex();
  cityindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyUserInfo.CityIndex)
}

// -------------------------------------------------------------------

// TCountryWarAssemblyInfo

// optional uint32 AssemblyId = 1;
inline bool TCountryWarAssemblyInfo::has_assemblyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_assemblyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCountryWarAssemblyInfo::clear_has_assemblyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCountryWarAssemblyInfo::clear_assemblyid() {
  assemblyid_ = 0u;
  clear_has_assemblyid();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyInfo::assemblyid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.AssemblyId)
  return assemblyid_;
}
inline void TCountryWarAssemblyInfo::set_assemblyid(::google::protobuf::uint32 value) {
  set_has_assemblyid();
  assemblyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.AssemblyId)
}

// optional uint64 Uid = 2;
inline bool TCountryWarAssemblyInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCountryWarAssemblyInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCountryWarAssemblyInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCountryWarAssemblyInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.Uid)
  return uid_;
}
inline void TCountryWarAssemblyInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.Uid)
}

// optional string Uname = 3;
inline bool TCountryWarAssemblyInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCountryWarAssemblyInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCountryWarAssemblyInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TCountryWarAssemblyInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.Uname)
  return *uname_;
}
inline void TCountryWarAssemblyInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.Uname)
}
inline void TCountryWarAssemblyInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCountryWarAssemblyInfo.Uname)
}
inline void TCountryWarAssemblyInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCountryWarAssemblyInfo.Uname)
}
inline ::std::string* TCountryWarAssemblyInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarAssemblyInfo.Uname)
  return uname_;
}
inline ::std::string* TCountryWarAssemblyInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCountryWarAssemblyInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarAssemblyInfo.Uname)
}

// optional uint32 MaxNum = 4;
inline bool TCountryWarAssemblyInfo::has_maxnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_maxnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCountryWarAssemblyInfo::clear_has_maxnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCountryWarAssemblyInfo::clear_maxnum() {
  maxnum_ = 0u;
  clear_has_maxnum();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyInfo::maxnum() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.MaxNum)
  return maxnum_;
}
inline void TCountryWarAssemblyInfo::set_maxnum(::google::protobuf::uint32 value) {
  set_has_maxnum();
  maxnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.MaxNum)
}

// optional uint32 GridIndex = 5;
inline bool TCountryWarAssemblyInfo::has_gridindex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_gridindex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCountryWarAssemblyInfo::clear_has_gridindex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCountryWarAssemblyInfo::clear_gridindex() {
  gridindex_ = 0u;
  clear_has_gridindex();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyInfo::gridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.GridIndex)
  return gridindex_;
}
inline void TCountryWarAssemblyInfo::set_gridindex(::google::protobuf::uint32 value) {
  set_has_gridindex();
  gridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.GridIndex)
}

// optional uint64 CreateTime = 6;
inline bool TCountryWarAssemblyInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCountryWarAssemblyInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCountryWarAssemblyInfo::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 TCountryWarAssemblyInfo::createtime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.CreateTime)
  return createtime_;
}
inline void TCountryWarAssemblyInfo::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.CreateTime)
}

// optional uint64 EndTime = 7;
inline bool TCountryWarAssemblyInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCountryWarAssemblyInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCountryWarAssemblyInfo::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TCountryWarAssemblyInfo::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.EndTime)
  return endtime_;
}
inline void TCountryWarAssemblyInfo::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.EndTime)
}

// optional uint64 MarchEndTime = 8;
inline bool TCountryWarAssemblyInfo::has_marchendtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_marchendtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCountryWarAssemblyInfo::clear_has_marchendtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCountryWarAssemblyInfo::clear_marchendtime() {
  marchendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_marchendtime();
}
inline ::google::protobuf::uint64 TCountryWarAssemblyInfo::marchendtime() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.MarchEndTime)
  return marchendtime_;
}
inline void TCountryWarAssemblyInfo::set_marchendtime(::google::protobuf::uint64 value) {
  set_has_marchendtime();
  marchendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.MarchEndTime)
}

// optional uint32 EndGridIndex = 9;
inline bool TCountryWarAssemblyInfo::has_endgridindex() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_endgridindex() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TCountryWarAssemblyInfo::clear_has_endgridindex() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TCountryWarAssemblyInfo::clear_endgridindex() {
  endgridindex_ = 0u;
  clear_has_endgridindex();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyInfo::endgridindex() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.EndGridIndex)
  return endgridindex_;
}
inline void TCountryWarAssemblyInfo::set_endgridindex(::google::protobuf::uint32 value) {
  set_has_endgridindex();
  endgridindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.EndGridIndex)
}

// optional uint32 EndGridType = 10;
inline bool TCountryWarAssemblyInfo::has_endgridtype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_endgridtype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TCountryWarAssemblyInfo::clear_has_endgridtype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TCountryWarAssemblyInfo::clear_endgridtype() {
  endgridtype_ = 0u;
  clear_has_endgridtype();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyInfo::endgridtype() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.EndGridType)
  return endgridtype_;
}
inline void TCountryWarAssemblyInfo::set_endgridtype(::google::protobuf::uint32 value) {
  set_has_endgridtype();
  endgridtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.EndGridType)
}

// optional uint32 EndTreasureId = 11;
inline bool TCountryWarAssemblyInfo::has_endtreasureid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_endtreasureid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TCountryWarAssemblyInfo::clear_has_endtreasureid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TCountryWarAssemblyInfo::clear_endtreasureid() {
  endtreasureid_ = 0u;
  clear_has_endtreasureid();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyInfo::endtreasureid() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.EndTreasureId)
  return endtreasureid_;
}
inline void TCountryWarAssemblyInfo::set_endtreasureid(::google::protobuf::uint32 value) {
  set_has_endtreasureid();
  endtreasureid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.EndTreasureId)
}

// optional .pb.TCountryWarAssemblyUserInfo TargetUserInfo = 12;
inline bool TCountryWarAssemblyInfo::has_targetuserinfo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_targetuserinfo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TCountryWarAssemblyInfo::clear_has_targetuserinfo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TCountryWarAssemblyInfo::clear_targetuserinfo() {
  if (targetuserinfo_ != NULL) targetuserinfo_->::pb::TCountryWarAssemblyUserInfo::Clear();
  clear_has_targetuserinfo();
}
inline const ::pb::TCountryWarAssemblyUserInfo& TCountryWarAssemblyInfo::targetuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.TargetUserInfo)
  return targetuserinfo_ != NULL ? *targetuserinfo_ : *default_instance_->targetuserinfo_;
}
inline ::pb::TCountryWarAssemblyUserInfo* TCountryWarAssemblyInfo::mutable_targetuserinfo() {
  set_has_targetuserinfo();
  if (targetuserinfo_ == NULL) targetuserinfo_ = new ::pb::TCountryWarAssemblyUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarAssemblyInfo.TargetUserInfo)
  return targetuserinfo_;
}
inline ::pb::TCountryWarAssemblyUserInfo* TCountryWarAssemblyInfo::release_targetuserinfo() {
  clear_has_targetuserinfo();
  ::pb::TCountryWarAssemblyUserInfo* temp = targetuserinfo_;
  targetuserinfo_ = NULL;
  return temp;
}
inline void TCountryWarAssemblyInfo::set_allocated_targetuserinfo(::pb::TCountryWarAssemblyUserInfo* targetuserinfo) {
  delete targetuserinfo_;
  targetuserinfo_ = targetuserinfo;
  if (targetuserinfo) {
    set_has_targetuserinfo();
  } else {
    clear_has_targetuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCountryWarAssemblyInfo.TargetUserInfo)
}

// optional .pb.EAssemblyStatus Status = 13;
inline bool TCountryWarAssemblyInfo::has_status() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TCountryWarAssemblyInfo::set_has_status() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TCountryWarAssemblyInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TCountryWarAssemblyInfo::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::pb::EAssemblyStatus TCountryWarAssemblyInfo::status() const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.Status)
  return static_cast< ::pb::EAssemblyStatus >(status_);
}
inline void TCountryWarAssemblyInfo::set_status(::pb::EAssemblyStatus value) {
  assert(::pb::EAssemblyStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyInfo.Status)
}

// repeated .pb.TCountryWarAssemblyTeamInfo ArrTeamInfo = 14;
inline int TCountryWarAssemblyInfo::arrteaminfo_size() const {
  return arrteaminfo_.size();
}
inline void TCountryWarAssemblyInfo::clear_arrteaminfo() {
  arrteaminfo_.Clear();
}
inline const ::pb::TCountryWarAssemblyTeamInfo& TCountryWarAssemblyInfo::arrteaminfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyInfo.ArrTeamInfo)
  return arrteaminfo_.Get(index);
}
inline ::pb::TCountryWarAssemblyTeamInfo* TCountryWarAssemblyInfo::mutable_arrteaminfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarAssemblyInfo.ArrTeamInfo)
  return arrteaminfo_.Mutable(index);
}
inline ::pb::TCountryWarAssemblyTeamInfo* TCountryWarAssemblyInfo::add_arrteaminfo() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarAssemblyInfo.ArrTeamInfo)
  return arrteaminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyTeamInfo >&
TCountryWarAssemblyInfo::arrteaminfo() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarAssemblyInfo.ArrTeamInfo)
  return arrteaminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyTeamInfo >*
TCountryWarAssemblyInfo::mutable_arrteaminfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarAssemblyInfo.ArrTeamInfo)
  return &arrteaminfo_;
}

// -------------------------------------------------------------------

// TCountryWarGetAssemblyListReq

// -------------------------------------------------------------------

// TCountryWarGetAssemblyListRsp

// repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
inline int TCountryWarGetAssemblyListRsp::assemblydataarray_size() const {
  return assemblydataarray_.size();
}
inline void TCountryWarGetAssemblyListRsp::clear_assemblydataarray() {
  assemblydataarray_.Clear();
}
inline const ::pb::TCountryWarAssemblyInfo& TCountryWarGetAssemblyListRsp::assemblydataarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGetAssemblyListRsp.AssemblyDataArray)
  return assemblydataarray_.Get(index);
}
inline ::pb::TCountryWarAssemblyInfo* TCountryWarGetAssemblyListRsp::mutable_assemblydataarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGetAssemblyListRsp.AssemblyDataArray)
  return assemblydataarray_.Mutable(index);
}
inline ::pb::TCountryWarAssemblyInfo* TCountryWarGetAssemblyListRsp::add_assemblydataarray() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGetAssemblyListRsp.AssemblyDataArray)
  return assemblydataarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyInfo >&
TCountryWarGetAssemblyListRsp::assemblydataarray() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGetAssemblyListRsp.AssemblyDataArray)
  return assemblydataarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyInfo >*
TCountryWarGetAssemblyListRsp::mutable_assemblydataarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGetAssemblyListRsp.AssemblyDataArray)
  return &assemblydataarray_;
}

// -------------------------------------------------------------------

// TCountryWarGridNotify

// repeated .pb.TCountryWarGridInfo GridArr = 1;
inline int TCountryWarGridNotify::gridarr_size() const {
  return gridarr_.size();
}
inline void TCountryWarGridNotify::clear_gridarr() {
  gridarr_.Clear();
}
inline const ::pb::TCountryWarGridInfo& TCountryWarGridNotify::gridarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridNotify.GridArr)
  return gridarr_.Get(index);
}
inline ::pb::TCountryWarGridInfo* TCountryWarGridNotify::mutable_gridarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridNotify.GridArr)
  return gridarr_.Mutable(index);
}
inline ::pb::TCountryWarGridInfo* TCountryWarGridNotify::add_gridarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGridNotify.GridArr)
  return gridarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridInfo >&
TCountryWarGridNotify::gridarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGridNotify.GridArr)
  return gridarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGridInfo >*
TCountryWarGridNotify::mutable_gridarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGridNotify.GridArr)
  return &gridarr_;
}

// repeated .pb.TCountryWarUserInfo UserArr = 2;
inline int TCountryWarGridNotify::userarr_size() const {
  return userarr_.size();
}
inline void TCountryWarGridNotify::clear_userarr() {
  userarr_.Clear();
}
inline const ::pb::TCountryWarUserInfo& TCountryWarGridNotify::userarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridNotify.UserArr)
  return userarr_.Get(index);
}
inline ::pb::TCountryWarUserInfo* TCountryWarGridNotify::mutable_userarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridNotify.UserArr)
  return userarr_.Mutable(index);
}
inline ::pb::TCountryWarUserInfo* TCountryWarGridNotify::add_userarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGridNotify.UserArr)
  return userarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >&
TCountryWarGridNotify::userarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGridNotify.UserArr)
  return userarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >*
TCountryWarGridNotify::mutable_userarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGridNotify.UserArr)
  return &userarr_;
}

// repeated .pb.TCountryWarGuildInfo GuildArr = 3;
inline int TCountryWarGridNotify::guildarr_size() const {
  return guildarr_.size();
}
inline void TCountryWarGridNotify::clear_guildarr() {
  guildarr_.Clear();
}
inline const ::pb::TCountryWarGuildInfo& TCountryWarGridNotify::guildarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarGridNotify.GuildArr)
  return guildarr_.Get(index);
}
inline ::pb::TCountryWarGuildInfo* TCountryWarGridNotify::mutable_guildarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarGridNotify.GuildArr)
  return guildarr_.Mutable(index);
}
inline ::pb::TCountryWarGuildInfo* TCountryWarGridNotify::add_guildarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarGridNotify.GuildArr)
  return guildarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >&
TCountryWarGridNotify::guildarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarGridNotify.GuildArr)
  return guildarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >*
TCountryWarGridNotify::mutable_guildarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarGridNotify.GuildArr)
  return &guildarr_;
}

// -------------------------------------------------------------------

// TCountryWarMarchNotify

// repeated .pb.TCountryWarMarchInfo MarchArr = 1;
inline int TCountryWarMarchNotify::marcharr_size() const {
  return marcharr_.size();
}
inline void TCountryWarMarchNotify::clear_marcharr() {
  marcharr_.Clear();
}
inline const ::pb::TCountryWarMarchInfo& TCountryWarMarchNotify::marcharr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchNotify.MarchArr)
  return marcharr_.Get(index);
}
inline ::pb::TCountryWarMarchInfo* TCountryWarMarchNotify::mutable_marcharr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarMarchNotify.MarchArr)
  return marcharr_.Mutable(index);
}
inline ::pb::TCountryWarMarchInfo* TCountryWarMarchNotify::add_marcharr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarMarchNotify.MarchArr)
  return marcharr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarMarchInfo >&
TCountryWarMarchNotify::marcharr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarMarchNotify.MarchArr)
  return marcharr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarMarchInfo >*
TCountryWarMarchNotify::mutable_marcharr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarMarchNotify.MarchArr)
  return &marcharr_;
}

// repeated .pb.TCountryWarUserInfo UserArr = 2;
inline int TCountryWarMarchNotify::userarr_size() const {
  return userarr_.size();
}
inline void TCountryWarMarchNotify::clear_userarr() {
  userarr_.Clear();
}
inline const ::pb::TCountryWarUserInfo& TCountryWarMarchNotify::userarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchNotify.UserArr)
  return userarr_.Get(index);
}
inline ::pb::TCountryWarUserInfo* TCountryWarMarchNotify::mutable_userarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarMarchNotify.UserArr)
  return userarr_.Mutable(index);
}
inline ::pb::TCountryWarUserInfo* TCountryWarMarchNotify::add_userarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarMarchNotify.UserArr)
  return userarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >&
TCountryWarMarchNotify::userarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarMarchNotify.UserArr)
  return userarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >*
TCountryWarMarchNotify::mutable_userarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarMarchNotify.UserArr)
  return &userarr_;
}

// repeated .pb.TCountryWarGuildInfo GuildArr = 3;
inline int TCountryWarMarchNotify::guildarr_size() const {
  return guildarr_.size();
}
inline void TCountryWarMarchNotify::clear_guildarr() {
  guildarr_.Clear();
}
inline const ::pb::TCountryWarGuildInfo& TCountryWarMarchNotify::guildarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarMarchNotify.GuildArr)
  return guildarr_.Get(index);
}
inline ::pb::TCountryWarGuildInfo* TCountryWarMarchNotify::mutable_guildarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarMarchNotify.GuildArr)
  return guildarr_.Mutable(index);
}
inline ::pb::TCountryWarGuildInfo* TCountryWarMarchNotify::add_guildarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarMarchNotify.GuildArr)
  return guildarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >&
TCountryWarMarchNotify::guildarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarMarchNotify.GuildArr)
  return guildarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >*
TCountryWarMarchNotify::mutable_guildarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarMarchNotify.GuildArr)
  return &guildarr_;
}

// -------------------------------------------------------------------

// TCountryWarUserGuildInfoNotify

// repeated .pb.TCountryWarUserInfo UserArr = 3;
inline int TCountryWarUserGuildInfoNotify::userarr_size() const {
  return userarr_.size();
}
inline void TCountryWarUserGuildInfoNotify::clear_userarr() {
  userarr_.Clear();
}
inline const ::pb::TCountryWarUserInfo& TCountryWarUserGuildInfoNotify::userarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarUserGuildInfoNotify.UserArr)
  return userarr_.Get(index);
}
inline ::pb::TCountryWarUserInfo* TCountryWarUserGuildInfoNotify::mutable_userarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarUserGuildInfoNotify.UserArr)
  return userarr_.Mutable(index);
}
inline ::pb::TCountryWarUserInfo* TCountryWarUserGuildInfoNotify::add_userarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarUserGuildInfoNotify.UserArr)
  return userarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >&
TCountryWarUserGuildInfoNotify::userarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarUserGuildInfoNotify.UserArr)
  return userarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarUserInfo >*
TCountryWarUserGuildInfoNotify::mutable_userarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarUserGuildInfoNotify.UserArr)
  return &userarr_;
}

// repeated .pb.TCountryWarGuildInfo GuildArr = 4;
inline int TCountryWarUserGuildInfoNotify::guildarr_size() const {
  return guildarr_.size();
}
inline void TCountryWarUserGuildInfoNotify::clear_guildarr() {
  guildarr_.Clear();
}
inline const ::pb::TCountryWarGuildInfo& TCountryWarUserGuildInfoNotify::guildarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarUserGuildInfoNotify.GuildArr)
  return guildarr_.Get(index);
}
inline ::pb::TCountryWarGuildInfo* TCountryWarUserGuildInfoNotify::mutable_guildarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarUserGuildInfoNotify.GuildArr)
  return guildarr_.Mutable(index);
}
inline ::pb::TCountryWarGuildInfo* TCountryWarUserGuildInfoNotify::add_guildarr() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarUserGuildInfoNotify.GuildArr)
  return guildarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >&
TCountryWarUserGuildInfoNotify::guildarr() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarUserGuildInfoNotify.GuildArr)
  return guildarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarGuildInfo >*
TCountryWarUserGuildInfoNotify::mutable_guildarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarUserGuildInfoNotify.GuildArr)
  return &guildarr_;
}

// -------------------------------------------------------------------

// TCountryWarAssemblyNotify

// repeated .pb.TCountryWarAssemblyInfo AssemblyDataArray = 1;
inline int TCountryWarAssemblyNotify::assemblydataarray_size() const {
  return assemblydataarray_.size();
}
inline void TCountryWarAssemblyNotify::clear_assemblydataarray() {
  assemblydataarray_.Clear();
}
inline const ::pb::TCountryWarAssemblyInfo& TCountryWarAssemblyNotify::assemblydataarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyNotify.AssemblyDataArray)
  return assemblydataarray_.Get(index);
}
inline ::pb::TCountryWarAssemblyInfo* TCountryWarAssemblyNotify::mutable_assemblydataarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCountryWarAssemblyNotify.AssemblyDataArray)
  return assemblydataarray_.Mutable(index);
}
inline ::pb::TCountryWarAssemblyInfo* TCountryWarAssemblyNotify::add_assemblydataarray() {
  // @@protoc_insertion_point(field_add:pb.TCountryWarAssemblyNotify.AssemblyDataArray)
  return assemblydataarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyInfo >&
TCountryWarAssemblyNotify::assemblydataarray() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarAssemblyNotify.AssemblyDataArray)
  return assemblydataarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCountryWarAssemblyInfo >*
TCountryWarAssemblyNotify::mutable_assemblydataarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarAssemblyNotify.AssemblyDataArray)
  return &assemblydataarray_;
}

// repeated uint32 RemoveAssemblyId = 2;
inline int TCountryWarAssemblyNotify::removeassemblyid_size() const {
  return removeassemblyid_.size();
}
inline void TCountryWarAssemblyNotify::clear_removeassemblyid() {
  removeassemblyid_.Clear();
}
inline ::google::protobuf::uint32 TCountryWarAssemblyNotify::removeassemblyid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCountryWarAssemblyNotify.RemoveAssemblyId)
  return removeassemblyid_.Get(index);
}
inline void TCountryWarAssemblyNotify::set_removeassemblyid(int index, ::google::protobuf::uint32 value) {
  removeassemblyid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCountryWarAssemblyNotify.RemoveAssemblyId)
}
inline void TCountryWarAssemblyNotify::add_removeassemblyid(::google::protobuf::uint32 value) {
  removeassemblyid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCountryWarAssemblyNotify.RemoveAssemblyId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCountryWarAssemblyNotify::removeassemblyid() const {
  // @@protoc_insertion_point(field_list:pb.TCountryWarAssemblyNotify.RemoveAssemblyId)
  return removeassemblyid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCountryWarAssemblyNotify::mutable_removeassemblyid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCountryWarAssemblyNotify.RemoveAssemblyId)
  return &removeassemblyid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EMarchType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EMarchType>() {
  return ::pb::EMarchType_descriptor();
}
template <> struct is_proto_enum< ::pb::EAssemblyStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAssemblyStatus>() {
  return ::pb::EAssemblyStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::EAssemblyTeamStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAssemblyTeamStatus>() {
  return ::pb::EAssemblyTeamStatus_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCountryWar_2eproto__INCLUDED
