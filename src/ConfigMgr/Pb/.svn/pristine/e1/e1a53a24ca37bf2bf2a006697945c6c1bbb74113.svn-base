// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Beast.proto

#ifndef PROTOBUF_net_2fBeast_2eproto__INCLUDED
#define PROTOBUF_net_2fBeast_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Common.pb.h"
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fBeast_2eproto();
void protobuf_AssignDesc_net_2fBeast_2eproto();
void protobuf_ShutdownFile_net_2fBeast_2eproto();

class TBeastEquipItem;
class TBeastFosterAttr;
class TBeastSoulLocation;
class TBeastSoulMaterial;
class TBeastSingleInfo;
class TBeastContractHelpReq;
class TBeastSquadPosInfo;
class TBeastGetInfoRsp;
class TOthersBeastSingleInfo;
class TOthersBeastInfo;
class TBeastFosterReq;
class TBeastFosterRsp;
class TBeastFosterLevelUpReq;
class TBeastStarLevelUpReq;
class TBeastEquipItemReq;
class TBeastEquipBeastReq;
class TBeastCombineBeastReq;
class TBeastSetAssistBeastReq;
class TBeastPurpleGoldLevelUpReq;
class TBeastSoulSaveIllustrationReq;
class TBeastSoulGenerateSoulReq;
class TNewBeastNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TBeastEquipItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastEquipItem : public ::google::protobuf::Message {
 public:
  TBeastEquipItem();
  virtual ~TBeastEquipItem();

  TBeastEquipItem(const TBeastEquipItem& from);

  inline TBeastEquipItem& operator=(const TBeastEquipItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastEquipItem& default_instance();

  void Swap(TBeastEquipItem* other);

  // implements Message ----------------------------------------------

  TBeastEquipItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastEquipItem& from);
  void MergeFrom(const TBeastEquipItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastEquipItem</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 ItemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastEquipItem</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 ItemTid = 3;
  inline bool has_itemtid() const;
  inline void clear_itemtid();
  static const int kItemTidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeastEquipItem</name>
  	<Function>
  		<name>itemtid</name>
  		<replaceName>ItemTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemtid</name>
  		<replaceName>ItemTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemtid</name>
  		<replaceName>ItemTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemtid() const;
  inline void set_itemtid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastEquipItem)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemtid();
  inline void clear_has_itemtid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 itemtid_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastEquipItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastFosterAttr</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastFosterAttr : public ::google::protobuf::Message {
 public:
  TBeastFosterAttr();
  virtual ~TBeastFosterAttr();

  TBeastFosterAttr(const TBeastFosterAttr& from);

  inline TBeastFosterAttr& operator=(const TBeastFosterAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastFosterAttr& default_instance();

  void Swap(TBeastFosterAttr* other);

  // implements Message ----------------------------------------------

  TBeastFosterAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastFosterAttr& from);
  void MergeFrom(const TBeastFosterAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AttrId = 1;
  inline bool has_attrid() const;
  inline void clear_attrid();
  static const int kAttrIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastFosterAttr</name>
  	<Function>
  		<name>attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attrid() const;
  inline void set_attrid(::google::protobuf::uint32 value);

  // optional uint32 AttrValue = 2;
  inline bool has_attrvalue() const;
  inline void clear_attrvalue();
  static const int kAttrValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastFosterAttr</name>
  	<Function>
  		<name>attrvalue</name>
  		<replaceName>AttrValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attrvalue</name>
  		<replaceName>AttrValue</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrvalue</name>
  		<replaceName>AttrValue</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attrvalue() const;
  inline void set_attrvalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastFosterAttr)
 private:
  inline void set_has_attrid();
  inline void clear_has_attrid();
  inline void set_has_attrvalue();
  inline void clear_has_attrvalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 attrid_;
  ::google::protobuf::uint32 attrvalue_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastFosterAttr* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastSoulLocation</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastSoulLocation : public ::google::protobuf::Message {
 public:
  TBeastSoulLocation();
  virtual ~TBeastSoulLocation();

  TBeastSoulLocation(const TBeastSoulLocation& from);

  inline TBeastSoulLocation& operator=(const TBeastSoulLocation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastSoulLocation& default_instance();

  void Swap(TBeastSoulLocation* other);

  // implements Message ----------------------------------------------

  TBeastSoulLocation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastSoulLocation& from);
  void MergeFrom(const TBeastSoulLocation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastSoulLocation</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 Color = 2;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastSoulLocation</name>
  	<Function>
  		<name>color</name>
  		<replaceName>Color</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_color</name>
  		<replaceName>Color</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_color</name>
  		<replaceName>Color</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastSoulLocation)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_color();
  inline void clear_has_color();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 color_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastSoulLocation* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastSoulMaterial</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastSoulMaterial : public ::google::protobuf::Message {
 public:
  TBeastSoulMaterial();
  virtual ~TBeastSoulMaterial();

  TBeastSoulMaterial(const TBeastSoulMaterial& from);

  inline TBeastSoulMaterial& operator=(const TBeastSoulMaterial& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastSoulMaterial& default_instance();

  void Swap(TBeastSoulMaterial* other);

  // implements Message ----------------------------------------------

  TBeastSoulMaterial* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastSoulMaterial& from);
  void MergeFrom(const TBeastSoulMaterial& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastSoulMaterial</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastSoulMaterial</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastSoulMaterial)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastSoulMaterial* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastSingleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastSingleInfo : public ::google::protobuf::Message {
 public:
  TBeastSingleInfo();
  virtual ~TBeastSingleInfo();

  TBeastSingleInfo(const TBeastSingleInfo& from);

  inline TBeastSingleInfo& operator=(const TBeastSingleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastSingleInfo& default_instance();

  void Swap(TBeastSingleInfo* other);

  // implements Message ----------------------------------------------

  TBeastSingleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastSingleInfo& from);
  void MergeFrom(const TBeastSingleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BeastId = 1;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // optional uint32 BeastTid = 2;
  inline bool has_beasttid() const;
  inline void clear_beasttid();
  static const int kBeastTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>beasttid</name>
  		<replaceName>BeastTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beasttid</name>
  		<replaceName>BeastTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beasttid</name>
  		<replaceName>BeastTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beasttid() const;
  inline void set_beasttid(::google::protobuf::uint32 value);

  // optional uint32 CurFosterLevel = 3;
  inline bool has_curfosterlevel() const;
  inline void clear_curfosterlevel();
  static const int kCurFosterLevelFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>curfosterlevel</name>
  		<replaceName>CurFosterLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curfosterlevel</name>
  		<replaceName>CurFosterLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curfosterlevel</name>
  		<replaceName>CurFosterLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curfosterlevel() const;
  inline void set_curfosterlevel(::google::protobuf::uint32 value);

  // optional uint32 StarLv = 4;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlv</name>
  		<replaceName>StarLv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlv() const;
  inline void set_starlv(::google::protobuf::uint32 value);

  // repeated .pb.TBeastEquipItem EquipArr = 5;
  inline int equiparr_size() const;
  inline void clear_equiparr();
  static const int kEquipArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>equiparr</name>
  		<replaceName>EquipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_equiparr</name>
  		<replaceName>EquipArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_equiparr</name>
  		<replaceName>EquipArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_equiparr</name>
  		<replaceName>EquipArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>equiparr_size</name>
  		<replaceName>EquipArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastEquipItem& equiparr(int index) const;
  inline ::pb::TBeastEquipItem* mutable_equiparr(int index);
  inline ::pb::TBeastEquipItem* add_equiparr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastEquipItem >&
      equiparr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastEquipItem >*
      mutable_equiparr();

  // repeated .pb.TBeastFosterAttr FosterAttrArr = 6;
  inline int fosterattrarr_size() const;
  inline void clear_fosterattrarr();
  static const int kFosterAttrArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>fosterattrarr</name>
  		<replaceName>FosterAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fosterattrarr</name>
  		<replaceName>FosterAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fosterattrarr</name>
  		<replaceName>FosterAttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fosterattrarr</name>
  		<replaceName>FosterAttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fosterattrarr_size</name>
  		<replaceName>FosterAttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastFosterAttr& fosterattrarr(int index) const;
  inline ::pb::TBeastFosterAttr* mutable_fosterattrarr(int index);
  inline ::pb::TBeastFosterAttr* add_fosterattrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastFosterAttr >&
      fosterattrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastFosterAttr >*
      mutable_fosterattrarr();

  // repeated .pb.TCommonReward FosterCostArr = 7;
  inline int fostercostarr_size() const;
  inline void clear_fostercostarr();
  static const int kFosterCostArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>fostercostarr</name>
  		<replaceName>FosterCostArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fostercostarr</name>
  		<replaceName>FosterCostArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fostercostarr</name>
  		<replaceName>FosterCostArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fostercostarr</name>
  		<replaceName>FosterCostArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fostercostarr_size</name>
  		<replaceName>FosterCostArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& fostercostarr(int index) const;
  inline ::pb::TCommonReward* mutable_fostercostarr(int index);
  inline ::pb::TCommonReward* add_fostercostarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      fostercostarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_fostercostarr();

  // optional uint32 StarLvUpCostUniFragNum = 8;
  inline bool has_starlvupcostunifragnum() const;
  inline void clear_starlvupcostunifragnum();
  static const int kStarLvUpCostUniFragNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>starlvupcostunifragnum</name>
  		<replaceName>StarLvUpCostUniFragNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_starlvupcostunifragnum</name>
  		<replaceName>StarLvUpCostUniFragNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_starlvupcostunifragnum</name>
  		<replaceName>StarLvUpCostUniFragNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 starlvupcostunifragnum() const;
  inline void set_starlvupcostunifragnum(::google::protobuf::uint32 value);

  // optional uint32 PurpleGoldCurLevel = 9;
  inline bool has_purplegoldcurlevel() const;
  inline void clear_purplegoldcurlevel();
  static const int kPurpleGoldCurLevelFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>purplegoldcurlevel</name>
  		<replaceName>PurpleGoldCurLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_purplegoldcurlevel</name>
  		<replaceName>PurpleGoldCurLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_purplegoldcurlevel</name>
  		<replaceName>PurpleGoldCurLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 purplegoldcurlevel() const;
  inline void set_purplegoldcurlevel(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward PurpleGoldCostArr = 10;
  inline int purplegoldcostarr_size() const;
  inline void clear_purplegoldcostarr();
  static const int kPurpleGoldCostArrFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>purplegoldcostarr</name>
  		<replaceName>PurpleGoldCostArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_purplegoldcostarr</name>
  		<replaceName>PurpleGoldCostArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_purplegoldcostarr</name>
  		<replaceName>PurpleGoldCostArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_purplegoldcostarr</name>
  		<replaceName>PurpleGoldCostArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>purplegoldcostarr_size</name>
  		<replaceName>PurpleGoldCostArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& purplegoldcostarr(int index) const;
  inline ::pb::TCommonReward* mutable_purplegoldcostarr(int index);
  inline ::pb::TCommonReward* add_purplegoldcostarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      purplegoldcostarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_purplegoldcostarr();

  // repeated .pb.TBeastSoulMaterial BeastSoulMaterialArr = 11;
  inline int beastsoulmaterialarr_size() const;
  inline void clear_beastsoulmaterialarr();
  static const int kBeastSoulMaterialArrFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>beastsoulmaterialarr</name>
  		<replaceName>BeastSoulMaterialArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beastsoulmaterialarr</name>
  		<replaceName>BeastSoulMaterialArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beastsoulmaterialarr</name>
  		<replaceName>BeastSoulMaterialArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastsoulmaterialarr</name>
  		<replaceName>BeastSoulMaterialArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beastsoulmaterialarr_size</name>
  		<replaceName>BeastSoulMaterialArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSoulMaterial& beastsoulmaterialarr(int index) const;
  inline ::pb::TBeastSoulMaterial* mutable_beastsoulmaterialarr(int index);
  inline ::pb::TBeastSoulMaterial* add_beastsoulmaterialarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulMaterial >&
      beastsoulmaterialarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulMaterial >*
      mutable_beastsoulmaterialarr();

  // optional uint32 BeastSoulGenerateNum = 12;
  inline bool has_beastsoulgeneratenum() const;
  inline void clear_beastsoulgeneratenum();
  static const int kBeastSoulGenerateNumFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>beastsoulgeneratenum</name>
  		<replaceName>BeastSoulGenerateNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastsoulgeneratenum</name>
  		<replaceName>BeastSoulGenerateNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastsoulgeneratenum</name>
  		<replaceName>BeastSoulGenerateNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastsoulgeneratenum() const;
  inline void set_beastsoulgeneratenum(::google::protobuf::uint32 value);

  // repeated .pb.TBeastSoulLocation NodeInfoArr = 13;
  inline int nodeinfoarr_size() const;
  inline void clear_nodeinfoarr();
  static const int kNodeInfoArrFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TBeastSingleInfo</name>
  	<Function>
  		<name>nodeinfoarr</name>
  		<replaceName>NodeInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_nodeinfoarr</name>
  		<replaceName>NodeInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_nodeinfoarr</name>
  		<replaceName>NodeInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nodeinfoarr</name>
  		<replaceName>NodeInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>nodeinfoarr_size</name>
  		<replaceName>NodeInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSoulLocation& nodeinfoarr(int index) const;
  inline ::pb::TBeastSoulLocation* mutable_nodeinfoarr(int index);
  inline ::pb::TBeastSoulLocation* add_nodeinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulLocation >&
      nodeinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulLocation >*
      mutable_nodeinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TBeastSingleInfo)
 private:
  inline void set_has_beastid();
  inline void clear_has_beastid();
  inline void set_has_beasttid();
  inline void clear_has_beasttid();
  inline void set_has_curfosterlevel();
  inline void clear_has_curfosterlevel();
  inline void set_has_starlv();
  inline void clear_has_starlv();
  inline void set_has_starlvupcostunifragnum();
  inline void clear_has_starlvupcostunifragnum();
  inline void set_has_purplegoldcurlevel();
  inline void clear_has_purplegoldcurlevel();
  inline void set_has_beastsoulgeneratenum();
  inline void clear_has_beastsoulgeneratenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 beastid_;
  ::google::protobuf::uint32 beasttid_;
  ::google::protobuf::uint32 curfosterlevel_;
  ::google::protobuf::uint32 starlv_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastEquipItem > equiparr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastFosterAttr > fosterattrarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > fostercostarr_;
  ::google::protobuf::uint32 starlvupcostunifragnum_;
  ::google::protobuf::uint32 purplegoldcurlevel_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > purplegoldcostarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulMaterial > beastsoulmaterialarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulLocation > nodeinfoarr_;
  ::google::protobuf::uint32 beastsoulgeneratenum_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastSingleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastContractHelpReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastContractHelpReq : public ::google::protobuf::Message {
 public:
  TBeastContractHelpReq();
  virtual ~TBeastContractHelpReq();

  TBeastContractHelpReq(const TBeastContractHelpReq& from);

  inline TBeastContractHelpReq& operator=(const TBeastContractHelpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastContractHelpReq& default_instance();

  void Swap(TBeastContractHelpReq* other);

  // implements Message ----------------------------------------------

  TBeastContractHelpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastContractHelpReq& from);
  void MergeFrom(const TBeastContractHelpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BeastId = 1;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastContractHelpReq</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // optional uint32 BeastAssistId = 2;
  inline bool has_beastassistid() const;
  inline void clear_beastassistid();
  static const int kBeastAssistIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastContractHelpReq</name>
  	<Function>
  		<name>beastassistid</name>
  		<replaceName>BeastAssistId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastassistid</name>
  		<replaceName>BeastAssistId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastassistid</name>
  		<replaceName>BeastAssistId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastassistid() const;
  inline void set_beastassistid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastContractHelpReq)
 private:
  inline void set_has_beastid();
  inline void clear_has_beastid();
  inline void set_has_beastassistid();
  inline void clear_has_beastassistid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 beastid_;
  ::google::protobuf::uint32 beastassistid_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastContractHelpReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastSquadPosInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastSquadPosInfo : public ::google::protobuf::Message {
 public:
  TBeastSquadPosInfo();
  virtual ~TBeastSquadPosInfo();

  TBeastSquadPosInfo(const TBeastSquadPosInfo& from);

  inline TBeastSquadPosInfo& operator=(const TBeastSquadPosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastSquadPosInfo& default_instance();

  void Swap(TBeastSquadPosInfo* other);

  // implements Message ----------------------------------------------

  TBeastSquadPosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastSquadPosInfo& from);
  void MergeFrom(const TBeastSquadPosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastSquadPosInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 BeastId = 2;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastSquadPosInfo</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // optional uint32 AssistBeastId = 3;
  inline bool has_assistbeastid() const;
  inline void clear_assistbeastid();
  static const int kAssistBeastIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeastSquadPosInfo</name>
  	<Function>
  		<name>assistbeastid</name>
  		<replaceName>AssistBeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assistbeastid</name>
  		<replaceName>AssistBeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assistbeastid</name>
  		<replaceName>AssistBeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 assistbeastid() const;
  inline void set_assistbeastid(::google::protobuf::uint32 value);

  // optional uint32 AssistBeastIdPos2 = 4;
  inline bool has_assistbeastidpos2() const;
  inline void clear_assistbeastidpos2();
  static const int kAssistBeastIdPos2FieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBeastSquadPosInfo</name>
  	<Function>
  		<name>assistbeastidpos2</name>
  		<replaceName>AssistBeastIdPos2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assistbeastidpos2</name>
  		<replaceName>AssistBeastIdPos2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assistbeastidpos2</name>
  		<replaceName>AssistBeastIdPos2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 assistbeastidpos2() const;
  inline void set_assistbeastidpos2(::google::protobuf::uint32 value);

  // optional uint32 AssistBeastIdPurpleGoldPos = 5;
  inline bool has_assistbeastidpurplegoldpos() const;
  inline void clear_assistbeastidpurplegoldpos();
  static const int kAssistBeastIdPurpleGoldPosFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TBeastSquadPosInfo</name>
  	<Function>
  		<name>assistbeastidpurplegoldpos</name>
  		<replaceName>AssistBeastIdPurpleGoldPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assistbeastidpurplegoldpos</name>
  		<replaceName>AssistBeastIdPurpleGoldPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assistbeastidpurplegoldpos</name>
  		<replaceName>AssistBeastIdPurpleGoldPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 assistbeastidpurplegoldpos() const;
  inline void set_assistbeastidpurplegoldpos(::google::protobuf::uint32 value);

  // optional uint32 AssistBeastContractId = 6;
  inline bool has_assistbeastcontractid() const;
  inline void clear_assistbeastcontractid();
  static const int kAssistBeastContractIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TBeastSquadPosInfo</name>
  	<Function>
  		<name>assistbeastcontractid</name>
  		<replaceName>AssistBeastContractId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assistbeastcontractid</name>
  		<replaceName>AssistBeastContractId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assistbeastcontractid</name>
  		<replaceName>AssistBeastContractId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 assistbeastcontractid() const;
  inline void set_assistbeastcontractid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastSquadPosInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_beastid();
  inline void clear_has_beastid();
  inline void set_has_assistbeastid();
  inline void clear_has_assistbeastid();
  inline void set_has_assistbeastidpos2();
  inline void clear_has_assistbeastidpos2();
  inline void set_has_assistbeastidpurplegoldpos();
  inline void clear_has_assistbeastidpurplegoldpos();
  inline void set_has_assistbeastcontractid();
  inline void clear_has_assistbeastcontractid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 beastid_;
  ::google::protobuf::uint32 assistbeastid_;
  ::google::protobuf::uint32 assistbeastidpos2_;
  ::google::protobuf::uint32 assistbeastidpurplegoldpos_;
  ::google::protobuf::uint32 assistbeastcontractid_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastSquadPosInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastGetInfoRsp : public ::google::protobuf::Message {
 public:
  TBeastGetInfoRsp();
  virtual ~TBeastGetInfoRsp();

  TBeastGetInfoRsp(const TBeastGetInfoRsp& from);

  inline TBeastGetInfoRsp& operator=(const TBeastGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastGetInfoRsp& default_instance();

  void Swap(TBeastGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TBeastGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastGetInfoRsp& from);
  void MergeFrom(const TBeastGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBeastSingleInfo BeastArr = 1;
  inline int beastarr_size() const;
  inline void clear_beastarr();
  static const int kBeastArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastGetInfoRsp</name>
  	<Function>
  		<name>beastarr</name>
  		<replaceName>BeastArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beastarr</name>
  		<replaceName>BeastArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beastarr</name>
  		<replaceName>BeastArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastarr</name>
  		<replaceName>BeastArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beastarr_size</name>
  		<replaceName>BeastArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSingleInfo& beastarr(int index) const;
  inline ::pb::TBeastSingleInfo* mutable_beastarr(int index);
  inline ::pb::TBeastSingleInfo* add_beastarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSingleInfo >&
      beastarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSingleInfo >*
      mutable_beastarr();

  // repeated .pb.TBeastSquadPosInfo BeastSquadArr = 2;
  inline int beastsquadarr_size() const;
  inline void clear_beastsquadarr();
  static const int kBeastSquadArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastGetInfoRsp</name>
  	<Function>
  		<name>beastsquadarr</name>
  		<replaceName>BeastSquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beastsquadarr</name>
  		<replaceName>BeastSquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beastsquadarr</name>
  		<replaceName>BeastSquadArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastsquadarr</name>
  		<replaceName>BeastSquadArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beastsquadarr_size</name>
  		<replaceName>BeastSquadArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSquadPosInfo& beastsquadarr(int index) const;
  inline ::pb::TBeastSquadPosInfo* mutable_beastsquadarr(int index);
  inline ::pb::TBeastSquadPosInfo* add_beastsquadarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSquadPosInfo >&
      beastsquadarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSquadPosInfo >*
      mutable_beastsquadarr();

  // @@protoc_insertion_point(class_scope:pb.TBeastGetInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastSingleInfo > beastarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastSquadPosInfo > beastsquadarr_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOthersBeastSingleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOthersBeastSingleInfo : public ::google::protobuf::Message {
 public:
  TOthersBeastSingleInfo();
  virtual ~TOthersBeastSingleInfo();

  TOthersBeastSingleInfo(const TOthersBeastSingleInfo& from);

  inline TOthersBeastSingleInfo& operator=(const TOthersBeastSingleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOthersBeastSingleInfo& default_instance();

  void Swap(TOthersBeastSingleInfo* other);

  // implements Message ----------------------------------------------

  TOthersBeastSingleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOthersBeastSingleInfo& from);
  void MergeFrom(const TOthersBeastSingleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOthersBeastSingleInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .pb.TBeastSingleInfo BeastInfo = 2;
  inline bool has_beastinfo() const;
  inline void clear_beastinfo();
  static const int kBeastInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOthersBeastSingleInfo</name>
  	<Function>
  		<name>beastinfo</name>
  		<replaceName>BeastInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastinfo</name>
  		<replaceName>BeastInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_beastinfo</name>
  		<replaceName>BeastInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastinfo</name>
  		<replaceName>BeastInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSingleInfo& beastinfo() const;
  inline ::pb::TBeastSingleInfo* mutable_beastinfo();
  inline ::pb::TBeastSingleInfo* release_beastinfo();
  inline void set_allocated_beastinfo(::pb::TBeastSingleInfo* beastinfo);

  // optional .pb.TBeastSingleInfo AssistBeastInfo = 3;
  inline bool has_assistbeastinfo() const;
  inline void clear_assistbeastinfo();
  static const int kAssistBeastInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TOthersBeastSingleInfo</name>
  	<Function>
  		<name>assistbeastinfo</name>
  		<replaceName>AssistBeastInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assistbeastinfo</name>
  		<replaceName>AssistBeastInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_assistbeastinfo</name>
  		<replaceName>AssistBeastInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assistbeastinfo</name>
  		<replaceName>AssistBeastInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSingleInfo& assistbeastinfo() const;
  inline ::pb::TBeastSingleInfo* mutable_assistbeastinfo();
  inline ::pb::TBeastSingleInfo* release_assistbeastinfo();
  inline void set_allocated_assistbeastinfo(::pb::TBeastSingleInfo* assistbeastinfo);

  // optional .pb.TBeastSingleInfo AssistBeastInfoPos2 = 4;
  inline bool has_assistbeastinfopos2() const;
  inline void clear_assistbeastinfopos2();
  static const int kAssistBeastInfoPos2FieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TOthersBeastSingleInfo</name>
  	<Function>
  		<name>assistbeastinfopos2</name>
  		<replaceName>AssistBeastInfoPos2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assistbeastinfopos2</name>
  		<replaceName>AssistBeastInfoPos2</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_assistbeastinfopos2</name>
  		<replaceName>AssistBeastInfoPos2</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assistbeastinfopos2</name>
  		<replaceName>AssistBeastInfoPos2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSingleInfo& assistbeastinfopos2() const;
  inline ::pb::TBeastSingleInfo* mutable_assistbeastinfopos2();
  inline ::pb::TBeastSingleInfo* release_assistbeastinfopos2();
  inline void set_allocated_assistbeastinfopos2(::pb::TBeastSingleInfo* assistbeastinfopos2);

  // optional .pb.TBeastSingleInfo AssistBeastIdPurpleGoldPos = 5;
  inline bool has_assistbeastidpurplegoldpos() const;
  inline void clear_assistbeastidpurplegoldpos();
  static const int kAssistBeastIdPurpleGoldPosFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TOthersBeastSingleInfo</name>
  	<Function>
  		<name>assistbeastidpurplegoldpos</name>
  		<replaceName>AssistBeastIdPurpleGoldPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assistbeastidpurplegoldpos</name>
  		<replaceName>AssistBeastIdPurpleGoldPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_assistbeastidpurplegoldpos</name>
  		<replaceName>AssistBeastIdPurpleGoldPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assistbeastidpurplegoldpos</name>
  		<replaceName>AssistBeastIdPurpleGoldPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSingleInfo& assistbeastidpurplegoldpos() const;
  inline ::pb::TBeastSingleInfo* mutable_assistbeastidpurplegoldpos();
  inline ::pb::TBeastSingleInfo* release_assistbeastidpurplegoldpos();
  inline void set_allocated_assistbeastidpurplegoldpos(::pb::TBeastSingleInfo* assistbeastidpurplegoldpos);

  // optional .pb.TBeastSingleInfo AssistBeastContractInfoPos = 6;
  inline bool has_assistbeastcontractinfopos() const;
  inline void clear_assistbeastcontractinfopos();
  static const int kAssistBeastContractInfoPosFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TOthersBeastSingleInfo</name>
  	<Function>
  		<name>assistbeastcontractinfopos</name>
  		<replaceName>AssistBeastContractInfoPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_assistbeastcontractinfopos</name>
  		<replaceName>AssistBeastContractInfoPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_assistbeastcontractinfopos</name>
  		<replaceName>AssistBeastContractInfoPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_assistbeastcontractinfopos</name>
  		<replaceName>AssistBeastContractInfoPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSingleInfo& assistbeastcontractinfopos() const;
  inline ::pb::TBeastSingleInfo* mutable_assistbeastcontractinfopos();
  inline ::pb::TBeastSingleInfo* release_assistbeastcontractinfopos();
  inline void set_allocated_assistbeastcontractinfopos(::pb::TBeastSingleInfo* assistbeastcontractinfopos);

  // @@protoc_insertion_point(class_scope:pb.TOthersBeastSingleInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_beastinfo();
  inline void clear_has_beastinfo();
  inline void set_has_assistbeastinfo();
  inline void clear_has_assistbeastinfo();
  inline void set_has_assistbeastinfopos2();
  inline void clear_has_assistbeastinfopos2();
  inline void set_has_assistbeastidpurplegoldpos();
  inline void clear_has_assistbeastidpurplegoldpos();
  inline void set_has_assistbeastcontractinfopos();
  inline void clear_has_assistbeastcontractinfopos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBeastSingleInfo* beastinfo_;
  ::pb::TBeastSingleInfo* assistbeastinfo_;
  ::pb::TBeastSingleInfo* assistbeastinfopos2_;
  ::pb::TBeastSingleInfo* assistbeastidpurplegoldpos_;
  ::pb::TBeastSingleInfo* assistbeastcontractinfopos_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TOthersBeastSingleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TOthersBeastInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TOthersBeastInfo : public ::google::protobuf::Message {
 public:
  TOthersBeastInfo();
  virtual ~TOthersBeastInfo();

  TOthersBeastInfo(const TOthersBeastInfo& from);

  inline TOthersBeastInfo& operator=(const TOthersBeastInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TOthersBeastInfo& default_instance();

  void Swap(TOthersBeastInfo* other);

  // implements Message ----------------------------------------------

  TOthersBeastInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TOthersBeastInfo& from);
  void MergeFrom(const TOthersBeastInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TOthersBeastSingleInfo SingleBeastInfoArr = 1;
  inline int singlebeastinfoarr_size() const;
  inline void clear_singlebeastinfoarr();
  static const int kSingleBeastInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TOthersBeastInfo</name>
  	<Function>
  		<name>singlebeastinfoarr</name>
  		<replaceName>SingleBeastInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_singlebeastinfoarr</name>
  		<replaceName>SingleBeastInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_singlebeastinfoarr</name>
  		<replaceName>SingleBeastInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_singlebeastinfoarr</name>
  		<replaceName>SingleBeastInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>singlebeastinfoarr_size</name>
  		<replaceName>SingleBeastInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TOthersBeastSingleInfo& singlebeastinfoarr(int index) const;
  inline ::pb::TOthersBeastSingleInfo* mutable_singlebeastinfoarr(int index);
  inline ::pb::TOthersBeastSingleInfo* add_singlebeastinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TOthersBeastSingleInfo >&
      singlebeastinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TOthersBeastSingleInfo >*
      mutable_singlebeastinfoarr();

  // repeated .pb.TBeastArmItem BeastArmArr = 2;
  inline int beastarmarr_size() const;
  inline void clear_beastarmarr();
  static const int kBeastArmArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TOthersBeastInfo</name>
  	<Function>
  		<name>beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastarmarr</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beastarmarr_size</name>
  		<replaceName>BeastArmArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastArmItem& beastarmarr(int index) const;
  inline ::pb::TBeastArmItem* mutable_beastarmarr(int index);
  inline ::pb::TBeastArmItem* add_beastarmarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >&
      beastarmarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >*
      mutable_beastarmarr();

  // @@protoc_insertion_point(class_scope:pb.TOthersBeastInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TOthersBeastSingleInfo > singlebeastinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem > beastarmarr_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TOthersBeastInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastFosterReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastFosterReq : public ::google::protobuf::Message {
 public:
  TBeastFosterReq();
  virtual ~TBeastFosterReq();

  TBeastFosterReq(const TBeastFosterReq& from);

  inline TBeastFosterReq& operator=(const TBeastFosterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastFosterReq& default_instance();

  void Swap(TBeastFosterReq* other);

  // implements Message ----------------------------------------------

  TBeastFosterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastFosterReq& from);
  void MergeFrom(const TBeastFosterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BeastId = 1;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastFosterReq</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // optional uint32 FosterNum = 2;
  inline bool has_fosternum() const;
  inline void clear_fosternum();
  static const int kFosterNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastFosterReq</name>
  	<Function>
  		<name>fosternum</name>
  		<replaceName>FosterNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fosternum</name>
  		<replaceName>FosterNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fosternum</name>
  		<replaceName>FosterNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fosternum() const;
  inline void set_fosternum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastFosterReq)
 private:
  inline void set_has_beastid();
  inline void clear_has_beastid();
  inline void set_has_fosternum();
  inline void clear_has_fosternum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 beastid_;
  ::google::protobuf::uint32 fosternum_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastFosterReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastFosterRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastFosterRsp : public ::google::protobuf::Message {
 public:
  TBeastFosterRsp();
  virtual ~TBeastFosterRsp();

  TBeastFosterRsp(const TBeastFosterRsp& from);

  inline TBeastFosterRsp& operator=(const TBeastFosterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastFosterRsp& default_instance();

  void Swap(TBeastFosterRsp* other);

  // implements Message ----------------------------------------------

  TBeastFosterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastFosterRsp& from);
  void MergeFrom(const TBeastFosterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBeastFosterAttr FosterAttrArr = 1;
  inline int fosterattrarr_size() const;
  inline void clear_fosterattrarr();
  static const int kFosterAttrArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastFosterRsp</name>
  	<Function>
  		<name>fosterattrarr</name>
  		<replaceName>FosterAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_fosterattrarr</name>
  		<replaceName>FosterAttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_fosterattrarr</name>
  		<replaceName>FosterAttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fosterattrarr</name>
  		<replaceName>FosterAttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>fosterattrarr_size</name>
  		<replaceName>FosterAttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastFosterAttr& fosterattrarr(int index) const;
  inline ::pb::TBeastFosterAttr* mutable_fosterattrarr(int index);
  inline ::pb::TBeastFosterAttr* add_fosterattrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastFosterAttr >&
      fosterattrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastFosterAttr >*
      mutable_fosterattrarr();

  // optional uint32 FosterNum = 2;
  inline bool has_fosternum() const;
  inline void clear_fosternum();
  static const int kFosterNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastFosterRsp</name>
  	<Function>
  		<name>fosternum</name>
  		<replaceName>FosterNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fosternum</name>
  		<replaceName>FosterNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fosternum</name>
  		<replaceName>FosterNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fosternum() const;
  inline void set_fosternum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastFosterRsp)
 private:
  inline void set_has_fosternum();
  inline void clear_has_fosternum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastFosterAttr > fosterattrarr_;
  ::google::protobuf::uint32 fosternum_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastFosterRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastFosterLevelUpReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastFosterLevelUpReq : public ::google::protobuf::Message {
 public:
  TBeastFosterLevelUpReq();
  virtual ~TBeastFosterLevelUpReq();

  TBeastFosterLevelUpReq(const TBeastFosterLevelUpReq& from);

  inline TBeastFosterLevelUpReq& operator=(const TBeastFosterLevelUpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastFosterLevelUpReq& default_instance();

  void Swap(TBeastFosterLevelUpReq* other);

  // implements Message ----------------------------------------------

  TBeastFosterLevelUpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastFosterLevelUpReq& from);
  void MergeFrom(const TBeastFosterLevelUpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BeastId = 1;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastFosterLevelUpReq</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastFosterLevelUpReq)
 private:
  inline void set_has_beastid();
  inline void clear_has_beastid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 beastid_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastFosterLevelUpReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastStarLevelUpReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastStarLevelUpReq : public ::google::protobuf::Message {
 public:
  TBeastStarLevelUpReq();
  virtual ~TBeastStarLevelUpReq();

  TBeastStarLevelUpReq(const TBeastStarLevelUpReq& from);

  inline TBeastStarLevelUpReq& operator=(const TBeastStarLevelUpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastStarLevelUpReq& default_instance();

  void Swap(TBeastStarLevelUpReq* other);

  // implements Message ----------------------------------------------

  TBeastStarLevelUpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastStarLevelUpReq& from);
  void MergeFrom(const TBeastStarLevelUpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BeastId = 1;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastStarLevelUpReq</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // optional uint32 CostUniversalFragNum = 2;
  inline bool has_costuniversalfragnum() const;
  inline void clear_costuniversalfragnum();
  static const int kCostUniversalFragNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastStarLevelUpReq</name>
  	<Function>
  		<name>costuniversalfragnum</name>
  		<replaceName>CostUniversalFragNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_costuniversalfragnum</name>
  		<replaceName>CostUniversalFragNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_costuniversalfragnum</name>
  		<replaceName>CostUniversalFragNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 costuniversalfragnum() const;
  inline void set_costuniversalfragnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastStarLevelUpReq)
 private:
  inline void set_has_beastid();
  inline void clear_has_beastid();
  inline void set_has_costuniversalfragnum();
  inline void clear_has_costuniversalfragnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 beastid_;
  ::google::protobuf::uint32 costuniversalfragnum_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastStarLevelUpReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastEquipItemReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastEquipItemReq : public ::google::protobuf::Message {
 public:
  TBeastEquipItemReq();
  virtual ~TBeastEquipItemReq();

  TBeastEquipItemReq(const TBeastEquipItemReq& from);

  inline TBeastEquipItemReq& operator=(const TBeastEquipItemReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastEquipItemReq& default_instance();

  void Swap(TBeastEquipItemReq* other);

  // implements Message ----------------------------------------------

  TBeastEquipItemReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastEquipItemReq& from);
  void MergeFrom(const TBeastEquipItemReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BeastId = 1;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastEquipItemReq</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastEquipItemReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 ItemId = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeastEquipItemReq</name>
  	<Function>
  		<name>itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_itemid</name>
  		<replaceName>ItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastEquipItemReq)
 private:
  inline void set_has_beastid();
  inline void clear_has_beastid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 beastid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastEquipItemReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastEquipBeastReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastEquipBeastReq : public ::google::protobuf::Message {
 public:
  TBeastEquipBeastReq();
  virtual ~TBeastEquipBeastReq();

  TBeastEquipBeastReq(const TBeastEquipBeastReq& from);

  inline TBeastEquipBeastReq& operator=(const TBeastEquipBeastReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastEquipBeastReq& default_instance();

  void Swap(TBeastEquipBeastReq* other);

  // implements Message ----------------------------------------------

  TBeastEquipBeastReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastEquipBeastReq& from);
  void MergeFrom(const TBeastEquipBeastReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastEquipBeastReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 BeastId = 2;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastEquipBeastReq</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastEquipBeastReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_beastid();
  inline void clear_has_beastid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 beastid_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastEquipBeastReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastCombineBeastReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastCombineBeastReq : public ::google::protobuf::Message {
 public:
  TBeastCombineBeastReq();
  virtual ~TBeastCombineBeastReq();

  TBeastCombineBeastReq(const TBeastCombineBeastReq& from);

  inline TBeastCombineBeastReq& operator=(const TBeastCombineBeastReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastCombineBeastReq& default_instance();

  void Swap(TBeastCombineBeastReq* other);

  // implements Message ----------------------------------------------

  TBeastCombineBeastReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastCombineBeastReq& from);
  void MergeFrom(const TBeastCombineBeastReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Tid = 1;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastCombineBeastReq</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>Tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastCombineBeastReq)
 private:
  inline void set_has_tid();
  inline void clear_has_tid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 tid_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastCombineBeastReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastSetAssistBeastReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastSetAssistBeastReq : public ::google::protobuf::Message {
 public:
  TBeastSetAssistBeastReq();
  virtual ~TBeastSetAssistBeastReq();

  TBeastSetAssistBeastReq(const TBeastSetAssistBeastReq& from);

  inline TBeastSetAssistBeastReq& operator=(const TBeastSetAssistBeastReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastSetAssistBeastReq& default_instance();

  void Swap(TBeastSetAssistBeastReq* other);

  // implements Message ----------------------------------------------

  TBeastSetAssistBeastReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastSetAssistBeastReq& from);
  void MergeFrom(const TBeastSetAssistBeastReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastSetAssistBeastReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 BeastId = 2;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastSetAssistBeastReq</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // optional uint32 BeastIdPos2 = 3;
  inline bool has_beastidpos2() const;
  inline void clear_beastidpos2();
  static const int kBeastIdPos2FieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TBeastSetAssistBeastReq</name>
  	<Function>
  		<name>beastidpos2</name>
  		<replaceName>BeastIdPos2</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastidpos2</name>
  		<replaceName>BeastIdPos2</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastidpos2</name>
  		<replaceName>BeastIdPos2</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastidpos2() const;
  inline void set_beastidpos2(::google::protobuf::uint32 value);

  // optional uint32 BeastIdPurpleGoldPos = 4;
  inline bool has_beastidpurplegoldpos() const;
  inline void clear_beastidpurplegoldpos();
  static const int kBeastIdPurpleGoldPosFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TBeastSetAssistBeastReq</name>
  	<Function>
  		<name>beastidpurplegoldpos</name>
  		<replaceName>BeastIdPurpleGoldPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastidpurplegoldpos</name>
  		<replaceName>BeastIdPurpleGoldPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastidpurplegoldpos</name>
  		<replaceName>BeastIdPurpleGoldPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastidpurplegoldpos() const;
  inline void set_beastidpurplegoldpos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastSetAssistBeastReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_beastid();
  inline void clear_has_beastid();
  inline void set_has_beastidpos2();
  inline void clear_has_beastidpos2();
  inline void set_has_beastidpurplegoldpos();
  inline void clear_has_beastidpurplegoldpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 beastid_;
  ::google::protobuf::uint32 beastidpos2_;
  ::google::protobuf::uint32 beastidpurplegoldpos_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastSetAssistBeastReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastPurpleGoldLevelUpReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastPurpleGoldLevelUpReq : public ::google::protobuf::Message {
 public:
  TBeastPurpleGoldLevelUpReq();
  virtual ~TBeastPurpleGoldLevelUpReq();

  TBeastPurpleGoldLevelUpReq(const TBeastPurpleGoldLevelUpReq& from);

  inline TBeastPurpleGoldLevelUpReq& operator=(const TBeastPurpleGoldLevelUpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastPurpleGoldLevelUpReq& default_instance();

  void Swap(TBeastPurpleGoldLevelUpReq* other);

  // implements Message ----------------------------------------------

  TBeastPurpleGoldLevelUpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastPurpleGoldLevelUpReq& from);
  void MergeFrom(const TBeastPurpleGoldLevelUpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BeastId = 1;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastPurpleGoldLevelUpReq</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TBeastPurpleGoldLevelUpReq)
 private:
  inline void set_has_beastid();
  inline void clear_has_beastid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 beastid_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastPurpleGoldLevelUpReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastSoulSaveIllustrationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastSoulSaveIllustrationReq : public ::google::protobuf::Message {
 public:
  TBeastSoulSaveIllustrationReq();
  virtual ~TBeastSoulSaveIllustrationReq();

  TBeastSoulSaveIllustrationReq(const TBeastSoulSaveIllustrationReq& from);

  inline TBeastSoulSaveIllustrationReq& operator=(const TBeastSoulSaveIllustrationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastSoulSaveIllustrationReq& default_instance();

  void Swap(TBeastSoulSaveIllustrationReq* other);

  // implements Message ----------------------------------------------

  TBeastSoulSaveIllustrationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastSoulSaveIllustrationReq& from);
  void MergeFrom(const TBeastSoulSaveIllustrationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BeastId = 1;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastSoulSaveIllustrationReq</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // repeated .pb.TBeastSoulLocation NodeInfoArr = 2;
  inline int nodeinfoarr_size() const;
  inline void clear_nodeinfoarr();
  static const int kNodeInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastSoulSaveIllustrationReq</name>
  	<Function>
  		<name>nodeinfoarr</name>
  		<replaceName>NodeInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_nodeinfoarr</name>
  		<replaceName>NodeInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_nodeinfoarr</name>
  		<replaceName>NodeInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nodeinfoarr</name>
  		<replaceName>NodeInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>nodeinfoarr_size</name>
  		<replaceName>NodeInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSoulLocation& nodeinfoarr(int index) const;
  inline ::pb::TBeastSoulLocation* mutable_nodeinfoarr(int index);
  inline ::pb::TBeastSoulLocation* add_nodeinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulLocation >&
      nodeinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulLocation >*
      mutable_nodeinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TBeastSoulSaveIllustrationReq)
 private:
  inline void set_has_beastid();
  inline void clear_has_beastid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulLocation > nodeinfoarr_;
  ::google::protobuf::uint32 beastid_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastSoulSaveIllustrationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TBeastSoulGenerateSoulReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TBeastSoulGenerateSoulReq : public ::google::protobuf::Message {
 public:
  TBeastSoulGenerateSoulReq();
  virtual ~TBeastSoulGenerateSoulReq();

  TBeastSoulGenerateSoulReq(const TBeastSoulGenerateSoulReq& from);

  inline TBeastSoulGenerateSoulReq& operator=(const TBeastSoulGenerateSoulReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TBeastSoulGenerateSoulReq& default_instance();

  void Swap(TBeastSoulGenerateSoulReq* other);

  // implements Message ----------------------------------------------

  TBeastSoulGenerateSoulReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TBeastSoulGenerateSoulReq& from);
  void MergeFrom(const TBeastSoulGenerateSoulReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BeastId = 1;
  inline bool has_beastid() const;
  inline void clear_beastid();
  static const int kBeastIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TBeastSoulGenerateSoulReq</name>
  	<Function>
  		<name>beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastid</name>
  		<replaceName>BeastId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beastid() const;
  inline void set_beastid(::google::protobuf::uint32 value);

  // repeated .pb.TSimpleItem CosItemArray = 2;
  inline int cositemarray_size() const;
  inline void clear_cositemarray();
  static const int kCosItemArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TBeastSoulGenerateSoulReq</name>
  	<Function>
  		<name>cositemarray</name>
  		<replaceName>CosItemArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_cositemarray</name>
  		<replaceName>CosItemArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_cositemarray</name>
  		<replaceName>CosItemArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cositemarray</name>
  		<replaceName>CosItemArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>cositemarray_size</name>
  		<replaceName>CosItemArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TSimpleItem& cositemarray(int index) const;
  inline ::pb::TSimpleItem* mutable_cositemarray(int index);
  inline ::pb::TSimpleItem* add_cositemarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
      cositemarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
      mutable_cositemarray();

  // @@protoc_insertion_point(class_scope:pb.TBeastSoulGenerateSoulReq)
 private:
  inline void set_has_beastid();
  inline void clear_has_beastid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem > cositemarray_;
  ::google::protobuf::uint32 beastid_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TBeastSoulGenerateSoulReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TNewBeastNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Beast.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TNewBeastNotify : public ::google::protobuf::Message {
 public:
  TNewBeastNotify();
  virtual ~TNewBeastNotify();

  TNewBeastNotify(const TNewBeastNotify& from);

  inline TNewBeastNotify& operator=(const TNewBeastNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TNewBeastNotify& default_instance();

  void Swap(TNewBeastNotify* other);

  // implements Message ----------------------------------------------

  TNewBeastNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TNewBeastNotify& from);
  void MergeFrom(const TNewBeastNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TBeastSingleInfo BeastArr = 1;
  inline int beastarr_size() const;
  inline void clear_beastarr();
  static const int kBeastArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TNewBeastNotify</name>
  	<Function>
  		<name>beastarr</name>
  		<replaceName>BeastArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beastarr</name>
  		<replaceName>BeastArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beastarr</name>
  		<replaceName>BeastArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastarr</name>
  		<replaceName>BeastArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beastarr_size</name>
  		<replaceName>BeastArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSingleInfo& beastarr(int index) const;
  inline ::pb::TBeastSingleInfo* mutable_beastarr(int index);
  inline ::pb::TBeastSingleInfo* add_beastarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSingleInfo >&
      beastarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSingleInfo >*
      mutable_beastarr();

  // repeated .pb.TBeastSquadPosInfo BeastSquadArr = 2;
  inline int beastsquadarr_size() const;
  inline void clear_beastsquadarr();
  static const int kBeastSquadArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TNewBeastNotify</name>
  	<Function>
  		<name>beastsquadarr</name>
  		<replaceName>BeastSquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_beastsquadarr</name>
  		<replaceName>BeastSquadArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_beastsquadarr</name>
  		<replaceName>BeastSquadArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beastsquadarr</name>
  		<replaceName>BeastSquadArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>beastsquadarr_size</name>
  		<replaceName>BeastSquadArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBeastSquadPosInfo& beastsquadarr(int index) const;
  inline ::pb::TBeastSquadPosInfo* mutable_beastsquadarr(int index);
  inline ::pb::TBeastSquadPosInfo* add_beastsquadarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSquadPosInfo >&
      beastsquadarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSquadPosInfo >*
      mutable_beastsquadarr();

  // @@protoc_insertion_point(class_scope:pb.TNewBeastNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastSingleInfo > beastarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TBeastSquadPosInfo > beastsquadarr_;
  friend void  protobuf_AddDesc_net_2fBeast_2eproto();
  friend void protobuf_AssignDesc_net_2fBeast_2eproto();
  friend void protobuf_ShutdownFile_net_2fBeast_2eproto();

  void InitAsDefaultInstance();
  static TNewBeastNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TBeastEquipItem

// optional uint32 Pos = 1;
inline bool TBeastEquipItem::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastEquipItem::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastEquipItem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastEquipItem::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TBeastEquipItem::pos() const {
  // @@protoc_insertion_point(field_get:pb.TBeastEquipItem.Pos)
  return pos_;
}
inline void TBeastEquipItem::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastEquipItem.Pos)
}

// optional uint32 ItemId = 2;
inline bool TBeastEquipItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastEquipItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastEquipItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastEquipItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TBeastEquipItem::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastEquipItem.ItemId)
  return itemid_;
}
inline void TBeastEquipItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastEquipItem.ItemId)
}

// optional uint32 ItemTid = 3;
inline bool TBeastEquipItem::has_itemtid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeastEquipItem::set_has_itemtid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeastEquipItem::clear_has_itemtid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeastEquipItem::clear_itemtid() {
  itemtid_ = 0u;
  clear_has_itemtid();
}
inline ::google::protobuf::uint32 TBeastEquipItem::itemtid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastEquipItem.ItemTid)
  return itemtid_;
}
inline void TBeastEquipItem::set_itemtid(::google::protobuf::uint32 value) {
  set_has_itemtid();
  itemtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastEquipItem.ItemTid)
}

// -------------------------------------------------------------------

// TBeastFosterAttr

// optional uint32 AttrId = 1;
inline bool TBeastFosterAttr::has_attrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastFosterAttr::set_has_attrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastFosterAttr::clear_has_attrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastFosterAttr::clear_attrid() {
  attrid_ = 0u;
  clear_has_attrid();
}
inline ::google::protobuf::uint32 TBeastFosterAttr::attrid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastFosterAttr.AttrId)
  return attrid_;
}
inline void TBeastFosterAttr::set_attrid(::google::protobuf::uint32 value) {
  set_has_attrid();
  attrid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastFosterAttr.AttrId)
}

// optional uint32 AttrValue = 2;
inline bool TBeastFosterAttr::has_attrvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastFosterAttr::set_has_attrvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastFosterAttr::clear_has_attrvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastFosterAttr::clear_attrvalue() {
  attrvalue_ = 0u;
  clear_has_attrvalue();
}
inline ::google::protobuf::uint32 TBeastFosterAttr::attrvalue() const {
  // @@protoc_insertion_point(field_get:pb.TBeastFosterAttr.AttrValue)
  return attrvalue_;
}
inline void TBeastFosterAttr::set_attrvalue(::google::protobuf::uint32 value) {
  set_has_attrvalue();
  attrvalue_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastFosterAttr.AttrValue)
}

// -------------------------------------------------------------------

// TBeastSoulLocation

// optional uint32 Pos = 1;
inline bool TBeastSoulLocation::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastSoulLocation::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastSoulLocation::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastSoulLocation::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TBeastSoulLocation::pos() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSoulLocation.Pos)
  return pos_;
}
inline void TBeastSoulLocation::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSoulLocation.Pos)
}

// optional uint32 Color = 2;
inline bool TBeastSoulLocation::has_color() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastSoulLocation::set_has_color() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastSoulLocation::clear_has_color() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastSoulLocation::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 TBeastSoulLocation::color() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSoulLocation.Color)
  return color_;
}
inline void TBeastSoulLocation::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSoulLocation.Color)
}

// -------------------------------------------------------------------

// TBeastSoulMaterial

// optional uint32 Tid = 1;
inline bool TBeastSoulMaterial::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastSoulMaterial::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastSoulMaterial::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastSoulMaterial::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TBeastSoulMaterial::tid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSoulMaterial.Tid)
  return tid_;
}
inline void TBeastSoulMaterial::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSoulMaterial.Tid)
}

// optional uint32 Num = 2;
inline bool TBeastSoulMaterial::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastSoulMaterial::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastSoulMaterial::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastSoulMaterial::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TBeastSoulMaterial::num() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSoulMaterial.Num)
  return num_;
}
inline void TBeastSoulMaterial::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSoulMaterial.Num)
}

// -------------------------------------------------------------------

// TBeastSingleInfo

// optional uint32 BeastId = 1;
inline bool TBeastSingleInfo::has_beastid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastSingleInfo::set_has_beastid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastSingleInfo::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastSingleInfo::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastSingleInfo::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.BeastId)
  return beastid_;
}
inline void TBeastSingleInfo::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSingleInfo.BeastId)
}

// optional uint32 BeastTid = 2;
inline bool TBeastSingleInfo::has_beasttid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastSingleInfo::set_has_beasttid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastSingleInfo::clear_has_beasttid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastSingleInfo::clear_beasttid() {
  beasttid_ = 0u;
  clear_has_beasttid();
}
inline ::google::protobuf::uint32 TBeastSingleInfo::beasttid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.BeastTid)
  return beasttid_;
}
inline void TBeastSingleInfo::set_beasttid(::google::protobuf::uint32 value) {
  set_has_beasttid();
  beasttid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSingleInfo.BeastTid)
}

// optional uint32 CurFosterLevel = 3;
inline bool TBeastSingleInfo::has_curfosterlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeastSingleInfo::set_has_curfosterlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeastSingleInfo::clear_has_curfosterlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeastSingleInfo::clear_curfosterlevel() {
  curfosterlevel_ = 0u;
  clear_has_curfosterlevel();
}
inline ::google::protobuf::uint32 TBeastSingleInfo::curfosterlevel() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.CurFosterLevel)
  return curfosterlevel_;
}
inline void TBeastSingleInfo::set_curfosterlevel(::google::protobuf::uint32 value) {
  set_has_curfosterlevel();
  curfosterlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSingleInfo.CurFosterLevel)
}

// optional uint32 StarLv = 4;
inline bool TBeastSingleInfo::has_starlv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBeastSingleInfo::set_has_starlv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBeastSingleInfo::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBeastSingleInfo::clear_starlv() {
  starlv_ = 0u;
  clear_has_starlv();
}
inline ::google::protobuf::uint32 TBeastSingleInfo::starlv() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.StarLv)
  return starlv_;
}
inline void TBeastSingleInfo::set_starlv(::google::protobuf::uint32 value) {
  set_has_starlv();
  starlv_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSingleInfo.StarLv)
}

// repeated .pb.TBeastEquipItem EquipArr = 5;
inline int TBeastSingleInfo::equiparr_size() const {
  return equiparr_.size();
}
inline void TBeastSingleInfo::clear_equiparr() {
  equiparr_.Clear();
}
inline const ::pb::TBeastEquipItem& TBeastSingleInfo::equiparr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.EquipArr)
  return equiparr_.Get(index);
}
inline ::pb::TBeastEquipItem* TBeastSingleInfo::mutable_equiparr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastSingleInfo.EquipArr)
  return equiparr_.Mutable(index);
}
inline ::pb::TBeastEquipItem* TBeastSingleInfo::add_equiparr() {
  // @@protoc_insertion_point(field_add:pb.TBeastSingleInfo.EquipArr)
  return equiparr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastEquipItem >&
TBeastSingleInfo::equiparr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastSingleInfo.EquipArr)
  return equiparr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastEquipItem >*
TBeastSingleInfo::mutable_equiparr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastSingleInfo.EquipArr)
  return &equiparr_;
}

// repeated .pb.TBeastFosterAttr FosterAttrArr = 6;
inline int TBeastSingleInfo::fosterattrarr_size() const {
  return fosterattrarr_.size();
}
inline void TBeastSingleInfo::clear_fosterattrarr() {
  fosterattrarr_.Clear();
}
inline const ::pb::TBeastFosterAttr& TBeastSingleInfo::fosterattrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.FosterAttrArr)
  return fosterattrarr_.Get(index);
}
inline ::pb::TBeastFosterAttr* TBeastSingleInfo::mutable_fosterattrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastSingleInfo.FosterAttrArr)
  return fosterattrarr_.Mutable(index);
}
inline ::pb::TBeastFosterAttr* TBeastSingleInfo::add_fosterattrarr() {
  // @@protoc_insertion_point(field_add:pb.TBeastSingleInfo.FosterAttrArr)
  return fosterattrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastFosterAttr >&
TBeastSingleInfo::fosterattrarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastSingleInfo.FosterAttrArr)
  return fosterattrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastFosterAttr >*
TBeastSingleInfo::mutable_fosterattrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastSingleInfo.FosterAttrArr)
  return &fosterattrarr_;
}

// repeated .pb.TCommonReward FosterCostArr = 7;
inline int TBeastSingleInfo::fostercostarr_size() const {
  return fostercostarr_.size();
}
inline void TBeastSingleInfo::clear_fostercostarr() {
  fostercostarr_.Clear();
}
inline const ::pb::TCommonReward& TBeastSingleInfo::fostercostarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.FosterCostArr)
  return fostercostarr_.Get(index);
}
inline ::pb::TCommonReward* TBeastSingleInfo::mutable_fostercostarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastSingleInfo.FosterCostArr)
  return fostercostarr_.Mutable(index);
}
inline ::pb::TCommonReward* TBeastSingleInfo::add_fostercostarr() {
  // @@protoc_insertion_point(field_add:pb.TBeastSingleInfo.FosterCostArr)
  return fostercostarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBeastSingleInfo::fostercostarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastSingleInfo.FosterCostArr)
  return fostercostarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBeastSingleInfo::mutable_fostercostarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastSingleInfo.FosterCostArr)
  return &fostercostarr_;
}

// optional uint32 StarLvUpCostUniFragNum = 8;
inline bool TBeastSingleInfo::has_starlvupcostunifragnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TBeastSingleInfo::set_has_starlvupcostunifragnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TBeastSingleInfo::clear_has_starlvupcostunifragnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TBeastSingleInfo::clear_starlvupcostunifragnum() {
  starlvupcostunifragnum_ = 0u;
  clear_has_starlvupcostunifragnum();
}
inline ::google::protobuf::uint32 TBeastSingleInfo::starlvupcostunifragnum() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.StarLvUpCostUniFragNum)
  return starlvupcostunifragnum_;
}
inline void TBeastSingleInfo::set_starlvupcostunifragnum(::google::protobuf::uint32 value) {
  set_has_starlvupcostunifragnum();
  starlvupcostunifragnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSingleInfo.StarLvUpCostUniFragNum)
}

// optional uint32 PurpleGoldCurLevel = 9;
inline bool TBeastSingleInfo::has_purplegoldcurlevel() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TBeastSingleInfo::set_has_purplegoldcurlevel() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TBeastSingleInfo::clear_has_purplegoldcurlevel() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TBeastSingleInfo::clear_purplegoldcurlevel() {
  purplegoldcurlevel_ = 0u;
  clear_has_purplegoldcurlevel();
}
inline ::google::protobuf::uint32 TBeastSingleInfo::purplegoldcurlevel() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.PurpleGoldCurLevel)
  return purplegoldcurlevel_;
}
inline void TBeastSingleInfo::set_purplegoldcurlevel(::google::protobuf::uint32 value) {
  set_has_purplegoldcurlevel();
  purplegoldcurlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSingleInfo.PurpleGoldCurLevel)
}

// repeated .pb.TCommonReward PurpleGoldCostArr = 10;
inline int TBeastSingleInfo::purplegoldcostarr_size() const {
  return purplegoldcostarr_.size();
}
inline void TBeastSingleInfo::clear_purplegoldcostarr() {
  purplegoldcostarr_.Clear();
}
inline const ::pb::TCommonReward& TBeastSingleInfo::purplegoldcostarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.PurpleGoldCostArr)
  return purplegoldcostarr_.Get(index);
}
inline ::pb::TCommonReward* TBeastSingleInfo::mutable_purplegoldcostarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastSingleInfo.PurpleGoldCostArr)
  return purplegoldcostarr_.Mutable(index);
}
inline ::pb::TCommonReward* TBeastSingleInfo::add_purplegoldcostarr() {
  // @@protoc_insertion_point(field_add:pb.TBeastSingleInfo.PurpleGoldCostArr)
  return purplegoldcostarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TBeastSingleInfo::purplegoldcostarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastSingleInfo.PurpleGoldCostArr)
  return purplegoldcostarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TBeastSingleInfo::mutable_purplegoldcostarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastSingleInfo.PurpleGoldCostArr)
  return &purplegoldcostarr_;
}

// repeated .pb.TBeastSoulMaterial BeastSoulMaterialArr = 11;
inline int TBeastSingleInfo::beastsoulmaterialarr_size() const {
  return beastsoulmaterialarr_.size();
}
inline void TBeastSingleInfo::clear_beastsoulmaterialarr() {
  beastsoulmaterialarr_.Clear();
}
inline const ::pb::TBeastSoulMaterial& TBeastSingleInfo::beastsoulmaterialarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.BeastSoulMaterialArr)
  return beastsoulmaterialarr_.Get(index);
}
inline ::pb::TBeastSoulMaterial* TBeastSingleInfo::mutable_beastsoulmaterialarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastSingleInfo.BeastSoulMaterialArr)
  return beastsoulmaterialarr_.Mutable(index);
}
inline ::pb::TBeastSoulMaterial* TBeastSingleInfo::add_beastsoulmaterialarr() {
  // @@protoc_insertion_point(field_add:pb.TBeastSingleInfo.BeastSoulMaterialArr)
  return beastsoulmaterialarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulMaterial >&
TBeastSingleInfo::beastsoulmaterialarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastSingleInfo.BeastSoulMaterialArr)
  return beastsoulmaterialarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulMaterial >*
TBeastSingleInfo::mutable_beastsoulmaterialarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastSingleInfo.BeastSoulMaterialArr)
  return &beastsoulmaterialarr_;
}

// optional uint32 BeastSoulGenerateNum = 12;
inline bool TBeastSingleInfo::has_beastsoulgeneratenum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TBeastSingleInfo::set_has_beastsoulgeneratenum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TBeastSingleInfo::clear_has_beastsoulgeneratenum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TBeastSingleInfo::clear_beastsoulgeneratenum() {
  beastsoulgeneratenum_ = 0u;
  clear_has_beastsoulgeneratenum();
}
inline ::google::protobuf::uint32 TBeastSingleInfo::beastsoulgeneratenum() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.BeastSoulGenerateNum)
  return beastsoulgeneratenum_;
}
inline void TBeastSingleInfo::set_beastsoulgeneratenum(::google::protobuf::uint32 value) {
  set_has_beastsoulgeneratenum();
  beastsoulgeneratenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSingleInfo.BeastSoulGenerateNum)
}

// repeated .pb.TBeastSoulLocation NodeInfoArr = 13;
inline int TBeastSingleInfo::nodeinfoarr_size() const {
  return nodeinfoarr_.size();
}
inline void TBeastSingleInfo::clear_nodeinfoarr() {
  nodeinfoarr_.Clear();
}
inline const ::pb::TBeastSoulLocation& TBeastSingleInfo::nodeinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastSingleInfo.NodeInfoArr)
  return nodeinfoarr_.Get(index);
}
inline ::pb::TBeastSoulLocation* TBeastSingleInfo::mutable_nodeinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastSingleInfo.NodeInfoArr)
  return nodeinfoarr_.Mutable(index);
}
inline ::pb::TBeastSoulLocation* TBeastSingleInfo::add_nodeinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TBeastSingleInfo.NodeInfoArr)
  return nodeinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulLocation >&
TBeastSingleInfo::nodeinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastSingleInfo.NodeInfoArr)
  return nodeinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulLocation >*
TBeastSingleInfo::mutable_nodeinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastSingleInfo.NodeInfoArr)
  return &nodeinfoarr_;
}

// -------------------------------------------------------------------

// TBeastContractHelpReq

// optional uint32 BeastId = 1;
inline bool TBeastContractHelpReq::has_beastid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastContractHelpReq::set_has_beastid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastContractHelpReq::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastContractHelpReq::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastContractHelpReq::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastContractHelpReq.BeastId)
  return beastid_;
}
inline void TBeastContractHelpReq::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastContractHelpReq.BeastId)
}

// optional uint32 BeastAssistId = 2;
inline bool TBeastContractHelpReq::has_beastassistid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastContractHelpReq::set_has_beastassistid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastContractHelpReq::clear_has_beastassistid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastContractHelpReq::clear_beastassistid() {
  beastassistid_ = 0u;
  clear_has_beastassistid();
}
inline ::google::protobuf::uint32 TBeastContractHelpReq::beastassistid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastContractHelpReq.BeastAssistId)
  return beastassistid_;
}
inline void TBeastContractHelpReq::set_beastassistid(::google::protobuf::uint32 value) {
  set_has_beastassistid();
  beastassistid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastContractHelpReq.BeastAssistId)
}

// -------------------------------------------------------------------

// TBeastSquadPosInfo

// optional uint32 Pos = 1;
inline bool TBeastSquadPosInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastSquadPosInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastSquadPosInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastSquadPosInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TBeastSquadPosInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSquadPosInfo.Pos)
  return pos_;
}
inline void TBeastSquadPosInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSquadPosInfo.Pos)
}

// optional uint32 BeastId = 2;
inline bool TBeastSquadPosInfo::has_beastid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastSquadPosInfo::set_has_beastid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastSquadPosInfo::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastSquadPosInfo::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastSquadPosInfo::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSquadPosInfo.BeastId)
  return beastid_;
}
inline void TBeastSquadPosInfo::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSquadPosInfo.BeastId)
}

// optional uint32 AssistBeastId = 3;
inline bool TBeastSquadPosInfo::has_assistbeastid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeastSquadPosInfo::set_has_assistbeastid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeastSquadPosInfo::clear_has_assistbeastid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeastSquadPosInfo::clear_assistbeastid() {
  assistbeastid_ = 0u;
  clear_has_assistbeastid();
}
inline ::google::protobuf::uint32 TBeastSquadPosInfo::assistbeastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSquadPosInfo.AssistBeastId)
  return assistbeastid_;
}
inline void TBeastSquadPosInfo::set_assistbeastid(::google::protobuf::uint32 value) {
  set_has_assistbeastid();
  assistbeastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSquadPosInfo.AssistBeastId)
}

// optional uint32 AssistBeastIdPos2 = 4;
inline bool TBeastSquadPosInfo::has_assistbeastidpos2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBeastSquadPosInfo::set_has_assistbeastidpos2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBeastSquadPosInfo::clear_has_assistbeastidpos2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBeastSquadPosInfo::clear_assistbeastidpos2() {
  assistbeastidpos2_ = 0u;
  clear_has_assistbeastidpos2();
}
inline ::google::protobuf::uint32 TBeastSquadPosInfo::assistbeastidpos2() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSquadPosInfo.AssistBeastIdPos2)
  return assistbeastidpos2_;
}
inline void TBeastSquadPosInfo::set_assistbeastidpos2(::google::protobuf::uint32 value) {
  set_has_assistbeastidpos2();
  assistbeastidpos2_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSquadPosInfo.AssistBeastIdPos2)
}

// optional uint32 AssistBeastIdPurpleGoldPos = 5;
inline bool TBeastSquadPosInfo::has_assistbeastidpurplegoldpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TBeastSquadPosInfo::set_has_assistbeastidpurplegoldpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TBeastSquadPosInfo::clear_has_assistbeastidpurplegoldpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TBeastSquadPosInfo::clear_assistbeastidpurplegoldpos() {
  assistbeastidpurplegoldpos_ = 0u;
  clear_has_assistbeastidpurplegoldpos();
}
inline ::google::protobuf::uint32 TBeastSquadPosInfo::assistbeastidpurplegoldpos() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSquadPosInfo.AssistBeastIdPurpleGoldPos)
  return assistbeastidpurplegoldpos_;
}
inline void TBeastSquadPosInfo::set_assistbeastidpurplegoldpos(::google::protobuf::uint32 value) {
  set_has_assistbeastidpurplegoldpos();
  assistbeastidpurplegoldpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSquadPosInfo.AssistBeastIdPurpleGoldPos)
}

// optional uint32 AssistBeastContractId = 6;
inline bool TBeastSquadPosInfo::has_assistbeastcontractid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TBeastSquadPosInfo::set_has_assistbeastcontractid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TBeastSquadPosInfo::clear_has_assistbeastcontractid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TBeastSquadPosInfo::clear_assistbeastcontractid() {
  assistbeastcontractid_ = 0u;
  clear_has_assistbeastcontractid();
}
inline ::google::protobuf::uint32 TBeastSquadPosInfo::assistbeastcontractid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSquadPosInfo.AssistBeastContractId)
  return assistbeastcontractid_;
}
inline void TBeastSquadPosInfo::set_assistbeastcontractid(::google::protobuf::uint32 value) {
  set_has_assistbeastcontractid();
  assistbeastcontractid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSquadPosInfo.AssistBeastContractId)
}

// -------------------------------------------------------------------

// TBeastGetInfoRsp

// repeated .pb.TBeastSingleInfo BeastArr = 1;
inline int TBeastGetInfoRsp::beastarr_size() const {
  return beastarr_.size();
}
inline void TBeastGetInfoRsp::clear_beastarr() {
  beastarr_.Clear();
}
inline const ::pb::TBeastSingleInfo& TBeastGetInfoRsp::beastarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastGetInfoRsp.BeastArr)
  return beastarr_.Get(index);
}
inline ::pb::TBeastSingleInfo* TBeastGetInfoRsp::mutable_beastarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastGetInfoRsp.BeastArr)
  return beastarr_.Mutable(index);
}
inline ::pb::TBeastSingleInfo* TBeastGetInfoRsp::add_beastarr() {
  // @@protoc_insertion_point(field_add:pb.TBeastGetInfoRsp.BeastArr)
  return beastarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSingleInfo >&
TBeastGetInfoRsp::beastarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastGetInfoRsp.BeastArr)
  return beastarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSingleInfo >*
TBeastGetInfoRsp::mutable_beastarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastGetInfoRsp.BeastArr)
  return &beastarr_;
}

// repeated .pb.TBeastSquadPosInfo BeastSquadArr = 2;
inline int TBeastGetInfoRsp::beastsquadarr_size() const {
  return beastsquadarr_.size();
}
inline void TBeastGetInfoRsp::clear_beastsquadarr() {
  beastsquadarr_.Clear();
}
inline const ::pb::TBeastSquadPosInfo& TBeastGetInfoRsp::beastsquadarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastGetInfoRsp.BeastSquadArr)
  return beastsquadarr_.Get(index);
}
inline ::pb::TBeastSquadPosInfo* TBeastGetInfoRsp::mutable_beastsquadarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastGetInfoRsp.BeastSquadArr)
  return beastsquadarr_.Mutable(index);
}
inline ::pb::TBeastSquadPosInfo* TBeastGetInfoRsp::add_beastsquadarr() {
  // @@protoc_insertion_point(field_add:pb.TBeastGetInfoRsp.BeastSquadArr)
  return beastsquadarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSquadPosInfo >&
TBeastGetInfoRsp::beastsquadarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastGetInfoRsp.BeastSquadArr)
  return beastsquadarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSquadPosInfo >*
TBeastGetInfoRsp::mutable_beastsquadarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastGetInfoRsp.BeastSquadArr)
  return &beastsquadarr_;
}

// -------------------------------------------------------------------

// TOthersBeastSingleInfo

// optional uint32 Pos = 1;
inline bool TOthersBeastSingleInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TOthersBeastSingleInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TOthersBeastSingleInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TOthersBeastSingleInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TOthersBeastSingleInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TOthersBeastSingleInfo.Pos)
  return pos_;
}
inline void TOthersBeastSingleInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TOthersBeastSingleInfo.Pos)
}

// optional .pb.TBeastSingleInfo BeastInfo = 2;
inline bool TOthersBeastSingleInfo::has_beastinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TOthersBeastSingleInfo::set_has_beastinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TOthersBeastSingleInfo::clear_has_beastinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TOthersBeastSingleInfo::clear_beastinfo() {
  if (beastinfo_ != NULL) beastinfo_->::pb::TBeastSingleInfo::Clear();
  clear_has_beastinfo();
}
inline const ::pb::TBeastSingleInfo& TOthersBeastSingleInfo::beastinfo() const {
  // @@protoc_insertion_point(field_get:pb.TOthersBeastSingleInfo.BeastInfo)
  return beastinfo_ != NULL ? *beastinfo_ : *default_instance_->beastinfo_;
}
inline ::pb::TBeastSingleInfo* TOthersBeastSingleInfo::mutable_beastinfo() {
  set_has_beastinfo();
  if (beastinfo_ == NULL) beastinfo_ = new ::pb::TBeastSingleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TOthersBeastSingleInfo.BeastInfo)
  return beastinfo_;
}
inline ::pb::TBeastSingleInfo* TOthersBeastSingleInfo::release_beastinfo() {
  clear_has_beastinfo();
  ::pb::TBeastSingleInfo* temp = beastinfo_;
  beastinfo_ = NULL;
  return temp;
}
inline void TOthersBeastSingleInfo::set_allocated_beastinfo(::pb::TBeastSingleInfo* beastinfo) {
  delete beastinfo_;
  beastinfo_ = beastinfo;
  if (beastinfo) {
    set_has_beastinfo();
  } else {
    clear_has_beastinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TOthersBeastSingleInfo.BeastInfo)
}

// optional .pb.TBeastSingleInfo AssistBeastInfo = 3;
inline bool TOthersBeastSingleInfo::has_assistbeastinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TOthersBeastSingleInfo::set_has_assistbeastinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TOthersBeastSingleInfo::clear_has_assistbeastinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TOthersBeastSingleInfo::clear_assistbeastinfo() {
  if (assistbeastinfo_ != NULL) assistbeastinfo_->::pb::TBeastSingleInfo::Clear();
  clear_has_assistbeastinfo();
}
inline const ::pb::TBeastSingleInfo& TOthersBeastSingleInfo::assistbeastinfo() const {
  // @@protoc_insertion_point(field_get:pb.TOthersBeastSingleInfo.AssistBeastInfo)
  return assistbeastinfo_ != NULL ? *assistbeastinfo_ : *default_instance_->assistbeastinfo_;
}
inline ::pb::TBeastSingleInfo* TOthersBeastSingleInfo::mutable_assistbeastinfo() {
  set_has_assistbeastinfo();
  if (assistbeastinfo_ == NULL) assistbeastinfo_ = new ::pb::TBeastSingleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TOthersBeastSingleInfo.AssistBeastInfo)
  return assistbeastinfo_;
}
inline ::pb::TBeastSingleInfo* TOthersBeastSingleInfo::release_assistbeastinfo() {
  clear_has_assistbeastinfo();
  ::pb::TBeastSingleInfo* temp = assistbeastinfo_;
  assistbeastinfo_ = NULL;
  return temp;
}
inline void TOthersBeastSingleInfo::set_allocated_assistbeastinfo(::pb::TBeastSingleInfo* assistbeastinfo) {
  delete assistbeastinfo_;
  assistbeastinfo_ = assistbeastinfo;
  if (assistbeastinfo) {
    set_has_assistbeastinfo();
  } else {
    clear_has_assistbeastinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TOthersBeastSingleInfo.AssistBeastInfo)
}

// optional .pb.TBeastSingleInfo AssistBeastInfoPos2 = 4;
inline bool TOthersBeastSingleInfo::has_assistbeastinfopos2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TOthersBeastSingleInfo::set_has_assistbeastinfopos2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TOthersBeastSingleInfo::clear_has_assistbeastinfopos2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TOthersBeastSingleInfo::clear_assistbeastinfopos2() {
  if (assistbeastinfopos2_ != NULL) assistbeastinfopos2_->::pb::TBeastSingleInfo::Clear();
  clear_has_assistbeastinfopos2();
}
inline const ::pb::TBeastSingleInfo& TOthersBeastSingleInfo::assistbeastinfopos2() const {
  // @@protoc_insertion_point(field_get:pb.TOthersBeastSingleInfo.AssistBeastInfoPos2)
  return assistbeastinfopos2_ != NULL ? *assistbeastinfopos2_ : *default_instance_->assistbeastinfopos2_;
}
inline ::pb::TBeastSingleInfo* TOthersBeastSingleInfo::mutable_assistbeastinfopos2() {
  set_has_assistbeastinfopos2();
  if (assistbeastinfopos2_ == NULL) assistbeastinfopos2_ = new ::pb::TBeastSingleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TOthersBeastSingleInfo.AssistBeastInfoPos2)
  return assistbeastinfopos2_;
}
inline ::pb::TBeastSingleInfo* TOthersBeastSingleInfo::release_assistbeastinfopos2() {
  clear_has_assistbeastinfopos2();
  ::pb::TBeastSingleInfo* temp = assistbeastinfopos2_;
  assistbeastinfopos2_ = NULL;
  return temp;
}
inline void TOthersBeastSingleInfo::set_allocated_assistbeastinfopos2(::pb::TBeastSingleInfo* assistbeastinfopos2) {
  delete assistbeastinfopos2_;
  assistbeastinfopos2_ = assistbeastinfopos2;
  if (assistbeastinfopos2) {
    set_has_assistbeastinfopos2();
  } else {
    clear_has_assistbeastinfopos2();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TOthersBeastSingleInfo.AssistBeastInfoPos2)
}

// optional .pb.TBeastSingleInfo AssistBeastIdPurpleGoldPos = 5;
inline bool TOthersBeastSingleInfo::has_assistbeastidpurplegoldpos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TOthersBeastSingleInfo::set_has_assistbeastidpurplegoldpos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TOthersBeastSingleInfo::clear_has_assistbeastidpurplegoldpos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TOthersBeastSingleInfo::clear_assistbeastidpurplegoldpos() {
  if (assistbeastidpurplegoldpos_ != NULL) assistbeastidpurplegoldpos_->::pb::TBeastSingleInfo::Clear();
  clear_has_assistbeastidpurplegoldpos();
}
inline const ::pb::TBeastSingleInfo& TOthersBeastSingleInfo::assistbeastidpurplegoldpos() const {
  // @@protoc_insertion_point(field_get:pb.TOthersBeastSingleInfo.AssistBeastIdPurpleGoldPos)
  return assistbeastidpurplegoldpos_ != NULL ? *assistbeastidpurplegoldpos_ : *default_instance_->assistbeastidpurplegoldpos_;
}
inline ::pb::TBeastSingleInfo* TOthersBeastSingleInfo::mutable_assistbeastidpurplegoldpos() {
  set_has_assistbeastidpurplegoldpos();
  if (assistbeastidpurplegoldpos_ == NULL) assistbeastidpurplegoldpos_ = new ::pb::TBeastSingleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TOthersBeastSingleInfo.AssistBeastIdPurpleGoldPos)
  return assistbeastidpurplegoldpos_;
}
inline ::pb::TBeastSingleInfo* TOthersBeastSingleInfo::release_assistbeastidpurplegoldpos() {
  clear_has_assistbeastidpurplegoldpos();
  ::pb::TBeastSingleInfo* temp = assistbeastidpurplegoldpos_;
  assistbeastidpurplegoldpos_ = NULL;
  return temp;
}
inline void TOthersBeastSingleInfo::set_allocated_assistbeastidpurplegoldpos(::pb::TBeastSingleInfo* assistbeastidpurplegoldpos) {
  delete assistbeastidpurplegoldpos_;
  assistbeastidpurplegoldpos_ = assistbeastidpurplegoldpos;
  if (assistbeastidpurplegoldpos) {
    set_has_assistbeastidpurplegoldpos();
  } else {
    clear_has_assistbeastidpurplegoldpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TOthersBeastSingleInfo.AssistBeastIdPurpleGoldPos)
}

// optional .pb.TBeastSingleInfo AssistBeastContractInfoPos = 6;
inline bool TOthersBeastSingleInfo::has_assistbeastcontractinfopos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TOthersBeastSingleInfo::set_has_assistbeastcontractinfopos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TOthersBeastSingleInfo::clear_has_assistbeastcontractinfopos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TOthersBeastSingleInfo::clear_assistbeastcontractinfopos() {
  if (assistbeastcontractinfopos_ != NULL) assistbeastcontractinfopos_->::pb::TBeastSingleInfo::Clear();
  clear_has_assistbeastcontractinfopos();
}
inline const ::pb::TBeastSingleInfo& TOthersBeastSingleInfo::assistbeastcontractinfopos() const {
  // @@protoc_insertion_point(field_get:pb.TOthersBeastSingleInfo.AssistBeastContractInfoPos)
  return assistbeastcontractinfopos_ != NULL ? *assistbeastcontractinfopos_ : *default_instance_->assistbeastcontractinfopos_;
}
inline ::pb::TBeastSingleInfo* TOthersBeastSingleInfo::mutable_assistbeastcontractinfopos() {
  set_has_assistbeastcontractinfopos();
  if (assistbeastcontractinfopos_ == NULL) assistbeastcontractinfopos_ = new ::pb::TBeastSingleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TOthersBeastSingleInfo.AssistBeastContractInfoPos)
  return assistbeastcontractinfopos_;
}
inline ::pb::TBeastSingleInfo* TOthersBeastSingleInfo::release_assistbeastcontractinfopos() {
  clear_has_assistbeastcontractinfopos();
  ::pb::TBeastSingleInfo* temp = assistbeastcontractinfopos_;
  assistbeastcontractinfopos_ = NULL;
  return temp;
}
inline void TOthersBeastSingleInfo::set_allocated_assistbeastcontractinfopos(::pb::TBeastSingleInfo* assistbeastcontractinfopos) {
  delete assistbeastcontractinfopos_;
  assistbeastcontractinfopos_ = assistbeastcontractinfopos;
  if (assistbeastcontractinfopos) {
    set_has_assistbeastcontractinfopos();
  } else {
    clear_has_assistbeastcontractinfopos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TOthersBeastSingleInfo.AssistBeastContractInfoPos)
}

// -------------------------------------------------------------------

// TOthersBeastInfo

// repeated .pb.TOthersBeastSingleInfo SingleBeastInfoArr = 1;
inline int TOthersBeastInfo::singlebeastinfoarr_size() const {
  return singlebeastinfoarr_.size();
}
inline void TOthersBeastInfo::clear_singlebeastinfoarr() {
  singlebeastinfoarr_.Clear();
}
inline const ::pb::TOthersBeastSingleInfo& TOthersBeastInfo::singlebeastinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOthersBeastInfo.SingleBeastInfoArr)
  return singlebeastinfoarr_.Get(index);
}
inline ::pb::TOthersBeastSingleInfo* TOthersBeastInfo::mutable_singlebeastinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOthersBeastInfo.SingleBeastInfoArr)
  return singlebeastinfoarr_.Mutable(index);
}
inline ::pb::TOthersBeastSingleInfo* TOthersBeastInfo::add_singlebeastinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TOthersBeastInfo.SingleBeastInfoArr)
  return singlebeastinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TOthersBeastSingleInfo >&
TOthersBeastInfo::singlebeastinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TOthersBeastInfo.SingleBeastInfoArr)
  return singlebeastinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TOthersBeastSingleInfo >*
TOthersBeastInfo::mutable_singlebeastinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOthersBeastInfo.SingleBeastInfoArr)
  return &singlebeastinfoarr_;
}

// repeated .pb.TBeastArmItem BeastArmArr = 2;
inline int TOthersBeastInfo::beastarmarr_size() const {
  return beastarmarr_.size();
}
inline void TOthersBeastInfo::clear_beastarmarr() {
  beastarmarr_.Clear();
}
inline const ::pb::TBeastArmItem& TOthersBeastInfo::beastarmarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TOthersBeastInfo.BeastArmArr)
  return beastarmarr_.Get(index);
}
inline ::pb::TBeastArmItem* TOthersBeastInfo::mutable_beastarmarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TOthersBeastInfo.BeastArmArr)
  return beastarmarr_.Mutable(index);
}
inline ::pb::TBeastArmItem* TOthersBeastInfo::add_beastarmarr() {
  // @@protoc_insertion_point(field_add:pb.TOthersBeastInfo.BeastArmArr)
  return beastarmarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >&
TOthersBeastInfo::beastarmarr() const {
  // @@protoc_insertion_point(field_list:pb.TOthersBeastInfo.BeastArmArr)
  return beastarmarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastArmItem >*
TOthersBeastInfo::mutable_beastarmarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TOthersBeastInfo.BeastArmArr)
  return &beastarmarr_;
}

// -------------------------------------------------------------------

// TBeastFosterReq

// optional uint32 BeastId = 1;
inline bool TBeastFosterReq::has_beastid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastFosterReq::set_has_beastid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastFosterReq::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastFosterReq::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastFosterReq::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastFosterReq.BeastId)
  return beastid_;
}
inline void TBeastFosterReq::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastFosterReq.BeastId)
}

// optional uint32 FosterNum = 2;
inline bool TBeastFosterReq::has_fosternum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastFosterReq::set_has_fosternum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastFosterReq::clear_has_fosternum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastFosterReq::clear_fosternum() {
  fosternum_ = 0u;
  clear_has_fosternum();
}
inline ::google::protobuf::uint32 TBeastFosterReq::fosternum() const {
  // @@protoc_insertion_point(field_get:pb.TBeastFosterReq.FosterNum)
  return fosternum_;
}
inline void TBeastFosterReq::set_fosternum(::google::protobuf::uint32 value) {
  set_has_fosternum();
  fosternum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastFosterReq.FosterNum)
}

// -------------------------------------------------------------------

// TBeastFosterRsp

// repeated .pb.TBeastFosterAttr FosterAttrArr = 1;
inline int TBeastFosterRsp::fosterattrarr_size() const {
  return fosterattrarr_.size();
}
inline void TBeastFosterRsp::clear_fosterattrarr() {
  fosterattrarr_.Clear();
}
inline const ::pb::TBeastFosterAttr& TBeastFosterRsp::fosterattrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastFosterRsp.FosterAttrArr)
  return fosterattrarr_.Get(index);
}
inline ::pb::TBeastFosterAttr* TBeastFosterRsp::mutable_fosterattrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastFosterRsp.FosterAttrArr)
  return fosterattrarr_.Mutable(index);
}
inline ::pb::TBeastFosterAttr* TBeastFosterRsp::add_fosterattrarr() {
  // @@protoc_insertion_point(field_add:pb.TBeastFosterRsp.FosterAttrArr)
  return fosterattrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastFosterAttr >&
TBeastFosterRsp::fosterattrarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastFosterRsp.FosterAttrArr)
  return fosterattrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastFosterAttr >*
TBeastFosterRsp::mutable_fosterattrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastFosterRsp.FosterAttrArr)
  return &fosterattrarr_;
}

// optional uint32 FosterNum = 2;
inline bool TBeastFosterRsp::has_fosternum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastFosterRsp::set_has_fosternum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastFosterRsp::clear_has_fosternum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastFosterRsp::clear_fosternum() {
  fosternum_ = 0u;
  clear_has_fosternum();
}
inline ::google::protobuf::uint32 TBeastFosterRsp::fosternum() const {
  // @@protoc_insertion_point(field_get:pb.TBeastFosterRsp.FosterNum)
  return fosternum_;
}
inline void TBeastFosterRsp::set_fosternum(::google::protobuf::uint32 value) {
  set_has_fosternum();
  fosternum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastFosterRsp.FosterNum)
}

// -------------------------------------------------------------------

// TBeastFosterLevelUpReq

// optional uint32 BeastId = 1;
inline bool TBeastFosterLevelUpReq::has_beastid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastFosterLevelUpReq::set_has_beastid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastFosterLevelUpReq::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastFosterLevelUpReq::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastFosterLevelUpReq::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastFosterLevelUpReq.BeastId)
  return beastid_;
}
inline void TBeastFosterLevelUpReq::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastFosterLevelUpReq.BeastId)
}

// -------------------------------------------------------------------

// TBeastStarLevelUpReq

// optional uint32 BeastId = 1;
inline bool TBeastStarLevelUpReq::has_beastid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastStarLevelUpReq::set_has_beastid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastStarLevelUpReq::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastStarLevelUpReq::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastStarLevelUpReq::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastStarLevelUpReq.BeastId)
  return beastid_;
}
inline void TBeastStarLevelUpReq::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastStarLevelUpReq.BeastId)
}

// optional uint32 CostUniversalFragNum = 2;
inline bool TBeastStarLevelUpReq::has_costuniversalfragnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastStarLevelUpReq::set_has_costuniversalfragnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastStarLevelUpReq::clear_has_costuniversalfragnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastStarLevelUpReq::clear_costuniversalfragnum() {
  costuniversalfragnum_ = 0u;
  clear_has_costuniversalfragnum();
}
inline ::google::protobuf::uint32 TBeastStarLevelUpReq::costuniversalfragnum() const {
  // @@protoc_insertion_point(field_get:pb.TBeastStarLevelUpReq.CostUniversalFragNum)
  return costuniversalfragnum_;
}
inline void TBeastStarLevelUpReq::set_costuniversalfragnum(::google::protobuf::uint32 value) {
  set_has_costuniversalfragnum();
  costuniversalfragnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastStarLevelUpReq.CostUniversalFragNum)
}

// -------------------------------------------------------------------

// TBeastEquipItemReq

// optional uint32 BeastId = 1;
inline bool TBeastEquipItemReq::has_beastid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastEquipItemReq::set_has_beastid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastEquipItemReq::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastEquipItemReq::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastEquipItemReq::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastEquipItemReq.BeastId)
  return beastid_;
}
inline void TBeastEquipItemReq::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastEquipItemReq.BeastId)
}

// optional uint32 Pos = 2;
inline bool TBeastEquipItemReq::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastEquipItemReq::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastEquipItemReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastEquipItemReq::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TBeastEquipItemReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TBeastEquipItemReq.Pos)
  return pos_;
}
inline void TBeastEquipItemReq::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastEquipItemReq.Pos)
}

// optional uint32 ItemId = 3;
inline bool TBeastEquipItemReq::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeastEquipItemReq::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeastEquipItemReq::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeastEquipItemReq::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TBeastEquipItemReq::itemid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastEquipItemReq.ItemId)
  return itemid_;
}
inline void TBeastEquipItemReq::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastEquipItemReq.ItemId)
}

// -------------------------------------------------------------------

// TBeastEquipBeastReq

// optional uint32 Pos = 1;
inline bool TBeastEquipBeastReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastEquipBeastReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastEquipBeastReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastEquipBeastReq::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TBeastEquipBeastReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TBeastEquipBeastReq.Pos)
  return pos_;
}
inline void TBeastEquipBeastReq::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastEquipBeastReq.Pos)
}

// optional uint32 BeastId = 2;
inline bool TBeastEquipBeastReq::has_beastid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastEquipBeastReq::set_has_beastid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastEquipBeastReq::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastEquipBeastReq::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastEquipBeastReq::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastEquipBeastReq.BeastId)
  return beastid_;
}
inline void TBeastEquipBeastReq::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastEquipBeastReq.BeastId)
}

// -------------------------------------------------------------------

// TBeastCombineBeastReq

// optional uint32 Tid = 1;
inline bool TBeastCombineBeastReq::has_tid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastCombineBeastReq::set_has_tid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastCombineBeastReq::clear_has_tid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastCombineBeastReq::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TBeastCombineBeastReq::tid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastCombineBeastReq.Tid)
  return tid_;
}
inline void TBeastCombineBeastReq::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastCombineBeastReq.Tid)
}

// -------------------------------------------------------------------

// TBeastSetAssistBeastReq

// optional uint32 Pos = 1;
inline bool TBeastSetAssistBeastReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastSetAssistBeastReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastSetAssistBeastReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastSetAssistBeastReq::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TBeastSetAssistBeastReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSetAssistBeastReq.Pos)
  return pos_;
}
inline void TBeastSetAssistBeastReq::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSetAssistBeastReq.Pos)
}

// optional uint32 BeastId = 2;
inline bool TBeastSetAssistBeastReq::has_beastid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TBeastSetAssistBeastReq::set_has_beastid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TBeastSetAssistBeastReq::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TBeastSetAssistBeastReq::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastSetAssistBeastReq::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSetAssistBeastReq.BeastId)
  return beastid_;
}
inline void TBeastSetAssistBeastReq::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSetAssistBeastReq.BeastId)
}

// optional uint32 BeastIdPos2 = 3;
inline bool TBeastSetAssistBeastReq::has_beastidpos2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TBeastSetAssistBeastReq::set_has_beastidpos2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TBeastSetAssistBeastReq::clear_has_beastidpos2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TBeastSetAssistBeastReq::clear_beastidpos2() {
  beastidpos2_ = 0u;
  clear_has_beastidpos2();
}
inline ::google::protobuf::uint32 TBeastSetAssistBeastReq::beastidpos2() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSetAssistBeastReq.BeastIdPos2)
  return beastidpos2_;
}
inline void TBeastSetAssistBeastReq::set_beastidpos2(::google::protobuf::uint32 value) {
  set_has_beastidpos2();
  beastidpos2_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSetAssistBeastReq.BeastIdPos2)
}

// optional uint32 BeastIdPurpleGoldPos = 4;
inline bool TBeastSetAssistBeastReq::has_beastidpurplegoldpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TBeastSetAssistBeastReq::set_has_beastidpurplegoldpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TBeastSetAssistBeastReq::clear_has_beastidpurplegoldpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TBeastSetAssistBeastReq::clear_beastidpurplegoldpos() {
  beastidpurplegoldpos_ = 0u;
  clear_has_beastidpurplegoldpos();
}
inline ::google::protobuf::uint32 TBeastSetAssistBeastReq::beastidpurplegoldpos() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSetAssistBeastReq.BeastIdPurpleGoldPos)
  return beastidpurplegoldpos_;
}
inline void TBeastSetAssistBeastReq::set_beastidpurplegoldpos(::google::protobuf::uint32 value) {
  set_has_beastidpurplegoldpos();
  beastidpurplegoldpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSetAssistBeastReq.BeastIdPurpleGoldPos)
}

// -------------------------------------------------------------------

// TBeastPurpleGoldLevelUpReq

// optional uint32 BeastId = 1;
inline bool TBeastPurpleGoldLevelUpReq::has_beastid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastPurpleGoldLevelUpReq::set_has_beastid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastPurpleGoldLevelUpReq::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastPurpleGoldLevelUpReq::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastPurpleGoldLevelUpReq::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastPurpleGoldLevelUpReq.BeastId)
  return beastid_;
}
inline void TBeastPurpleGoldLevelUpReq::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastPurpleGoldLevelUpReq.BeastId)
}

// -------------------------------------------------------------------

// TBeastSoulSaveIllustrationReq

// optional uint32 BeastId = 1;
inline bool TBeastSoulSaveIllustrationReq::has_beastid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastSoulSaveIllustrationReq::set_has_beastid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastSoulSaveIllustrationReq::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastSoulSaveIllustrationReq::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastSoulSaveIllustrationReq::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSoulSaveIllustrationReq.BeastId)
  return beastid_;
}
inline void TBeastSoulSaveIllustrationReq::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSoulSaveIllustrationReq.BeastId)
}

// repeated .pb.TBeastSoulLocation NodeInfoArr = 2;
inline int TBeastSoulSaveIllustrationReq::nodeinfoarr_size() const {
  return nodeinfoarr_.size();
}
inline void TBeastSoulSaveIllustrationReq::clear_nodeinfoarr() {
  nodeinfoarr_.Clear();
}
inline const ::pb::TBeastSoulLocation& TBeastSoulSaveIllustrationReq::nodeinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastSoulSaveIllustrationReq.NodeInfoArr)
  return nodeinfoarr_.Get(index);
}
inline ::pb::TBeastSoulLocation* TBeastSoulSaveIllustrationReq::mutable_nodeinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastSoulSaveIllustrationReq.NodeInfoArr)
  return nodeinfoarr_.Mutable(index);
}
inline ::pb::TBeastSoulLocation* TBeastSoulSaveIllustrationReq::add_nodeinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TBeastSoulSaveIllustrationReq.NodeInfoArr)
  return nodeinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulLocation >&
TBeastSoulSaveIllustrationReq::nodeinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TBeastSoulSaveIllustrationReq.NodeInfoArr)
  return nodeinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSoulLocation >*
TBeastSoulSaveIllustrationReq::mutable_nodeinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastSoulSaveIllustrationReq.NodeInfoArr)
  return &nodeinfoarr_;
}

// -------------------------------------------------------------------

// TBeastSoulGenerateSoulReq

// optional uint32 BeastId = 1;
inline bool TBeastSoulGenerateSoulReq::has_beastid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TBeastSoulGenerateSoulReq::set_has_beastid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TBeastSoulGenerateSoulReq::clear_has_beastid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TBeastSoulGenerateSoulReq::clear_beastid() {
  beastid_ = 0u;
  clear_has_beastid();
}
inline ::google::protobuf::uint32 TBeastSoulGenerateSoulReq::beastid() const {
  // @@protoc_insertion_point(field_get:pb.TBeastSoulGenerateSoulReq.BeastId)
  return beastid_;
}
inline void TBeastSoulGenerateSoulReq::set_beastid(::google::protobuf::uint32 value) {
  set_has_beastid();
  beastid_ = value;
  // @@protoc_insertion_point(field_set:pb.TBeastSoulGenerateSoulReq.BeastId)
}

// repeated .pb.TSimpleItem CosItemArray = 2;
inline int TBeastSoulGenerateSoulReq::cositemarray_size() const {
  return cositemarray_.size();
}
inline void TBeastSoulGenerateSoulReq::clear_cositemarray() {
  cositemarray_.Clear();
}
inline const ::pb::TSimpleItem& TBeastSoulGenerateSoulReq::cositemarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TBeastSoulGenerateSoulReq.CosItemArray)
  return cositemarray_.Get(index);
}
inline ::pb::TSimpleItem* TBeastSoulGenerateSoulReq::mutable_cositemarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TBeastSoulGenerateSoulReq.CosItemArray)
  return cositemarray_.Mutable(index);
}
inline ::pb::TSimpleItem* TBeastSoulGenerateSoulReq::add_cositemarray() {
  // @@protoc_insertion_point(field_add:pb.TBeastSoulGenerateSoulReq.CosItemArray)
  return cositemarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >&
TBeastSoulGenerateSoulReq::cositemarray() const {
  // @@protoc_insertion_point(field_list:pb.TBeastSoulGenerateSoulReq.CosItemArray)
  return cositemarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TSimpleItem >*
TBeastSoulGenerateSoulReq::mutable_cositemarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TBeastSoulGenerateSoulReq.CosItemArray)
  return &cositemarray_;
}

// -------------------------------------------------------------------

// TNewBeastNotify

// repeated .pb.TBeastSingleInfo BeastArr = 1;
inline int TNewBeastNotify::beastarr_size() const {
  return beastarr_.size();
}
inline void TNewBeastNotify::clear_beastarr() {
  beastarr_.Clear();
}
inline const ::pb::TBeastSingleInfo& TNewBeastNotify::beastarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TNewBeastNotify.BeastArr)
  return beastarr_.Get(index);
}
inline ::pb::TBeastSingleInfo* TNewBeastNotify::mutable_beastarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TNewBeastNotify.BeastArr)
  return beastarr_.Mutable(index);
}
inline ::pb::TBeastSingleInfo* TNewBeastNotify::add_beastarr() {
  // @@protoc_insertion_point(field_add:pb.TNewBeastNotify.BeastArr)
  return beastarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSingleInfo >&
TNewBeastNotify::beastarr() const {
  // @@protoc_insertion_point(field_list:pb.TNewBeastNotify.BeastArr)
  return beastarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSingleInfo >*
TNewBeastNotify::mutable_beastarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TNewBeastNotify.BeastArr)
  return &beastarr_;
}

// repeated .pb.TBeastSquadPosInfo BeastSquadArr = 2;
inline int TNewBeastNotify::beastsquadarr_size() const {
  return beastsquadarr_.size();
}
inline void TNewBeastNotify::clear_beastsquadarr() {
  beastsquadarr_.Clear();
}
inline const ::pb::TBeastSquadPosInfo& TNewBeastNotify::beastsquadarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TNewBeastNotify.BeastSquadArr)
  return beastsquadarr_.Get(index);
}
inline ::pb::TBeastSquadPosInfo* TNewBeastNotify::mutable_beastsquadarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TNewBeastNotify.BeastSquadArr)
  return beastsquadarr_.Mutable(index);
}
inline ::pb::TBeastSquadPosInfo* TNewBeastNotify::add_beastsquadarr() {
  // @@protoc_insertion_point(field_add:pb.TNewBeastNotify.BeastSquadArr)
  return beastsquadarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TBeastSquadPosInfo >&
TNewBeastNotify::beastsquadarr() const {
  // @@protoc_insertion_point(field_list:pb.TNewBeastNotify.BeastSquadArr)
  return beastsquadarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TBeastSquadPosInfo >*
TNewBeastNotify::mutable_beastsquadarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TNewBeastNotify.BeastSquadArr)
  return &beastsquadarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fBeast_2eproto__INCLUDED
