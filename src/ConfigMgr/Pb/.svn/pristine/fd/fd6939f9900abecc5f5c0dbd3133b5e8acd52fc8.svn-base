// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/RewardCenter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/RewardCenter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TRewardCenterRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRewardCenterRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRewardCenterGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRewardCenterGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRewardCenterReceiveRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRewardCenterReceiveRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TRewardCenterRewardChangePush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TRewardCenterRewardChangePush_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fRewardCenter_2eproto() {
  protobuf_AddDesc_net_2fRewardCenter_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/RewardCenter.proto");
  GOOGLE_CHECK(file != NULL);
  TRewardCenterRewardInfo_descriptor_ = file->message_type(0);
  static const int TRewardCenterRewardInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardInfo, recvtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardInfo, autorecvtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardInfo, arrreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardInfo, extend_),
  };
  TRewardCenterRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRewardCenterRewardInfo_descriptor_,
      TRewardCenterRewardInfo::default_instance_,
      TRewardCenterRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRewardCenterRewardInfo));
  TRewardCenterGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TRewardCenterGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterGetInfoRsp, arrrewardinfo_),
  };
  TRewardCenterGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRewardCenterGetInfoRsp_descriptor_,
      TRewardCenterGetInfoRsp::default_instance_,
      TRewardCenterGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRewardCenterGetInfoRsp));
  TRewardCenterReceiveRewardReq_descriptor_ = file->message_type(2);
  static const int TRewardCenterReceiveRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterReceiveRewardReq, arrid_),
  };
  TRewardCenterReceiveRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRewardCenterReceiveRewardReq_descriptor_,
      TRewardCenterReceiveRewardReq::default_instance_,
      TRewardCenterReceiveRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterReceiveRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterReceiveRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRewardCenterReceiveRewardReq));
  TRewardCenterRewardChangePush_descriptor_ = file->message_type(3);
  static const int TRewardCenterRewardChangePush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardChangePush, arrrewardinfo_),
  };
  TRewardCenterRewardChangePush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TRewardCenterRewardChangePush_descriptor_,
      TRewardCenterRewardChangePush::default_instance_,
      TRewardCenterRewardChangePush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardChangePush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TRewardCenterRewardChangePush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TRewardCenterRewardChangePush));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fRewardCenter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRewardCenterRewardInfo_descriptor_, &TRewardCenterRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRewardCenterGetInfoRsp_descriptor_, &TRewardCenterGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRewardCenterReceiveRewardReq_descriptor_, &TRewardCenterReceiveRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TRewardCenterRewardChangePush_descriptor_, &TRewardCenterRewardChangePush::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fRewardCenter_2eproto() {
  delete TRewardCenterRewardInfo::default_instance_;
  delete TRewardCenterRewardInfo_reflection_;
  delete TRewardCenterGetInfoRsp::default_instance_;
  delete TRewardCenterGetInfoRsp_reflection_;
  delete TRewardCenterReceiveRewardReq::default_instance_;
  delete TRewardCenterReceiveRewardReq_reflection_;
  delete TRewardCenterRewardChangePush::default_instance_;
  delete TRewardCenterRewardChangePush_reflection_;
}

void protobuf_AddDesc_net_2fRewardCenter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026net/RewardCenter.proto\022\002pb\032\026net/Common"
    "Reward.proto\"\243\001\n\027TRewardCenterRewardInfo"
    "\022\n\n\002Id\030\001 \001(\004\022\014\n\004Type\030\002 \001(\r\022\020\n\010SendTime\030\003"
    " \001(\004\022\020\n\010RecvTime\030\004 \001(\004\022\024\n\014AutoRecvTime\030\005"
    " \001(\004\022$\n\tArrReward\030\006 \003(\0132\021.pb.TCommonRewa"
    "rd\022\016\n\006Extend\030\007 \001(\014\"M\n\027TRewardCenterGetIn"
    "foRsp\0222\n\rArrRewardInfo\030\001 \003(\0132\033.pb.TRewar"
    "dCenterRewardInfo\".\n\035TRewardCenterReceiv"
    "eRewardReq\022\r\n\005ArrId\030\001 \003(\004\"S\n\035TRewardCent"
    "erRewardChangePush\0222\n\rArrRewardInfo\030\001 \003("
    "\0132\033.pb.TRewardCenterRewardInfo", 430);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/RewardCenter.proto", &protobuf_RegisterTypes);
  TRewardCenterRewardInfo::default_instance_ = new TRewardCenterRewardInfo();
  TRewardCenterGetInfoRsp::default_instance_ = new TRewardCenterGetInfoRsp();
  TRewardCenterReceiveRewardReq::default_instance_ = new TRewardCenterReceiveRewardReq();
  TRewardCenterRewardChangePush::default_instance_ = new TRewardCenterRewardChangePush();
  TRewardCenterRewardInfo::default_instance_->InitAsDefaultInstance();
  TRewardCenterGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TRewardCenterReceiveRewardReq::default_instance_->InitAsDefaultInstance();
  TRewardCenterRewardChangePush::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fRewardCenter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fRewardCenter_2eproto {
  StaticDescriptorInitializer_net_2fRewardCenter_2eproto() {
    protobuf_AddDesc_net_2fRewardCenter_2eproto();
  }
} static_descriptor_initializer_net_2fRewardCenter_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TRewardCenterRewardInfo::kIdFieldNumber;
const int TRewardCenterRewardInfo::kTypeFieldNumber;
const int TRewardCenterRewardInfo::kSendTimeFieldNumber;
const int TRewardCenterRewardInfo::kRecvTimeFieldNumber;
const int TRewardCenterRewardInfo::kAutoRecvTimeFieldNumber;
const int TRewardCenterRewardInfo::kArrRewardFieldNumber;
const int TRewardCenterRewardInfo::kExtendFieldNumber;
#endif  // !_MSC_VER

TRewardCenterRewardInfo::TRewardCenterRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRewardCenterRewardInfo)
}

void TRewardCenterRewardInfo::InitAsDefaultInstance() {
}

TRewardCenterRewardInfo::TRewardCenterRewardInfo(const TRewardCenterRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRewardCenterRewardInfo)
}

void TRewardCenterRewardInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  sendtime_ = GOOGLE_ULONGLONG(0);
  recvtime_ = GOOGLE_ULONGLONG(0);
  autorecvtime_ = GOOGLE_ULONGLONG(0);
  extend_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRewardCenterRewardInfo::~TRewardCenterRewardInfo() {
  // @@protoc_insertion_point(destructor:pb.TRewardCenterRewardInfo)
  SharedDtor();
}

void TRewardCenterRewardInfo::SharedDtor() {
  if (extend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extend_;
  }
  if (this != default_instance_) {
  }
}

void TRewardCenterRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRewardCenterRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRewardCenterRewardInfo_descriptor_;
}

const TRewardCenterRewardInfo& TRewardCenterRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRewardCenter_2eproto();
  return *default_instance_;
}

TRewardCenterRewardInfo* TRewardCenterRewardInfo::default_instance_ = NULL;

TRewardCenterRewardInfo* TRewardCenterRewardInfo::New() const {
  return new TRewardCenterRewardInfo;
}

void TRewardCenterRewardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TRewardCenterRewardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 95) {
    ZR_(id_, autorecvtime_);
    type_ = 0u;
    if (has_extend()) {
      if (extend_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        extend_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRewardCenterRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRewardCenterRewardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional uint32 Type = 2;
      case 2: {
        if (tag == 16) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_SendTime;
        break;
      }

      // optional uint64 SendTime = 3;
      case 3: {
        if (tag == 24) {
         parse_SendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RecvTime;
        break;
      }

      // optional uint64 RecvTime = 4;
      case 4: {
        if (tag == 32) {
         parse_RecvTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvtime_)));
          set_has_recvtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AutoRecvTime;
        break;
      }

      // optional uint64 AutoRecvTime = 5;
      case 5: {
        if (tag == 40) {
         parse_AutoRecvTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &autorecvtime_)));
          set_has_autorecvtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrReward;
        break;
      }

      // repeated .pb.TCommonReward ArrReward = 6;
      case 6: {
        if (tag == 50) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrReward;
        if (input->ExpectTag(58)) goto parse_Extend;
        break;
      }

      // optional bytes Extend = 7;
      case 7: {
        if (tag == 58) {
         parse_Extend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_extend()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRewardCenterRewardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRewardCenterRewardInfo)
  return false;
#undef DO_
}

void TRewardCenterRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRewardCenterRewardInfo)
  // optional uint64 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint64 SendTime = 3;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sendtime(), output);
  }

  // optional uint64 RecvTime = 4;
  if (has_recvtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->recvtime(), output);
  }

  // optional uint64 AutoRecvTime = 5;
  if (has_autorecvtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->autorecvtime(), output);
  }

  // repeated .pb.TCommonReward ArrReward = 6;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arrreward(i), output);
  }

  // optional bytes Extend = 7;
  if (has_extend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->extend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRewardCenterRewardInfo)
}

::google::protobuf::uint8* TRewardCenterRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRewardCenterRewardInfo)
  // optional uint64 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint64 SendTime = 3;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sendtime(), target);
  }

  // optional uint64 RecvTime = 4;
  if (has_recvtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->recvtime(), target);
  }

  // optional uint64 AutoRecvTime = 5;
  if (has_autorecvtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->autorecvtime(), target);
  }

  // repeated .pb.TCommonReward ArrReward = 6;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arrreward(i), target);
  }

  // optional bytes Extend = 7;
  if (has_extend()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->extend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRewardCenterRewardInfo)
  return target;
}

int TRewardCenterRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 SendTime = 3;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendtime());
    }

    // optional uint64 RecvTime = 4;
    if (has_recvtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvtime());
    }

    // optional uint64 AutoRecvTime = 5;
    if (has_autorecvtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->autorecvtime());
    }

    // optional bytes Extend = 7;
    if (has_extend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->extend());
    }

  }
  // repeated .pb.TCommonReward ArrReward = 6;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRewardCenterRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRewardCenterRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRewardCenterRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRewardCenterRewardInfo::MergeFrom(const TRewardCenterRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_recvtime()) {
      set_recvtime(from.recvtime());
    }
    if (from.has_autorecvtime()) {
      set_autorecvtime(from.autorecvtime());
    }
    if (from.has_extend()) {
      set_extend(from.extend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRewardCenterRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRewardCenterRewardInfo::CopyFrom(const TRewardCenterRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRewardCenterRewardInfo::IsInitialized() const {

  return true;
}

void TRewardCenterRewardInfo::Swap(TRewardCenterRewardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(recvtime_, other->recvtime_);
    std::swap(autorecvtime_, other->autorecvtime_);
    arrreward_.Swap(&other->arrreward_);
    std::swap(extend_, other->extend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRewardCenterRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRewardCenterRewardInfo_descriptor_;
  metadata.reflection = TRewardCenterRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRewardCenterGetInfoRsp::kArrRewardInfoFieldNumber;
#endif  // !_MSC_VER

TRewardCenterGetInfoRsp::TRewardCenterGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRewardCenterGetInfoRsp)
}

void TRewardCenterGetInfoRsp::InitAsDefaultInstance() {
}

TRewardCenterGetInfoRsp::TRewardCenterGetInfoRsp(const TRewardCenterGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRewardCenterGetInfoRsp)
}

void TRewardCenterGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRewardCenterGetInfoRsp::~TRewardCenterGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TRewardCenterGetInfoRsp)
  SharedDtor();
}

void TRewardCenterGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRewardCenterGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRewardCenterGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRewardCenterGetInfoRsp_descriptor_;
}

const TRewardCenterGetInfoRsp& TRewardCenterGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRewardCenter_2eproto();
  return *default_instance_;
}

TRewardCenterGetInfoRsp* TRewardCenterGetInfoRsp::default_instance_ = NULL;

TRewardCenterGetInfoRsp* TRewardCenterGetInfoRsp::New() const {
  return new TRewardCenterGetInfoRsp;
}

void TRewardCenterGetInfoRsp::Clear() {
  arrrewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRewardCenterGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRewardCenterGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRewardInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRewardCenterGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRewardCenterGetInfoRsp)
  return false;
#undef DO_
}

void TRewardCenterGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRewardCenterGetInfoRsp)
  // repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRewardCenterGetInfoRsp)
}

::google::protobuf::uint8* TRewardCenterGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRewardCenterGetInfoRsp)
  // repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRewardCenterGetInfoRsp)
  return target;
}

int TRewardCenterGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
  total_size += 1 * this->arrrewardinfo_size();
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRewardCenterGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRewardCenterGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRewardCenterGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRewardCenterGetInfoRsp::MergeFrom(const TRewardCenterGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrewardinfo_.MergeFrom(from.arrrewardinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRewardCenterGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRewardCenterGetInfoRsp::CopyFrom(const TRewardCenterGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRewardCenterGetInfoRsp::IsInitialized() const {

  return true;
}

void TRewardCenterGetInfoRsp::Swap(TRewardCenterGetInfoRsp* other) {
  if (other != this) {
    arrrewardinfo_.Swap(&other->arrrewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRewardCenterGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRewardCenterGetInfoRsp_descriptor_;
  metadata.reflection = TRewardCenterGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRewardCenterReceiveRewardReq::kArrIdFieldNumber;
#endif  // !_MSC_VER

TRewardCenterReceiveRewardReq::TRewardCenterReceiveRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRewardCenterReceiveRewardReq)
}

void TRewardCenterReceiveRewardReq::InitAsDefaultInstance() {
}

TRewardCenterReceiveRewardReq::TRewardCenterReceiveRewardReq(const TRewardCenterReceiveRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRewardCenterReceiveRewardReq)
}

void TRewardCenterReceiveRewardReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRewardCenterReceiveRewardReq::~TRewardCenterReceiveRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TRewardCenterReceiveRewardReq)
  SharedDtor();
}

void TRewardCenterReceiveRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRewardCenterReceiveRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRewardCenterReceiveRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRewardCenterReceiveRewardReq_descriptor_;
}

const TRewardCenterReceiveRewardReq& TRewardCenterReceiveRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRewardCenter_2eproto();
  return *default_instance_;
}

TRewardCenterReceiveRewardReq* TRewardCenterReceiveRewardReq::default_instance_ = NULL;

TRewardCenterReceiveRewardReq* TRewardCenterReceiveRewardReq::New() const {
  return new TRewardCenterReceiveRewardReq;
}

void TRewardCenterReceiveRewardReq::Clear() {
  arrid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRewardCenterReceiveRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRewardCenterReceiveRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ArrId = 1;
      case 1: {
        if (tag == 8) {
         parse_ArrId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_arrid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_arrid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ArrId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRewardCenterReceiveRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRewardCenterReceiveRewardReq)
  return false;
#undef DO_
}

void TRewardCenterReceiveRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRewardCenterReceiveRewardReq)
  // repeated uint64 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->arrid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRewardCenterReceiveRewardReq)
}

::google::protobuf::uint8* TRewardCenterReceiveRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRewardCenterReceiveRewardReq)
  // repeated uint64 ArrId = 1;
  for (int i = 0; i < this->arrid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->arrid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRewardCenterReceiveRewardReq)
  return target;
}

int TRewardCenterReceiveRewardReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 ArrId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->arrid(i));
    }
    total_size += 1 * this->arrid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRewardCenterReceiveRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRewardCenterReceiveRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRewardCenterReceiveRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRewardCenterReceiveRewardReq::MergeFrom(const TRewardCenterReceiveRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrid_.MergeFrom(from.arrid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRewardCenterReceiveRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRewardCenterReceiveRewardReq::CopyFrom(const TRewardCenterReceiveRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRewardCenterReceiveRewardReq::IsInitialized() const {

  return true;
}

void TRewardCenterReceiveRewardReq::Swap(TRewardCenterReceiveRewardReq* other) {
  if (other != this) {
    arrid_.Swap(&other->arrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRewardCenterReceiveRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRewardCenterReceiveRewardReq_descriptor_;
  metadata.reflection = TRewardCenterReceiveRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TRewardCenterRewardChangePush::kArrRewardInfoFieldNumber;
#endif  // !_MSC_VER

TRewardCenterRewardChangePush::TRewardCenterRewardChangePush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TRewardCenterRewardChangePush)
}

void TRewardCenterRewardChangePush::InitAsDefaultInstance() {
}

TRewardCenterRewardChangePush::TRewardCenterRewardChangePush(const TRewardCenterRewardChangePush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TRewardCenterRewardChangePush)
}

void TRewardCenterRewardChangePush::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TRewardCenterRewardChangePush::~TRewardCenterRewardChangePush() {
  // @@protoc_insertion_point(destructor:pb.TRewardCenterRewardChangePush)
  SharedDtor();
}

void TRewardCenterRewardChangePush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TRewardCenterRewardChangePush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRewardCenterRewardChangePush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TRewardCenterRewardChangePush_descriptor_;
}

const TRewardCenterRewardChangePush& TRewardCenterRewardChangePush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fRewardCenter_2eproto();
  return *default_instance_;
}

TRewardCenterRewardChangePush* TRewardCenterRewardChangePush::default_instance_ = NULL;

TRewardCenterRewardChangePush* TRewardCenterRewardChangePush::New() const {
  return new TRewardCenterRewardChangePush;
}

void TRewardCenterRewardChangePush::Clear() {
  arrrewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TRewardCenterRewardChangePush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TRewardCenterRewardChangePush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRewardInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TRewardCenterRewardChangePush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TRewardCenterRewardChangePush)
  return false;
#undef DO_
}

void TRewardCenterRewardChangePush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TRewardCenterRewardChangePush)
  // repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TRewardCenterRewardChangePush)
}

::google::protobuf::uint8* TRewardCenterRewardChangePush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TRewardCenterRewardChangePush)
  // repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TRewardCenterRewardChangePush)
  return target;
}

int TRewardCenterRewardChangePush::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TRewardCenterRewardInfo ArrRewardInfo = 1;
  total_size += 1 * this->arrrewardinfo_size();
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRewardCenterRewardChangePush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TRewardCenterRewardChangePush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TRewardCenterRewardChangePush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TRewardCenterRewardChangePush::MergeFrom(const TRewardCenterRewardChangePush& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrewardinfo_.MergeFrom(from.arrrewardinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TRewardCenterRewardChangePush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRewardCenterRewardChangePush::CopyFrom(const TRewardCenterRewardChangePush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRewardCenterRewardChangePush::IsInitialized() const {

  return true;
}

void TRewardCenterRewardChangePush::Swap(TRewardCenterRewardChangePush* other) {
  if (other != this) {
    arrrewardinfo_.Swap(&other->arrrewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TRewardCenterRewardChangePush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TRewardCenterRewardChangePush_descriptor_;
  metadata.reflection = TRewardCenterRewardChangePush_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
