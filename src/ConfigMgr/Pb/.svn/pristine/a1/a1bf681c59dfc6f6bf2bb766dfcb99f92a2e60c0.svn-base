// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TreasureToken.proto

#ifndef PROTOBUF_net_2fTreasureToken_2eproto__INCLUDED
#define PROTOBUF_net_2fTreasureToken_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTreasureToken_2eproto();
void protobuf_AssignDesc_net_2fTreasureToken_2eproto();
void protobuf_ShutdownFile_net_2fTreasureToken_2eproto();

class TTreasureTokenSingle;
class TTreasureTokenGetInfoRsp;
class TTreasureTokenGetRewardReq;
class TTreasureTokenGetTotalRewardRsp;
class TTreasureTokenPush;
class TTreasureTokenGetGoldRewardReq;
class TTreasureTokenGetGoldRewardRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TTreasureTokenSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureToken.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureTokenSingle : public ::google::protobuf::Message {
 public:
  TTreasureTokenSingle();
  virtual ~TTreasureTokenSingle();

  TTreasureTokenSingle(const TTreasureTokenSingle& from);

  inline TTreasureTokenSingle& operator=(const TTreasureTokenSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureTokenSingle& default_instance();

  void Swap(TTreasureTokenSingle* other);

  // implements Message ----------------------------------------------

  TTreasureTokenSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureTokenSingle& from);
  void MergeFrom(const TTreasureTokenSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LevelId = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenSingle</name>
  	<Function>
  		<name>levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // optional uint64 GeneralReceiveTime = 2;
  inline bool has_generalreceivetime() const;
  inline void clear_generalreceivetime();
  static const int kGeneralReceiveTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenSingle</name>
  	<Function>
  		<name>generalreceivetime</name>
  		<replaceName>GeneralReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_generalreceivetime</name>
  		<replaceName>GeneralReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_generalreceivetime</name>
  		<replaceName>GeneralReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 generalreceivetime() const;
  inline void set_generalreceivetime(::google::protobuf::uint64 value);

  // optional uint64 HighOrderReceiveTime = 3;
  inline bool has_highorderreceivetime() const;
  inline void clear_highorderreceivetime();
  static const int kHighOrderReceiveTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenSingle</name>
  	<Function>
  		<name>highorderreceivetime</name>
  		<replaceName>HighOrderReceiveTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_highorderreceivetime</name>
  		<replaceName>HighOrderReceiveTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_highorderreceivetime</name>
  		<replaceName>HighOrderReceiveTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 highorderreceivetime() const;
  inline void set_highorderreceivetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTreasureTokenSingle)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_generalreceivetime();
  inline void clear_has_generalreceivetime();
  inline void set_has_highorderreceivetime();
  inline void clear_has_highorderreceivetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 generalreceivetime_;
  ::google::protobuf::uint64 highorderreceivetime_;
  ::google::protobuf::uint32 levelid_;
  friend void  protobuf_AddDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureToken_2eproto();

  void InitAsDefaultInstance();
  static TTreasureTokenSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureTokenGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureToken.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureTokenGetInfoRsp : public ::google::protobuf::Message {
 public:
  TTreasureTokenGetInfoRsp();
  virtual ~TTreasureTokenGetInfoRsp();

  TTreasureTokenGetInfoRsp(const TTreasureTokenGetInfoRsp& from);

  inline TTreasureTokenGetInfoRsp& operator=(const TTreasureTokenGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureTokenGetInfoRsp& default_instance();

  void Swap(TTreasureTokenGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TTreasureTokenGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureTokenGetInfoRsp& from);
  void MergeFrom(const TTreasureTokenGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ListId = 1;
  inline bool has_listid() const;
  inline void clear_listid();
  static const int kListIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetInfoRsp</name>
  	<Function>
  		<name>listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 listid() const;
  inline void set_listid(::google::protobuf::uint32 value);

  // optional uint64 OpenTime = 2;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpenTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetInfoRsp</name>
  	<Function>
  		<name>opentime</name>
  		<replaceName>OpenTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_opentime</name>
  		<replaceName>OpenTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_opentime</name>
  		<replaceName>OpenTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 opentime() const;
  inline void set_opentime(::google::protobuf::uint64 value);

  // optional uint64 EndTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetInfoRsp</name>
  	<Function>
  		<name>endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endtime</name>
  		<replaceName>EndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // optional uint64 PayTime = 4;
  inline bool has_paytime() const;
  inline void clear_paytime();
  static const int kPayTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetInfoRsp</name>
  	<Function>
  		<name>paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 paytime() const;
  inline void set_paytime(::google::protobuf::uint64 value);

  // repeated .pb.TTreasureTokenSingle TokenArr = 5;
  inline int tokenarr_size() const;
  inline void clear_tokenarr();
  static const int kTokenArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetInfoRsp</name>
  	<Function>
  		<name>tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tokenarr_size</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureTokenSingle& tokenarr(int index) const;
  inline ::pb::TTreasureTokenSingle* mutable_tokenarr(int index);
  inline ::pb::TTreasureTokenSingle* add_tokenarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >&
      tokenarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >*
      mutable_tokenarr();

  // optional bool IsOpen = 6;
  inline bool has_isopen() const;
  inline void clear_isopen();
  static const int kIsOpenFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetInfoRsp</name>
  	<Function>
  		<name>isopen</name>
  		<replaceName>IsOpen</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isopen</name>
  		<replaceName>IsOpen</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isopen</name>
  		<replaceName>IsOpen</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isopen() const;
  inline void set_isopen(bool value);

  // optional uint32 Scores = 7;
  inline bool has_scores() const;
  inline void clear_scores();
  static const int kScoresFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetInfoRsp</name>
  	<Function>
  		<name>scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scores</name>
  		<replaceName>Scores</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scores() const;
  inline void set_scores(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTreasureTokenGetInfoRsp)
 private:
  inline void set_has_listid();
  inline void clear_has_listid();
  inline void set_has_opentime();
  inline void clear_has_opentime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_paytime();
  inline void clear_has_paytime();
  inline void set_has_isopen();
  inline void clear_has_isopen();
  inline void set_has_scores();
  inline void clear_has_scores();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 opentime_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint32 listid_;
  bool isopen_;
  ::google::protobuf::uint64 paytime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle > tokenarr_;
  ::google::protobuf::uint32 scores_;
  friend void  protobuf_AddDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureToken_2eproto();

  void InitAsDefaultInstance();
  static TTreasureTokenGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureTokenGetRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureToken.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureTokenGetRewardReq : public ::google::protobuf::Message {
 public:
  TTreasureTokenGetRewardReq();
  virtual ~TTreasureTokenGetRewardReq();

  TTreasureTokenGetRewardReq(const TTreasureTokenGetRewardReq& from);

  inline TTreasureTokenGetRewardReq& operator=(const TTreasureTokenGetRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureTokenGetRewardReq& default_instance();

  void Swap(TTreasureTokenGetRewardReq* other);

  // implements Message ----------------------------------------------

  TTreasureTokenGetRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureTokenGetRewardReq& from);
  void MergeFrom(const TTreasureTokenGetRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ListId = 1;
  inline bool has_listid() const;
  inline void clear_listid();
  static const int kListIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetRewardReq</name>
  	<Function>
  		<name>listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_listid</name>
  		<replaceName>ListId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 listid() const;
  inline void set_listid(::google::protobuf::uint32 value);

  // optional uint32 LevelId = 2;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetRewardReq</name>
  	<Function>
  		<name>levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_levelid</name>
  		<replaceName>LevelId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // optional bool IsHighOrderRewarded = 3;
  inline bool has_ishighorderrewarded() const;
  inline void clear_ishighorderrewarded();
  static const int kIsHighOrderRewardedFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetRewardReq</name>
  	<Function>
  		<name>ishighorderrewarded</name>
  		<replaceName>IsHighOrderRewarded</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ishighorderrewarded</name>
  		<replaceName>IsHighOrderRewarded</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ishighorderrewarded</name>
  		<replaceName>IsHighOrderRewarded</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ishighorderrewarded() const;
  inline void set_ishighorderrewarded(bool value);

  // @@protoc_insertion_point(class_scope:pb.TTreasureTokenGetRewardReq)
 private:
  inline void set_has_listid();
  inline void clear_has_listid();
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_ishighorderrewarded();
  inline void clear_has_ishighorderrewarded();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 listid_;
  ::google::protobuf::uint32 levelid_;
  bool ishighorderrewarded_;
  friend void  protobuf_AddDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureToken_2eproto();

  void InitAsDefaultInstance();
  static TTreasureTokenGetRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureTokenGetTotalRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureToken.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureTokenGetTotalRewardRsp : public ::google::protobuf::Message {
 public:
  TTreasureTokenGetTotalRewardRsp();
  virtual ~TTreasureTokenGetTotalRewardRsp();

  TTreasureTokenGetTotalRewardRsp(const TTreasureTokenGetTotalRewardRsp& from);

  inline TTreasureTokenGetTotalRewardRsp& operator=(const TTreasureTokenGetTotalRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureTokenGetTotalRewardRsp& default_instance();

  void Swap(TTreasureTokenGetTotalRewardRsp* other);

  // implements Message ----------------------------------------------

  TTreasureTokenGetTotalRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureTokenGetTotalRewardRsp& from);
  void MergeFrom(const TTreasureTokenGetTotalRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTreasureTokenSingle TokenArr = 1;
  inline int tokenarr_size() const;
  inline void clear_tokenarr();
  static const int kTokenArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetTotalRewardRsp</name>
  	<Function>
  		<name>tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tokenarr_size</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureTokenSingle& tokenarr(int index) const;
  inline ::pb::TTreasureTokenSingle* mutable_tokenarr(int index);
  inline ::pb::TTreasureTokenSingle* add_tokenarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >&
      tokenarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >*
      mutable_tokenarr();

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetTotalRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TTreasureTokenGetTotalRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle > tokenarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureToken_2eproto();

  void InitAsDefaultInstance();
  static TTreasureTokenGetTotalRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureTokenPush</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureToken.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureTokenPush : public ::google::protobuf::Message {
 public:
  TTreasureTokenPush();
  virtual ~TTreasureTokenPush();

  TTreasureTokenPush(const TTreasureTokenPush& from);

  inline TTreasureTokenPush& operator=(const TTreasureTokenPush& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureTokenPush& default_instance();

  void Swap(TTreasureTokenPush* other);

  // implements Message ----------------------------------------------

  TTreasureTokenPush* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureTokenPush& from);
  void MergeFrom(const TTreasureTokenPush& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 PayTime = 1;
  inline bool has_paytime() const;
  inline void clear_paytime();
  static const int kPayTimeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenPush</name>
  	<Function>
  		<name>paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paytime</name>
  		<replaceName>PayTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 paytime() const;
  inline void set_paytime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTreasureTokenPush)
 private:
  inline void set_has_paytime();
  inline void clear_has_paytime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 paytime_;
  friend void  protobuf_AddDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureToken_2eproto();

  void InitAsDefaultInstance();
  static TTreasureTokenPush* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureTokenGetGoldRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureToken.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureTokenGetGoldRewardReq : public ::google::protobuf::Message {
 public:
  TTreasureTokenGetGoldRewardReq();
  virtual ~TTreasureTokenGetGoldRewardReq();

  TTreasureTokenGetGoldRewardReq(const TTreasureTokenGetGoldRewardReq& from);

  inline TTreasureTokenGetGoldRewardReq& operator=(const TTreasureTokenGetGoldRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureTokenGetGoldRewardReq& default_instance();

  void Swap(TTreasureTokenGetGoldRewardReq* other);

  // implements Message ----------------------------------------------

  TTreasureTokenGetGoldRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureTokenGetGoldRewardReq& from);
  void MergeFrom(const TTreasureTokenGetGoldRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 NeedGoldNum = 1;
  inline bool has_needgoldnum() const;
  inline void clear_needgoldnum();
  static const int kNeedGoldNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetGoldRewardReq</name>
  	<Function>
  		<name>needgoldnum</name>
  		<replaceName>NeedGoldNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_needgoldnum</name>
  		<replaceName>NeedGoldNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_needgoldnum</name>
  		<replaceName>NeedGoldNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 needgoldnum() const;
  inline void set_needgoldnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTreasureTokenGetGoldRewardReq)
 private:
  inline void set_has_needgoldnum();
  inline void clear_has_needgoldnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 needgoldnum_;
  friend void  protobuf_AddDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureToken_2eproto();

  void InitAsDefaultInstance();
  static TTreasureTokenGetGoldRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTreasureTokenGetGoldRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TreasureToken.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTreasureTokenGetGoldRewardRsp : public ::google::protobuf::Message {
 public:
  TTreasureTokenGetGoldRewardRsp();
  virtual ~TTreasureTokenGetGoldRewardRsp();

  TTreasureTokenGetGoldRewardRsp(const TTreasureTokenGetGoldRewardRsp& from);

  inline TTreasureTokenGetGoldRewardRsp& operator=(const TTreasureTokenGetGoldRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTreasureTokenGetGoldRewardRsp& default_instance();

  void Swap(TTreasureTokenGetGoldRewardRsp* other);

  // implements Message ----------------------------------------------

  TTreasureTokenGetGoldRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTreasureTokenGetGoldRewardRsp& from);
  void MergeFrom(const TTreasureTokenGetGoldRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTreasureTokenSingle TokenArr = 1;
  inline int tokenarr_size() const;
  inline void clear_tokenarr();
  static const int kTokenArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetGoldRewardRsp</name>
  	<Function>
  		<name>tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tokenarr</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>tokenarr_size</name>
  		<replaceName>TokenArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTreasureTokenSingle& tokenarr(int index) const;
  inline ::pb::TTreasureTokenSingle* mutable_tokenarr(int index);
  inline ::pb::TTreasureTokenSingle* add_tokenarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >&
      tokenarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >*
      mutable_tokenarr();

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTreasureTokenGetGoldRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TTreasureTokenGetGoldRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle > tokenarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_AssignDesc_net_2fTreasureToken_2eproto();
  friend void protobuf_ShutdownFile_net_2fTreasureToken_2eproto();

  void InitAsDefaultInstance();
  static TTreasureTokenGetGoldRewardRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TTreasureTokenSingle

// optional uint32 LevelId = 1;
inline bool TTreasureTokenSingle::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureTokenSingle::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureTokenSingle::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureTokenSingle::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 TTreasureTokenSingle::levelid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenSingle.LevelId)
  return levelid_;
}
inline void TTreasureTokenSingle::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenSingle.LevelId)
}

// optional uint64 GeneralReceiveTime = 2;
inline bool TTreasureTokenSingle::has_generalreceivetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTreasureTokenSingle::set_has_generalreceivetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTreasureTokenSingle::clear_has_generalreceivetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTreasureTokenSingle::clear_generalreceivetime() {
  generalreceivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_generalreceivetime();
}
inline ::google::protobuf::uint64 TTreasureTokenSingle::generalreceivetime() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenSingle.GeneralReceiveTime)
  return generalreceivetime_;
}
inline void TTreasureTokenSingle::set_generalreceivetime(::google::protobuf::uint64 value) {
  set_has_generalreceivetime();
  generalreceivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenSingle.GeneralReceiveTime)
}

// optional uint64 HighOrderReceiveTime = 3;
inline bool TTreasureTokenSingle::has_highorderreceivetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTreasureTokenSingle::set_has_highorderreceivetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTreasureTokenSingle::clear_has_highorderreceivetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTreasureTokenSingle::clear_highorderreceivetime() {
  highorderreceivetime_ = GOOGLE_ULONGLONG(0);
  clear_has_highorderreceivetime();
}
inline ::google::protobuf::uint64 TTreasureTokenSingle::highorderreceivetime() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenSingle.HighOrderReceiveTime)
  return highorderreceivetime_;
}
inline void TTreasureTokenSingle::set_highorderreceivetime(::google::protobuf::uint64 value) {
  set_has_highorderreceivetime();
  highorderreceivetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenSingle.HighOrderReceiveTime)
}

// -------------------------------------------------------------------

// TTreasureTokenGetInfoRsp

// optional uint32 ListId = 1;
inline bool TTreasureTokenGetInfoRsp::has_listid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureTokenGetInfoRsp::set_has_listid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureTokenGetInfoRsp::clear_has_listid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureTokenGetInfoRsp::clear_listid() {
  listid_ = 0u;
  clear_has_listid();
}
inline ::google::protobuf::uint32 TTreasureTokenGetInfoRsp::listid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetInfoRsp.ListId)
  return listid_;
}
inline void TTreasureTokenGetInfoRsp::set_listid(::google::protobuf::uint32 value) {
  set_has_listid();
  listid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenGetInfoRsp.ListId)
}

// optional uint64 OpenTime = 2;
inline bool TTreasureTokenGetInfoRsp::has_opentime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTreasureTokenGetInfoRsp::set_has_opentime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTreasureTokenGetInfoRsp::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTreasureTokenGetInfoRsp::clear_opentime() {
  opentime_ = GOOGLE_ULONGLONG(0);
  clear_has_opentime();
}
inline ::google::protobuf::uint64 TTreasureTokenGetInfoRsp::opentime() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetInfoRsp.OpenTime)
  return opentime_;
}
inline void TTreasureTokenGetInfoRsp::set_opentime(::google::protobuf::uint64 value) {
  set_has_opentime();
  opentime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenGetInfoRsp.OpenTime)
}

// optional uint64 EndTime = 3;
inline bool TTreasureTokenGetInfoRsp::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTreasureTokenGetInfoRsp::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTreasureTokenGetInfoRsp::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTreasureTokenGetInfoRsp::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 TTreasureTokenGetInfoRsp::endtime() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetInfoRsp.EndTime)
  return endtime_;
}
inline void TTreasureTokenGetInfoRsp::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenGetInfoRsp.EndTime)
}

// optional uint64 PayTime = 4;
inline bool TTreasureTokenGetInfoRsp::has_paytime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTreasureTokenGetInfoRsp::set_has_paytime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTreasureTokenGetInfoRsp::clear_has_paytime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTreasureTokenGetInfoRsp::clear_paytime() {
  paytime_ = GOOGLE_ULONGLONG(0);
  clear_has_paytime();
}
inline ::google::protobuf::uint64 TTreasureTokenGetInfoRsp::paytime() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetInfoRsp.PayTime)
  return paytime_;
}
inline void TTreasureTokenGetInfoRsp::set_paytime(::google::protobuf::uint64 value) {
  set_has_paytime();
  paytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenGetInfoRsp.PayTime)
}

// repeated .pb.TTreasureTokenSingle TokenArr = 5;
inline int TTreasureTokenGetInfoRsp::tokenarr_size() const {
  return tokenarr_.size();
}
inline void TTreasureTokenGetInfoRsp::clear_tokenarr() {
  tokenarr_.Clear();
}
inline const ::pb::TTreasureTokenSingle& TTreasureTokenGetInfoRsp::tokenarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetInfoRsp.TokenArr)
  return tokenarr_.Get(index);
}
inline ::pb::TTreasureTokenSingle* TTreasureTokenGetInfoRsp::mutable_tokenarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureTokenGetInfoRsp.TokenArr)
  return tokenarr_.Mutable(index);
}
inline ::pb::TTreasureTokenSingle* TTreasureTokenGetInfoRsp::add_tokenarr() {
  // @@protoc_insertion_point(field_add:pb.TTreasureTokenGetInfoRsp.TokenArr)
  return tokenarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >&
TTreasureTokenGetInfoRsp::tokenarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureTokenGetInfoRsp.TokenArr)
  return tokenarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >*
TTreasureTokenGetInfoRsp::mutable_tokenarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureTokenGetInfoRsp.TokenArr)
  return &tokenarr_;
}

// optional bool IsOpen = 6;
inline bool TTreasureTokenGetInfoRsp::has_isopen() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TTreasureTokenGetInfoRsp::set_has_isopen() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TTreasureTokenGetInfoRsp::clear_has_isopen() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TTreasureTokenGetInfoRsp::clear_isopen() {
  isopen_ = false;
  clear_has_isopen();
}
inline bool TTreasureTokenGetInfoRsp::isopen() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetInfoRsp.IsOpen)
  return isopen_;
}
inline void TTreasureTokenGetInfoRsp::set_isopen(bool value) {
  set_has_isopen();
  isopen_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenGetInfoRsp.IsOpen)
}

// optional uint32 Scores = 7;
inline bool TTreasureTokenGetInfoRsp::has_scores() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TTreasureTokenGetInfoRsp::set_has_scores() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TTreasureTokenGetInfoRsp::clear_has_scores() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TTreasureTokenGetInfoRsp::clear_scores() {
  scores_ = 0u;
  clear_has_scores();
}
inline ::google::protobuf::uint32 TTreasureTokenGetInfoRsp::scores() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetInfoRsp.Scores)
  return scores_;
}
inline void TTreasureTokenGetInfoRsp::set_scores(::google::protobuf::uint32 value) {
  set_has_scores();
  scores_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenGetInfoRsp.Scores)
}

// -------------------------------------------------------------------

// TTreasureTokenGetRewardReq

// optional uint32 ListId = 1;
inline bool TTreasureTokenGetRewardReq::has_listid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureTokenGetRewardReq::set_has_listid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureTokenGetRewardReq::clear_has_listid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureTokenGetRewardReq::clear_listid() {
  listid_ = 0u;
  clear_has_listid();
}
inline ::google::protobuf::uint32 TTreasureTokenGetRewardReq::listid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetRewardReq.ListId)
  return listid_;
}
inline void TTreasureTokenGetRewardReq::set_listid(::google::protobuf::uint32 value) {
  set_has_listid();
  listid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenGetRewardReq.ListId)
}

// optional uint32 LevelId = 2;
inline bool TTreasureTokenGetRewardReq::has_levelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTreasureTokenGetRewardReq::set_has_levelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTreasureTokenGetRewardReq::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTreasureTokenGetRewardReq::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 TTreasureTokenGetRewardReq::levelid() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetRewardReq.LevelId)
  return levelid_;
}
inline void TTreasureTokenGetRewardReq::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenGetRewardReq.LevelId)
}

// optional bool IsHighOrderRewarded = 3;
inline bool TTreasureTokenGetRewardReq::has_ishighorderrewarded() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTreasureTokenGetRewardReq::set_has_ishighorderrewarded() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTreasureTokenGetRewardReq::clear_has_ishighorderrewarded() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTreasureTokenGetRewardReq::clear_ishighorderrewarded() {
  ishighorderrewarded_ = false;
  clear_has_ishighorderrewarded();
}
inline bool TTreasureTokenGetRewardReq::ishighorderrewarded() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetRewardReq.IsHighOrderRewarded)
  return ishighorderrewarded_;
}
inline void TTreasureTokenGetRewardReq::set_ishighorderrewarded(bool value) {
  set_has_ishighorderrewarded();
  ishighorderrewarded_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenGetRewardReq.IsHighOrderRewarded)
}

// -------------------------------------------------------------------

// TTreasureTokenGetTotalRewardRsp

// repeated .pb.TTreasureTokenSingle TokenArr = 1;
inline int TTreasureTokenGetTotalRewardRsp::tokenarr_size() const {
  return tokenarr_.size();
}
inline void TTreasureTokenGetTotalRewardRsp::clear_tokenarr() {
  tokenarr_.Clear();
}
inline const ::pb::TTreasureTokenSingle& TTreasureTokenGetTotalRewardRsp::tokenarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetTotalRewardRsp.TokenArr)
  return tokenarr_.Get(index);
}
inline ::pb::TTreasureTokenSingle* TTreasureTokenGetTotalRewardRsp::mutable_tokenarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureTokenGetTotalRewardRsp.TokenArr)
  return tokenarr_.Mutable(index);
}
inline ::pb::TTreasureTokenSingle* TTreasureTokenGetTotalRewardRsp::add_tokenarr() {
  // @@protoc_insertion_point(field_add:pb.TTreasureTokenGetTotalRewardRsp.TokenArr)
  return tokenarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >&
TTreasureTokenGetTotalRewardRsp::tokenarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureTokenGetTotalRewardRsp.TokenArr)
  return tokenarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >*
TTreasureTokenGetTotalRewardRsp::mutable_tokenarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureTokenGetTotalRewardRsp.TokenArr)
  return &tokenarr_;
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TTreasureTokenGetTotalRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TTreasureTokenGetTotalRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TTreasureTokenGetTotalRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetTotalRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TTreasureTokenGetTotalRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureTokenGetTotalRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TTreasureTokenGetTotalRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TTreasureTokenGetTotalRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTreasureTokenGetTotalRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureTokenGetTotalRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTreasureTokenGetTotalRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureTokenGetTotalRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TTreasureTokenPush

// optional uint64 PayTime = 1;
inline bool TTreasureTokenPush::has_paytime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureTokenPush::set_has_paytime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureTokenPush::clear_has_paytime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureTokenPush::clear_paytime() {
  paytime_ = GOOGLE_ULONGLONG(0);
  clear_has_paytime();
}
inline ::google::protobuf::uint64 TTreasureTokenPush::paytime() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenPush.PayTime)
  return paytime_;
}
inline void TTreasureTokenPush::set_paytime(::google::protobuf::uint64 value) {
  set_has_paytime();
  paytime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenPush.PayTime)
}

// -------------------------------------------------------------------

// TTreasureTokenGetGoldRewardReq

// optional uint32 NeedGoldNum = 1;
inline bool TTreasureTokenGetGoldRewardReq::has_needgoldnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTreasureTokenGetGoldRewardReq::set_has_needgoldnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTreasureTokenGetGoldRewardReq::clear_has_needgoldnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTreasureTokenGetGoldRewardReq::clear_needgoldnum() {
  needgoldnum_ = 0u;
  clear_has_needgoldnum();
}
inline ::google::protobuf::uint32 TTreasureTokenGetGoldRewardReq::needgoldnum() const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetGoldRewardReq.NeedGoldNum)
  return needgoldnum_;
}
inline void TTreasureTokenGetGoldRewardReq::set_needgoldnum(::google::protobuf::uint32 value) {
  set_has_needgoldnum();
  needgoldnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTreasureTokenGetGoldRewardReq.NeedGoldNum)
}

// -------------------------------------------------------------------

// TTreasureTokenGetGoldRewardRsp

// repeated .pb.TTreasureTokenSingle TokenArr = 1;
inline int TTreasureTokenGetGoldRewardRsp::tokenarr_size() const {
  return tokenarr_.size();
}
inline void TTreasureTokenGetGoldRewardRsp::clear_tokenarr() {
  tokenarr_.Clear();
}
inline const ::pb::TTreasureTokenSingle& TTreasureTokenGetGoldRewardRsp::tokenarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetGoldRewardRsp.TokenArr)
  return tokenarr_.Get(index);
}
inline ::pb::TTreasureTokenSingle* TTreasureTokenGetGoldRewardRsp::mutable_tokenarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureTokenGetGoldRewardRsp.TokenArr)
  return tokenarr_.Mutable(index);
}
inline ::pb::TTreasureTokenSingle* TTreasureTokenGetGoldRewardRsp::add_tokenarr() {
  // @@protoc_insertion_point(field_add:pb.TTreasureTokenGetGoldRewardRsp.TokenArr)
  return tokenarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >&
TTreasureTokenGetGoldRewardRsp::tokenarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureTokenGetGoldRewardRsp.TokenArr)
  return tokenarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTreasureTokenSingle >*
TTreasureTokenGetGoldRewardRsp::mutable_tokenarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureTokenGetGoldRewardRsp.TokenArr)
  return &tokenarr_;
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TTreasureTokenGetGoldRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TTreasureTokenGetGoldRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TTreasureTokenGetGoldRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTreasureTokenGetGoldRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TTreasureTokenGetGoldRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTreasureTokenGetGoldRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TTreasureTokenGetGoldRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TTreasureTokenGetGoldRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTreasureTokenGetGoldRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TTreasureTokenGetGoldRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTreasureTokenGetGoldRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTreasureTokenGetGoldRewardRsp.RewardArr)
  return &rewardarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTreasureToken_2eproto__INCLUDED
