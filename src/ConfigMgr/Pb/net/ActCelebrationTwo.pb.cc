// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActCelebrationTwo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActCelebrationTwo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActCelebrationTwoBuyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationTwoBuyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationTwoTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationTwoTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationTwoGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationTwoGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationTwoBuyGoodsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationTwoBuyGoodsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationTwoBuyGoodsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationTwoBuyGoodsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationTwoGetTaskRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationTwoGetTaskRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationTwoGetTaskRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationTwoGetTaskRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationTwoExchangeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationTwoExchangeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationTwoExchangeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationTwoExchangeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActCelebrationTwoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActCelebrationTwoNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto() {
  protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActCelebrationTwo.proto");
  GOOGLE_CHECK(file != NULL);
  TActCelebrationTwoBuyInfo_descriptor_ = file->message_type(0);
  static const int TActCelebrationTwoBuyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyInfo, buytime_),
  };
  TActCelebrationTwoBuyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationTwoBuyInfo_descriptor_,
      TActCelebrationTwoBuyInfo::default_instance_,
      TActCelebrationTwoBuyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationTwoBuyInfo));
  TActCelebrationTwoTaskInfo_descriptor_ = file->message_type(1);
  static const int TActCelebrationTwoTaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoTaskInfo, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoTaskInfo, num_),
  };
  TActCelebrationTwoTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationTwoTaskInfo_descriptor_,
      TActCelebrationTwoTaskInfo::default_instance_,
      TActCelebrationTwoTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationTwoTaskInfo));
  TActCelebrationTwoGetInfoRsp_descriptor_ = file->message_type(2);
  static const int TActCelebrationTwoGetInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetInfoRsp, arrrmbgoodbuyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetInfoRsp, arrgoodbuyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetInfoRsp, arrtaskrewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetInfoRsp, arrexchangedinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetInfoRsp, arrtaskinfo_),
  };
  TActCelebrationTwoGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationTwoGetInfoRsp_descriptor_,
      TActCelebrationTwoGetInfoRsp::default_instance_,
      TActCelebrationTwoGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationTwoGetInfoRsp));
  TActCelebrationTwoBuyGoodsReq_descriptor_ = file->message_type(3);
  static const int TActCelebrationTwoBuyGoodsReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyGoodsReq, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyGoodsReq, num_),
  };
  TActCelebrationTwoBuyGoodsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationTwoBuyGoodsReq_descriptor_,
      TActCelebrationTwoBuyGoodsReq::default_instance_,
      TActCelebrationTwoBuyGoodsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyGoodsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyGoodsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationTwoBuyGoodsReq));
  TActCelebrationTwoBuyGoodsRsp_descriptor_ = file->message_type(4);
  static const int TActCelebrationTwoBuyGoodsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyGoodsRsp, arrreward_),
  };
  TActCelebrationTwoBuyGoodsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationTwoBuyGoodsRsp_descriptor_,
      TActCelebrationTwoBuyGoodsRsp::default_instance_,
      TActCelebrationTwoBuyGoodsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyGoodsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoBuyGoodsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationTwoBuyGoodsRsp));
  TActCelebrationTwoGetTaskRewardReq_descriptor_ = file->message_type(5);
  static const int TActCelebrationTwoGetTaskRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetTaskRewardReq, taskid_),
  };
  TActCelebrationTwoGetTaskRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationTwoGetTaskRewardReq_descriptor_,
      TActCelebrationTwoGetTaskRewardReq::default_instance_,
      TActCelebrationTwoGetTaskRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetTaskRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetTaskRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationTwoGetTaskRewardReq));
  TActCelebrationTwoGetTaskRewardRsp_descriptor_ = file->message_type(6);
  static const int TActCelebrationTwoGetTaskRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetTaskRewardRsp, arrreward_),
  };
  TActCelebrationTwoGetTaskRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationTwoGetTaskRewardRsp_descriptor_,
      TActCelebrationTwoGetTaskRewardRsp::default_instance_,
      TActCelebrationTwoGetTaskRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetTaskRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoGetTaskRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationTwoGetTaskRewardRsp));
  TActCelebrationTwoExchangeReq_descriptor_ = file->message_type(7);
  static const int TActCelebrationTwoExchangeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoExchangeReq, exchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoExchangeReq, num_),
  };
  TActCelebrationTwoExchangeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationTwoExchangeReq_descriptor_,
      TActCelebrationTwoExchangeReq::default_instance_,
      TActCelebrationTwoExchangeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoExchangeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoExchangeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationTwoExchangeReq));
  TActCelebrationTwoExchangeRsp_descriptor_ = file->message_type(8);
  static const int TActCelebrationTwoExchangeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoExchangeRsp, arrreward_),
  };
  TActCelebrationTwoExchangeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationTwoExchangeRsp_descriptor_,
      TActCelebrationTwoExchangeRsp::default_instance_,
      TActCelebrationTwoExchangeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoExchangeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoExchangeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationTwoExchangeRsp));
  TActCelebrationTwoNotify_descriptor_ = file->message_type(9);
  static const int TActCelebrationTwoNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoNotify, arrrmbgoodbuyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoNotify, arrtaskinfo_),
  };
  TActCelebrationTwoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActCelebrationTwoNotify_descriptor_,
      TActCelebrationTwoNotify::default_instance_,
      TActCelebrationTwoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActCelebrationTwoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActCelebrationTwoNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActCelebrationTwo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationTwoBuyInfo_descriptor_, &TActCelebrationTwoBuyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationTwoTaskInfo_descriptor_, &TActCelebrationTwoTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationTwoGetInfoRsp_descriptor_, &TActCelebrationTwoGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationTwoBuyGoodsReq_descriptor_, &TActCelebrationTwoBuyGoodsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationTwoBuyGoodsRsp_descriptor_, &TActCelebrationTwoBuyGoodsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationTwoGetTaskRewardReq_descriptor_, &TActCelebrationTwoGetTaskRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationTwoGetTaskRewardRsp_descriptor_, &TActCelebrationTwoGetTaskRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationTwoExchangeReq_descriptor_, &TActCelebrationTwoExchangeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationTwoExchangeRsp_descriptor_, &TActCelebrationTwoExchangeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActCelebrationTwoNotify_descriptor_, &TActCelebrationTwoNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto() {
  delete TActCelebrationTwoBuyInfo::default_instance_;
  delete TActCelebrationTwoBuyInfo_reflection_;
  delete TActCelebrationTwoTaskInfo::default_instance_;
  delete TActCelebrationTwoTaskInfo_reflection_;
  delete TActCelebrationTwoGetInfoRsp::default_instance_;
  delete TActCelebrationTwoGetInfoRsp_reflection_;
  delete TActCelebrationTwoBuyGoodsReq::default_instance_;
  delete TActCelebrationTwoBuyGoodsReq_reflection_;
  delete TActCelebrationTwoBuyGoodsRsp::default_instance_;
  delete TActCelebrationTwoBuyGoodsRsp_reflection_;
  delete TActCelebrationTwoGetTaskRewardReq::default_instance_;
  delete TActCelebrationTwoGetTaskRewardReq_reflection_;
  delete TActCelebrationTwoGetTaskRewardRsp::default_instance_;
  delete TActCelebrationTwoGetTaskRewardRsp_reflection_;
  delete TActCelebrationTwoExchangeReq::default_instance_;
  delete TActCelebrationTwoExchangeReq_reflection_;
  delete TActCelebrationTwoExchangeRsp::default_instance_;
  delete TActCelebrationTwoExchangeRsp_reflection_;
  delete TActCelebrationTwoNotify::default_instance_;
  delete TActCelebrationTwoNotify_reflection_;
}

void protobuf_AddDesc_net_2fActCelebrationTwo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fOpenActivity_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033net/ActCelebrationTwo.proto\022\002pb\032\026net/C"
    "ommonReward.proto\032\026net/OpenActivity.prot"
    "o\"E\n\031TActCelebrationTwoBuyInfo\022\n\n\002Id\030\001 \001"
    "(\r\022\013\n\003Num\030\002 \001(\r\022\017\n\007BuyTime\030\003 \001(\004\";\n\032TAct"
    "CelebrationTwoTaskInfo\022\020\n\010TaskType\030\001 \001(\r"
    "\022\013\n\003Num\030\002 \001(\r\"\261\002\n\034TActCelebrationTwoGetI"
    "nfoRsp\0228\n\021ArrRmbGoodBuyInfo\030\001 \003(\0132\035.pb.T"
    "ActCelebrationTwoBuyInfo\0225\n\016ArrGoodBuyIn"
    "fo\030\002 \003(\0132\035.pb.TActCelebrationTwoBuyInfo\022"
    "2\n\021ArrTaskRewardInfo\030\003 \003(\0132\027.pb.TActivit"
    "yRewardInfo\0227\n\020ArrExchangedInfo\030\004 \003(\0132\035."
    "pb.TActCelebrationTwoBuyInfo\0223\n\013ArrTaskI"
    "nfo\030\005 \003(\0132\036.pb.TActCelebrationTwoTaskInf"
    "o\"<\n\035TActCelebrationTwoBuyGoodsReq\022\016\n\006Go"
    "odId\030\001 \001(\r\022\013\n\003Num\030\002 \001(\r\"E\n\035TActCelebrati"
    "onTwoBuyGoodsRsp\022$\n\tArrReward\030\001 \003(\0132\021.pb"
    ".TCommonReward\"4\n\"TActCelebrationTwoGetT"
    "askRewardReq\022\016\n\006TaskId\030\001 \001(\r\"J\n\"TActCele"
    "brationTwoGetTaskRewardRsp\022$\n\tArrReward\030"
    "\001 \003(\0132\021.pb.TCommonReward\"@\n\035TActCelebrat"
    "ionTwoExchangeReq\022\022\n\nExchangeId\030\001 \001(\r\022\013\n"
    "\003Num\030\002 \001(\r\"E\n\035TActCelebrationTwoExchange"
    "Rsp\022$\n\tArrReward\030\001 \003(\0132\021.pb.TCommonRewar"
    "d\"\211\001\n\030TActCelebrationTwoNotify\0228\n\021ArrRmb"
    "GoodBuyInfo\030\001 \003(\0132\035.pb.TActCelebrationTw"
    "oBuyInfo\0223\n\013ArrTaskInfo\030\002 \003(\0132\036.pb.TActC"
    "elebrationTwoTaskInfo", 1061);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActCelebrationTwo.proto", &protobuf_RegisterTypes);
  TActCelebrationTwoBuyInfo::default_instance_ = new TActCelebrationTwoBuyInfo();
  TActCelebrationTwoTaskInfo::default_instance_ = new TActCelebrationTwoTaskInfo();
  TActCelebrationTwoGetInfoRsp::default_instance_ = new TActCelebrationTwoGetInfoRsp();
  TActCelebrationTwoBuyGoodsReq::default_instance_ = new TActCelebrationTwoBuyGoodsReq();
  TActCelebrationTwoBuyGoodsRsp::default_instance_ = new TActCelebrationTwoBuyGoodsRsp();
  TActCelebrationTwoGetTaskRewardReq::default_instance_ = new TActCelebrationTwoGetTaskRewardReq();
  TActCelebrationTwoGetTaskRewardRsp::default_instance_ = new TActCelebrationTwoGetTaskRewardRsp();
  TActCelebrationTwoExchangeReq::default_instance_ = new TActCelebrationTwoExchangeReq();
  TActCelebrationTwoExchangeRsp::default_instance_ = new TActCelebrationTwoExchangeRsp();
  TActCelebrationTwoNotify::default_instance_ = new TActCelebrationTwoNotify();
  TActCelebrationTwoBuyInfo::default_instance_->InitAsDefaultInstance();
  TActCelebrationTwoTaskInfo::default_instance_->InitAsDefaultInstance();
  TActCelebrationTwoGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActCelebrationTwoBuyGoodsReq::default_instance_->InitAsDefaultInstance();
  TActCelebrationTwoBuyGoodsRsp::default_instance_->InitAsDefaultInstance();
  TActCelebrationTwoGetTaskRewardReq::default_instance_->InitAsDefaultInstance();
  TActCelebrationTwoGetTaskRewardRsp::default_instance_->InitAsDefaultInstance();
  TActCelebrationTwoExchangeReq::default_instance_->InitAsDefaultInstance();
  TActCelebrationTwoExchangeRsp::default_instance_->InitAsDefaultInstance();
  TActCelebrationTwoNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActCelebrationTwo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActCelebrationTwo_2eproto {
  StaticDescriptorInitializer_net_2fActCelebrationTwo_2eproto() {
    protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  }
} static_descriptor_initializer_net_2fActCelebrationTwo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationTwoBuyInfo::kIdFieldNumber;
const int TActCelebrationTwoBuyInfo::kNumFieldNumber;
const int TActCelebrationTwoBuyInfo::kBuyTimeFieldNumber;
#endif  // !_MSC_VER

TActCelebrationTwoBuyInfo::TActCelebrationTwoBuyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationTwoBuyInfo)
}

void TActCelebrationTwoBuyInfo::InitAsDefaultInstance() {
}

TActCelebrationTwoBuyInfo::TActCelebrationTwoBuyInfo(const TActCelebrationTwoBuyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationTwoBuyInfo)
}

void TActCelebrationTwoBuyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  buytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationTwoBuyInfo::~TActCelebrationTwoBuyInfo() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationTwoBuyInfo)
  SharedDtor();
}

void TActCelebrationTwoBuyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationTwoBuyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationTwoBuyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationTwoBuyInfo_descriptor_;
}

const TActCelebrationTwoBuyInfo& TActCelebrationTwoBuyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  return *default_instance_;
}

TActCelebrationTwoBuyInfo* TActCelebrationTwoBuyInfo::default_instance_ = NULL;

TActCelebrationTwoBuyInfo* TActCelebrationTwoBuyInfo::New() const {
  return new TActCelebrationTwoBuyInfo;
}

void TActCelebrationTwoBuyInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActCelebrationTwoBuyInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, buytime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationTwoBuyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationTwoBuyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BuyTime;
        break;
      }

      // optional uint64 BuyTime = 3;
      case 3: {
        if (tag == 24) {
         parse_BuyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationTwoBuyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationTwoBuyInfo)
  return false;
#undef DO_
}

void TActCelebrationTwoBuyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationTwoBuyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint64 BuyTime = 3;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->buytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationTwoBuyInfo)
}

::google::protobuf::uint8* TActCelebrationTwoBuyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationTwoBuyInfo)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint64 BuyTime = 3;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->buytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationTwoBuyInfo)
  return target;
}

int TActCelebrationTwoBuyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint64 BuyTime = 3;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationTwoBuyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationTwoBuyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationTwoBuyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationTwoBuyInfo::MergeFrom(const TActCelebrationTwoBuyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationTwoBuyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationTwoBuyInfo::CopyFrom(const TActCelebrationTwoBuyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationTwoBuyInfo::IsInitialized() const {

  return true;
}

void TActCelebrationTwoBuyInfo::Swap(TActCelebrationTwoBuyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(buytime_, other->buytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationTwoBuyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationTwoBuyInfo_descriptor_;
  metadata.reflection = TActCelebrationTwoBuyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationTwoTaskInfo::kTaskTypeFieldNumber;
const int TActCelebrationTwoTaskInfo::kNumFieldNumber;
#endif  // !_MSC_VER

TActCelebrationTwoTaskInfo::TActCelebrationTwoTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationTwoTaskInfo)
}

void TActCelebrationTwoTaskInfo::InitAsDefaultInstance() {
}

TActCelebrationTwoTaskInfo::TActCelebrationTwoTaskInfo(const TActCelebrationTwoTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationTwoTaskInfo)
}

void TActCelebrationTwoTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationTwoTaskInfo::~TActCelebrationTwoTaskInfo() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationTwoTaskInfo)
  SharedDtor();
}

void TActCelebrationTwoTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationTwoTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationTwoTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationTwoTaskInfo_descriptor_;
}

const TActCelebrationTwoTaskInfo& TActCelebrationTwoTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  return *default_instance_;
}

TActCelebrationTwoTaskInfo* TActCelebrationTwoTaskInfo::default_instance_ = NULL;

TActCelebrationTwoTaskInfo* TActCelebrationTwoTaskInfo::New() const {
  return new TActCelebrationTwoTaskInfo;
}

void TActCelebrationTwoTaskInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActCelebrationTwoTaskInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tasktype_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationTwoTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationTwoTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationTwoTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationTwoTaskInfo)
  return false;
#undef DO_
}

void TActCelebrationTwoTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationTwoTaskInfo)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tasktype(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationTwoTaskInfo)
}

::google::protobuf::uint8* TActCelebrationTwoTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationTwoTaskInfo)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tasktype(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationTwoTaskInfo)
  return target;
}

int TActCelebrationTwoTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskType = 1;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationTwoTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationTwoTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationTwoTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationTwoTaskInfo::MergeFrom(const TActCelebrationTwoTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationTwoTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationTwoTaskInfo::CopyFrom(const TActCelebrationTwoTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationTwoTaskInfo::IsInitialized() const {

  return true;
}

void TActCelebrationTwoTaskInfo::Swap(TActCelebrationTwoTaskInfo* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationTwoTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationTwoTaskInfo_descriptor_;
  metadata.reflection = TActCelebrationTwoTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationTwoGetInfoRsp::kArrRmbGoodBuyInfoFieldNumber;
const int TActCelebrationTwoGetInfoRsp::kArrGoodBuyInfoFieldNumber;
const int TActCelebrationTwoGetInfoRsp::kArrTaskRewardInfoFieldNumber;
const int TActCelebrationTwoGetInfoRsp::kArrExchangedInfoFieldNumber;
const int TActCelebrationTwoGetInfoRsp::kArrTaskInfoFieldNumber;
#endif  // !_MSC_VER

TActCelebrationTwoGetInfoRsp::TActCelebrationTwoGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationTwoGetInfoRsp)
}

void TActCelebrationTwoGetInfoRsp::InitAsDefaultInstance() {
}

TActCelebrationTwoGetInfoRsp::TActCelebrationTwoGetInfoRsp(const TActCelebrationTwoGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationTwoGetInfoRsp)
}

void TActCelebrationTwoGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationTwoGetInfoRsp::~TActCelebrationTwoGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationTwoGetInfoRsp)
  SharedDtor();
}

void TActCelebrationTwoGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationTwoGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationTwoGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationTwoGetInfoRsp_descriptor_;
}

const TActCelebrationTwoGetInfoRsp& TActCelebrationTwoGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  return *default_instance_;
}

TActCelebrationTwoGetInfoRsp* TActCelebrationTwoGetInfoRsp::default_instance_ = NULL;

TActCelebrationTwoGetInfoRsp* TActCelebrationTwoGetInfoRsp::New() const {
  return new TActCelebrationTwoGetInfoRsp;
}

void TActCelebrationTwoGetInfoRsp::Clear() {
  arrrmbgoodbuyinfo_.Clear();
  arrgoodbuyinfo_.Clear();
  arrtaskrewardinfo_.Clear();
  arrexchangedinfo_.Clear();
  arrtaskinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationTwoGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationTwoGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRmbGoodBuyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbgoodbuyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRmbGoodBuyInfo;
        if (input->ExpectTag(18)) goto parse_ArrGoodBuyInfo;
        break;
      }

      // repeated .pb.TActCelebrationTwoBuyInfo ArrGoodBuyInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrGoodBuyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrgoodbuyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrGoodBuyInfo;
        if (input->ExpectTag(26)) goto parse_ArrTaskRewardInfo;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrTaskRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrTaskRewardInfo;
        if (input->ExpectTag(34)) goto parse_ArrExchangedInfo;
        break;
      }

      // repeated .pb.TActCelebrationTwoBuyInfo ArrExchangedInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrExchangedInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrexchangedinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrExchangedInfo;
        if (input->ExpectTag(42)) goto parse_ArrTaskInfo;
        break;
      }

      // repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_ArrTaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ArrTaskInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationTwoGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationTwoGetInfoRsp)
  return false;
#undef DO_
}

void TActCelebrationTwoGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationTwoGetInfoRsp)
  // repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrmbgoodbuyinfo(i), output);
  }

  // repeated .pb.TActCelebrationTwoBuyInfo ArrGoodBuyInfo = 2;
  for (int i = 0; i < this->arrgoodbuyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrgoodbuyinfo(i), output);
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrtaskrewardinfo(i), output);
  }

  // repeated .pb.TActCelebrationTwoBuyInfo ArrExchangedInfo = 4;
  for (int i = 0; i < this->arrexchangedinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrexchangedinfo(i), output);
  }

  // repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 5;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arrtaskinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationTwoGetInfoRsp)
}

::google::protobuf::uint8* TActCelebrationTwoGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationTwoGetInfoRsp)
  // repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrmbgoodbuyinfo(i), target);
  }

  // repeated .pb.TActCelebrationTwoBuyInfo ArrGoodBuyInfo = 2;
  for (int i = 0; i < this->arrgoodbuyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrgoodbuyinfo(i), target);
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrtaskrewardinfo(i), target);
  }

  // repeated .pb.TActCelebrationTwoBuyInfo ArrExchangedInfo = 4;
  for (int i = 0; i < this->arrexchangedinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrexchangedinfo(i), target);
  }

  // repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 5;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arrtaskinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationTwoGetInfoRsp)
  return target;
}

int TActCelebrationTwoGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
  total_size += 1 * this->arrrmbgoodbuyinfo_size();
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbgoodbuyinfo(i));
  }

  // repeated .pb.TActCelebrationTwoBuyInfo ArrGoodBuyInfo = 2;
  total_size += 1 * this->arrgoodbuyinfo_size();
  for (int i = 0; i < this->arrgoodbuyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrgoodbuyinfo(i));
  }

  // repeated .pb.TActivityRewardInfo ArrTaskRewardInfo = 3;
  total_size += 1 * this->arrtaskrewardinfo_size();
  for (int i = 0; i < this->arrtaskrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskrewardinfo(i));
  }

  // repeated .pb.TActCelebrationTwoBuyInfo ArrExchangedInfo = 4;
  total_size += 1 * this->arrexchangedinfo_size();
  for (int i = 0; i < this->arrexchangedinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrexchangedinfo(i));
  }

  // repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 5;
  total_size += 1 * this->arrtaskinfo_size();
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationTwoGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationTwoGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationTwoGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationTwoGetInfoRsp::MergeFrom(const TActCelebrationTwoGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrmbgoodbuyinfo_.MergeFrom(from.arrrmbgoodbuyinfo_);
  arrgoodbuyinfo_.MergeFrom(from.arrgoodbuyinfo_);
  arrtaskrewardinfo_.MergeFrom(from.arrtaskrewardinfo_);
  arrexchangedinfo_.MergeFrom(from.arrexchangedinfo_);
  arrtaskinfo_.MergeFrom(from.arrtaskinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationTwoGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationTwoGetInfoRsp::CopyFrom(const TActCelebrationTwoGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationTwoGetInfoRsp::IsInitialized() const {

  return true;
}

void TActCelebrationTwoGetInfoRsp::Swap(TActCelebrationTwoGetInfoRsp* other) {
  if (other != this) {
    arrrmbgoodbuyinfo_.Swap(&other->arrrmbgoodbuyinfo_);
    arrgoodbuyinfo_.Swap(&other->arrgoodbuyinfo_);
    arrtaskrewardinfo_.Swap(&other->arrtaskrewardinfo_);
    arrexchangedinfo_.Swap(&other->arrexchangedinfo_);
    arrtaskinfo_.Swap(&other->arrtaskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationTwoGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationTwoGetInfoRsp_descriptor_;
  metadata.reflection = TActCelebrationTwoGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationTwoBuyGoodsReq::kGoodIdFieldNumber;
const int TActCelebrationTwoBuyGoodsReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActCelebrationTwoBuyGoodsReq::TActCelebrationTwoBuyGoodsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationTwoBuyGoodsReq)
}

void TActCelebrationTwoBuyGoodsReq::InitAsDefaultInstance() {
}

TActCelebrationTwoBuyGoodsReq::TActCelebrationTwoBuyGoodsReq(const TActCelebrationTwoBuyGoodsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationTwoBuyGoodsReq)
}

void TActCelebrationTwoBuyGoodsReq::SharedCtor() {
  _cached_size_ = 0;
  goodid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationTwoBuyGoodsReq::~TActCelebrationTwoBuyGoodsReq() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationTwoBuyGoodsReq)
  SharedDtor();
}

void TActCelebrationTwoBuyGoodsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationTwoBuyGoodsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationTwoBuyGoodsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationTwoBuyGoodsReq_descriptor_;
}

const TActCelebrationTwoBuyGoodsReq& TActCelebrationTwoBuyGoodsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  return *default_instance_;
}

TActCelebrationTwoBuyGoodsReq* TActCelebrationTwoBuyGoodsReq::default_instance_ = NULL;

TActCelebrationTwoBuyGoodsReq* TActCelebrationTwoBuyGoodsReq::New() const {
  return new TActCelebrationTwoBuyGoodsReq;
}

void TActCelebrationTwoBuyGoodsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActCelebrationTwoBuyGoodsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(goodid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationTwoBuyGoodsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationTwoBuyGoodsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GoodId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goodid_)));
          set_has_goodid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationTwoBuyGoodsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationTwoBuyGoodsReq)
  return false;
#undef DO_
}

void TActCelebrationTwoBuyGoodsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationTwoBuyGoodsReq)
  // optional uint32 GoodId = 1;
  if (has_goodid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goodid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationTwoBuyGoodsReq)
}

::google::protobuf::uint8* TActCelebrationTwoBuyGoodsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationTwoBuyGoodsReq)
  // optional uint32 GoodId = 1;
  if (has_goodid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goodid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationTwoBuyGoodsReq)
  return target;
}

int TActCelebrationTwoBuyGoodsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GoodId = 1;
    if (has_goodid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goodid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationTwoBuyGoodsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationTwoBuyGoodsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationTwoBuyGoodsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationTwoBuyGoodsReq::MergeFrom(const TActCelebrationTwoBuyGoodsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goodid()) {
      set_goodid(from.goodid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationTwoBuyGoodsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationTwoBuyGoodsReq::CopyFrom(const TActCelebrationTwoBuyGoodsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationTwoBuyGoodsReq::IsInitialized() const {

  return true;
}

void TActCelebrationTwoBuyGoodsReq::Swap(TActCelebrationTwoBuyGoodsReq* other) {
  if (other != this) {
    std::swap(goodid_, other->goodid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationTwoBuyGoodsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationTwoBuyGoodsReq_descriptor_;
  metadata.reflection = TActCelebrationTwoBuyGoodsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationTwoBuyGoodsRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActCelebrationTwoBuyGoodsRsp::TActCelebrationTwoBuyGoodsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationTwoBuyGoodsRsp)
}

void TActCelebrationTwoBuyGoodsRsp::InitAsDefaultInstance() {
}

TActCelebrationTwoBuyGoodsRsp::TActCelebrationTwoBuyGoodsRsp(const TActCelebrationTwoBuyGoodsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationTwoBuyGoodsRsp)
}

void TActCelebrationTwoBuyGoodsRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationTwoBuyGoodsRsp::~TActCelebrationTwoBuyGoodsRsp() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationTwoBuyGoodsRsp)
  SharedDtor();
}

void TActCelebrationTwoBuyGoodsRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationTwoBuyGoodsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationTwoBuyGoodsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationTwoBuyGoodsRsp_descriptor_;
}

const TActCelebrationTwoBuyGoodsRsp& TActCelebrationTwoBuyGoodsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  return *default_instance_;
}

TActCelebrationTwoBuyGoodsRsp* TActCelebrationTwoBuyGoodsRsp::default_instance_ = NULL;

TActCelebrationTwoBuyGoodsRsp* TActCelebrationTwoBuyGoodsRsp::New() const {
  return new TActCelebrationTwoBuyGoodsRsp;
}

void TActCelebrationTwoBuyGoodsRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationTwoBuyGoodsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationTwoBuyGoodsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationTwoBuyGoodsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationTwoBuyGoodsRsp)
  return false;
#undef DO_
}

void TActCelebrationTwoBuyGoodsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationTwoBuyGoodsRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationTwoBuyGoodsRsp)
}

::google::protobuf::uint8* TActCelebrationTwoBuyGoodsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationTwoBuyGoodsRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationTwoBuyGoodsRsp)
  return target;
}

int TActCelebrationTwoBuyGoodsRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationTwoBuyGoodsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationTwoBuyGoodsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationTwoBuyGoodsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationTwoBuyGoodsRsp::MergeFrom(const TActCelebrationTwoBuyGoodsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationTwoBuyGoodsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationTwoBuyGoodsRsp::CopyFrom(const TActCelebrationTwoBuyGoodsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationTwoBuyGoodsRsp::IsInitialized() const {

  return true;
}

void TActCelebrationTwoBuyGoodsRsp::Swap(TActCelebrationTwoBuyGoodsRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationTwoBuyGoodsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationTwoBuyGoodsRsp_descriptor_;
  metadata.reflection = TActCelebrationTwoBuyGoodsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationTwoGetTaskRewardReq::kTaskIdFieldNumber;
#endif  // !_MSC_VER

TActCelebrationTwoGetTaskRewardReq::TActCelebrationTwoGetTaskRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationTwoGetTaskRewardReq)
}

void TActCelebrationTwoGetTaskRewardReq::InitAsDefaultInstance() {
}

TActCelebrationTwoGetTaskRewardReq::TActCelebrationTwoGetTaskRewardReq(const TActCelebrationTwoGetTaskRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationTwoGetTaskRewardReq)
}

void TActCelebrationTwoGetTaskRewardReq::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationTwoGetTaskRewardReq::~TActCelebrationTwoGetTaskRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationTwoGetTaskRewardReq)
  SharedDtor();
}

void TActCelebrationTwoGetTaskRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationTwoGetTaskRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationTwoGetTaskRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationTwoGetTaskRewardReq_descriptor_;
}

const TActCelebrationTwoGetTaskRewardReq& TActCelebrationTwoGetTaskRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  return *default_instance_;
}

TActCelebrationTwoGetTaskRewardReq* TActCelebrationTwoGetTaskRewardReq::default_instance_ = NULL;

TActCelebrationTwoGetTaskRewardReq* TActCelebrationTwoGetTaskRewardReq::New() const {
  return new TActCelebrationTwoGetTaskRewardReq;
}

void TActCelebrationTwoGetTaskRewardReq::Clear() {
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationTwoGetTaskRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationTwoGetTaskRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationTwoGetTaskRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationTwoGetTaskRewardReq)
  return false;
#undef DO_
}

void TActCelebrationTwoGetTaskRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationTwoGetTaskRewardReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationTwoGetTaskRewardReq)
}

::google::protobuf::uint8* TActCelebrationTwoGetTaskRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationTwoGetTaskRewardReq)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationTwoGetTaskRewardReq)
  return target;
}

int TActCelebrationTwoGetTaskRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationTwoGetTaskRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationTwoGetTaskRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationTwoGetTaskRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationTwoGetTaskRewardReq::MergeFrom(const TActCelebrationTwoGetTaskRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationTwoGetTaskRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationTwoGetTaskRewardReq::CopyFrom(const TActCelebrationTwoGetTaskRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationTwoGetTaskRewardReq::IsInitialized() const {

  return true;
}

void TActCelebrationTwoGetTaskRewardReq::Swap(TActCelebrationTwoGetTaskRewardReq* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationTwoGetTaskRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationTwoGetTaskRewardReq_descriptor_;
  metadata.reflection = TActCelebrationTwoGetTaskRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationTwoGetTaskRewardRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActCelebrationTwoGetTaskRewardRsp::TActCelebrationTwoGetTaskRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationTwoGetTaskRewardRsp)
}

void TActCelebrationTwoGetTaskRewardRsp::InitAsDefaultInstance() {
}

TActCelebrationTwoGetTaskRewardRsp::TActCelebrationTwoGetTaskRewardRsp(const TActCelebrationTwoGetTaskRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationTwoGetTaskRewardRsp)
}

void TActCelebrationTwoGetTaskRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationTwoGetTaskRewardRsp::~TActCelebrationTwoGetTaskRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationTwoGetTaskRewardRsp)
  SharedDtor();
}

void TActCelebrationTwoGetTaskRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationTwoGetTaskRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationTwoGetTaskRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationTwoGetTaskRewardRsp_descriptor_;
}

const TActCelebrationTwoGetTaskRewardRsp& TActCelebrationTwoGetTaskRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  return *default_instance_;
}

TActCelebrationTwoGetTaskRewardRsp* TActCelebrationTwoGetTaskRewardRsp::default_instance_ = NULL;

TActCelebrationTwoGetTaskRewardRsp* TActCelebrationTwoGetTaskRewardRsp::New() const {
  return new TActCelebrationTwoGetTaskRewardRsp;
}

void TActCelebrationTwoGetTaskRewardRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationTwoGetTaskRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationTwoGetTaskRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationTwoGetTaskRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationTwoGetTaskRewardRsp)
  return false;
#undef DO_
}

void TActCelebrationTwoGetTaskRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationTwoGetTaskRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationTwoGetTaskRewardRsp)
}

::google::protobuf::uint8* TActCelebrationTwoGetTaskRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationTwoGetTaskRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationTwoGetTaskRewardRsp)
  return target;
}

int TActCelebrationTwoGetTaskRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationTwoGetTaskRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationTwoGetTaskRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationTwoGetTaskRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationTwoGetTaskRewardRsp::MergeFrom(const TActCelebrationTwoGetTaskRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationTwoGetTaskRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationTwoGetTaskRewardRsp::CopyFrom(const TActCelebrationTwoGetTaskRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationTwoGetTaskRewardRsp::IsInitialized() const {

  return true;
}

void TActCelebrationTwoGetTaskRewardRsp::Swap(TActCelebrationTwoGetTaskRewardRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationTwoGetTaskRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationTwoGetTaskRewardRsp_descriptor_;
  metadata.reflection = TActCelebrationTwoGetTaskRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationTwoExchangeReq::kExchangeIdFieldNumber;
const int TActCelebrationTwoExchangeReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActCelebrationTwoExchangeReq::TActCelebrationTwoExchangeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationTwoExchangeReq)
}

void TActCelebrationTwoExchangeReq::InitAsDefaultInstance() {
}

TActCelebrationTwoExchangeReq::TActCelebrationTwoExchangeReq(const TActCelebrationTwoExchangeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationTwoExchangeReq)
}

void TActCelebrationTwoExchangeReq::SharedCtor() {
  _cached_size_ = 0;
  exchangeid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationTwoExchangeReq::~TActCelebrationTwoExchangeReq() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationTwoExchangeReq)
  SharedDtor();
}

void TActCelebrationTwoExchangeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationTwoExchangeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationTwoExchangeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationTwoExchangeReq_descriptor_;
}

const TActCelebrationTwoExchangeReq& TActCelebrationTwoExchangeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  return *default_instance_;
}

TActCelebrationTwoExchangeReq* TActCelebrationTwoExchangeReq::default_instance_ = NULL;

TActCelebrationTwoExchangeReq* TActCelebrationTwoExchangeReq::New() const {
  return new TActCelebrationTwoExchangeReq;
}

void TActCelebrationTwoExchangeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActCelebrationTwoExchangeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(exchangeid_, num_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationTwoExchangeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationTwoExchangeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ExchangeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchangeid_)));
          set_has_exchangeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional uint32 Num = 2;
      case 2: {
        if (tag == 16) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationTwoExchangeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationTwoExchangeReq)
  return false;
#undef DO_
}

void TActCelebrationTwoExchangeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationTwoExchangeReq)
  // optional uint32 ExchangeId = 1;
  if (has_exchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exchangeid(), output);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationTwoExchangeReq)
}

::google::protobuf::uint8* TActCelebrationTwoExchangeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationTwoExchangeReq)
  // optional uint32 ExchangeId = 1;
  if (has_exchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exchangeid(), target);
  }

  // optional uint32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationTwoExchangeReq)
  return target;
}

int TActCelebrationTwoExchangeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ExchangeId = 1;
    if (has_exchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchangeid());
    }

    // optional uint32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationTwoExchangeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationTwoExchangeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationTwoExchangeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationTwoExchangeReq::MergeFrom(const TActCelebrationTwoExchangeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exchangeid()) {
      set_exchangeid(from.exchangeid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationTwoExchangeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationTwoExchangeReq::CopyFrom(const TActCelebrationTwoExchangeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationTwoExchangeReq::IsInitialized() const {

  return true;
}

void TActCelebrationTwoExchangeReq::Swap(TActCelebrationTwoExchangeReq* other) {
  if (other != this) {
    std::swap(exchangeid_, other->exchangeid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationTwoExchangeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationTwoExchangeReq_descriptor_;
  metadata.reflection = TActCelebrationTwoExchangeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationTwoExchangeRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActCelebrationTwoExchangeRsp::TActCelebrationTwoExchangeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationTwoExchangeRsp)
}

void TActCelebrationTwoExchangeRsp::InitAsDefaultInstance() {
}

TActCelebrationTwoExchangeRsp::TActCelebrationTwoExchangeRsp(const TActCelebrationTwoExchangeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationTwoExchangeRsp)
}

void TActCelebrationTwoExchangeRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationTwoExchangeRsp::~TActCelebrationTwoExchangeRsp() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationTwoExchangeRsp)
  SharedDtor();
}

void TActCelebrationTwoExchangeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationTwoExchangeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationTwoExchangeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationTwoExchangeRsp_descriptor_;
}

const TActCelebrationTwoExchangeRsp& TActCelebrationTwoExchangeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  return *default_instance_;
}

TActCelebrationTwoExchangeRsp* TActCelebrationTwoExchangeRsp::default_instance_ = NULL;

TActCelebrationTwoExchangeRsp* TActCelebrationTwoExchangeRsp::New() const {
  return new TActCelebrationTwoExchangeRsp;
}

void TActCelebrationTwoExchangeRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationTwoExchangeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationTwoExchangeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationTwoExchangeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationTwoExchangeRsp)
  return false;
#undef DO_
}

void TActCelebrationTwoExchangeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationTwoExchangeRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationTwoExchangeRsp)
}

::google::protobuf::uint8* TActCelebrationTwoExchangeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationTwoExchangeRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationTwoExchangeRsp)
  return target;
}

int TActCelebrationTwoExchangeRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationTwoExchangeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationTwoExchangeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationTwoExchangeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationTwoExchangeRsp::MergeFrom(const TActCelebrationTwoExchangeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationTwoExchangeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationTwoExchangeRsp::CopyFrom(const TActCelebrationTwoExchangeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationTwoExchangeRsp::IsInitialized() const {

  return true;
}

void TActCelebrationTwoExchangeRsp::Swap(TActCelebrationTwoExchangeRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationTwoExchangeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationTwoExchangeRsp_descriptor_;
  metadata.reflection = TActCelebrationTwoExchangeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActCelebrationTwoNotify::kArrRmbGoodBuyInfoFieldNumber;
const int TActCelebrationTwoNotify::kArrTaskInfoFieldNumber;
#endif  // !_MSC_VER

TActCelebrationTwoNotify::TActCelebrationTwoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActCelebrationTwoNotify)
}

void TActCelebrationTwoNotify::InitAsDefaultInstance() {
}

TActCelebrationTwoNotify::TActCelebrationTwoNotify(const TActCelebrationTwoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActCelebrationTwoNotify)
}

void TActCelebrationTwoNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActCelebrationTwoNotify::~TActCelebrationTwoNotify() {
  // @@protoc_insertion_point(destructor:pb.TActCelebrationTwoNotify)
  SharedDtor();
}

void TActCelebrationTwoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActCelebrationTwoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActCelebrationTwoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActCelebrationTwoNotify_descriptor_;
}

const TActCelebrationTwoNotify& TActCelebrationTwoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActCelebrationTwo_2eproto();
  return *default_instance_;
}

TActCelebrationTwoNotify* TActCelebrationTwoNotify::default_instance_ = NULL;

TActCelebrationTwoNotify* TActCelebrationTwoNotify::New() const {
  return new TActCelebrationTwoNotify;
}

void TActCelebrationTwoNotify::Clear() {
  arrrmbgoodbuyinfo_.Clear();
  arrtaskinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActCelebrationTwoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActCelebrationTwoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRmbGoodBuyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrmbgoodbuyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRmbGoodBuyInfo;
        if (input->ExpectTag(18)) goto parse_ArrTaskInfo;
        break;
      }

      // repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrTaskInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrTaskInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActCelebrationTwoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActCelebrationTwoNotify)
  return false;
#undef DO_
}

void TActCelebrationTwoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActCelebrationTwoNotify)
  // repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrmbgoodbuyinfo(i), output);
  }

  // repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 2;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrtaskinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActCelebrationTwoNotify)
}

::google::protobuf::uint8* TActCelebrationTwoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActCelebrationTwoNotify)
  // repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrmbgoodbuyinfo(i), target);
  }

  // repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 2;
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrtaskinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActCelebrationTwoNotify)
  return target;
}

int TActCelebrationTwoNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActCelebrationTwoBuyInfo ArrRmbGoodBuyInfo = 1;
  total_size += 1 * this->arrrmbgoodbuyinfo_size();
  for (int i = 0; i < this->arrrmbgoodbuyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrmbgoodbuyinfo(i));
  }

  // repeated .pb.TActCelebrationTwoTaskInfo ArrTaskInfo = 2;
  total_size += 1 * this->arrtaskinfo_size();
  for (int i = 0; i < this->arrtaskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActCelebrationTwoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActCelebrationTwoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActCelebrationTwoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActCelebrationTwoNotify::MergeFrom(const TActCelebrationTwoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrmbgoodbuyinfo_.MergeFrom(from.arrrmbgoodbuyinfo_);
  arrtaskinfo_.MergeFrom(from.arrtaskinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActCelebrationTwoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActCelebrationTwoNotify::CopyFrom(const TActCelebrationTwoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActCelebrationTwoNotify::IsInitialized() const {

  return true;
}

void TActCelebrationTwoNotify::Swap(TActCelebrationTwoNotify* other) {
  if (other != this) {
    arrrmbgoodbuyinfo_.Swap(&other->arrrmbgoodbuyinfo_);
    arrtaskinfo_.Swap(&other->arrtaskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActCelebrationTwoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActCelebrationTwoNotify_descriptor_;
  metadata.reflection = TActCelebrationTwoNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
