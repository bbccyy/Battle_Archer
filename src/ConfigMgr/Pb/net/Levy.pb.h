// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Levy.proto

#ifndef PROTOBUF_net_2fLevy_2eproto__INCLUDED
#define PROTOBUF_net_2fLevy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/CommonReward.pb.h"
#include "net/Battle.pb.h"
#include "net/GuildUser.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fLevy_2eproto();
void protobuf_AssignDesc_net_2fLevy_2eproto();
void protobuf_ShutdownFile_net_2fLevy_2eproto();

class TLevyPos;
class TLevyAchievementRewardInfo;
class TLevyAchievementInfo;
class TLevyUserInfo;
class TLevyMasterInfo;
class TLevySlaveInfo;
class TLevyOtherUserInfo;
class TLevyRecordInfo;
class TLevyBattleReportInfo;
class TLevyGuildUserInfo;
class TLevyGetUserInfoRsp;
class TLevyEnterRsp;
class TLevyPreviewRsp;
class TLevyReceiveRsp;
class TLevyGetRecordReq;
class TLevyGetRecordRsp;
class TLevyGetPageInfoReq;
class TLevyGetPageInfoRsp;
class TLevyGetCityInfoReq;
class TLevyGetCityInfoRsp;
class TLevyForceLevyRsp;
class TLevyHelpReq;
class TLevyHelpRsp;
class TLevyConquerReq;
class TLevyConquerRsp;
class TLevyReleaseSlaveReq;
class TLevyRebelRsp;
class TLevyPlunderReq;
class TLevyPlunderRsp;
class TLevyPlunderPreviewReq;
class TLevyPlunderPreviewRsp;
class TLevyTrainReq;
class TLevyMoveCityToEmptyReq;
class TLevyMoveCityToEmptyRsp;
class TLevyForceMoveCityReq;
class TLevyForceMoveCityRsp;
class TLevyStormReq;
class TLevyStormRsp;
class TLevyStormPreviewReq;
class TLevyStormPreviewRsp;
class TLevyGetLevyBattleReportReq;
class TLevyGetLevyBattleReportRsp;
class TLevyGetGuildUserListRsp;
class TLevyReceiveAchievementRewardReq;
class TLevyReceiveAchievementRewardRsp;
class TLevyUserInfoChangeNotify;
class TLevyInfoChangeNotify;
class TLevyNewBattleReportNotify;

enum ELevyRecordType {
  TRAIN = 100,
  CONQUER = 101,
  PLUNDER = 102,
  FORCE_MOVE = 103,
  STORM = 104,
  REBEL = 105,
  BE_TRAINED = 201,
  BE_HELPED = 202,
  BE_CONQUERED = 203,
  BE_RELEASED = 204,
  BE_PLUNDERED = 205,
  BE_FORCE_MOVE = 206,
  BE_STORM = 207,
  SLAVE_BE_CONQUERED = 301,
  SLAVE_BE_PLUNDERED = 302,
  SLAVE_BE_FORCE_MOVE = 303,
  SLAVE_BE_STORM = 304,
  SLAVE_RECEIVE = 401,
  SLAVE_REBEL = 402,
  MASTER_LEAVE = 403,
  SLAVE_LEAVE = 404
};
bool ELevyRecordType_IsValid(int value);
const ELevyRecordType ELevyRecordType_MIN = TRAIN;
const ELevyRecordType ELevyRecordType_MAX = SLAVE_LEAVE;
const int ELevyRecordType_ARRAYSIZE = ELevyRecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELevyRecordType_descriptor();
inline const ::std::string& ELevyRecordType_Name(ELevyRecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELevyRecordType_descriptor(), value);
}
inline bool ELevyRecordType_Parse(
    const ::std::string& name, ELevyRecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELevyRecordType>(
    ELevyRecordType_descriptor(), name, value);
}
enum ELevyBattleReportType {
  BATTLE_CONQUER = 1,
  BATTLE_PLUNDER = 2,
  BATTLE_FORCE_MOVE_CITY = 3,
  BATTLE_REBEL = 4,
  BATTLE_STORM = 5
};
bool ELevyBattleReportType_IsValid(int value);
const ELevyBattleReportType ELevyBattleReportType_MIN = BATTLE_CONQUER;
const ELevyBattleReportType ELevyBattleReportType_MAX = BATTLE_STORM;
const int ELevyBattleReportType_ARRAYSIZE = ELevyBattleReportType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELevyBattleReportType_descriptor();
inline const ::std::string& ELevyBattleReportType_Name(ELevyBattleReportType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELevyBattleReportType_descriptor(), value);
}
inline bool ELevyBattleReportType_Parse(
    const ::std::string& name, ELevyBattleReportType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELevyBattleReportType>(
    ELevyBattleReportType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TLevyPos</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyPos : public ::google::protobuf::Message {
 public:
  TLevyPos();
  virtual ~TLevyPos();

  TLevyPos(const TLevyPos& from);

  inline TLevyPos& operator=(const TLevyPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyPos& default_instance();

  void Swap(TLevyPos* other);

  // implements Message ----------------------------------------------

  TLevyPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyPos& from);
  void MergeFrom(const TLevyPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PageId = 1;
  inline bool has_pageid() const;
  inline void clear_pageid();
  static const int kPageIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyPos</name>
  	<Function>
  		<name>pageid</name>
  		<replaceName>PageId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pageid</name>
  		<replaceName>PageId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pageid</name>
  		<replaceName>PageId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pageid() const;
  inline void set_pageid(::google::protobuf::uint32 value);

  // optional uint32 PageIndex = 2;
  inline bool has_pageindex() const;
  inline void clear_pageindex();
  static const int kPageIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyPos</name>
  	<Function>
  		<name>pageindex</name>
  		<replaceName>PageIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pageindex</name>
  		<replaceName>PageIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pageindex</name>
  		<replaceName>PageIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pageindex() const;
  inline void set_pageindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyPos)
 private:
  inline void set_has_pageid();
  inline void clear_has_pageid();
  inline void set_has_pageindex();
  inline void clear_has_pageindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pageid_;
  ::google::protobuf::uint32 pageindex_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyPos* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyAchievementRewardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyAchievementRewardInfo : public ::google::protobuf::Message {
 public:
  TLevyAchievementRewardInfo();
  virtual ~TLevyAchievementRewardInfo();

  TLevyAchievementRewardInfo(const TLevyAchievementRewardInfo& from);

  inline TLevyAchievementRewardInfo& operator=(const TLevyAchievementRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyAchievementRewardInfo& default_instance();

  void Swap(TLevyAchievementRewardInfo* other);

  // implements Message ----------------------------------------------

  TLevyAchievementRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyAchievementRewardInfo& from);
  void MergeFrom(const TLevyAchievementRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyAchievementRewardInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 2;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyAchievementRewardInfo</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyAchievementRewardInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyAchievementRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyAchievementInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyAchievementInfo : public ::google::protobuf::Message {
 public:
  TLevyAchievementInfo();
  virtual ~TLevyAchievementInfo();

  TLevyAchievementInfo(const TLevyAchievementInfo& from);

  inline TLevyAchievementInfo& operator=(const TLevyAchievementInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyAchievementInfo& default_instance();

  void Swap(TLevyAchievementInfo* other);

  // implements Message ----------------------------------------------

  TLevyAchievementInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyAchievementInfo& from);
  void MergeFrom(const TLevyAchievementInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TotalBattleNum = 1;
  inline bool has_totalbattlenum() const;
  inline void clear_totalbattlenum();
  static const int kTotalBattleNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyAchievementInfo</name>
  	<Function>
  		<name>totalbattlenum</name>
  		<replaceName>TotalBattleNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totalbattlenum</name>
  		<replaceName>TotalBattleNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totalbattlenum</name>
  		<replaceName>TotalBattleNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totalbattlenum() const;
  inline void set_totalbattlenum(::google::protobuf::uint32 value);

  // optional uint32 MaxConnectNum = 2;
  inline bool has_maxconnectnum() const;
  inline void clear_maxconnectnum();
  static const int kMaxConnectNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyAchievementInfo</name>
  	<Function>
  		<name>maxconnectnum</name>
  		<replaceName>MaxConnectNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxconnectnum</name>
  		<replaceName>MaxConnectNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxconnectnum</name>
  		<replaceName>MaxConnectNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxconnectnum() const;
  inline void set_maxconnectnum(::google::protobuf::uint32 value);

  // repeated .pb.TLevyAchievementRewardInfo ArrRewardInfo = 5;
  inline int arrrewardinfo_size() const;
  inline void clear_arrrewardinfo();
  static const int kArrRewardInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLevyAchievementInfo</name>
  	<Function>
  		<name>arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrewardinfo</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrewardinfo_size</name>
  		<replaceName>ArrRewardInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyAchievementRewardInfo& arrrewardinfo(int index) const;
  inline ::pb::TLevyAchievementRewardInfo* mutable_arrrewardinfo(int index);
  inline ::pb::TLevyAchievementRewardInfo* add_arrrewardinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyAchievementRewardInfo >&
      arrrewardinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyAchievementRewardInfo >*
      mutable_arrrewardinfo();

  // @@protoc_insertion_point(class_scope:pb.TLevyAchievementInfo)
 private:
  inline void set_has_totalbattlenum();
  inline void clear_has_totalbattlenum();
  inline void set_has_maxconnectnum();
  inline void clear_has_maxconnectnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 totalbattlenum_;
  ::google::protobuf::uint32 maxconnectnum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLevyAchievementRewardInfo > arrrewardinfo_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyAchievementInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyUserInfo : public ::google::protobuf::Message {
 public:
  TLevyUserInfo();
  virtual ~TLevyUserInfo();

  TLevyUserInfo(const TLevyUserInfo& from);

  inline TLevyUserInfo& operator=(const TLevyUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyUserInfo& default_instance();

  void Swap(TLevyUserInfo* other);

  // implements Message ----------------------------------------------

  TLevyUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyUserInfo& from);
  void MergeFrom(const TLevyUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // optional uint64 SettleTime = 2;
  inline bool has_settletime() const;
  inline void clear_settletime();
  static const int kSettleTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 settletime() const;
  inline void set_settletime(::google::protobuf::uint64 value);

  // optional uint64 SliverNum = 3;
  inline bool has_slivernum() const;
  inline void clear_slivernum();
  static const int kSliverNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slivernum() const;
  inline void set_slivernum(::google::protobuf::uint64 value);

  // optional uint32 OutputDuration = 4;
  inline bool has_outputduration() const;
  inline void clear_outputduration();
  static const int kOutputDurationFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>outputduration</name>
  		<replaceName>OutputDuration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_outputduration</name>
  		<replaceName>OutputDuration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_outputduration</name>
  		<replaceName>OutputDuration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 outputduration() const;
  inline void set_outputduration(::google::protobuf::uint32 value);

  // optional uint32 ForceNum = 5;
  inline bool has_forcenum() const;
  inline void clear_forcenum();
  static const int kForceNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>forcenum</name>
  		<replaceName>ForceNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_forcenum</name>
  		<replaceName>ForceNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_forcenum</name>
  		<replaceName>ForceNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 forcenum() const;
  inline void set_forcenum(::google::protobuf::uint32 value);

  // optional uint32 HelpNum = 6;
  inline bool has_helpnum() const;
  inline void clear_helpnum();
  static const int kHelpNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>helpnum</name>
  		<replaceName>HelpNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_helpnum</name>
  		<replaceName>HelpNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_helpnum</name>
  		<replaceName>HelpNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 helpnum() const;
  inline void set_helpnum(::google::protobuf::uint32 value);

  // optional uint32 PlunderNum = 7;
  inline bool has_plundernum() const;
  inline void clear_plundernum();
  static const int kPlunderNumFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>plundernum</name>
  		<replaceName>PlunderNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_plundernum</name>
  		<replaceName>PlunderNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_plundernum</name>
  		<replaceName>PlunderNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 plundernum() const;
  inline void set_plundernum(::google::protobuf::uint32 value);

  // optional uint32 TrainNum = 8;
  inline bool has_trainnum() const;
  inline void clear_trainnum();
  static const int kTrainNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>trainnum</name>
  		<replaceName>TrainNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_trainnum</name>
  		<replaceName>TrainNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_trainnum</name>
  		<replaceName>TrainNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 trainnum() const;
  inline void set_trainnum(::google::protobuf::uint32 value);

  // optional uint32 StormNum = 9;
  inline bool has_stormnum() const;
  inline void clear_stormnum();
  static const int kStormNumFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>stormnum</name>
  		<replaceName>StormNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stormnum</name>
  		<replaceName>StormNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stormnum</name>
  		<replaceName>StormNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 stormnum() const;
  inline void set_stormnum(::google::protobuf::uint32 value);

  // optional .pb.TLevyMasterInfo MasterInfo = 12;
  inline bool has_masterinfo() const;
  inline void clear_masterinfo();
  static const int kMasterInfoFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>masterinfo</name>
  		<replaceName>MasterInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masterinfo</name>
  		<replaceName>MasterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_masterinfo</name>
  		<replaceName>MasterInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masterinfo</name>
  		<replaceName>MasterInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyMasterInfo& masterinfo() const;
  inline ::pb::TLevyMasterInfo* mutable_masterinfo();
  inline ::pb::TLevyMasterInfo* release_masterinfo();
  inline void set_allocated_masterinfo(::pb::TLevyMasterInfo* masterinfo);

  // repeated .pb.TLevySlaveInfo ArrSlaveInfo = 13;
  inline int arrslaveinfo_size() const;
  inline void clear_arrslaveinfo();
  static const int kArrSlaveInfoFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>arrslaveinfo</name>
  		<replaceName>ArrSlaveInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrslaveinfo</name>
  		<replaceName>ArrSlaveInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrslaveinfo</name>
  		<replaceName>ArrSlaveInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrslaveinfo</name>
  		<replaceName>ArrSlaveInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrslaveinfo_size</name>
  		<replaceName>ArrSlaveInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevySlaveInfo& arrslaveinfo(int index) const;
  inline ::pb::TLevySlaveInfo* mutable_arrslaveinfo(int index);
  inline ::pb::TLevySlaveInfo* add_arrslaveinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevySlaveInfo >&
      arrslaveinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLevySlaveInfo >*
      mutable_arrslaveinfo();

  // optional .pb.TLevyAchievementInfo AchievementInfo = 15;
  inline bool has_achievementinfo() const;
  inline void clear_achievementinfo();
  static const int kAchievementInfoFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfo</name>
  	<Function>
  		<name>achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyAchievementInfo& achievementinfo() const;
  inline ::pb::TLevyAchievementInfo* mutable_achievementinfo();
  inline ::pb::TLevyAchievementInfo* release_achievementinfo();
  inline void set_allocated_achievementinfo(::pb::TLevyAchievementInfo* achievementinfo);

  // @@protoc_insertion_point(class_scope:pb.TLevyUserInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_settletime();
  inline void clear_has_settletime();
  inline void set_has_slivernum();
  inline void clear_has_slivernum();
  inline void set_has_outputduration();
  inline void clear_has_outputduration();
  inline void set_has_forcenum();
  inline void clear_has_forcenum();
  inline void set_has_helpnum();
  inline void clear_has_helpnum();
  inline void set_has_plundernum();
  inline void clear_has_plundernum();
  inline void set_has_trainnum();
  inline void clear_has_trainnum();
  inline void set_has_stormnum();
  inline void clear_has_stormnum();
  inline void set_has_masterinfo();
  inline void clear_has_masterinfo();
  inline void set_has_achievementinfo();
  inline void clear_has_achievementinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* pos_;
  ::google::protobuf::uint64 settletime_;
  ::google::protobuf::uint64 slivernum_;
  ::google::protobuf::uint32 outputduration_;
  ::google::protobuf::uint32 forcenum_;
  ::google::protobuf::uint32 helpnum_;
  ::google::protobuf::uint32 plundernum_;
  ::google::protobuf::uint32 trainnum_;
  ::google::protobuf::uint32 stormnum_;
  ::pb::TLevyMasterInfo* masterinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLevySlaveInfo > arrslaveinfo_;
  ::pb::TLevyAchievementInfo* achievementinfo_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyMasterInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyMasterInfo : public ::google::protobuf::Message {
 public:
  TLevyMasterInfo();
  virtual ~TLevyMasterInfo();

  TLevyMasterInfo(const TLevyMasterInfo& from);

  inline TLevyMasterInfo& operator=(const TLevyMasterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyMasterInfo& default_instance();

  void Swap(TLevyMasterInfo* other);

  // implements Message ----------------------------------------------

  TLevyMasterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyMasterInfo& from);
  void MergeFrom(const TLevyMasterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 MasterUid = 1;
  inline bool has_masteruid() const;
  inline void clear_masteruid();
  static const int kMasterUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyMasterInfo</name>
  	<Function>
  		<name>masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 masteruid() const;
  inline void set_masteruid(::google::protobuf::uint64 value);

  // optional uint64 BeConqueredTime = 2;
  inline bool has_beconqueredtime() const;
  inline void clear_beconqueredtime();
  static const int kBeConqueredTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyMasterInfo</name>
  	<Function>
  		<name>beconqueredtime</name>
  		<replaceName>BeConqueredTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beconqueredtime</name>
  		<replaceName>BeConqueredTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beconqueredtime</name>
  		<replaceName>BeConqueredTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 beconqueredtime() const;
  inline void set_beconqueredtime(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo MasterUserInfo = 3;
  inline bool has_masteruserinfo() const;
  inline void clear_masteruserinfo();
  static const int kMasterUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyMasterInfo</name>
  	<Function>
  		<name>masteruserinfo</name>
  		<replaceName>MasterUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masteruserinfo</name>
  		<replaceName>MasterUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_masteruserinfo</name>
  		<replaceName>MasterUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masteruserinfo</name>
  		<replaceName>MasterUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& masteruserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_masteruserinfo();
  inline ::pb::TUserSimpleInfo* release_masteruserinfo();
  inline void set_allocated_masteruserinfo(::pb::TUserSimpleInfo* masteruserinfo);

  // optional .pb.TLevyPos Pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLevyMasterInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // @@protoc_insertion_point(class_scope:pb.TLevyMasterInfo)
 private:
  inline void set_has_masteruid();
  inline void clear_has_masteruid();
  inline void set_has_beconqueredtime();
  inline void clear_has_beconqueredtime();
  inline void set_has_masteruserinfo();
  inline void clear_has_masteruserinfo();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 masteruid_;
  ::google::protobuf::uint64 beconqueredtime_;
  ::pb::TUserSimpleInfo* masteruserinfo_;
  ::pb::TLevyPos* pos_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyMasterInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevySlaveInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevySlaveInfo : public ::google::protobuf::Message {
 public:
  TLevySlaveInfo();
  virtual ~TLevySlaveInfo();

  TLevySlaveInfo(const TLevySlaveInfo& from);

  inline TLevySlaveInfo& operator=(const TLevySlaveInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevySlaveInfo& default_instance();

  void Swap(TLevySlaveInfo* other);

  // implements Message ----------------------------------------------

  TLevySlaveInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevySlaveInfo& from);
  void MergeFrom(const TLevySlaveInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SlaveUid = 1;
  inline bool has_slaveuid() const;
  inline void clear_slaveuid();
  static const int kSlaveUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevySlaveInfo</name>
  	<Function>
  		<name>slaveuid</name>
  		<replaceName>SlaveUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slaveuid</name>
  		<replaceName>SlaveUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slaveuid</name>
  		<replaceName>SlaveUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slaveuid() const;
  inline void set_slaveuid(::google::protobuf::uint64 value);

  // optional uint64 ConquerTime = 2;
  inline bool has_conquertime() const;
  inline void clear_conquertime();
  static const int kConquerTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevySlaveInfo</name>
  	<Function>
  		<name>conquertime</name>
  		<replaceName>ConquerTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_conquertime</name>
  		<replaceName>ConquerTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_conquertime</name>
  		<replaceName>ConquerTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 conquertime() const;
  inline void set_conquertime(::google::protobuf::uint64 value);

  // optional .pb.TLevyPos Pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevySlaveInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // optional .pb.TUserSimpleInfo SlaveUserInfo = 5;
  inline bool has_slaveuserinfo() const;
  inline void clear_slaveuserinfo();
  static const int kSlaveUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLevySlaveInfo</name>
  	<Function>
  		<name>slaveuserinfo</name>
  		<replaceName>SlaveUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slaveuserinfo</name>
  		<replaceName>SlaveUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_slaveuserinfo</name>
  		<replaceName>SlaveUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slaveuserinfo</name>
  		<replaceName>SlaveUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& slaveuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_slaveuserinfo();
  inline ::pb::TUserSimpleInfo* release_slaveuserinfo();
  inline void set_allocated_slaveuserinfo(::pb::TUserSimpleInfo* slaveuserinfo);

  // @@protoc_insertion_point(class_scope:pb.TLevySlaveInfo)
 private:
  inline void set_has_slaveuid();
  inline void clear_has_slaveuid();
  inline void set_has_conquertime();
  inline void clear_has_conquertime();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_slaveuserinfo();
  inline void clear_has_slaveuserinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 slaveuid_;
  ::google::protobuf::uint64 conquertime_;
  ::pb::TLevyPos* pos_;
  ::pb::TUserSimpleInfo* slaveuserinfo_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevySlaveInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyOtherUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyOtherUserInfo : public ::google::protobuf::Message {
 public:
  TLevyOtherUserInfo();
  virtual ~TLevyOtherUserInfo();

  TLevyOtherUserInfo(const TLevyOtherUserInfo& from);

  inline TLevyOtherUserInfo& operator=(const TLevyOtherUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyOtherUserInfo& default_instance();

  void Swap(TLevyOtherUserInfo* other);

  // implements Message ----------------------------------------------

  TLevyOtherUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyOtherUserInfo& from);
  void MergeFrom(const TLevyOtherUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyOtherUserInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // optional uint64 Uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyOtherUserInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint64 MasterUid = 4;
  inline bool has_masteruid() const;
  inline void clear_masteruid();
  static const int kMasterUidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLevyOtherUserInfo</name>
  	<Function>
  		<name>masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masteruid</name>
  		<replaceName>MasterUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 masteruid() const;
  inline void set_masteruid(::google::protobuf::uint64 value);

  // optional uint32 BeHelpNum = 5;
  inline bool has_behelpnum() const;
  inline void clear_behelpnum();
  static const int kBeHelpNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLevyOtherUserInfo</name>
  	<Function>
  		<name>behelpnum</name>
  		<replaceName>BeHelpNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_behelpnum</name>
  		<replaceName>BeHelpNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_behelpnum</name>
  		<replaceName>BeHelpNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 behelpnum() const;
  inline void set_behelpnum(::google::protobuf::uint32 value);

  // optional uint32 BePlunderedNum = 6;
  inline bool has_beplunderednum() const;
  inline void clear_beplunderednum();
  static const int kBePlunderedNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TLevyOtherUserInfo</name>
  	<Function>
  		<name>beplunderednum</name>
  		<replaceName>BePlunderedNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beplunderednum</name>
  		<replaceName>BePlunderedNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beplunderednum</name>
  		<replaceName>BePlunderedNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beplunderednum() const;
  inline void set_beplunderednum(::google::protobuf::uint32 value);

  // optional uint64 BePlunderedTime = 7;
  inline bool has_beplunderedtime() const;
  inline void clear_beplunderedtime();
  static const int kBePlunderedTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TLevyOtherUserInfo</name>
  	<Function>
  		<name>beplunderedtime</name>
  		<replaceName>BePlunderedTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beplunderedtime</name>
  		<replaceName>BePlunderedTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beplunderedtime</name>
  		<replaceName>BePlunderedTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 beplunderedtime() const;
  inline void set_beplunderedtime(::google::protobuf::uint64 value);

  // optional uint64 SettleTime = 8;
  inline bool has_settletime() const;
  inline void clear_settletime();
  static const int kSettleTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TLevyOtherUserInfo</name>
  	<Function>
  		<name>settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 settletime() const;
  inline void set_settletime(::google::protobuf::uint64 value);

  // optional uint32 HaveOutput = 9;
  inline bool has_haveoutput() const;
  inline void clear_haveoutput();
  static const int kHaveOutputFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TLevyOtherUserInfo</name>
  	<Function>
  		<name>haveoutput</name>
  		<replaceName>HaveOutput</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_haveoutput</name>
  		<replaceName>HaveOutput</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_haveoutput</name>
  		<replaceName>HaveOutput</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 haveoutput() const;
  inline void set_haveoutput(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyOtherUserInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_masteruid();
  inline void clear_has_masteruid();
  inline void set_has_behelpnum();
  inline void clear_has_behelpnum();
  inline void set_has_beplunderednum();
  inline void clear_has_beplunderednum();
  inline void set_has_beplunderedtime();
  inline void clear_has_beplunderedtime();
  inline void set_has_settletime();
  inline void clear_has_settletime();
  inline void set_has_haveoutput();
  inline void clear_has_haveoutput();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* pos_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 masteruid_;
  ::google::protobuf::uint32 behelpnum_;
  ::google::protobuf::uint32 beplunderednum_;
  ::google::protobuf::uint64 beplunderedtime_;
  ::google::protobuf::uint64 settletime_;
  ::google::protobuf::uint32 haveoutput_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyOtherUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyRecordInfo : public ::google::protobuf::Message {
 public:
  TLevyRecordInfo();
  virtual ~TLevyRecordInfo();

  TLevyRecordInfo(const TLevyRecordInfo& from);

  inline TLevyRecordInfo& operator=(const TLevyRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyRecordInfo& default_instance();

  void Swap(TLevyRecordInfo* other);

  // implements Message ----------------------------------------------

  TLevyRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyRecordInfo& from);
  void MergeFrom(const TLevyRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ELevyRecordType RecordType = 1;
  inline bool has_recordtype() const;
  inline void clear_recordtype();
  static const int kRecordTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyRecordInfo</name>
  	<Function>
  		<name>recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ELevyRecordType recordtype() const;
  inline void set_recordtype(::pb::ELevyRecordType value);

  // optional uint64 RecordTime = 2;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyRecordInfo</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // repeated uint64 RecordData = 3;
  inline int recorddata_size() const;
  inline void clear_recorddata();
  static const int kRecordDataFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyRecordInfo</name>
  	<Function>
  		<name>recorddata</name>
  		<replaceName>RecordData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recorddata</name>
  		<replaceName>RecordData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recorddata</name>
  		<replaceName>RecordData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recorddata</name>
  		<replaceName>RecordData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recorddata_size</name>
  		<replaceName>RecordData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recorddata(int index) const;
  inline void set_recorddata(int index, ::google::protobuf::uint64 value);
  inline void add_recorddata(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      recorddata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_recorddata();

  // repeated string ArrUname = 4;
  inline int arruname_size() const;
  inline void clear_arruname();
  static const int kArrUnameFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLevyRecordInfo</name>
  	<Function>
  		<name>arruname</name>
  		<replaceName>ArrUname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruname</name>
  		<replaceName>ArrUname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruname</name>
  		<replaceName>ArrUname</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruname</name>
  		<replaceName>ArrUname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruname_size</name>
  		<replaceName>ArrUname</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& arruname(int index) const;
  inline ::std::string* mutable_arruname(int index);
  inline void set_arruname(int index, const ::std::string& value);
  inline void set_arruname(int index, const char* value);
  inline void set_arruname(int index, const char* value, size_t size);
  inline ::std::string* add_arruname();
  inline void add_arruname(const ::std::string& value);
  inline void add_arruname(const char* value);
  inline void add_arruname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& arruname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_arruname();

  // @@protoc_insertion_point(class_scope:pb.TLevyRecordInfo)
 private:
  inline void set_has_recordtype();
  inline void clear_has_recordtype();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 recordtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > recorddata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> arruname_;
  int recordtype_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyBattleReportInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyBattleReportInfo : public ::google::protobuf::Message {
 public:
  TLevyBattleReportInfo();
  virtual ~TLevyBattleReportInfo();

  TLevyBattleReportInfo(const TLevyBattleReportInfo& from);

  inline TLevyBattleReportInfo& operator=(const TLevyBattleReportInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyBattleReportInfo& default_instance();

  void Swap(TLevyBattleReportInfo* other);

  // implements Message ----------------------------------------------

  TLevyBattleReportInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyBattleReportInfo& from);
  void MergeFrom(const TLevyBattleReportInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ELevyBattleReportType ReportType = 1;
  inline bool has_reporttype() const;
  inline void clear_reporttype();
  static const int kReportTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyBattleReportInfo</name>
  	<Function>
  		<name>reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reporttype</name>
  		<replaceName>ReportType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ELevyBattleReportType reporttype() const;
  inline void set_reporttype(::pb::ELevyBattleReportType value);

  // optional uint64 ReportTime = 2;
  inline bool has_reporttime() const;
  inline void clear_reporttime();
  static const int kReportTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyBattleReportInfo</name>
  	<Function>
  		<name>reporttime</name>
  		<replaceName>ReportTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_reporttime</name>
  		<replaceName>ReportTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reporttime</name>
  		<replaceName>ReportTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 reporttime() const;
  inline void set_reporttime(::google::protobuf::uint64 value);

  // repeated uint64 ReportData = 3;
  inline int reportdata_size() const;
  inline void clear_reportdata();
  static const int kReportDataFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyBattleReportInfo</name>
  	<Function>
  		<name>reportdata</name>
  		<replaceName>ReportData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reportdata</name>
  		<replaceName>ReportData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reportdata</name>
  		<replaceName>ReportData</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportdata</name>
  		<replaceName>ReportData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reportdata_size</name>
  		<replaceName>ReportData</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 reportdata(int index) const;
  inline void set_reportdata(int index, ::google::protobuf::uint64 value);
  inline void add_reportdata(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      reportdata() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_reportdata();

  // repeated string ArrUname = 4;
  inline int arruname_size() const;
  inline void clear_arruname();
  static const int kArrUnameFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLevyBattleReportInfo</name>
  	<Function>
  		<name>arruname</name>
  		<replaceName>ArrUname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruname</name>
  		<replaceName>ArrUname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruname</name>
  		<replaceName>ArrUname</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruname</name>
  		<replaceName>ArrUname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruname_size</name>
  		<replaceName>ArrUname</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& arruname(int index) const;
  inline ::std::string* mutable_arruname(int index);
  inline void set_arruname(int index, const ::std::string& value);
  inline void set_arruname(int index, const char* value);
  inline void set_arruname(int index, const char* value, size_t size);
  inline ::std::string* add_arruname();
  inline void add_arruname(const ::std::string& value);
  inline void add_arruname(const char* value);
  inline void add_arruname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& arruname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_arruname();

  // @@protoc_insertion_point(class_scope:pb.TLevyBattleReportInfo)
 private:
  inline void set_has_reporttype();
  inline void clear_has_reporttype();
  inline void set_has_reporttime();
  inline void clear_has_reporttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 reporttime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > reportdata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> arruname_;
  int reporttype_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyBattleReportInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyGuildUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyGuildUserInfo : public ::google::protobuf::Message {
 public:
  TLevyGuildUserInfo();
  virtual ~TLevyGuildUserInfo();

  TLevyGuildUserInfo(const TLevyGuildUserInfo& from);

  inline TLevyGuildUserInfo& operator=(const TLevyGuildUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyGuildUserInfo& default_instance();

  void Swap(TLevyGuildUserInfo* other);

  // implements Message ----------------------------------------------

  TLevyGuildUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyGuildUserInfo& from);
  void MergeFrom(const TLevyGuildUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyGuildUserInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // optional uint64 Uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyGuildUserInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 4;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLevyGuildUserInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 ConnectNum = 5;
  inline bool has_connectnum() const;
  inline void clear_connectnum();
  static const int kConnectNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLevyGuildUserInfo</name>
  	<Function>
  		<name>connectnum</name>
  		<replaceName>ConnectNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_connectnum</name>
  		<replaceName>ConnectNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_connectnum</name>
  		<replaceName>ConnectNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 connectnum() const;
  inline void set_connectnum(::google::protobuf::uint32 value);

  // optional .pb.EGuildPost RpgPost = 6;
  inline bool has_rpgpost() const;
  inline void clear_rpgpost();
  static const int kRpgPostFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TLevyGuildUserInfo</name>
  	<Function>
  		<name>rpgpost</name>
  		<replaceName>RpgPost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rpgpost</name>
  		<replaceName>RpgPost</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rpgpost</name>
  		<replaceName>RpgPost</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EGuildPost rpgpost() const;
  inline void set_rpgpost(::pb::EGuildPost value);

  // @@protoc_insertion_point(class_scope:pb.TLevyGuildUserInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_connectnum();
  inline void clear_has_connectnum();
  inline void set_has_rpgpost();
  inline void clear_has_rpgpost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* pos_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 connectnum_;
  int rpgpost_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyGuildUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyGetUserInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyGetUserInfoRsp : public ::google::protobuf::Message {
 public:
  TLevyGetUserInfoRsp();
  virtual ~TLevyGetUserInfoRsp();

  TLevyGetUserInfoRsp(const TLevyGetUserInfoRsp& from);

  inline TLevyGetUserInfoRsp& operator=(const TLevyGetUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyGetUserInfoRsp& default_instance();

  void Swap(TLevyGetUserInfoRsp* other);

  // implements Message ----------------------------------------------

  TLevyGetUserInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyGetUserInfoRsp& from);
  void MergeFrom(const TLevyGetUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyUserInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetUserInfoRsp</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyUserInfo& userinfo() const;
  inline ::pb::TLevyUserInfo* mutable_userinfo();
  inline ::pb::TLevyUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TLevyUserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TLevyGetUserInfoRsp)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyUserInfo* userinfo_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyGetUserInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyEnterRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyEnterRsp : public ::google::protobuf::Message {
 public:
  TLevyEnterRsp();
  virtual ~TLevyEnterRsp();

  TLevyEnterRsp(const TLevyEnterRsp& from);

  inline TLevyEnterRsp& operator=(const TLevyEnterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyEnterRsp& default_instance();

  void Swap(TLevyEnterRsp* other);

  // implements Message ----------------------------------------------

  TLevyEnterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyEnterRsp& from);
  void MergeFrom(const TLevyEnterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MaxPageId = 1;
  inline bool has_maxpageid() const;
  inline void clear_maxpageid();
  static const int kMaxPageIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyEnterRsp</name>
  	<Function>
  		<name>maxpageid</name>
  		<replaceName>MaxPageId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxpageid</name>
  		<replaceName>MaxPageId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxpageid</name>
  		<replaceName>MaxPageId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxpageid() const;
  inline void set_maxpageid(::google::protobuf::uint32 value);

  // repeated .pb.TLevyRecordInfo ArrRecord = 2;
  inline int arrrecord_size() const;
  inline void clear_arrrecord();
  static const int kArrRecordFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyEnterRsp</name>
  	<Function>
  		<name>arrrecord</name>
  		<replaceName>ArrRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrecord</name>
  		<replaceName>ArrRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrecord</name>
  		<replaceName>ArrRecord</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrecord</name>
  		<replaceName>ArrRecord</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrecord_size</name>
  		<replaceName>ArrRecord</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyRecordInfo& arrrecord(int index) const;
  inline ::pb::TLevyRecordInfo* mutable_arrrecord(int index);
  inline ::pb::TLevyRecordInfo* add_arrrecord();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyRecordInfo >&
      arrrecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyRecordInfo >*
      mutable_arrrecord();

  // optional .pb.TLevyPos Pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyEnterRsp</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // @@protoc_insertion_point(class_scope:pb.TLevyEnterRsp)
 private:
  inline void set_has_maxpageid();
  inline void clear_has_maxpageid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLevyRecordInfo > arrrecord_;
  ::pb::TLevyPos* pos_;
  ::google::protobuf::uint32 maxpageid_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyEnterRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyPreviewRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyPreviewRsp : public ::google::protobuf::Message {
 public:
  TLevyPreviewRsp();
  virtual ~TLevyPreviewRsp();

  TLevyPreviewRsp(const TLevyPreviewRsp& from);

  inline TLevyPreviewRsp& operator=(const TLevyPreviewRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyPreviewRsp& default_instance();

  void Swap(TLevyPreviewRsp* other);

  // implements Message ----------------------------------------------

  TLevyPreviewRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyPreviewRsp& from);
  void MergeFrom(const TLevyPreviewRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SliverNum = 1;
  inline bool has_slivernum() const;
  inline void clear_slivernum();
  static const int kSliverNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyPreviewRsp</name>
  	<Function>
  		<name>slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slivernum() const;
  inline void set_slivernum(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward ArrReward = 2;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyPreviewRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // optional uint32 OutputDuration = 3;
  inline bool has_outputduration() const;
  inline void clear_outputduration();
  static const int kOutputDurationFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyPreviewRsp</name>
  	<Function>
  		<name>outputduration</name>
  		<replaceName>OutputDuration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_outputduration</name>
  		<replaceName>OutputDuration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_outputduration</name>
  		<replaceName>OutputDuration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 outputduration() const;
  inline void set_outputduration(::google::protobuf::uint32 value);

  // optional uint64 SettleTime = 4;
  inline bool has_settletime() const;
  inline void clear_settletime();
  static const int kSettleTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLevyPreviewRsp</name>
  	<Function>
  		<name>settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 settletime() const;
  inline void set_settletime(::google::protobuf::uint64 value);

  // optional uint32 ConnectNum = 5;
  inline bool has_connectnum() const;
  inline void clear_connectnum();
  static const int kConnectNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLevyPreviewRsp</name>
  	<Function>
  		<name>connectnum</name>
  		<replaceName>ConnectNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_connectnum</name>
  		<replaceName>ConnectNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_connectnum</name>
  		<replaceName>ConnectNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 connectnum() const;
  inline void set_connectnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyPreviewRsp)
 private:
  inline void set_has_slivernum();
  inline void clear_has_slivernum();
  inline void set_has_outputduration();
  inline void clear_has_outputduration();
  inline void set_has_settletime();
  inline void clear_has_settletime();
  inline void set_has_connectnum();
  inline void clear_has_connectnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 slivernum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  ::google::protobuf::uint64 settletime_;
  ::google::protobuf::uint32 outputduration_;
  ::google::protobuf::uint32 connectnum_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyPreviewRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyReceiveRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyReceiveRsp : public ::google::protobuf::Message {
 public:
  TLevyReceiveRsp();
  virtual ~TLevyReceiveRsp();

  TLevyReceiveRsp(const TLevyReceiveRsp& from);

  inline TLevyReceiveRsp& operator=(const TLevyReceiveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyReceiveRsp& default_instance();

  void Swap(TLevyReceiveRsp* other);

  // implements Message ----------------------------------------------

  TLevyReceiveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyReceiveRsp& from);
  void MergeFrom(const TLevyReceiveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SliverNum = 1;
  inline bool has_slivernum() const;
  inline void clear_slivernum();
  static const int kSliverNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyReceiveRsp</name>
  	<Function>
  		<name>slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slivernum() const;
  inline void set_slivernum(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward ArrReward = 2;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyReceiveRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TLevyReceiveRsp)
 private:
  inline void set_has_slivernum();
  inline void clear_has_slivernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 slivernum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyReceiveRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyGetRecordReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyGetRecordReq : public ::google::protobuf::Message {
 public:
  TLevyGetRecordReq();
  virtual ~TLevyGetRecordReq();

  TLevyGetRecordReq(const TLevyGetRecordReq& from);

  inline TLevyGetRecordReq& operator=(const TLevyGetRecordReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyGetRecordReq& default_instance();

  void Swap(TLevyGetRecordReq* other);

  // implements Message ----------------------------------------------

  TLevyGetRecordReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyGetRecordReq& from);
  void MergeFrom(const TLevyGetRecordReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.ELevyRecordType ArrRecordType = 1;
  inline int arrrecordtype_size() const;
  inline void clear_arrrecordtype();
  static const int kArrRecordTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetRecordReq</name>
  	<Function>
  		<name>arrrecordtype</name>
  		<replaceName>ArrRecordType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrecordtype</name>
  		<replaceName>ArrRecordType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrecordtype</name>
  		<replaceName>ArrRecordType</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrecordtype</name>
  		<replaceName>ArrRecordType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrecordtype_size</name>
  		<replaceName>ArrRecordType</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ELevyRecordType arrrecordtype(int index) const;
  inline void set_arrrecordtype(int index, ::pb::ELevyRecordType value);
  inline void add_arrrecordtype(::pb::ELevyRecordType value);
  inline const ::google::protobuf::RepeatedField<int>& arrrecordtype() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_arrrecordtype();

  // @@protoc_insertion_point(class_scope:pb.TLevyGetRecordReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> arrrecordtype_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyGetRecordReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyGetRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyGetRecordRsp : public ::google::protobuf::Message {
 public:
  TLevyGetRecordRsp();
  virtual ~TLevyGetRecordRsp();

  TLevyGetRecordRsp(const TLevyGetRecordRsp& from);

  inline TLevyGetRecordRsp& operator=(const TLevyGetRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyGetRecordRsp& default_instance();

  void Swap(TLevyGetRecordRsp* other);

  // implements Message ----------------------------------------------

  TLevyGetRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyGetRecordRsp& from);
  void MergeFrom(const TLevyGetRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLevyRecordInfo ArrRecord = 1;
  inline int arrrecord_size() const;
  inline void clear_arrrecord();
  static const int kArrRecordFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetRecordRsp</name>
  	<Function>
  		<name>arrrecord</name>
  		<replaceName>ArrRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrrecord</name>
  		<replaceName>ArrRecord</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrrecord</name>
  		<replaceName>ArrRecord</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrrecord</name>
  		<replaceName>ArrRecord</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrrecord_size</name>
  		<replaceName>ArrRecord</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyRecordInfo& arrrecord(int index) const;
  inline ::pb::TLevyRecordInfo* mutable_arrrecord(int index);
  inline ::pb::TLevyRecordInfo* add_arrrecord();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyRecordInfo >&
      arrrecord() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyRecordInfo >*
      mutable_arrrecord();

  // @@protoc_insertion_point(class_scope:pb.TLevyGetRecordRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLevyRecordInfo > arrrecord_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyGetRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyGetPageInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyGetPageInfoReq : public ::google::protobuf::Message {
 public:
  TLevyGetPageInfoReq();
  virtual ~TLevyGetPageInfoReq();

  TLevyGetPageInfoReq(const TLevyGetPageInfoReq& from);

  inline TLevyGetPageInfoReq& operator=(const TLevyGetPageInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyGetPageInfoReq& default_instance();

  void Swap(TLevyGetPageInfoReq* other);

  // implements Message ----------------------------------------------

  TLevyGetPageInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyGetPageInfoReq& from);
  void MergeFrom(const TLevyGetPageInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 PageId = 1;
  inline bool has_pageid() const;
  inline void clear_pageid();
  static const int kPageIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetPageInfoReq</name>
  	<Function>
  		<name>pageid</name>
  		<replaceName>PageId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pageid</name>
  		<replaceName>PageId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pageid</name>
  		<replaceName>PageId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pageid() const;
  inline void set_pageid(::google::protobuf::uint32 value);

  // optional uint32 Index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetPageInfoReq</name>
  	<Function>
  		<name>index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // repeated uint32 ArrPageIndex = 3;
  inline int arrpageindex_size() const;
  inline void clear_arrpageindex();
  static const int kArrPageIndexFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetPageInfoReq</name>
  	<Function>
  		<name>arrpageindex</name>
  		<replaceName>ArrPageIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrpageindex</name>
  		<replaceName>ArrPageIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrpageindex</name>
  		<replaceName>ArrPageIndex</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrpageindex</name>
  		<replaceName>ArrPageIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrpageindex_size</name>
  		<replaceName>ArrPageIndex</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrpageindex(int index) const;
  inline void set_arrpageindex(int index, ::google::protobuf::uint32 value);
  inline void add_arrpageindex(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrpageindex() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrpageindex();

  // @@protoc_insertion_point(class_scope:pb.TLevyGetPageInfoReq)
 private:
  inline void set_has_pageid();
  inline void clear_has_pageid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 pageid_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrpageindex_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyGetPageInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyGetPageInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyGetPageInfoRsp : public ::google::protobuf::Message {
 public:
  TLevyGetPageInfoRsp();
  virtual ~TLevyGetPageInfoRsp();

  TLevyGetPageInfoRsp(const TLevyGetPageInfoRsp& from);

  inline TLevyGetPageInfoRsp& operator=(const TLevyGetPageInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyGetPageInfoRsp& default_instance();

  void Swap(TLevyGetPageInfoRsp* other);

  // implements Message ----------------------------------------------

  TLevyGetPageInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyGetPageInfoRsp& from);
  void MergeFrom(const TLevyGetPageInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLevyOtherUserInfo ArrUserLevyInfo = 1;
  inline int arruserlevyinfo_size() const;
  inline void clear_arruserlevyinfo();
  static const int kArrUserLevyInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetPageInfoRsp</name>
  	<Function>
  		<name>arruserlevyinfo</name>
  		<replaceName>ArrUserLevyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruserlevyinfo</name>
  		<replaceName>ArrUserLevyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruserlevyinfo</name>
  		<replaceName>ArrUserLevyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruserlevyinfo</name>
  		<replaceName>ArrUserLevyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruserlevyinfo_size</name>
  		<replaceName>ArrUserLevyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyOtherUserInfo& arruserlevyinfo(int index) const;
  inline ::pb::TLevyOtherUserInfo* mutable_arruserlevyinfo(int index);
  inline ::pb::TLevyOtherUserInfo* add_arruserlevyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyOtherUserInfo >&
      arruserlevyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyOtherUserInfo >*
      mutable_arruserlevyinfo();

  // repeated .pb.TUserSimpleInfo ArrUserInfo = 2;
  inline int arruserinfo_size() const;
  inline void clear_arruserinfo();
  static const int kArrUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetPageInfoRsp</name>
  	<Function>
  		<name>arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruserinfo_size</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arruserinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arruserinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arruserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arruserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arruserinfo();

  // @@protoc_insertion_point(class_scope:pb.TLevyGetPageInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLevyOtherUserInfo > arruserlevyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arruserinfo_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyGetPageInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyGetCityInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyGetCityInfoReq : public ::google::protobuf::Message {
 public:
  TLevyGetCityInfoReq();
  virtual ~TLevyGetCityInfoReq();

  TLevyGetCityInfoReq(const TLevyGetCityInfoReq& from);

  inline TLevyGetCityInfoReq& operator=(const TLevyGetCityInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyGetCityInfoReq& default_instance();

  void Swap(TLevyGetCityInfoReq* other);

  // implements Message ----------------------------------------------

  TLevyGetCityInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyGetCityInfoReq& from);
  void MergeFrom(const TLevyGetCityInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLevyPos ArrPos = 1;
  inline int arrpos_size() const;
  inline void clear_arrpos();
  static const int kArrPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetCityInfoReq</name>
  	<Function>
  		<name>arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrpos</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrpos_size</name>
  		<replaceName>ArrPos</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& arrpos(int index) const;
  inline ::pb::TLevyPos* mutable_arrpos(int index);
  inline ::pb::TLevyPos* add_arrpos();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyPos >&
      arrpos() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyPos >*
      mutable_arrpos();

  // repeated uint64 ArrTargetUid = 2;
  inline int arrtargetuid_size() const;
  inline void clear_arrtargetuid();
  static const int kArrTargetUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetCityInfoReq</name>
  	<Function>
  		<name>arrtargetuid</name>
  		<replaceName>ArrTargetUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrtargetuid</name>
  		<replaceName>ArrTargetUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrtargetuid</name>
  		<replaceName>ArrTargetUid</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrtargetuid</name>
  		<replaceName>ArrTargetUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrtargetuid_size</name>
  		<replaceName>ArrTargetUid</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 arrtargetuid(int index) const;
  inline void set_arrtargetuid(int index, ::google::protobuf::uint64 value);
  inline void add_arrtargetuid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      arrtargetuid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_arrtargetuid();

  // @@protoc_insertion_point(class_scope:pb.TLevyGetCityInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLevyPos > arrpos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > arrtargetuid_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyGetCityInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyGetCityInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyGetCityInfoRsp : public ::google::protobuf::Message {
 public:
  TLevyGetCityInfoRsp();
  virtual ~TLevyGetCityInfoRsp();

  TLevyGetCityInfoRsp(const TLevyGetCityInfoRsp& from);

  inline TLevyGetCityInfoRsp& operator=(const TLevyGetCityInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyGetCityInfoRsp& default_instance();

  void Swap(TLevyGetCityInfoRsp* other);

  // implements Message ----------------------------------------------

  TLevyGetCityInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyGetCityInfoRsp& from);
  void MergeFrom(const TLevyGetCityInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLevyOtherUserInfo ArrUserLevyInfo = 1;
  inline int arruserlevyinfo_size() const;
  inline void clear_arruserlevyinfo();
  static const int kArrUserLevyInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetCityInfoRsp</name>
  	<Function>
  		<name>arruserlevyinfo</name>
  		<replaceName>ArrUserLevyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruserlevyinfo</name>
  		<replaceName>ArrUserLevyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruserlevyinfo</name>
  		<replaceName>ArrUserLevyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruserlevyinfo</name>
  		<replaceName>ArrUserLevyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruserlevyinfo_size</name>
  		<replaceName>ArrUserLevyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyOtherUserInfo& arruserlevyinfo(int index) const;
  inline ::pb::TLevyOtherUserInfo* mutable_arruserlevyinfo(int index);
  inline ::pb::TLevyOtherUserInfo* add_arruserlevyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyOtherUserInfo >&
      arruserlevyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyOtherUserInfo >*
      mutable_arruserlevyinfo();

  // repeated .pb.TUserSimpleInfo ArrUserInfo = 2;
  inline int arruserinfo_size() const;
  inline void clear_arruserinfo();
  static const int kArrUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetCityInfoRsp</name>
  	<Function>
  		<name>arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arruserinfo</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arruserinfo_size</name>
  		<replaceName>ArrUserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& arruserinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_arruserinfo(int index);
  inline ::pb::TUserSimpleInfo* add_arruserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      arruserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_arruserinfo();

  // @@protoc_insertion_point(class_scope:pb.TLevyGetCityInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLevyOtherUserInfo > arruserlevyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > arruserinfo_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyGetCityInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyForceLevyRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyForceLevyRsp : public ::google::protobuf::Message {
 public:
  TLevyForceLevyRsp();
  virtual ~TLevyForceLevyRsp();

  TLevyForceLevyRsp(const TLevyForceLevyRsp& from);

  inline TLevyForceLevyRsp& operator=(const TLevyForceLevyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyForceLevyRsp& default_instance();

  void Swap(TLevyForceLevyRsp* other);

  // implements Message ----------------------------------------------

  TLevyForceLevyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyForceLevyRsp& from);
  void MergeFrom(const TLevyForceLevyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SliverNum = 1;
  inline bool has_slivernum() const;
  inline void clear_slivernum();
  static const int kSliverNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyForceLevyRsp</name>
  	<Function>
  		<name>slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slivernum() const;
  inline void set_slivernum(::google::protobuf::uint64 value);

  // repeated .pb.TCommonReward ArrReward = 2;
  inline int arrreward_size() const;
  inline void clear_arrreward();
  static const int kArrRewardFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyForceLevyRsp</name>
  	<Function>
  		<name>arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreward</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreward_size</name>
  		<replaceName>ArrReward</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& arrreward(int index) const;
  inline ::pb::TCommonReward* mutable_arrreward(int index);
  inline ::pb::TCommonReward* add_arrreward();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      arrreward() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_arrreward();

  // @@protoc_insertion_point(class_scope:pb.TLevyForceLevyRsp)
 private:
  inline void set_has_slivernum();
  inline void clear_has_slivernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 slivernum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > arrreward_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyForceLevyRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyHelpReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyHelpReq : public ::google::protobuf::Message {
 public:
  TLevyHelpReq();
  virtual ~TLevyHelpReq();

  TLevyHelpReq(const TLevyHelpReq& from);

  inline TLevyHelpReq& operator=(const TLevyHelpReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyHelpReq& default_instance();

  void Swap(TLevyHelpReq* other);

  // implements Message ----------------------------------------------

  TLevyHelpReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyHelpReq& from);
  void MergeFrom(const TLevyHelpReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyHelpReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // optional uint64 TargetUid = 2;
  inline bool has_targetuid() const;
  inline void clear_targetuid();
  static const int kTargetUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyHelpReq</name>
  	<Function>
  		<name>targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetuid() const;
  inline void set_targetuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyHelpReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_targetuid();
  inline void clear_has_targetuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* pos_;
  ::google::protobuf::uint64 targetuid_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyHelpReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyHelpRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyHelpRsp : public ::google::protobuf::Message {
 public:
  TLevyHelpRsp();
  virtual ~TLevyHelpRsp();

  TLevyHelpRsp(const TLevyHelpRsp& from);

  inline TLevyHelpRsp& operator=(const TLevyHelpRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyHelpRsp& default_instance();

  void Swap(TLevyHelpRsp* other);

  // implements Message ----------------------------------------------

  TLevyHelpRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyHelpRsp& from);
  void MergeFrom(const TLevyHelpRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SliverNum = 1;
  inline bool has_slivernum() const;
  inline void clear_slivernum();
  static const int kSliverNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyHelpRsp</name>
  	<Function>
  		<name>slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slivernum() const;
  inline void set_slivernum(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyHelpRsp)
 private:
  inline void set_has_slivernum();
  inline void clear_has_slivernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 slivernum_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyHelpRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyConquerReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyConquerReq : public ::google::protobuf::Message {
 public:
  TLevyConquerReq();
  virtual ~TLevyConquerReq();

  TLevyConquerReq(const TLevyConquerReq& from);

  inline TLevyConquerReq& operator=(const TLevyConquerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyConquerReq& default_instance();

  void Swap(TLevyConquerReq* other);

  // implements Message ----------------------------------------------

  TLevyConquerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyConquerReq& from);
  void MergeFrom(const TLevyConquerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyConquerReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // optional uint64 TargetUid = 2;
  inline bool has_targetuid() const;
  inline void clear_targetuid();
  static const int kTargetUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyConquerReq</name>
  	<Function>
  		<name>targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetuid() const;
  inline void set_targetuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyConquerReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_targetuid();
  inline void clear_has_targetuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* pos_;
  ::google::protobuf::uint64 targetuid_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyConquerReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyConquerRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyConquerRsp : public ::google::protobuf::Message {
 public:
  TLevyConquerRsp();
  virtual ~TLevyConquerRsp();

  TLevyConquerRsp(const TLevyConquerRsp& from);

  inline TLevyConquerRsp& operator=(const TLevyConquerRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyConquerRsp& default_instance();

  void Swap(TLevyConquerRsp* other);

  // implements Message ----------------------------------------------

  TLevyConquerRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyConquerRsp& from);
  void MergeFrom(const TLevyConquerRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleResult BattleRet = 1;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyConquerRsp</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleret() const;
  inline ::pb::TBattleResult* mutable_battleret();
  inline ::pb::TBattleResult* release_battleret();
  inline void set_allocated_battleret(::pb::TBattleResult* battleret);

  // optional uint32 Success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyConquerRsp</name>
  	<Function>
  		<name>success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 success() const;
  inline void set_success(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyConquerRsp)
 private:
  inline void set_has_battleret();
  inline void clear_has_battleret();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleResult* battleret_;
  ::google::protobuf::uint32 success_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyConquerRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyReleaseSlaveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyReleaseSlaveReq : public ::google::protobuf::Message {
 public:
  TLevyReleaseSlaveReq();
  virtual ~TLevyReleaseSlaveReq();

  TLevyReleaseSlaveReq(const TLevyReleaseSlaveReq& from);

  inline TLevyReleaseSlaveReq& operator=(const TLevyReleaseSlaveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyReleaseSlaveReq& default_instance();

  void Swap(TLevyReleaseSlaveReq* other);

  // implements Message ----------------------------------------------

  TLevyReleaseSlaveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyReleaseSlaveReq& from);
  void MergeFrom(const TLevyReleaseSlaveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SlaveUid = 1;
  inline bool has_slaveuid() const;
  inline void clear_slaveuid();
  static const int kSlaveUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyReleaseSlaveReq</name>
  	<Function>
  		<name>slaveuid</name>
  		<replaceName>SlaveUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slaveuid</name>
  		<replaceName>SlaveUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slaveuid</name>
  		<replaceName>SlaveUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slaveuid() const;
  inline void set_slaveuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyReleaseSlaveReq)
 private:
  inline void set_has_slaveuid();
  inline void clear_has_slaveuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 slaveuid_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyReleaseSlaveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyRebelRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyRebelRsp : public ::google::protobuf::Message {
 public:
  TLevyRebelRsp();
  virtual ~TLevyRebelRsp();

  TLevyRebelRsp(const TLevyRebelRsp& from);

  inline TLevyRebelRsp& operator=(const TLevyRebelRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyRebelRsp& default_instance();

  void Swap(TLevyRebelRsp* other);

  // implements Message ----------------------------------------------

  TLevyRebelRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyRebelRsp& from);
  void MergeFrom(const TLevyRebelRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleResult BattleRet = 1;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyRebelRsp</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleret() const;
  inline ::pb::TBattleResult* mutable_battleret();
  inline ::pb::TBattleResult* release_battleret();
  inline void set_allocated_battleret(::pb::TBattleResult* battleret);

  // optional uint32 Success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyRebelRsp</name>
  	<Function>
  		<name>success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 success() const;
  inline void set_success(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyRebelRsp)
 private:
  inline void set_has_battleret();
  inline void clear_has_battleret();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleResult* battleret_;
  ::google::protobuf::uint32 success_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyRebelRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyPlunderReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyPlunderReq : public ::google::protobuf::Message {
 public:
  TLevyPlunderReq();
  virtual ~TLevyPlunderReq();

  TLevyPlunderReq(const TLevyPlunderReq& from);

  inline TLevyPlunderReq& operator=(const TLevyPlunderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyPlunderReq& default_instance();

  void Swap(TLevyPlunderReq* other);

  // implements Message ----------------------------------------------

  TLevyPlunderReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyPlunderReq& from);
  void MergeFrom(const TLevyPlunderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyPlunderReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // optional uint64 TargetUid = 2;
  inline bool has_targetuid() const;
  inline void clear_targetuid();
  static const int kTargetUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyPlunderReq</name>
  	<Function>
  		<name>targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetuid() const;
  inline void set_targetuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyPlunderReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_targetuid();
  inline void clear_has_targetuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* pos_;
  ::google::protobuf::uint64 targetuid_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyPlunderReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyPlunderRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyPlunderRsp : public ::google::protobuf::Message {
 public:
  TLevyPlunderRsp();
  virtual ~TLevyPlunderRsp();

  TLevyPlunderRsp(const TLevyPlunderRsp& from);

  inline TLevyPlunderRsp& operator=(const TLevyPlunderRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyPlunderRsp& default_instance();

  void Swap(TLevyPlunderRsp* other);

  // implements Message ----------------------------------------------

  TLevyPlunderRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyPlunderRsp& from);
  void MergeFrom(const TLevyPlunderRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleResult BattleRet = 1;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyPlunderRsp</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleret() const;
  inline ::pb::TBattleResult* mutable_battleret();
  inline ::pb::TBattleResult* release_battleret();
  inline void set_allocated_battleret(::pb::TBattleResult* battleret);

  // optional uint32 Success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyPlunderRsp</name>
  	<Function>
  		<name>success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 success() const;
  inline void set_success(::google::protobuf::uint32 value);

  // optional uint64 SliverNum = 3;
  inline bool has_slivernum() const;
  inline void clear_slivernum();
  static const int kSliverNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyPlunderRsp</name>
  	<Function>
  		<name>slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slivernum() const;
  inline void set_slivernum(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyPlunderRsp)
 private:
  inline void set_has_battleret();
  inline void clear_has_battleret();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_slivernum();
  inline void clear_has_slivernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleResult* battleret_;
  ::google::protobuf::uint64 slivernum_;
  ::google::protobuf::uint32 success_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyPlunderRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyPlunderPreviewReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyPlunderPreviewReq : public ::google::protobuf::Message {
 public:
  TLevyPlunderPreviewReq();
  virtual ~TLevyPlunderPreviewReq();

  TLevyPlunderPreviewReq(const TLevyPlunderPreviewReq& from);

  inline TLevyPlunderPreviewReq& operator=(const TLevyPlunderPreviewReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyPlunderPreviewReq& default_instance();

  void Swap(TLevyPlunderPreviewReq* other);

  // implements Message ----------------------------------------------

  TLevyPlunderPreviewReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyPlunderPreviewReq& from);
  void MergeFrom(const TLevyPlunderPreviewReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyPlunderPreviewReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // optional uint64 TargetUid = 2;
  inline bool has_targetuid() const;
  inline void clear_targetuid();
  static const int kTargetUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyPlunderPreviewReq</name>
  	<Function>
  		<name>targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetuid() const;
  inline void set_targetuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyPlunderPreviewReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_targetuid();
  inline void clear_has_targetuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* pos_;
  ::google::protobuf::uint64 targetuid_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyPlunderPreviewReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyPlunderPreviewRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyPlunderPreviewRsp : public ::google::protobuf::Message {
 public:
  TLevyPlunderPreviewRsp();
  virtual ~TLevyPlunderPreviewRsp();

  TLevyPlunderPreviewRsp(const TLevyPlunderPreviewRsp& from);

  inline TLevyPlunderPreviewRsp& operator=(const TLevyPlunderPreviewRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyPlunderPreviewRsp& default_instance();

  void Swap(TLevyPlunderPreviewRsp* other);

  // implements Message ----------------------------------------------

  TLevyPlunderPreviewRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyPlunderPreviewRsp& from);
  void MergeFrom(const TLevyPlunderPreviewRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SliverNum = 1;
  inline bool has_slivernum() const;
  inline void clear_slivernum();
  static const int kSliverNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyPlunderPreviewRsp</name>
  	<Function>
  		<name>slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slivernum() const;
  inline void set_slivernum(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyPlunderPreviewRsp)
 private:
  inline void set_has_slivernum();
  inline void clear_has_slivernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 slivernum_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyPlunderPreviewRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyTrainReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyTrainReq : public ::google::protobuf::Message {
 public:
  TLevyTrainReq();
  virtual ~TLevyTrainReq();

  TLevyTrainReq(const TLevyTrainReq& from);

  inline TLevyTrainReq& operator=(const TLevyTrainReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyTrainReq& default_instance();

  void Swap(TLevyTrainReq* other);

  // implements Message ----------------------------------------------

  TLevyTrainReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyTrainReq& from);
  void MergeFrom(const TLevyTrainReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SlaveUid = 1;
  inline bool has_slaveuid() const;
  inline void clear_slaveuid();
  static const int kSlaveUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyTrainReq</name>
  	<Function>
  		<name>slaveuid</name>
  		<replaceName>SlaveUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slaveuid</name>
  		<replaceName>SlaveUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slaveuid</name>
  		<replaceName>SlaveUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slaveuid() const;
  inline void set_slaveuid(::google::protobuf::uint64 value);

  // optional uint32 TrainId = 2;
  inline bool has_trainid() const;
  inline void clear_trainid();
  static const int kTrainIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyTrainReq</name>
  	<Function>
  		<name>trainid</name>
  		<replaceName>TrainId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_trainid</name>
  		<replaceName>TrainId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_trainid</name>
  		<replaceName>TrainId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 trainid() const;
  inline void set_trainid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyTrainReq)
 private:
  inline void set_has_slaveuid();
  inline void clear_has_slaveuid();
  inline void set_has_trainid();
  inline void clear_has_trainid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 slaveuid_;
  ::google::protobuf::uint32 trainid_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyTrainReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyMoveCityToEmptyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyMoveCityToEmptyReq : public ::google::protobuf::Message {
 public:
  TLevyMoveCityToEmptyReq();
  virtual ~TLevyMoveCityToEmptyReq();

  TLevyMoveCityToEmptyReq(const TLevyMoveCityToEmptyReq& from);

  inline TLevyMoveCityToEmptyReq& operator=(const TLevyMoveCityToEmptyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyMoveCityToEmptyReq& default_instance();

  void Swap(TLevyMoveCityToEmptyReq* other);

  // implements Message ----------------------------------------------

  TLevyMoveCityToEmptyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyMoveCityToEmptyReq& from);
  void MergeFrom(const TLevyMoveCityToEmptyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyMoveCityToEmptyReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // @@protoc_insertion_point(class_scope:pb.TLevyMoveCityToEmptyReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* pos_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyMoveCityToEmptyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyMoveCityToEmptyRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyMoveCityToEmptyRsp : public ::google::protobuf::Message {
 public:
  TLevyMoveCityToEmptyRsp();
  virtual ~TLevyMoveCityToEmptyRsp();

  TLevyMoveCityToEmptyRsp(const TLevyMoveCityToEmptyRsp& from);

  inline TLevyMoveCityToEmptyRsp& operator=(const TLevyMoveCityToEmptyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyMoveCityToEmptyRsp& default_instance();

  void Swap(TLevyMoveCityToEmptyRsp* other);

  // implements Message ----------------------------------------------

  TLevyMoveCityToEmptyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyMoveCityToEmptyRsp& from);
  void MergeFrom(const TLevyMoveCityToEmptyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SliverNum = 1;
  inline bool has_slivernum() const;
  inline void clear_slivernum();
  static const int kSliverNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyMoveCityToEmptyRsp</name>
  	<Function>
  		<name>slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slivernum() const;
  inline void set_slivernum(::google::protobuf::uint64 value);

  // optional uint32 OutputDuration = 2;
  inline bool has_outputduration() const;
  inline void clear_outputduration();
  static const int kOutputDurationFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyMoveCityToEmptyRsp</name>
  	<Function>
  		<name>outputduration</name>
  		<replaceName>OutputDuration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_outputduration</name>
  		<replaceName>OutputDuration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_outputduration</name>
  		<replaceName>OutputDuration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 outputduration() const;
  inline void set_outputduration(::google::protobuf::uint32 value);

  // optional uint64 SettleTime = 3;
  inline bool has_settletime() const;
  inline void clear_settletime();
  static const int kSettleTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyMoveCityToEmptyRsp</name>
  	<Function>
  		<name>settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 settletime() const;
  inline void set_settletime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyMoveCityToEmptyRsp)
 private:
  inline void set_has_slivernum();
  inline void clear_has_slivernum();
  inline void set_has_outputduration();
  inline void clear_has_outputduration();
  inline void set_has_settletime();
  inline void clear_has_settletime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 slivernum_;
  ::google::protobuf::uint64 settletime_;
  ::google::protobuf::uint32 outputduration_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyMoveCityToEmptyRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyForceMoveCityReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyForceMoveCityReq : public ::google::protobuf::Message {
 public:
  TLevyForceMoveCityReq();
  virtual ~TLevyForceMoveCityReq();

  TLevyForceMoveCityReq(const TLevyForceMoveCityReq& from);

  inline TLevyForceMoveCityReq& operator=(const TLevyForceMoveCityReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyForceMoveCityReq& default_instance();

  void Swap(TLevyForceMoveCityReq* other);

  // implements Message ----------------------------------------------

  TLevyForceMoveCityReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyForceMoveCityReq& from);
  void MergeFrom(const TLevyForceMoveCityReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyForceMoveCityReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // optional uint64 TargetUid = 2;
  inline bool has_targetuid() const;
  inline void clear_targetuid();
  static const int kTargetUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyForceMoveCityReq</name>
  	<Function>
  		<name>targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetuid() const;
  inline void set_targetuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyForceMoveCityReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_targetuid();
  inline void clear_has_targetuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* pos_;
  ::google::protobuf::uint64 targetuid_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyForceMoveCityReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyForceMoveCityRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyForceMoveCityRsp : public ::google::protobuf::Message {
 public:
  TLevyForceMoveCityRsp();
  virtual ~TLevyForceMoveCityRsp();

  TLevyForceMoveCityRsp(const TLevyForceMoveCityRsp& from);

  inline TLevyForceMoveCityRsp& operator=(const TLevyForceMoveCityRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyForceMoveCityRsp& default_instance();

  void Swap(TLevyForceMoveCityRsp* other);

  // implements Message ----------------------------------------------

  TLevyForceMoveCityRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyForceMoveCityRsp& from);
  void MergeFrom(const TLevyForceMoveCityRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleResult BattleRet = 1;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyForceMoveCityRsp</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleret() const;
  inline ::pb::TBattleResult* mutable_battleret();
  inline ::pb::TBattleResult* release_battleret();
  inline void set_allocated_battleret(::pb::TBattleResult* battleret);

  // optional uint32 Success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyForceMoveCityRsp</name>
  	<Function>
  		<name>success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 success() const;
  inline void set_success(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyForceMoveCityRsp)
 private:
  inline void set_has_battleret();
  inline void clear_has_battleret();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleResult* battleret_;
  ::google::protobuf::uint32 success_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyForceMoveCityRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyStormReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyStormReq : public ::google::protobuf::Message {
 public:
  TLevyStormReq();
  virtual ~TLevyStormReq();

  TLevyStormReq(const TLevyStormReq& from);

  inline TLevyStormReq& operator=(const TLevyStormReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyStormReq& default_instance();

  void Swap(TLevyStormReq* other);

  // implements Message ----------------------------------------------

  TLevyStormReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyStormReq& from);
  void MergeFrom(const TLevyStormReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyStormReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // optional uint64 TargetUid = 2;
  inline bool has_targetuid() const;
  inline void clear_targetuid();
  static const int kTargetUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyStormReq</name>
  	<Function>
  		<name>targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetuid() const;
  inline void set_targetuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyStormReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_targetuid();
  inline void clear_has_targetuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* pos_;
  ::google::protobuf::uint64 targetuid_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyStormReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyStormRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyStormRsp : public ::google::protobuf::Message {
 public:
  TLevyStormRsp();
  virtual ~TLevyStormRsp();

  TLevyStormRsp(const TLevyStormRsp& from);

  inline TLevyStormRsp& operator=(const TLevyStormRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyStormRsp& default_instance();

  void Swap(TLevyStormRsp* other);

  // implements Message ----------------------------------------------

  TLevyStormRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyStormRsp& from);
  void MergeFrom(const TLevyStormRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleResult BattleRet = 1;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyStormRsp</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleResult& battleret() const;
  inline ::pb::TBattleResult* mutable_battleret();
  inline ::pb::TBattleResult* release_battleret();
  inline void set_allocated_battleret(::pb::TBattleResult* battleret);

  // optional uint32 Success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyStormRsp</name>
  	<Function>
  		<name>success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_success</name>
  		<replaceName>Success</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 success() const;
  inline void set_success(::google::protobuf::uint32 value);

  // optional uint64 SliverNum = 3;
  inline bool has_slivernum() const;
  inline void clear_slivernum();
  static const int kSliverNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyStormRsp</name>
  	<Function>
  		<name>slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slivernum() const;
  inline void set_slivernum(::google::protobuf::uint64 value);

  // optional .pb.TLevyPos TargetNewPos = 4;
  inline bool has_targetnewpos() const;
  inline void clear_targetnewpos();
  static const int kTargetNewPosFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLevyStormRsp</name>
  	<Function>
  		<name>targetnewpos</name>
  		<replaceName>TargetNewPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetnewpos</name>
  		<replaceName>TargetNewPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_targetnewpos</name>
  		<replaceName>TargetNewPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetnewpos</name>
  		<replaceName>TargetNewPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& targetnewpos() const;
  inline ::pb::TLevyPos* mutable_targetnewpos();
  inline ::pb::TLevyPos* release_targetnewpos();
  inline void set_allocated_targetnewpos(::pb::TLevyPos* targetnewpos);

  // @@protoc_insertion_point(class_scope:pb.TLevyStormRsp)
 private:
  inline void set_has_battleret();
  inline void clear_has_battleret();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_slivernum();
  inline void clear_has_slivernum();
  inline void set_has_targetnewpos();
  inline void clear_has_targetnewpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleResult* battleret_;
  ::google::protobuf::uint64 slivernum_;
  ::pb::TLevyPos* targetnewpos_;
  ::google::protobuf::uint32 success_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyStormRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyStormPreviewReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyStormPreviewReq : public ::google::protobuf::Message {
 public:
  TLevyStormPreviewReq();
  virtual ~TLevyStormPreviewReq();

  TLevyStormPreviewReq(const TLevyStormPreviewReq& from);

  inline TLevyStormPreviewReq& operator=(const TLevyStormPreviewReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyStormPreviewReq& default_instance();

  void Swap(TLevyStormPreviewReq* other);

  // implements Message ----------------------------------------------

  TLevyStormPreviewReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyStormPreviewReq& from);
  void MergeFrom(const TLevyStormPreviewReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyStormPreviewReq</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& pos() const;
  inline ::pb::TLevyPos* mutable_pos();
  inline ::pb::TLevyPos* release_pos();
  inline void set_allocated_pos(::pb::TLevyPos* pos);

  // optional uint64 TargetUid = 2;
  inline bool has_targetuid() const;
  inline void clear_targetuid();
  static const int kTargetUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyStormPreviewReq</name>
  	<Function>
  		<name>targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetuid</name>
  		<replaceName>TargetUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetuid() const;
  inline void set_targetuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyStormPreviewReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_targetuid();
  inline void clear_has_targetuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* pos_;
  ::google::protobuf::uint64 targetuid_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyStormPreviewReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyStormPreviewRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyStormPreviewRsp : public ::google::protobuf::Message {
 public:
  TLevyStormPreviewRsp();
  virtual ~TLevyStormPreviewRsp();

  TLevyStormPreviewRsp(const TLevyStormPreviewRsp& from);

  inline TLevyStormPreviewRsp& operator=(const TLevyStormPreviewRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyStormPreviewRsp& default_instance();

  void Swap(TLevyStormPreviewRsp* other);

  // implements Message ----------------------------------------------

  TLevyStormPreviewRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyStormPreviewRsp& from);
  void MergeFrom(const TLevyStormPreviewRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 SliverNum = 1;
  inline bool has_slivernum() const;
  inline void clear_slivernum();
  static const int kSliverNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyStormPreviewRsp</name>
  	<Function>
  		<name>slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slivernum</name>
  		<replaceName>SliverNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 slivernum() const;
  inline void set_slivernum(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyStormPreviewRsp)
 private:
  inline void set_has_slivernum();
  inline void clear_has_slivernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 slivernum_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyStormPreviewRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyGetLevyBattleReportReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyGetLevyBattleReportReq : public ::google::protobuf::Message {
 public:
  TLevyGetLevyBattleReportReq();
  virtual ~TLevyGetLevyBattleReportReq();

  TLevyGetLevyBattleReportReq(const TLevyGetLevyBattleReportReq& from);

  inline TLevyGetLevyBattleReportReq& operator=(const TLevyGetLevyBattleReportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyGetLevyBattleReportReq& default_instance();

  void Swap(TLevyGetLevyBattleReportReq* other);

  // implements Message ----------------------------------------------

  TLevyGetLevyBattleReportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyGetLevyBattleReportReq& from);
  void MergeFrom(const TLevyGetLevyBattleReportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetLevyBattleReportReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetLevyBattleReportReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyGetLevyBattleReportReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyGetLevyBattleReportReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyGetLevyBattleReportRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyGetLevyBattleReportRsp : public ::google::protobuf::Message {
 public:
  TLevyGetLevyBattleReportRsp();
  virtual ~TLevyGetLevyBattleReportRsp();

  TLevyGetLevyBattleReportRsp(const TLevyGetLevyBattleReportRsp& from);

  inline TLevyGetLevyBattleReportRsp& operator=(const TLevyGetLevyBattleReportRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyGetLevyBattleReportRsp& default_instance();

  void Swap(TLevyGetLevyBattleReportRsp* other);

  // implements Message ----------------------------------------------

  TLevyGetLevyBattleReportRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyGetLevyBattleReportRsp& from);
  void MergeFrom(const TLevyGetLevyBattleReportRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLevyBattleReportInfo ArrReportInfo = 1;
  inline int arrreportinfo_size() const;
  inline void clear_arrreportinfo();
  static const int kArrReportInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetLevyBattleReportRsp</name>
  	<Function>
  		<name>arrreportinfo</name>
  		<replaceName>ArrReportInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrreportinfo</name>
  		<replaceName>ArrReportInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrreportinfo</name>
  		<replaceName>ArrReportInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrreportinfo</name>
  		<replaceName>ArrReportInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrreportinfo_size</name>
  		<replaceName>ArrReportInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyBattleReportInfo& arrreportinfo(int index) const;
  inline ::pb::TLevyBattleReportInfo* mutable_arrreportinfo(int index);
  inline ::pb::TLevyBattleReportInfo* add_arrreportinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyBattleReportInfo >&
      arrreportinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyBattleReportInfo >*
      mutable_arrreportinfo();

  // @@protoc_insertion_point(class_scope:pb.TLevyGetLevyBattleReportRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLevyBattleReportInfo > arrreportinfo_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyGetLevyBattleReportRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyGetGuildUserListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyGetGuildUserListRsp : public ::google::protobuf::Message {
 public:
  TLevyGetGuildUserListRsp();
  virtual ~TLevyGetGuildUserListRsp();

  TLevyGetGuildUserListRsp(const TLevyGetGuildUserListRsp& from);

  inline TLevyGetGuildUserListRsp& operator=(const TLevyGetGuildUserListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyGetGuildUserListRsp& default_instance();

  void Swap(TLevyGetGuildUserListRsp* other);

  // implements Message ----------------------------------------------

  TLevyGetGuildUserListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyGetGuildUserListRsp& from);
  void MergeFrom(const TLevyGetGuildUserListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLevyGuildUserInfo ArrGuildUserInfo = 1;
  inline int arrguilduserinfo_size() const;
  inline void clear_arrguilduserinfo();
  static const int kArrGuildUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyGetGuildUserListRsp</name>
  	<Function>
  		<name>arrguilduserinfo</name>
  		<replaceName>ArrGuildUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrguilduserinfo</name>
  		<replaceName>ArrGuildUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrguilduserinfo</name>
  		<replaceName>ArrGuildUserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrguilduserinfo</name>
  		<replaceName>ArrGuildUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrguilduserinfo_size</name>
  		<replaceName>ArrGuildUserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyGuildUserInfo& arrguilduserinfo(int index) const;
  inline ::pb::TLevyGuildUserInfo* mutable_arrguilduserinfo(int index);
  inline ::pb::TLevyGuildUserInfo* add_arrguilduserinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyGuildUserInfo >&
      arrguilduserinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyGuildUserInfo >*
      mutable_arrguilduserinfo();

  // @@protoc_insertion_point(class_scope:pb.TLevyGetGuildUserListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLevyGuildUserInfo > arrguilduserinfo_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyGetGuildUserListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyReceiveAchievementRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyReceiveAchievementRewardReq : public ::google::protobuf::Message {
 public:
  TLevyReceiveAchievementRewardReq();
  virtual ~TLevyReceiveAchievementRewardReq();

  TLevyReceiveAchievementRewardReq(const TLevyReceiveAchievementRewardReq& from);

  inline TLevyReceiveAchievementRewardReq& operator=(const TLevyReceiveAchievementRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyReceiveAchievementRewardReq& default_instance();

  void Swap(TLevyReceiveAchievementRewardReq* other);

  // implements Message ----------------------------------------------

  TLevyReceiveAchievementRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyReceiveAchievementRewardReq& from);
  void MergeFrom(const TLevyReceiveAchievementRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyReceiveAchievementRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TLevyReceiveAchievementRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyReceiveAchievementRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyReceiveAchievementRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyReceiveAchievementRewardRsp : public ::google::protobuf::Message {
 public:
  TLevyReceiveAchievementRewardRsp();
  virtual ~TLevyReceiveAchievementRewardRsp();

  TLevyReceiveAchievementRewardRsp(const TLevyReceiveAchievementRewardRsp& from);

  inline TLevyReceiveAchievementRewardRsp& operator=(const TLevyReceiveAchievementRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyReceiveAchievementRewardRsp& default_instance();

  void Swap(TLevyReceiveAchievementRewardRsp* other);

  // implements Message ----------------------------------------------

  TLevyReceiveAchievementRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyReceiveAchievementRewardRsp& from);
  void MergeFrom(const TLevyReceiveAchievementRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArray = 1;
  inline int rewardarray_size() const;
  inline void clear_rewardarray();
  static const int kRewardArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyReceiveAchievementRewardRsp</name>
  	<Function>
  		<name>rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarray</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarray_size</name>
  		<replaceName>RewardArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarray(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarray(int index);
  inline ::pb::TCommonReward* add_rewardarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarray();

  // @@protoc_insertion_point(class_scope:pb.TLevyReceiveAchievementRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarray_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyReceiveAchievementRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyUserInfoChangeNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyUserInfoChangeNotify : public ::google::protobuf::Message {
 public:
  TLevyUserInfoChangeNotify();
  virtual ~TLevyUserInfoChangeNotify();

  TLevyUserInfoChangeNotify(const TLevyUserInfoChangeNotify& from);

  inline TLevyUserInfoChangeNotify& operator=(const TLevyUserInfoChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyUserInfoChangeNotify& default_instance();

  void Swap(TLevyUserInfoChangeNotify* other);

  // implements Message ----------------------------------------------

  TLevyUserInfoChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyUserInfoChangeNotify& from);
  void MergeFrom(const TLevyUserInfoChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyPos PosChange = 1;
  inline bool has_poschange() const;
  inline void clear_poschange();
  static const int kPosChangeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfoChangeNotify</name>
  	<Function>
  		<name>poschange</name>
  		<replaceName>PosChange</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_poschange</name>
  		<replaceName>PosChange</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_poschange</name>
  		<replaceName>PosChange</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_poschange</name>
  		<replaceName>PosChange</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyPos& poschange() const;
  inline ::pb::TLevyPos* mutable_poschange();
  inline ::pb::TLevyPos* release_poschange();
  inline void set_allocated_poschange(::pb::TLevyPos* poschange);

  // optional .pb.TLevyMasterInfo MasterChangeInfo = 2;
  inline bool has_masterchangeinfo() const;
  inline void clear_masterchangeinfo();
  static const int kMasterChangeInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfoChangeNotify</name>
  	<Function>
  		<name>masterchangeinfo</name>
  		<replaceName>MasterChangeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masterchangeinfo</name>
  		<replaceName>MasterChangeInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_masterchangeinfo</name>
  		<replaceName>MasterChangeInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masterchangeinfo</name>
  		<replaceName>MasterChangeInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyMasterInfo& masterchangeinfo() const;
  inline ::pb::TLevyMasterInfo* mutable_masterchangeinfo();
  inline ::pb::TLevyMasterInfo* release_masterchangeinfo();
  inline void set_allocated_masterchangeinfo(::pb::TLevyMasterInfo* masterchangeinfo);

  // repeated .pb.TLevySlaveInfo SlaveChangeInfo = 3;
  inline int slavechangeinfo_size() const;
  inline void clear_slavechangeinfo();
  static const int kSlaveChangeInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfoChangeNotify</name>
  	<Function>
  		<name>slavechangeinfo</name>
  		<replaceName>SlaveChangeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_slavechangeinfo</name>
  		<replaceName>SlaveChangeInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_slavechangeinfo</name>
  		<replaceName>SlaveChangeInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_slavechangeinfo</name>
  		<replaceName>SlaveChangeInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>slavechangeinfo_size</name>
  		<replaceName>SlaveChangeInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevySlaveInfo& slavechangeinfo(int index) const;
  inline ::pb::TLevySlaveInfo* mutable_slavechangeinfo(int index);
  inline ::pb::TLevySlaveInfo* add_slavechangeinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevySlaveInfo >&
      slavechangeinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLevySlaveInfo >*
      mutable_slavechangeinfo();

  // optional .pb.TLevyRecordInfo RecordInfo = 4;
  inline bool has_recordinfo() const;
  inline void clear_recordinfo();
  static const int kRecordInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfoChangeNotify</name>
  	<Function>
  		<name>recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyRecordInfo& recordinfo() const;
  inline ::pb::TLevyRecordInfo* mutable_recordinfo();
  inline ::pb::TLevyRecordInfo* release_recordinfo();
  inline void set_allocated_recordinfo(::pb::TLevyRecordInfo* recordinfo);

  // optional .pb.TLevyAchievementInfo AchievementInfo = 5;
  inline bool has_achievementinfo() const;
  inline void clear_achievementinfo();
  static const int kAchievementInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TLevyUserInfoChangeNotify</name>
  	<Function>
  		<name>achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementinfo</name>
  		<replaceName>AchievementInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyAchievementInfo& achievementinfo() const;
  inline ::pb::TLevyAchievementInfo* mutable_achievementinfo();
  inline ::pb::TLevyAchievementInfo* release_achievementinfo();
  inline void set_allocated_achievementinfo(::pb::TLevyAchievementInfo* achievementinfo);

  // @@protoc_insertion_point(class_scope:pb.TLevyUserInfoChangeNotify)
 private:
  inline void set_has_poschange();
  inline void clear_has_poschange();
  inline void set_has_masterchangeinfo();
  inline void clear_has_masterchangeinfo();
  inline void set_has_recordinfo();
  inline void clear_has_recordinfo();
  inline void set_has_achievementinfo();
  inline void clear_has_achievementinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyPos* poschange_;
  ::pb::TLevyMasterInfo* masterchangeinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLevySlaveInfo > slavechangeinfo_;
  ::pb::TLevyRecordInfo* recordinfo_;
  ::pb::TLevyAchievementInfo* achievementinfo_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyUserInfoChangeNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyInfoChangeNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyInfoChangeNotify : public ::google::protobuf::Message {
 public:
  TLevyInfoChangeNotify();
  virtual ~TLevyInfoChangeNotify();

  TLevyInfoChangeNotify(const TLevyInfoChangeNotify& from);

  inline TLevyInfoChangeNotify& operator=(const TLevyInfoChangeNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyInfoChangeNotify& default_instance();

  void Swap(TLevyInfoChangeNotify* other);

  // implements Message ----------------------------------------------

  TLevyInfoChangeNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyInfoChangeNotify& from);
  void MergeFrom(const TLevyInfoChangeNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TLevyOtherUserInfo UserLevyInfo = 1;
  inline bool has_userlevyinfo() const;
  inline void clear_userlevyinfo();
  static const int kUserLevyInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyInfoChangeNotify</name>
  	<Function>
  		<name>userlevyinfo</name>
  		<replaceName>UserLevyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userlevyinfo</name>
  		<replaceName>UserLevyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userlevyinfo</name>
  		<replaceName>UserLevyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userlevyinfo</name>
  		<replaceName>UserLevyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyOtherUserInfo& userlevyinfo() const;
  inline ::pb::TLevyOtherUserInfo* mutable_userlevyinfo();
  inline ::pb::TLevyOtherUserInfo* release_userlevyinfo();
  inline void set_allocated_userlevyinfo(::pb::TLevyOtherUserInfo* userlevyinfo);

  // repeated .pb.TUserSimpleInfo UserInfo = 2;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TLevyInfoChangeNotify</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>userinfo_size</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo(int index) const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo(int index);
  inline ::pb::TUserSimpleInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
      mutable_userinfo();

  // @@protoc_insertion_point(class_scope:pb.TLevyInfoChangeNotify)
 private:
  inline void set_has_userlevyinfo();
  inline void clear_has_userlevyinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TLevyOtherUserInfo* userlevyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo > userinfo_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyInfoChangeNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TLevyNewBattleReportNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Levy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TLevyNewBattleReportNotify : public ::google::protobuf::Message {
 public:
  TLevyNewBattleReportNotify();
  virtual ~TLevyNewBattleReportNotify();

  TLevyNewBattleReportNotify(const TLevyNewBattleReportNotify& from);

  inline TLevyNewBattleReportNotify& operator=(const TLevyNewBattleReportNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TLevyNewBattleReportNotify& default_instance();

  void Swap(TLevyNewBattleReportNotify* other);

  // implements Message ----------------------------------------------

  TLevyNewBattleReportNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TLevyNewBattleReportNotify& from);
  void MergeFrom(const TLevyNewBattleReportNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TLevyBattleReportInfo ReportInfo = 1;
  inline int reportinfo_size() const;
  inline void clear_reportinfo();
  static const int kReportInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TLevyNewBattleReportNotify</name>
  	<Function>
  		<name>reportinfo</name>
  		<replaceName>ReportInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_reportinfo</name>
  		<replaceName>ReportInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_reportinfo</name>
  		<replaceName>ReportInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_reportinfo</name>
  		<replaceName>ReportInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>reportinfo_size</name>
  		<replaceName>ReportInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TLevyBattleReportInfo& reportinfo(int index) const;
  inline ::pb::TLevyBattleReportInfo* mutable_reportinfo(int index);
  inline ::pb::TLevyBattleReportInfo* add_reportinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyBattleReportInfo >&
      reportinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyBattleReportInfo >*
      mutable_reportinfo();

  // @@protoc_insertion_point(class_scope:pb.TLevyNewBattleReportNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TLevyBattleReportInfo > reportinfo_;
  friend void  protobuf_AddDesc_net_2fLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fLevy_2eproto();

  void InitAsDefaultInstance();
  static TLevyNewBattleReportNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TLevyPos

// optional uint32 PageId = 1;
inline bool TLevyPos::has_pageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyPos::set_has_pageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyPos::clear_has_pageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyPos::clear_pageid() {
  pageid_ = 0u;
  clear_has_pageid();
}
inline ::google::protobuf::uint32 TLevyPos::pageid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPos.PageId)
  return pageid_;
}
inline void TLevyPos::set_pageid(::google::protobuf::uint32 value) {
  set_has_pageid();
  pageid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyPos.PageId)
}

// optional uint32 PageIndex = 2;
inline bool TLevyPos::has_pageindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyPos::set_has_pageindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyPos::clear_has_pageindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyPos::clear_pageindex() {
  pageindex_ = 0u;
  clear_has_pageindex();
}
inline ::google::protobuf::uint32 TLevyPos::pageindex() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPos.PageIndex)
  return pageindex_;
}
inline void TLevyPos::set_pageindex(::google::protobuf::uint32 value) {
  set_has_pageindex();
  pageindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyPos.PageIndex)
}

// -------------------------------------------------------------------

// TLevyAchievementRewardInfo

// optional uint32 Id = 1;
inline bool TLevyAchievementRewardInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyAchievementRewardInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyAchievementRewardInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyAchievementRewardInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TLevyAchievementRewardInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TLevyAchievementRewardInfo.Id)
  return id_;
}
inline void TLevyAchievementRewardInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyAchievementRewardInfo.Id)
}

// optional uint64 RewardTime = 2;
inline bool TLevyAchievementRewardInfo::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyAchievementRewardInfo::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyAchievementRewardInfo::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyAchievementRewardInfo::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TLevyAchievementRewardInfo::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TLevyAchievementRewardInfo.RewardTime)
  return rewardtime_;
}
inline void TLevyAchievementRewardInfo::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyAchievementRewardInfo.RewardTime)
}

// -------------------------------------------------------------------

// TLevyAchievementInfo

// optional uint32 TotalBattleNum = 1;
inline bool TLevyAchievementInfo::has_totalbattlenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyAchievementInfo::set_has_totalbattlenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyAchievementInfo::clear_has_totalbattlenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyAchievementInfo::clear_totalbattlenum() {
  totalbattlenum_ = 0u;
  clear_has_totalbattlenum();
}
inline ::google::protobuf::uint32 TLevyAchievementInfo::totalbattlenum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyAchievementInfo.TotalBattleNum)
  return totalbattlenum_;
}
inline void TLevyAchievementInfo::set_totalbattlenum(::google::protobuf::uint32 value) {
  set_has_totalbattlenum();
  totalbattlenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyAchievementInfo.TotalBattleNum)
}

// optional uint32 MaxConnectNum = 2;
inline bool TLevyAchievementInfo::has_maxconnectnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyAchievementInfo::set_has_maxconnectnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyAchievementInfo::clear_has_maxconnectnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyAchievementInfo::clear_maxconnectnum() {
  maxconnectnum_ = 0u;
  clear_has_maxconnectnum();
}
inline ::google::protobuf::uint32 TLevyAchievementInfo::maxconnectnum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyAchievementInfo.MaxConnectNum)
  return maxconnectnum_;
}
inline void TLevyAchievementInfo::set_maxconnectnum(::google::protobuf::uint32 value) {
  set_has_maxconnectnum();
  maxconnectnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyAchievementInfo.MaxConnectNum)
}

// repeated .pb.TLevyAchievementRewardInfo ArrRewardInfo = 5;
inline int TLevyAchievementInfo::arrrewardinfo_size() const {
  return arrrewardinfo_.size();
}
inline void TLevyAchievementInfo::clear_arrrewardinfo() {
  arrrewardinfo_.Clear();
}
inline const ::pb::TLevyAchievementRewardInfo& TLevyAchievementInfo::arrrewardinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyAchievementInfo.ArrRewardInfo)
  return arrrewardinfo_.Get(index);
}
inline ::pb::TLevyAchievementRewardInfo* TLevyAchievementInfo::mutable_arrrewardinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyAchievementInfo.ArrRewardInfo)
  return arrrewardinfo_.Mutable(index);
}
inline ::pb::TLevyAchievementRewardInfo* TLevyAchievementInfo::add_arrrewardinfo() {
  // @@protoc_insertion_point(field_add:pb.TLevyAchievementInfo.ArrRewardInfo)
  return arrrewardinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyAchievementRewardInfo >&
TLevyAchievementInfo::arrrewardinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLevyAchievementInfo.ArrRewardInfo)
  return arrrewardinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyAchievementRewardInfo >*
TLevyAchievementInfo::mutable_arrrewardinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyAchievementInfo.ArrRewardInfo)
  return &arrrewardinfo_;
}

// -------------------------------------------------------------------

// TLevyUserInfo

// optional .pb.TLevyPos Pos = 1;
inline bool TLevyUserInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyUserInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyUserInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyUserInfo::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyUserInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyUserInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyUserInfo.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyUserInfo::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyUserInfo::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyUserInfo.Pos)
}

// optional uint64 SettleTime = 2;
inline bool TLevyUserInfo::has_settletime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyUserInfo::set_has_settletime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyUserInfo::clear_has_settletime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyUserInfo::clear_settletime() {
  settletime_ = GOOGLE_ULONGLONG(0);
  clear_has_settletime();
}
inline ::google::protobuf::uint64 TLevyUserInfo::settletime() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.SettleTime)
  return settletime_;
}
inline void TLevyUserInfo::set_settletime(::google::protobuf::uint64 value) {
  set_has_settletime();
  settletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyUserInfo.SettleTime)
}

// optional uint64 SliverNum = 3;
inline bool TLevyUserInfo::has_slivernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLevyUserInfo::set_has_slivernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLevyUserInfo::clear_has_slivernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLevyUserInfo::clear_slivernum() {
  slivernum_ = GOOGLE_ULONGLONG(0);
  clear_has_slivernum();
}
inline ::google::protobuf::uint64 TLevyUserInfo::slivernum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.SliverNum)
  return slivernum_;
}
inline void TLevyUserInfo::set_slivernum(::google::protobuf::uint64 value) {
  set_has_slivernum();
  slivernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyUserInfo.SliverNum)
}

// optional uint32 OutputDuration = 4;
inline bool TLevyUserInfo::has_outputduration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLevyUserInfo::set_has_outputduration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLevyUserInfo::clear_has_outputduration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLevyUserInfo::clear_outputduration() {
  outputduration_ = 0u;
  clear_has_outputduration();
}
inline ::google::protobuf::uint32 TLevyUserInfo::outputduration() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.OutputDuration)
  return outputduration_;
}
inline void TLevyUserInfo::set_outputduration(::google::protobuf::uint32 value) {
  set_has_outputduration();
  outputduration_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyUserInfo.OutputDuration)
}

// optional uint32 ForceNum = 5;
inline bool TLevyUserInfo::has_forcenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLevyUserInfo::set_has_forcenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLevyUserInfo::clear_has_forcenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLevyUserInfo::clear_forcenum() {
  forcenum_ = 0u;
  clear_has_forcenum();
}
inline ::google::protobuf::uint32 TLevyUserInfo::forcenum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.ForceNum)
  return forcenum_;
}
inline void TLevyUserInfo::set_forcenum(::google::protobuf::uint32 value) {
  set_has_forcenum();
  forcenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyUserInfo.ForceNum)
}

// optional uint32 HelpNum = 6;
inline bool TLevyUserInfo::has_helpnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLevyUserInfo::set_has_helpnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLevyUserInfo::clear_has_helpnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLevyUserInfo::clear_helpnum() {
  helpnum_ = 0u;
  clear_has_helpnum();
}
inline ::google::protobuf::uint32 TLevyUserInfo::helpnum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.HelpNum)
  return helpnum_;
}
inline void TLevyUserInfo::set_helpnum(::google::protobuf::uint32 value) {
  set_has_helpnum();
  helpnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyUserInfo.HelpNum)
}

// optional uint32 PlunderNum = 7;
inline bool TLevyUserInfo::has_plundernum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TLevyUserInfo::set_has_plundernum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TLevyUserInfo::clear_has_plundernum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TLevyUserInfo::clear_plundernum() {
  plundernum_ = 0u;
  clear_has_plundernum();
}
inline ::google::protobuf::uint32 TLevyUserInfo::plundernum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.PlunderNum)
  return plundernum_;
}
inline void TLevyUserInfo::set_plundernum(::google::protobuf::uint32 value) {
  set_has_plundernum();
  plundernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyUserInfo.PlunderNum)
}

// optional uint32 TrainNum = 8;
inline bool TLevyUserInfo::has_trainnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TLevyUserInfo::set_has_trainnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TLevyUserInfo::clear_has_trainnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TLevyUserInfo::clear_trainnum() {
  trainnum_ = 0u;
  clear_has_trainnum();
}
inline ::google::protobuf::uint32 TLevyUserInfo::trainnum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.TrainNum)
  return trainnum_;
}
inline void TLevyUserInfo::set_trainnum(::google::protobuf::uint32 value) {
  set_has_trainnum();
  trainnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyUserInfo.TrainNum)
}

// optional uint32 StormNum = 9;
inline bool TLevyUserInfo::has_stormnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TLevyUserInfo::set_has_stormnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TLevyUserInfo::clear_has_stormnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TLevyUserInfo::clear_stormnum() {
  stormnum_ = 0u;
  clear_has_stormnum();
}
inline ::google::protobuf::uint32 TLevyUserInfo::stormnum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.StormNum)
  return stormnum_;
}
inline void TLevyUserInfo::set_stormnum(::google::protobuf::uint32 value) {
  set_has_stormnum();
  stormnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyUserInfo.StormNum)
}

// optional .pb.TLevyMasterInfo MasterInfo = 12;
inline bool TLevyUserInfo::has_masterinfo() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TLevyUserInfo::set_has_masterinfo() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TLevyUserInfo::clear_has_masterinfo() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TLevyUserInfo::clear_masterinfo() {
  if (masterinfo_ != NULL) masterinfo_->::pb::TLevyMasterInfo::Clear();
  clear_has_masterinfo();
}
inline const ::pb::TLevyMasterInfo& TLevyUserInfo::masterinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.MasterInfo)
  return masterinfo_ != NULL ? *masterinfo_ : *default_instance_->masterinfo_;
}
inline ::pb::TLevyMasterInfo* TLevyUserInfo::mutable_masterinfo() {
  set_has_masterinfo();
  if (masterinfo_ == NULL) masterinfo_ = new ::pb::TLevyMasterInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLevyUserInfo.MasterInfo)
  return masterinfo_;
}
inline ::pb::TLevyMasterInfo* TLevyUserInfo::release_masterinfo() {
  clear_has_masterinfo();
  ::pb::TLevyMasterInfo* temp = masterinfo_;
  masterinfo_ = NULL;
  return temp;
}
inline void TLevyUserInfo::set_allocated_masterinfo(::pb::TLevyMasterInfo* masterinfo) {
  delete masterinfo_;
  masterinfo_ = masterinfo;
  if (masterinfo) {
    set_has_masterinfo();
  } else {
    clear_has_masterinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyUserInfo.MasterInfo)
}

// repeated .pb.TLevySlaveInfo ArrSlaveInfo = 13;
inline int TLevyUserInfo::arrslaveinfo_size() const {
  return arrslaveinfo_.size();
}
inline void TLevyUserInfo::clear_arrslaveinfo() {
  arrslaveinfo_.Clear();
}
inline const ::pb::TLevySlaveInfo& TLevyUserInfo::arrslaveinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.ArrSlaveInfo)
  return arrslaveinfo_.Get(index);
}
inline ::pb::TLevySlaveInfo* TLevyUserInfo::mutable_arrslaveinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyUserInfo.ArrSlaveInfo)
  return arrslaveinfo_.Mutable(index);
}
inline ::pb::TLevySlaveInfo* TLevyUserInfo::add_arrslaveinfo() {
  // @@protoc_insertion_point(field_add:pb.TLevyUserInfo.ArrSlaveInfo)
  return arrslaveinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevySlaveInfo >&
TLevyUserInfo::arrslaveinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLevyUserInfo.ArrSlaveInfo)
  return arrslaveinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLevySlaveInfo >*
TLevyUserInfo::mutable_arrslaveinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyUserInfo.ArrSlaveInfo)
  return &arrslaveinfo_;
}

// optional .pb.TLevyAchievementInfo AchievementInfo = 15;
inline bool TLevyUserInfo::has_achievementinfo() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TLevyUserInfo::set_has_achievementinfo() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TLevyUserInfo::clear_has_achievementinfo() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TLevyUserInfo::clear_achievementinfo() {
  if (achievementinfo_ != NULL) achievementinfo_->::pb::TLevyAchievementInfo::Clear();
  clear_has_achievementinfo();
}
inline const ::pb::TLevyAchievementInfo& TLevyUserInfo::achievementinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfo.AchievementInfo)
  return achievementinfo_ != NULL ? *achievementinfo_ : *default_instance_->achievementinfo_;
}
inline ::pb::TLevyAchievementInfo* TLevyUserInfo::mutable_achievementinfo() {
  set_has_achievementinfo();
  if (achievementinfo_ == NULL) achievementinfo_ = new ::pb::TLevyAchievementInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLevyUserInfo.AchievementInfo)
  return achievementinfo_;
}
inline ::pb::TLevyAchievementInfo* TLevyUserInfo::release_achievementinfo() {
  clear_has_achievementinfo();
  ::pb::TLevyAchievementInfo* temp = achievementinfo_;
  achievementinfo_ = NULL;
  return temp;
}
inline void TLevyUserInfo::set_allocated_achievementinfo(::pb::TLevyAchievementInfo* achievementinfo) {
  delete achievementinfo_;
  achievementinfo_ = achievementinfo;
  if (achievementinfo) {
    set_has_achievementinfo();
  } else {
    clear_has_achievementinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyUserInfo.AchievementInfo)
}

// -------------------------------------------------------------------

// TLevyMasterInfo

// optional uint64 MasterUid = 1;
inline bool TLevyMasterInfo::has_masteruid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyMasterInfo::set_has_masteruid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyMasterInfo::clear_has_masteruid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyMasterInfo::clear_masteruid() {
  masteruid_ = GOOGLE_ULONGLONG(0);
  clear_has_masteruid();
}
inline ::google::protobuf::uint64 TLevyMasterInfo::masteruid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyMasterInfo.MasterUid)
  return masteruid_;
}
inline void TLevyMasterInfo::set_masteruid(::google::protobuf::uint64 value) {
  set_has_masteruid();
  masteruid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyMasterInfo.MasterUid)
}

// optional uint64 BeConqueredTime = 2;
inline bool TLevyMasterInfo::has_beconqueredtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyMasterInfo::set_has_beconqueredtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyMasterInfo::clear_has_beconqueredtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyMasterInfo::clear_beconqueredtime() {
  beconqueredtime_ = GOOGLE_ULONGLONG(0);
  clear_has_beconqueredtime();
}
inline ::google::protobuf::uint64 TLevyMasterInfo::beconqueredtime() const {
  // @@protoc_insertion_point(field_get:pb.TLevyMasterInfo.BeConqueredTime)
  return beconqueredtime_;
}
inline void TLevyMasterInfo::set_beconqueredtime(::google::protobuf::uint64 value) {
  set_has_beconqueredtime();
  beconqueredtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyMasterInfo.BeConqueredTime)
}

// optional .pb.TUserSimpleInfo MasterUserInfo = 3;
inline bool TLevyMasterInfo::has_masteruserinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLevyMasterInfo::set_has_masteruserinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLevyMasterInfo::clear_has_masteruserinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLevyMasterInfo::clear_masteruserinfo() {
  if (masteruserinfo_ != NULL) masteruserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_masteruserinfo();
}
inline const ::pb::TUserSimpleInfo& TLevyMasterInfo::masteruserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLevyMasterInfo.MasterUserInfo)
  return masteruserinfo_ != NULL ? *masteruserinfo_ : *default_instance_->masteruserinfo_;
}
inline ::pb::TUserSimpleInfo* TLevyMasterInfo::mutable_masteruserinfo() {
  set_has_masteruserinfo();
  if (masteruserinfo_ == NULL) masteruserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLevyMasterInfo.MasterUserInfo)
  return masteruserinfo_;
}
inline ::pb::TUserSimpleInfo* TLevyMasterInfo::release_masteruserinfo() {
  clear_has_masteruserinfo();
  ::pb::TUserSimpleInfo* temp = masteruserinfo_;
  masteruserinfo_ = NULL;
  return temp;
}
inline void TLevyMasterInfo::set_allocated_masteruserinfo(::pb::TUserSimpleInfo* masteruserinfo) {
  delete masteruserinfo_;
  masteruserinfo_ = masteruserinfo;
  if (masteruserinfo) {
    set_has_masteruserinfo();
  } else {
    clear_has_masteruserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyMasterInfo.MasterUserInfo)
}

// optional .pb.TLevyPos Pos = 4;
inline bool TLevyMasterInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLevyMasterInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLevyMasterInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLevyMasterInfo::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyMasterInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyMasterInfo.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyMasterInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyMasterInfo.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyMasterInfo::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyMasterInfo::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyMasterInfo.Pos)
}

// -------------------------------------------------------------------

// TLevySlaveInfo

// optional uint64 SlaveUid = 1;
inline bool TLevySlaveInfo::has_slaveuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevySlaveInfo::set_has_slaveuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevySlaveInfo::clear_has_slaveuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevySlaveInfo::clear_slaveuid() {
  slaveuid_ = GOOGLE_ULONGLONG(0);
  clear_has_slaveuid();
}
inline ::google::protobuf::uint64 TLevySlaveInfo::slaveuid() const {
  // @@protoc_insertion_point(field_get:pb.TLevySlaveInfo.SlaveUid)
  return slaveuid_;
}
inline void TLevySlaveInfo::set_slaveuid(::google::protobuf::uint64 value) {
  set_has_slaveuid();
  slaveuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevySlaveInfo.SlaveUid)
}

// optional uint64 ConquerTime = 2;
inline bool TLevySlaveInfo::has_conquertime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevySlaveInfo::set_has_conquertime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevySlaveInfo::clear_has_conquertime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevySlaveInfo::clear_conquertime() {
  conquertime_ = GOOGLE_ULONGLONG(0);
  clear_has_conquertime();
}
inline ::google::protobuf::uint64 TLevySlaveInfo::conquertime() const {
  // @@protoc_insertion_point(field_get:pb.TLevySlaveInfo.ConquerTime)
  return conquertime_;
}
inline void TLevySlaveInfo::set_conquertime(::google::protobuf::uint64 value) {
  set_has_conquertime();
  conquertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevySlaveInfo.ConquerTime)
}

// optional .pb.TLevyPos Pos = 3;
inline bool TLevySlaveInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLevySlaveInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLevySlaveInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLevySlaveInfo::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevySlaveInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevySlaveInfo.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevySlaveInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevySlaveInfo.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevySlaveInfo::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevySlaveInfo::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevySlaveInfo.Pos)
}

// optional .pb.TUserSimpleInfo SlaveUserInfo = 5;
inline bool TLevySlaveInfo::has_slaveuserinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLevySlaveInfo::set_has_slaveuserinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLevySlaveInfo::clear_has_slaveuserinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLevySlaveInfo::clear_slaveuserinfo() {
  if (slaveuserinfo_ != NULL) slaveuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_slaveuserinfo();
}
inline const ::pb::TUserSimpleInfo& TLevySlaveInfo::slaveuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLevySlaveInfo.SlaveUserInfo)
  return slaveuserinfo_ != NULL ? *slaveuserinfo_ : *default_instance_->slaveuserinfo_;
}
inline ::pb::TUserSimpleInfo* TLevySlaveInfo::mutable_slaveuserinfo() {
  set_has_slaveuserinfo();
  if (slaveuserinfo_ == NULL) slaveuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLevySlaveInfo.SlaveUserInfo)
  return slaveuserinfo_;
}
inline ::pb::TUserSimpleInfo* TLevySlaveInfo::release_slaveuserinfo() {
  clear_has_slaveuserinfo();
  ::pb::TUserSimpleInfo* temp = slaveuserinfo_;
  slaveuserinfo_ = NULL;
  return temp;
}
inline void TLevySlaveInfo::set_allocated_slaveuserinfo(::pb::TUserSimpleInfo* slaveuserinfo) {
  delete slaveuserinfo_;
  slaveuserinfo_ = slaveuserinfo;
  if (slaveuserinfo) {
    set_has_slaveuserinfo();
  } else {
    clear_has_slaveuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevySlaveInfo.SlaveUserInfo)
}

// -------------------------------------------------------------------

// TLevyOtherUserInfo

// optional .pb.TLevyPos Pos = 1;
inline bool TLevyOtherUserInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyOtherUserInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyOtherUserInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyOtherUserInfo::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyOtherUserInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyOtherUserInfo.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyOtherUserInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyOtherUserInfo.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyOtherUserInfo::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyOtherUserInfo::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyOtherUserInfo.Pos)
}

// optional uint64 Uid = 3;
inline bool TLevyOtherUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyOtherUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyOtherUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyOtherUserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TLevyOtherUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyOtherUserInfo.Uid)
  return uid_;
}
inline void TLevyOtherUserInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyOtherUserInfo.Uid)
}

// optional uint64 MasterUid = 4;
inline bool TLevyOtherUserInfo::has_masteruid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLevyOtherUserInfo::set_has_masteruid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLevyOtherUserInfo::clear_has_masteruid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLevyOtherUserInfo::clear_masteruid() {
  masteruid_ = GOOGLE_ULONGLONG(0);
  clear_has_masteruid();
}
inline ::google::protobuf::uint64 TLevyOtherUserInfo::masteruid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyOtherUserInfo.MasterUid)
  return masteruid_;
}
inline void TLevyOtherUserInfo::set_masteruid(::google::protobuf::uint64 value) {
  set_has_masteruid();
  masteruid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyOtherUserInfo.MasterUid)
}

// optional uint32 BeHelpNum = 5;
inline bool TLevyOtherUserInfo::has_behelpnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLevyOtherUserInfo::set_has_behelpnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLevyOtherUserInfo::clear_has_behelpnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLevyOtherUserInfo::clear_behelpnum() {
  behelpnum_ = 0u;
  clear_has_behelpnum();
}
inline ::google::protobuf::uint32 TLevyOtherUserInfo::behelpnum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyOtherUserInfo.BeHelpNum)
  return behelpnum_;
}
inline void TLevyOtherUserInfo::set_behelpnum(::google::protobuf::uint32 value) {
  set_has_behelpnum();
  behelpnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyOtherUserInfo.BeHelpNum)
}

// optional uint32 BePlunderedNum = 6;
inline bool TLevyOtherUserInfo::has_beplunderednum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLevyOtherUserInfo::set_has_beplunderednum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLevyOtherUserInfo::clear_has_beplunderednum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLevyOtherUserInfo::clear_beplunderednum() {
  beplunderednum_ = 0u;
  clear_has_beplunderednum();
}
inline ::google::protobuf::uint32 TLevyOtherUserInfo::beplunderednum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyOtherUserInfo.BePlunderedNum)
  return beplunderednum_;
}
inline void TLevyOtherUserInfo::set_beplunderednum(::google::protobuf::uint32 value) {
  set_has_beplunderednum();
  beplunderednum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyOtherUserInfo.BePlunderedNum)
}

// optional uint64 BePlunderedTime = 7;
inline bool TLevyOtherUserInfo::has_beplunderedtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TLevyOtherUserInfo::set_has_beplunderedtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TLevyOtherUserInfo::clear_has_beplunderedtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TLevyOtherUserInfo::clear_beplunderedtime() {
  beplunderedtime_ = GOOGLE_ULONGLONG(0);
  clear_has_beplunderedtime();
}
inline ::google::protobuf::uint64 TLevyOtherUserInfo::beplunderedtime() const {
  // @@protoc_insertion_point(field_get:pb.TLevyOtherUserInfo.BePlunderedTime)
  return beplunderedtime_;
}
inline void TLevyOtherUserInfo::set_beplunderedtime(::google::protobuf::uint64 value) {
  set_has_beplunderedtime();
  beplunderedtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyOtherUserInfo.BePlunderedTime)
}

// optional uint64 SettleTime = 8;
inline bool TLevyOtherUserInfo::has_settletime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TLevyOtherUserInfo::set_has_settletime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TLevyOtherUserInfo::clear_has_settletime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TLevyOtherUserInfo::clear_settletime() {
  settletime_ = GOOGLE_ULONGLONG(0);
  clear_has_settletime();
}
inline ::google::protobuf::uint64 TLevyOtherUserInfo::settletime() const {
  // @@protoc_insertion_point(field_get:pb.TLevyOtherUserInfo.SettleTime)
  return settletime_;
}
inline void TLevyOtherUserInfo::set_settletime(::google::protobuf::uint64 value) {
  set_has_settletime();
  settletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyOtherUserInfo.SettleTime)
}

// optional uint32 HaveOutput = 9;
inline bool TLevyOtherUserInfo::has_haveoutput() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TLevyOtherUserInfo::set_has_haveoutput() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TLevyOtherUserInfo::clear_has_haveoutput() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TLevyOtherUserInfo::clear_haveoutput() {
  haveoutput_ = 0u;
  clear_has_haveoutput();
}
inline ::google::protobuf::uint32 TLevyOtherUserInfo::haveoutput() const {
  // @@protoc_insertion_point(field_get:pb.TLevyOtherUserInfo.HaveOutput)
  return haveoutput_;
}
inline void TLevyOtherUserInfo::set_haveoutput(::google::protobuf::uint32 value) {
  set_has_haveoutput();
  haveoutput_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyOtherUserInfo.HaveOutput)
}

// -------------------------------------------------------------------

// TLevyRecordInfo

// optional .pb.ELevyRecordType RecordType = 1;
inline bool TLevyRecordInfo::has_recordtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyRecordInfo::set_has_recordtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyRecordInfo::clear_has_recordtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyRecordInfo::clear_recordtype() {
  recordtype_ = 100;
  clear_has_recordtype();
}
inline ::pb::ELevyRecordType TLevyRecordInfo::recordtype() const {
  // @@protoc_insertion_point(field_get:pb.TLevyRecordInfo.RecordType)
  return static_cast< ::pb::ELevyRecordType >(recordtype_);
}
inline void TLevyRecordInfo::set_recordtype(::pb::ELevyRecordType value) {
  assert(::pb::ELevyRecordType_IsValid(value));
  set_has_recordtype();
  recordtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyRecordInfo.RecordType)
}

// optional uint64 RecordTime = 2;
inline bool TLevyRecordInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyRecordInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyRecordInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyRecordInfo::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TLevyRecordInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TLevyRecordInfo.RecordTime)
  return recordtime_;
}
inline void TLevyRecordInfo::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyRecordInfo.RecordTime)
}

// repeated uint64 RecordData = 3;
inline int TLevyRecordInfo::recorddata_size() const {
  return recorddata_.size();
}
inline void TLevyRecordInfo::clear_recorddata() {
  recorddata_.Clear();
}
inline ::google::protobuf::uint64 TLevyRecordInfo::recorddata(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyRecordInfo.RecordData)
  return recorddata_.Get(index);
}
inline void TLevyRecordInfo::set_recorddata(int index, ::google::protobuf::uint64 value) {
  recorddata_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TLevyRecordInfo.RecordData)
}
inline void TLevyRecordInfo::add_recorddata(::google::protobuf::uint64 value) {
  recorddata_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TLevyRecordInfo.RecordData)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TLevyRecordInfo::recorddata() const {
  // @@protoc_insertion_point(field_list:pb.TLevyRecordInfo.RecordData)
  return recorddata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TLevyRecordInfo::mutable_recorddata() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyRecordInfo.RecordData)
  return &recorddata_;
}

// repeated string ArrUname = 4;
inline int TLevyRecordInfo::arruname_size() const {
  return arruname_.size();
}
inline void TLevyRecordInfo::clear_arruname() {
  arruname_.Clear();
}
inline const ::std::string& TLevyRecordInfo::arruname(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyRecordInfo.ArrUname)
  return arruname_.Get(index);
}
inline ::std::string* TLevyRecordInfo::mutable_arruname(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyRecordInfo.ArrUname)
  return arruname_.Mutable(index);
}
inline void TLevyRecordInfo::set_arruname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TLevyRecordInfo.ArrUname)
  arruname_.Mutable(index)->assign(value);
}
inline void TLevyRecordInfo::set_arruname(int index, const char* value) {
  arruname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLevyRecordInfo.ArrUname)
}
inline void TLevyRecordInfo::set_arruname(int index, const char* value, size_t size) {
  arruname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLevyRecordInfo.ArrUname)
}
inline ::std::string* TLevyRecordInfo::add_arruname() {
  return arruname_.Add();
}
inline void TLevyRecordInfo::add_arruname(const ::std::string& value) {
  arruname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TLevyRecordInfo.ArrUname)
}
inline void TLevyRecordInfo::add_arruname(const char* value) {
  arruname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TLevyRecordInfo.ArrUname)
}
inline void TLevyRecordInfo::add_arruname(const char* value, size_t size) {
  arruname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TLevyRecordInfo.ArrUname)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLevyRecordInfo::arruname() const {
  // @@protoc_insertion_point(field_list:pb.TLevyRecordInfo.ArrUname)
  return arruname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TLevyRecordInfo::mutable_arruname() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyRecordInfo.ArrUname)
  return &arruname_;
}

// -------------------------------------------------------------------

// TLevyBattleReportInfo

// optional .pb.ELevyBattleReportType ReportType = 1;
inline bool TLevyBattleReportInfo::has_reporttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyBattleReportInfo::set_has_reporttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyBattleReportInfo::clear_has_reporttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyBattleReportInfo::clear_reporttype() {
  reporttype_ = 1;
  clear_has_reporttype();
}
inline ::pb::ELevyBattleReportType TLevyBattleReportInfo::reporttype() const {
  // @@protoc_insertion_point(field_get:pb.TLevyBattleReportInfo.ReportType)
  return static_cast< ::pb::ELevyBattleReportType >(reporttype_);
}
inline void TLevyBattleReportInfo::set_reporttype(::pb::ELevyBattleReportType value) {
  assert(::pb::ELevyBattleReportType_IsValid(value));
  set_has_reporttype();
  reporttype_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyBattleReportInfo.ReportType)
}

// optional uint64 ReportTime = 2;
inline bool TLevyBattleReportInfo::has_reporttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyBattleReportInfo::set_has_reporttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyBattleReportInfo::clear_has_reporttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyBattleReportInfo::clear_reporttime() {
  reporttime_ = GOOGLE_ULONGLONG(0);
  clear_has_reporttime();
}
inline ::google::protobuf::uint64 TLevyBattleReportInfo::reporttime() const {
  // @@protoc_insertion_point(field_get:pb.TLevyBattleReportInfo.ReportTime)
  return reporttime_;
}
inline void TLevyBattleReportInfo::set_reporttime(::google::protobuf::uint64 value) {
  set_has_reporttime();
  reporttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyBattleReportInfo.ReportTime)
}

// repeated uint64 ReportData = 3;
inline int TLevyBattleReportInfo::reportdata_size() const {
  return reportdata_.size();
}
inline void TLevyBattleReportInfo::clear_reportdata() {
  reportdata_.Clear();
}
inline ::google::protobuf::uint64 TLevyBattleReportInfo::reportdata(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyBattleReportInfo.ReportData)
  return reportdata_.Get(index);
}
inline void TLevyBattleReportInfo::set_reportdata(int index, ::google::protobuf::uint64 value) {
  reportdata_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TLevyBattleReportInfo.ReportData)
}
inline void TLevyBattleReportInfo::add_reportdata(::google::protobuf::uint64 value) {
  reportdata_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TLevyBattleReportInfo.ReportData)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TLevyBattleReportInfo::reportdata() const {
  // @@protoc_insertion_point(field_list:pb.TLevyBattleReportInfo.ReportData)
  return reportdata_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TLevyBattleReportInfo::mutable_reportdata() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyBattleReportInfo.ReportData)
  return &reportdata_;
}

// repeated string ArrUname = 4;
inline int TLevyBattleReportInfo::arruname_size() const {
  return arruname_.size();
}
inline void TLevyBattleReportInfo::clear_arruname() {
  arruname_.Clear();
}
inline const ::std::string& TLevyBattleReportInfo::arruname(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyBattleReportInfo.ArrUname)
  return arruname_.Get(index);
}
inline ::std::string* TLevyBattleReportInfo::mutable_arruname(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyBattleReportInfo.ArrUname)
  return arruname_.Mutable(index);
}
inline void TLevyBattleReportInfo::set_arruname(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:pb.TLevyBattleReportInfo.ArrUname)
  arruname_.Mutable(index)->assign(value);
}
inline void TLevyBattleReportInfo::set_arruname(int index, const char* value) {
  arruname_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLevyBattleReportInfo.ArrUname)
}
inline void TLevyBattleReportInfo::set_arruname(int index, const char* value, size_t size) {
  arruname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLevyBattleReportInfo.ArrUname)
}
inline ::std::string* TLevyBattleReportInfo::add_arruname() {
  return arruname_.Add();
}
inline void TLevyBattleReportInfo::add_arruname(const ::std::string& value) {
  arruname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pb.TLevyBattleReportInfo.ArrUname)
}
inline void TLevyBattleReportInfo::add_arruname(const char* value) {
  arruname_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pb.TLevyBattleReportInfo.ArrUname)
}
inline void TLevyBattleReportInfo::add_arruname(const char* value, size_t size) {
  arruname_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pb.TLevyBattleReportInfo.ArrUname)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TLevyBattleReportInfo::arruname() const {
  // @@protoc_insertion_point(field_list:pb.TLevyBattleReportInfo.ArrUname)
  return arruname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TLevyBattleReportInfo::mutable_arruname() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyBattleReportInfo.ArrUname)
  return &arruname_;
}

// -------------------------------------------------------------------

// TLevyGuildUserInfo

// optional .pb.TLevyPos Pos = 1;
inline bool TLevyGuildUserInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyGuildUserInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyGuildUserInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyGuildUserInfo::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyGuildUserInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyGuildUserInfo.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyGuildUserInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyGuildUserInfo.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyGuildUserInfo::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyGuildUserInfo::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyGuildUserInfo.Pos)
}

// optional uint64 Uid = 3;
inline bool TLevyGuildUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyGuildUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyGuildUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyGuildUserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TLevyGuildUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyGuildUserInfo.Uid)
  return uid_;
}
inline void TLevyGuildUserInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyGuildUserInfo.Uid)
}

// optional string Uname = 4;
inline bool TLevyGuildUserInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLevyGuildUserInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLevyGuildUserInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLevyGuildUserInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TLevyGuildUserInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TLevyGuildUserInfo.Uname)
  return *uname_;
}
inline void TLevyGuildUserInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TLevyGuildUserInfo.Uname)
}
inline void TLevyGuildUserInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TLevyGuildUserInfo.Uname)
}
inline void TLevyGuildUserInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TLevyGuildUserInfo.Uname)
}
inline ::std::string* TLevyGuildUserInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TLevyGuildUserInfo.Uname)
  return uname_;
}
inline ::std::string* TLevyGuildUserInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TLevyGuildUserInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyGuildUserInfo.Uname)
}

// optional uint32 ConnectNum = 5;
inline bool TLevyGuildUserInfo::has_connectnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLevyGuildUserInfo::set_has_connectnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLevyGuildUserInfo::clear_has_connectnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLevyGuildUserInfo::clear_connectnum() {
  connectnum_ = 0u;
  clear_has_connectnum();
}
inline ::google::protobuf::uint32 TLevyGuildUserInfo::connectnum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyGuildUserInfo.ConnectNum)
  return connectnum_;
}
inline void TLevyGuildUserInfo::set_connectnum(::google::protobuf::uint32 value) {
  set_has_connectnum();
  connectnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyGuildUserInfo.ConnectNum)
}

// optional .pb.EGuildPost RpgPost = 6;
inline bool TLevyGuildUserInfo::has_rpgpost() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLevyGuildUserInfo::set_has_rpgpost() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLevyGuildUserInfo::clear_has_rpgpost() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLevyGuildUserInfo::clear_rpgpost() {
  rpgpost_ = 0;
  clear_has_rpgpost();
}
inline ::pb::EGuildPost TLevyGuildUserInfo::rpgpost() const {
  // @@protoc_insertion_point(field_get:pb.TLevyGuildUserInfo.RpgPost)
  return static_cast< ::pb::EGuildPost >(rpgpost_);
}
inline void TLevyGuildUserInfo::set_rpgpost(::pb::EGuildPost value) {
  assert(::pb::EGuildPost_IsValid(value));
  set_has_rpgpost();
  rpgpost_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyGuildUserInfo.RpgPost)
}

// -------------------------------------------------------------------

// TLevyGetUserInfoRsp

// optional .pb.TLevyUserInfo UserInfo = 1;
inline bool TLevyGetUserInfoRsp::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyGetUserInfoRsp::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyGetUserInfoRsp::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyGetUserInfoRsp::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TLevyUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TLevyUserInfo& TLevyGetUserInfoRsp::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetUserInfoRsp.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TLevyUserInfo* TLevyGetUserInfoRsp::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TLevyUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLevyGetUserInfoRsp.UserInfo)
  return userinfo_;
}
inline ::pb::TLevyUserInfo* TLevyGetUserInfoRsp::release_userinfo() {
  clear_has_userinfo();
  ::pb::TLevyUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TLevyGetUserInfoRsp::set_allocated_userinfo(::pb::TLevyUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyGetUserInfoRsp.UserInfo)
}

// -------------------------------------------------------------------

// TLevyEnterRsp

// optional uint32 MaxPageId = 1;
inline bool TLevyEnterRsp::has_maxpageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyEnterRsp::set_has_maxpageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyEnterRsp::clear_has_maxpageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyEnterRsp::clear_maxpageid() {
  maxpageid_ = 0u;
  clear_has_maxpageid();
}
inline ::google::protobuf::uint32 TLevyEnterRsp::maxpageid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyEnterRsp.MaxPageId)
  return maxpageid_;
}
inline void TLevyEnterRsp::set_maxpageid(::google::protobuf::uint32 value) {
  set_has_maxpageid();
  maxpageid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyEnterRsp.MaxPageId)
}

// repeated .pb.TLevyRecordInfo ArrRecord = 2;
inline int TLevyEnterRsp::arrrecord_size() const {
  return arrrecord_.size();
}
inline void TLevyEnterRsp::clear_arrrecord() {
  arrrecord_.Clear();
}
inline const ::pb::TLevyRecordInfo& TLevyEnterRsp::arrrecord(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyEnterRsp.ArrRecord)
  return arrrecord_.Get(index);
}
inline ::pb::TLevyRecordInfo* TLevyEnterRsp::mutable_arrrecord(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyEnterRsp.ArrRecord)
  return arrrecord_.Mutable(index);
}
inline ::pb::TLevyRecordInfo* TLevyEnterRsp::add_arrrecord() {
  // @@protoc_insertion_point(field_add:pb.TLevyEnterRsp.ArrRecord)
  return arrrecord_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyRecordInfo >&
TLevyEnterRsp::arrrecord() const {
  // @@protoc_insertion_point(field_list:pb.TLevyEnterRsp.ArrRecord)
  return arrrecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyRecordInfo >*
TLevyEnterRsp::mutable_arrrecord() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyEnterRsp.ArrRecord)
  return &arrrecord_;
}

// optional .pb.TLevyPos Pos = 3;
inline bool TLevyEnterRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLevyEnterRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLevyEnterRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLevyEnterRsp::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyEnterRsp::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyEnterRsp.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyEnterRsp::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyEnterRsp.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyEnterRsp::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyEnterRsp::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyEnterRsp.Pos)
}

// -------------------------------------------------------------------

// TLevyPreviewRsp

// optional uint64 SliverNum = 1;
inline bool TLevyPreviewRsp::has_slivernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyPreviewRsp::set_has_slivernum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyPreviewRsp::clear_has_slivernum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyPreviewRsp::clear_slivernum() {
  slivernum_ = GOOGLE_ULONGLONG(0);
  clear_has_slivernum();
}
inline ::google::protobuf::uint64 TLevyPreviewRsp::slivernum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPreviewRsp.SliverNum)
  return slivernum_;
}
inline void TLevyPreviewRsp::set_slivernum(::google::protobuf::uint64 value) {
  set_has_slivernum();
  slivernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyPreviewRsp.SliverNum)
}

// repeated .pb.TCommonReward ArrReward = 2;
inline int TLevyPreviewRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TLevyPreviewRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TLevyPreviewRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyPreviewRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TLevyPreviewRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyPreviewRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TLevyPreviewRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TLevyPreviewRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TLevyPreviewRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TLevyPreviewRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TLevyPreviewRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyPreviewRsp.ArrReward)
  return &arrreward_;
}

// optional uint32 OutputDuration = 3;
inline bool TLevyPreviewRsp::has_outputduration() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLevyPreviewRsp::set_has_outputduration() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLevyPreviewRsp::clear_has_outputduration() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLevyPreviewRsp::clear_outputduration() {
  outputduration_ = 0u;
  clear_has_outputduration();
}
inline ::google::protobuf::uint32 TLevyPreviewRsp::outputduration() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPreviewRsp.OutputDuration)
  return outputduration_;
}
inline void TLevyPreviewRsp::set_outputduration(::google::protobuf::uint32 value) {
  set_has_outputduration();
  outputduration_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyPreviewRsp.OutputDuration)
}

// optional uint64 SettleTime = 4;
inline bool TLevyPreviewRsp::has_settletime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLevyPreviewRsp::set_has_settletime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLevyPreviewRsp::clear_has_settletime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLevyPreviewRsp::clear_settletime() {
  settletime_ = GOOGLE_ULONGLONG(0);
  clear_has_settletime();
}
inline ::google::protobuf::uint64 TLevyPreviewRsp::settletime() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPreviewRsp.SettleTime)
  return settletime_;
}
inline void TLevyPreviewRsp::set_settletime(::google::protobuf::uint64 value) {
  set_has_settletime();
  settletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyPreviewRsp.SettleTime)
}

// optional uint32 ConnectNum = 5;
inline bool TLevyPreviewRsp::has_connectnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLevyPreviewRsp::set_has_connectnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLevyPreviewRsp::clear_has_connectnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLevyPreviewRsp::clear_connectnum() {
  connectnum_ = 0u;
  clear_has_connectnum();
}
inline ::google::protobuf::uint32 TLevyPreviewRsp::connectnum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPreviewRsp.ConnectNum)
  return connectnum_;
}
inline void TLevyPreviewRsp::set_connectnum(::google::protobuf::uint32 value) {
  set_has_connectnum();
  connectnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyPreviewRsp.ConnectNum)
}

// -------------------------------------------------------------------

// TLevyReceiveRsp

// optional uint64 SliverNum = 1;
inline bool TLevyReceiveRsp::has_slivernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyReceiveRsp::set_has_slivernum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyReceiveRsp::clear_has_slivernum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyReceiveRsp::clear_slivernum() {
  slivernum_ = GOOGLE_ULONGLONG(0);
  clear_has_slivernum();
}
inline ::google::protobuf::uint64 TLevyReceiveRsp::slivernum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyReceiveRsp.SliverNum)
  return slivernum_;
}
inline void TLevyReceiveRsp::set_slivernum(::google::protobuf::uint64 value) {
  set_has_slivernum();
  slivernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyReceiveRsp.SliverNum)
}

// repeated .pb.TCommonReward ArrReward = 2;
inline int TLevyReceiveRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TLevyReceiveRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TLevyReceiveRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyReceiveRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TLevyReceiveRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyReceiveRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TLevyReceiveRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TLevyReceiveRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TLevyReceiveRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TLevyReceiveRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TLevyReceiveRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyReceiveRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TLevyGetRecordReq

// repeated .pb.ELevyRecordType ArrRecordType = 1;
inline int TLevyGetRecordReq::arrrecordtype_size() const {
  return arrrecordtype_.size();
}
inline void TLevyGetRecordReq::clear_arrrecordtype() {
  arrrecordtype_.Clear();
}
inline ::pb::ELevyRecordType TLevyGetRecordReq::arrrecordtype(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetRecordReq.ArrRecordType)
  return static_cast< ::pb::ELevyRecordType >(arrrecordtype_.Get(index));
}
inline void TLevyGetRecordReq::set_arrrecordtype(int index, ::pb::ELevyRecordType value) {
  assert(::pb::ELevyRecordType_IsValid(value));
  arrrecordtype_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TLevyGetRecordReq.ArrRecordType)
}
inline void TLevyGetRecordReq::add_arrrecordtype(::pb::ELevyRecordType value) {
  assert(::pb::ELevyRecordType_IsValid(value));
  arrrecordtype_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TLevyGetRecordReq.ArrRecordType)
}
inline const ::google::protobuf::RepeatedField<int>&
TLevyGetRecordReq::arrrecordtype() const {
  // @@protoc_insertion_point(field_list:pb.TLevyGetRecordReq.ArrRecordType)
  return arrrecordtype_;
}
inline ::google::protobuf::RepeatedField<int>*
TLevyGetRecordReq::mutable_arrrecordtype() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyGetRecordReq.ArrRecordType)
  return &arrrecordtype_;
}

// -------------------------------------------------------------------

// TLevyGetRecordRsp

// repeated .pb.TLevyRecordInfo ArrRecord = 1;
inline int TLevyGetRecordRsp::arrrecord_size() const {
  return arrrecord_.size();
}
inline void TLevyGetRecordRsp::clear_arrrecord() {
  arrrecord_.Clear();
}
inline const ::pb::TLevyRecordInfo& TLevyGetRecordRsp::arrrecord(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetRecordRsp.ArrRecord)
  return arrrecord_.Get(index);
}
inline ::pb::TLevyRecordInfo* TLevyGetRecordRsp::mutable_arrrecord(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyGetRecordRsp.ArrRecord)
  return arrrecord_.Mutable(index);
}
inline ::pb::TLevyRecordInfo* TLevyGetRecordRsp::add_arrrecord() {
  // @@protoc_insertion_point(field_add:pb.TLevyGetRecordRsp.ArrRecord)
  return arrrecord_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyRecordInfo >&
TLevyGetRecordRsp::arrrecord() const {
  // @@protoc_insertion_point(field_list:pb.TLevyGetRecordRsp.ArrRecord)
  return arrrecord_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyRecordInfo >*
TLevyGetRecordRsp::mutable_arrrecord() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyGetRecordRsp.ArrRecord)
  return &arrrecord_;
}

// -------------------------------------------------------------------

// TLevyGetPageInfoReq

// optional uint32 PageId = 1;
inline bool TLevyGetPageInfoReq::has_pageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyGetPageInfoReq::set_has_pageid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyGetPageInfoReq::clear_has_pageid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyGetPageInfoReq::clear_pageid() {
  pageid_ = 0u;
  clear_has_pageid();
}
inline ::google::protobuf::uint32 TLevyGetPageInfoReq::pageid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetPageInfoReq.PageId)
  return pageid_;
}
inline void TLevyGetPageInfoReq::set_pageid(::google::protobuf::uint32 value) {
  set_has_pageid();
  pageid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyGetPageInfoReq.PageId)
}

// optional uint32 Index = 2;
inline bool TLevyGetPageInfoReq::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyGetPageInfoReq::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyGetPageInfoReq::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyGetPageInfoReq::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 TLevyGetPageInfoReq::index() const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetPageInfoReq.Index)
  return index_;
}
inline void TLevyGetPageInfoReq::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyGetPageInfoReq.Index)
}

// repeated uint32 ArrPageIndex = 3;
inline int TLevyGetPageInfoReq::arrpageindex_size() const {
  return arrpageindex_.size();
}
inline void TLevyGetPageInfoReq::clear_arrpageindex() {
  arrpageindex_.Clear();
}
inline ::google::protobuf::uint32 TLevyGetPageInfoReq::arrpageindex(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetPageInfoReq.ArrPageIndex)
  return arrpageindex_.Get(index);
}
inline void TLevyGetPageInfoReq::set_arrpageindex(int index, ::google::protobuf::uint32 value) {
  arrpageindex_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TLevyGetPageInfoReq.ArrPageIndex)
}
inline void TLevyGetPageInfoReq::add_arrpageindex(::google::protobuf::uint32 value) {
  arrpageindex_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TLevyGetPageInfoReq.ArrPageIndex)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TLevyGetPageInfoReq::arrpageindex() const {
  // @@protoc_insertion_point(field_list:pb.TLevyGetPageInfoReq.ArrPageIndex)
  return arrpageindex_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TLevyGetPageInfoReq::mutable_arrpageindex() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyGetPageInfoReq.ArrPageIndex)
  return &arrpageindex_;
}

// -------------------------------------------------------------------

// TLevyGetPageInfoRsp

// repeated .pb.TLevyOtherUserInfo ArrUserLevyInfo = 1;
inline int TLevyGetPageInfoRsp::arruserlevyinfo_size() const {
  return arruserlevyinfo_.size();
}
inline void TLevyGetPageInfoRsp::clear_arruserlevyinfo() {
  arruserlevyinfo_.Clear();
}
inline const ::pb::TLevyOtherUserInfo& TLevyGetPageInfoRsp::arruserlevyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetPageInfoRsp.ArrUserLevyInfo)
  return arruserlevyinfo_.Get(index);
}
inline ::pb::TLevyOtherUserInfo* TLevyGetPageInfoRsp::mutable_arruserlevyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyGetPageInfoRsp.ArrUserLevyInfo)
  return arruserlevyinfo_.Mutable(index);
}
inline ::pb::TLevyOtherUserInfo* TLevyGetPageInfoRsp::add_arruserlevyinfo() {
  // @@protoc_insertion_point(field_add:pb.TLevyGetPageInfoRsp.ArrUserLevyInfo)
  return arruserlevyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyOtherUserInfo >&
TLevyGetPageInfoRsp::arruserlevyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLevyGetPageInfoRsp.ArrUserLevyInfo)
  return arruserlevyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyOtherUserInfo >*
TLevyGetPageInfoRsp::mutable_arruserlevyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyGetPageInfoRsp.ArrUserLevyInfo)
  return &arruserlevyinfo_;
}

// repeated .pb.TUserSimpleInfo ArrUserInfo = 2;
inline int TLevyGetPageInfoRsp::arruserinfo_size() const {
  return arruserinfo_.size();
}
inline void TLevyGetPageInfoRsp::clear_arruserinfo() {
  arruserinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TLevyGetPageInfoRsp::arruserinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetPageInfoRsp.ArrUserInfo)
  return arruserinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TLevyGetPageInfoRsp::mutable_arruserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyGetPageInfoRsp.ArrUserInfo)
  return arruserinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TLevyGetPageInfoRsp::add_arruserinfo() {
  // @@protoc_insertion_point(field_add:pb.TLevyGetPageInfoRsp.ArrUserInfo)
  return arruserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TLevyGetPageInfoRsp::arruserinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLevyGetPageInfoRsp.ArrUserInfo)
  return arruserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TLevyGetPageInfoRsp::mutable_arruserinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyGetPageInfoRsp.ArrUserInfo)
  return &arruserinfo_;
}

// -------------------------------------------------------------------

// TLevyGetCityInfoReq

// repeated .pb.TLevyPos ArrPos = 1;
inline int TLevyGetCityInfoReq::arrpos_size() const {
  return arrpos_.size();
}
inline void TLevyGetCityInfoReq::clear_arrpos() {
  arrpos_.Clear();
}
inline const ::pb::TLevyPos& TLevyGetCityInfoReq::arrpos(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetCityInfoReq.ArrPos)
  return arrpos_.Get(index);
}
inline ::pb::TLevyPos* TLevyGetCityInfoReq::mutable_arrpos(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyGetCityInfoReq.ArrPos)
  return arrpos_.Mutable(index);
}
inline ::pb::TLevyPos* TLevyGetCityInfoReq::add_arrpos() {
  // @@protoc_insertion_point(field_add:pb.TLevyGetCityInfoReq.ArrPos)
  return arrpos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyPos >&
TLevyGetCityInfoReq::arrpos() const {
  // @@protoc_insertion_point(field_list:pb.TLevyGetCityInfoReq.ArrPos)
  return arrpos_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyPos >*
TLevyGetCityInfoReq::mutable_arrpos() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyGetCityInfoReq.ArrPos)
  return &arrpos_;
}

// repeated uint64 ArrTargetUid = 2;
inline int TLevyGetCityInfoReq::arrtargetuid_size() const {
  return arrtargetuid_.size();
}
inline void TLevyGetCityInfoReq::clear_arrtargetuid() {
  arrtargetuid_.Clear();
}
inline ::google::protobuf::uint64 TLevyGetCityInfoReq::arrtargetuid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetCityInfoReq.ArrTargetUid)
  return arrtargetuid_.Get(index);
}
inline void TLevyGetCityInfoReq::set_arrtargetuid(int index, ::google::protobuf::uint64 value) {
  arrtargetuid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TLevyGetCityInfoReq.ArrTargetUid)
}
inline void TLevyGetCityInfoReq::add_arrtargetuid(::google::protobuf::uint64 value) {
  arrtargetuid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TLevyGetCityInfoReq.ArrTargetUid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TLevyGetCityInfoReq::arrtargetuid() const {
  // @@protoc_insertion_point(field_list:pb.TLevyGetCityInfoReq.ArrTargetUid)
  return arrtargetuid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TLevyGetCityInfoReq::mutable_arrtargetuid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyGetCityInfoReq.ArrTargetUid)
  return &arrtargetuid_;
}

// -------------------------------------------------------------------

// TLevyGetCityInfoRsp

// repeated .pb.TLevyOtherUserInfo ArrUserLevyInfo = 1;
inline int TLevyGetCityInfoRsp::arruserlevyinfo_size() const {
  return arruserlevyinfo_.size();
}
inline void TLevyGetCityInfoRsp::clear_arruserlevyinfo() {
  arruserlevyinfo_.Clear();
}
inline const ::pb::TLevyOtherUserInfo& TLevyGetCityInfoRsp::arruserlevyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetCityInfoRsp.ArrUserLevyInfo)
  return arruserlevyinfo_.Get(index);
}
inline ::pb::TLevyOtherUserInfo* TLevyGetCityInfoRsp::mutable_arruserlevyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyGetCityInfoRsp.ArrUserLevyInfo)
  return arruserlevyinfo_.Mutable(index);
}
inline ::pb::TLevyOtherUserInfo* TLevyGetCityInfoRsp::add_arruserlevyinfo() {
  // @@protoc_insertion_point(field_add:pb.TLevyGetCityInfoRsp.ArrUserLevyInfo)
  return arruserlevyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyOtherUserInfo >&
TLevyGetCityInfoRsp::arruserlevyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLevyGetCityInfoRsp.ArrUserLevyInfo)
  return arruserlevyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyOtherUserInfo >*
TLevyGetCityInfoRsp::mutable_arruserlevyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyGetCityInfoRsp.ArrUserLevyInfo)
  return &arruserlevyinfo_;
}

// repeated .pb.TUserSimpleInfo ArrUserInfo = 2;
inline int TLevyGetCityInfoRsp::arruserinfo_size() const {
  return arruserinfo_.size();
}
inline void TLevyGetCityInfoRsp::clear_arruserinfo() {
  arruserinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TLevyGetCityInfoRsp::arruserinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetCityInfoRsp.ArrUserInfo)
  return arruserinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TLevyGetCityInfoRsp::mutable_arruserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyGetCityInfoRsp.ArrUserInfo)
  return arruserinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TLevyGetCityInfoRsp::add_arruserinfo() {
  // @@protoc_insertion_point(field_add:pb.TLevyGetCityInfoRsp.ArrUserInfo)
  return arruserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TLevyGetCityInfoRsp::arruserinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLevyGetCityInfoRsp.ArrUserInfo)
  return arruserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TLevyGetCityInfoRsp::mutable_arruserinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyGetCityInfoRsp.ArrUserInfo)
  return &arruserinfo_;
}

// -------------------------------------------------------------------

// TLevyForceLevyRsp

// optional uint64 SliverNum = 1;
inline bool TLevyForceLevyRsp::has_slivernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyForceLevyRsp::set_has_slivernum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyForceLevyRsp::clear_has_slivernum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyForceLevyRsp::clear_slivernum() {
  slivernum_ = GOOGLE_ULONGLONG(0);
  clear_has_slivernum();
}
inline ::google::protobuf::uint64 TLevyForceLevyRsp::slivernum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyForceLevyRsp.SliverNum)
  return slivernum_;
}
inline void TLevyForceLevyRsp::set_slivernum(::google::protobuf::uint64 value) {
  set_has_slivernum();
  slivernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyForceLevyRsp.SliverNum)
}

// repeated .pb.TCommonReward ArrReward = 2;
inline int TLevyForceLevyRsp::arrreward_size() const {
  return arrreward_.size();
}
inline void TLevyForceLevyRsp::clear_arrreward() {
  arrreward_.Clear();
}
inline const ::pb::TCommonReward& TLevyForceLevyRsp::arrreward(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyForceLevyRsp.ArrReward)
  return arrreward_.Get(index);
}
inline ::pb::TCommonReward* TLevyForceLevyRsp::mutable_arrreward(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyForceLevyRsp.ArrReward)
  return arrreward_.Mutable(index);
}
inline ::pb::TCommonReward* TLevyForceLevyRsp::add_arrreward() {
  // @@protoc_insertion_point(field_add:pb.TLevyForceLevyRsp.ArrReward)
  return arrreward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TLevyForceLevyRsp::arrreward() const {
  // @@protoc_insertion_point(field_list:pb.TLevyForceLevyRsp.ArrReward)
  return arrreward_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TLevyForceLevyRsp::mutable_arrreward() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyForceLevyRsp.ArrReward)
  return &arrreward_;
}

// -------------------------------------------------------------------

// TLevyHelpReq

// optional .pb.TLevyPos Pos = 1;
inline bool TLevyHelpReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyHelpReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyHelpReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyHelpReq::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyHelpReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyHelpReq.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyHelpReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyHelpReq.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyHelpReq::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyHelpReq::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyHelpReq.Pos)
}

// optional uint64 TargetUid = 2;
inline bool TLevyHelpReq::has_targetuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyHelpReq::set_has_targetuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyHelpReq::clear_has_targetuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyHelpReq::clear_targetuid() {
  targetuid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetuid();
}
inline ::google::protobuf::uint64 TLevyHelpReq::targetuid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyHelpReq.TargetUid)
  return targetuid_;
}
inline void TLevyHelpReq::set_targetuid(::google::protobuf::uint64 value) {
  set_has_targetuid();
  targetuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyHelpReq.TargetUid)
}

// -------------------------------------------------------------------

// TLevyHelpRsp

// optional uint64 SliverNum = 1;
inline bool TLevyHelpRsp::has_slivernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyHelpRsp::set_has_slivernum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyHelpRsp::clear_has_slivernum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyHelpRsp::clear_slivernum() {
  slivernum_ = GOOGLE_ULONGLONG(0);
  clear_has_slivernum();
}
inline ::google::protobuf::uint64 TLevyHelpRsp::slivernum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyHelpRsp.SliverNum)
  return slivernum_;
}
inline void TLevyHelpRsp::set_slivernum(::google::protobuf::uint64 value) {
  set_has_slivernum();
  slivernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyHelpRsp.SliverNum)
}

// -------------------------------------------------------------------

// TLevyConquerReq

// optional .pb.TLevyPos Pos = 1;
inline bool TLevyConquerReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyConquerReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyConquerReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyConquerReq::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyConquerReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyConquerReq.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyConquerReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyConquerReq.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyConquerReq::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyConquerReq::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyConquerReq.Pos)
}

// optional uint64 TargetUid = 2;
inline bool TLevyConquerReq::has_targetuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyConquerReq::set_has_targetuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyConquerReq::clear_has_targetuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyConquerReq::clear_targetuid() {
  targetuid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetuid();
}
inline ::google::protobuf::uint64 TLevyConquerReq::targetuid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyConquerReq.TargetUid)
  return targetuid_;
}
inline void TLevyConquerReq::set_targetuid(::google::protobuf::uint64 value) {
  set_has_targetuid();
  targetuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyConquerReq.TargetUid)
}

// -------------------------------------------------------------------

// TLevyConquerRsp

// optional .pb.TBattleResult BattleRet = 1;
inline bool TLevyConquerRsp::has_battleret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyConquerRsp::set_has_battleret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyConquerRsp::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyConquerRsp::clear_battleret() {
  if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
  clear_has_battleret();
}
inline const ::pb::TBattleResult& TLevyConquerRsp::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TLevyConquerRsp.BattleRet)
  return battleret_ != NULL ? *battleret_ : *default_instance_->battleret_;
}
inline ::pb::TBattleResult* TLevyConquerRsp::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == NULL) battleret_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TLevyConquerRsp.BattleRet)
  return battleret_;
}
inline ::pb::TBattleResult* TLevyConquerRsp::release_battleret() {
  clear_has_battleret();
  ::pb::TBattleResult* temp = battleret_;
  battleret_ = NULL;
  return temp;
}
inline void TLevyConquerRsp::set_allocated_battleret(::pb::TBattleResult* battleret) {
  delete battleret_;
  battleret_ = battleret;
  if (battleret) {
    set_has_battleret();
  } else {
    clear_has_battleret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyConquerRsp.BattleRet)
}

// optional uint32 Success = 2;
inline bool TLevyConquerRsp::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyConquerRsp::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyConquerRsp::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyConquerRsp::clear_success() {
  success_ = 0u;
  clear_has_success();
}
inline ::google::protobuf::uint32 TLevyConquerRsp::success() const {
  // @@protoc_insertion_point(field_get:pb.TLevyConquerRsp.Success)
  return success_;
}
inline void TLevyConquerRsp::set_success(::google::protobuf::uint32 value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyConquerRsp.Success)
}

// -------------------------------------------------------------------

// TLevyReleaseSlaveReq

// optional uint64 SlaveUid = 1;
inline bool TLevyReleaseSlaveReq::has_slaveuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyReleaseSlaveReq::set_has_slaveuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyReleaseSlaveReq::clear_has_slaveuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyReleaseSlaveReq::clear_slaveuid() {
  slaveuid_ = GOOGLE_ULONGLONG(0);
  clear_has_slaveuid();
}
inline ::google::protobuf::uint64 TLevyReleaseSlaveReq::slaveuid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyReleaseSlaveReq.SlaveUid)
  return slaveuid_;
}
inline void TLevyReleaseSlaveReq::set_slaveuid(::google::protobuf::uint64 value) {
  set_has_slaveuid();
  slaveuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyReleaseSlaveReq.SlaveUid)
}

// -------------------------------------------------------------------

// TLevyRebelRsp

// optional .pb.TBattleResult BattleRet = 1;
inline bool TLevyRebelRsp::has_battleret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyRebelRsp::set_has_battleret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyRebelRsp::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyRebelRsp::clear_battleret() {
  if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
  clear_has_battleret();
}
inline const ::pb::TBattleResult& TLevyRebelRsp::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TLevyRebelRsp.BattleRet)
  return battleret_ != NULL ? *battleret_ : *default_instance_->battleret_;
}
inline ::pb::TBattleResult* TLevyRebelRsp::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == NULL) battleret_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TLevyRebelRsp.BattleRet)
  return battleret_;
}
inline ::pb::TBattleResult* TLevyRebelRsp::release_battleret() {
  clear_has_battleret();
  ::pb::TBattleResult* temp = battleret_;
  battleret_ = NULL;
  return temp;
}
inline void TLevyRebelRsp::set_allocated_battleret(::pb::TBattleResult* battleret) {
  delete battleret_;
  battleret_ = battleret;
  if (battleret) {
    set_has_battleret();
  } else {
    clear_has_battleret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyRebelRsp.BattleRet)
}

// optional uint32 Success = 2;
inline bool TLevyRebelRsp::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyRebelRsp::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyRebelRsp::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyRebelRsp::clear_success() {
  success_ = 0u;
  clear_has_success();
}
inline ::google::protobuf::uint32 TLevyRebelRsp::success() const {
  // @@protoc_insertion_point(field_get:pb.TLevyRebelRsp.Success)
  return success_;
}
inline void TLevyRebelRsp::set_success(::google::protobuf::uint32 value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyRebelRsp.Success)
}

// -------------------------------------------------------------------

// TLevyPlunderReq

// optional .pb.TLevyPos Pos = 1;
inline bool TLevyPlunderReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyPlunderReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyPlunderReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyPlunderReq::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyPlunderReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPlunderReq.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyPlunderReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyPlunderReq.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyPlunderReq::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyPlunderReq::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyPlunderReq.Pos)
}

// optional uint64 TargetUid = 2;
inline bool TLevyPlunderReq::has_targetuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyPlunderReq::set_has_targetuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyPlunderReq::clear_has_targetuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyPlunderReq::clear_targetuid() {
  targetuid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetuid();
}
inline ::google::protobuf::uint64 TLevyPlunderReq::targetuid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPlunderReq.TargetUid)
  return targetuid_;
}
inline void TLevyPlunderReq::set_targetuid(::google::protobuf::uint64 value) {
  set_has_targetuid();
  targetuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyPlunderReq.TargetUid)
}

// -------------------------------------------------------------------

// TLevyPlunderRsp

// optional .pb.TBattleResult BattleRet = 1;
inline bool TLevyPlunderRsp::has_battleret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyPlunderRsp::set_has_battleret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyPlunderRsp::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyPlunderRsp::clear_battleret() {
  if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
  clear_has_battleret();
}
inline const ::pb::TBattleResult& TLevyPlunderRsp::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPlunderRsp.BattleRet)
  return battleret_ != NULL ? *battleret_ : *default_instance_->battleret_;
}
inline ::pb::TBattleResult* TLevyPlunderRsp::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == NULL) battleret_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TLevyPlunderRsp.BattleRet)
  return battleret_;
}
inline ::pb::TBattleResult* TLevyPlunderRsp::release_battleret() {
  clear_has_battleret();
  ::pb::TBattleResult* temp = battleret_;
  battleret_ = NULL;
  return temp;
}
inline void TLevyPlunderRsp::set_allocated_battleret(::pb::TBattleResult* battleret) {
  delete battleret_;
  battleret_ = battleret;
  if (battleret) {
    set_has_battleret();
  } else {
    clear_has_battleret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyPlunderRsp.BattleRet)
}

// optional uint32 Success = 2;
inline bool TLevyPlunderRsp::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyPlunderRsp::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyPlunderRsp::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyPlunderRsp::clear_success() {
  success_ = 0u;
  clear_has_success();
}
inline ::google::protobuf::uint32 TLevyPlunderRsp::success() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPlunderRsp.Success)
  return success_;
}
inline void TLevyPlunderRsp::set_success(::google::protobuf::uint32 value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyPlunderRsp.Success)
}

// optional uint64 SliverNum = 3;
inline bool TLevyPlunderRsp::has_slivernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLevyPlunderRsp::set_has_slivernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLevyPlunderRsp::clear_has_slivernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLevyPlunderRsp::clear_slivernum() {
  slivernum_ = GOOGLE_ULONGLONG(0);
  clear_has_slivernum();
}
inline ::google::protobuf::uint64 TLevyPlunderRsp::slivernum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPlunderRsp.SliverNum)
  return slivernum_;
}
inline void TLevyPlunderRsp::set_slivernum(::google::protobuf::uint64 value) {
  set_has_slivernum();
  slivernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyPlunderRsp.SliverNum)
}

// -------------------------------------------------------------------

// TLevyPlunderPreviewReq

// optional .pb.TLevyPos Pos = 1;
inline bool TLevyPlunderPreviewReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyPlunderPreviewReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyPlunderPreviewReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyPlunderPreviewReq::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyPlunderPreviewReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPlunderPreviewReq.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyPlunderPreviewReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyPlunderPreviewReq.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyPlunderPreviewReq::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyPlunderPreviewReq::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyPlunderPreviewReq.Pos)
}

// optional uint64 TargetUid = 2;
inline bool TLevyPlunderPreviewReq::has_targetuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyPlunderPreviewReq::set_has_targetuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyPlunderPreviewReq::clear_has_targetuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyPlunderPreviewReq::clear_targetuid() {
  targetuid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetuid();
}
inline ::google::protobuf::uint64 TLevyPlunderPreviewReq::targetuid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPlunderPreviewReq.TargetUid)
  return targetuid_;
}
inline void TLevyPlunderPreviewReq::set_targetuid(::google::protobuf::uint64 value) {
  set_has_targetuid();
  targetuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyPlunderPreviewReq.TargetUid)
}

// -------------------------------------------------------------------

// TLevyPlunderPreviewRsp

// optional uint64 SliverNum = 1;
inline bool TLevyPlunderPreviewRsp::has_slivernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyPlunderPreviewRsp::set_has_slivernum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyPlunderPreviewRsp::clear_has_slivernum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyPlunderPreviewRsp::clear_slivernum() {
  slivernum_ = GOOGLE_ULONGLONG(0);
  clear_has_slivernum();
}
inline ::google::protobuf::uint64 TLevyPlunderPreviewRsp::slivernum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyPlunderPreviewRsp.SliverNum)
  return slivernum_;
}
inline void TLevyPlunderPreviewRsp::set_slivernum(::google::protobuf::uint64 value) {
  set_has_slivernum();
  slivernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyPlunderPreviewRsp.SliverNum)
}

// -------------------------------------------------------------------

// TLevyTrainReq

// optional uint64 SlaveUid = 1;
inline bool TLevyTrainReq::has_slaveuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyTrainReq::set_has_slaveuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyTrainReq::clear_has_slaveuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyTrainReq::clear_slaveuid() {
  slaveuid_ = GOOGLE_ULONGLONG(0);
  clear_has_slaveuid();
}
inline ::google::protobuf::uint64 TLevyTrainReq::slaveuid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyTrainReq.SlaveUid)
  return slaveuid_;
}
inline void TLevyTrainReq::set_slaveuid(::google::protobuf::uint64 value) {
  set_has_slaveuid();
  slaveuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyTrainReq.SlaveUid)
}

// optional uint32 TrainId = 2;
inline bool TLevyTrainReq::has_trainid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyTrainReq::set_has_trainid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyTrainReq::clear_has_trainid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyTrainReq::clear_trainid() {
  trainid_ = 0u;
  clear_has_trainid();
}
inline ::google::protobuf::uint32 TLevyTrainReq::trainid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyTrainReq.TrainId)
  return trainid_;
}
inline void TLevyTrainReq::set_trainid(::google::protobuf::uint32 value) {
  set_has_trainid();
  trainid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyTrainReq.TrainId)
}

// -------------------------------------------------------------------

// TLevyMoveCityToEmptyReq

// optional .pb.TLevyPos Pos = 1;
inline bool TLevyMoveCityToEmptyReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyMoveCityToEmptyReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyMoveCityToEmptyReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyMoveCityToEmptyReq::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyMoveCityToEmptyReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyMoveCityToEmptyReq.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyMoveCityToEmptyReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyMoveCityToEmptyReq.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyMoveCityToEmptyReq::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyMoveCityToEmptyReq::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyMoveCityToEmptyReq.Pos)
}

// -------------------------------------------------------------------

// TLevyMoveCityToEmptyRsp

// optional uint64 SliverNum = 1;
inline bool TLevyMoveCityToEmptyRsp::has_slivernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyMoveCityToEmptyRsp::set_has_slivernum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyMoveCityToEmptyRsp::clear_has_slivernum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyMoveCityToEmptyRsp::clear_slivernum() {
  slivernum_ = GOOGLE_ULONGLONG(0);
  clear_has_slivernum();
}
inline ::google::protobuf::uint64 TLevyMoveCityToEmptyRsp::slivernum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyMoveCityToEmptyRsp.SliverNum)
  return slivernum_;
}
inline void TLevyMoveCityToEmptyRsp::set_slivernum(::google::protobuf::uint64 value) {
  set_has_slivernum();
  slivernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyMoveCityToEmptyRsp.SliverNum)
}

// optional uint32 OutputDuration = 2;
inline bool TLevyMoveCityToEmptyRsp::has_outputduration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyMoveCityToEmptyRsp::set_has_outputduration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyMoveCityToEmptyRsp::clear_has_outputduration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyMoveCityToEmptyRsp::clear_outputduration() {
  outputduration_ = 0u;
  clear_has_outputduration();
}
inline ::google::protobuf::uint32 TLevyMoveCityToEmptyRsp::outputduration() const {
  // @@protoc_insertion_point(field_get:pb.TLevyMoveCityToEmptyRsp.OutputDuration)
  return outputduration_;
}
inline void TLevyMoveCityToEmptyRsp::set_outputduration(::google::protobuf::uint32 value) {
  set_has_outputduration();
  outputduration_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyMoveCityToEmptyRsp.OutputDuration)
}

// optional uint64 SettleTime = 3;
inline bool TLevyMoveCityToEmptyRsp::has_settletime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLevyMoveCityToEmptyRsp::set_has_settletime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLevyMoveCityToEmptyRsp::clear_has_settletime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLevyMoveCityToEmptyRsp::clear_settletime() {
  settletime_ = GOOGLE_ULONGLONG(0);
  clear_has_settletime();
}
inline ::google::protobuf::uint64 TLevyMoveCityToEmptyRsp::settletime() const {
  // @@protoc_insertion_point(field_get:pb.TLevyMoveCityToEmptyRsp.SettleTime)
  return settletime_;
}
inline void TLevyMoveCityToEmptyRsp::set_settletime(::google::protobuf::uint64 value) {
  set_has_settletime();
  settletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyMoveCityToEmptyRsp.SettleTime)
}

// -------------------------------------------------------------------

// TLevyForceMoveCityReq

// optional .pb.TLevyPos Pos = 1;
inline bool TLevyForceMoveCityReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyForceMoveCityReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyForceMoveCityReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyForceMoveCityReq::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyForceMoveCityReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyForceMoveCityReq.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyForceMoveCityReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyForceMoveCityReq.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyForceMoveCityReq::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyForceMoveCityReq::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyForceMoveCityReq.Pos)
}

// optional uint64 TargetUid = 2;
inline bool TLevyForceMoveCityReq::has_targetuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyForceMoveCityReq::set_has_targetuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyForceMoveCityReq::clear_has_targetuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyForceMoveCityReq::clear_targetuid() {
  targetuid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetuid();
}
inline ::google::protobuf::uint64 TLevyForceMoveCityReq::targetuid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyForceMoveCityReq.TargetUid)
  return targetuid_;
}
inline void TLevyForceMoveCityReq::set_targetuid(::google::protobuf::uint64 value) {
  set_has_targetuid();
  targetuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyForceMoveCityReq.TargetUid)
}

// -------------------------------------------------------------------

// TLevyForceMoveCityRsp

// optional .pb.TBattleResult BattleRet = 1;
inline bool TLevyForceMoveCityRsp::has_battleret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyForceMoveCityRsp::set_has_battleret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyForceMoveCityRsp::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyForceMoveCityRsp::clear_battleret() {
  if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
  clear_has_battleret();
}
inline const ::pb::TBattleResult& TLevyForceMoveCityRsp::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TLevyForceMoveCityRsp.BattleRet)
  return battleret_ != NULL ? *battleret_ : *default_instance_->battleret_;
}
inline ::pb::TBattleResult* TLevyForceMoveCityRsp::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == NULL) battleret_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TLevyForceMoveCityRsp.BattleRet)
  return battleret_;
}
inline ::pb::TBattleResult* TLevyForceMoveCityRsp::release_battleret() {
  clear_has_battleret();
  ::pb::TBattleResult* temp = battleret_;
  battleret_ = NULL;
  return temp;
}
inline void TLevyForceMoveCityRsp::set_allocated_battleret(::pb::TBattleResult* battleret) {
  delete battleret_;
  battleret_ = battleret;
  if (battleret) {
    set_has_battleret();
  } else {
    clear_has_battleret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyForceMoveCityRsp.BattleRet)
}

// optional uint32 Success = 2;
inline bool TLevyForceMoveCityRsp::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyForceMoveCityRsp::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyForceMoveCityRsp::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyForceMoveCityRsp::clear_success() {
  success_ = 0u;
  clear_has_success();
}
inline ::google::protobuf::uint32 TLevyForceMoveCityRsp::success() const {
  // @@protoc_insertion_point(field_get:pb.TLevyForceMoveCityRsp.Success)
  return success_;
}
inline void TLevyForceMoveCityRsp::set_success(::google::protobuf::uint32 value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyForceMoveCityRsp.Success)
}

// -------------------------------------------------------------------

// TLevyStormReq

// optional .pb.TLevyPos Pos = 1;
inline bool TLevyStormReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyStormReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyStormReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyStormReq::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyStormReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyStormReq.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyStormReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyStormReq.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyStormReq::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyStormReq::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyStormReq.Pos)
}

// optional uint64 TargetUid = 2;
inline bool TLevyStormReq::has_targetuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyStormReq::set_has_targetuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyStormReq::clear_has_targetuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyStormReq::clear_targetuid() {
  targetuid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetuid();
}
inline ::google::protobuf::uint64 TLevyStormReq::targetuid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyStormReq.TargetUid)
  return targetuid_;
}
inline void TLevyStormReq::set_targetuid(::google::protobuf::uint64 value) {
  set_has_targetuid();
  targetuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyStormReq.TargetUid)
}

// -------------------------------------------------------------------

// TLevyStormRsp

// optional .pb.TBattleResult BattleRet = 1;
inline bool TLevyStormRsp::has_battleret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyStormRsp::set_has_battleret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyStormRsp::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyStormRsp::clear_battleret() {
  if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
  clear_has_battleret();
}
inline const ::pb::TBattleResult& TLevyStormRsp::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TLevyStormRsp.BattleRet)
  return battleret_ != NULL ? *battleret_ : *default_instance_->battleret_;
}
inline ::pb::TBattleResult* TLevyStormRsp::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == NULL) battleret_ = new ::pb::TBattleResult;
  // @@protoc_insertion_point(field_mutable:pb.TLevyStormRsp.BattleRet)
  return battleret_;
}
inline ::pb::TBattleResult* TLevyStormRsp::release_battleret() {
  clear_has_battleret();
  ::pb::TBattleResult* temp = battleret_;
  battleret_ = NULL;
  return temp;
}
inline void TLevyStormRsp::set_allocated_battleret(::pb::TBattleResult* battleret) {
  delete battleret_;
  battleret_ = battleret;
  if (battleret) {
    set_has_battleret();
  } else {
    clear_has_battleret();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyStormRsp.BattleRet)
}

// optional uint32 Success = 2;
inline bool TLevyStormRsp::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyStormRsp::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyStormRsp::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyStormRsp::clear_success() {
  success_ = 0u;
  clear_has_success();
}
inline ::google::protobuf::uint32 TLevyStormRsp::success() const {
  // @@protoc_insertion_point(field_get:pb.TLevyStormRsp.Success)
  return success_;
}
inline void TLevyStormRsp::set_success(::google::protobuf::uint32 value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyStormRsp.Success)
}

// optional uint64 SliverNum = 3;
inline bool TLevyStormRsp::has_slivernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TLevyStormRsp::set_has_slivernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TLevyStormRsp::clear_has_slivernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TLevyStormRsp::clear_slivernum() {
  slivernum_ = GOOGLE_ULONGLONG(0);
  clear_has_slivernum();
}
inline ::google::protobuf::uint64 TLevyStormRsp::slivernum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyStormRsp.SliverNum)
  return slivernum_;
}
inline void TLevyStormRsp::set_slivernum(::google::protobuf::uint64 value) {
  set_has_slivernum();
  slivernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyStormRsp.SliverNum)
}

// optional .pb.TLevyPos TargetNewPos = 4;
inline bool TLevyStormRsp::has_targetnewpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLevyStormRsp::set_has_targetnewpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLevyStormRsp::clear_has_targetnewpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLevyStormRsp::clear_targetnewpos() {
  if (targetnewpos_ != NULL) targetnewpos_->::pb::TLevyPos::Clear();
  clear_has_targetnewpos();
}
inline const ::pb::TLevyPos& TLevyStormRsp::targetnewpos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyStormRsp.TargetNewPos)
  return targetnewpos_ != NULL ? *targetnewpos_ : *default_instance_->targetnewpos_;
}
inline ::pb::TLevyPos* TLevyStormRsp::mutable_targetnewpos() {
  set_has_targetnewpos();
  if (targetnewpos_ == NULL) targetnewpos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyStormRsp.TargetNewPos)
  return targetnewpos_;
}
inline ::pb::TLevyPos* TLevyStormRsp::release_targetnewpos() {
  clear_has_targetnewpos();
  ::pb::TLevyPos* temp = targetnewpos_;
  targetnewpos_ = NULL;
  return temp;
}
inline void TLevyStormRsp::set_allocated_targetnewpos(::pb::TLevyPos* targetnewpos) {
  delete targetnewpos_;
  targetnewpos_ = targetnewpos;
  if (targetnewpos) {
    set_has_targetnewpos();
  } else {
    clear_has_targetnewpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyStormRsp.TargetNewPos)
}

// -------------------------------------------------------------------

// TLevyStormPreviewReq

// optional .pb.TLevyPos Pos = 1;
inline bool TLevyStormPreviewReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyStormPreviewReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyStormPreviewReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyStormPreviewReq::clear_pos() {
  if (pos_ != NULL) pos_->::pb::TLevyPos::Clear();
  clear_has_pos();
}
inline const ::pb::TLevyPos& TLevyStormPreviewReq::pos() const {
  // @@protoc_insertion_point(field_get:pb.TLevyStormPreviewReq.Pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::pb::TLevyPos* TLevyStormPreviewReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyStormPreviewReq.Pos)
  return pos_;
}
inline ::pb::TLevyPos* TLevyStormPreviewReq::release_pos() {
  clear_has_pos();
  ::pb::TLevyPos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void TLevyStormPreviewReq::set_allocated_pos(::pb::TLevyPos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyStormPreviewReq.Pos)
}

// optional uint64 TargetUid = 2;
inline bool TLevyStormPreviewReq::has_targetuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyStormPreviewReq::set_has_targetuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyStormPreviewReq::clear_has_targetuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyStormPreviewReq::clear_targetuid() {
  targetuid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetuid();
}
inline ::google::protobuf::uint64 TLevyStormPreviewReq::targetuid() const {
  // @@protoc_insertion_point(field_get:pb.TLevyStormPreviewReq.TargetUid)
  return targetuid_;
}
inline void TLevyStormPreviewReq::set_targetuid(::google::protobuf::uint64 value) {
  set_has_targetuid();
  targetuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyStormPreviewReq.TargetUid)
}

// -------------------------------------------------------------------

// TLevyStormPreviewRsp

// optional uint64 SliverNum = 1;
inline bool TLevyStormPreviewRsp::has_slivernum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyStormPreviewRsp::set_has_slivernum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyStormPreviewRsp::clear_has_slivernum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyStormPreviewRsp::clear_slivernum() {
  slivernum_ = GOOGLE_ULONGLONG(0);
  clear_has_slivernum();
}
inline ::google::protobuf::uint64 TLevyStormPreviewRsp::slivernum() const {
  // @@protoc_insertion_point(field_get:pb.TLevyStormPreviewRsp.SliverNum)
  return slivernum_;
}
inline void TLevyStormPreviewRsp::set_slivernum(::google::protobuf::uint64 value) {
  set_has_slivernum();
  slivernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyStormPreviewRsp.SliverNum)
}

// -------------------------------------------------------------------

// TLevyGetLevyBattleReportReq

// optional uint32 Offset = 1;
inline bool TLevyGetLevyBattleReportReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyGetLevyBattleReportReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyGetLevyBattleReportReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyGetLevyBattleReportReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TLevyGetLevyBattleReportReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetLevyBattleReportReq.Offset)
  return offset_;
}
inline void TLevyGetLevyBattleReportReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyGetLevyBattleReportReq.Offset)
}

// optional uint32 Num = 2;
inline bool TLevyGetLevyBattleReportReq::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyGetLevyBattleReportReq::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyGetLevyBattleReportReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyGetLevyBattleReportReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TLevyGetLevyBattleReportReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetLevyBattleReportReq.Num)
  return num_;
}
inline void TLevyGetLevyBattleReportReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyGetLevyBattleReportReq.Num)
}

// -------------------------------------------------------------------

// TLevyGetLevyBattleReportRsp

// repeated .pb.TLevyBattleReportInfo ArrReportInfo = 1;
inline int TLevyGetLevyBattleReportRsp::arrreportinfo_size() const {
  return arrreportinfo_.size();
}
inline void TLevyGetLevyBattleReportRsp::clear_arrreportinfo() {
  arrreportinfo_.Clear();
}
inline const ::pb::TLevyBattleReportInfo& TLevyGetLevyBattleReportRsp::arrreportinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetLevyBattleReportRsp.ArrReportInfo)
  return arrreportinfo_.Get(index);
}
inline ::pb::TLevyBattleReportInfo* TLevyGetLevyBattleReportRsp::mutable_arrreportinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyGetLevyBattleReportRsp.ArrReportInfo)
  return arrreportinfo_.Mutable(index);
}
inline ::pb::TLevyBattleReportInfo* TLevyGetLevyBattleReportRsp::add_arrreportinfo() {
  // @@protoc_insertion_point(field_add:pb.TLevyGetLevyBattleReportRsp.ArrReportInfo)
  return arrreportinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyBattleReportInfo >&
TLevyGetLevyBattleReportRsp::arrreportinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLevyGetLevyBattleReportRsp.ArrReportInfo)
  return arrreportinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyBattleReportInfo >*
TLevyGetLevyBattleReportRsp::mutable_arrreportinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyGetLevyBattleReportRsp.ArrReportInfo)
  return &arrreportinfo_;
}

// -------------------------------------------------------------------

// TLevyGetGuildUserListRsp

// repeated .pb.TLevyGuildUserInfo ArrGuildUserInfo = 1;
inline int TLevyGetGuildUserListRsp::arrguilduserinfo_size() const {
  return arrguilduserinfo_.size();
}
inline void TLevyGetGuildUserListRsp::clear_arrguilduserinfo() {
  arrguilduserinfo_.Clear();
}
inline const ::pb::TLevyGuildUserInfo& TLevyGetGuildUserListRsp::arrguilduserinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyGetGuildUserListRsp.ArrGuildUserInfo)
  return arrguilduserinfo_.Get(index);
}
inline ::pb::TLevyGuildUserInfo* TLevyGetGuildUserListRsp::mutable_arrguilduserinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyGetGuildUserListRsp.ArrGuildUserInfo)
  return arrguilduserinfo_.Mutable(index);
}
inline ::pb::TLevyGuildUserInfo* TLevyGetGuildUserListRsp::add_arrguilduserinfo() {
  // @@protoc_insertion_point(field_add:pb.TLevyGetGuildUserListRsp.ArrGuildUserInfo)
  return arrguilduserinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyGuildUserInfo >&
TLevyGetGuildUserListRsp::arrguilduserinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLevyGetGuildUserListRsp.ArrGuildUserInfo)
  return arrguilduserinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyGuildUserInfo >*
TLevyGetGuildUserListRsp::mutable_arrguilduserinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyGetGuildUserListRsp.ArrGuildUserInfo)
  return &arrguilduserinfo_;
}

// -------------------------------------------------------------------

// TLevyReceiveAchievementRewardReq

// optional uint32 Id = 1;
inline bool TLevyReceiveAchievementRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyReceiveAchievementRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyReceiveAchievementRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyReceiveAchievementRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TLevyReceiveAchievementRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TLevyReceiveAchievementRewardReq.Id)
  return id_;
}
inline void TLevyReceiveAchievementRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TLevyReceiveAchievementRewardReq.Id)
}

// -------------------------------------------------------------------

// TLevyReceiveAchievementRewardRsp

// repeated .pb.TCommonReward RewardArray = 1;
inline int TLevyReceiveAchievementRewardRsp::rewardarray_size() const {
  return rewardarray_.size();
}
inline void TLevyReceiveAchievementRewardRsp::clear_rewardarray() {
  rewardarray_.Clear();
}
inline const ::pb::TCommonReward& TLevyReceiveAchievementRewardRsp::rewardarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyReceiveAchievementRewardRsp.RewardArray)
  return rewardarray_.Get(index);
}
inline ::pb::TCommonReward* TLevyReceiveAchievementRewardRsp::mutable_rewardarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyReceiveAchievementRewardRsp.RewardArray)
  return rewardarray_.Mutable(index);
}
inline ::pb::TCommonReward* TLevyReceiveAchievementRewardRsp::add_rewardarray() {
  // @@protoc_insertion_point(field_add:pb.TLevyReceiveAchievementRewardRsp.RewardArray)
  return rewardarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TLevyReceiveAchievementRewardRsp::rewardarray() const {
  // @@protoc_insertion_point(field_list:pb.TLevyReceiveAchievementRewardRsp.RewardArray)
  return rewardarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TLevyReceiveAchievementRewardRsp::mutable_rewardarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyReceiveAchievementRewardRsp.RewardArray)
  return &rewardarray_;
}

// -------------------------------------------------------------------

// TLevyUserInfoChangeNotify

// optional .pb.TLevyPos PosChange = 1;
inline bool TLevyUserInfoChangeNotify::has_poschange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyUserInfoChangeNotify::set_has_poschange() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyUserInfoChangeNotify::clear_has_poschange() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyUserInfoChangeNotify::clear_poschange() {
  if (poschange_ != NULL) poschange_->::pb::TLevyPos::Clear();
  clear_has_poschange();
}
inline const ::pb::TLevyPos& TLevyUserInfoChangeNotify::poschange() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfoChangeNotify.PosChange)
  return poschange_ != NULL ? *poschange_ : *default_instance_->poschange_;
}
inline ::pb::TLevyPos* TLevyUserInfoChangeNotify::mutable_poschange() {
  set_has_poschange();
  if (poschange_ == NULL) poschange_ = new ::pb::TLevyPos;
  // @@protoc_insertion_point(field_mutable:pb.TLevyUserInfoChangeNotify.PosChange)
  return poschange_;
}
inline ::pb::TLevyPos* TLevyUserInfoChangeNotify::release_poschange() {
  clear_has_poschange();
  ::pb::TLevyPos* temp = poschange_;
  poschange_ = NULL;
  return temp;
}
inline void TLevyUserInfoChangeNotify::set_allocated_poschange(::pb::TLevyPos* poschange) {
  delete poschange_;
  poschange_ = poschange;
  if (poschange) {
    set_has_poschange();
  } else {
    clear_has_poschange();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyUserInfoChangeNotify.PosChange)
}

// optional .pb.TLevyMasterInfo MasterChangeInfo = 2;
inline bool TLevyUserInfoChangeNotify::has_masterchangeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TLevyUserInfoChangeNotify::set_has_masterchangeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TLevyUserInfoChangeNotify::clear_has_masterchangeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TLevyUserInfoChangeNotify::clear_masterchangeinfo() {
  if (masterchangeinfo_ != NULL) masterchangeinfo_->::pb::TLevyMasterInfo::Clear();
  clear_has_masterchangeinfo();
}
inline const ::pb::TLevyMasterInfo& TLevyUserInfoChangeNotify::masterchangeinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfoChangeNotify.MasterChangeInfo)
  return masterchangeinfo_ != NULL ? *masterchangeinfo_ : *default_instance_->masterchangeinfo_;
}
inline ::pb::TLevyMasterInfo* TLevyUserInfoChangeNotify::mutable_masterchangeinfo() {
  set_has_masterchangeinfo();
  if (masterchangeinfo_ == NULL) masterchangeinfo_ = new ::pb::TLevyMasterInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLevyUserInfoChangeNotify.MasterChangeInfo)
  return masterchangeinfo_;
}
inline ::pb::TLevyMasterInfo* TLevyUserInfoChangeNotify::release_masterchangeinfo() {
  clear_has_masterchangeinfo();
  ::pb::TLevyMasterInfo* temp = masterchangeinfo_;
  masterchangeinfo_ = NULL;
  return temp;
}
inline void TLevyUserInfoChangeNotify::set_allocated_masterchangeinfo(::pb::TLevyMasterInfo* masterchangeinfo) {
  delete masterchangeinfo_;
  masterchangeinfo_ = masterchangeinfo;
  if (masterchangeinfo) {
    set_has_masterchangeinfo();
  } else {
    clear_has_masterchangeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyUserInfoChangeNotify.MasterChangeInfo)
}

// repeated .pb.TLevySlaveInfo SlaveChangeInfo = 3;
inline int TLevyUserInfoChangeNotify::slavechangeinfo_size() const {
  return slavechangeinfo_.size();
}
inline void TLevyUserInfoChangeNotify::clear_slavechangeinfo() {
  slavechangeinfo_.Clear();
}
inline const ::pb::TLevySlaveInfo& TLevyUserInfoChangeNotify::slavechangeinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfoChangeNotify.SlaveChangeInfo)
  return slavechangeinfo_.Get(index);
}
inline ::pb::TLevySlaveInfo* TLevyUserInfoChangeNotify::mutable_slavechangeinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyUserInfoChangeNotify.SlaveChangeInfo)
  return slavechangeinfo_.Mutable(index);
}
inline ::pb::TLevySlaveInfo* TLevyUserInfoChangeNotify::add_slavechangeinfo() {
  // @@protoc_insertion_point(field_add:pb.TLevyUserInfoChangeNotify.SlaveChangeInfo)
  return slavechangeinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevySlaveInfo >&
TLevyUserInfoChangeNotify::slavechangeinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLevyUserInfoChangeNotify.SlaveChangeInfo)
  return slavechangeinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLevySlaveInfo >*
TLevyUserInfoChangeNotify::mutable_slavechangeinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyUserInfoChangeNotify.SlaveChangeInfo)
  return &slavechangeinfo_;
}

// optional .pb.TLevyRecordInfo RecordInfo = 4;
inline bool TLevyUserInfoChangeNotify::has_recordinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TLevyUserInfoChangeNotify::set_has_recordinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TLevyUserInfoChangeNotify::clear_has_recordinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TLevyUserInfoChangeNotify::clear_recordinfo() {
  if (recordinfo_ != NULL) recordinfo_->::pb::TLevyRecordInfo::Clear();
  clear_has_recordinfo();
}
inline const ::pb::TLevyRecordInfo& TLevyUserInfoChangeNotify::recordinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfoChangeNotify.RecordInfo)
  return recordinfo_ != NULL ? *recordinfo_ : *default_instance_->recordinfo_;
}
inline ::pb::TLevyRecordInfo* TLevyUserInfoChangeNotify::mutable_recordinfo() {
  set_has_recordinfo();
  if (recordinfo_ == NULL) recordinfo_ = new ::pb::TLevyRecordInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLevyUserInfoChangeNotify.RecordInfo)
  return recordinfo_;
}
inline ::pb::TLevyRecordInfo* TLevyUserInfoChangeNotify::release_recordinfo() {
  clear_has_recordinfo();
  ::pb::TLevyRecordInfo* temp = recordinfo_;
  recordinfo_ = NULL;
  return temp;
}
inline void TLevyUserInfoChangeNotify::set_allocated_recordinfo(::pb::TLevyRecordInfo* recordinfo) {
  delete recordinfo_;
  recordinfo_ = recordinfo;
  if (recordinfo) {
    set_has_recordinfo();
  } else {
    clear_has_recordinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyUserInfoChangeNotify.RecordInfo)
}

// optional .pb.TLevyAchievementInfo AchievementInfo = 5;
inline bool TLevyUserInfoChangeNotify::has_achievementinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TLevyUserInfoChangeNotify::set_has_achievementinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TLevyUserInfoChangeNotify::clear_has_achievementinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TLevyUserInfoChangeNotify::clear_achievementinfo() {
  if (achievementinfo_ != NULL) achievementinfo_->::pb::TLevyAchievementInfo::Clear();
  clear_has_achievementinfo();
}
inline const ::pb::TLevyAchievementInfo& TLevyUserInfoChangeNotify::achievementinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLevyUserInfoChangeNotify.AchievementInfo)
  return achievementinfo_ != NULL ? *achievementinfo_ : *default_instance_->achievementinfo_;
}
inline ::pb::TLevyAchievementInfo* TLevyUserInfoChangeNotify::mutable_achievementinfo() {
  set_has_achievementinfo();
  if (achievementinfo_ == NULL) achievementinfo_ = new ::pb::TLevyAchievementInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLevyUserInfoChangeNotify.AchievementInfo)
  return achievementinfo_;
}
inline ::pb::TLevyAchievementInfo* TLevyUserInfoChangeNotify::release_achievementinfo() {
  clear_has_achievementinfo();
  ::pb::TLevyAchievementInfo* temp = achievementinfo_;
  achievementinfo_ = NULL;
  return temp;
}
inline void TLevyUserInfoChangeNotify::set_allocated_achievementinfo(::pb::TLevyAchievementInfo* achievementinfo) {
  delete achievementinfo_;
  achievementinfo_ = achievementinfo;
  if (achievementinfo) {
    set_has_achievementinfo();
  } else {
    clear_has_achievementinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyUserInfoChangeNotify.AchievementInfo)
}

// -------------------------------------------------------------------

// TLevyInfoChangeNotify

// optional .pb.TLevyOtherUserInfo UserLevyInfo = 1;
inline bool TLevyInfoChangeNotify::has_userlevyinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TLevyInfoChangeNotify::set_has_userlevyinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TLevyInfoChangeNotify::clear_has_userlevyinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TLevyInfoChangeNotify::clear_userlevyinfo() {
  if (userlevyinfo_ != NULL) userlevyinfo_->::pb::TLevyOtherUserInfo::Clear();
  clear_has_userlevyinfo();
}
inline const ::pb::TLevyOtherUserInfo& TLevyInfoChangeNotify::userlevyinfo() const {
  // @@protoc_insertion_point(field_get:pb.TLevyInfoChangeNotify.UserLevyInfo)
  return userlevyinfo_ != NULL ? *userlevyinfo_ : *default_instance_->userlevyinfo_;
}
inline ::pb::TLevyOtherUserInfo* TLevyInfoChangeNotify::mutable_userlevyinfo() {
  set_has_userlevyinfo();
  if (userlevyinfo_ == NULL) userlevyinfo_ = new ::pb::TLevyOtherUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TLevyInfoChangeNotify.UserLevyInfo)
  return userlevyinfo_;
}
inline ::pb::TLevyOtherUserInfo* TLevyInfoChangeNotify::release_userlevyinfo() {
  clear_has_userlevyinfo();
  ::pb::TLevyOtherUserInfo* temp = userlevyinfo_;
  userlevyinfo_ = NULL;
  return temp;
}
inline void TLevyInfoChangeNotify::set_allocated_userlevyinfo(::pb::TLevyOtherUserInfo* userlevyinfo) {
  delete userlevyinfo_;
  userlevyinfo_ = userlevyinfo;
  if (userlevyinfo) {
    set_has_userlevyinfo();
  } else {
    clear_has_userlevyinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TLevyInfoChangeNotify.UserLevyInfo)
}

// repeated .pb.TUserSimpleInfo UserInfo = 2;
inline int TLevyInfoChangeNotify::userinfo_size() const {
  return userinfo_.size();
}
inline void TLevyInfoChangeNotify::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::pb::TUserSimpleInfo& TLevyInfoChangeNotify::userinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyInfoChangeNotify.UserInfo)
  return userinfo_.Get(index);
}
inline ::pb::TUserSimpleInfo* TLevyInfoChangeNotify::mutable_userinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyInfoChangeNotify.UserInfo)
  return userinfo_.Mutable(index);
}
inline ::pb::TUserSimpleInfo* TLevyInfoChangeNotify::add_userinfo() {
  // @@protoc_insertion_point(field_add:pb.TLevyInfoChangeNotify.UserInfo)
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >&
TLevyInfoChangeNotify::userinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLevyInfoChangeNotify.UserInfo)
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUserSimpleInfo >*
TLevyInfoChangeNotify::mutable_userinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyInfoChangeNotify.UserInfo)
  return &userinfo_;
}

// -------------------------------------------------------------------

// TLevyNewBattleReportNotify

// repeated .pb.TLevyBattleReportInfo ReportInfo = 1;
inline int TLevyNewBattleReportNotify::reportinfo_size() const {
  return reportinfo_.size();
}
inline void TLevyNewBattleReportNotify::clear_reportinfo() {
  reportinfo_.Clear();
}
inline const ::pb::TLevyBattleReportInfo& TLevyNewBattleReportNotify::reportinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TLevyNewBattleReportNotify.ReportInfo)
  return reportinfo_.Get(index);
}
inline ::pb::TLevyBattleReportInfo* TLevyNewBattleReportNotify::mutable_reportinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TLevyNewBattleReportNotify.ReportInfo)
  return reportinfo_.Mutable(index);
}
inline ::pb::TLevyBattleReportInfo* TLevyNewBattleReportNotify::add_reportinfo() {
  // @@protoc_insertion_point(field_add:pb.TLevyNewBattleReportNotify.ReportInfo)
  return reportinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TLevyBattleReportInfo >&
TLevyNewBattleReportNotify::reportinfo() const {
  // @@protoc_insertion_point(field_list:pb.TLevyNewBattleReportNotify.ReportInfo)
  return reportinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TLevyBattleReportInfo >*
TLevyNewBattleReportNotify::mutable_reportinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TLevyNewBattleReportNotify.ReportInfo)
  return &reportinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ELevyRecordType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ELevyRecordType>() {
  return ::pb::ELevyRecordType_descriptor();
}
template <> struct is_proto_enum< ::pb::ELevyBattleReportType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ELevyBattleReportType>() {
  return ::pb::ELevyBattleReportType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fLevy_2eproto__INCLUDED
