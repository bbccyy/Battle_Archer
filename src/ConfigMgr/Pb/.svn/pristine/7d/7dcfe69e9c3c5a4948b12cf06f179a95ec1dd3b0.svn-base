// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActAllianceBattle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActAllianceBattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActAllianceBattleGetMissionHistoryRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleGetMissionHistoryRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleGetMemberScoreRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleGetMemberScoreRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleGetAllyScoreRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleGetAllyScoreRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleGetMissionArrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleGetMissionArrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleGetAchievementRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleGetAchievementRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleMissionHistory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleMissionHistory_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleAllyScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleAllyScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleReceiveMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleReceiveMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleDelMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleDelMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleReceiveMissionScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleReceiveMissionScore_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleGetPersonalScoreRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleGetPersonalScoreRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleGetPersonalScoreRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleGetPersonalScoreRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleGetAllyScoreRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleGetAllyScoreRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleGetAllyScoreRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleGetAllyScoreRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleBuyReceiveNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleBuyReceiveNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleTaskNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleTaskNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleScoreNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleScoreNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleDelPersonalMissionReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleDelPersonalMissionReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActAllianceBattleAbandonMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActAllianceBattleAbandonMission_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActAllianceBattle_2eproto() {
  protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActAllianceBattle.proto");
  GOOGLE_CHECK(file != NULL);
  TActAllianceBattleGetMissionHistoryRsp_descriptor_ = file->message_type(0);
  static const int TActAllianceBattleGetMissionHistoryRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetMissionHistoryRsp, arrmissionhistory_),
  };
  TActAllianceBattleGetMissionHistoryRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleGetMissionHistoryRsp_descriptor_,
      TActAllianceBattleGetMissionHistoryRsp::default_instance_,
      TActAllianceBattleGetMissionHistoryRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetMissionHistoryRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetMissionHistoryRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleGetMissionHistoryRsp));
  TActAllianceBattleGetMemberScoreRsp_descriptor_ = file->message_type(1);
  static const int TActAllianceBattleGetMemberScoreRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetMemberScoreRsp, arrmemberinfo_),
  };
  TActAllianceBattleGetMemberScoreRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleGetMemberScoreRsp_descriptor_,
      TActAllianceBattleGetMemberScoreRsp::default_instance_,
      TActAllianceBattleGetMemberScoreRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetMemberScoreRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetMemberScoreRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleGetMemberScoreRsp));
  TActAllianceBattleGetAllyScoreRsp_descriptor_ = file->message_type(2);
  static const int TActAllianceBattleGetAllyScoreRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAllyScoreRsp, arrallyscore_),
  };
  TActAllianceBattleGetAllyScoreRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleGetAllyScoreRsp_descriptor_,
      TActAllianceBattleGetAllyScoreRsp::default_instance_,
      TActAllianceBattleGetAllyScoreRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAllyScoreRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAllyScoreRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleGetAllyScoreRsp));
  TActAllianceBattleGetMissionArrRsp_descriptor_ = file->message_type(3);
  static const int TActAllianceBattleGetMissionArrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetMissionArrRsp, arrmission_),
  };
  TActAllianceBattleGetMissionArrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleGetMissionArrRsp_descriptor_,
      TActAllianceBattleGetMissionArrRsp::default_instance_,
      TActAllianceBattleGetMissionArrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetMissionArrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetMissionArrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleGetMissionArrRsp));
  TActAllianceBattleGetAchievementRecordRsp_descriptor_ = file->message_type(4);
  static const int TActAllianceBattleGetAchievementRecordRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAchievementRecordRsp, personalrewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAchievementRecordRsp, allyrewardid_),
  };
  TActAllianceBattleGetAchievementRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleGetAchievementRecordRsp_descriptor_,
      TActAllianceBattleGetAchievementRecordRsp::default_instance_,
      TActAllianceBattleGetAchievementRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAchievementRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAchievementRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleGetAchievementRecordRsp));
  TActAllianceBattleGetInfoRsp_descriptor_ = file->message_type(5);
  static const int TActAllianceBattleGetInfoRsp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, personrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, personscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, allyrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, allyscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, receivenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, receivebuynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, tierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, deletenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, abandonnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, overallpersonalrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, overalltotalranknum_),
  };
  TActAllianceBattleGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleGetInfoRsp_descriptor_,
      TActAllianceBattleGetInfoRsp::default_instance_,
      TActAllianceBattleGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleGetInfoRsp));
  TActAllianceBattleMission_descriptor_ = file->message_type(6);
  static const int TActAllianceBattleMission_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMission, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMission, missiontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMission, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMission, receivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMission, finishnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMission, gentime_),
  };
  TActAllianceBattleMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleMission_descriptor_,
      TActAllianceBattleMission::default_instance_,
      TActAllianceBattleMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleMission));
  TActAllianceBattleMissionHistory_descriptor_ = file->message_type(7);
  static const int TActAllianceBattleMissionHistory_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMissionHistory, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMissionHistory, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMissionHistory, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMissionHistory, missiontid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMissionHistory, finishtime_),
  };
  TActAllianceBattleMissionHistory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleMissionHistory_descriptor_,
      TActAllianceBattleMissionHistory::default_instance_,
      TActAllianceBattleMissionHistory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMissionHistory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMissionHistory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleMissionHistory));
  TActAllianceBattleMemberInfo_descriptor_ = file->message_type(8);
  static const int TActAllianceBattleMemberInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMemberInfo, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMemberInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMemberInfo, receivenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMemberInfo, receivebuynum_),
  };
  TActAllianceBattleMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleMemberInfo_descriptor_,
      TActAllianceBattleMemberInfo::default_instance_,
      TActAllianceBattleMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleMemberInfo));
  TActAllianceBattleAllyScore_descriptor_ = file->message_type(9);
  static const int TActAllianceBattleAllyScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleAllyScore, allyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleAllyScore, score_),
  };
  TActAllianceBattleAllyScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleAllyScore_descriptor_,
      TActAllianceBattleAllyScore::default_instance_,
      TActAllianceBattleAllyScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleAllyScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleAllyScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleAllyScore));
  TActAllianceBattleReceiveMissionReq_descriptor_ = file->message_type(10);
  static const int TActAllianceBattleReceiveMissionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleReceiveMissionReq, id_),
  };
  TActAllianceBattleReceiveMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleReceiveMissionReq_descriptor_,
      TActAllianceBattleReceiveMissionReq::default_instance_,
      TActAllianceBattleReceiveMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleReceiveMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleReceiveMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleReceiveMissionReq));
  TActAllianceBattleDelMissionReq_descriptor_ = file->message_type(11);
  static const int TActAllianceBattleDelMissionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleDelMissionReq, id_),
  };
  TActAllianceBattleDelMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleDelMissionReq_descriptor_,
      TActAllianceBattleDelMissionReq::default_instance_,
      TActAllianceBattleDelMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleDelMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleDelMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleDelMissionReq));
  TActAllianceBattleReceiveMissionScore_descriptor_ = file->message_type(12);
  static const int TActAllianceBattleReceiveMissionScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleReceiveMissionScore, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleReceiveMissionScore, missiontid_),
  };
  TActAllianceBattleReceiveMissionScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleReceiveMissionScore_descriptor_,
      TActAllianceBattleReceiveMissionScore::default_instance_,
      TActAllianceBattleReceiveMissionScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleReceiveMissionScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleReceiveMissionScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleReceiveMissionScore));
  TActAllianceBattleGetPersonalScoreRewardReq_descriptor_ = file->message_type(13);
  static const int TActAllianceBattleGetPersonalScoreRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetPersonalScoreRewardReq, id_),
  };
  TActAllianceBattleGetPersonalScoreRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleGetPersonalScoreRewardReq_descriptor_,
      TActAllianceBattleGetPersonalScoreRewardReq::default_instance_,
      TActAllianceBattleGetPersonalScoreRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetPersonalScoreRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetPersonalScoreRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleGetPersonalScoreRewardReq));
  TActAllianceBattleGetPersonalScoreRewardRsp_descriptor_ = file->message_type(14);
  static const int TActAllianceBattleGetPersonalScoreRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetPersonalScoreRewardRsp, arrreward_),
  };
  TActAllianceBattleGetPersonalScoreRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleGetPersonalScoreRewardRsp_descriptor_,
      TActAllianceBattleGetPersonalScoreRewardRsp::default_instance_,
      TActAllianceBattleGetPersonalScoreRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetPersonalScoreRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetPersonalScoreRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleGetPersonalScoreRewardRsp));
  TActAllianceBattleGetAllyScoreRewardReq_descriptor_ = file->message_type(15);
  static const int TActAllianceBattleGetAllyScoreRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAllyScoreRewardReq, id_),
  };
  TActAllianceBattleGetAllyScoreRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleGetAllyScoreRewardReq_descriptor_,
      TActAllianceBattleGetAllyScoreRewardReq::default_instance_,
      TActAllianceBattleGetAllyScoreRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAllyScoreRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAllyScoreRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleGetAllyScoreRewardReq));
  TActAllianceBattleGetAllyScoreRewardRsp_descriptor_ = file->message_type(16);
  static const int TActAllianceBattleGetAllyScoreRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAllyScoreRewardRsp, arrreward_),
  };
  TActAllianceBattleGetAllyScoreRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleGetAllyScoreRewardRsp_descriptor_,
      TActAllianceBattleGetAllyScoreRewardRsp::default_instance_,
      TActAllianceBattleGetAllyScoreRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAllyScoreRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleGetAllyScoreRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleGetAllyScoreRewardRsp));
  TActAllianceBattleBuyReceiveNumReq_descriptor_ = file->message_type(17);
  static const int TActAllianceBattleBuyReceiveNumReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleBuyReceiveNumReq, num_),
  };
  TActAllianceBattleBuyReceiveNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleBuyReceiveNumReq_descriptor_,
      TActAllianceBattleBuyReceiveNumReq::default_instance_,
      TActAllianceBattleBuyReceiveNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleBuyReceiveNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleBuyReceiveNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleBuyReceiveNumReq));
  TActAllianceBattleTaskNotify_descriptor_ = file->message_type(18);
  static const int TActAllianceBattleTaskNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleTaskNotify, tasknum_),
  };
  TActAllianceBattleTaskNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleTaskNotify_descriptor_,
      TActAllianceBattleTaskNotify::default_instance_,
      TActAllianceBattleTaskNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleTaskNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleTaskNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleTaskNotify));
  TActAllianceBattleScoreNotify_descriptor_ = file->message_type(19);
  static const int TActAllianceBattleScoreNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleScoreNotify, score_),
  };
  TActAllianceBattleScoreNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleScoreNotify_descriptor_,
      TActAllianceBattleScoreNotify::default_instance_,
      TActAllianceBattleScoreNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleScoreNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleScoreNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleScoreNotify));
  TActAllianceBattleDelPersonalMissionReq_descriptor_ = file->message_type(20);
  static const int TActAllianceBattleDelPersonalMissionReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleDelPersonalMissionReq, missionid_),
  };
  TActAllianceBattleDelPersonalMissionReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleDelPersonalMissionReq_descriptor_,
      TActAllianceBattleDelPersonalMissionReq::default_instance_,
      TActAllianceBattleDelPersonalMissionReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleDelPersonalMissionReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleDelPersonalMissionReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleDelPersonalMissionReq));
  TActAllianceBattleAbandonMission_descriptor_ = file->message_type(21);
  static const int TActAllianceBattleAbandonMission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleAbandonMission, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleAbandonMission, missiontid_),
  };
  TActAllianceBattleAbandonMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActAllianceBattleAbandonMission_descriptor_,
      TActAllianceBattleAbandonMission::default_instance_,
      TActAllianceBattleAbandonMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleAbandonMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActAllianceBattleAbandonMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActAllianceBattleAbandonMission));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActAllianceBattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleGetMissionHistoryRsp_descriptor_, &TActAllianceBattleGetMissionHistoryRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleGetMemberScoreRsp_descriptor_, &TActAllianceBattleGetMemberScoreRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleGetAllyScoreRsp_descriptor_, &TActAllianceBattleGetAllyScoreRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleGetMissionArrRsp_descriptor_, &TActAllianceBattleGetMissionArrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleGetAchievementRecordRsp_descriptor_, &TActAllianceBattleGetAchievementRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleGetInfoRsp_descriptor_, &TActAllianceBattleGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleMission_descriptor_, &TActAllianceBattleMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleMissionHistory_descriptor_, &TActAllianceBattleMissionHistory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleMemberInfo_descriptor_, &TActAllianceBattleMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleAllyScore_descriptor_, &TActAllianceBattleAllyScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleReceiveMissionReq_descriptor_, &TActAllianceBattleReceiveMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleDelMissionReq_descriptor_, &TActAllianceBattleDelMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleReceiveMissionScore_descriptor_, &TActAllianceBattleReceiveMissionScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleGetPersonalScoreRewardReq_descriptor_, &TActAllianceBattleGetPersonalScoreRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleGetPersonalScoreRewardRsp_descriptor_, &TActAllianceBattleGetPersonalScoreRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleGetAllyScoreRewardReq_descriptor_, &TActAllianceBattleGetAllyScoreRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleGetAllyScoreRewardRsp_descriptor_, &TActAllianceBattleGetAllyScoreRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleBuyReceiveNumReq_descriptor_, &TActAllianceBattleBuyReceiveNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleTaskNotify_descriptor_, &TActAllianceBattleTaskNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleScoreNotify_descriptor_, &TActAllianceBattleScoreNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleDelPersonalMissionReq_descriptor_, &TActAllianceBattleDelPersonalMissionReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActAllianceBattleAbandonMission_descriptor_, &TActAllianceBattleAbandonMission::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActAllianceBattle_2eproto() {
  delete TActAllianceBattleGetMissionHistoryRsp::default_instance_;
  delete TActAllianceBattleGetMissionHistoryRsp_reflection_;
  delete TActAllianceBattleGetMemberScoreRsp::default_instance_;
  delete TActAllianceBattleGetMemberScoreRsp_reflection_;
  delete TActAllianceBattleGetAllyScoreRsp::default_instance_;
  delete TActAllianceBattleGetAllyScoreRsp_reflection_;
  delete TActAllianceBattleGetMissionArrRsp::default_instance_;
  delete TActAllianceBattleGetMissionArrRsp_reflection_;
  delete TActAllianceBattleGetAchievementRecordRsp::default_instance_;
  delete TActAllianceBattleGetAchievementRecordRsp_reflection_;
  delete TActAllianceBattleGetInfoRsp::default_instance_;
  delete TActAllianceBattleGetInfoRsp_reflection_;
  delete TActAllianceBattleMission::default_instance_;
  delete TActAllianceBattleMission_reflection_;
  delete TActAllianceBattleMissionHistory::default_instance_;
  delete TActAllianceBattleMissionHistory_reflection_;
  delete TActAllianceBattleMemberInfo::default_instance_;
  delete TActAllianceBattleMemberInfo_reflection_;
  delete TActAllianceBattleAllyScore::default_instance_;
  delete TActAllianceBattleAllyScore_reflection_;
  delete TActAllianceBattleReceiveMissionReq::default_instance_;
  delete TActAllianceBattleReceiveMissionReq_reflection_;
  delete TActAllianceBattleDelMissionReq::default_instance_;
  delete TActAllianceBattleDelMissionReq_reflection_;
  delete TActAllianceBattleReceiveMissionScore::default_instance_;
  delete TActAllianceBattleReceiveMissionScore_reflection_;
  delete TActAllianceBattleGetPersonalScoreRewardReq::default_instance_;
  delete TActAllianceBattleGetPersonalScoreRewardReq_reflection_;
  delete TActAllianceBattleGetPersonalScoreRewardRsp::default_instance_;
  delete TActAllianceBattleGetPersonalScoreRewardRsp_reflection_;
  delete TActAllianceBattleGetAllyScoreRewardReq::default_instance_;
  delete TActAllianceBattleGetAllyScoreRewardReq_reflection_;
  delete TActAllianceBattleGetAllyScoreRewardRsp::default_instance_;
  delete TActAllianceBattleGetAllyScoreRewardRsp_reflection_;
  delete TActAllianceBattleBuyReceiveNumReq::default_instance_;
  delete TActAllianceBattleBuyReceiveNumReq_reflection_;
  delete TActAllianceBattleTaskNotify::default_instance_;
  delete TActAllianceBattleTaskNotify_reflection_;
  delete TActAllianceBattleScoreNotify::default_instance_;
  delete TActAllianceBattleScoreNotify_reflection_;
  delete TActAllianceBattleDelPersonalMissionReq::default_instance_;
  delete TActAllianceBattleDelPersonalMissionReq_reflection_;
  delete TActAllianceBattleAbandonMission::default_instance_;
  delete TActAllianceBattleAbandonMission_reflection_;
}

void protobuf_AddDesc_net_2fActAllianceBattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fAlliance_2eproto();
  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033net/ActAllianceBattle.proto\022\002pb\032\026net/C"
    "ommonReward.proto\032\022net/Alliance.proto\032\016n"
    "et/User.proto\"i\n&TActAllianceBattleGetMi"
    "ssionHistoryRsp\022\?\n\021ArrMissionHistory\030\001 \003"
    "(\0132$.pb.TActAllianceBattleMissionHistory"
    "\"^\n#TActAllianceBattleGetMemberScoreRsp\022"
    "7\n\rArrMemberInfo\030\001 \003(\0132 .pb.TActAlliance"
    "BattleMemberInfo\"Z\n!TActAllianceBattleGe"
    "tAllyScoreRsp\0225\n\014ArrAllyScore\030\001 \003(\0132\037.pb"
    ".TActAllianceBattleAllyScore\"W\n\"TActAlli"
    "anceBattleGetMissionArrRsp\0221\n\nArrMission"
    "\030\001 \003(\0132\035.pb.TActAllianceBattleMission\"[\n"
    ")TActAllianceBattleGetAchievementRecordR"
    "sp\022\030\n\020PersonalRewardId\030\003 \003(\r\022\024\n\014AllyRewa"
    "rdId\030\004 \003(\r\"\210\002\n\034TActAllianceBattleGetInfo"
    "Rsp\022\022\n\nPersonRank\030\001 \001(\r\022\023\n\013PersonScore\030\002"
    " \001(\r\022\020\n\010AllyRank\030\003 \001(\r\022\021\n\tAllyScore\030\004 \001("
    "\r\022\022\n\nReceiveNum\030\005 \001(\r\022\025\n\rReceiveBuyNum\030\006"
    " \001(\r\022\016\n\006TierId\030\007 \001(\r\022\021\n\tDeleteNum\030\010 \001(\r\022"
    "\022\n\nAbandonNum\030\t \001(\r\022\033\n\023OverallPersonalRa"
    "nk\030\n \001(\r\022\033\n\023OverallTotalRankNum\030\013 \001(\r\"\233\001"
    "\n\031TActAllianceBattleMission\022\n\n\002Id\030\001 \001(\r\022"
    "\022\n\nMissionTid\030\002 \001(\r\022%\n\010UserInfo\030\003 \001(\0132\023."
    "pb.TUserSimpleInfo\022\023\n\013ReceiveTime\030\004 \001(\004\022"
    "\021\n\tFinishNum\030\005 \001(\r\022\017\n\007GenTime\030\006 \001(\004\"\201\001\n "
    "TActAllianceBattleMissionHistory\022\021\n\tGuil"
    "dName\030\001 \001(\t\022\020\n\010UserName\030\002 \001(\t\022\020\n\010ServerI"
    "d\030\005 \001(\t\022\022\n\nMissionTid\030\003 \001(\r\022\022\n\nFinishTim"
    "e\030\004 \001(\004\"\177\n\034TActAllianceBattleMemberInfo\022"
    "%\n\010UserData\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\r"
    "\n\005Score\030\002 \001(\r\022\022\n\nReceiveNum\030\003 \001(\r\022\025\n\rRec"
    "eiveBuyNum\030\004 \001(\r\"W\n\033TActAllianceBattleAl"
    "lyScore\022)\n\010AllyInfo\030\001 \001(\0132\027.pb.TAlliance"
    "SimpleInfo\022\r\n\005Score\030\002 \001(\r\"1\n#TActAllianc"
    "eBattleReceiveMissionReq\022\n\n\002Id\030\001 \001(\r\"-\n\037"
    "TActAllianceBattleDelMissionReq\022\n\n\002Id\030\001 "
    "\001(\r\"N\n%TActAllianceBattleReceiveMissionS"
    "core\022\021\n\tMissionId\030\001 \001(\r\022\022\n\nMissionTid\030\002 "
    "\001(\r\"9\n+TActAllianceBattleGetPersonalScor"
    "eRewardReq\022\n\n\002Id\030\001 \001(\r\"S\n+TActAllianceBa"
    "ttleGetPersonalScoreRewardRsp\022$\n\tArrRewa"
    "rd\030\001 \003(\0132\021.pb.TCommonReward\"5\n\'TActAllia"
    "nceBattleGetAllyScoreRewardReq\022\n\n\002Id\030\001 \001"
    "(\r\"O\n\'TActAllianceBattleGetAllyScoreRewa"
    "rdRsp\022$\n\tArrReward\030\001 \003(\0132\021.pb.TCommonRew"
    "ard\"1\n\"TActAllianceBattleBuyReceiveNumRe"
    "q\022\013\n\003Num\030\001 \001(\r\"/\n\034TActAllianceBattleTask"
    "Notify\022\017\n\007TaskNum\030\001 \001(\r\".\n\035TActAllianceB"
    "attleScoreNotify\022\r\n\005Score\030\001 \001(\r\"<\n\'TActA"
    "llianceBattleDelPersonalMissionReq\022\021\n\tMi"
    "ssionId\030\001 \001(\r\"I\n TActAllianceBattleAband"
    "onMission\022\021\n\tMissionId\030\001 \001(\r\022\022\n\nMissionT"
    "id\030\002 \001(\r", 2088);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActAllianceBattle.proto", &protobuf_RegisterTypes);
  TActAllianceBattleGetMissionHistoryRsp::default_instance_ = new TActAllianceBattleGetMissionHistoryRsp();
  TActAllianceBattleGetMemberScoreRsp::default_instance_ = new TActAllianceBattleGetMemberScoreRsp();
  TActAllianceBattleGetAllyScoreRsp::default_instance_ = new TActAllianceBattleGetAllyScoreRsp();
  TActAllianceBattleGetMissionArrRsp::default_instance_ = new TActAllianceBattleGetMissionArrRsp();
  TActAllianceBattleGetAchievementRecordRsp::default_instance_ = new TActAllianceBattleGetAchievementRecordRsp();
  TActAllianceBattleGetInfoRsp::default_instance_ = new TActAllianceBattleGetInfoRsp();
  TActAllianceBattleMission::default_instance_ = new TActAllianceBattleMission();
  TActAllianceBattleMissionHistory::default_instance_ = new TActAllianceBattleMissionHistory();
  TActAllianceBattleMemberInfo::default_instance_ = new TActAllianceBattleMemberInfo();
  TActAllianceBattleAllyScore::default_instance_ = new TActAllianceBattleAllyScore();
  TActAllianceBattleReceiveMissionReq::default_instance_ = new TActAllianceBattleReceiveMissionReq();
  TActAllianceBattleDelMissionReq::default_instance_ = new TActAllianceBattleDelMissionReq();
  TActAllianceBattleReceiveMissionScore::default_instance_ = new TActAllianceBattleReceiveMissionScore();
  TActAllianceBattleGetPersonalScoreRewardReq::default_instance_ = new TActAllianceBattleGetPersonalScoreRewardReq();
  TActAllianceBattleGetPersonalScoreRewardRsp::default_instance_ = new TActAllianceBattleGetPersonalScoreRewardRsp();
  TActAllianceBattleGetAllyScoreRewardReq::default_instance_ = new TActAllianceBattleGetAllyScoreRewardReq();
  TActAllianceBattleGetAllyScoreRewardRsp::default_instance_ = new TActAllianceBattleGetAllyScoreRewardRsp();
  TActAllianceBattleBuyReceiveNumReq::default_instance_ = new TActAllianceBattleBuyReceiveNumReq();
  TActAllianceBattleTaskNotify::default_instance_ = new TActAllianceBattleTaskNotify();
  TActAllianceBattleScoreNotify::default_instance_ = new TActAllianceBattleScoreNotify();
  TActAllianceBattleDelPersonalMissionReq::default_instance_ = new TActAllianceBattleDelPersonalMissionReq();
  TActAllianceBattleAbandonMission::default_instance_ = new TActAllianceBattleAbandonMission();
  TActAllianceBattleGetMissionHistoryRsp::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleGetMemberScoreRsp::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleGetAllyScoreRsp::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleGetMissionArrRsp::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleGetAchievementRecordRsp::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleMission::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleMissionHistory::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleMemberInfo::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleAllyScore::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleReceiveMissionReq::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleDelMissionReq::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleReceiveMissionScore::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleGetPersonalScoreRewardReq::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleGetPersonalScoreRewardRsp::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleGetAllyScoreRewardReq::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleGetAllyScoreRewardRsp::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleBuyReceiveNumReq::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleTaskNotify::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleScoreNotify::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleDelPersonalMissionReq::default_instance_->InitAsDefaultInstance();
  TActAllianceBattleAbandonMission::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActAllianceBattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActAllianceBattle_2eproto {
  StaticDescriptorInitializer_net_2fActAllianceBattle_2eproto() {
    protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  }
} static_descriptor_initializer_net_2fActAllianceBattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleGetMissionHistoryRsp::kArrMissionHistoryFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleGetMissionHistoryRsp::TActAllianceBattleGetMissionHistoryRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleGetMissionHistoryRsp)
}

void TActAllianceBattleGetMissionHistoryRsp::InitAsDefaultInstance() {
}

TActAllianceBattleGetMissionHistoryRsp::TActAllianceBattleGetMissionHistoryRsp(const TActAllianceBattleGetMissionHistoryRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleGetMissionHistoryRsp)
}

void TActAllianceBattleGetMissionHistoryRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleGetMissionHistoryRsp::~TActAllianceBattleGetMissionHistoryRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleGetMissionHistoryRsp)
  SharedDtor();
}

void TActAllianceBattleGetMissionHistoryRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleGetMissionHistoryRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleGetMissionHistoryRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleGetMissionHistoryRsp_descriptor_;
}

const TActAllianceBattleGetMissionHistoryRsp& TActAllianceBattleGetMissionHistoryRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleGetMissionHistoryRsp* TActAllianceBattleGetMissionHistoryRsp::default_instance_ = NULL;

TActAllianceBattleGetMissionHistoryRsp* TActAllianceBattleGetMissionHistoryRsp::New() const {
  return new TActAllianceBattleGetMissionHistoryRsp;
}

void TActAllianceBattleGetMissionHistoryRsp::Clear() {
  arrmissionhistory_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleGetMissionHistoryRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleGetMissionHistoryRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActAllianceBattleMissionHistory ArrMissionHistory = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrMissionHistory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrmissionhistory()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrMissionHistory;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleGetMissionHistoryRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleGetMissionHistoryRsp)
  return false;
#undef DO_
}

void TActAllianceBattleGetMissionHistoryRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleGetMissionHistoryRsp)
  // repeated .pb.TActAllianceBattleMissionHistory ArrMissionHistory = 1;
  for (int i = 0; i < this->arrmissionhistory_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrmissionhistory(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleGetMissionHistoryRsp)
}

::google::protobuf::uint8* TActAllianceBattleGetMissionHistoryRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleGetMissionHistoryRsp)
  // repeated .pb.TActAllianceBattleMissionHistory ArrMissionHistory = 1;
  for (int i = 0; i < this->arrmissionhistory_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrmissionhistory(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleGetMissionHistoryRsp)
  return target;
}

int TActAllianceBattleGetMissionHistoryRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActAllianceBattleMissionHistory ArrMissionHistory = 1;
  total_size += 1 * this->arrmissionhistory_size();
  for (int i = 0; i < this->arrmissionhistory_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrmissionhistory(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleGetMissionHistoryRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleGetMissionHistoryRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleGetMissionHistoryRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleGetMissionHistoryRsp::MergeFrom(const TActAllianceBattleGetMissionHistoryRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrmissionhistory_.MergeFrom(from.arrmissionhistory_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleGetMissionHistoryRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleGetMissionHistoryRsp::CopyFrom(const TActAllianceBattleGetMissionHistoryRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleGetMissionHistoryRsp::IsInitialized() const {

  return true;
}

void TActAllianceBattleGetMissionHistoryRsp::Swap(TActAllianceBattleGetMissionHistoryRsp* other) {
  if (other != this) {
    arrmissionhistory_.Swap(&other->arrmissionhistory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleGetMissionHistoryRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleGetMissionHistoryRsp_descriptor_;
  metadata.reflection = TActAllianceBattleGetMissionHistoryRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleGetMemberScoreRsp::kArrMemberInfoFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleGetMemberScoreRsp::TActAllianceBattleGetMemberScoreRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleGetMemberScoreRsp)
}

void TActAllianceBattleGetMemberScoreRsp::InitAsDefaultInstance() {
}

TActAllianceBattleGetMemberScoreRsp::TActAllianceBattleGetMemberScoreRsp(const TActAllianceBattleGetMemberScoreRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleGetMemberScoreRsp)
}

void TActAllianceBattleGetMemberScoreRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleGetMemberScoreRsp::~TActAllianceBattleGetMemberScoreRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleGetMemberScoreRsp)
  SharedDtor();
}

void TActAllianceBattleGetMemberScoreRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleGetMemberScoreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleGetMemberScoreRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleGetMemberScoreRsp_descriptor_;
}

const TActAllianceBattleGetMemberScoreRsp& TActAllianceBattleGetMemberScoreRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleGetMemberScoreRsp* TActAllianceBattleGetMemberScoreRsp::default_instance_ = NULL;

TActAllianceBattleGetMemberScoreRsp* TActAllianceBattleGetMemberScoreRsp::New() const {
  return new TActAllianceBattleGetMemberScoreRsp;
}

void TActAllianceBattleGetMemberScoreRsp::Clear() {
  arrmemberinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleGetMemberScoreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleGetMemberScoreRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActAllianceBattleMemberInfo ArrMemberInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrMemberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrmemberinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrMemberInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleGetMemberScoreRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleGetMemberScoreRsp)
  return false;
#undef DO_
}

void TActAllianceBattleGetMemberScoreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleGetMemberScoreRsp)
  // repeated .pb.TActAllianceBattleMemberInfo ArrMemberInfo = 1;
  for (int i = 0; i < this->arrmemberinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrmemberinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleGetMemberScoreRsp)
}

::google::protobuf::uint8* TActAllianceBattleGetMemberScoreRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleGetMemberScoreRsp)
  // repeated .pb.TActAllianceBattleMemberInfo ArrMemberInfo = 1;
  for (int i = 0; i < this->arrmemberinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrmemberinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleGetMemberScoreRsp)
  return target;
}

int TActAllianceBattleGetMemberScoreRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActAllianceBattleMemberInfo ArrMemberInfo = 1;
  total_size += 1 * this->arrmemberinfo_size();
  for (int i = 0; i < this->arrmemberinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrmemberinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleGetMemberScoreRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleGetMemberScoreRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleGetMemberScoreRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleGetMemberScoreRsp::MergeFrom(const TActAllianceBattleGetMemberScoreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrmemberinfo_.MergeFrom(from.arrmemberinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleGetMemberScoreRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleGetMemberScoreRsp::CopyFrom(const TActAllianceBattleGetMemberScoreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleGetMemberScoreRsp::IsInitialized() const {

  return true;
}

void TActAllianceBattleGetMemberScoreRsp::Swap(TActAllianceBattleGetMemberScoreRsp* other) {
  if (other != this) {
    arrmemberinfo_.Swap(&other->arrmemberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleGetMemberScoreRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleGetMemberScoreRsp_descriptor_;
  metadata.reflection = TActAllianceBattleGetMemberScoreRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleGetAllyScoreRsp::kArrAllyScoreFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleGetAllyScoreRsp::TActAllianceBattleGetAllyScoreRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleGetAllyScoreRsp)
}

void TActAllianceBattleGetAllyScoreRsp::InitAsDefaultInstance() {
}

TActAllianceBattleGetAllyScoreRsp::TActAllianceBattleGetAllyScoreRsp(const TActAllianceBattleGetAllyScoreRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleGetAllyScoreRsp)
}

void TActAllianceBattleGetAllyScoreRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleGetAllyScoreRsp::~TActAllianceBattleGetAllyScoreRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleGetAllyScoreRsp)
  SharedDtor();
}

void TActAllianceBattleGetAllyScoreRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleGetAllyScoreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleGetAllyScoreRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleGetAllyScoreRsp_descriptor_;
}

const TActAllianceBattleGetAllyScoreRsp& TActAllianceBattleGetAllyScoreRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleGetAllyScoreRsp* TActAllianceBattleGetAllyScoreRsp::default_instance_ = NULL;

TActAllianceBattleGetAllyScoreRsp* TActAllianceBattleGetAllyScoreRsp::New() const {
  return new TActAllianceBattleGetAllyScoreRsp;
}

void TActAllianceBattleGetAllyScoreRsp::Clear() {
  arrallyscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleGetAllyScoreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleGetAllyScoreRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActAllianceBattleAllyScore ArrAllyScore = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrAllyScore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrallyscore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrAllyScore;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleGetAllyScoreRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleGetAllyScoreRsp)
  return false;
#undef DO_
}

void TActAllianceBattleGetAllyScoreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleGetAllyScoreRsp)
  // repeated .pb.TActAllianceBattleAllyScore ArrAllyScore = 1;
  for (int i = 0; i < this->arrallyscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrallyscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleGetAllyScoreRsp)
}

::google::protobuf::uint8* TActAllianceBattleGetAllyScoreRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleGetAllyScoreRsp)
  // repeated .pb.TActAllianceBattleAllyScore ArrAllyScore = 1;
  for (int i = 0; i < this->arrallyscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrallyscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleGetAllyScoreRsp)
  return target;
}

int TActAllianceBattleGetAllyScoreRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActAllianceBattleAllyScore ArrAllyScore = 1;
  total_size += 1 * this->arrallyscore_size();
  for (int i = 0; i < this->arrallyscore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrallyscore(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleGetAllyScoreRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleGetAllyScoreRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleGetAllyScoreRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleGetAllyScoreRsp::MergeFrom(const TActAllianceBattleGetAllyScoreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrallyscore_.MergeFrom(from.arrallyscore_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleGetAllyScoreRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleGetAllyScoreRsp::CopyFrom(const TActAllianceBattleGetAllyScoreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleGetAllyScoreRsp::IsInitialized() const {

  return true;
}

void TActAllianceBattleGetAllyScoreRsp::Swap(TActAllianceBattleGetAllyScoreRsp* other) {
  if (other != this) {
    arrallyscore_.Swap(&other->arrallyscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleGetAllyScoreRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleGetAllyScoreRsp_descriptor_;
  metadata.reflection = TActAllianceBattleGetAllyScoreRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleGetMissionArrRsp::kArrMissionFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleGetMissionArrRsp::TActAllianceBattleGetMissionArrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleGetMissionArrRsp)
}

void TActAllianceBattleGetMissionArrRsp::InitAsDefaultInstance() {
}

TActAllianceBattleGetMissionArrRsp::TActAllianceBattleGetMissionArrRsp(const TActAllianceBattleGetMissionArrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleGetMissionArrRsp)
}

void TActAllianceBattleGetMissionArrRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleGetMissionArrRsp::~TActAllianceBattleGetMissionArrRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleGetMissionArrRsp)
  SharedDtor();
}

void TActAllianceBattleGetMissionArrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleGetMissionArrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleGetMissionArrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleGetMissionArrRsp_descriptor_;
}

const TActAllianceBattleGetMissionArrRsp& TActAllianceBattleGetMissionArrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleGetMissionArrRsp* TActAllianceBattleGetMissionArrRsp::default_instance_ = NULL;

TActAllianceBattleGetMissionArrRsp* TActAllianceBattleGetMissionArrRsp::New() const {
  return new TActAllianceBattleGetMissionArrRsp;
}

void TActAllianceBattleGetMissionArrRsp::Clear() {
  arrmission_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleGetMissionArrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleGetMissionArrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActAllianceBattleMission ArrMission = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrMission:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrmission()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrMission;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleGetMissionArrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleGetMissionArrRsp)
  return false;
#undef DO_
}

void TActAllianceBattleGetMissionArrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleGetMissionArrRsp)
  // repeated .pb.TActAllianceBattleMission ArrMission = 1;
  for (int i = 0; i < this->arrmission_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrmission(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleGetMissionArrRsp)
}

::google::protobuf::uint8* TActAllianceBattleGetMissionArrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleGetMissionArrRsp)
  // repeated .pb.TActAllianceBattleMission ArrMission = 1;
  for (int i = 0; i < this->arrmission_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrmission(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleGetMissionArrRsp)
  return target;
}

int TActAllianceBattleGetMissionArrRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TActAllianceBattleMission ArrMission = 1;
  total_size += 1 * this->arrmission_size();
  for (int i = 0; i < this->arrmission_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrmission(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleGetMissionArrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleGetMissionArrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleGetMissionArrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleGetMissionArrRsp::MergeFrom(const TActAllianceBattleGetMissionArrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrmission_.MergeFrom(from.arrmission_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleGetMissionArrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleGetMissionArrRsp::CopyFrom(const TActAllianceBattleGetMissionArrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleGetMissionArrRsp::IsInitialized() const {

  return true;
}

void TActAllianceBattleGetMissionArrRsp::Swap(TActAllianceBattleGetMissionArrRsp* other) {
  if (other != this) {
    arrmission_.Swap(&other->arrmission_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleGetMissionArrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleGetMissionArrRsp_descriptor_;
  metadata.reflection = TActAllianceBattleGetMissionArrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleGetAchievementRecordRsp::kPersonalRewardIdFieldNumber;
const int TActAllianceBattleGetAchievementRecordRsp::kAllyRewardIdFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleGetAchievementRecordRsp::TActAllianceBattleGetAchievementRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleGetAchievementRecordRsp)
}

void TActAllianceBattleGetAchievementRecordRsp::InitAsDefaultInstance() {
}

TActAllianceBattleGetAchievementRecordRsp::TActAllianceBattleGetAchievementRecordRsp(const TActAllianceBattleGetAchievementRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleGetAchievementRecordRsp)
}

void TActAllianceBattleGetAchievementRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleGetAchievementRecordRsp::~TActAllianceBattleGetAchievementRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleGetAchievementRecordRsp)
  SharedDtor();
}

void TActAllianceBattleGetAchievementRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleGetAchievementRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleGetAchievementRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleGetAchievementRecordRsp_descriptor_;
}

const TActAllianceBattleGetAchievementRecordRsp& TActAllianceBattleGetAchievementRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleGetAchievementRecordRsp* TActAllianceBattleGetAchievementRecordRsp::default_instance_ = NULL;

TActAllianceBattleGetAchievementRecordRsp* TActAllianceBattleGetAchievementRecordRsp::New() const {
  return new TActAllianceBattleGetAchievementRecordRsp;
}

void TActAllianceBattleGetAchievementRecordRsp::Clear() {
  personalrewardid_.Clear();
  allyrewardid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleGetAchievementRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleGetAchievementRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 PersonalRewardId = 3;
      case 3: {
        if (tag == 24) {
         parse_PersonalRewardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_personalrewardid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_personalrewardid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_PersonalRewardId;
        if (input->ExpectTag(32)) goto parse_AllyRewardId;
        break;
      }

      // repeated uint32 AllyRewardId = 4;
      case 4: {
        if (tag == 32) {
         parse_AllyRewardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_allyrewardid())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_allyrewardid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AllyRewardId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleGetAchievementRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleGetAchievementRecordRsp)
  return false;
#undef DO_
}

void TActAllianceBattleGetAchievementRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleGetAchievementRecordRsp)
  // repeated uint32 PersonalRewardId = 3;
  for (int i = 0; i < this->personalrewardid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->personalrewardid(i), output);
  }

  // repeated uint32 AllyRewardId = 4;
  for (int i = 0; i < this->allyrewardid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->allyrewardid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleGetAchievementRecordRsp)
}

::google::protobuf::uint8* TActAllianceBattleGetAchievementRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleGetAchievementRecordRsp)
  // repeated uint32 PersonalRewardId = 3;
  for (int i = 0; i < this->personalrewardid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->personalrewardid(i), target);
  }

  // repeated uint32 AllyRewardId = 4;
  for (int i = 0; i < this->allyrewardid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->allyrewardid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleGetAchievementRecordRsp)
  return target;
}

int TActAllianceBattleGetAchievementRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 PersonalRewardId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->personalrewardid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->personalrewardid(i));
    }
    total_size += 1 * this->personalrewardid_size() + data_size;
  }

  // repeated uint32 AllyRewardId = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->allyrewardid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->allyrewardid(i));
    }
    total_size += 1 * this->allyrewardid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleGetAchievementRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleGetAchievementRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleGetAchievementRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleGetAchievementRecordRsp::MergeFrom(const TActAllianceBattleGetAchievementRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  personalrewardid_.MergeFrom(from.personalrewardid_);
  allyrewardid_.MergeFrom(from.allyrewardid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleGetAchievementRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleGetAchievementRecordRsp::CopyFrom(const TActAllianceBattleGetAchievementRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleGetAchievementRecordRsp::IsInitialized() const {

  return true;
}

void TActAllianceBattleGetAchievementRecordRsp::Swap(TActAllianceBattleGetAchievementRecordRsp* other) {
  if (other != this) {
    personalrewardid_.Swap(&other->personalrewardid_);
    allyrewardid_.Swap(&other->allyrewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleGetAchievementRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleGetAchievementRecordRsp_descriptor_;
  metadata.reflection = TActAllianceBattleGetAchievementRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleGetInfoRsp::kPersonRankFieldNumber;
const int TActAllianceBattleGetInfoRsp::kPersonScoreFieldNumber;
const int TActAllianceBattleGetInfoRsp::kAllyRankFieldNumber;
const int TActAllianceBattleGetInfoRsp::kAllyScoreFieldNumber;
const int TActAllianceBattleGetInfoRsp::kReceiveNumFieldNumber;
const int TActAllianceBattleGetInfoRsp::kReceiveBuyNumFieldNumber;
const int TActAllianceBattleGetInfoRsp::kTierIdFieldNumber;
const int TActAllianceBattleGetInfoRsp::kDeleteNumFieldNumber;
const int TActAllianceBattleGetInfoRsp::kAbandonNumFieldNumber;
const int TActAllianceBattleGetInfoRsp::kOverallPersonalRankFieldNumber;
const int TActAllianceBattleGetInfoRsp::kOverallTotalRankNumFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleGetInfoRsp::TActAllianceBattleGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleGetInfoRsp)
}

void TActAllianceBattleGetInfoRsp::InitAsDefaultInstance() {
}

TActAllianceBattleGetInfoRsp::TActAllianceBattleGetInfoRsp(const TActAllianceBattleGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleGetInfoRsp)
}

void TActAllianceBattleGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  personrank_ = 0u;
  personscore_ = 0u;
  allyrank_ = 0u;
  allyscore_ = 0u;
  receivenum_ = 0u;
  receivebuynum_ = 0u;
  tierid_ = 0u;
  deletenum_ = 0u;
  abandonnum_ = 0u;
  overallpersonalrank_ = 0u;
  overalltotalranknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleGetInfoRsp::~TActAllianceBattleGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleGetInfoRsp)
  SharedDtor();
}

void TActAllianceBattleGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleGetInfoRsp_descriptor_;
}

const TActAllianceBattleGetInfoRsp& TActAllianceBattleGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleGetInfoRsp* TActAllianceBattleGetInfoRsp::default_instance_ = NULL;

TActAllianceBattleGetInfoRsp* TActAllianceBattleGetInfoRsp::New() const {
  return new TActAllianceBattleGetInfoRsp;
}

void TActAllianceBattleGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActAllianceBattleGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(personrank_, deletenum_);
  }
  ZR_(abandonnum_, overalltotalranknum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PersonRank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &personrank_)));
          set_has_personrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PersonScore;
        break;
      }

      // optional uint32 PersonScore = 2;
      case 2: {
        if (tag == 16) {
         parse_PersonScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &personscore_)));
          set_has_personscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AllyRank;
        break;
      }

      // optional uint32 AllyRank = 3;
      case 3: {
        if (tag == 24) {
         parse_AllyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allyrank_)));
          set_has_allyrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AllyScore;
        break;
      }

      // optional uint32 AllyScore = 4;
      case 4: {
        if (tag == 32) {
         parse_AllyScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allyscore_)));
          set_has_allyscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ReceiveNum;
        break;
      }

      // optional uint32 ReceiveNum = 5;
      case 5: {
        if (tag == 40) {
         parse_ReceiveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivenum_)));
          set_has_receivenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ReceiveBuyNum;
        break;
      }

      // optional uint32 ReceiveBuyNum = 6;
      case 6: {
        if (tag == 48) {
         parse_ReceiveBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivebuynum_)));
          set_has_receivebuynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TierId;
        break;
      }

      // optional uint32 TierId = 7;
      case 7: {
        if (tag == 56) {
         parse_TierId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tierid_)));
          set_has_tierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_DeleteNum;
        break;
      }

      // optional uint32 DeleteNum = 8;
      case 8: {
        if (tag == 64) {
         parse_DeleteNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deletenum_)));
          set_has_deletenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_AbandonNum;
        break;
      }

      // optional uint32 AbandonNum = 9;
      case 9: {
        if (tag == 72) {
         parse_AbandonNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &abandonnum_)));
          set_has_abandonnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_OverallPersonalRank;
        break;
      }

      // optional uint32 OverallPersonalRank = 10;
      case 10: {
        if (tag == 80) {
         parse_OverallPersonalRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overallpersonalrank_)));
          set_has_overallpersonalrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_OverallTotalRankNum;
        break;
      }

      // optional uint32 OverallTotalRankNum = 11;
      case 11: {
        if (tag == 88) {
         parse_OverallTotalRankNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overalltotalranknum_)));
          set_has_overalltotalranknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleGetInfoRsp)
  return false;
#undef DO_
}

void TActAllianceBattleGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleGetInfoRsp)
  // optional uint32 PersonRank = 1;
  if (has_personrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->personrank(), output);
  }

  // optional uint32 PersonScore = 2;
  if (has_personscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->personscore(), output);
  }

  // optional uint32 AllyRank = 3;
  if (has_allyrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->allyrank(), output);
  }

  // optional uint32 AllyScore = 4;
  if (has_allyscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->allyscore(), output);
  }

  // optional uint32 ReceiveNum = 5;
  if (has_receivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->receivenum(), output);
  }

  // optional uint32 ReceiveBuyNum = 6;
  if (has_receivebuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->receivebuynum(), output);
  }

  // optional uint32 TierId = 7;
  if (has_tierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tierid(), output);
  }

  // optional uint32 DeleteNum = 8;
  if (has_deletenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->deletenum(), output);
  }

  // optional uint32 AbandonNum = 9;
  if (has_abandonnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->abandonnum(), output);
  }

  // optional uint32 OverallPersonalRank = 10;
  if (has_overallpersonalrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->overallpersonalrank(), output);
  }

  // optional uint32 OverallTotalRankNum = 11;
  if (has_overalltotalranknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->overalltotalranknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleGetInfoRsp)
}

::google::protobuf::uint8* TActAllianceBattleGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleGetInfoRsp)
  // optional uint32 PersonRank = 1;
  if (has_personrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->personrank(), target);
  }

  // optional uint32 PersonScore = 2;
  if (has_personscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->personscore(), target);
  }

  // optional uint32 AllyRank = 3;
  if (has_allyrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->allyrank(), target);
  }

  // optional uint32 AllyScore = 4;
  if (has_allyscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->allyscore(), target);
  }

  // optional uint32 ReceiveNum = 5;
  if (has_receivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->receivenum(), target);
  }

  // optional uint32 ReceiveBuyNum = 6;
  if (has_receivebuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->receivebuynum(), target);
  }

  // optional uint32 TierId = 7;
  if (has_tierid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tierid(), target);
  }

  // optional uint32 DeleteNum = 8;
  if (has_deletenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->deletenum(), target);
  }

  // optional uint32 AbandonNum = 9;
  if (has_abandonnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->abandonnum(), target);
  }

  // optional uint32 OverallPersonalRank = 10;
  if (has_overallpersonalrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->overallpersonalrank(), target);
  }

  // optional uint32 OverallTotalRankNum = 11;
  if (has_overalltotalranknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->overalltotalranknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleGetInfoRsp)
  return target;
}

int TActAllianceBattleGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PersonRank = 1;
    if (has_personrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->personrank());
    }

    // optional uint32 PersonScore = 2;
    if (has_personscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->personscore());
    }

    // optional uint32 AllyRank = 3;
    if (has_allyrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allyrank());
    }

    // optional uint32 AllyScore = 4;
    if (has_allyscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allyscore());
    }

    // optional uint32 ReceiveNum = 5;
    if (has_receivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receivenum());
    }

    // optional uint32 ReceiveBuyNum = 6;
    if (has_receivebuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receivebuynum());
    }

    // optional uint32 TierId = 7;
    if (has_tierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tierid());
    }

    // optional uint32 DeleteNum = 8;
    if (has_deletenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deletenum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 AbandonNum = 9;
    if (has_abandonnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->abandonnum());
    }

    // optional uint32 OverallPersonalRank = 10;
    if (has_overallpersonalrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overallpersonalrank());
    }

    // optional uint32 OverallTotalRankNum = 11;
    if (has_overalltotalranknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overalltotalranknum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleGetInfoRsp::MergeFrom(const TActAllianceBattleGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_personrank()) {
      set_personrank(from.personrank());
    }
    if (from.has_personscore()) {
      set_personscore(from.personscore());
    }
    if (from.has_allyrank()) {
      set_allyrank(from.allyrank());
    }
    if (from.has_allyscore()) {
      set_allyscore(from.allyscore());
    }
    if (from.has_receivenum()) {
      set_receivenum(from.receivenum());
    }
    if (from.has_receivebuynum()) {
      set_receivebuynum(from.receivebuynum());
    }
    if (from.has_tierid()) {
      set_tierid(from.tierid());
    }
    if (from.has_deletenum()) {
      set_deletenum(from.deletenum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_abandonnum()) {
      set_abandonnum(from.abandonnum());
    }
    if (from.has_overallpersonalrank()) {
      set_overallpersonalrank(from.overallpersonalrank());
    }
    if (from.has_overalltotalranknum()) {
      set_overalltotalranknum(from.overalltotalranknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleGetInfoRsp::CopyFrom(const TActAllianceBattleGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleGetInfoRsp::IsInitialized() const {

  return true;
}

void TActAllianceBattleGetInfoRsp::Swap(TActAllianceBattleGetInfoRsp* other) {
  if (other != this) {
    std::swap(personrank_, other->personrank_);
    std::swap(personscore_, other->personscore_);
    std::swap(allyrank_, other->allyrank_);
    std::swap(allyscore_, other->allyscore_);
    std::swap(receivenum_, other->receivenum_);
    std::swap(receivebuynum_, other->receivebuynum_);
    std::swap(tierid_, other->tierid_);
    std::swap(deletenum_, other->deletenum_);
    std::swap(abandonnum_, other->abandonnum_);
    std::swap(overallpersonalrank_, other->overallpersonalrank_);
    std::swap(overalltotalranknum_, other->overalltotalranknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleGetInfoRsp_descriptor_;
  metadata.reflection = TActAllianceBattleGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleMission::kIdFieldNumber;
const int TActAllianceBattleMission::kMissionTidFieldNumber;
const int TActAllianceBattleMission::kUserInfoFieldNumber;
const int TActAllianceBattleMission::kReceiveTimeFieldNumber;
const int TActAllianceBattleMission::kFinishNumFieldNumber;
const int TActAllianceBattleMission::kGenTimeFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleMission::TActAllianceBattleMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleMission)
}

void TActAllianceBattleMission::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TActAllianceBattleMission::TActAllianceBattleMission(const TActAllianceBattleMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleMission)
}

void TActAllianceBattleMission::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  missiontid_ = 0u;
  userinfo_ = NULL;
  receivetime_ = GOOGLE_ULONGLONG(0);
  finishnum_ = 0u;
  gentime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleMission::~TActAllianceBattleMission() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleMission)
  SharedDtor();
}

void TActAllianceBattleMission::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TActAllianceBattleMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleMission_descriptor_;
}

const TActAllianceBattleMission& TActAllianceBattleMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleMission* TActAllianceBattleMission::default_instance_ = NULL;

TActAllianceBattleMission* TActAllianceBattleMission::New() const {
  return new TActAllianceBattleMission;
}

void TActAllianceBattleMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActAllianceBattleMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, missiontid_);
    ZR_(receivetime_, finishnum_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MissionTid;
        break;
      }

      // optional uint32 MissionTid = 2;
      case 2: {
        if (tag == 16) {
         parse_MissionTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missiontid_)));
          set_has_missiontid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ReceiveTime;
        break;
      }

      // optional uint64 ReceiveTime = 4;
      case 4: {
        if (tag == 32) {
         parse_ReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receivetime_)));
          set_has_receivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_FinishNum;
        break;
      }

      // optional uint32 FinishNum = 5;
      case 5: {
        if (tag == 40) {
         parse_FinishNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishnum_)));
          set_has_finishnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_GenTime;
        break;
      }

      // optional uint64 GenTime = 6;
      case 6: {
        if (tag == 48) {
         parse_GenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gentime_)));
          set_has_gentime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleMission)
  return false;
#undef DO_
}

void TActAllianceBattleMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleMission)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 MissionTid = 2;
  if (has_missiontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->missiontid(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userinfo(), output);
  }

  // optional uint64 ReceiveTime = 4;
  if (has_receivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->receivetime(), output);
  }

  // optional uint32 FinishNum = 5;
  if (has_finishnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->finishnum(), output);
  }

  // optional uint64 GenTime = 6;
  if (has_gentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gentime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleMission)
}

::google::protobuf::uint8* TActAllianceBattleMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleMission)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 MissionTid = 2;
  if (has_missiontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->missiontid(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 3;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userinfo(), target);
  }

  // optional uint64 ReceiveTime = 4;
  if (has_receivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->receivetime(), target);
  }

  // optional uint32 FinishNum = 5;
  if (has_finishnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->finishnum(), target);
  }

  // optional uint64 GenTime = 6;
  if (has_gentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->gentime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleMission)
  return target;
}

int TActAllianceBattleMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 MissionTid = 2;
    if (has_missiontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missiontid());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 3;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint64 ReceiveTime = 4;
    if (has_receivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receivetime());
    }

    // optional uint32 FinishNum = 5;
    if (has_finishnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishnum());
    }

    // optional uint64 GenTime = 6;
    if (has_gentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gentime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleMission::MergeFrom(const TActAllianceBattleMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_missiontid()) {
      set_missiontid(from.missiontid());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_receivetime()) {
      set_receivetime(from.receivetime());
    }
    if (from.has_finishnum()) {
      set_finishnum(from.finishnum());
    }
    if (from.has_gentime()) {
      set_gentime(from.gentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleMission::CopyFrom(const TActAllianceBattleMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleMission::IsInitialized() const {

  return true;
}

void TActAllianceBattleMission::Swap(TActAllianceBattleMission* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(missiontid_, other->missiontid_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(receivetime_, other->receivetime_);
    std::swap(finishnum_, other->finishnum_);
    std::swap(gentime_, other->gentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleMission_descriptor_;
  metadata.reflection = TActAllianceBattleMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleMissionHistory::kGuildNameFieldNumber;
const int TActAllianceBattleMissionHistory::kUserNameFieldNumber;
const int TActAllianceBattleMissionHistory::kServerIdFieldNumber;
const int TActAllianceBattleMissionHistory::kMissionTidFieldNumber;
const int TActAllianceBattleMissionHistory::kFinishTimeFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleMissionHistory::TActAllianceBattleMissionHistory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleMissionHistory)
}

void TActAllianceBattleMissionHistory::InitAsDefaultInstance() {
}

TActAllianceBattleMissionHistory::TActAllianceBattleMissionHistory(const TActAllianceBattleMissionHistory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleMissionHistory)
}

void TActAllianceBattleMissionHistory::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  missiontid_ = 0u;
  finishtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleMissionHistory::~TActAllianceBattleMissionHistory() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleMissionHistory)
  SharedDtor();
}

void TActAllianceBattleMissionHistory::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TActAllianceBattleMissionHistory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleMissionHistory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleMissionHistory_descriptor_;
}

const TActAllianceBattleMissionHistory& TActAllianceBattleMissionHistory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleMissionHistory* TActAllianceBattleMissionHistory::default_instance_ = NULL;

TActAllianceBattleMissionHistory* TActAllianceBattleMissionHistory::New() const {
  return new TActAllianceBattleMissionHistory;
}

void TActAllianceBattleMissionHistory::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActAllianceBattleMissionHistory*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(finishtime_, missiontid_);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleMissionHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleMissionHistory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string GuildName = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_UserName;
        break;
      }

      // optional string UserName = 2;
      case 2: {
        if (tag == 18) {
         parse_UserName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MissionTid;
        break;
      }

      // optional uint32 MissionTid = 3;
      case 3: {
        if (tag == 24) {
         parse_MissionTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missiontid_)));
          set_has_missiontid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FinishTime;
        break;
      }

      // optional uint64 FinishTime = 4;
      case 4: {
        if (tag == 32) {
         parse_FinishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 5;
      case 5: {
        if (tag == 42) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleMissionHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleMissionHistory)
  return false;
#undef DO_
}

void TActAllianceBattleMissionHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleMissionHistory)
  // optional string GuildName = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guildname(), output);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->username(), output);
  }

  // optional uint32 MissionTid = 3;
  if (has_missiontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->missiontid(), output);
  }

  // optional uint64 FinishTime = 4;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->finishtime(), output);
  }

  // optional string ServerId = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleMissionHistory)
}

::google::protobuf::uint8* TActAllianceBattleMissionHistory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleMissionHistory)
  // optional string GuildName = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildname(), target);
  }

  // optional string UserName = 2;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->username(), target);
  }

  // optional uint32 MissionTid = 3;
  if (has_missiontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->missiontid(), target);
  }

  // optional uint64 FinishTime = 4;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->finishtime(), target);
  }

  // optional string ServerId = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleMissionHistory)
  return target;
}

int TActAllianceBattleMissionHistory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string GuildName = 1;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string UserName = 2;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional string ServerId = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint32 MissionTid = 3;
    if (has_missiontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missiontid());
    }

    // optional uint64 FinishTime = 4;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finishtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleMissionHistory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleMissionHistory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleMissionHistory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleMissionHistory::MergeFrom(const TActAllianceBattleMissionHistory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_missiontid()) {
      set_missiontid(from.missiontid());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleMissionHistory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleMissionHistory::CopyFrom(const TActAllianceBattleMissionHistory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleMissionHistory::IsInitialized() const {

  return true;
}

void TActAllianceBattleMissionHistory::Swap(TActAllianceBattleMissionHistory* other) {
  if (other != this) {
    std::swap(guildname_, other->guildname_);
    std::swap(username_, other->username_);
    std::swap(serverid_, other->serverid_);
    std::swap(missiontid_, other->missiontid_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleMissionHistory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleMissionHistory_descriptor_;
  metadata.reflection = TActAllianceBattleMissionHistory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleMemberInfo::kUserDataFieldNumber;
const int TActAllianceBattleMemberInfo::kScoreFieldNumber;
const int TActAllianceBattleMemberInfo::kReceiveNumFieldNumber;
const int TActAllianceBattleMemberInfo::kReceiveBuyNumFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleMemberInfo::TActAllianceBattleMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleMemberInfo)
}

void TActAllianceBattleMemberInfo::InitAsDefaultInstance() {
  userdata_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TActAllianceBattleMemberInfo::TActAllianceBattleMemberInfo(const TActAllianceBattleMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleMemberInfo)
}

void TActAllianceBattleMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  userdata_ = NULL;
  score_ = 0u;
  receivenum_ = 0u;
  receivebuynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleMemberInfo::~TActAllianceBattleMemberInfo() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleMemberInfo)
  SharedDtor();
}

void TActAllianceBattleMemberInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userdata_;
  }
}

void TActAllianceBattleMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleMemberInfo_descriptor_;
}

const TActAllianceBattleMemberInfo& TActAllianceBattleMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleMemberInfo* TActAllianceBattleMemberInfo::default_instance_ = NULL;

TActAllianceBattleMemberInfo* TActAllianceBattleMemberInfo::New() const {
  return new TActAllianceBattleMemberInfo;
}

void TActAllianceBattleMemberInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActAllianceBattleMemberInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(score_, receivebuynum_);
    if (has_userdata()) {
      if (userdata_ != NULL) userdata_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleMemberInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReceiveNum;
        break;
      }

      // optional uint32 ReceiveNum = 3;
      case 3: {
        if (tag == 24) {
         parse_ReceiveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivenum_)));
          set_has_receivenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ReceiveBuyNum;
        break;
      }

      // optional uint32 ReceiveBuyNum = 4;
      case 4: {
        if (tag == 32) {
         parse_ReceiveBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivebuynum_)));
          set_has_receivebuynum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleMemberInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleMemberInfo)
  return false;
#undef DO_
}

void TActAllianceBattleMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleMemberInfo)
  // optional .pb.TUserSimpleInfo UserData = 1;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdata(), output);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 ReceiveNum = 3;
  if (has_receivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->receivenum(), output);
  }

  // optional uint32 ReceiveBuyNum = 4;
  if (has_receivebuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->receivebuynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleMemberInfo)
}

::google::protobuf::uint8* TActAllianceBattleMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleMemberInfo)
  // optional .pb.TUserSimpleInfo UserData = 1;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdata(), target);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 ReceiveNum = 3;
  if (has_receivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->receivenum(), target);
  }

  // optional uint32 ReceiveBuyNum = 4;
  if (has_receivebuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->receivebuynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleMemberInfo)
  return target;
}

int TActAllianceBattleMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserData = 1;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdata());
    }

    // optional uint32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 ReceiveNum = 3;
    if (has_receivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receivenum());
    }

    // optional uint32 ReceiveBuyNum = 4;
    if (has_receivebuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receivebuynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleMemberInfo::MergeFrom(const TActAllianceBattleMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdata()) {
      mutable_userdata()->::pb::TUserSimpleInfo::MergeFrom(from.userdata());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_receivenum()) {
      set_receivenum(from.receivenum());
    }
    if (from.has_receivebuynum()) {
      set_receivebuynum(from.receivebuynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleMemberInfo::CopyFrom(const TActAllianceBattleMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleMemberInfo::IsInitialized() const {

  return true;
}

void TActAllianceBattleMemberInfo::Swap(TActAllianceBattleMemberInfo* other) {
  if (other != this) {
    std::swap(userdata_, other->userdata_);
    std::swap(score_, other->score_);
    std::swap(receivenum_, other->receivenum_);
    std::swap(receivebuynum_, other->receivebuynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleMemberInfo_descriptor_;
  metadata.reflection = TActAllianceBattleMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleAllyScore::kAllyInfoFieldNumber;
const int TActAllianceBattleAllyScore::kScoreFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleAllyScore::TActAllianceBattleAllyScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleAllyScore)
}

void TActAllianceBattleAllyScore::InitAsDefaultInstance() {
  allyinfo_ = const_cast< ::pb::TAllianceSimpleInfo*>(&::pb::TAllianceSimpleInfo::default_instance());
}

TActAllianceBattleAllyScore::TActAllianceBattleAllyScore(const TActAllianceBattleAllyScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleAllyScore)
}

void TActAllianceBattleAllyScore::SharedCtor() {
  _cached_size_ = 0;
  allyinfo_ = NULL;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleAllyScore::~TActAllianceBattleAllyScore() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleAllyScore)
  SharedDtor();
}

void TActAllianceBattleAllyScore::SharedDtor() {
  if (this != default_instance_) {
    delete allyinfo_;
  }
}

void TActAllianceBattleAllyScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleAllyScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleAllyScore_descriptor_;
}

const TActAllianceBattleAllyScore& TActAllianceBattleAllyScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleAllyScore* TActAllianceBattleAllyScore::default_instance_ = NULL;

TActAllianceBattleAllyScore* TActAllianceBattleAllyScore::New() const {
  return new TActAllianceBattleAllyScore;
}

void TActAllianceBattleAllyScore::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_allyinfo()) {
      if (allyinfo_ != NULL) allyinfo_->::pb::TAllianceSimpleInfo::Clear();
    }
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleAllyScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleAllyScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TAllianceSimpleInfo AllyInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_allyinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleAllyScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleAllyScore)
  return false;
#undef DO_
}

void TActAllianceBattleAllyScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleAllyScore)
  // optional .pb.TAllianceSimpleInfo AllyInfo = 1;
  if (has_allyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allyinfo(), output);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleAllyScore)
}

::google::protobuf::uint8* TActAllianceBattleAllyScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleAllyScore)
  // optional .pb.TAllianceSimpleInfo AllyInfo = 1;
  if (has_allyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allyinfo(), target);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleAllyScore)
  return target;
}

int TActAllianceBattleAllyScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TAllianceSimpleInfo AllyInfo = 1;
    if (has_allyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->allyinfo());
    }

    // optional uint32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleAllyScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleAllyScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleAllyScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleAllyScore::MergeFrom(const TActAllianceBattleAllyScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_allyinfo()) {
      mutable_allyinfo()->::pb::TAllianceSimpleInfo::MergeFrom(from.allyinfo());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleAllyScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleAllyScore::CopyFrom(const TActAllianceBattleAllyScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleAllyScore::IsInitialized() const {

  return true;
}

void TActAllianceBattleAllyScore::Swap(TActAllianceBattleAllyScore* other) {
  if (other != this) {
    std::swap(allyinfo_, other->allyinfo_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleAllyScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleAllyScore_descriptor_;
  metadata.reflection = TActAllianceBattleAllyScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleReceiveMissionReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleReceiveMissionReq::TActAllianceBattleReceiveMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleReceiveMissionReq)
}

void TActAllianceBattleReceiveMissionReq::InitAsDefaultInstance() {
}

TActAllianceBattleReceiveMissionReq::TActAllianceBattleReceiveMissionReq(const TActAllianceBattleReceiveMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleReceiveMissionReq)
}

void TActAllianceBattleReceiveMissionReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleReceiveMissionReq::~TActAllianceBattleReceiveMissionReq() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleReceiveMissionReq)
  SharedDtor();
}

void TActAllianceBattleReceiveMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleReceiveMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleReceiveMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleReceiveMissionReq_descriptor_;
}

const TActAllianceBattleReceiveMissionReq& TActAllianceBattleReceiveMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleReceiveMissionReq* TActAllianceBattleReceiveMissionReq::default_instance_ = NULL;

TActAllianceBattleReceiveMissionReq* TActAllianceBattleReceiveMissionReq::New() const {
  return new TActAllianceBattleReceiveMissionReq;
}

void TActAllianceBattleReceiveMissionReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleReceiveMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleReceiveMissionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleReceiveMissionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleReceiveMissionReq)
  return false;
#undef DO_
}

void TActAllianceBattleReceiveMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleReceiveMissionReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleReceiveMissionReq)
}

::google::protobuf::uint8* TActAllianceBattleReceiveMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleReceiveMissionReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleReceiveMissionReq)
  return target;
}

int TActAllianceBattleReceiveMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleReceiveMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleReceiveMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleReceiveMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleReceiveMissionReq::MergeFrom(const TActAllianceBattleReceiveMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleReceiveMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleReceiveMissionReq::CopyFrom(const TActAllianceBattleReceiveMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleReceiveMissionReq::IsInitialized() const {

  return true;
}

void TActAllianceBattleReceiveMissionReq::Swap(TActAllianceBattleReceiveMissionReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleReceiveMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleReceiveMissionReq_descriptor_;
  metadata.reflection = TActAllianceBattleReceiveMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleDelMissionReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleDelMissionReq::TActAllianceBattleDelMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleDelMissionReq)
}

void TActAllianceBattleDelMissionReq::InitAsDefaultInstance() {
}

TActAllianceBattleDelMissionReq::TActAllianceBattleDelMissionReq(const TActAllianceBattleDelMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleDelMissionReq)
}

void TActAllianceBattleDelMissionReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleDelMissionReq::~TActAllianceBattleDelMissionReq() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleDelMissionReq)
  SharedDtor();
}

void TActAllianceBattleDelMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleDelMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleDelMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleDelMissionReq_descriptor_;
}

const TActAllianceBattleDelMissionReq& TActAllianceBattleDelMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleDelMissionReq* TActAllianceBattleDelMissionReq::default_instance_ = NULL;

TActAllianceBattleDelMissionReq* TActAllianceBattleDelMissionReq::New() const {
  return new TActAllianceBattleDelMissionReq;
}

void TActAllianceBattleDelMissionReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleDelMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleDelMissionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleDelMissionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleDelMissionReq)
  return false;
#undef DO_
}

void TActAllianceBattleDelMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleDelMissionReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleDelMissionReq)
}

::google::protobuf::uint8* TActAllianceBattleDelMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleDelMissionReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleDelMissionReq)
  return target;
}

int TActAllianceBattleDelMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleDelMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleDelMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleDelMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleDelMissionReq::MergeFrom(const TActAllianceBattleDelMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleDelMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleDelMissionReq::CopyFrom(const TActAllianceBattleDelMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleDelMissionReq::IsInitialized() const {

  return true;
}

void TActAllianceBattleDelMissionReq::Swap(TActAllianceBattleDelMissionReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleDelMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleDelMissionReq_descriptor_;
  metadata.reflection = TActAllianceBattleDelMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleReceiveMissionScore::kMissionIdFieldNumber;
const int TActAllianceBattleReceiveMissionScore::kMissionTidFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleReceiveMissionScore::TActAllianceBattleReceiveMissionScore()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleReceiveMissionScore)
}

void TActAllianceBattleReceiveMissionScore::InitAsDefaultInstance() {
}

TActAllianceBattleReceiveMissionScore::TActAllianceBattleReceiveMissionScore(const TActAllianceBattleReceiveMissionScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleReceiveMissionScore)
}

void TActAllianceBattleReceiveMissionScore::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  missiontid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleReceiveMissionScore::~TActAllianceBattleReceiveMissionScore() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleReceiveMissionScore)
  SharedDtor();
}

void TActAllianceBattleReceiveMissionScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleReceiveMissionScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleReceiveMissionScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleReceiveMissionScore_descriptor_;
}

const TActAllianceBattleReceiveMissionScore& TActAllianceBattleReceiveMissionScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleReceiveMissionScore* TActAllianceBattleReceiveMissionScore::default_instance_ = NULL;

TActAllianceBattleReceiveMissionScore* TActAllianceBattleReceiveMissionScore::New() const {
  return new TActAllianceBattleReceiveMissionScore;
}

void TActAllianceBattleReceiveMissionScore::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActAllianceBattleReceiveMissionScore*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(missionid_, missiontid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleReceiveMissionScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleReceiveMissionScore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MissionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MissionTid;
        break;
      }

      // optional uint32 MissionTid = 2;
      case 2: {
        if (tag == 16) {
         parse_MissionTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missiontid_)));
          set_has_missiontid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleReceiveMissionScore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleReceiveMissionScore)
  return false;
#undef DO_
}

void TActAllianceBattleReceiveMissionScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleReceiveMissionScore)
  // optional uint32 MissionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 MissionTid = 2;
  if (has_missiontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->missiontid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleReceiveMissionScore)
}

::google::protobuf::uint8* TActAllianceBattleReceiveMissionScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleReceiveMissionScore)
  // optional uint32 MissionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 MissionTid = 2;
  if (has_missiontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->missiontid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleReceiveMissionScore)
  return target;
}

int TActAllianceBattleReceiveMissionScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MissionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 MissionTid = 2;
    if (has_missiontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missiontid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleReceiveMissionScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleReceiveMissionScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleReceiveMissionScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleReceiveMissionScore::MergeFrom(const TActAllianceBattleReceiveMissionScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_missiontid()) {
      set_missiontid(from.missiontid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleReceiveMissionScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleReceiveMissionScore::CopyFrom(const TActAllianceBattleReceiveMissionScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleReceiveMissionScore::IsInitialized() const {

  return true;
}

void TActAllianceBattleReceiveMissionScore::Swap(TActAllianceBattleReceiveMissionScore* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(missiontid_, other->missiontid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleReceiveMissionScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleReceiveMissionScore_descriptor_;
  metadata.reflection = TActAllianceBattleReceiveMissionScore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleGetPersonalScoreRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleGetPersonalScoreRewardReq::TActAllianceBattleGetPersonalScoreRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleGetPersonalScoreRewardReq)
}

void TActAllianceBattleGetPersonalScoreRewardReq::InitAsDefaultInstance() {
}

TActAllianceBattleGetPersonalScoreRewardReq::TActAllianceBattleGetPersonalScoreRewardReq(const TActAllianceBattleGetPersonalScoreRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleGetPersonalScoreRewardReq)
}

void TActAllianceBattleGetPersonalScoreRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleGetPersonalScoreRewardReq::~TActAllianceBattleGetPersonalScoreRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleGetPersonalScoreRewardReq)
  SharedDtor();
}

void TActAllianceBattleGetPersonalScoreRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleGetPersonalScoreRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleGetPersonalScoreRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleGetPersonalScoreRewardReq_descriptor_;
}

const TActAllianceBattleGetPersonalScoreRewardReq& TActAllianceBattleGetPersonalScoreRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleGetPersonalScoreRewardReq* TActAllianceBattleGetPersonalScoreRewardReq::default_instance_ = NULL;

TActAllianceBattleGetPersonalScoreRewardReq* TActAllianceBattleGetPersonalScoreRewardReq::New() const {
  return new TActAllianceBattleGetPersonalScoreRewardReq;
}

void TActAllianceBattleGetPersonalScoreRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleGetPersonalScoreRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleGetPersonalScoreRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleGetPersonalScoreRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleGetPersonalScoreRewardReq)
  return false;
#undef DO_
}

void TActAllianceBattleGetPersonalScoreRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleGetPersonalScoreRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleGetPersonalScoreRewardReq)
}

::google::protobuf::uint8* TActAllianceBattleGetPersonalScoreRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleGetPersonalScoreRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleGetPersonalScoreRewardReq)
  return target;
}

int TActAllianceBattleGetPersonalScoreRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleGetPersonalScoreRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleGetPersonalScoreRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleGetPersonalScoreRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleGetPersonalScoreRewardReq::MergeFrom(const TActAllianceBattleGetPersonalScoreRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleGetPersonalScoreRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleGetPersonalScoreRewardReq::CopyFrom(const TActAllianceBattleGetPersonalScoreRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleGetPersonalScoreRewardReq::IsInitialized() const {

  return true;
}

void TActAllianceBattleGetPersonalScoreRewardReq::Swap(TActAllianceBattleGetPersonalScoreRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleGetPersonalScoreRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleGetPersonalScoreRewardReq_descriptor_;
  metadata.reflection = TActAllianceBattleGetPersonalScoreRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleGetPersonalScoreRewardRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleGetPersonalScoreRewardRsp::TActAllianceBattleGetPersonalScoreRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleGetPersonalScoreRewardRsp)
}

void TActAllianceBattleGetPersonalScoreRewardRsp::InitAsDefaultInstance() {
}

TActAllianceBattleGetPersonalScoreRewardRsp::TActAllianceBattleGetPersonalScoreRewardRsp(const TActAllianceBattleGetPersonalScoreRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleGetPersonalScoreRewardRsp)
}

void TActAllianceBattleGetPersonalScoreRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleGetPersonalScoreRewardRsp::~TActAllianceBattleGetPersonalScoreRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleGetPersonalScoreRewardRsp)
  SharedDtor();
}

void TActAllianceBattleGetPersonalScoreRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleGetPersonalScoreRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleGetPersonalScoreRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleGetPersonalScoreRewardRsp_descriptor_;
}

const TActAllianceBattleGetPersonalScoreRewardRsp& TActAllianceBattleGetPersonalScoreRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleGetPersonalScoreRewardRsp* TActAllianceBattleGetPersonalScoreRewardRsp::default_instance_ = NULL;

TActAllianceBattleGetPersonalScoreRewardRsp* TActAllianceBattleGetPersonalScoreRewardRsp::New() const {
  return new TActAllianceBattleGetPersonalScoreRewardRsp;
}

void TActAllianceBattleGetPersonalScoreRewardRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleGetPersonalScoreRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleGetPersonalScoreRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleGetPersonalScoreRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleGetPersonalScoreRewardRsp)
  return false;
#undef DO_
}

void TActAllianceBattleGetPersonalScoreRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleGetPersonalScoreRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleGetPersonalScoreRewardRsp)
}

::google::protobuf::uint8* TActAllianceBattleGetPersonalScoreRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleGetPersonalScoreRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleGetPersonalScoreRewardRsp)
  return target;
}

int TActAllianceBattleGetPersonalScoreRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleGetPersonalScoreRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleGetPersonalScoreRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleGetPersonalScoreRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleGetPersonalScoreRewardRsp::MergeFrom(const TActAllianceBattleGetPersonalScoreRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleGetPersonalScoreRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleGetPersonalScoreRewardRsp::CopyFrom(const TActAllianceBattleGetPersonalScoreRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleGetPersonalScoreRewardRsp::IsInitialized() const {

  return true;
}

void TActAllianceBattleGetPersonalScoreRewardRsp::Swap(TActAllianceBattleGetPersonalScoreRewardRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleGetPersonalScoreRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleGetPersonalScoreRewardRsp_descriptor_;
  metadata.reflection = TActAllianceBattleGetPersonalScoreRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleGetAllyScoreRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleGetAllyScoreRewardReq::TActAllianceBattleGetAllyScoreRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleGetAllyScoreRewardReq)
}

void TActAllianceBattleGetAllyScoreRewardReq::InitAsDefaultInstance() {
}

TActAllianceBattleGetAllyScoreRewardReq::TActAllianceBattleGetAllyScoreRewardReq(const TActAllianceBattleGetAllyScoreRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleGetAllyScoreRewardReq)
}

void TActAllianceBattleGetAllyScoreRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleGetAllyScoreRewardReq::~TActAllianceBattleGetAllyScoreRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleGetAllyScoreRewardReq)
  SharedDtor();
}

void TActAllianceBattleGetAllyScoreRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleGetAllyScoreRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleGetAllyScoreRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleGetAllyScoreRewardReq_descriptor_;
}

const TActAllianceBattleGetAllyScoreRewardReq& TActAllianceBattleGetAllyScoreRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleGetAllyScoreRewardReq* TActAllianceBattleGetAllyScoreRewardReq::default_instance_ = NULL;

TActAllianceBattleGetAllyScoreRewardReq* TActAllianceBattleGetAllyScoreRewardReq::New() const {
  return new TActAllianceBattleGetAllyScoreRewardReq;
}

void TActAllianceBattleGetAllyScoreRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleGetAllyScoreRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleGetAllyScoreRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleGetAllyScoreRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleGetAllyScoreRewardReq)
  return false;
#undef DO_
}

void TActAllianceBattleGetAllyScoreRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleGetAllyScoreRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleGetAllyScoreRewardReq)
}

::google::protobuf::uint8* TActAllianceBattleGetAllyScoreRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleGetAllyScoreRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleGetAllyScoreRewardReq)
  return target;
}

int TActAllianceBattleGetAllyScoreRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleGetAllyScoreRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleGetAllyScoreRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleGetAllyScoreRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleGetAllyScoreRewardReq::MergeFrom(const TActAllianceBattleGetAllyScoreRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleGetAllyScoreRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleGetAllyScoreRewardReq::CopyFrom(const TActAllianceBattleGetAllyScoreRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleGetAllyScoreRewardReq::IsInitialized() const {

  return true;
}

void TActAllianceBattleGetAllyScoreRewardReq::Swap(TActAllianceBattleGetAllyScoreRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleGetAllyScoreRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleGetAllyScoreRewardReq_descriptor_;
  metadata.reflection = TActAllianceBattleGetAllyScoreRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleGetAllyScoreRewardRsp::kArrRewardFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleGetAllyScoreRewardRsp::TActAllianceBattleGetAllyScoreRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleGetAllyScoreRewardRsp)
}

void TActAllianceBattleGetAllyScoreRewardRsp::InitAsDefaultInstance() {
}

TActAllianceBattleGetAllyScoreRewardRsp::TActAllianceBattleGetAllyScoreRewardRsp(const TActAllianceBattleGetAllyScoreRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleGetAllyScoreRewardRsp)
}

void TActAllianceBattleGetAllyScoreRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleGetAllyScoreRewardRsp::~TActAllianceBattleGetAllyScoreRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleGetAllyScoreRewardRsp)
  SharedDtor();
}

void TActAllianceBattleGetAllyScoreRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleGetAllyScoreRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleGetAllyScoreRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleGetAllyScoreRewardRsp_descriptor_;
}

const TActAllianceBattleGetAllyScoreRewardRsp& TActAllianceBattleGetAllyScoreRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleGetAllyScoreRewardRsp* TActAllianceBattleGetAllyScoreRewardRsp::default_instance_ = NULL;

TActAllianceBattleGetAllyScoreRewardRsp* TActAllianceBattleGetAllyScoreRewardRsp::New() const {
  return new TActAllianceBattleGetAllyScoreRewardRsp;
}

void TActAllianceBattleGetAllyScoreRewardRsp::Clear() {
  arrreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleGetAllyScoreRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleGetAllyScoreRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrReward = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrReward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleGetAllyScoreRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleGetAllyScoreRewardRsp)
  return false;
#undef DO_
}

void TActAllianceBattleGetAllyScoreRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleGetAllyScoreRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleGetAllyScoreRewardRsp)
}

::google::protobuf::uint8* TActAllianceBattleGetAllyScoreRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleGetAllyScoreRewardRsp)
  // repeated .pb.TCommonReward ArrReward = 1;
  for (int i = 0; i < this->arrreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleGetAllyScoreRewardRsp)
  return target;
}

int TActAllianceBattleGetAllyScoreRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrReward = 1;
  total_size += 1 * this->arrreward_size();
  for (int i = 0; i < this->arrreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleGetAllyScoreRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleGetAllyScoreRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleGetAllyScoreRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleGetAllyScoreRewardRsp::MergeFrom(const TActAllianceBattleGetAllyScoreRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrreward_.MergeFrom(from.arrreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleGetAllyScoreRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleGetAllyScoreRewardRsp::CopyFrom(const TActAllianceBattleGetAllyScoreRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleGetAllyScoreRewardRsp::IsInitialized() const {

  return true;
}

void TActAllianceBattleGetAllyScoreRewardRsp::Swap(TActAllianceBattleGetAllyScoreRewardRsp* other) {
  if (other != this) {
    arrreward_.Swap(&other->arrreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleGetAllyScoreRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleGetAllyScoreRewardRsp_descriptor_;
  metadata.reflection = TActAllianceBattleGetAllyScoreRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleBuyReceiveNumReq::kNumFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleBuyReceiveNumReq::TActAllianceBattleBuyReceiveNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleBuyReceiveNumReq)
}

void TActAllianceBattleBuyReceiveNumReq::InitAsDefaultInstance() {
}

TActAllianceBattleBuyReceiveNumReq::TActAllianceBattleBuyReceiveNumReq(const TActAllianceBattleBuyReceiveNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleBuyReceiveNumReq)
}

void TActAllianceBattleBuyReceiveNumReq::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleBuyReceiveNumReq::~TActAllianceBattleBuyReceiveNumReq() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleBuyReceiveNumReq)
  SharedDtor();
}

void TActAllianceBattleBuyReceiveNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleBuyReceiveNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleBuyReceiveNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleBuyReceiveNumReq_descriptor_;
}

const TActAllianceBattleBuyReceiveNumReq& TActAllianceBattleBuyReceiveNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleBuyReceiveNumReq* TActAllianceBattleBuyReceiveNumReq::default_instance_ = NULL;

TActAllianceBattleBuyReceiveNumReq* TActAllianceBattleBuyReceiveNumReq::New() const {
  return new TActAllianceBattleBuyReceiveNumReq;
}

void TActAllianceBattleBuyReceiveNumReq::Clear() {
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleBuyReceiveNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleBuyReceiveNumReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleBuyReceiveNumReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleBuyReceiveNumReq)
  return false;
#undef DO_
}

void TActAllianceBattleBuyReceiveNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleBuyReceiveNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleBuyReceiveNumReq)
}

::google::protobuf::uint8* TActAllianceBattleBuyReceiveNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleBuyReceiveNumReq)
  // optional uint32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleBuyReceiveNumReq)
  return target;
}

int TActAllianceBattleBuyReceiveNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleBuyReceiveNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleBuyReceiveNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleBuyReceiveNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleBuyReceiveNumReq::MergeFrom(const TActAllianceBattleBuyReceiveNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleBuyReceiveNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleBuyReceiveNumReq::CopyFrom(const TActAllianceBattleBuyReceiveNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleBuyReceiveNumReq::IsInitialized() const {

  return true;
}

void TActAllianceBattleBuyReceiveNumReq::Swap(TActAllianceBattleBuyReceiveNumReq* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleBuyReceiveNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleBuyReceiveNumReq_descriptor_;
  metadata.reflection = TActAllianceBattleBuyReceiveNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleTaskNotify::kTaskNumFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleTaskNotify::TActAllianceBattleTaskNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleTaskNotify)
}

void TActAllianceBattleTaskNotify::InitAsDefaultInstance() {
}

TActAllianceBattleTaskNotify::TActAllianceBattleTaskNotify(const TActAllianceBattleTaskNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleTaskNotify)
}

void TActAllianceBattleTaskNotify::SharedCtor() {
  _cached_size_ = 0;
  tasknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleTaskNotify::~TActAllianceBattleTaskNotify() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleTaskNotify)
  SharedDtor();
}

void TActAllianceBattleTaskNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleTaskNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleTaskNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleTaskNotify_descriptor_;
}

const TActAllianceBattleTaskNotify& TActAllianceBattleTaskNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleTaskNotify* TActAllianceBattleTaskNotify::default_instance_ = NULL;

TActAllianceBattleTaskNotify* TActAllianceBattleTaskNotify::New() const {
  return new TActAllianceBattleTaskNotify;
}

void TActAllianceBattleTaskNotify::Clear() {
  tasknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleTaskNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleTaskNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasknum_)));
          set_has_tasknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleTaskNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleTaskNotify)
  return false;
#undef DO_
}

void TActAllianceBattleTaskNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleTaskNotify)
  // optional uint32 TaskNum = 1;
  if (has_tasknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tasknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleTaskNotify)
}

::google::protobuf::uint8* TActAllianceBattleTaskNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleTaskNotify)
  // optional uint32 TaskNum = 1;
  if (has_tasknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tasknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleTaskNotify)
  return target;
}

int TActAllianceBattleTaskNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskNum = 1;
    if (has_tasknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasknum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleTaskNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleTaskNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleTaskNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleTaskNotify::MergeFrom(const TActAllianceBattleTaskNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasknum()) {
      set_tasknum(from.tasknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleTaskNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleTaskNotify::CopyFrom(const TActAllianceBattleTaskNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleTaskNotify::IsInitialized() const {

  return true;
}

void TActAllianceBattleTaskNotify::Swap(TActAllianceBattleTaskNotify* other) {
  if (other != this) {
    std::swap(tasknum_, other->tasknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleTaskNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleTaskNotify_descriptor_;
  metadata.reflection = TActAllianceBattleTaskNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleScoreNotify::kScoreFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleScoreNotify::TActAllianceBattleScoreNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleScoreNotify)
}

void TActAllianceBattleScoreNotify::InitAsDefaultInstance() {
}

TActAllianceBattleScoreNotify::TActAllianceBattleScoreNotify(const TActAllianceBattleScoreNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleScoreNotify)
}

void TActAllianceBattleScoreNotify::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleScoreNotify::~TActAllianceBattleScoreNotify() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleScoreNotify)
  SharedDtor();
}

void TActAllianceBattleScoreNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleScoreNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleScoreNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleScoreNotify_descriptor_;
}

const TActAllianceBattleScoreNotify& TActAllianceBattleScoreNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleScoreNotify* TActAllianceBattleScoreNotify::default_instance_ = NULL;

TActAllianceBattleScoreNotify* TActAllianceBattleScoreNotify::New() const {
  return new TActAllianceBattleScoreNotify;
}

void TActAllianceBattleScoreNotify::Clear() {
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleScoreNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleScoreNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleScoreNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleScoreNotify)
  return false;
#undef DO_
}

void TActAllianceBattleScoreNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleScoreNotify)
  // optional uint32 Score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleScoreNotify)
}

::google::protobuf::uint8* TActAllianceBattleScoreNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleScoreNotify)
  // optional uint32 Score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleScoreNotify)
  return target;
}

int TActAllianceBattleScoreNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleScoreNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleScoreNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleScoreNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleScoreNotify::MergeFrom(const TActAllianceBattleScoreNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleScoreNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleScoreNotify::CopyFrom(const TActAllianceBattleScoreNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleScoreNotify::IsInitialized() const {

  return true;
}

void TActAllianceBattleScoreNotify::Swap(TActAllianceBattleScoreNotify* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleScoreNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleScoreNotify_descriptor_;
  metadata.reflection = TActAllianceBattleScoreNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleDelPersonalMissionReq::kMissionIdFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleDelPersonalMissionReq::TActAllianceBattleDelPersonalMissionReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleDelPersonalMissionReq)
}

void TActAllianceBattleDelPersonalMissionReq::InitAsDefaultInstance() {
}

TActAllianceBattleDelPersonalMissionReq::TActAllianceBattleDelPersonalMissionReq(const TActAllianceBattleDelPersonalMissionReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleDelPersonalMissionReq)
}

void TActAllianceBattleDelPersonalMissionReq::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleDelPersonalMissionReq::~TActAllianceBattleDelPersonalMissionReq() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleDelPersonalMissionReq)
  SharedDtor();
}

void TActAllianceBattleDelPersonalMissionReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleDelPersonalMissionReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleDelPersonalMissionReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleDelPersonalMissionReq_descriptor_;
}

const TActAllianceBattleDelPersonalMissionReq& TActAllianceBattleDelPersonalMissionReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleDelPersonalMissionReq* TActAllianceBattleDelPersonalMissionReq::default_instance_ = NULL;

TActAllianceBattleDelPersonalMissionReq* TActAllianceBattleDelPersonalMissionReq::New() const {
  return new TActAllianceBattleDelPersonalMissionReq;
}

void TActAllianceBattleDelPersonalMissionReq::Clear() {
  missionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleDelPersonalMissionReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleDelPersonalMissionReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MissionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleDelPersonalMissionReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleDelPersonalMissionReq)
  return false;
#undef DO_
}

void TActAllianceBattleDelPersonalMissionReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleDelPersonalMissionReq)
  // optional uint32 MissionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleDelPersonalMissionReq)
}

::google::protobuf::uint8* TActAllianceBattleDelPersonalMissionReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleDelPersonalMissionReq)
  // optional uint32 MissionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleDelPersonalMissionReq)
  return target;
}

int TActAllianceBattleDelPersonalMissionReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MissionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleDelPersonalMissionReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleDelPersonalMissionReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleDelPersonalMissionReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleDelPersonalMissionReq::MergeFrom(const TActAllianceBattleDelPersonalMissionReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleDelPersonalMissionReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleDelPersonalMissionReq::CopyFrom(const TActAllianceBattleDelPersonalMissionReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleDelPersonalMissionReq::IsInitialized() const {

  return true;
}

void TActAllianceBattleDelPersonalMissionReq::Swap(TActAllianceBattleDelPersonalMissionReq* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleDelPersonalMissionReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleDelPersonalMissionReq_descriptor_;
  metadata.reflection = TActAllianceBattleDelPersonalMissionReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActAllianceBattleAbandonMission::kMissionIdFieldNumber;
const int TActAllianceBattleAbandonMission::kMissionTidFieldNumber;
#endif  // !_MSC_VER

TActAllianceBattleAbandonMission::TActAllianceBattleAbandonMission()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActAllianceBattleAbandonMission)
}

void TActAllianceBattleAbandonMission::InitAsDefaultInstance() {
}

TActAllianceBattleAbandonMission::TActAllianceBattleAbandonMission(const TActAllianceBattleAbandonMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActAllianceBattleAbandonMission)
}

void TActAllianceBattleAbandonMission::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = 0u;
  missiontid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActAllianceBattleAbandonMission::~TActAllianceBattleAbandonMission() {
  // @@protoc_insertion_point(destructor:pb.TActAllianceBattleAbandonMission)
  SharedDtor();
}

void TActAllianceBattleAbandonMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActAllianceBattleAbandonMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActAllianceBattleAbandonMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActAllianceBattleAbandonMission_descriptor_;
}

const TActAllianceBattleAbandonMission& TActAllianceBattleAbandonMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActAllianceBattle_2eproto();
  return *default_instance_;
}

TActAllianceBattleAbandonMission* TActAllianceBattleAbandonMission::default_instance_ = NULL;

TActAllianceBattleAbandonMission* TActAllianceBattleAbandonMission::New() const {
  return new TActAllianceBattleAbandonMission;
}

void TActAllianceBattleAbandonMission::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActAllianceBattleAbandonMission*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(missionid_, missiontid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActAllianceBattleAbandonMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActAllianceBattleAbandonMission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 MissionId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MissionTid;
        break;
      }

      // optional uint32 MissionTid = 2;
      case 2: {
        if (tag == 16) {
         parse_MissionTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &missiontid_)));
          set_has_missiontid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActAllianceBattleAbandonMission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActAllianceBattleAbandonMission)
  return false;
#undef DO_
}

void TActAllianceBattleAbandonMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActAllianceBattleAbandonMission)
  // optional uint32 MissionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->missionid(), output);
  }

  // optional uint32 MissionTid = 2;
  if (has_missiontid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->missiontid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActAllianceBattleAbandonMission)
}

::google::protobuf::uint8* TActAllianceBattleAbandonMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActAllianceBattleAbandonMission)
  // optional uint32 MissionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->missionid(), target);
  }

  // optional uint32 MissionTid = 2;
  if (has_missiontid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->missiontid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActAllianceBattleAbandonMission)
  return target;
}

int TActAllianceBattleAbandonMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 MissionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missionid());
    }

    // optional uint32 MissionTid = 2;
    if (has_missiontid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->missiontid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActAllianceBattleAbandonMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActAllianceBattleAbandonMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActAllianceBattleAbandonMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActAllianceBattleAbandonMission::MergeFrom(const TActAllianceBattleAbandonMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_missiontid()) {
      set_missiontid(from.missiontid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActAllianceBattleAbandonMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActAllianceBattleAbandonMission::CopyFrom(const TActAllianceBattleAbandonMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActAllianceBattleAbandonMission::IsInitialized() const {

  return true;
}

void TActAllianceBattleAbandonMission::Swap(TActAllianceBattleAbandonMission* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(missiontid_, other->missiontid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActAllianceBattleAbandonMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActAllianceBattleAbandonMission_descriptor_;
  metadata.reflection = TActAllianceBattleAbandonMission_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
