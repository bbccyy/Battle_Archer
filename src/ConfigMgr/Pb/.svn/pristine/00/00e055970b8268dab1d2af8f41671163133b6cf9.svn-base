// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GuildWish.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/GuildWish.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TGuildWishInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWishInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWishRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWishRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetWishListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetWishListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetWishReceiveRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetWishReceiveRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGetWishGiveRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGetWishGiveRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWishFragmentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWishFragmentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildGiftFragmentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildGiftFragmentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildShowFragReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildShowFragReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildUpdateWishNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildUpdateWishNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fGuildWish_2eproto() {
  protobuf_AddDesc_net_2fGuildWish_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/GuildWish.proto");
  GOOGLE_CHECK(file != NULL);
  TGuildWishInfo_descriptor_ = file->message_type(0);
  static const int TGuildWishInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishInfo, fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishInfo, fragmentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishInfo, receivenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishInfo, givenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishInfo, fragmentidarr_),
  };
  TGuildWishInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWishInfo_descriptor_,
      TGuildWishInfo::default_instance_,
      TGuildWishInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWishInfo));
  TGuildWishRecord_descriptor_ = file->message_type(1);
  static const int TGuildWishRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishRecord, recordid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishRecord, fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishRecord, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishRecord, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishRecord, givetime_),
  };
  TGuildWishRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWishRecord_descriptor_,
      TGuildWishRecord::default_instance_,
      TGuildWishRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWishRecord));
  TGuildGetWishListRsp_descriptor_ = file->message_type(2);
  static const int TGuildGetWishListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetWishListRsp, wisharr_),
  };
  TGuildGetWishListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetWishListRsp_descriptor_,
      TGuildGetWishListRsp::default_instance_,
      TGuildGetWishListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetWishListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetWishListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetWishListRsp));
  TGuildGetWishReceiveRecordRsp_descriptor_ = file->message_type(3);
  static const int TGuildGetWishReceiveRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetWishReceiveRecordRsp, recordarr_),
  };
  TGuildGetWishReceiveRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetWishReceiveRecordRsp_descriptor_,
      TGuildGetWishReceiveRecordRsp::default_instance_,
      TGuildGetWishReceiveRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetWishReceiveRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetWishReceiveRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetWishReceiveRecordRsp));
  TGuildGetWishGiveRecordRsp_descriptor_ = file->message_type(4);
  static const int TGuildGetWishGiveRecordRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetWishGiveRecordRsp, recordarr_),
  };
  TGuildGetWishGiveRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGetWishGiveRecordRsp_descriptor_,
      TGuildGetWishGiveRecordRsp::default_instance_,
      TGuildGetWishGiveRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetWishGiveRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGetWishGiveRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGetWishGiveRecordRsp));
  TGuildWishFragmentReq_descriptor_ = file->message_type(5);
  static const int TGuildWishFragmentReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishFragmentReq, fragmentid_),
  };
  TGuildWishFragmentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWishFragmentReq_descriptor_,
      TGuildWishFragmentReq::default_instance_,
      TGuildWishFragmentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishFragmentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWishFragmentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWishFragmentReq));
  TGuildGiftFragmentReq_descriptor_ = file->message_type(6);
  static const int TGuildGiftFragmentReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGiftFragmentReq, fragmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGiftFragmentReq, receiveuid_),
  };
  TGuildGiftFragmentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildGiftFragmentReq_descriptor_,
      TGuildGiftFragmentReq::default_instance_,
      TGuildGiftFragmentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGiftFragmentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildGiftFragmentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildGiftFragmentReq));
  TGuildShowFragReq_descriptor_ = file->message_type(7);
  static const int TGuildShowFragReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildShowFragReq, fragmentidarr_),
  };
  TGuildShowFragReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildShowFragReq_descriptor_,
      TGuildShowFragReq::default_instance_,
      TGuildShowFragReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildShowFragReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildShowFragReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildShowFragReq));
  TGuildUpdateWishNotify_descriptor_ = file->message_type(8);
  static const int TGuildUpdateWishNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateWishNotify, wisharr_),
  };
  TGuildUpdateWishNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildUpdateWishNotify_descriptor_,
      TGuildUpdateWishNotify::default_instance_,
      TGuildUpdateWishNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateWishNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildUpdateWishNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildUpdateWishNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fGuildWish_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWishInfo_descriptor_, &TGuildWishInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWishRecord_descriptor_, &TGuildWishRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetWishListRsp_descriptor_, &TGuildGetWishListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetWishReceiveRecordRsp_descriptor_, &TGuildGetWishReceiveRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGetWishGiveRecordRsp_descriptor_, &TGuildGetWishGiveRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWishFragmentReq_descriptor_, &TGuildWishFragmentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildGiftFragmentReq_descriptor_, &TGuildGiftFragmentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildShowFragReq_descriptor_, &TGuildShowFragReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildUpdateWishNotify_descriptor_, &TGuildUpdateWishNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fGuildWish_2eproto() {
  delete TGuildWishInfo::default_instance_;
  delete TGuildWishInfo_reflection_;
  delete TGuildWishRecord::default_instance_;
  delete TGuildWishRecord_reflection_;
  delete TGuildGetWishListRsp::default_instance_;
  delete TGuildGetWishListRsp_reflection_;
  delete TGuildGetWishReceiveRecordRsp::default_instance_;
  delete TGuildGetWishReceiveRecordRsp_reflection_;
  delete TGuildGetWishGiveRecordRsp::default_instance_;
  delete TGuildGetWishGiveRecordRsp_reflection_;
  delete TGuildWishFragmentReq::default_instance_;
  delete TGuildWishFragmentReq_reflection_;
  delete TGuildGiftFragmentReq::default_instance_;
  delete TGuildGiftFragmentReq_reflection_;
  delete TGuildShowFragReq::default_instance_;
  delete TGuildShowFragReq_reflection_;
  delete TGuildUpdateWishNotify::default_instance_;
  delete TGuildUpdateWishNotify_reflection_;
}

void protobuf_AddDesc_net_2fGuildWish_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/GuildWish.proto\022\002pb\032\016net/User.prot"
    "o\"\220\001\n\016TGuildWishInfo\022\013\n\003Uid\030\001 \001(\004\022\014\n\004Tim"
    "e\030\002 \001(\004\022\022\n\nFragmentId\030\003 \001(\r\022\023\n\013FragmentN"
    "um\030\004 \001(\r\022\022\n\nReceiveNum\030\005 \001(\r\022\017\n\007GiveNum\030"
    "\006 \001(\r\022\025\n\rFragmentIdArr\030\007 \003(\r\"~\n\020TGuildWi"
    "shRecord\022\020\n\010RecordId\030\001 \001(\r\022\022\n\nFragmentId"
    "\030\002 \001(\r\022\013\n\003Uid\030\003 \001(\004\022%\n\010UserInfo\030\004 \001(\0132\023."
    "pb.TUserSimpleInfo\022\020\n\010GiveTime\030\005 \001(\004\";\n\024"
    "TGuildGetWishListRsp\022#\n\007WishArr\030\001 \003(\0132\022."
    "pb.TGuildWishInfo\"H\n\035TGuildGetWishReceiv"
    "eRecordRsp\022\'\n\tRecordArr\030\001 \003(\0132\024.pb.TGuil"
    "dWishRecord\"E\n\032TGuildGetWishGiveRecordRs"
    "p\022\'\n\tRecordArr\030\001 \003(\0132\024.pb.TGuildWishReco"
    "rd\"+\n\025TGuildWishFragmentReq\022\022\n\nFragmentI"
    "d\030\001 \003(\r\"\?\n\025TGuildGiftFragmentReq\022\022\n\nFrag"
    "mentId\030\001 \001(\r\022\022\n\nReceiveUid\030\002 \001(\004\"*\n\021TGui"
    "ldShowFragReq\022\025\n\rFragmentIdArr\030\001 \003(\r\"=\n\026"
    "TGuildUpdateWishNotify\022#\n\007WishArr\030\001 \003(\0132"
    "\022.pb.TGuildWishInfo", 739);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/GuildWish.proto", &protobuf_RegisterTypes);
  TGuildWishInfo::default_instance_ = new TGuildWishInfo();
  TGuildWishRecord::default_instance_ = new TGuildWishRecord();
  TGuildGetWishListRsp::default_instance_ = new TGuildGetWishListRsp();
  TGuildGetWishReceiveRecordRsp::default_instance_ = new TGuildGetWishReceiveRecordRsp();
  TGuildGetWishGiveRecordRsp::default_instance_ = new TGuildGetWishGiveRecordRsp();
  TGuildWishFragmentReq::default_instance_ = new TGuildWishFragmentReq();
  TGuildGiftFragmentReq::default_instance_ = new TGuildGiftFragmentReq();
  TGuildShowFragReq::default_instance_ = new TGuildShowFragReq();
  TGuildUpdateWishNotify::default_instance_ = new TGuildUpdateWishNotify();
  TGuildWishInfo::default_instance_->InitAsDefaultInstance();
  TGuildWishRecord::default_instance_->InitAsDefaultInstance();
  TGuildGetWishListRsp::default_instance_->InitAsDefaultInstance();
  TGuildGetWishReceiveRecordRsp::default_instance_->InitAsDefaultInstance();
  TGuildGetWishGiveRecordRsp::default_instance_->InitAsDefaultInstance();
  TGuildWishFragmentReq::default_instance_->InitAsDefaultInstance();
  TGuildGiftFragmentReq::default_instance_->InitAsDefaultInstance();
  TGuildShowFragReq::default_instance_->InitAsDefaultInstance();
  TGuildUpdateWishNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fGuildWish_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fGuildWish_2eproto {
  StaticDescriptorInitializer_net_2fGuildWish_2eproto() {
    protobuf_AddDesc_net_2fGuildWish_2eproto();
  }
} static_descriptor_initializer_net_2fGuildWish_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TGuildWishInfo::kUidFieldNumber;
const int TGuildWishInfo::kTimeFieldNumber;
const int TGuildWishInfo::kFragmentIdFieldNumber;
const int TGuildWishInfo::kFragmentNumFieldNumber;
const int TGuildWishInfo::kReceiveNumFieldNumber;
const int TGuildWishInfo::kGiveNumFieldNumber;
const int TGuildWishInfo::kFragmentIdArrFieldNumber;
#endif  // !_MSC_VER

TGuildWishInfo::TGuildWishInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWishInfo)
}

void TGuildWishInfo::InitAsDefaultInstance() {
}

TGuildWishInfo::TGuildWishInfo(const TGuildWishInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWishInfo)
}

void TGuildWishInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  fragmentid_ = 0u;
  fragmentnum_ = 0u;
  receivenum_ = 0u;
  givenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWishInfo::~TGuildWishInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWishInfo)
  SharedDtor();
}

void TGuildWishInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWishInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWishInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWishInfo_descriptor_;
}

const TGuildWishInfo& TGuildWishInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWish_2eproto();
  return *default_instance_;
}

TGuildWishInfo* TGuildWishInfo::default_instance_ = NULL;

TGuildWishInfo* TGuildWishInfo::New() const {
  return new TGuildWishInfo;
}

void TGuildWishInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWishInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(uid_, givenum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  fragmentidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWishInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWishInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }

      // optional uint64 Time = 2;
      case 2: {
        if (tag == 16) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_FragmentId;
        break;
      }

      // optional uint32 FragmentId = 3;
      case 3: {
        if (tag == 24) {
         parse_FragmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fragmentid_)));
          set_has_fragmentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_FragmentNum;
        break;
      }

      // optional uint32 FragmentNum = 4;
      case 4: {
        if (tag == 32) {
         parse_FragmentNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fragmentnum_)));
          set_has_fragmentnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ReceiveNum;
        break;
      }

      // optional uint32 ReceiveNum = 5;
      case 5: {
        if (tag == 40) {
         parse_ReceiveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &receivenum_)));
          set_has_receivenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_GiveNum;
        break;
      }

      // optional uint32 GiveNum = 6;
      case 6: {
        if (tag == 48) {
         parse_GiveNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &givenum_)));
          set_has_givenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_FragmentIdArr;
        break;
      }

      // repeated uint32 FragmentIdArr = 7;
      case 7: {
        if (tag == 56) {
         parse_FragmentIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_fragmentidarr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fragmentidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_FragmentIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWishInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWishInfo)
  return false;
#undef DO_
}

void TGuildWishInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWishInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint64 Time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional uint32 FragmentId = 3;
  if (has_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fragmentid(), output);
  }

  // optional uint32 FragmentNum = 4;
  if (has_fragmentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fragmentnum(), output);
  }

  // optional uint32 ReceiveNum = 5;
  if (has_receivenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->receivenum(), output);
  }

  // optional uint32 GiveNum = 6;
  if (has_givenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->givenum(), output);
  }

  // repeated uint32 FragmentIdArr = 7;
  for (int i = 0; i < this->fragmentidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->fragmentidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWishInfo)
}

::google::protobuf::uint8* TGuildWishInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWishInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint64 Time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional uint32 FragmentId = 3;
  if (has_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fragmentid(), target);
  }

  // optional uint32 FragmentNum = 4;
  if (has_fragmentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fragmentnum(), target);
  }

  // optional uint32 ReceiveNum = 5;
  if (has_receivenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->receivenum(), target);
  }

  // optional uint32 GiveNum = 6;
  if (has_givenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->givenum(), target);
  }

  // repeated uint32 FragmentIdArr = 7;
  for (int i = 0; i < this->fragmentidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->fragmentidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWishInfo)
  return target;
}

int TGuildWishInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint64 Time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint32 FragmentId = 3;
    if (has_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fragmentid());
    }

    // optional uint32 FragmentNum = 4;
    if (has_fragmentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fragmentnum());
    }

    // optional uint32 ReceiveNum = 5;
    if (has_receivenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->receivenum());
    }

    // optional uint32 GiveNum = 6;
    if (has_givenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->givenum());
    }

  }
  // repeated uint32 FragmentIdArr = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->fragmentidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fragmentidarr(i));
    }
    total_size += 1 * this->fragmentidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWishInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWishInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWishInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWishInfo::MergeFrom(const TGuildWishInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fragmentidarr_.MergeFrom(from.fragmentidarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_fragmentid()) {
      set_fragmentid(from.fragmentid());
    }
    if (from.has_fragmentnum()) {
      set_fragmentnum(from.fragmentnum());
    }
    if (from.has_receivenum()) {
      set_receivenum(from.receivenum());
    }
    if (from.has_givenum()) {
      set_givenum(from.givenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWishInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWishInfo::CopyFrom(const TGuildWishInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWishInfo::IsInitialized() const {

  return true;
}

void TGuildWishInfo::Swap(TGuildWishInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(time_, other->time_);
    std::swap(fragmentid_, other->fragmentid_);
    std::swap(fragmentnum_, other->fragmentnum_);
    std::swap(receivenum_, other->receivenum_);
    std::swap(givenum_, other->givenum_);
    fragmentidarr_.Swap(&other->fragmentidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWishInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWishInfo_descriptor_;
  metadata.reflection = TGuildWishInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWishRecord::kRecordIdFieldNumber;
const int TGuildWishRecord::kFragmentIdFieldNumber;
const int TGuildWishRecord::kUidFieldNumber;
const int TGuildWishRecord::kUserInfoFieldNumber;
const int TGuildWishRecord::kGiveTimeFieldNumber;
#endif  // !_MSC_VER

TGuildWishRecord::TGuildWishRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWishRecord)
}

void TGuildWishRecord::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TGuildWishRecord::TGuildWishRecord(const TGuildWishRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWishRecord)
}

void TGuildWishRecord::SharedCtor() {
  _cached_size_ = 0;
  recordid_ = 0u;
  fragmentid_ = 0u;
  uid_ = GOOGLE_ULONGLONG(0);
  userinfo_ = NULL;
  givetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWishRecord::~TGuildWishRecord() {
  // @@protoc_insertion_point(destructor:pb.TGuildWishRecord)
  SharedDtor();
}

void TGuildWishRecord::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TGuildWishRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWishRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWishRecord_descriptor_;
}

const TGuildWishRecord& TGuildWishRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWish_2eproto();
  return *default_instance_;
}

TGuildWishRecord* TGuildWishRecord::default_instance_ = NULL;

TGuildWishRecord* TGuildWishRecord::New() const {
  return new TGuildWishRecord;
}

void TGuildWishRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWishRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(recordid_, uid_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    givetime_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWishRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWishRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RecordId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordid_)));
          set_has_recordid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FragmentId;
        break;
      }

      // optional uint32 FragmentId = 2;
      case 2: {
        if (tag == 16) {
         parse_FragmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fragmentid_)));
          set_has_fragmentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 3;
      case 3: {
        if (tag == 24) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_UserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_GiveTime;
        break;
      }

      // optional uint64 GiveTime = 5;
      case 5: {
        if (tag == 40) {
         parse_GiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &givetime_)));
          set_has_givetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWishRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWishRecord)
  return false;
#undef DO_
}

void TGuildWishRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWishRecord)
  // optional uint32 RecordId = 1;
  if (has_recordid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->recordid(), output);
  }

  // optional uint32 FragmentId = 2;
  if (has_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fragmentid(), output);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->userinfo(), output);
  }

  // optional uint64 GiveTime = 5;
  if (has_givetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->givetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWishRecord)
}

::google::protobuf::uint8* TGuildWishRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWishRecord)
  // optional uint32 RecordId = 1;
  if (has_recordid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->recordid(), target);
  }

  // optional uint32 FragmentId = 2;
  if (has_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fragmentid(), target);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->userinfo(), target);
  }

  // optional uint64 GiveTime = 5;
  if (has_givetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->givetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWishRecord)
  return target;
}

int TGuildWishRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RecordId = 1;
    if (has_recordid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordid());
    }

    // optional uint32 FragmentId = 2;
    if (has_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fragmentid());
    }

    // optional uint64 Uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .pb.TUserSimpleInfo UserInfo = 4;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint64 GiveTime = 5;
    if (has_givetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->givetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWishRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWishRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWishRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWishRecord::MergeFrom(const TGuildWishRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recordid()) {
      set_recordid(from.recordid());
    }
    if (from.has_fragmentid()) {
      set_fragmentid(from.fragmentid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_givetime()) {
      set_givetime(from.givetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWishRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWishRecord::CopyFrom(const TGuildWishRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWishRecord::IsInitialized() const {

  return true;
}

void TGuildWishRecord::Swap(TGuildWishRecord* other) {
  if (other != this) {
    std::swap(recordid_, other->recordid_);
    std::swap(fragmentid_, other->fragmentid_);
    std::swap(uid_, other->uid_);
    std::swap(userinfo_, other->userinfo_);
    std::swap(givetime_, other->givetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWishRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWishRecord_descriptor_;
  metadata.reflection = TGuildWishRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetWishListRsp::kWishArrFieldNumber;
#endif  // !_MSC_VER

TGuildGetWishListRsp::TGuildGetWishListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetWishListRsp)
}

void TGuildGetWishListRsp::InitAsDefaultInstance() {
}

TGuildGetWishListRsp::TGuildGetWishListRsp(const TGuildGetWishListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetWishListRsp)
}

void TGuildGetWishListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetWishListRsp::~TGuildGetWishListRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetWishListRsp)
  SharedDtor();
}

void TGuildGetWishListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetWishListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetWishListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetWishListRsp_descriptor_;
}

const TGuildGetWishListRsp& TGuildGetWishListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWish_2eproto();
  return *default_instance_;
}

TGuildGetWishListRsp* TGuildGetWishListRsp::default_instance_ = NULL;

TGuildGetWishListRsp* TGuildGetWishListRsp::New() const {
  return new TGuildGetWishListRsp;
}

void TGuildGetWishListRsp::Clear() {
  wisharr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetWishListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetWishListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWishInfo WishArr = 1;
      case 1: {
        if (tag == 10) {
         parse_WishArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wisharr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_WishArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetWishListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetWishListRsp)
  return false;
#undef DO_
}

void TGuildGetWishListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetWishListRsp)
  // repeated .pb.TGuildWishInfo WishArr = 1;
  for (int i = 0; i < this->wisharr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wisharr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetWishListRsp)
}

::google::protobuf::uint8* TGuildGetWishListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetWishListRsp)
  // repeated .pb.TGuildWishInfo WishArr = 1;
  for (int i = 0; i < this->wisharr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wisharr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetWishListRsp)
  return target;
}

int TGuildGetWishListRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWishInfo WishArr = 1;
  total_size += 1 * this->wisharr_size();
  for (int i = 0; i < this->wisharr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wisharr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetWishListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetWishListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetWishListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetWishListRsp::MergeFrom(const TGuildGetWishListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  wisharr_.MergeFrom(from.wisharr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetWishListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetWishListRsp::CopyFrom(const TGuildGetWishListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetWishListRsp::IsInitialized() const {

  return true;
}

void TGuildGetWishListRsp::Swap(TGuildGetWishListRsp* other) {
  if (other != this) {
    wisharr_.Swap(&other->wisharr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetWishListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetWishListRsp_descriptor_;
  metadata.reflection = TGuildGetWishListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetWishReceiveRecordRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TGuildGetWishReceiveRecordRsp::TGuildGetWishReceiveRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetWishReceiveRecordRsp)
}

void TGuildGetWishReceiveRecordRsp::InitAsDefaultInstance() {
}

TGuildGetWishReceiveRecordRsp::TGuildGetWishReceiveRecordRsp(const TGuildGetWishReceiveRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetWishReceiveRecordRsp)
}

void TGuildGetWishReceiveRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetWishReceiveRecordRsp::~TGuildGetWishReceiveRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetWishReceiveRecordRsp)
  SharedDtor();
}

void TGuildGetWishReceiveRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetWishReceiveRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetWishReceiveRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetWishReceiveRecordRsp_descriptor_;
}

const TGuildGetWishReceiveRecordRsp& TGuildGetWishReceiveRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWish_2eproto();
  return *default_instance_;
}

TGuildGetWishReceiveRecordRsp* TGuildGetWishReceiveRecordRsp::default_instance_ = NULL;

TGuildGetWishReceiveRecordRsp* TGuildGetWishReceiveRecordRsp::New() const {
  return new TGuildGetWishReceiveRecordRsp;
}

void TGuildGetWishReceiveRecordRsp::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetWishReceiveRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetWishReceiveRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWishRecord RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetWishReceiveRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetWishReceiveRecordRsp)
  return false;
#undef DO_
}

void TGuildGetWishReceiveRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetWishReceiveRecordRsp)
  // repeated .pb.TGuildWishRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetWishReceiveRecordRsp)
}

::google::protobuf::uint8* TGuildGetWishReceiveRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetWishReceiveRecordRsp)
  // repeated .pb.TGuildWishRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetWishReceiveRecordRsp)
  return target;
}

int TGuildGetWishReceiveRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWishRecord RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetWishReceiveRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetWishReceiveRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetWishReceiveRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetWishReceiveRecordRsp::MergeFrom(const TGuildGetWishReceiveRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetWishReceiveRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetWishReceiveRecordRsp::CopyFrom(const TGuildGetWishReceiveRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetWishReceiveRecordRsp::IsInitialized() const {

  return true;
}

void TGuildGetWishReceiveRecordRsp::Swap(TGuildGetWishReceiveRecordRsp* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetWishReceiveRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetWishReceiveRecordRsp_descriptor_;
  metadata.reflection = TGuildGetWishReceiveRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGetWishGiveRecordRsp::kRecordArrFieldNumber;
#endif  // !_MSC_VER

TGuildGetWishGiveRecordRsp::TGuildGetWishGiveRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGetWishGiveRecordRsp)
}

void TGuildGetWishGiveRecordRsp::InitAsDefaultInstance() {
}

TGuildGetWishGiveRecordRsp::TGuildGetWishGiveRecordRsp(const TGuildGetWishGiveRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGetWishGiveRecordRsp)
}

void TGuildGetWishGiveRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGetWishGiveRecordRsp::~TGuildGetWishGiveRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildGetWishGiveRecordRsp)
  SharedDtor();
}

void TGuildGetWishGiveRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGetWishGiveRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGetWishGiveRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGetWishGiveRecordRsp_descriptor_;
}

const TGuildGetWishGiveRecordRsp& TGuildGetWishGiveRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWish_2eproto();
  return *default_instance_;
}

TGuildGetWishGiveRecordRsp* TGuildGetWishGiveRecordRsp::default_instance_ = NULL;

TGuildGetWishGiveRecordRsp* TGuildGetWishGiveRecordRsp::New() const {
  return new TGuildGetWishGiveRecordRsp;
}

void TGuildGetWishGiveRecordRsp::Clear() {
  recordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGetWishGiveRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGetWishGiveRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWishRecord RecordArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RecordArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGetWishGiveRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGetWishGiveRecordRsp)
  return false;
#undef DO_
}

void TGuildGetWishGiveRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGetWishGiveRecordRsp)
  // repeated .pb.TGuildWishRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->recordarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGetWishGiveRecordRsp)
}

::google::protobuf::uint8* TGuildGetWishGiveRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGetWishGiveRecordRsp)
  // repeated .pb.TGuildWishRecord RecordArr = 1;
  for (int i = 0; i < this->recordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->recordarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGetWishGiveRecordRsp)
  return target;
}

int TGuildGetWishGiveRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWishRecord RecordArr = 1;
  total_size += 1 * this->recordarr_size();
  for (int i = 0; i < this->recordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGetWishGiveRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGetWishGiveRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGetWishGiveRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGetWishGiveRecordRsp::MergeFrom(const TGuildGetWishGiveRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  recordarr_.MergeFrom(from.recordarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGetWishGiveRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGetWishGiveRecordRsp::CopyFrom(const TGuildGetWishGiveRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGetWishGiveRecordRsp::IsInitialized() const {

  return true;
}

void TGuildGetWishGiveRecordRsp::Swap(TGuildGetWishGiveRecordRsp* other) {
  if (other != this) {
    recordarr_.Swap(&other->recordarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGetWishGiveRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGetWishGiveRecordRsp_descriptor_;
  metadata.reflection = TGuildGetWishGiveRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWishFragmentReq::kFragmentIdFieldNumber;
#endif  // !_MSC_VER

TGuildWishFragmentReq::TGuildWishFragmentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWishFragmentReq)
}

void TGuildWishFragmentReq::InitAsDefaultInstance() {
}

TGuildWishFragmentReq::TGuildWishFragmentReq(const TGuildWishFragmentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWishFragmentReq)
}

void TGuildWishFragmentReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWishFragmentReq::~TGuildWishFragmentReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWishFragmentReq)
  SharedDtor();
}

void TGuildWishFragmentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWishFragmentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWishFragmentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWishFragmentReq_descriptor_;
}

const TGuildWishFragmentReq& TGuildWishFragmentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWish_2eproto();
  return *default_instance_;
}

TGuildWishFragmentReq* TGuildWishFragmentReq::default_instance_ = NULL;

TGuildWishFragmentReq* TGuildWishFragmentReq::New() const {
  return new TGuildWishFragmentReq;
}

void TGuildWishFragmentReq::Clear() {
  fragmentid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWishFragmentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWishFragmentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 FragmentId = 1;
      case 1: {
        if (tag == 8) {
         parse_FragmentId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_fragmentid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fragmentid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_FragmentId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWishFragmentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWishFragmentReq)
  return false;
#undef DO_
}

void TGuildWishFragmentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWishFragmentReq)
  // repeated uint32 FragmentId = 1;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->fragmentid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWishFragmentReq)
}

::google::protobuf::uint8* TGuildWishFragmentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWishFragmentReq)
  // repeated uint32 FragmentId = 1;
  for (int i = 0; i < this->fragmentid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->fragmentid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWishFragmentReq)
  return target;
}

int TGuildWishFragmentReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 FragmentId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fragmentid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fragmentid(i));
    }
    total_size += 1 * this->fragmentid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWishFragmentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWishFragmentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWishFragmentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWishFragmentReq::MergeFrom(const TGuildWishFragmentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  fragmentid_.MergeFrom(from.fragmentid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWishFragmentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWishFragmentReq::CopyFrom(const TGuildWishFragmentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWishFragmentReq::IsInitialized() const {

  return true;
}

void TGuildWishFragmentReq::Swap(TGuildWishFragmentReq* other) {
  if (other != this) {
    fragmentid_.Swap(&other->fragmentid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWishFragmentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWishFragmentReq_descriptor_;
  metadata.reflection = TGuildWishFragmentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildGiftFragmentReq::kFragmentIdFieldNumber;
const int TGuildGiftFragmentReq::kReceiveUidFieldNumber;
#endif  // !_MSC_VER

TGuildGiftFragmentReq::TGuildGiftFragmentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildGiftFragmentReq)
}

void TGuildGiftFragmentReq::InitAsDefaultInstance() {
}

TGuildGiftFragmentReq::TGuildGiftFragmentReq(const TGuildGiftFragmentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildGiftFragmentReq)
}

void TGuildGiftFragmentReq::SharedCtor() {
  _cached_size_ = 0;
  fragmentid_ = 0u;
  receiveuid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildGiftFragmentReq::~TGuildGiftFragmentReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildGiftFragmentReq)
  SharedDtor();
}

void TGuildGiftFragmentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildGiftFragmentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildGiftFragmentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildGiftFragmentReq_descriptor_;
}

const TGuildGiftFragmentReq& TGuildGiftFragmentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWish_2eproto();
  return *default_instance_;
}

TGuildGiftFragmentReq* TGuildGiftFragmentReq::default_instance_ = NULL;

TGuildGiftFragmentReq* TGuildGiftFragmentReq::New() const {
  return new TGuildGiftFragmentReq;
}

void TGuildGiftFragmentReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildGiftFragmentReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(receiveuid_, fragmentid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildGiftFragmentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildGiftFragmentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 FragmentId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fragmentid_)));
          set_has_fragmentid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReceiveUid;
        break;
      }

      // optional uint64 ReceiveUid = 2;
      case 2: {
        if (tag == 16) {
         parse_ReceiveUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &receiveuid_)));
          set_has_receiveuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildGiftFragmentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildGiftFragmentReq)
  return false;
#undef DO_
}

void TGuildGiftFragmentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildGiftFragmentReq)
  // optional uint32 FragmentId = 1;
  if (has_fragmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fragmentid(), output);
  }

  // optional uint64 ReceiveUid = 2;
  if (has_receiveuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->receiveuid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildGiftFragmentReq)
}

::google::protobuf::uint8* TGuildGiftFragmentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildGiftFragmentReq)
  // optional uint32 FragmentId = 1;
  if (has_fragmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fragmentid(), target);
  }

  // optional uint64 ReceiveUid = 2;
  if (has_receiveuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->receiveuid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildGiftFragmentReq)
  return target;
}

int TGuildGiftFragmentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 FragmentId = 1;
    if (has_fragmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fragmentid());
    }

    // optional uint64 ReceiveUid = 2;
    if (has_receiveuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->receiveuid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildGiftFragmentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildGiftFragmentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildGiftFragmentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildGiftFragmentReq::MergeFrom(const TGuildGiftFragmentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragmentid()) {
      set_fragmentid(from.fragmentid());
    }
    if (from.has_receiveuid()) {
      set_receiveuid(from.receiveuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildGiftFragmentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildGiftFragmentReq::CopyFrom(const TGuildGiftFragmentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildGiftFragmentReq::IsInitialized() const {

  return true;
}

void TGuildGiftFragmentReq::Swap(TGuildGiftFragmentReq* other) {
  if (other != this) {
    std::swap(fragmentid_, other->fragmentid_);
    std::swap(receiveuid_, other->receiveuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildGiftFragmentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildGiftFragmentReq_descriptor_;
  metadata.reflection = TGuildGiftFragmentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildShowFragReq::kFragmentIdArrFieldNumber;
#endif  // !_MSC_VER

TGuildShowFragReq::TGuildShowFragReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildShowFragReq)
}

void TGuildShowFragReq::InitAsDefaultInstance() {
}

TGuildShowFragReq::TGuildShowFragReq(const TGuildShowFragReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildShowFragReq)
}

void TGuildShowFragReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildShowFragReq::~TGuildShowFragReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildShowFragReq)
  SharedDtor();
}

void TGuildShowFragReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildShowFragReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildShowFragReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildShowFragReq_descriptor_;
}

const TGuildShowFragReq& TGuildShowFragReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWish_2eproto();
  return *default_instance_;
}

TGuildShowFragReq* TGuildShowFragReq::default_instance_ = NULL;

TGuildShowFragReq* TGuildShowFragReq::New() const {
  return new TGuildShowFragReq;
}

void TGuildShowFragReq::Clear() {
  fragmentidarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildShowFragReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildShowFragReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 FragmentIdArr = 1;
      case 1: {
        if (tag == 8) {
         parse_FragmentIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_fragmentidarr())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_fragmentidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_FragmentIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildShowFragReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildShowFragReq)
  return false;
#undef DO_
}

void TGuildShowFragReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildShowFragReq)
  // repeated uint32 FragmentIdArr = 1;
  for (int i = 0; i < this->fragmentidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->fragmentidarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildShowFragReq)
}

::google::protobuf::uint8* TGuildShowFragReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildShowFragReq)
  // repeated uint32 FragmentIdArr = 1;
  for (int i = 0; i < this->fragmentidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->fragmentidarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildShowFragReq)
  return target;
}

int TGuildShowFragReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 FragmentIdArr = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fragmentidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->fragmentidarr(i));
    }
    total_size += 1 * this->fragmentidarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildShowFragReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildShowFragReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildShowFragReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildShowFragReq::MergeFrom(const TGuildShowFragReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  fragmentidarr_.MergeFrom(from.fragmentidarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildShowFragReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildShowFragReq::CopyFrom(const TGuildShowFragReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildShowFragReq::IsInitialized() const {

  return true;
}

void TGuildShowFragReq::Swap(TGuildShowFragReq* other) {
  if (other != this) {
    fragmentidarr_.Swap(&other->fragmentidarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildShowFragReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildShowFragReq_descriptor_;
  metadata.reflection = TGuildShowFragReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildUpdateWishNotify::kWishArrFieldNumber;
#endif  // !_MSC_VER

TGuildUpdateWishNotify::TGuildUpdateWishNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildUpdateWishNotify)
}

void TGuildUpdateWishNotify::InitAsDefaultInstance() {
}

TGuildUpdateWishNotify::TGuildUpdateWishNotify(const TGuildUpdateWishNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildUpdateWishNotify)
}

void TGuildUpdateWishNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildUpdateWishNotify::~TGuildUpdateWishNotify() {
  // @@protoc_insertion_point(destructor:pb.TGuildUpdateWishNotify)
  SharedDtor();
}

void TGuildUpdateWishNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildUpdateWishNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildUpdateWishNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildUpdateWishNotify_descriptor_;
}

const TGuildUpdateWishNotify& TGuildUpdateWishNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWish_2eproto();
  return *default_instance_;
}

TGuildUpdateWishNotify* TGuildUpdateWishNotify::default_instance_ = NULL;

TGuildUpdateWishNotify* TGuildUpdateWishNotify::New() const {
  return new TGuildUpdateWishNotify;
}

void TGuildUpdateWishNotify::Clear() {
  wisharr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildUpdateWishNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildUpdateWishNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWishInfo WishArr = 1;
      case 1: {
        if (tag == 10) {
         parse_WishArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wisharr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_WishArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildUpdateWishNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildUpdateWishNotify)
  return false;
#undef DO_
}

void TGuildUpdateWishNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildUpdateWishNotify)
  // repeated .pb.TGuildWishInfo WishArr = 1;
  for (int i = 0; i < this->wisharr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wisharr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildUpdateWishNotify)
}

::google::protobuf::uint8* TGuildUpdateWishNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildUpdateWishNotify)
  // repeated .pb.TGuildWishInfo WishArr = 1;
  for (int i = 0; i < this->wisharr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wisharr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildUpdateWishNotify)
  return target;
}

int TGuildUpdateWishNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWishInfo WishArr = 1;
  total_size += 1 * this->wisharr_size();
  for (int i = 0; i < this->wisharr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wisharr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildUpdateWishNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildUpdateWishNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildUpdateWishNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildUpdateWishNotify::MergeFrom(const TGuildUpdateWishNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  wisharr_.MergeFrom(from.wisharr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildUpdateWishNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildUpdateWishNotify::CopyFrom(const TGuildUpdateWishNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildUpdateWishNotify::IsInitialized() const {

  return true;
}

void TGuildUpdateWishNotify::Swap(TGuildUpdateWishNotify* other) {
  if (other != this) {
    wisharr_.Swap(&other->wisharr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildUpdateWishNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildUpdateWishNotify_descriptor_;
  metadata.reflection = TGuildUpdateWishNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
