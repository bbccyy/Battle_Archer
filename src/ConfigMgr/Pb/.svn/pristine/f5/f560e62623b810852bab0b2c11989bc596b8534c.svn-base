// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GuildWar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/GuildWar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TGuildWarSingleMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarSingleMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarMessageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarMessageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarTeamIdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarTeamIdInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarTowerSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarTowerSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarFormation_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarTeamFormationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarTeamFormationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarUserTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarUserTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarUserHeroInheritInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarUserHeroInheritInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarOtherUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarOtherUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarFieldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarFieldInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarTeamBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarTeamBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarTeamInfoWithHp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarTeamInfoWithHp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarHeroDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarHeroDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarTeamDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarTeamDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarBattleRecordInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarBattleRecordInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarStageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarStageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetServerTeamInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetServerTeamInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetStageInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetStageInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarEnterFieldRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarEnterFieldRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetFieldInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetFieldInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarSetTeamFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarSetTeamFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarSetTeamFormationRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarSetTeamFormationRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarSetCallForBattleHeroReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarSetCallForBattleHeroReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarSetCallForBattleHeroRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarSetCallForBattleHeroRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarSetAttackFormationReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarSetAttackFormationReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTowerInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTowerInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTowerInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTowerInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTowerTeamInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTowerTeamInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTowerTeamInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTowerTeamInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGarrisonTowerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGarrisonTowerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarCancelGarrisonTowerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarCancelGarrisonTowerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetAllTeamInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetAllTeamInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTeamInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTeamInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTeamInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTeamInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarDeployTeamToTowerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarDeployTeamToTowerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetAllCallForBattleHeroInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetAllCallForBattleHeroInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarSetCallForBattleHeroListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarSetCallForBattleHeroListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetCallForBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetCallForBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarAttackTowerTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarAttackTowerTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarAttackTowerTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarAttackTowerTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarChooseBuffReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarChooseBuffReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTowerBattleRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTowerBattleRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTowerBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTowerBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTeamBattleRecordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTeamBattleRecordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTeamBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTeamBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetSelfBattleRecordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetSelfBattleRecordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTowerRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTowerRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetTowerRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetTowerRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetBuffListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetBuffListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetFieldRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetFieldRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarGetEndRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarGetEndRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarSendMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarSendMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarMoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarMoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarUserMoveNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarUserMoveNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarStageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarStageNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarTowerNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarTowerNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarMessageWithChatType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarMessageWithChatType_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildWarMessageNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildWarMessageNotify_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildWarStage_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildWarResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildWarMsgType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fGuildWar_2eproto() {
  protobuf_AddDesc_net_2fGuildWar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/GuildWar.proto");
  GOOGLE_CHECK(file != NULL);
  TGuildWarSingleMessage_descriptor_ = file->message_type(0);
  static const int TGuildWarSingleMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSingleMessage, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSingleMessage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSingleMessage, msgtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSingleMessage, msgtype_),
  };
  TGuildWarSingleMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarSingleMessage_descriptor_,
      TGuildWarSingleMessage::default_instance_,
      TGuildWarSingleMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSingleMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSingleMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarSingleMessage));
  TGuildWarMessageInfo_descriptor_ = file->message_type(1);
  static const int TGuildWarMessageInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMessageInfo, arrmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMessageInfo, arrusersimpleinfo_),
  };
  TGuildWarMessageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarMessageInfo_descriptor_,
      TGuildWarMessageInfo::default_instance_,
      TGuildWarMessageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMessageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMessageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarMessageInfo));
  TGuildWarTeamIdInfo_descriptor_ = file->message_type(2);
  static const int TGuildWarTeamIdInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamIdInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamIdInfo, teamindex_),
  };
  TGuildWarTeamIdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarTeamIdInfo_descriptor_,
      TGuildWarTeamIdInfo::default_instance_,
      TGuildWarTeamIdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamIdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamIdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarTeamIdInfo));
  TGuildWarTowerSimpleInfo_descriptor_ = file->message_type(3);
  static const int TGuildWarTowerSimpleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTowerSimpleInfo, towerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTowerSimpleInfo, aliveteamnum_),
  };
  TGuildWarTowerSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarTowerSimpleInfo_descriptor_,
      TGuildWarTowerSimpleInfo::default_instance_,
      TGuildWarTowerSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTowerSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTowerSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarTowerSimpleInfo));
  TGuildWarFormation_descriptor_ = file->message_type(4);
  static const int TGuildWarFormation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFormation, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFormation, pos_),
  };
  TGuildWarFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarFormation_descriptor_,
      TGuildWarFormation::default_instance_,
      TGuildWarFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarFormation));
  TGuildWarTeamFormationInfo_descriptor_ = file->message_type(5);
  static const int TGuildWarTeamFormationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamFormationInfo, teamindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamFormationInfo, arrformation_),
  };
  TGuildWarTeamFormationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarTeamFormationInfo_descriptor_,
      TGuildWarTeamFormationInfo::default_instance_,
      TGuildWarTeamFormationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamFormationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamFormationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarTeamFormationInfo));
  TGuildWarUserTeamInfo_descriptor_ = file->message_type(6);
  static const int TGuildWarUserTeamInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserTeamInfo, teamindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserTeamInfo, arrheroinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserTeamInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserTeamInfo, towerid_),
  };
  TGuildWarUserTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarUserTeamInfo_descriptor_,
      TGuildWarUserTeamInfo::default_instance_,
      TGuildWarUserTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarUserTeamInfo));
  TGuildWarUserHeroInheritInfo_descriptor_ = file->message_type(7);
  static const int TGuildWarUserHeroInheritInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserHeroInheritInfo, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserHeroInheritInfo, curhpper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserHeroInheritInfo, currage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserHeroInheritInfo, recovertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserHeroInheritInfo, cdtime_),
  };
  TGuildWarUserHeroInheritInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarUserHeroInheritInfo_descriptor_,
      TGuildWarUserHeroInheritInfo::default_instance_,
      TGuildWarUserHeroInheritInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserHeroInheritInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserHeroInheritInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarUserHeroInheritInfo));
  TGuildWarUserInfo_descriptor_ = file->message_type(8);
  static const int TGuildWarUserInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, incattacktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, attacknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, incattacknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, callforbattlehero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, arrnotpickedbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, arrteaminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, arrheroinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, arrattackformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, sendnormalmsgtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, sendgoldmsgtime_),
  };
  TGuildWarUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarUserInfo_descriptor_,
      TGuildWarUserInfo::default_instance_,
      TGuildWarUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarUserInfo));
  TGuildWarOtherUserInfo_descriptor_ = file->message_type(9);
  static const int TGuildWarOtherUserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarOtherUserInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarOtherUserInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarOtherUserInfo, isleave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarOtherUserInfo, usersimpleinfo_),
  };
  TGuildWarOtherUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarOtherUserInfo_descriptor_,
      TGuildWarOtherUserInfo::default_instance_,
      TGuildWarOtherUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarOtherUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarOtherUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarOtherUserInfo));
  TGuildWarFieldInfo_descriptor_ = file->message_type(10);
  static const int TGuildWarFieldInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFieldInfo, arrtowerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFieldInfo, selfinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFieldInfo, arrotheruserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFieldInfo, notreadmsginfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFieldInfo, arrheroinfo1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFieldInfo, arrheroinfo2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFieldInfo, arrusersimpleinfo_),
  };
  TGuildWarFieldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarFieldInfo_descriptor_,
      TGuildWarFieldInfo::default_instance_,
      TGuildWarFieldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFieldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarFieldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarFieldInfo));
  TGuildWarTeamBaseInfo_descriptor_ = file->message_type(11);
  static const int TGuildWarTeamBaseInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamBaseInfo, teamidinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamBaseInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamBaseInfo, towerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamBaseInfo, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamBaseInfo, battleinfoid_),
  };
  TGuildWarTeamBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarTeamBaseInfo_descriptor_,
      TGuildWarTeamBaseInfo::default_instance_,
      TGuildWarTeamBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarTeamBaseInfo));
  TGuildWarTeamInfoWithHp_descriptor_ = file->message_type(12);
  static const int TGuildWarTeamInfoWithHp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamInfoWithHp, teambaseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamInfoWithHp, curhpper_),
  };
  TGuildWarTeamInfoWithHp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarTeamInfoWithHp_descriptor_,
      TGuildWarTeamInfoWithHp::default_instance_,
      TGuildWarTeamInfoWithHp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamInfoWithHp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamInfoWithHp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarTeamInfoWithHp));
  TGuildWarHeroDetailInfo_descriptor_ = file->message_type(13);
  static const int TGuildWarHeroDetailInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, advlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, curhpper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, currage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, fightforce_),
  };
  TGuildWarHeroDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarHeroDetailInfo_descriptor_,
      TGuildWarHeroDetailInfo::default_instance_,
      TGuildWarHeroDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarHeroDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarHeroDetailInfo));
  TGuildWarTeamDetailInfo_descriptor_ = file->message_type(14);
  static const int TGuildWarTeamDetailInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamDetailInfo, teambaseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamDetailInfo, arrformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamDetailInfo, attackednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamDetailInfo, reducedmorale_),
  };
  TGuildWarTeamDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarTeamDetailInfo_descriptor_,
      TGuildWarTeamDetailInfo::default_instance_,
      TGuildWarTeamDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTeamDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarTeamDetailInfo));
  TGuildWarBattleRecordInfo_descriptor_ = file->message_type(15);
  static const int TGuildWarBattleRecordInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, attackuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, defenseuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, towerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, teamindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, attackfightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, defensefightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, attackguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, defenseguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, battleinfoid_),
  };
  TGuildWarBattleRecordInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarBattleRecordInfo_descriptor_,
      TGuildWarBattleRecordInfo::default_instance_,
      TGuildWarBattleRecordInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarBattleRecordInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarBattleRecordInfo));
  TGuildWarRankInfo_descriptor_ = file->message_type(16);
  static const int TGuildWarRankInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarRankInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarRankInfo, defeatnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarRankInfo, defeattime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarRankInfo, damagenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarRankInfo, damagetime_),
  };
  TGuildWarRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarRankInfo_descriptor_,
      TGuildWarRankInfo::default_instance_,
      TGuildWarRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarRankInfo));
  TGuildWarStageInfo_descriptor_ = file->message_type(17);
  static const int TGuildWarStageInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, curstage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, signuptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, selfglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, selfgpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, targetgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, targetgname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, targetserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, targetglevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, arrcallforbattleresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, guildwarresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, surplusattacknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, issetcallforbattlehero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, arrselftowerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, arrselfteambaseinfo_),
  };
  TGuildWarStageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarStageInfo_descriptor_,
      TGuildWarStageInfo::default_instance_,
      TGuildWarStageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarStageInfo));
  TGuildWarGetServerTeamInfoRsp_descriptor_ = file->message_type(18);
  static const int TGuildWarGetServerTeamInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetServerTeamInfoRsp, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetServerTeamInfoRsp, needopenday_),
  };
  TGuildWarGetServerTeamInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetServerTeamInfoRsp_descriptor_,
      TGuildWarGetServerTeamInfoRsp::default_instance_,
      TGuildWarGetServerTeamInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetServerTeamInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetServerTeamInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetServerTeamInfoRsp));
  TGuildWarGetStageInfoRsp_descriptor_ = file->message_type(19);
  static const int TGuildWarGetStageInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetStageInfoRsp, stageinfo_),
  };
  TGuildWarGetStageInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetStageInfoRsp_descriptor_,
      TGuildWarGetStageInfoRsp::default_instance_,
      TGuildWarGetStageInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetStageInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetStageInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetStageInfoRsp));
  TGuildWarEnterFieldRsp_descriptor_ = file->message_type(20);
  static const int TGuildWarEnterFieldRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarEnterFieldRsp, fieldinfo_),
  };
  TGuildWarEnterFieldRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarEnterFieldRsp_descriptor_,
      TGuildWarEnterFieldRsp::default_instance_,
      TGuildWarEnterFieldRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarEnterFieldRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarEnterFieldRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarEnterFieldRsp));
  TGuildWarGetFieldInfoRsp_descriptor_ = file->message_type(21);
  static const int TGuildWarGetFieldInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetFieldInfoRsp, fieldinfo_),
  };
  TGuildWarGetFieldInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetFieldInfoRsp_descriptor_,
      TGuildWarGetFieldInfoRsp::default_instance_,
      TGuildWarGetFieldInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetFieldInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetFieldInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetFieldInfoRsp));
  TGuildWarSetTeamFormationReq_descriptor_ = file->message_type(22);
  static const int TGuildWarSetTeamFormationReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetTeamFormationReq, arrteamformation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetTeamFormationReq, usehistory_),
  };
  TGuildWarSetTeamFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarSetTeamFormationReq_descriptor_,
      TGuildWarSetTeamFormationReq::default_instance_,
      TGuildWarSetTeamFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetTeamFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetTeamFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarSetTeamFormationReq));
  TGuildWarSetTeamFormationRsp_descriptor_ = file->message_type(23);
  static const int TGuildWarSetTeamFormationRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetTeamFormationRsp, arrteaminfo_),
  };
  TGuildWarSetTeamFormationRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarSetTeamFormationRsp_descriptor_,
      TGuildWarSetTeamFormationRsp::default_instance_,
      TGuildWarSetTeamFormationRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetTeamFormationRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetTeamFormationRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarSetTeamFormationRsp));
  TGuildWarSetCallForBattleHeroReq_descriptor_ = file->message_type(24);
  static const int TGuildWarSetCallForBattleHeroReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetCallForBattleHeroReq, hid_),
  };
  TGuildWarSetCallForBattleHeroReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarSetCallForBattleHeroReq_descriptor_,
      TGuildWarSetCallForBattleHeroReq::default_instance_,
      TGuildWarSetCallForBattleHeroReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetCallForBattleHeroReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetCallForBattleHeroReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarSetCallForBattleHeroReq));
  TGuildWarSetCallForBattleHeroRsp_descriptor_ = file->message_type(25);
  static const int TGuildWarSetCallForBattleHeroRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetCallForBattleHeroRsp, callforbattlehero_),
  };
  TGuildWarSetCallForBattleHeroRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarSetCallForBattleHeroRsp_descriptor_,
      TGuildWarSetCallForBattleHeroRsp::default_instance_,
      TGuildWarSetCallForBattleHeroRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetCallForBattleHeroRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetCallForBattleHeroRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarSetCallForBattleHeroRsp));
  TGuildWarSetAttackFormationReq_descriptor_ = file->message_type(26);
  static const int TGuildWarSetAttackFormationReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetAttackFormationReq, arrformation_),
  };
  TGuildWarSetAttackFormationReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarSetAttackFormationReq_descriptor_,
      TGuildWarSetAttackFormationReq::default_instance_,
      TGuildWarSetAttackFormationReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetAttackFormationReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetAttackFormationReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarSetAttackFormationReq));
  TGuildWarGetTowerInfoReq_descriptor_ = file->message_type(27);
  static const int TGuildWarGetTowerInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerInfoReq, towerid_),
  };
  TGuildWarGetTowerInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTowerInfoReq_descriptor_,
      TGuildWarGetTowerInfoReq::default_instance_,
      TGuildWarGetTowerInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTowerInfoReq));
  TGuildWarGetTowerInfoRsp_descriptor_ = file->message_type(28);
  static const int TGuildWarGetTowerInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerInfoRsp, towerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerInfoRsp, arrteaminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerInfoRsp, arrusersimpleinfo_),
  };
  TGuildWarGetTowerInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTowerInfoRsp_descriptor_,
      TGuildWarGetTowerInfoRsp::default_instance_,
      TGuildWarGetTowerInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTowerInfoRsp));
  TGuildWarGetTowerTeamInfoReq_descriptor_ = file->message_type(29);
  static const int TGuildWarGetTowerTeamInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerTeamInfoReq, towerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerTeamInfoReq, teamidinfo_),
  };
  TGuildWarGetTowerTeamInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTowerTeamInfoReq_descriptor_,
      TGuildWarGetTowerTeamInfoReq::default_instance_,
      TGuildWarGetTowerTeamInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerTeamInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerTeamInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTowerTeamInfoReq));
  TGuildWarGetTowerTeamInfoRsp_descriptor_ = file->message_type(30);
  static const int TGuildWarGetTowerTeamInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerTeamInfoRsp, teaminfo_),
  };
  TGuildWarGetTowerTeamInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTowerTeamInfoRsp_descriptor_,
      TGuildWarGetTowerTeamInfoRsp::default_instance_,
      TGuildWarGetTowerTeamInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerTeamInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerTeamInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTowerTeamInfoRsp));
  TGuildWarGarrisonTowerReq_descriptor_ = file->message_type(31);
  static const int TGuildWarGarrisonTowerReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGarrisonTowerReq, towerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGarrisonTowerReq, teamidinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGarrisonTowerReq, replaceteamidinfo_),
  };
  TGuildWarGarrisonTowerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGarrisonTowerReq_descriptor_,
      TGuildWarGarrisonTowerReq::default_instance_,
      TGuildWarGarrisonTowerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGarrisonTowerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGarrisonTowerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGarrisonTowerReq));
  TGuildWarCancelGarrisonTowerReq_descriptor_ = file->message_type(32);
  static const int TGuildWarCancelGarrisonTowerReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarCancelGarrisonTowerReq, towerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarCancelGarrisonTowerReq, teamidinfo_),
  };
  TGuildWarCancelGarrisonTowerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarCancelGarrisonTowerReq_descriptor_,
      TGuildWarCancelGarrisonTowerReq::default_instance_,
      TGuildWarCancelGarrisonTowerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarCancelGarrisonTowerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarCancelGarrisonTowerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarCancelGarrisonTowerReq));
  TGuildWarGetAllTeamInfoRsp_descriptor_ = file->message_type(33);
  static const int TGuildWarGetAllTeamInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetAllTeamInfoRsp, arrteambaseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetAllTeamInfoRsp, arrusersimpleinfo_),
  };
  TGuildWarGetAllTeamInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetAllTeamInfoRsp_descriptor_,
      TGuildWarGetAllTeamInfoRsp::default_instance_,
      TGuildWarGetAllTeamInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetAllTeamInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetAllTeamInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetAllTeamInfoRsp));
  TGuildWarGetTeamInfoReq_descriptor_ = file->message_type(34);
  static const int TGuildWarGetTeamInfoReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamInfoReq, teamidinfo_),
  };
  TGuildWarGetTeamInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTeamInfoReq_descriptor_,
      TGuildWarGetTeamInfoReq::default_instance_,
      TGuildWarGetTeamInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTeamInfoReq));
  TGuildWarGetTeamInfoRsp_descriptor_ = file->message_type(35);
  static const int TGuildWarGetTeamInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamInfoRsp, teaminfo_),
  };
  TGuildWarGetTeamInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTeamInfoRsp_descriptor_,
      TGuildWarGetTeamInfoRsp::default_instance_,
      TGuildWarGetTeamInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTeamInfoRsp));
  TGuildWarDeployTeamToTowerReq_descriptor_ = file->message_type(36);
  static const int TGuildWarDeployTeamToTowerReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarDeployTeamToTowerReq, towerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarDeployTeamToTowerReq, teamidinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarDeployTeamToTowerReq, replaceteamidinfo_),
  };
  TGuildWarDeployTeamToTowerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarDeployTeamToTowerReq_descriptor_,
      TGuildWarDeployTeamToTowerReq::default_instance_,
      TGuildWarDeployTeamToTowerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarDeployTeamToTowerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarDeployTeamToTowerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarDeployTeamToTowerReq));
  TGuildWarGetAllCallForBattleHeroInfoRsp_descriptor_ = file->message_type(37);
  static const int TGuildWarGetAllCallForBattleHeroInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetAllCallForBattleHeroInfoRsp, arrheroinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetAllCallForBattleHeroInfoRsp, arrusersimpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetAllCallForBattleHeroInfoRsp, arruid_),
  };
  TGuildWarGetAllCallForBattleHeroInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetAllCallForBattleHeroInfoRsp_descriptor_,
      TGuildWarGetAllCallForBattleHeroInfoRsp::default_instance_,
      TGuildWarGetAllCallForBattleHeroInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetAllCallForBattleHeroInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetAllCallForBattleHeroInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetAllCallForBattleHeroInfoRsp));
  TGuildWarSetCallForBattleHeroListReq_descriptor_ = file->message_type(38);
  static const int TGuildWarSetCallForBattleHeroListReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetCallForBattleHeroListReq, arruid_),
  };
  TGuildWarSetCallForBattleHeroListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarSetCallForBattleHeroListReq_descriptor_,
      TGuildWarSetCallForBattleHeroListReq::default_instance_,
      TGuildWarSetCallForBattleHeroListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetCallForBattleHeroListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSetCallForBattleHeroListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarSetCallForBattleHeroListReq));
  TGuildWarGetCallForBattleRecordRsp_descriptor_ = file->message_type(39);
  static const int TGuildWarGetCallForBattleRecordRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetCallForBattleRecordRsp, arrrecordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetCallForBattleRecordRsp, arrheroinfo1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetCallForBattleRecordRsp, arrheroinfo2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetCallForBattleRecordRsp, arrusersimpleinfo_),
  };
  TGuildWarGetCallForBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetCallForBattleRecordRsp_descriptor_,
      TGuildWarGetCallForBattleRecordRsp::default_instance_,
      TGuildWarGetCallForBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetCallForBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetCallForBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetCallForBattleRecordRsp));
  TGuildWarAttackTowerTeamReq_descriptor_ = file->message_type(40);
  static const int TGuildWarAttackTowerTeamReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarAttackTowerTeamReq, towerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarAttackTowerTeamReq, teamidinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarAttackTowerTeamReq, arrformation_),
  };
  TGuildWarAttackTowerTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarAttackTowerTeamReq_descriptor_,
      TGuildWarAttackTowerTeamReq::default_instance_,
      TGuildWarAttackTowerTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarAttackTowerTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarAttackTowerTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarAttackTowerTeamReq));
  TGuildWarAttackTowerTeamRsp_descriptor_ = file->message_type(41);
  static const int TGuildWarAttackTowerTeamRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarAttackTowerTeamRsp, battleret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarAttackTowerTeamRsp, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarAttackTowerTeamRsp, arrnotpickedbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarAttackTowerTeamRsp, arrheroinfo_),
  };
  TGuildWarAttackTowerTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarAttackTowerTeamRsp_descriptor_,
      TGuildWarAttackTowerTeamRsp::default_instance_,
      TGuildWarAttackTowerTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarAttackTowerTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarAttackTowerTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarAttackTowerTeamRsp));
  TGuildWarChooseBuffReq_descriptor_ = file->message_type(42);
  static const int TGuildWarChooseBuffReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarChooseBuffReq, buffid_),
  };
  TGuildWarChooseBuffReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarChooseBuffReq_descriptor_,
      TGuildWarChooseBuffReq::default_instance_,
      TGuildWarChooseBuffReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarChooseBuffReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarChooseBuffReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarChooseBuffReq));
  TGuildWarGetTowerBattleRecordReq_descriptor_ = file->message_type(43);
  static const int TGuildWarGetTowerBattleRecordReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerBattleRecordReq, towerid_),
  };
  TGuildWarGetTowerBattleRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTowerBattleRecordReq_descriptor_,
      TGuildWarGetTowerBattleRecordReq::default_instance_,
      TGuildWarGetTowerBattleRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerBattleRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerBattleRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTowerBattleRecordReq));
  TGuildWarGetTowerBattleRecordRsp_descriptor_ = file->message_type(44);
  static const int TGuildWarGetTowerBattleRecordRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerBattleRecordRsp, arrrecordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerBattleRecordRsp, arrusersimpleinfo_),
  };
  TGuildWarGetTowerBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTowerBattleRecordRsp_descriptor_,
      TGuildWarGetTowerBattleRecordRsp::default_instance_,
      TGuildWarGetTowerBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTowerBattleRecordRsp));
  TGuildWarGetTeamBattleRecordReq_descriptor_ = file->message_type(45);
  static const int TGuildWarGetTeamBattleRecordReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamBattleRecordReq, towerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamBattleRecordReq, teamidinfo_),
  };
  TGuildWarGetTeamBattleRecordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTeamBattleRecordReq_descriptor_,
      TGuildWarGetTeamBattleRecordReq::default_instance_,
      TGuildWarGetTeamBattleRecordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamBattleRecordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamBattleRecordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTeamBattleRecordReq));
  TGuildWarGetTeamBattleRecordRsp_descriptor_ = file->message_type(46);
  static const int TGuildWarGetTeamBattleRecordRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamBattleRecordRsp, arrrecordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamBattleRecordRsp, arrusersimpleinfo_),
  };
  TGuildWarGetTeamBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTeamBattleRecordRsp_descriptor_,
      TGuildWarGetTeamBattleRecordRsp::default_instance_,
      TGuildWarGetTeamBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTeamBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTeamBattleRecordRsp));
  TGuildWarGetSelfBattleRecordRsp_descriptor_ = file->message_type(47);
  static const int TGuildWarGetSelfBattleRecordRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetSelfBattleRecordRsp, arrrecordinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetSelfBattleRecordRsp, arrusersimpleinfo_),
  };
  TGuildWarGetSelfBattleRecordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetSelfBattleRecordRsp_descriptor_,
      TGuildWarGetSelfBattleRecordRsp::default_instance_,
      TGuildWarGetSelfBattleRecordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetSelfBattleRecordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetSelfBattleRecordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetSelfBattleRecordRsp));
  TGuildWarGetTowerRewardReq_descriptor_ = file->message_type(48);
  static const int TGuildWarGetTowerRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerRewardReq, towerid_),
  };
  TGuildWarGetTowerRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTowerRewardReq_descriptor_,
      TGuildWarGetTowerRewardReq::default_instance_,
      TGuildWarGetTowerRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTowerRewardReq));
  TGuildWarGetTowerRewardRsp_descriptor_ = file->message_type(49);
  static const int TGuildWarGetTowerRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerRewardRsp, rewardarray_),
  };
  TGuildWarGetTowerRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetTowerRewardRsp_descriptor_,
      TGuildWarGetTowerRewardRsp::default_instance_,
      TGuildWarGetTowerRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetTowerRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetTowerRewardRsp));
  TGuildWarGetBuffListRsp_descriptor_ = file->message_type(50);
  static const int TGuildWarGetBuffListRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetBuffListRsp, arrbuff_),
  };
  TGuildWarGetBuffListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetBuffListRsp_descriptor_,
      TGuildWarGetBuffListRsp::default_instance_,
      TGuildWarGetBuffListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetBuffListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetBuffListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetBuffListRsp));
  TGuildWarGetFieldRankRsp_descriptor_ = file->message_type(51);
  static const int TGuildWarGetFieldRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetFieldRankRsp, arrrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetFieldRankRsp, arrusersimpleinfo_),
  };
  TGuildWarGetFieldRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetFieldRankRsp_descriptor_,
      TGuildWarGetFieldRankRsp::default_instance_,
      TGuildWarGetFieldRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetFieldRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetFieldRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetFieldRankRsp));
  TGuildWarGetEndRewardRsp_descriptor_ = file->message_type(52);
  static const int TGuildWarGetEndRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetEndRewardRsp, rewardarray_),
  };
  TGuildWarGetEndRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarGetEndRewardRsp_descriptor_,
      TGuildWarGetEndRewardRsp::default_instance_,
      TGuildWarGetEndRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetEndRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarGetEndRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarGetEndRewardRsp));
  TGuildWarSendMsgReq_descriptor_ = file->message_type(53);
  static const int TGuildWarSendMsgReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSendMsgReq, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSendMsgReq, msg_),
  };
  TGuildWarSendMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarSendMsgReq_descriptor_,
      TGuildWarSendMsgReq::default_instance_,
      TGuildWarSendMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSendMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarSendMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarSendMsgReq));
  TGuildWarMoveReq_descriptor_ = file->message_type(54);
  static const int TGuildWarMoveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMoveReq, targetpos_),
  };
  TGuildWarMoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarMoveReq_descriptor_,
      TGuildWarMoveReq::default_instance_,
      TGuildWarMoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarMoveReq));
  TGuildWarUserMoveNotify_descriptor_ = file->message_type(55);
  static const int TGuildWarUserMoveNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserMoveNotify, otheruserinfo_),
  };
  TGuildWarUserMoveNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarUserMoveNotify_descriptor_,
      TGuildWarUserMoveNotify::default_instance_,
      TGuildWarUserMoveNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserMoveNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarUserMoveNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarUserMoveNotify));
  TGuildWarStageNotify_descriptor_ = file->message_type(56);
  static const int TGuildWarStageNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageNotify, stageinfo_),
  };
  TGuildWarStageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarStageNotify_descriptor_,
      TGuildWarStageNotify::default_instance_,
      TGuildWarStageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarStageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarStageNotify));
  TGuildWarTowerNotify_descriptor_ = file->message_type(57);
  static const int TGuildWarTowerNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTowerNotify, arrtowerinfo_),
  };
  TGuildWarTowerNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarTowerNotify_descriptor_,
      TGuildWarTowerNotify::default_instance_,
      TGuildWarTowerNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTowerNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarTowerNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarTowerNotify));
  TGuildWarMessageWithChatType_descriptor_ = file->message_type(58);
  static const int TGuildWarMessageWithChatType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMessageWithChatType, chatmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMessageWithChatType, msgtype_),
  };
  TGuildWarMessageWithChatType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarMessageWithChatType_descriptor_,
      TGuildWarMessageWithChatType::default_instance_,
      TGuildWarMessageWithChatType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMessageWithChatType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMessageWithChatType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarMessageWithChatType));
  TGuildWarMessageNotify_descriptor_ = file->message_type(59);
  static const int TGuildWarMessageNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMessageNotify, messageinfo_),
  };
  TGuildWarMessageNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildWarMessageNotify_descriptor_,
      TGuildWarMessageNotify::default_instance_,
      TGuildWarMessageNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMessageNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildWarMessageNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildWarMessageNotify));
  EGuildWarStage_descriptor_ = file->enum_type(0);
  EGuildWarResult_descriptor_ = file->enum_type(1);
  EGuildWarMsgType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fGuildWar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarSingleMessage_descriptor_, &TGuildWarSingleMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarMessageInfo_descriptor_, &TGuildWarMessageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarTeamIdInfo_descriptor_, &TGuildWarTeamIdInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarTowerSimpleInfo_descriptor_, &TGuildWarTowerSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarFormation_descriptor_, &TGuildWarFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarTeamFormationInfo_descriptor_, &TGuildWarTeamFormationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarUserTeamInfo_descriptor_, &TGuildWarUserTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarUserHeroInheritInfo_descriptor_, &TGuildWarUserHeroInheritInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarUserInfo_descriptor_, &TGuildWarUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarOtherUserInfo_descriptor_, &TGuildWarOtherUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarFieldInfo_descriptor_, &TGuildWarFieldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarTeamBaseInfo_descriptor_, &TGuildWarTeamBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarTeamInfoWithHp_descriptor_, &TGuildWarTeamInfoWithHp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarHeroDetailInfo_descriptor_, &TGuildWarHeroDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarTeamDetailInfo_descriptor_, &TGuildWarTeamDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarBattleRecordInfo_descriptor_, &TGuildWarBattleRecordInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarRankInfo_descriptor_, &TGuildWarRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarStageInfo_descriptor_, &TGuildWarStageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetServerTeamInfoRsp_descriptor_, &TGuildWarGetServerTeamInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetStageInfoRsp_descriptor_, &TGuildWarGetStageInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarEnterFieldRsp_descriptor_, &TGuildWarEnterFieldRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetFieldInfoRsp_descriptor_, &TGuildWarGetFieldInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarSetTeamFormationReq_descriptor_, &TGuildWarSetTeamFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarSetTeamFormationRsp_descriptor_, &TGuildWarSetTeamFormationRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarSetCallForBattleHeroReq_descriptor_, &TGuildWarSetCallForBattleHeroReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarSetCallForBattleHeroRsp_descriptor_, &TGuildWarSetCallForBattleHeroRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarSetAttackFormationReq_descriptor_, &TGuildWarSetAttackFormationReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTowerInfoReq_descriptor_, &TGuildWarGetTowerInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTowerInfoRsp_descriptor_, &TGuildWarGetTowerInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTowerTeamInfoReq_descriptor_, &TGuildWarGetTowerTeamInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTowerTeamInfoRsp_descriptor_, &TGuildWarGetTowerTeamInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGarrisonTowerReq_descriptor_, &TGuildWarGarrisonTowerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarCancelGarrisonTowerReq_descriptor_, &TGuildWarCancelGarrisonTowerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetAllTeamInfoRsp_descriptor_, &TGuildWarGetAllTeamInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTeamInfoReq_descriptor_, &TGuildWarGetTeamInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTeamInfoRsp_descriptor_, &TGuildWarGetTeamInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarDeployTeamToTowerReq_descriptor_, &TGuildWarDeployTeamToTowerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetAllCallForBattleHeroInfoRsp_descriptor_, &TGuildWarGetAllCallForBattleHeroInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarSetCallForBattleHeroListReq_descriptor_, &TGuildWarSetCallForBattleHeroListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetCallForBattleRecordRsp_descriptor_, &TGuildWarGetCallForBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarAttackTowerTeamReq_descriptor_, &TGuildWarAttackTowerTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarAttackTowerTeamRsp_descriptor_, &TGuildWarAttackTowerTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarChooseBuffReq_descriptor_, &TGuildWarChooseBuffReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTowerBattleRecordReq_descriptor_, &TGuildWarGetTowerBattleRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTowerBattleRecordRsp_descriptor_, &TGuildWarGetTowerBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTeamBattleRecordReq_descriptor_, &TGuildWarGetTeamBattleRecordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTeamBattleRecordRsp_descriptor_, &TGuildWarGetTeamBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetSelfBattleRecordRsp_descriptor_, &TGuildWarGetSelfBattleRecordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTowerRewardReq_descriptor_, &TGuildWarGetTowerRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetTowerRewardRsp_descriptor_, &TGuildWarGetTowerRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetBuffListRsp_descriptor_, &TGuildWarGetBuffListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetFieldRankRsp_descriptor_, &TGuildWarGetFieldRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarGetEndRewardRsp_descriptor_, &TGuildWarGetEndRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarSendMsgReq_descriptor_, &TGuildWarSendMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarMoveReq_descriptor_, &TGuildWarMoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarUserMoveNotify_descriptor_, &TGuildWarUserMoveNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarStageNotify_descriptor_, &TGuildWarStageNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarTowerNotify_descriptor_, &TGuildWarTowerNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarMessageWithChatType_descriptor_, &TGuildWarMessageWithChatType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildWarMessageNotify_descriptor_, &TGuildWarMessageNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fGuildWar_2eproto() {
  delete TGuildWarSingleMessage::default_instance_;
  delete TGuildWarSingleMessage_reflection_;
  delete TGuildWarMessageInfo::default_instance_;
  delete TGuildWarMessageInfo_reflection_;
  delete TGuildWarTeamIdInfo::default_instance_;
  delete TGuildWarTeamIdInfo_reflection_;
  delete TGuildWarTowerSimpleInfo::default_instance_;
  delete TGuildWarTowerSimpleInfo_reflection_;
  delete TGuildWarFormation::default_instance_;
  delete TGuildWarFormation_reflection_;
  delete TGuildWarTeamFormationInfo::default_instance_;
  delete TGuildWarTeamFormationInfo_reflection_;
  delete TGuildWarUserTeamInfo::default_instance_;
  delete TGuildWarUserTeamInfo_reflection_;
  delete TGuildWarUserHeroInheritInfo::default_instance_;
  delete TGuildWarUserHeroInheritInfo_reflection_;
  delete TGuildWarUserInfo::default_instance_;
  delete TGuildWarUserInfo_reflection_;
  delete TGuildWarOtherUserInfo::default_instance_;
  delete TGuildWarOtherUserInfo_reflection_;
  delete TGuildWarFieldInfo::default_instance_;
  delete TGuildWarFieldInfo_reflection_;
  delete TGuildWarTeamBaseInfo::default_instance_;
  delete TGuildWarTeamBaseInfo_reflection_;
  delete TGuildWarTeamInfoWithHp::default_instance_;
  delete TGuildWarTeamInfoWithHp_reflection_;
  delete TGuildWarHeroDetailInfo::default_instance_;
  delete TGuildWarHeroDetailInfo_reflection_;
  delete TGuildWarTeamDetailInfo::default_instance_;
  delete TGuildWarTeamDetailInfo_reflection_;
  delete TGuildWarBattleRecordInfo::default_instance_;
  delete TGuildWarBattleRecordInfo_reflection_;
  delete TGuildWarRankInfo::default_instance_;
  delete TGuildWarRankInfo_reflection_;
  delete TGuildWarStageInfo::default_instance_;
  delete TGuildWarStageInfo_reflection_;
  delete TGuildWarGetServerTeamInfoRsp::default_instance_;
  delete TGuildWarGetServerTeamInfoRsp_reflection_;
  delete TGuildWarGetStageInfoRsp::default_instance_;
  delete TGuildWarGetStageInfoRsp_reflection_;
  delete TGuildWarEnterFieldRsp::default_instance_;
  delete TGuildWarEnterFieldRsp_reflection_;
  delete TGuildWarGetFieldInfoRsp::default_instance_;
  delete TGuildWarGetFieldInfoRsp_reflection_;
  delete TGuildWarSetTeamFormationReq::default_instance_;
  delete TGuildWarSetTeamFormationReq_reflection_;
  delete TGuildWarSetTeamFormationRsp::default_instance_;
  delete TGuildWarSetTeamFormationRsp_reflection_;
  delete TGuildWarSetCallForBattleHeroReq::default_instance_;
  delete TGuildWarSetCallForBattleHeroReq_reflection_;
  delete TGuildWarSetCallForBattleHeroRsp::default_instance_;
  delete TGuildWarSetCallForBattleHeroRsp_reflection_;
  delete TGuildWarSetAttackFormationReq::default_instance_;
  delete TGuildWarSetAttackFormationReq_reflection_;
  delete TGuildWarGetTowerInfoReq::default_instance_;
  delete TGuildWarGetTowerInfoReq_reflection_;
  delete TGuildWarGetTowerInfoRsp::default_instance_;
  delete TGuildWarGetTowerInfoRsp_reflection_;
  delete TGuildWarGetTowerTeamInfoReq::default_instance_;
  delete TGuildWarGetTowerTeamInfoReq_reflection_;
  delete TGuildWarGetTowerTeamInfoRsp::default_instance_;
  delete TGuildWarGetTowerTeamInfoRsp_reflection_;
  delete TGuildWarGarrisonTowerReq::default_instance_;
  delete TGuildWarGarrisonTowerReq_reflection_;
  delete TGuildWarCancelGarrisonTowerReq::default_instance_;
  delete TGuildWarCancelGarrisonTowerReq_reflection_;
  delete TGuildWarGetAllTeamInfoRsp::default_instance_;
  delete TGuildWarGetAllTeamInfoRsp_reflection_;
  delete TGuildWarGetTeamInfoReq::default_instance_;
  delete TGuildWarGetTeamInfoReq_reflection_;
  delete TGuildWarGetTeamInfoRsp::default_instance_;
  delete TGuildWarGetTeamInfoRsp_reflection_;
  delete TGuildWarDeployTeamToTowerReq::default_instance_;
  delete TGuildWarDeployTeamToTowerReq_reflection_;
  delete TGuildWarGetAllCallForBattleHeroInfoRsp::default_instance_;
  delete TGuildWarGetAllCallForBattleHeroInfoRsp_reflection_;
  delete TGuildWarSetCallForBattleHeroListReq::default_instance_;
  delete TGuildWarSetCallForBattleHeroListReq_reflection_;
  delete TGuildWarGetCallForBattleRecordRsp::default_instance_;
  delete TGuildWarGetCallForBattleRecordRsp_reflection_;
  delete TGuildWarAttackTowerTeamReq::default_instance_;
  delete TGuildWarAttackTowerTeamReq_reflection_;
  delete TGuildWarAttackTowerTeamRsp::default_instance_;
  delete TGuildWarAttackTowerTeamRsp_reflection_;
  delete TGuildWarChooseBuffReq::default_instance_;
  delete TGuildWarChooseBuffReq_reflection_;
  delete TGuildWarGetTowerBattleRecordReq::default_instance_;
  delete TGuildWarGetTowerBattleRecordReq_reflection_;
  delete TGuildWarGetTowerBattleRecordRsp::default_instance_;
  delete TGuildWarGetTowerBattleRecordRsp_reflection_;
  delete TGuildWarGetTeamBattleRecordReq::default_instance_;
  delete TGuildWarGetTeamBattleRecordReq_reflection_;
  delete TGuildWarGetTeamBattleRecordRsp::default_instance_;
  delete TGuildWarGetTeamBattleRecordRsp_reflection_;
  delete TGuildWarGetSelfBattleRecordRsp::default_instance_;
  delete TGuildWarGetSelfBattleRecordRsp_reflection_;
  delete TGuildWarGetTowerRewardReq::default_instance_;
  delete TGuildWarGetTowerRewardReq_reflection_;
  delete TGuildWarGetTowerRewardRsp::default_instance_;
  delete TGuildWarGetTowerRewardRsp_reflection_;
  delete TGuildWarGetBuffListRsp::default_instance_;
  delete TGuildWarGetBuffListRsp_reflection_;
  delete TGuildWarGetFieldRankRsp::default_instance_;
  delete TGuildWarGetFieldRankRsp_reflection_;
  delete TGuildWarGetEndRewardRsp::default_instance_;
  delete TGuildWarGetEndRewardRsp_reflection_;
  delete TGuildWarSendMsgReq::default_instance_;
  delete TGuildWarSendMsgReq_reflection_;
  delete TGuildWarMoveReq::default_instance_;
  delete TGuildWarMoveReq_reflection_;
  delete TGuildWarUserMoveNotify::default_instance_;
  delete TGuildWarUserMoveNotify_reflection_;
  delete TGuildWarStageNotify::default_instance_;
  delete TGuildWarStageNotify_reflection_;
  delete TGuildWarTowerNotify::default_instance_;
  delete TGuildWarTowerNotify_reflection_;
  delete TGuildWarMessageWithChatType::default_instance_;
  delete TGuildWarMessageWithChatType_reflection_;
  delete TGuildWarMessageNotify::default_instance_;
  delete TGuildWarMessageNotify_reflection_;
}

void protobuf_AddDesc_net_2fGuildWar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fChat_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022net/GuildWar.proto\022\002pb\032\016net/User.proto"
    "\032\026net/CommonReward.proto\032\020net/Battle.pro"
    "to\032\016net/Chat.proto\"T\n\026TGuildWarSingleMes"
    "sage\022\013\n\003Uid\030\001 \001(\004\022\013\n\003Msg\030\002 \001(\t\022\017\n\007MsgTim"
    "e\030\003 \001(\004\022\017\n\007MsgType\030\004 \001(\r\"r\n\024TGuildWarMes"
    "sageInfo\022*\n\006ArrMsg\030\001 \003(\0132\032.pb.TGuildWarS"
    "ingleMessage\022.\n\021ArrUserSimpleInfo\030\002 \003(\0132"
    "\023.pb.TUserSimpleInfo\"5\n\023TGuildWarTeamIdI"
    "nfo\022\013\n\003Uid\030\001 \001(\004\022\021\n\tTeamIndex\030\002 \001(\r\"A\n\030T"
    "GuildWarTowerSimpleInfo\022\017\n\007TowerId\030\001 \001(\r"
    "\022\024\n\014AliveTeamNum\030\002 \001(\r\".\n\022TGuildWarForma"
    "tion\022\013\n\003Hid\030\001 \001(\r\022\013\n\003Pos\030\002 \001(\r\"]\n\032TGuild"
    "WarTeamFormationInfo\022\021\n\tTeamIndex\030\001 \001(\r\022"
    ",\n\014ArrFormation\030\002 \003(\0132\026.pb.TGuildWarForm"
    "ation\"\201\001\n\025TGuildWarUserTeamInfo\022\021\n\tTeamI"
    "ndex\030\001 \001(\r\0220\n\013ArrHeroInfo\030\002 \003(\0132\033.pb.TGu"
    "ildWarHeroDetailInfo\022\022\n\nFightForce\030\003 \001(\004"
    "\022\017\n\007TowerId\030\004 \001(\r\"s\n\034TGuildWarUserHeroIn"
    "heritInfo\022\013\n\003Hid\030\001 \001(\r\022\020\n\010CurHpPer\030\002 \001(\r"
    "\022\017\n\007CurRage\030\003 \001(\r\022\023\n\013RecoverTime\030\004 \001(\004\022\016"
    "\n\006CdTime\030\005 \001(\004\"\364\002\n\021TGuildWarUserInfo\022\025\n\r"
    "IncAttackTime\030\001 \001(\004\022\021\n\tAttackNum\030\002 \001(\r\022\024"
    "\n\014IncAttackNum\030\003 \001(\r\0226\n\021CallForBattleHer"
    "o\030\004 \001(\0132\033.pb.TGuildWarHeroDetailInfo\022\030\n\020"
    "ArrNotPickedBuff\030\005 \003(\r\022.\n\013ArrTeamInfo\030\006 "
    "\003(\0132\031.pb.TGuildWarUserTeamInfo\0225\n\013ArrHer"
    "oInfo\030\007 \003(\0132 .pb.TGuildWarUserHeroInheri"
    "tInfo\0222\n\022ArrAttackFormation\030\010 \003(\0132\026.pb.T"
    "GuildWarFormation\022\031\n\021SendNormalMsgTime\030\t"
    " \001(\004\022\027\n\017SendGoldMsgTime\030\n \001(\004\"p\n\026TGuildW"
    "arOtherUserInfo\022\013\n\003Uid\030\001 \001(\004\022\013\n\003Pos\030\002 \001("
    "\r\022\017\n\007IsLeave\030\003 \001(\010\022+\n\016UserSimpleInfo\030\004 \001"
    "(\0132\023.pb.TUserSimpleInfo\"\357\002\n\022TGuildWarFie"
    "ldInfo\0222\n\014ArrTowerInfo\030\001 \003(\0132\034.pb.TGuild"
    "WarTowerSimpleInfo\022\'\n\010SelfInfo\030\003 \001(\0132\025.p"
    "b.TGuildWarUserInfo\0224\n\020ArrOtherUserInfo\030"
    "\004 \003(\0132\032.pb.TGuildWarOtherUserInfo\0220\n\016Not"
    "ReadMsgInfo\030\005 \001(\0132\030.pb.TGuildWarMessageI"
    "nfo\0221\n\014ArrHeroInfo1\030\006 \003(\0132\033.pb.TGuildWar"
    "HeroDetailInfo\0221\n\014ArrHeroInfo2\030\007 \003(\0132\033.p"
    "b.TGuildWarHeroDetailInfo\022.\n\021ArrUserSimp"
    "leInfo\030\010 \003(\0132\023.pb.TUserSimpleInfo\"\215\001\n\025TG"
    "uildWarTeamBaseInfo\022+\n\nTeamIdInfo\030\001 \001(\0132"
    "\027.pb.TGuildWarTeamIdInfo\022\022\n\nFightForce\030\002"
    " \001(\004\022\017\n\007TowerId\030\003 \001(\r\022\014\n\004Htid\030\004 \001(\r\022\024\n\014B"
    "attleInfoId\030\005 \001(\r\"\\\n\027TGuildWarTeamInfoWi"
    "thHp\022/\n\014TeamBaseInfo\030\001 \001(\0132\031.pb.TGuildWa"
    "rTeamBaseInfo\022\020\n\010CurHpPer\030\002 \001(\r\"\263\001\n\027TGui"
    "ldWarHeroDetailInfo\022\013\n\003Uid\030\001 \001(\004\022\013\n\003Hid\030"
    "\002 \001(\r\022\013\n\003Pos\030\003 \001(\r\022\014\n\004Htid\030\004 \001(\r\022\r\n\005Leve"
    "l\030\005 \001(\r\022\016\n\006StarLv\030\006 \001(\r\022\r\n\005AdvLv\030\007 \001(\r\022\020"
    "\n\010CurHpPer\030\010 \001(\r\022\017\n\007CurRage\030\t \001(\r\022\022\n\nFig"
    "htForce\030\n \001(\004\"\251\001\n\027TGuildWarTeamDetailInf"
    "o\022/\n\014TeamBaseInfo\030\001 \001(\0132\031.pb.TGuildWarTe"
    "amBaseInfo\0221\n\014ArrFormation\030\002 \003(\0132\033.pb.TG"
    "uildWarHeroDetailInfo\022\023\n\013AttackedNum\030\003 \001"
    "(\r\022\025\n\rReducedMorale\030\004 \001(\r\"\222\002\n\031TGuildWarB"
    "attleRecordInfo\022\021\n\tAttackUid\030\001 \001(\004\022\022\n\nDe"
    "fenseUid\030\002 \001(\004\022\017\n\007TowerId\030\003 \001(\r\022\021\n\tTeamI"
    "ndex\030\004 \001(\r\022\030\n\020AttackFightForce\030\005 \001(\004\022\031\n\021"
    "DefenseFightForce\030\006 \001(\004\022\022\n\nRecordTime\030\007 "
    "\001(\004\022\017\n\007Success\030\010 \001(\r\022\013\n\003Rid\030\t \001(\004\022\025\n\rAtt"
    "ackGuildId\030\n \001(\004\022\026\n\016DefenseGuildId\030\013 \001(\004"
    "\022\024\n\014BattleInfoId\030\014 \001(\r\"n\n\021TGuildWarRankI"
    "nfo\022\013\n\003Uid\030\001 \001(\004\022\021\n\tDefeatNum\030\002 \001(\r\022\022\n\nD"
    "efeatTime\030\003 \001(\004\022\021\n\tDamageNum\030\004 \001(\004\022\022\n\nDa"
    "mageTime\030\005 \001(\004\"\213\004\n\022TGuildWarStageInfo\022$\n"
    "\010CurStage\030\001 \001(\0162\022.pb.EGuildWarStage\022\021\n\tB"
    "eginTime\030\002 \001(\004\022\017\n\007EndTime\030\003 \001(\004\022\022\n\nSignU"
    "pTime\030\004 \001(\004\022\022\n\nSelfGLevel\030\005 \001(\r\022\020\n\010SelfG"
    "Pos\030\006 \001(\r\022\021\n\tTargetGid\030\007 \001(\004\022\023\n\013TargetGN"
    "ame\030\010 \001(\t\022\026\n\016TargetServerId\030\t \001(\t\022\024\n\014Tar"
    "getGLevel\030\n \001(\r\0223\n\026ArrCallForBattleResul"
    "t\030\013 \003(\0162\023.pb.EGuildWarResult\022+\n\016GuildWar"
    "Result\030\014 \001(\0162\023.pb.EGuildWarResult\022\017\n\007Sce"
    "neId\030\r \001(\t\022\030\n\020SurplusAttackNum\030\016 \001(\r\022\036\n\026"
    "IsSetCallForBattleHero\030\017 \001(\010\0226\n\020ArrSelfT"
    "owerInfo\030\020 \003(\0132\034.pb.TGuildWarTowerSimple"
    "Info\0226\n\023ArrSelfTeamBaseInfo\030\021 \003(\0132\031.pb.T"
    "GuildWarTeamBaseInfo\"D\n\035TGuildWarGetServ"
    "erTeamInfoRsp\022\016\n\006TeamId\030\001 \001(\r\022\023\n\013NeedOpe"
    "nDay\030\002 \001(\r\"E\n\030TGuildWarGetStageInfoRsp\022)"
    "\n\tStageInfo\030\001 \001(\0132\026.pb.TGuildWarStageInf"
    "o\"C\n\026TGuildWarEnterFieldRsp\022)\n\tFieldInfo"
    "\030\001 \001(\0132\026.pb.TGuildWarFieldInfo\"E\n\030TGuild"
    "WarGetFieldInfoRsp\022)\n\tFieldInfo\030\001 \001(\0132\026."
    "pb.TGuildWarFieldInfo\"l\n\034TGuildWarSetTea"
    "mFormationReq\0228\n\020ArrTeamFormation\030\001 \003(\0132"
    "\036.pb.TGuildWarTeamFormationInfo\022\022\n\nUseHi"
    "story\030\002 \001(\010\"N\n\034TGuildWarSetTeamFormation"
    "Rsp\022.\n\013ArrTeamInfo\030\001 \003(\0132\031.pb.TGuildWarU"
    "serTeamInfo\"/\n TGuildWarSetCallForBattle"
    "HeroReq\022\013\n\003Hid\030\001 \001(\r\"Z\n TGuildWarSetCall"
    "ForBattleHeroRsp\0226\n\021CallForBattleHero\030\001 "
    "\001(\0132\033.pb.TGuildWarHeroDetailInfo\"N\n\036TGui"
    "ldWarSetAttackFormationReq\022,\n\014ArrFormati"
    "on\030\001 \003(\0132\026.pb.TGuildWarFormation\"+\n\030TGui"
    "ldWarGetTowerInfoReq\022\017\n\007TowerId\030\001 \001(\r\"\215\001"
    "\n\030TGuildWarGetTowerInfoRsp\022\017\n\007TowerId\030\001 "
    "\001(\r\0220\n\013ArrTeamInfo\030\002 \003(\0132\033.pb.TGuildWarT"
    "eamInfoWithHp\022.\n\021ArrUserSimpleInfo\030\003 \003(\013"
    "2\023.pb.TUserSimpleInfo\"\\\n\034TGuildWarGetTow"
    "erTeamInfoReq\022\017\n\007TowerId\030\001 \001(\r\022+\n\nTeamId"
    "Info\030\002 \001(\0132\027.pb.TGuildWarTeamIdInfo\"M\n\034T"
    "GuildWarGetTowerTeamInfoRsp\022-\n\010TeamInfo\030"
    "\001 \001(\0132\033.pb.TGuildWarTeamDetailInfo\"\215\001\n\031T"
    "GuildWarGarrisonTowerReq\022\017\n\007TowerId\030\001 \001("
    "\r\022+\n\nTeamIdInfo\030\002 \001(\0132\027.pb.TGuildWarTeam"
    "IdInfo\0222\n\021ReplaceTeamIdInfo\030\003 \001(\0132\027.pb.T"
    "GuildWarTeamIdInfo\"_\n\037TGuildWarCancelGar"
    "risonTowerReq\022\017\n\007TowerId\030\001 \001(\r\022+\n\nTeamId"
    "Info\030\002 \001(\0132\027.pb.TGuildWarTeamIdInfo\"\200\001\n\032"
    "TGuildWarGetAllTeamInfoRsp\0222\n\017ArrTeamBas"
    "eInfo\030\001 \003(\0132\031.pb.TGuildWarTeamBaseInfo\022."
    "\n\021ArrUserSimpleInfo\030\002 \003(\0132\023.pb.TUserSimp"
    "leInfo\"F\n\027TGuildWarGetTeamInfoReq\022+\n\nTea"
    "mIdInfo\030\001 \001(\0132\027.pb.TGuildWarTeamIdInfo\"H"
    "\n\027TGuildWarGetTeamInfoRsp\022-\n\010TeamInfo\030\001 "
    "\001(\0132\033.pb.TGuildWarTeamDetailInfo\"\221\001\n\035TGu"
    "ildWarDeployTeamToTowerReq\022\017\n\007TowerId\030\001 "
    "\001(\r\022+\n\nTeamIdInfo\030\002 \001(\0132\027.pb.TGuildWarTe"
    "amIdInfo\0222\n\021ReplaceTeamIdInfo\030\003 \001(\0132\027.pb"
    ".TGuildWarTeamIdInfo\"\233\001\n\'TGuildWarGetAll"
    "CallForBattleHeroInfoRsp\0220\n\013ArrHeroInfo\030"
    "\001 \003(\0132\033.pb.TGuildWarHeroDetailInfo\022.\n\021Ar"
    "rUserSimpleInfo\030\002 \003(\0132\023.pb.TUserSimpleIn"
    "fo\022\016\n\006ArrUid\030\003 \003(\004\"6\n$TGuildWarSetCallFo"
    "rBattleHeroListReq\022\016\n\006ArrUid\030\001 \003(\004\"\360\001\n\"T"
    "GuildWarGetCallForBattleRecordRsp\0224\n\rArr"
    "RecordInfo\030\001 \003(\0132\035.pb.TGuildWarBattleRec"
    "ordInfo\0221\n\014ArrHeroInfo1\030\002 \003(\0132\033.pb.TGuil"
    "dWarHeroDetailInfo\0221\n\014ArrHeroInfo2\030\003 \003(\013"
    "2\033.pb.TGuildWarHeroDetailInfo\022.\n\021ArrUser"
    "SimpleInfo\030\004 \003(\0132\023.pb.TUserSimpleInfo\"\211\001"
    "\n\033TGuildWarAttackTowerTeamReq\022\017\n\007TowerId"
    "\030\001 \001(\r\022+\n\nTeamIdInfo\030\002 \001(\0132\027.pb.TGuildWa"
    "rTeamIdInfo\022,\n\014ArrFormation\030\003 \003(\0132\026.pb.T"
    "GuildWarFormation\"\245\001\n\033TGuildWarAttackTow"
    "erTeamRsp\022$\n\tBattleRet\030\001 \001(\0132\021.pb.TBattl"
    "eResult\022\017\n\007Success\030\002 \001(\r\022\030\n\020ArrNotPicked"
    "Buff\030\003 \003(\r\0225\n\013ArrHeroInfo\030\004 \003(\0132 .pb.TGu"
    "ildWarUserHeroInheritInfo\"(\n\026TGuildWarCh"
    "ooseBuffReq\022\016\n\006BuffId\030\001 \001(\r\"3\n TGuildWar"
    "GetTowerBattleRecordReq\022\017\n\007TowerId\030\001 \001(\r"
    "\"\210\001\n TGuildWarGetTowerBattleRecordRsp\0224\n"
    "\rArrRecordInfo\030\001 \003(\0132\035.pb.TGuildWarBattl"
    "eRecordInfo\022.\n\021ArrUserSimpleInfo\030\002 \003(\0132\023"
    ".pb.TUserSimpleInfo\"_\n\037TGuildWarGetTeamB"
    "attleRecordReq\022\017\n\007TowerId\030\001 \001(\r\022+\n\nTeamI"
    "dInfo\030\002 \001(\0132\027.pb.TGuildWarTeamIdInfo\"\207\001\n"
    "\037TGuildWarGetTeamBattleRecordRsp\0224\n\rArrR"
    "ecordInfo\030\001 \003(\0132\035.pb.TGuildWarBattleReco"
    "rdInfo\022.\n\021ArrUserSimpleInfo\030\002 \003(\0132\023.pb.T"
    "UserSimpleInfo\"\207\001\n\037TGuildWarGetSelfBattl"
    "eRecordRsp\0224\n\rArrRecordInfo\030\001 \003(\0132\035.pb.T"
    "GuildWarBattleRecordInfo\022.\n\021ArrUserSimpl"
    "eInfo\030\002 \003(\0132\023.pb.TUserSimpleInfo\"-\n\032TGui"
    "ldWarGetTowerRewardReq\022\017\n\007TowerId\030\001 \001(\r\""
    "D\n\032TGuildWarGetTowerRewardRsp\022&\n\013RewardA"
    "rray\030\001 \003(\0132\021.pb.TCommonReward\"*\n\027TGuildW"
    "arGetBuffListRsp\022\017\n\007ArrBuff\030\001 \003(\r\"r\n\030TGu"
    "ildWarGetFieldRankRsp\022&\n\007ArrRank\030\001 \003(\0132\025"
    ".pb.TGuildWarRankInfo\022.\n\021ArrUserSimpleIn"
    "fo\030\002 \003(\0132\023.pb.TUserSimpleInfo\"B\n\030TGuildW"
    "arGetEndRewardRsp\022&\n\013RewardArray\030\001 \003(\0132\021"
    ".pb.TCommonReward\"I\n\023TGuildWarSendMsgReq"
    "\022%\n\007MsgType\030\001 \001(\0162\024.pb.EGuildWarMsgType\022"
    "\013\n\003Msg\030\002 \001(\t\"%\n\020TGuildWarMoveReq\022\021\n\tTarg"
    "etPos\030\001 \001(\r\"L\n\027TGuildWarUserMoveNotify\0221"
    "\n\rOtherUserInfo\030\001 \001(\0132\032.pb.TGuildWarOthe"
    "rUserInfo\"A\n\024TGuildWarStageNotify\022)\n\tSta"
    "geInfo\030\001 \001(\0132\026.pb.TGuildWarStageInfo\"J\n\024"
    "TGuildWarTowerNotify\0222\n\014ArrTowerInfo\030\001 \003"
    "(\0132\034.pb.TGuildWarTowerSimpleInfo\"l\n\034TGui"
    "ldWarMessageWithChatType\022%\n\013ChatMessage\030"
    "\001 \001(\0132\020.pb.TChatMessage\022%\n\007MsgType\030\002 \001(\016"
    "2\024.pb.EGuildWarMsgType\"O\n\026TGuildWarMessa"
    "geNotify\0225\n\013MessageInfo\030\001 \001(\0132 .pb.TGuil"
    "dWarMessageWithChatType*\353\001\n\016EGuildWarSta"
    "ge\022\016\n\nSTAGE_IDLE\020\000\022\017\n\013STAGE_GROUP\020\001\022\021\n\rS"
    "TAGE_SIGN_UP\020\002\022\017\n\013STAGE_MATCH\020\003\022\031\n\025STAGE"
    "_MEMBER_GARRISON\020\004\022\022\n\016STAGE_AUTO_SET\020\005\022\027"
    "\n\023STAGE_LEADER_ADJUST\020\006\022\031\n\025STAGE_CALL_FO"
    "R_BATTLE\020\007\022\020\n\014STAGE_BATTLE\020\010\022\r\n\tSTAGE_EN"
    "D\020\t\022\020\n\014STAGE_REWARD\020\n*V\n\017EGuildWarResult"
    "\022\017\n\013RESULT_NONE\020\000\022\016\n\nRESULT_WIN\020\001\022\021\n\rRES"
    "ULT_DEFEAT\020\002\022\017\n\013RESULT_DRAW\020\003*0\n\020EGuildW"
    "arMsgType\022\016\n\nMSG_NORMAL\020\001\022\014\n\010MSG_GOLD\020\002", 7519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/GuildWar.proto", &protobuf_RegisterTypes);
  TGuildWarSingleMessage::default_instance_ = new TGuildWarSingleMessage();
  TGuildWarMessageInfo::default_instance_ = new TGuildWarMessageInfo();
  TGuildWarTeamIdInfo::default_instance_ = new TGuildWarTeamIdInfo();
  TGuildWarTowerSimpleInfo::default_instance_ = new TGuildWarTowerSimpleInfo();
  TGuildWarFormation::default_instance_ = new TGuildWarFormation();
  TGuildWarTeamFormationInfo::default_instance_ = new TGuildWarTeamFormationInfo();
  TGuildWarUserTeamInfo::default_instance_ = new TGuildWarUserTeamInfo();
  TGuildWarUserHeroInheritInfo::default_instance_ = new TGuildWarUserHeroInheritInfo();
  TGuildWarUserInfo::default_instance_ = new TGuildWarUserInfo();
  TGuildWarOtherUserInfo::default_instance_ = new TGuildWarOtherUserInfo();
  TGuildWarFieldInfo::default_instance_ = new TGuildWarFieldInfo();
  TGuildWarTeamBaseInfo::default_instance_ = new TGuildWarTeamBaseInfo();
  TGuildWarTeamInfoWithHp::default_instance_ = new TGuildWarTeamInfoWithHp();
  TGuildWarHeroDetailInfo::default_instance_ = new TGuildWarHeroDetailInfo();
  TGuildWarTeamDetailInfo::default_instance_ = new TGuildWarTeamDetailInfo();
  TGuildWarBattleRecordInfo::default_instance_ = new TGuildWarBattleRecordInfo();
  TGuildWarRankInfo::default_instance_ = new TGuildWarRankInfo();
  TGuildWarStageInfo::default_instance_ = new TGuildWarStageInfo();
  TGuildWarGetServerTeamInfoRsp::default_instance_ = new TGuildWarGetServerTeamInfoRsp();
  TGuildWarGetStageInfoRsp::default_instance_ = new TGuildWarGetStageInfoRsp();
  TGuildWarEnterFieldRsp::default_instance_ = new TGuildWarEnterFieldRsp();
  TGuildWarGetFieldInfoRsp::default_instance_ = new TGuildWarGetFieldInfoRsp();
  TGuildWarSetTeamFormationReq::default_instance_ = new TGuildWarSetTeamFormationReq();
  TGuildWarSetTeamFormationRsp::default_instance_ = new TGuildWarSetTeamFormationRsp();
  TGuildWarSetCallForBattleHeroReq::default_instance_ = new TGuildWarSetCallForBattleHeroReq();
  TGuildWarSetCallForBattleHeroRsp::default_instance_ = new TGuildWarSetCallForBattleHeroRsp();
  TGuildWarSetAttackFormationReq::default_instance_ = new TGuildWarSetAttackFormationReq();
  TGuildWarGetTowerInfoReq::default_instance_ = new TGuildWarGetTowerInfoReq();
  TGuildWarGetTowerInfoRsp::default_instance_ = new TGuildWarGetTowerInfoRsp();
  TGuildWarGetTowerTeamInfoReq::default_instance_ = new TGuildWarGetTowerTeamInfoReq();
  TGuildWarGetTowerTeamInfoRsp::default_instance_ = new TGuildWarGetTowerTeamInfoRsp();
  TGuildWarGarrisonTowerReq::default_instance_ = new TGuildWarGarrisonTowerReq();
  TGuildWarCancelGarrisonTowerReq::default_instance_ = new TGuildWarCancelGarrisonTowerReq();
  TGuildWarGetAllTeamInfoRsp::default_instance_ = new TGuildWarGetAllTeamInfoRsp();
  TGuildWarGetTeamInfoReq::default_instance_ = new TGuildWarGetTeamInfoReq();
  TGuildWarGetTeamInfoRsp::default_instance_ = new TGuildWarGetTeamInfoRsp();
  TGuildWarDeployTeamToTowerReq::default_instance_ = new TGuildWarDeployTeamToTowerReq();
  TGuildWarGetAllCallForBattleHeroInfoRsp::default_instance_ = new TGuildWarGetAllCallForBattleHeroInfoRsp();
  TGuildWarSetCallForBattleHeroListReq::default_instance_ = new TGuildWarSetCallForBattleHeroListReq();
  TGuildWarGetCallForBattleRecordRsp::default_instance_ = new TGuildWarGetCallForBattleRecordRsp();
  TGuildWarAttackTowerTeamReq::default_instance_ = new TGuildWarAttackTowerTeamReq();
  TGuildWarAttackTowerTeamRsp::default_instance_ = new TGuildWarAttackTowerTeamRsp();
  TGuildWarChooseBuffReq::default_instance_ = new TGuildWarChooseBuffReq();
  TGuildWarGetTowerBattleRecordReq::default_instance_ = new TGuildWarGetTowerBattleRecordReq();
  TGuildWarGetTowerBattleRecordRsp::default_instance_ = new TGuildWarGetTowerBattleRecordRsp();
  TGuildWarGetTeamBattleRecordReq::default_instance_ = new TGuildWarGetTeamBattleRecordReq();
  TGuildWarGetTeamBattleRecordRsp::default_instance_ = new TGuildWarGetTeamBattleRecordRsp();
  TGuildWarGetSelfBattleRecordRsp::default_instance_ = new TGuildWarGetSelfBattleRecordRsp();
  TGuildWarGetTowerRewardReq::default_instance_ = new TGuildWarGetTowerRewardReq();
  TGuildWarGetTowerRewardRsp::default_instance_ = new TGuildWarGetTowerRewardRsp();
  TGuildWarGetBuffListRsp::default_instance_ = new TGuildWarGetBuffListRsp();
  TGuildWarGetFieldRankRsp::default_instance_ = new TGuildWarGetFieldRankRsp();
  TGuildWarGetEndRewardRsp::default_instance_ = new TGuildWarGetEndRewardRsp();
  TGuildWarSendMsgReq::default_instance_ = new TGuildWarSendMsgReq();
  TGuildWarMoveReq::default_instance_ = new TGuildWarMoveReq();
  TGuildWarUserMoveNotify::default_instance_ = new TGuildWarUserMoveNotify();
  TGuildWarStageNotify::default_instance_ = new TGuildWarStageNotify();
  TGuildWarTowerNotify::default_instance_ = new TGuildWarTowerNotify();
  TGuildWarMessageWithChatType::default_instance_ = new TGuildWarMessageWithChatType();
  TGuildWarMessageNotify::default_instance_ = new TGuildWarMessageNotify();
  TGuildWarSingleMessage::default_instance_->InitAsDefaultInstance();
  TGuildWarMessageInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarTeamIdInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarTowerSimpleInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarFormation::default_instance_->InitAsDefaultInstance();
  TGuildWarTeamFormationInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarUserTeamInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarUserHeroInheritInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarUserInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarOtherUserInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarFieldInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarTeamBaseInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarTeamInfoWithHp::default_instance_->InitAsDefaultInstance();
  TGuildWarHeroDetailInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarTeamDetailInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarBattleRecordInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarRankInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarStageInfo::default_instance_->InitAsDefaultInstance();
  TGuildWarGetServerTeamInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarGetStageInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarEnterFieldRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarGetFieldInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarSetTeamFormationReq::default_instance_->InitAsDefaultInstance();
  TGuildWarSetTeamFormationRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarSetCallForBattleHeroReq::default_instance_->InitAsDefaultInstance();
  TGuildWarSetCallForBattleHeroRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarSetAttackFormationReq::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTowerInfoReq::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTowerInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTowerTeamInfoReq::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTowerTeamInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarGarrisonTowerReq::default_instance_->InitAsDefaultInstance();
  TGuildWarCancelGarrisonTowerReq::default_instance_->InitAsDefaultInstance();
  TGuildWarGetAllTeamInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTeamInfoReq::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTeamInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarDeployTeamToTowerReq::default_instance_->InitAsDefaultInstance();
  TGuildWarGetAllCallForBattleHeroInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarSetCallForBattleHeroListReq::default_instance_->InitAsDefaultInstance();
  TGuildWarGetCallForBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarAttackTowerTeamReq::default_instance_->InitAsDefaultInstance();
  TGuildWarAttackTowerTeamRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarChooseBuffReq::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTowerBattleRecordReq::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTowerBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTeamBattleRecordReq::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTeamBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarGetSelfBattleRecordRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTowerRewardReq::default_instance_->InitAsDefaultInstance();
  TGuildWarGetTowerRewardRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarGetBuffListRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarGetFieldRankRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarGetEndRewardRsp::default_instance_->InitAsDefaultInstance();
  TGuildWarSendMsgReq::default_instance_->InitAsDefaultInstance();
  TGuildWarMoveReq::default_instance_->InitAsDefaultInstance();
  TGuildWarUserMoveNotify::default_instance_->InitAsDefaultInstance();
  TGuildWarStageNotify::default_instance_->InitAsDefaultInstance();
  TGuildWarTowerNotify::default_instance_->InitAsDefaultInstance();
  TGuildWarMessageWithChatType::default_instance_->InitAsDefaultInstance();
  TGuildWarMessageNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fGuildWar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fGuildWar_2eproto {
  StaticDescriptorInitializer_net_2fGuildWar_2eproto() {
    protobuf_AddDesc_net_2fGuildWar_2eproto();
  }
} static_descriptor_initializer_net_2fGuildWar_2eproto_;
const ::google::protobuf::EnumDescriptor* EGuildWarStage_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildWarStage_descriptor_;
}
bool EGuildWarStage_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildWarResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildWarResult_descriptor_;
}
bool EGuildWarResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildWarMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildWarMsgType_descriptor_;
}
bool EGuildWarMsgType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarSingleMessage::kUidFieldNumber;
const int TGuildWarSingleMessage::kMsgFieldNumber;
const int TGuildWarSingleMessage::kMsgTimeFieldNumber;
const int TGuildWarSingleMessage::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

TGuildWarSingleMessage::TGuildWarSingleMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarSingleMessage)
}

void TGuildWarSingleMessage::InitAsDefaultInstance() {
}

TGuildWarSingleMessage::TGuildWarSingleMessage(const TGuildWarSingleMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarSingleMessage)
}

void TGuildWarSingleMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtime_ = GOOGLE_ULONGLONG(0);
  msgtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarSingleMessage::~TGuildWarSingleMessage() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarSingleMessage)
  SharedDtor();
}

void TGuildWarSingleMessage::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void TGuildWarSingleMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarSingleMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarSingleMessage_descriptor_;
}

const TGuildWarSingleMessage& TGuildWarSingleMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarSingleMessage* TGuildWarSingleMessage::default_instance_ = NULL;

TGuildWarSingleMessage* TGuildWarSingleMessage::New() const {
  return new TGuildWarSingleMessage;
}

void TGuildWarSingleMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarSingleMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(msgtime_, msgtype_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarSingleMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarSingleMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }

      // optional string Msg = 2;
      case 2: {
        if (tag == 18) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MsgTime;
        break;
      }

      // optional uint64 MsgTime = 3;
      case 3: {
        if (tag == 24) {
         parse_MsgTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgtime_)));
          set_has_msgtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MsgType;
        break;
      }

      // optional uint32 MsgType = 4;
      case 4: {
        if (tag == 32) {
         parse_MsgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarSingleMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarSingleMessage)
  return false;
#undef DO_
}

void TGuildWarSingleMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarSingleMessage)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // optional uint64 MsgTime = 3;
  if (has_msgtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msgtime(), output);
  }

  // optional uint32 MsgType = 4;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarSingleMessage)
}

::google::protobuf::uint8* TGuildWarSingleMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarSingleMessage)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional uint64 MsgTime = 3;
  if (has_msgtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msgtime(), target);
  }

  // optional uint32 MsgType = 4;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarSingleMessage)
  return target;
}

int TGuildWarSingleMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional uint64 MsgTime = 3;
    if (has_msgtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgtime());
    }

    // optional uint32 MsgType = 4;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarSingleMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarSingleMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarSingleMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarSingleMessage::MergeFrom(const TGuildWarSingleMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_msgtime()) {
      set_msgtime(from.msgtime());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarSingleMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarSingleMessage::CopyFrom(const TGuildWarSingleMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarSingleMessage::IsInitialized() const {

  return true;
}

void TGuildWarSingleMessage::Swap(TGuildWarSingleMessage* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(msg_, other->msg_);
    std::swap(msgtime_, other->msgtime_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarSingleMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarSingleMessage_descriptor_;
  metadata.reflection = TGuildWarSingleMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarMessageInfo::kArrMsgFieldNumber;
const int TGuildWarMessageInfo::kArrUserSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarMessageInfo::TGuildWarMessageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarMessageInfo)
}

void TGuildWarMessageInfo::InitAsDefaultInstance() {
}

TGuildWarMessageInfo::TGuildWarMessageInfo(const TGuildWarMessageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarMessageInfo)
}

void TGuildWarMessageInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarMessageInfo::~TGuildWarMessageInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarMessageInfo)
  SharedDtor();
}

void TGuildWarMessageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarMessageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarMessageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarMessageInfo_descriptor_;
}

const TGuildWarMessageInfo& TGuildWarMessageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarMessageInfo* TGuildWarMessageInfo::default_instance_ = NULL;

TGuildWarMessageInfo* TGuildWarMessageInfo::New() const {
  return new TGuildWarMessageInfo;
}

void TGuildWarMessageInfo::Clear() {
  arrmsg_.Clear();
  arrusersimpleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarMessageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarMessageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarSingleMessage ArrMsg = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrMsg;
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrUserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrusersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarMessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarMessageInfo)
  return false;
#undef DO_
}

void TGuildWarMessageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarMessageInfo)
  // repeated .pb.TGuildWarSingleMessage ArrMsg = 1;
  for (int i = 0; i < this->arrmsg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrmsg(i), output);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrusersimpleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarMessageInfo)
}

::google::protobuf::uint8* TGuildWarMessageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarMessageInfo)
  // repeated .pb.TGuildWarSingleMessage ArrMsg = 1;
  for (int i = 0; i < this->arrmsg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrmsg(i), target);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrusersimpleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarMessageInfo)
  return target;
}

int TGuildWarMessageInfo::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWarSingleMessage ArrMsg = 1;
  total_size += 1 * this->arrmsg_size();
  for (int i = 0; i < this->arrmsg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrmsg(i));
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  total_size += 1 * this->arrusersimpleinfo_size();
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrusersimpleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarMessageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarMessageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarMessageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarMessageInfo::MergeFrom(const TGuildWarMessageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrmsg_.MergeFrom(from.arrmsg_);
  arrusersimpleinfo_.MergeFrom(from.arrusersimpleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarMessageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarMessageInfo::CopyFrom(const TGuildWarMessageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarMessageInfo::IsInitialized() const {

  return true;
}

void TGuildWarMessageInfo::Swap(TGuildWarMessageInfo* other) {
  if (other != this) {
    arrmsg_.Swap(&other->arrmsg_);
    arrusersimpleinfo_.Swap(&other->arrusersimpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarMessageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarMessageInfo_descriptor_;
  metadata.reflection = TGuildWarMessageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarTeamIdInfo::kUidFieldNumber;
const int TGuildWarTeamIdInfo::kTeamIndexFieldNumber;
#endif  // !_MSC_VER

TGuildWarTeamIdInfo::TGuildWarTeamIdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarTeamIdInfo)
}

void TGuildWarTeamIdInfo::InitAsDefaultInstance() {
}

TGuildWarTeamIdInfo::TGuildWarTeamIdInfo(const TGuildWarTeamIdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarTeamIdInfo)
}

void TGuildWarTeamIdInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  teamindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarTeamIdInfo::~TGuildWarTeamIdInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarTeamIdInfo)
  SharedDtor();
}

void TGuildWarTeamIdInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarTeamIdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarTeamIdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarTeamIdInfo_descriptor_;
}

const TGuildWarTeamIdInfo& TGuildWarTeamIdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarTeamIdInfo* TGuildWarTeamIdInfo::default_instance_ = NULL;

TGuildWarTeamIdInfo* TGuildWarTeamIdInfo::New() const {
  return new TGuildWarTeamIdInfo;
}

void TGuildWarTeamIdInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarTeamIdInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, teamindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarTeamIdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarTeamIdInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TeamIndex;
        break;
      }

      // optional uint32 TeamIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_TeamIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamindex_)));
          set_has_teamindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarTeamIdInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarTeamIdInfo)
  return false;
#undef DO_
}

void TGuildWarTeamIdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarTeamIdInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 TeamIndex = 2;
  if (has_teamindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarTeamIdInfo)
}

::google::protobuf::uint8* TGuildWarTeamIdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarTeamIdInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 TeamIndex = 2;
  if (has_teamindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarTeamIdInfo)
  return target;
}

int TGuildWarTeamIdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 TeamIndex = 2;
    if (has_teamindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarTeamIdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarTeamIdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarTeamIdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarTeamIdInfo::MergeFrom(const TGuildWarTeamIdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_teamindex()) {
      set_teamindex(from.teamindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarTeamIdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarTeamIdInfo::CopyFrom(const TGuildWarTeamIdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarTeamIdInfo::IsInitialized() const {

  return true;
}

void TGuildWarTeamIdInfo::Swap(TGuildWarTeamIdInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(teamindex_, other->teamindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarTeamIdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarTeamIdInfo_descriptor_;
  metadata.reflection = TGuildWarTeamIdInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarTowerSimpleInfo::kTowerIdFieldNumber;
const int TGuildWarTowerSimpleInfo::kAliveTeamNumFieldNumber;
#endif  // !_MSC_VER

TGuildWarTowerSimpleInfo::TGuildWarTowerSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarTowerSimpleInfo)
}

void TGuildWarTowerSimpleInfo::InitAsDefaultInstance() {
}

TGuildWarTowerSimpleInfo::TGuildWarTowerSimpleInfo(const TGuildWarTowerSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarTowerSimpleInfo)
}

void TGuildWarTowerSimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  towerid_ = 0u;
  aliveteamnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarTowerSimpleInfo::~TGuildWarTowerSimpleInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarTowerSimpleInfo)
  SharedDtor();
}

void TGuildWarTowerSimpleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarTowerSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarTowerSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarTowerSimpleInfo_descriptor_;
}

const TGuildWarTowerSimpleInfo& TGuildWarTowerSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarTowerSimpleInfo* TGuildWarTowerSimpleInfo::default_instance_ = NULL;

TGuildWarTowerSimpleInfo* TGuildWarTowerSimpleInfo::New() const {
  return new TGuildWarTowerSimpleInfo;
}

void TGuildWarTowerSimpleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarTowerSimpleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(towerid_, aliveteamnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarTowerSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarTowerSimpleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AliveTeamNum;
        break;
      }

      // optional uint32 AliveTeamNum = 2;
      case 2: {
        if (tag == 16) {
         parse_AliveTeamNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &aliveteamnum_)));
          set_has_aliveteamnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarTowerSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarTowerSimpleInfo)
  return false;
#undef DO_
}

void TGuildWarTowerSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarTowerSimpleInfo)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerid(), output);
  }

  // optional uint32 AliveTeamNum = 2;
  if (has_aliveteamnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->aliveteamnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarTowerSimpleInfo)
}

::google::protobuf::uint8* TGuildWarTowerSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarTowerSimpleInfo)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerid(), target);
  }

  // optional uint32 AliveTeamNum = 2;
  if (has_aliveteamnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->aliveteamnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarTowerSimpleInfo)
  return target;
}

int TGuildWarTowerSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerId = 1;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

    // optional uint32 AliveTeamNum = 2;
    if (has_aliveteamnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->aliveteamnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarTowerSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarTowerSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarTowerSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarTowerSimpleInfo::MergeFrom(const TGuildWarTowerSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
    if (from.has_aliveteamnum()) {
      set_aliveteamnum(from.aliveteamnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarTowerSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarTowerSimpleInfo::CopyFrom(const TGuildWarTowerSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarTowerSimpleInfo::IsInitialized() const {

  return true;
}

void TGuildWarTowerSimpleInfo::Swap(TGuildWarTowerSimpleInfo* other) {
  if (other != this) {
    std::swap(towerid_, other->towerid_);
    std::swap(aliveteamnum_, other->aliveteamnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarTowerSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarTowerSimpleInfo_descriptor_;
  metadata.reflection = TGuildWarTowerSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarFormation::kHidFieldNumber;
const int TGuildWarFormation::kPosFieldNumber;
#endif  // !_MSC_VER

TGuildWarFormation::TGuildWarFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarFormation)
}

void TGuildWarFormation::InitAsDefaultInstance() {
}

TGuildWarFormation::TGuildWarFormation(const TGuildWarFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarFormation)
}

void TGuildWarFormation::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarFormation::~TGuildWarFormation() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarFormation)
  SharedDtor();
}

void TGuildWarFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarFormation_descriptor_;
}

const TGuildWarFormation& TGuildWarFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarFormation* TGuildWarFormation::default_instance_ = NULL;

TGuildWarFormation* TGuildWarFormation::New() const {
  return new TGuildWarFormation;
}

void TGuildWarFormation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarFormation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(hid_, pos_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarFormation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarFormation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarFormation)
  return false;
#undef DO_
}

void TGuildWarFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarFormation)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarFormation)
}

::google::protobuf::uint8* TGuildWarFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarFormation)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarFormation)
  return target;
}

int TGuildWarFormation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarFormation::MergeFrom(const TGuildWarFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarFormation::CopyFrom(const TGuildWarFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarFormation::IsInitialized() const {

  return true;
}

void TGuildWarFormation::Swap(TGuildWarFormation* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarFormation_descriptor_;
  metadata.reflection = TGuildWarFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarTeamFormationInfo::kTeamIndexFieldNumber;
const int TGuildWarTeamFormationInfo::kArrFormationFieldNumber;
#endif  // !_MSC_VER

TGuildWarTeamFormationInfo::TGuildWarTeamFormationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarTeamFormationInfo)
}

void TGuildWarTeamFormationInfo::InitAsDefaultInstance() {
}

TGuildWarTeamFormationInfo::TGuildWarTeamFormationInfo(const TGuildWarTeamFormationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarTeamFormationInfo)
}

void TGuildWarTeamFormationInfo::SharedCtor() {
  _cached_size_ = 0;
  teamindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarTeamFormationInfo::~TGuildWarTeamFormationInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarTeamFormationInfo)
  SharedDtor();
}

void TGuildWarTeamFormationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarTeamFormationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarTeamFormationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarTeamFormationInfo_descriptor_;
}

const TGuildWarTeamFormationInfo& TGuildWarTeamFormationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarTeamFormationInfo* TGuildWarTeamFormationInfo::default_instance_ = NULL;

TGuildWarTeamFormationInfo* TGuildWarTeamFormationInfo::New() const {
  return new TGuildWarTeamFormationInfo;
}

void TGuildWarTeamFormationInfo::Clear() {
  teamindex_ = 0u;
  arrformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarTeamFormationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarTeamFormationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamindex_)));
          set_has_teamindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrFormation;
        break;
      }

      // repeated .pb.TGuildWarFormation ArrFormation = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrFormation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarTeamFormationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarTeamFormationInfo)
  return false;
#undef DO_
}

void TGuildWarTeamFormationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarTeamFormationInfo)
  // optional uint32 TeamIndex = 1;
  if (has_teamindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamindex(), output);
  }

  // repeated .pb.TGuildWarFormation ArrFormation = 2;
  for (int i = 0; i < this->arrformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrformation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarTeamFormationInfo)
}

::google::protobuf::uint8* TGuildWarTeamFormationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarTeamFormationInfo)
  // optional uint32 TeamIndex = 1;
  if (has_teamindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamindex(), target);
  }

  // repeated .pb.TGuildWarFormation ArrFormation = 2;
  for (int i = 0; i < this->arrformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrformation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarTeamFormationInfo)
  return target;
}

int TGuildWarTeamFormationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamIndex = 1;
    if (has_teamindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamindex());
    }

  }
  // repeated .pb.TGuildWarFormation ArrFormation = 2;
  total_size += 1 * this->arrformation_size();
  for (int i = 0; i < this->arrformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrformation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarTeamFormationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarTeamFormationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarTeamFormationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarTeamFormationInfo::MergeFrom(const TGuildWarTeamFormationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrformation_.MergeFrom(from.arrformation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamindex()) {
      set_teamindex(from.teamindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarTeamFormationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarTeamFormationInfo::CopyFrom(const TGuildWarTeamFormationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarTeamFormationInfo::IsInitialized() const {

  return true;
}

void TGuildWarTeamFormationInfo::Swap(TGuildWarTeamFormationInfo* other) {
  if (other != this) {
    std::swap(teamindex_, other->teamindex_);
    arrformation_.Swap(&other->arrformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarTeamFormationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarTeamFormationInfo_descriptor_;
  metadata.reflection = TGuildWarTeamFormationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarUserTeamInfo::kTeamIndexFieldNumber;
const int TGuildWarUserTeamInfo::kArrHeroInfoFieldNumber;
const int TGuildWarUserTeamInfo::kFightForceFieldNumber;
const int TGuildWarUserTeamInfo::kTowerIdFieldNumber;
#endif  // !_MSC_VER

TGuildWarUserTeamInfo::TGuildWarUserTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarUserTeamInfo)
}

void TGuildWarUserTeamInfo::InitAsDefaultInstance() {
}

TGuildWarUserTeamInfo::TGuildWarUserTeamInfo(const TGuildWarUserTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarUserTeamInfo)
}

void TGuildWarUserTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  teamindex_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  towerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarUserTeamInfo::~TGuildWarUserTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarUserTeamInfo)
  SharedDtor();
}

void TGuildWarUserTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarUserTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarUserTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarUserTeamInfo_descriptor_;
}

const TGuildWarUserTeamInfo& TGuildWarUserTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarUserTeamInfo* TGuildWarUserTeamInfo::default_instance_ = NULL;

TGuildWarUserTeamInfo* TGuildWarUserTeamInfo::New() const {
  return new TGuildWarUserTeamInfo;
}

void TGuildWarUserTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarUserTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamindex_, fightforce_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrheroinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarUserTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarUserTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamindex_)));
          set_has_teamindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrHeroInfo;
        break;
      }

      // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrHeroInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrheroinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrHeroInfo;
        if (input->ExpectTag(24)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 3;
      case 3: {
        if (tag == 24) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TowerId;
        break;
      }

      // optional uint32 TowerId = 4;
      case 4: {
        if (tag == 32) {
         parse_TowerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarUserTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarUserTeamInfo)
  return false;
#undef DO_
}

void TGuildWarUserTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarUserTeamInfo)
  // optional uint32 TeamIndex = 1;
  if (has_teamindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamindex(), output);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 2;
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrheroinfo(i), output);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fightforce(), output);
  }

  // optional uint32 TowerId = 4;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->towerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarUserTeamInfo)
}

::google::protobuf::uint8* TGuildWarUserTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarUserTeamInfo)
  // optional uint32 TeamIndex = 1;
  if (has_teamindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamindex(), target);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 2;
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrheroinfo(i), target);
  }

  // optional uint64 FightForce = 3;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fightforce(), target);
  }

  // optional uint32 TowerId = 4;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->towerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarUserTeamInfo)
  return target;
}

int TGuildWarUserTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamIndex = 1;
    if (has_teamindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamindex());
    }

    // optional uint64 FightForce = 3;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 TowerId = 4;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

  }
  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 2;
  total_size += 1 * this->arrheroinfo_size();
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrheroinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarUserTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarUserTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarUserTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarUserTeamInfo::MergeFrom(const TGuildWarUserTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrheroinfo_.MergeFrom(from.arrheroinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamindex()) {
      set_teamindex(from.teamindex());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarUserTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarUserTeamInfo::CopyFrom(const TGuildWarUserTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarUserTeamInfo::IsInitialized() const {

  return true;
}

void TGuildWarUserTeamInfo::Swap(TGuildWarUserTeamInfo* other) {
  if (other != this) {
    std::swap(teamindex_, other->teamindex_);
    arrheroinfo_.Swap(&other->arrheroinfo_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(towerid_, other->towerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarUserTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarUserTeamInfo_descriptor_;
  metadata.reflection = TGuildWarUserTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarUserHeroInheritInfo::kHidFieldNumber;
const int TGuildWarUserHeroInheritInfo::kCurHpPerFieldNumber;
const int TGuildWarUserHeroInheritInfo::kCurRageFieldNumber;
const int TGuildWarUserHeroInheritInfo::kRecoverTimeFieldNumber;
const int TGuildWarUserHeroInheritInfo::kCdTimeFieldNumber;
#endif  // !_MSC_VER

TGuildWarUserHeroInheritInfo::TGuildWarUserHeroInheritInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarUserHeroInheritInfo)
}

void TGuildWarUserHeroInheritInfo::InitAsDefaultInstance() {
}

TGuildWarUserHeroInheritInfo::TGuildWarUserHeroInheritInfo(const TGuildWarUserHeroInheritInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarUserHeroInheritInfo)
}

void TGuildWarUserHeroInheritInfo::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  curhpper_ = 0u;
  currage_ = 0u;
  recovertime_ = GOOGLE_ULONGLONG(0);
  cdtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarUserHeroInheritInfo::~TGuildWarUserHeroInheritInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarUserHeroInheritInfo)
  SharedDtor();
}

void TGuildWarUserHeroInheritInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarUserHeroInheritInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarUserHeroInheritInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarUserHeroInheritInfo_descriptor_;
}

const TGuildWarUserHeroInheritInfo& TGuildWarUserHeroInheritInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarUserHeroInheritInfo* TGuildWarUserHeroInheritInfo::default_instance_ = NULL;

TGuildWarUserHeroInheritInfo* TGuildWarUserHeroInheritInfo::New() const {
  return new TGuildWarUserHeroInheritInfo;
}

void TGuildWarUserHeroInheritInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarUserHeroInheritInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(hid_, currage_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarUserHeroInheritInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarUserHeroInheritInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurHpPer;
        break;
      }

      // optional uint32 CurHpPer = 2;
      case 2: {
        if (tag == 16) {
         parse_CurHpPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhpper_)));
          set_has_curhpper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurRage;
        break;
      }

      // optional uint32 CurRage = 3;
      case 3: {
        if (tag == 24) {
         parse_CurRage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currage_)));
          set_has_currage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_RecoverTime;
        break;
      }

      // optional uint64 RecoverTime = 4;
      case 4: {
        if (tag == 32) {
         parse_RecoverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recovertime_)));
          set_has_recovertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CdTime;
        break;
      }

      // optional uint64 CdTime = 5;
      case 5: {
        if (tag == 40) {
         parse_CdTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cdtime_)));
          set_has_cdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarUserHeroInheritInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarUserHeroInheritInfo)
  return false;
#undef DO_
}

void TGuildWarUserHeroInheritInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarUserHeroInheritInfo)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 CurHpPer = 2;
  if (has_curhpper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curhpper(), output);
  }

  // optional uint32 CurRage = 3;
  if (has_currage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currage(), output);
  }

  // optional uint64 RecoverTime = 4;
  if (has_recovertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->recovertime(), output);
  }

  // optional uint64 CdTime = 5;
  if (has_cdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cdtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarUserHeroInheritInfo)
}

::google::protobuf::uint8* TGuildWarUserHeroInheritInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarUserHeroInheritInfo)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 CurHpPer = 2;
  if (has_curhpper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curhpper(), target);
  }

  // optional uint32 CurRage = 3;
  if (has_currage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currage(), target);
  }

  // optional uint64 RecoverTime = 4;
  if (has_recovertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->recovertime(), target);
  }

  // optional uint64 CdTime = 5;
  if (has_cdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cdtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarUserHeroInheritInfo)
  return target;
}

int TGuildWarUserHeroInheritInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 CurHpPer = 2;
    if (has_curhpper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhpper());
    }

    // optional uint32 CurRage = 3;
    if (has_currage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currage());
    }

    // optional uint64 RecoverTime = 4;
    if (has_recovertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recovertime());
    }

    // optional uint64 CdTime = 5;
    if (has_cdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cdtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarUserHeroInheritInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarUserHeroInheritInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarUserHeroInheritInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarUserHeroInheritInfo::MergeFrom(const TGuildWarUserHeroInheritInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_curhpper()) {
      set_curhpper(from.curhpper());
    }
    if (from.has_currage()) {
      set_currage(from.currage());
    }
    if (from.has_recovertime()) {
      set_recovertime(from.recovertime());
    }
    if (from.has_cdtime()) {
      set_cdtime(from.cdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarUserHeroInheritInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarUserHeroInheritInfo::CopyFrom(const TGuildWarUserHeroInheritInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarUserHeroInheritInfo::IsInitialized() const {

  return true;
}

void TGuildWarUserHeroInheritInfo::Swap(TGuildWarUserHeroInheritInfo* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(curhpper_, other->curhpper_);
    std::swap(currage_, other->currage_);
    std::swap(recovertime_, other->recovertime_);
    std::swap(cdtime_, other->cdtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarUserHeroInheritInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarUserHeroInheritInfo_descriptor_;
  metadata.reflection = TGuildWarUserHeroInheritInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarUserInfo::kIncAttackTimeFieldNumber;
const int TGuildWarUserInfo::kAttackNumFieldNumber;
const int TGuildWarUserInfo::kIncAttackNumFieldNumber;
const int TGuildWarUserInfo::kCallForBattleHeroFieldNumber;
const int TGuildWarUserInfo::kArrNotPickedBuffFieldNumber;
const int TGuildWarUserInfo::kArrTeamInfoFieldNumber;
const int TGuildWarUserInfo::kArrHeroInfoFieldNumber;
const int TGuildWarUserInfo::kArrAttackFormationFieldNumber;
const int TGuildWarUserInfo::kSendNormalMsgTimeFieldNumber;
const int TGuildWarUserInfo::kSendGoldMsgTimeFieldNumber;
#endif  // !_MSC_VER

TGuildWarUserInfo::TGuildWarUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarUserInfo)
}

void TGuildWarUserInfo::InitAsDefaultInstance() {
  callforbattlehero_ = const_cast< ::pb::TGuildWarHeroDetailInfo*>(&::pb::TGuildWarHeroDetailInfo::default_instance());
}

TGuildWarUserInfo::TGuildWarUserInfo(const TGuildWarUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarUserInfo)
}

void TGuildWarUserInfo::SharedCtor() {
  _cached_size_ = 0;
  incattacktime_ = GOOGLE_ULONGLONG(0);
  attacknum_ = 0u;
  incattacknum_ = 0u;
  callforbattlehero_ = NULL;
  sendnormalmsgtime_ = GOOGLE_ULONGLONG(0);
  sendgoldmsgtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarUserInfo::~TGuildWarUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarUserInfo)
  SharedDtor();
}

void TGuildWarUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete callforbattlehero_;
  }
}

void TGuildWarUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarUserInfo_descriptor_;
}

const TGuildWarUserInfo& TGuildWarUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarUserInfo* TGuildWarUserInfo::default_instance_ = NULL;

TGuildWarUserInfo* TGuildWarUserInfo::New() const {
  return new TGuildWarUserInfo;
}

void TGuildWarUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(incattacktime_, incattacknum_);
    if (has_callforbattlehero()) {
      if (callforbattlehero_ != NULL) callforbattlehero_->::pb::TGuildWarHeroDetailInfo::Clear();
    }
  }
  ZR_(sendnormalmsgtime_, sendgoldmsgtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrnotpickedbuff_.Clear();
  arrteaminfo_.Clear();
  arrheroinfo_.Clear();
  arrattackformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 IncAttackTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &incattacktime_)));
          set_has_incattacktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AttackNum;
        break;
      }

      // optional uint32 AttackNum = 2;
      case 2: {
        if (tag == 16) {
         parse_AttackNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacknum_)));
          set_has_attacknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IncAttackNum;
        break;
      }

      // optional uint32 IncAttackNum = 3;
      case 3: {
        if (tag == 24) {
         parse_IncAttackNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incattacknum_)));
          set_has_incattacknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_CallForBattleHero;
        break;
      }

      // optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 4;
      case 4: {
        if (tag == 34) {
         parse_CallForBattleHero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callforbattlehero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ArrNotPickedBuff;
        break;
      }

      // repeated uint32 ArrNotPickedBuff = 5;
      case 5: {
        if (tag == 40) {
         parse_ArrNotPickedBuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_arrnotpickedbuff())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrnotpickedbuff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ArrNotPickedBuff;
        if (input->ExpectTag(50)) goto parse_ArrTeamInfo;
        break;
      }

      // repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_ArrTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrteaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrTeamInfo;
        if (input->ExpectTag(58)) goto parse_ArrHeroInfo;
        break;
      }

      // repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 7;
      case 7: {
        if (tag == 58) {
         parse_ArrHeroInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrheroinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ArrHeroInfo;
        if (input->ExpectTag(66)) goto parse_ArrAttackFormation;
        break;
      }

      // repeated .pb.TGuildWarFormation ArrAttackFormation = 8;
      case 8: {
        if (tag == 66) {
         parse_ArrAttackFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrattackformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ArrAttackFormation;
        if (input->ExpectTag(72)) goto parse_SendNormalMsgTime;
        break;
      }

      // optional uint64 SendNormalMsgTime = 9;
      case 9: {
        if (tag == 72) {
         parse_SendNormalMsgTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendnormalmsgtime_)));
          set_has_sendnormalmsgtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_SendGoldMsgTime;
        break;
      }

      // optional uint64 SendGoldMsgTime = 10;
      case 10: {
        if (tag == 80) {
         parse_SendGoldMsgTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendgoldmsgtime_)));
          set_has_sendgoldmsgtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarUserInfo)
  return false;
#undef DO_
}

void TGuildWarUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarUserInfo)
  // optional uint64 IncAttackTime = 1;
  if (has_incattacktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->incattacktime(), output);
  }

  // optional uint32 AttackNum = 2;
  if (has_attacknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attacknum(), output);
  }

  // optional uint32 IncAttackNum = 3;
  if (has_incattacknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->incattacknum(), output);
  }

  // optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 4;
  if (has_callforbattlehero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->callforbattlehero(), output);
  }

  // repeated uint32 ArrNotPickedBuff = 5;
  for (int i = 0; i < this->arrnotpickedbuff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->arrnotpickedbuff(i), output);
  }

  // repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 6;
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arrteaminfo(i), output);
  }

  // repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 7;
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->arrheroinfo(i), output);
  }

  // repeated .pb.TGuildWarFormation ArrAttackFormation = 8;
  for (int i = 0; i < this->arrattackformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->arrattackformation(i), output);
  }

  // optional uint64 SendNormalMsgTime = 9;
  if (has_sendnormalmsgtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->sendnormalmsgtime(), output);
  }

  // optional uint64 SendGoldMsgTime = 10;
  if (has_sendgoldmsgtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->sendgoldmsgtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarUserInfo)
}

::google::protobuf::uint8* TGuildWarUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarUserInfo)
  // optional uint64 IncAttackTime = 1;
  if (has_incattacktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->incattacktime(), target);
  }

  // optional uint32 AttackNum = 2;
  if (has_attacknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attacknum(), target);
  }

  // optional uint32 IncAttackNum = 3;
  if (has_incattacknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->incattacknum(), target);
  }

  // optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 4;
  if (has_callforbattlehero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->callforbattlehero(), target);
  }

  // repeated uint32 ArrNotPickedBuff = 5;
  for (int i = 0; i < this->arrnotpickedbuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->arrnotpickedbuff(i), target);
  }

  // repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 6;
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arrteaminfo(i), target);
  }

  // repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 7;
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->arrheroinfo(i), target);
  }

  // repeated .pb.TGuildWarFormation ArrAttackFormation = 8;
  for (int i = 0; i < this->arrattackformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->arrattackformation(i), target);
  }

  // optional uint64 SendNormalMsgTime = 9;
  if (has_sendnormalmsgtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->sendnormalmsgtime(), target);
  }

  // optional uint64 SendGoldMsgTime = 10;
  if (has_sendgoldmsgtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->sendgoldmsgtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarUserInfo)
  return target;
}

int TGuildWarUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 IncAttackTime = 1;
    if (has_incattacktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->incattacktime());
    }

    // optional uint32 AttackNum = 2;
    if (has_attacknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacknum());
    }

    // optional uint32 IncAttackNum = 3;
    if (has_incattacknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->incattacknum());
    }

    // optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 4;
    if (has_callforbattlehero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callforbattlehero());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 SendNormalMsgTime = 9;
    if (has_sendnormalmsgtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendnormalmsgtime());
    }

    // optional uint64 SendGoldMsgTime = 10;
    if (has_sendgoldmsgtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendgoldmsgtime());
    }

  }
  // repeated uint32 ArrNotPickedBuff = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrnotpickedbuff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrnotpickedbuff(i));
    }
    total_size += 1 * this->arrnotpickedbuff_size() + data_size;
  }

  // repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 6;
  total_size += 1 * this->arrteaminfo_size();
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrteaminfo(i));
  }

  // repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 7;
  total_size += 1 * this->arrheroinfo_size();
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrheroinfo(i));
  }

  // repeated .pb.TGuildWarFormation ArrAttackFormation = 8;
  total_size += 1 * this->arrattackformation_size();
  for (int i = 0; i < this->arrattackformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrattackformation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarUserInfo::MergeFrom(const TGuildWarUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrnotpickedbuff_.MergeFrom(from.arrnotpickedbuff_);
  arrteaminfo_.MergeFrom(from.arrteaminfo_);
  arrheroinfo_.MergeFrom(from.arrheroinfo_);
  arrattackformation_.MergeFrom(from.arrattackformation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_incattacktime()) {
      set_incattacktime(from.incattacktime());
    }
    if (from.has_attacknum()) {
      set_attacknum(from.attacknum());
    }
    if (from.has_incattacknum()) {
      set_incattacknum(from.incattacknum());
    }
    if (from.has_callforbattlehero()) {
      mutable_callforbattlehero()->::pb::TGuildWarHeroDetailInfo::MergeFrom(from.callforbattlehero());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sendnormalmsgtime()) {
      set_sendnormalmsgtime(from.sendnormalmsgtime());
    }
    if (from.has_sendgoldmsgtime()) {
      set_sendgoldmsgtime(from.sendgoldmsgtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarUserInfo::CopyFrom(const TGuildWarUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarUserInfo::IsInitialized() const {

  return true;
}

void TGuildWarUserInfo::Swap(TGuildWarUserInfo* other) {
  if (other != this) {
    std::swap(incattacktime_, other->incattacktime_);
    std::swap(attacknum_, other->attacknum_);
    std::swap(incattacknum_, other->incattacknum_);
    std::swap(callforbattlehero_, other->callforbattlehero_);
    arrnotpickedbuff_.Swap(&other->arrnotpickedbuff_);
    arrteaminfo_.Swap(&other->arrteaminfo_);
    arrheroinfo_.Swap(&other->arrheroinfo_);
    arrattackformation_.Swap(&other->arrattackformation_);
    std::swap(sendnormalmsgtime_, other->sendnormalmsgtime_);
    std::swap(sendgoldmsgtime_, other->sendgoldmsgtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarUserInfo_descriptor_;
  metadata.reflection = TGuildWarUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarOtherUserInfo::kUidFieldNumber;
const int TGuildWarOtherUserInfo::kPosFieldNumber;
const int TGuildWarOtherUserInfo::kIsLeaveFieldNumber;
const int TGuildWarOtherUserInfo::kUserSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarOtherUserInfo::TGuildWarOtherUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarOtherUserInfo)
}

void TGuildWarOtherUserInfo::InitAsDefaultInstance() {
  usersimpleinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TGuildWarOtherUserInfo::TGuildWarOtherUserInfo(const TGuildWarOtherUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarOtherUserInfo)
}

void TGuildWarOtherUserInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  pos_ = 0u;
  isleave_ = false;
  usersimpleinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarOtherUserInfo::~TGuildWarOtherUserInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarOtherUserInfo)
  SharedDtor();
}

void TGuildWarOtherUserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete usersimpleinfo_;
  }
}

void TGuildWarOtherUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarOtherUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarOtherUserInfo_descriptor_;
}

const TGuildWarOtherUserInfo& TGuildWarOtherUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarOtherUserInfo* TGuildWarOtherUserInfo::default_instance_ = NULL;

TGuildWarOtherUserInfo* TGuildWarOtherUserInfo::New() const {
  return new TGuildWarOtherUserInfo;
}

void TGuildWarOtherUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarOtherUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(uid_, isleave_);
    if (has_usersimpleinfo()) {
      if (usersimpleinfo_ != NULL) usersimpleinfo_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarOtherUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarOtherUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 2;
      case 2: {
        if (tag == 16) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsLeave;
        break;
      }

      // optional bool IsLeave = 3;
      case 3: {
        if (tag == 24) {
         parse_IsLeave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isleave_)));
          set_has_isleave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserSimpleInfo;
        break;
      }

      // optional .pb.TUserSimpleInfo UserSimpleInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_UserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarOtherUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarOtherUserInfo)
  return false;
#undef DO_
}

void TGuildWarOtherUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarOtherUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional bool IsLeave = 3;
  if (has_isleave()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isleave(), output);
  }

  // optional .pb.TUserSimpleInfo UserSimpleInfo = 4;
  if (has_usersimpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->usersimpleinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarOtherUserInfo)
}

::google::protobuf::uint8* TGuildWarOtherUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarOtherUserInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional bool IsLeave = 3;
  if (has_isleave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isleave(), target);
  }

  // optional .pb.TUserSimpleInfo UserSimpleInfo = 4;
  if (has_usersimpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->usersimpleinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarOtherUserInfo)
  return target;
}

int TGuildWarOtherUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional bool IsLeave = 3;
    if (has_isleave()) {
      total_size += 1 + 1;
    }

    // optional .pb.TUserSimpleInfo UserSimpleInfo = 4;
    if (has_usersimpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usersimpleinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarOtherUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarOtherUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarOtherUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarOtherUserInfo::MergeFrom(const TGuildWarOtherUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_isleave()) {
      set_isleave(from.isleave());
    }
    if (from.has_usersimpleinfo()) {
      mutable_usersimpleinfo()->::pb::TUserSimpleInfo::MergeFrom(from.usersimpleinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarOtherUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarOtherUserInfo::CopyFrom(const TGuildWarOtherUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarOtherUserInfo::IsInitialized() const {

  return true;
}

void TGuildWarOtherUserInfo::Swap(TGuildWarOtherUserInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(pos_, other->pos_);
    std::swap(isleave_, other->isleave_);
    std::swap(usersimpleinfo_, other->usersimpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarOtherUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarOtherUserInfo_descriptor_;
  metadata.reflection = TGuildWarOtherUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarFieldInfo::kArrTowerInfoFieldNumber;
const int TGuildWarFieldInfo::kSelfInfoFieldNumber;
const int TGuildWarFieldInfo::kArrOtherUserInfoFieldNumber;
const int TGuildWarFieldInfo::kNotReadMsgInfoFieldNumber;
const int TGuildWarFieldInfo::kArrHeroInfo1FieldNumber;
const int TGuildWarFieldInfo::kArrHeroInfo2FieldNumber;
const int TGuildWarFieldInfo::kArrUserSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarFieldInfo::TGuildWarFieldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarFieldInfo)
}

void TGuildWarFieldInfo::InitAsDefaultInstance() {
  selfinfo_ = const_cast< ::pb::TGuildWarUserInfo*>(&::pb::TGuildWarUserInfo::default_instance());
  notreadmsginfo_ = const_cast< ::pb::TGuildWarMessageInfo*>(&::pb::TGuildWarMessageInfo::default_instance());
}

TGuildWarFieldInfo::TGuildWarFieldInfo(const TGuildWarFieldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarFieldInfo)
}

void TGuildWarFieldInfo::SharedCtor() {
  _cached_size_ = 0;
  selfinfo_ = NULL;
  notreadmsginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarFieldInfo::~TGuildWarFieldInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarFieldInfo)
  SharedDtor();
}

void TGuildWarFieldInfo::SharedDtor() {
  if (this != default_instance_) {
    delete selfinfo_;
    delete notreadmsginfo_;
  }
}

void TGuildWarFieldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarFieldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarFieldInfo_descriptor_;
}

const TGuildWarFieldInfo& TGuildWarFieldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarFieldInfo* TGuildWarFieldInfo::default_instance_ = NULL;

TGuildWarFieldInfo* TGuildWarFieldInfo::New() const {
  return new TGuildWarFieldInfo;
}

void TGuildWarFieldInfo::Clear() {
  if (_has_bits_[0 / 32] & 10) {
    if (has_selfinfo()) {
      if (selfinfo_ != NULL) selfinfo_->::pb::TGuildWarUserInfo::Clear();
    }
    if (has_notreadmsginfo()) {
      if (notreadmsginfo_ != NULL) notreadmsginfo_->::pb::TGuildWarMessageInfo::Clear();
    }
  }
  arrtowerinfo_.Clear();
  arrotheruserinfo_.Clear();
  arrheroinfo1_.Clear();
  arrheroinfo2_.Clear();
  arrusersimpleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarFieldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarFieldInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrTowerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtowerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrTowerInfo;
        if (input->ExpectTag(26)) goto parse_SelfInfo;
        break;
      }

      // optional .pb.TGuildWarUserInfo SelfInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_SelfInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_selfinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrOtherUserInfo;
        break;
      }

      // repeated .pb.TGuildWarOtherUserInfo ArrOtherUserInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrOtherUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrotheruserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrOtherUserInfo;
        if (input->ExpectTag(42)) goto parse_NotReadMsgInfo;
        break;
      }

      // optional .pb.TGuildWarMessageInfo NotReadMsgInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_NotReadMsgInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_notreadmsginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrHeroInfo1;
        break;
      }

      // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 6;
      case 6: {
        if (tag == 50) {
         parse_ArrHeroInfo1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrheroinfo1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrHeroInfo1;
        if (input->ExpectTag(58)) goto parse_ArrHeroInfo2;
        break;
      }

      // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 7;
      case 7: {
        if (tag == 58) {
         parse_ArrHeroInfo2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrheroinfo2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_ArrHeroInfo2;
        if (input->ExpectTag(66)) goto parse_ArrUserSimpleInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 8;
      case 8: {
        if (tag == 66) {
         parse_ArrUserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrusersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ArrUserSimpleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarFieldInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarFieldInfo)
  return false;
#undef DO_
}

void TGuildWarFieldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarFieldInfo)
  // repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
  for (int i = 0; i < this->arrtowerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrtowerinfo(i), output);
  }

  // optional .pb.TGuildWarUserInfo SelfInfo = 3;
  if (has_selfinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->selfinfo(), output);
  }

  // repeated .pb.TGuildWarOtherUserInfo ArrOtherUserInfo = 4;
  for (int i = 0; i < this->arrotheruserinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrotheruserinfo(i), output);
  }

  // optional .pb.TGuildWarMessageInfo NotReadMsgInfo = 5;
  if (has_notreadmsginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->notreadmsginfo(), output);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 6;
  for (int i = 0; i < this->arrheroinfo1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arrheroinfo1(i), output);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 7;
  for (int i = 0; i < this->arrheroinfo2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->arrheroinfo2(i), output);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 8;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->arrusersimpleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarFieldInfo)
}

::google::protobuf::uint8* TGuildWarFieldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarFieldInfo)
  // repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
  for (int i = 0; i < this->arrtowerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrtowerinfo(i), target);
  }

  // optional .pb.TGuildWarUserInfo SelfInfo = 3;
  if (has_selfinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->selfinfo(), target);
  }

  // repeated .pb.TGuildWarOtherUserInfo ArrOtherUserInfo = 4;
  for (int i = 0; i < this->arrotheruserinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrotheruserinfo(i), target);
  }

  // optional .pb.TGuildWarMessageInfo NotReadMsgInfo = 5;
  if (has_notreadmsginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->notreadmsginfo(), target);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 6;
  for (int i = 0; i < this->arrheroinfo1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arrheroinfo1(i), target);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 7;
  for (int i = 0; i < this->arrheroinfo2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->arrheroinfo2(i), target);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 8;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->arrusersimpleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarFieldInfo)
  return target;
}

int TGuildWarFieldInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .pb.TGuildWarUserInfo SelfInfo = 3;
    if (has_selfinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->selfinfo());
    }

    // optional .pb.TGuildWarMessageInfo NotReadMsgInfo = 5;
    if (has_notreadmsginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->notreadmsginfo());
    }

  }
  // repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
  total_size += 1 * this->arrtowerinfo_size();
  for (int i = 0; i < this->arrtowerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtowerinfo(i));
  }

  // repeated .pb.TGuildWarOtherUserInfo ArrOtherUserInfo = 4;
  total_size += 1 * this->arrotheruserinfo_size();
  for (int i = 0; i < this->arrotheruserinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrotheruserinfo(i));
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 6;
  total_size += 1 * this->arrheroinfo1_size();
  for (int i = 0; i < this->arrheroinfo1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrheroinfo1(i));
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 7;
  total_size += 1 * this->arrheroinfo2_size();
  for (int i = 0; i < this->arrheroinfo2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrheroinfo2(i));
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 8;
  total_size += 1 * this->arrusersimpleinfo_size();
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrusersimpleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarFieldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarFieldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarFieldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarFieldInfo::MergeFrom(const TGuildWarFieldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrtowerinfo_.MergeFrom(from.arrtowerinfo_);
  arrotheruserinfo_.MergeFrom(from.arrotheruserinfo_);
  arrheroinfo1_.MergeFrom(from.arrheroinfo1_);
  arrheroinfo2_.MergeFrom(from.arrheroinfo2_);
  arrusersimpleinfo_.MergeFrom(from.arrusersimpleinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_selfinfo()) {
      mutable_selfinfo()->::pb::TGuildWarUserInfo::MergeFrom(from.selfinfo());
    }
    if (from.has_notreadmsginfo()) {
      mutable_notreadmsginfo()->::pb::TGuildWarMessageInfo::MergeFrom(from.notreadmsginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarFieldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarFieldInfo::CopyFrom(const TGuildWarFieldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarFieldInfo::IsInitialized() const {

  return true;
}

void TGuildWarFieldInfo::Swap(TGuildWarFieldInfo* other) {
  if (other != this) {
    arrtowerinfo_.Swap(&other->arrtowerinfo_);
    std::swap(selfinfo_, other->selfinfo_);
    arrotheruserinfo_.Swap(&other->arrotheruserinfo_);
    std::swap(notreadmsginfo_, other->notreadmsginfo_);
    arrheroinfo1_.Swap(&other->arrheroinfo1_);
    arrheroinfo2_.Swap(&other->arrheroinfo2_);
    arrusersimpleinfo_.Swap(&other->arrusersimpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarFieldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarFieldInfo_descriptor_;
  metadata.reflection = TGuildWarFieldInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarTeamBaseInfo::kTeamIdInfoFieldNumber;
const int TGuildWarTeamBaseInfo::kFightForceFieldNumber;
const int TGuildWarTeamBaseInfo::kTowerIdFieldNumber;
const int TGuildWarTeamBaseInfo::kHtidFieldNumber;
const int TGuildWarTeamBaseInfo::kBattleInfoIdFieldNumber;
#endif  // !_MSC_VER

TGuildWarTeamBaseInfo::TGuildWarTeamBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarTeamBaseInfo)
}

void TGuildWarTeamBaseInfo::InitAsDefaultInstance() {
  teamidinfo_ = const_cast< ::pb::TGuildWarTeamIdInfo*>(&::pb::TGuildWarTeamIdInfo::default_instance());
}

TGuildWarTeamBaseInfo::TGuildWarTeamBaseInfo(const TGuildWarTeamBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarTeamBaseInfo)
}

void TGuildWarTeamBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  teamidinfo_ = NULL;
  fightforce_ = GOOGLE_ULONGLONG(0);
  towerid_ = 0u;
  htid_ = 0u;
  battleinfoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarTeamBaseInfo::~TGuildWarTeamBaseInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarTeamBaseInfo)
  SharedDtor();
}

void TGuildWarTeamBaseInfo::SharedDtor() {
  if (this != default_instance_) {
    delete teamidinfo_;
  }
}

void TGuildWarTeamBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarTeamBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarTeamBaseInfo_descriptor_;
}

const TGuildWarTeamBaseInfo& TGuildWarTeamBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarTeamBaseInfo* TGuildWarTeamBaseInfo::default_instance_ = NULL;

TGuildWarTeamBaseInfo* TGuildWarTeamBaseInfo::New() const {
  return new TGuildWarTeamBaseInfo;
}

void TGuildWarTeamBaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarTeamBaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(fightforce_, battleinfoid_);
    if (has_teamidinfo()) {
      if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarTeamBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarTeamBaseInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamidinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 2;
      case 2: {
        if (tag == 16) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TowerId;
        break;
      }

      // optional uint32 TowerId = 3;
      case 3: {
        if (tag == 24) {
         parse_TowerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 4;
      case 4: {
        if (tag == 32) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BattleInfoId;
        break;
      }

      // optional uint32 BattleInfoId = 5;
      case 5: {
        if (tag == 40) {
         parse_BattleInfoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleinfoid_)));
          set_has_battleinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarTeamBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarTeamBaseInfo)
  return false;
#undef DO_
}

void TGuildWarTeamBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarTeamBaseInfo)
  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
  if (has_teamidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamidinfo(), output);
  }

  // optional uint64 FightForce = 2;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->fightforce(), output);
  }

  // optional uint32 TowerId = 3;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->towerid(), output);
  }

  // optional uint32 Htid = 4;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->htid(), output);
  }

  // optional uint32 BattleInfoId = 5;
  if (has_battleinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->battleinfoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarTeamBaseInfo)
}

::google::protobuf::uint8* TGuildWarTeamBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarTeamBaseInfo)
  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
  if (has_teamidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamidinfo(), target);
  }

  // optional uint64 FightForce = 2;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->fightforce(), target);
  }

  // optional uint32 TowerId = 3;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->towerid(), target);
  }

  // optional uint32 Htid = 4;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->htid(), target);
  }

  // optional uint32 BattleInfoId = 5;
  if (has_battleinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->battleinfoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarTeamBaseInfo)
  return target;
}

int TGuildWarTeamBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
    if (has_teamidinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamidinfo());
    }

    // optional uint64 FightForce = 2;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 TowerId = 3;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

    // optional uint32 Htid = 4;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint32 BattleInfoId = 5;
    if (has_battleinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleinfoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarTeamBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarTeamBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarTeamBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarTeamBaseInfo::MergeFrom(const TGuildWarTeamBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamidinfo()) {
      mutable_teamidinfo()->::pb::TGuildWarTeamIdInfo::MergeFrom(from.teamidinfo());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_battleinfoid()) {
      set_battleinfoid(from.battleinfoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarTeamBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarTeamBaseInfo::CopyFrom(const TGuildWarTeamBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarTeamBaseInfo::IsInitialized() const {

  return true;
}

void TGuildWarTeamBaseInfo::Swap(TGuildWarTeamBaseInfo* other) {
  if (other != this) {
    std::swap(teamidinfo_, other->teamidinfo_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(towerid_, other->towerid_);
    std::swap(htid_, other->htid_);
    std::swap(battleinfoid_, other->battleinfoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarTeamBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarTeamBaseInfo_descriptor_;
  metadata.reflection = TGuildWarTeamBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarTeamInfoWithHp::kTeamBaseInfoFieldNumber;
const int TGuildWarTeamInfoWithHp::kCurHpPerFieldNumber;
#endif  // !_MSC_VER

TGuildWarTeamInfoWithHp::TGuildWarTeamInfoWithHp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarTeamInfoWithHp)
}

void TGuildWarTeamInfoWithHp::InitAsDefaultInstance() {
  teambaseinfo_ = const_cast< ::pb::TGuildWarTeamBaseInfo*>(&::pb::TGuildWarTeamBaseInfo::default_instance());
}

TGuildWarTeamInfoWithHp::TGuildWarTeamInfoWithHp(const TGuildWarTeamInfoWithHp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarTeamInfoWithHp)
}

void TGuildWarTeamInfoWithHp::SharedCtor() {
  _cached_size_ = 0;
  teambaseinfo_ = NULL;
  curhpper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarTeamInfoWithHp::~TGuildWarTeamInfoWithHp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarTeamInfoWithHp)
  SharedDtor();
}

void TGuildWarTeamInfoWithHp::SharedDtor() {
  if (this != default_instance_) {
    delete teambaseinfo_;
  }
}

void TGuildWarTeamInfoWithHp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarTeamInfoWithHp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarTeamInfoWithHp_descriptor_;
}

const TGuildWarTeamInfoWithHp& TGuildWarTeamInfoWithHp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarTeamInfoWithHp* TGuildWarTeamInfoWithHp::default_instance_ = NULL;

TGuildWarTeamInfoWithHp* TGuildWarTeamInfoWithHp::New() const {
  return new TGuildWarTeamInfoWithHp;
}

void TGuildWarTeamInfoWithHp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_teambaseinfo()) {
      if (teambaseinfo_ != NULL) teambaseinfo_->::pb::TGuildWarTeamBaseInfo::Clear();
    }
    curhpper_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarTeamInfoWithHp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarTeamInfoWithHp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teambaseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_CurHpPer;
        break;
      }

      // optional uint32 CurHpPer = 2;
      case 2: {
        if (tag == 16) {
         parse_CurHpPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhpper_)));
          set_has_curhpper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarTeamInfoWithHp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarTeamInfoWithHp)
  return false;
#undef DO_
}

void TGuildWarTeamInfoWithHp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarTeamInfoWithHp)
  // optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
  if (has_teambaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teambaseinfo(), output);
  }

  // optional uint32 CurHpPer = 2;
  if (has_curhpper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curhpper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarTeamInfoWithHp)
}

::google::protobuf::uint8* TGuildWarTeamInfoWithHp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarTeamInfoWithHp)
  // optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
  if (has_teambaseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teambaseinfo(), target);
  }

  // optional uint32 CurHpPer = 2;
  if (has_curhpper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curhpper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarTeamInfoWithHp)
  return target;
}

int TGuildWarTeamInfoWithHp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
    if (has_teambaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teambaseinfo());
    }

    // optional uint32 CurHpPer = 2;
    if (has_curhpper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhpper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarTeamInfoWithHp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarTeamInfoWithHp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarTeamInfoWithHp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarTeamInfoWithHp::MergeFrom(const TGuildWarTeamInfoWithHp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teambaseinfo()) {
      mutable_teambaseinfo()->::pb::TGuildWarTeamBaseInfo::MergeFrom(from.teambaseinfo());
    }
    if (from.has_curhpper()) {
      set_curhpper(from.curhpper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarTeamInfoWithHp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarTeamInfoWithHp::CopyFrom(const TGuildWarTeamInfoWithHp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarTeamInfoWithHp::IsInitialized() const {

  return true;
}

void TGuildWarTeamInfoWithHp::Swap(TGuildWarTeamInfoWithHp* other) {
  if (other != this) {
    std::swap(teambaseinfo_, other->teambaseinfo_);
    std::swap(curhpper_, other->curhpper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarTeamInfoWithHp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarTeamInfoWithHp_descriptor_;
  metadata.reflection = TGuildWarTeamInfoWithHp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarHeroDetailInfo::kUidFieldNumber;
const int TGuildWarHeroDetailInfo::kHidFieldNumber;
const int TGuildWarHeroDetailInfo::kPosFieldNumber;
const int TGuildWarHeroDetailInfo::kHtidFieldNumber;
const int TGuildWarHeroDetailInfo::kLevelFieldNumber;
const int TGuildWarHeroDetailInfo::kStarLvFieldNumber;
const int TGuildWarHeroDetailInfo::kAdvLvFieldNumber;
const int TGuildWarHeroDetailInfo::kCurHpPerFieldNumber;
const int TGuildWarHeroDetailInfo::kCurRageFieldNumber;
const int TGuildWarHeroDetailInfo::kFightForceFieldNumber;
#endif  // !_MSC_VER

TGuildWarHeroDetailInfo::TGuildWarHeroDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarHeroDetailInfo)
}

void TGuildWarHeroDetailInfo::InitAsDefaultInstance() {
}

TGuildWarHeroDetailInfo::TGuildWarHeroDetailInfo(const TGuildWarHeroDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarHeroDetailInfo)
}

void TGuildWarHeroDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  hid_ = 0u;
  pos_ = 0u;
  htid_ = 0u;
  level_ = 0u;
  starlv_ = 0u;
  advlv_ = 0u;
  curhpper_ = 0u;
  currage_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarHeroDetailInfo::~TGuildWarHeroDetailInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarHeroDetailInfo)
  SharedDtor();
}

void TGuildWarHeroDetailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarHeroDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarHeroDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarHeroDetailInfo_descriptor_;
}

const TGuildWarHeroDetailInfo& TGuildWarHeroDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarHeroDetailInfo* TGuildWarHeroDetailInfo::default_instance_ = NULL;

TGuildWarHeroDetailInfo* TGuildWarHeroDetailInfo::New() const {
  return new TGuildWarHeroDetailInfo;
}

void TGuildWarHeroDetailInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarHeroDetailInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(uid_, curhpper_);
  }
  ZR_(currage_, fightforce_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarHeroDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarHeroDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Hid;
        break;
      }

      // optional uint32 Hid = 2;
      case 2: {
        if (tag == 16) {
         parse_Hid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Pos;
        break;
      }

      // optional uint32 Pos = 3;
      case 3: {
        if (tag == 24) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 4;
      case 4: {
        if (tag == 32) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 5;
      case 5: {
        if (tag == 40) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_StarLv;
        break;
      }

      // optional uint32 StarLv = 6;
      case 6: {
        if (tag == 48) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_AdvLv;
        break;
      }

      // optional uint32 AdvLv = 7;
      case 7: {
        if (tag == 56) {
         parse_AdvLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advlv_)));
          set_has_advlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_CurHpPer;
        break;
      }

      // optional uint32 CurHpPer = 8;
      case 8: {
        if (tag == 64) {
         parse_CurHpPer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhpper_)));
          set_has_curhpper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_CurRage;
        break;
      }

      // optional uint32 CurRage = 9;
      case 9: {
        if (tag == 72) {
         parse_CurRage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currage_)));
          set_has_currage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 10;
      case 10: {
        if (tag == 80) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarHeroDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarHeroDetailInfo)
  return false;
#undef DO_
}

void TGuildWarHeroDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarHeroDetailInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hid(), output);
  }

  // optional uint32 Pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // optional uint32 Htid = 4;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->htid(), output);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 StarLv = 6;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->starlv(), output);
  }

  // optional uint32 AdvLv = 7;
  if (has_advlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->advlv(), output);
  }

  // optional uint32 CurHpPer = 8;
  if (has_curhpper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->curhpper(), output);
  }

  // optional uint32 CurRage = 9;
  if (has_currage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->currage(), output);
  }

  // optional uint64 FightForce = 10;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarHeroDetailInfo)
}

::google::protobuf::uint8* TGuildWarHeroDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarHeroDetailInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 Hid = 2;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hid(), target);
  }

  // optional uint32 Pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // optional uint32 Htid = 4;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->htid(), target);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 StarLv = 6;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->starlv(), target);
  }

  // optional uint32 AdvLv = 7;
  if (has_advlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->advlv(), target);
  }

  // optional uint32 CurHpPer = 8;
  if (has_curhpper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->curhpper(), target);
  }

  // optional uint32 CurRage = 9;
  if (has_currage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->currage(), target);
  }

  // optional uint64 FightForce = 10;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarHeroDetailInfo)
  return target;
}

int TGuildWarHeroDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 Hid = 2;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 Htid = 4;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 StarLv = 6;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

    // optional uint32 AdvLv = 7;
    if (has_advlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advlv());
    }

    // optional uint32 CurHpPer = 8;
    if (has_curhpper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhpper());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 CurRage = 9;
    if (has_currage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currage());
    }

    // optional uint64 FightForce = 10;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarHeroDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarHeroDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarHeroDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarHeroDetailInfo::MergeFrom(const TGuildWarHeroDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_advlv()) {
      set_advlv(from.advlv());
    }
    if (from.has_curhpper()) {
      set_curhpper(from.curhpper());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_currage()) {
      set_currage(from.currage());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarHeroDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarHeroDetailInfo::CopyFrom(const TGuildWarHeroDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarHeroDetailInfo::IsInitialized() const {

  return true;
}

void TGuildWarHeroDetailInfo::Swap(TGuildWarHeroDetailInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(hid_, other->hid_);
    std::swap(pos_, other->pos_);
    std::swap(htid_, other->htid_);
    std::swap(level_, other->level_);
    std::swap(starlv_, other->starlv_);
    std::swap(advlv_, other->advlv_);
    std::swap(curhpper_, other->curhpper_);
    std::swap(currage_, other->currage_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarHeroDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarHeroDetailInfo_descriptor_;
  metadata.reflection = TGuildWarHeroDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarTeamDetailInfo::kTeamBaseInfoFieldNumber;
const int TGuildWarTeamDetailInfo::kArrFormationFieldNumber;
const int TGuildWarTeamDetailInfo::kAttackedNumFieldNumber;
const int TGuildWarTeamDetailInfo::kReducedMoraleFieldNumber;
#endif  // !_MSC_VER

TGuildWarTeamDetailInfo::TGuildWarTeamDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarTeamDetailInfo)
}

void TGuildWarTeamDetailInfo::InitAsDefaultInstance() {
  teambaseinfo_ = const_cast< ::pb::TGuildWarTeamBaseInfo*>(&::pb::TGuildWarTeamBaseInfo::default_instance());
}

TGuildWarTeamDetailInfo::TGuildWarTeamDetailInfo(const TGuildWarTeamDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarTeamDetailInfo)
}

void TGuildWarTeamDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  teambaseinfo_ = NULL;
  attackednum_ = 0u;
  reducedmorale_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarTeamDetailInfo::~TGuildWarTeamDetailInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarTeamDetailInfo)
  SharedDtor();
}

void TGuildWarTeamDetailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete teambaseinfo_;
  }
}

void TGuildWarTeamDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarTeamDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarTeamDetailInfo_descriptor_;
}

const TGuildWarTeamDetailInfo& TGuildWarTeamDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarTeamDetailInfo* TGuildWarTeamDetailInfo::default_instance_ = NULL;

TGuildWarTeamDetailInfo* TGuildWarTeamDetailInfo::New() const {
  return new TGuildWarTeamDetailInfo;
}

void TGuildWarTeamDetailInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarTeamDetailInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 13) {
    ZR_(attackednum_, reducedmorale_);
    if (has_teambaseinfo()) {
      if (teambaseinfo_ != NULL) teambaseinfo_->::pb::TGuildWarTeamBaseInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarTeamDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarTeamDetailInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teambaseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrFormation;
        break;
      }

      // repeated .pb.TGuildWarHeroDetailInfo ArrFormation = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrFormation;
        if (input->ExpectTag(24)) goto parse_AttackedNum;
        break;
      }

      // optional uint32 AttackedNum = 3;
      case 3: {
        if (tag == 24) {
         parse_AttackedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackednum_)));
          set_has_attackednum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ReducedMorale;
        break;
      }

      // optional uint32 ReducedMorale = 4;
      case 4: {
        if (tag == 32) {
         parse_ReducedMorale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reducedmorale_)));
          set_has_reducedmorale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarTeamDetailInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarTeamDetailInfo)
  return false;
#undef DO_
}

void TGuildWarTeamDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarTeamDetailInfo)
  // optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
  if (has_teambaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teambaseinfo(), output);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrFormation = 2;
  for (int i = 0; i < this->arrformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrformation(i), output);
  }

  // optional uint32 AttackedNum = 3;
  if (has_attackednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attackednum(), output);
  }

  // optional uint32 ReducedMorale = 4;
  if (has_reducedmorale()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reducedmorale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarTeamDetailInfo)
}

::google::protobuf::uint8* TGuildWarTeamDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarTeamDetailInfo)
  // optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
  if (has_teambaseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teambaseinfo(), target);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrFormation = 2;
  for (int i = 0; i < this->arrformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrformation(i), target);
  }

  // optional uint32 AttackedNum = 3;
  if (has_attackednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attackednum(), target);
  }

  // optional uint32 ReducedMorale = 4;
  if (has_reducedmorale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reducedmorale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarTeamDetailInfo)
  return target;
}

int TGuildWarTeamDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarTeamBaseInfo TeamBaseInfo = 1;
    if (has_teambaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teambaseinfo());
    }

    // optional uint32 AttackedNum = 3;
    if (has_attackednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackednum());
    }

    // optional uint32 ReducedMorale = 4;
    if (has_reducedmorale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reducedmorale());
    }

  }
  // repeated .pb.TGuildWarHeroDetailInfo ArrFormation = 2;
  total_size += 1 * this->arrformation_size();
  for (int i = 0; i < this->arrformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrformation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarTeamDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarTeamDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarTeamDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarTeamDetailInfo::MergeFrom(const TGuildWarTeamDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrformation_.MergeFrom(from.arrformation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teambaseinfo()) {
      mutable_teambaseinfo()->::pb::TGuildWarTeamBaseInfo::MergeFrom(from.teambaseinfo());
    }
    if (from.has_attackednum()) {
      set_attackednum(from.attackednum());
    }
    if (from.has_reducedmorale()) {
      set_reducedmorale(from.reducedmorale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarTeamDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarTeamDetailInfo::CopyFrom(const TGuildWarTeamDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarTeamDetailInfo::IsInitialized() const {

  return true;
}

void TGuildWarTeamDetailInfo::Swap(TGuildWarTeamDetailInfo* other) {
  if (other != this) {
    std::swap(teambaseinfo_, other->teambaseinfo_);
    arrformation_.Swap(&other->arrformation_);
    std::swap(attackednum_, other->attackednum_);
    std::swap(reducedmorale_, other->reducedmorale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarTeamDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarTeamDetailInfo_descriptor_;
  metadata.reflection = TGuildWarTeamDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarBattleRecordInfo::kAttackUidFieldNumber;
const int TGuildWarBattleRecordInfo::kDefenseUidFieldNumber;
const int TGuildWarBattleRecordInfo::kTowerIdFieldNumber;
const int TGuildWarBattleRecordInfo::kTeamIndexFieldNumber;
const int TGuildWarBattleRecordInfo::kAttackFightForceFieldNumber;
const int TGuildWarBattleRecordInfo::kDefenseFightForceFieldNumber;
const int TGuildWarBattleRecordInfo::kRecordTimeFieldNumber;
const int TGuildWarBattleRecordInfo::kSuccessFieldNumber;
const int TGuildWarBattleRecordInfo::kRidFieldNumber;
const int TGuildWarBattleRecordInfo::kAttackGuildIdFieldNumber;
const int TGuildWarBattleRecordInfo::kDefenseGuildIdFieldNumber;
const int TGuildWarBattleRecordInfo::kBattleInfoIdFieldNumber;
#endif  // !_MSC_VER

TGuildWarBattleRecordInfo::TGuildWarBattleRecordInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarBattleRecordInfo)
}

void TGuildWarBattleRecordInfo::InitAsDefaultInstance() {
}

TGuildWarBattleRecordInfo::TGuildWarBattleRecordInfo(const TGuildWarBattleRecordInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarBattleRecordInfo)
}

void TGuildWarBattleRecordInfo::SharedCtor() {
  _cached_size_ = 0;
  attackuid_ = GOOGLE_ULONGLONG(0);
  defenseuid_ = GOOGLE_ULONGLONG(0);
  towerid_ = 0u;
  teamindex_ = 0u;
  attackfightforce_ = GOOGLE_ULONGLONG(0);
  defensefightforce_ = GOOGLE_ULONGLONG(0);
  recordtime_ = GOOGLE_ULONGLONG(0);
  success_ = 0u;
  rid_ = GOOGLE_ULONGLONG(0);
  attackguildid_ = GOOGLE_ULONGLONG(0);
  defenseguildid_ = GOOGLE_ULONGLONG(0);
  battleinfoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarBattleRecordInfo::~TGuildWarBattleRecordInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarBattleRecordInfo)
  SharedDtor();
}

void TGuildWarBattleRecordInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarBattleRecordInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarBattleRecordInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarBattleRecordInfo_descriptor_;
}

const TGuildWarBattleRecordInfo& TGuildWarBattleRecordInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarBattleRecordInfo* TGuildWarBattleRecordInfo::default_instance_ = NULL;

TGuildWarBattleRecordInfo* TGuildWarBattleRecordInfo::New() const {
  return new TGuildWarBattleRecordInfo;
}

void TGuildWarBattleRecordInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarBattleRecordInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(attackuid_, recordtime_);
    success_ = 0u;
  }
  ZR_(rid_, attackguildid_);
  ZR_(battleinfoid_, defenseguildid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarBattleRecordInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarBattleRecordInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 AttackUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attackuid_)));
          set_has_attackuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DefenseUid;
        break;
      }

      // optional uint64 DefenseUid = 2;
      case 2: {
        if (tag == 16) {
         parse_DefenseUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &defenseuid_)));
          set_has_defenseuid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TowerId;
        break;
      }

      // optional uint32 TowerId = 3;
      case 3: {
        if (tag == 24) {
         parse_TowerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_TeamIndex;
        break;
      }

      // optional uint32 TeamIndex = 4;
      case 4: {
        if (tag == 32) {
         parse_TeamIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamindex_)));
          set_has_teamindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_AttackFightForce;
        break;
      }

      // optional uint64 AttackFightForce = 5;
      case 5: {
        if (tag == 40) {
         parse_AttackFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attackfightforce_)));
          set_has_attackfightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DefenseFightForce;
        break;
      }

      // optional uint64 DefenseFightForce = 6;
      case 6: {
        if (tag == 48) {
         parse_DefenseFightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &defensefightforce_)));
          set_has_defensefightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_RecordTime;
        break;
      }

      // optional uint64 RecordTime = 7;
      case 7: {
        if (tag == 56) {
         parse_RecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_Success;
        break;
      }

      // optional uint32 Success = 8;
      case 8: {
        if (tag == 64) {
         parse_Success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_Rid;
        break;
      }

      // optional uint64 Rid = 9;
      case 9: {
        if (tag == 72) {
         parse_Rid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_AttackGuildId;
        break;
      }

      // optional uint64 AttackGuildId = 10;
      case 10: {
        if (tag == 80) {
         parse_AttackGuildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attackguildid_)));
          set_has_attackguildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_DefenseGuildId;
        break;
      }

      // optional uint64 DefenseGuildId = 11;
      case 11: {
        if (tag == 88) {
         parse_DefenseGuildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &defenseguildid_)));
          set_has_defenseguildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_BattleInfoId;
        break;
      }

      // optional uint32 BattleInfoId = 12;
      case 12: {
        if (tag == 96) {
         parse_BattleInfoId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleinfoid_)));
          set_has_battleinfoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarBattleRecordInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarBattleRecordInfo)
  return false;
#undef DO_
}

void TGuildWarBattleRecordInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarBattleRecordInfo)
  // optional uint64 AttackUid = 1;
  if (has_attackuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->attackuid(), output);
  }

  // optional uint64 DefenseUid = 2;
  if (has_defenseuid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->defenseuid(), output);
  }

  // optional uint32 TowerId = 3;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->towerid(), output);
  }

  // optional uint32 TeamIndex = 4;
  if (has_teamindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teamindex(), output);
  }

  // optional uint64 AttackFightForce = 5;
  if (has_attackfightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->attackfightforce(), output);
  }

  // optional uint64 DefenseFightForce = 6;
  if (has_defensefightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->defensefightforce(), output);
  }

  // optional uint64 RecordTime = 7;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->recordtime(), output);
  }

  // optional uint32 Success = 8;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->success(), output);
  }

  // optional uint64 Rid = 9;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->rid(), output);
  }

  // optional uint64 AttackGuildId = 10;
  if (has_attackguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->attackguildid(), output);
  }

  // optional uint64 DefenseGuildId = 11;
  if (has_defenseguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->defenseguildid(), output);
  }

  // optional uint32 BattleInfoId = 12;
  if (has_battleinfoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->battleinfoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarBattleRecordInfo)
}

::google::protobuf::uint8* TGuildWarBattleRecordInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarBattleRecordInfo)
  // optional uint64 AttackUid = 1;
  if (has_attackuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->attackuid(), target);
  }

  // optional uint64 DefenseUid = 2;
  if (has_defenseuid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->defenseuid(), target);
  }

  // optional uint32 TowerId = 3;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->towerid(), target);
  }

  // optional uint32 TeamIndex = 4;
  if (has_teamindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teamindex(), target);
  }

  // optional uint64 AttackFightForce = 5;
  if (has_attackfightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->attackfightforce(), target);
  }

  // optional uint64 DefenseFightForce = 6;
  if (has_defensefightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->defensefightforce(), target);
  }

  // optional uint64 RecordTime = 7;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->recordtime(), target);
  }

  // optional uint32 Success = 8;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->success(), target);
  }

  // optional uint64 Rid = 9;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->rid(), target);
  }

  // optional uint64 AttackGuildId = 10;
  if (has_attackguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->attackguildid(), target);
  }

  // optional uint64 DefenseGuildId = 11;
  if (has_defenseguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->defenseguildid(), target);
  }

  // optional uint32 BattleInfoId = 12;
  if (has_battleinfoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->battleinfoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarBattleRecordInfo)
  return target;
}

int TGuildWarBattleRecordInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 AttackUid = 1;
    if (has_attackuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attackuid());
    }

    // optional uint64 DefenseUid = 2;
    if (has_defenseuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->defenseuid());
    }

    // optional uint32 TowerId = 3;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

    // optional uint32 TeamIndex = 4;
    if (has_teamindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamindex());
    }

    // optional uint64 AttackFightForce = 5;
    if (has_attackfightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attackfightforce());
    }

    // optional uint64 DefenseFightForce = 6;
    if (has_defensefightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->defensefightforce());
    }

    // optional uint64 RecordTime = 7;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recordtime());
    }

    // optional uint32 Success = 8;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->success());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 Rid = 9;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rid());
    }

    // optional uint64 AttackGuildId = 10;
    if (has_attackguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attackguildid());
    }

    // optional uint64 DefenseGuildId = 11;
    if (has_defenseguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->defenseguildid());
    }

    // optional uint32 BattleInfoId = 12;
    if (has_battleinfoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleinfoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarBattleRecordInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarBattleRecordInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarBattleRecordInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarBattleRecordInfo::MergeFrom(const TGuildWarBattleRecordInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attackuid()) {
      set_attackuid(from.attackuid());
    }
    if (from.has_defenseuid()) {
      set_defenseuid(from.defenseuid());
    }
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
    if (from.has_teamindex()) {
      set_teamindex(from.teamindex());
    }
    if (from.has_attackfightforce()) {
      set_attackfightforce(from.attackfightforce());
    }
    if (from.has_defensefightforce()) {
      set_defensefightforce(from.defensefightforce());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_attackguildid()) {
      set_attackguildid(from.attackguildid());
    }
    if (from.has_defenseguildid()) {
      set_defenseguildid(from.defenseguildid());
    }
    if (from.has_battleinfoid()) {
      set_battleinfoid(from.battleinfoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarBattleRecordInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarBattleRecordInfo::CopyFrom(const TGuildWarBattleRecordInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarBattleRecordInfo::IsInitialized() const {

  return true;
}

void TGuildWarBattleRecordInfo::Swap(TGuildWarBattleRecordInfo* other) {
  if (other != this) {
    std::swap(attackuid_, other->attackuid_);
    std::swap(defenseuid_, other->defenseuid_);
    std::swap(towerid_, other->towerid_);
    std::swap(teamindex_, other->teamindex_);
    std::swap(attackfightforce_, other->attackfightforce_);
    std::swap(defensefightforce_, other->defensefightforce_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(success_, other->success_);
    std::swap(rid_, other->rid_);
    std::swap(attackguildid_, other->attackguildid_);
    std::swap(defenseguildid_, other->defenseguildid_);
    std::swap(battleinfoid_, other->battleinfoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarBattleRecordInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarBattleRecordInfo_descriptor_;
  metadata.reflection = TGuildWarBattleRecordInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarRankInfo::kUidFieldNumber;
const int TGuildWarRankInfo::kDefeatNumFieldNumber;
const int TGuildWarRankInfo::kDefeatTimeFieldNumber;
const int TGuildWarRankInfo::kDamageNumFieldNumber;
const int TGuildWarRankInfo::kDamageTimeFieldNumber;
#endif  // !_MSC_VER

TGuildWarRankInfo::TGuildWarRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarRankInfo)
}

void TGuildWarRankInfo::InitAsDefaultInstance() {
}

TGuildWarRankInfo::TGuildWarRankInfo(const TGuildWarRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarRankInfo)
}

void TGuildWarRankInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  defeatnum_ = 0u;
  defeattime_ = GOOGLE_ULONGLONG(0);
  damagenum_ = GOOGLE_ULONGLONG(0);
  damagetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarRankInfo::~TGuildWarRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarRankInfo)
  SharedDtor();
}

void TGuildWarRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarRankInfo_descriptor_;
}

const TGuildWarRankInfo& TGuildWarRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarRankInfo* TGuildWarRankInfo::default_instance_ = NULL;

TGuildWarRankInfo* TGuildWarRankInfo::New() const {
  return new TGuildWarRankInfo;
}

void TGuildWarRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(uid_, defeatnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DefeatNum;
        break;
      }

      // optional uint32 DefeatNum = 2;
      case 2: {
        if (tag == 16) {
         parse_DefeatNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defeatnum_)));
          set_has_defeatnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_DefeatTime;
        break;
      }

      // optional uint64 DefeatTime = 3;
      case 3: {
        if (tag == 24) {
         parse_DefeatTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &defeattime_)));
          set_has_defeattime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DamageNum;
        break;
      }

      // optional uint64 DamageNum = 4;
      case 4: {
        if (tag == 32) {
         parse_DamageNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damagenum_)));
          set_has_damagenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_DamageTime;
        break;
      }

      // optional uint64 DamageTime = 5;
      case 5: {
        if (tag == 40) {
         parse_DamageTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damagetime_)));
          set_has_damagetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarRankInfo)
  return false;
#undef DO_
}

void TGuildWarRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarRankInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 DefeatNum = 2;
  if (has_defeatnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->defeatnum(), output);
  }

  // optional uint64 DefeatTime = 3;
  if (has_defeattime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->defeattime(), output);
  }

  // optional uint64 DamageNum = 4;
  if (has_damagenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->damagenum(), output);
  }

  // optional uint64 DamageTime = 5;
  if (has_damagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->damagetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarRankInfo)
}

::google::protobuf::uint8* TGuildWarRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarRankInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 DefeatNum = 2;
  if (has_defeatnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->defeatnum(), target);
  }

  // optional uint64 DefeatTime = 3;
  if (has_defeattime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->defeattime(), target);
  }

  // optional uint64 DamageNum = 4;
  if (has_damagenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->damagenum(), target);
  }

  // optional uint64 DamageTime = 5;
  if (has_damagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->damagetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarRankInfo)
  return target;
}

int TGuildWarRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 DefeatNum = 2;
    if (has_defeatnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defeatnum());
    }

    // optional uint64 DefeatTime = 3;
    if (has_defeattime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->defeattime());
    }

    // optional uint64 DamageNum = 4;
    if (has_damagenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damagenum());
    }

    // optional uint64 DamageTime = 5;
    if (has_damagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damagetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarRankInfo::MergeFrom(const TGuildWarRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_defeatnum()) {
      set_defeatnum(from.defeatnum());
    }
    if (from.has_defeattime()) {
      set_defeattime(from.defeattime());
    }
    if (from.has_damagenum()) {
      set_damagenum(from.damagenum());
    }
    if (from.has_damagetime()) {
      set_damagetime(from.damagetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarRankInfo::CopyFrom(const TGuildWarRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarRankInfo::IsInitialized() const {

  return true;
}

void TGuildWarRankInfo::Swap(TGuildWarRankInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(defeatnum_, other->defeatnum_);
    std::swap(defeattime_, other->defeattime_);
    std::swap(damagenum_, other->damagenum_);
    std::swap(damagetime_, other->damagetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarRankInfo_descriptor_;
  metadata.reflection = TGuildWarRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarStageInfo::kCurStageFieldNumber;
const int TGuildWarStageInfo::kBeginTimeFieldNumber;
const int TGuildWarStageInfo::kEndTimeFieldNumber;
const int TGuildWarStageInfo::kSignUpTimeFieldNumber;
const int TGuildWarStageInfo::kSelfGLevelFieldNumber;
const int TGuildWarStageInfo::kSelfGPosFieldNumber;
const int TGuildWarStageInfo::kTargetGidFieldNumber;
const int TGuildWarStageInfo::kTargetGNameFieldNumber;
const int TGuildWarStageInfo::kTargetServerIdFieldNumber;
const int TGuildWarStageInfo::kTargetGLevelFieldNumber;
const int TGuildWarStageInfo::kArrCallForBattleResultFieldNumber;
const int TGuildWarStageInfo::kGuildWarResultFieldNumber;
const int TGuildWarStageInfo::kSceneIdFieldNumber;
const int TGuildWarStageInfo::kSurplusAttackNumFieldNumber;
const int TGuildWarStageInfo::kIsSetCallForBattleHeroFieldNumber;
const int TGuildWarStageInfo::kArrSelfTowerInfoFieldNumber;
const int TGuildWarStageInfo::kArrSelfTeamBaseInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarStageInfo::TGuildWarStageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarStageInfo)
}

void TGuildWarStageInfo::InitAsDefaultInstance() {
}

TGuildWarStageInfo::TGuildWarStageInfo(const TGuildWarStageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarStageInfo)
}

void TGuildWarStageInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  curstage_ = 0;
  begintime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  signuptime_ = GOOGLE_ULONGLONG(0);
  selfglevel_ = 0u;
  selfgpos_ = 0u;
  targetgid_ = GOOGLE_ULONGLONG(0);
  targetgname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetserverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targetglevel_ = 0u;
  guildwarresult_ = 0;
  sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  surplusattacknum_ = 0u;
  issetcallforbattlehero_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarStageInfo::~TGuildWarStageInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarStageInfo)
  SharedDtor();
}

void TGuildWarStageInfo::SharedDtor() {
  if (targetgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetgname_;
  }
  if (targetserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetserverid_;
  }
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (this != default_instance_) {
  }
}

void TGuildWarStageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarStageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarStageInfo_descriptor_;
}

const TGuildWarStageInfo& TGuildWarStageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarStageInfo* TGuildWarStageInfo::default_instance_ = NULL;

TGuildWarStageInfo* TGuildWarStageInfo::New() const {
  return new TGuildWarStageInfo;
}

void TGuildWarStageInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarStageInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(begintime_, targetgid_);
    selfgpos_ = 0u;
    if (has_targetgname()) {
      if (targetgname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetgname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 31488) {
    ZR_(guildwarresult_, surplusattacknum_);
    if (has_targetserverid()) {
      if (targetserverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetserverid_->clear();
      }
    }
    targetglevel_ = 0u;
    if (has_sceneid()) {
      if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneid_->clear();
      }
    }
    issetcallforbattlehero_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrcallforbattleresult_.Clear();
  arrselftowerinfo_.Clear();
  arrselfteambaseinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarStageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarStageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EGuildWarStage CurStage = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuildWarStage_IsValid(value)) {
            set_curstage(static_cast< ::pb::EGuildWarStage >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BeginTime;
        break;
      }

      // optional uint64 BeginTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_SignUpTime;
        break;
      }

      // optional uint64 SignUpTime = 4;
      case 4: {
        if (tag == 32) {
         parse_SignUpTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &signuptime_)));
          set_has_signuptime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_SelfGLevel;
        break;
      }

      // optional uint32 SelfGLevel = 5;
      case 5: {
        if (tag == 40) {
         parse_SelfGLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfglevel_)));
          set_has_selfglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_SelfGPos;
        break;
      }

      // optional uint32 SelfGPos = 6;
      case 6: {
        if (tag == 48) {
         parse_SelfGPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selfgpos_)));
          set_has_selfgpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TargetGid;
        break;
      }

      // optional uint64 TargetGid = 7;
      case 7: {
        if (tag == 56) {
         parse_TargetGid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetgid_)));
          set_has_targetgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_TargetGName;
        break;
      }

      // optional string TargetGName = 8;
      case 8: {
        if (tag == 66) {
         parse_TargetGName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetgname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetgname().data(), this->targetgname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetgname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TargetServerId;
        break;
      }

      // optional string TargetServerId = 9;
      case 9: {
        if (tag == 74) {
         parse_TargetServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetserverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetserverid().data(), this->targetserverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetserverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_TargetGLevel;
        break;
      }

      // optional uint32 TargetGLevel = 10;
      case 10: {
        if (tag == 80) {
         parse_TargetGLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetglevel_)));
          set_has_targetglevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ArrCallForBattleResult;
        break;
      }

      // repeated .pb.EGuildWarResult ArrCallForBattleResult = 11;
      case 11: {
        if (tag == 88) {
         parse_ArrCallForBattleResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuildWarResult_IsValid(value)) {
            add_arrcallforbattleresult(static_cast< ::pb::EGuildWarResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else if (tag == 90) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::pb::EGuildWarResult_IsValid,
                 this->mutable_arrcallforbattleresult())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_ArrCallForBattleResult;
        if (input->ExpectTag(96)) goto parse_GuildWarResult;
        break;
      }

      // optional .pb.EGuildWarResult GuildWarResult = 12;
      case 12: {
        if (tag == 96) {
         parse_GuildWarResult:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuildWarResult_IsValid(value)) {
            set_guildwarresult(static_cast< ::pb::EGuildWarResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_SceneId;
        break;
      }

      // optional string SceneId = 13;
      case 13: {
        if (tag == 106) {
         parse_SceneId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneid().data(), this->sceneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_SurplusAttackNum;
        break;
      }

      // optional uint32 SurplusAttackNum = 14;
      case 14: {
        if (tag == 112) {
         parse_SurplusAttackNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &surplusattacknum_)));
          set_has_surplusattacknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_IsSetCallForBattleHero;
        break;
      }

      // optional bool IsSetCallForBattleHero = 15;
      case 15: {
        if (tag == 120) {
         parse_IsSetCallForBattleHero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issetcallforbattlehero_)));
          set_has_issetcallforbattlehero();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_ArrSelfTowerInfo;
        break;
      }

      // repeated .pb.TGuildWarTowerSimpleInfo ArrSelfTowerInfo = 16;
      case 16: {
        if (tag == 130) {
         parse_ArrSelfTowerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrselftowerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_ArrSelfTowerInfo;
        if (input->ExpectTag(138)) goto parse_ArrSelfTeamBaseInfo;
        break;
      }

      // repeated .pb.TGuildWarTeamBaseInfo ArrSelfTeamBaseInfo = 17;
      case 17: {
        if (tag == 138) {
         parse_ArrSelfTeamBaseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrselfteambaseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ArrSelfTeamBaseInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarStageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarStageInfo)
  return false;
#undef DO_
}

void TGuildWarStageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarStageInfo)
  // optional .pb.EGuildWarStage CurStage = 1;
  if (has_curstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->curstage(), output);
  }

  // optional uint64 BeginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->begintime(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  // optional uint64 SignUpTime = 4;
  if (has_signuptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->signuptime(), output);
  }

  // optional uint32 SelfGLevel = 5;
  if (has_selfglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->selfglevel(), output);
  }

  // optional uint32 SelfGPos = 6;
  if (has_selfgpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->selfgpos(), output);
  }

  // optional uint64 TargetGid = 7;
  if (has_targetgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->targetgid(), output);
  }

  // optional string TargetGName = 8;
  if (has_targetgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetgname().data(), this->targetgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetgname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->targetgname(), output);
  }

  // optional string TargetServerId = 9;
  if (has_targetserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetserverid().data(), this->targetserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetserverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->targetserverid(), output);
  }

  // optional uint32 TargetGLevel = 10;
  if (has_targetglevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->targetglevel(), output);
  }

  // repeated .pb.EGuildWarResult ArrCallForBattleResult = 11;
  for (int i = 0; i < this->arrcallforbattleresult_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->arrcallforbattleresult(i), output);
  }

  // optional .pb.EGuildWarResult GuildWarResult = 12;
  if (has_guildwarresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->guildwarresult(), output);
  }

  // optional string SceneId = 13;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->sceneid(), output);
  }

  // optional uint32 SurplusAttackNum = 14;
  if (has_surplusattacknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->surplusattacknum(), output);
  }

  // optional bool IsSetCallForBattleHero = 15;
  if (has_issetcallforbattlehero()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->issetcallforbattlehero(), output);
  }

  // repeated .pb.TGuildWarTowerSimpleInfo ArrSelfTowerInfo = 16;
  for (int i = 0; i < this->arrselftowerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->arrselftowerinfo(i), output);
  }

  // repeated .pb.TGuildWarTeamBaseInfo ArrSelfTeamBaseInfo = 17;
  for (int i = 0; i < this->arrselfteambaseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->arrselfteambaseinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarStageInfo)
}

::google::protobuf::uint8* TGuildWarStageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarStageInfo)
  // optional .pb.EGuildWarStage CurStage = 1;
  if (has_curstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->curstage(), target);
  }

  // optional uint64 BeginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->begintime(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  // optional uint64 SignUpTime = 4;
  if (has_signuptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->signuptime(), target);
  }

  // optional uint32 SelfGLevel = 5;
  if (has_selfglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->selfglevel(), target);
  }

  // optional uint32 SelfGPos = 6;
  if (has_selfgpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->selfgpos(), target);
  }

  // optional uint64 TargetGid = 7;
  if (has_targetgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->targetgid(), target);
  }

  // optional string TargetGName = 8;
  if (has_targetgname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetgname().data(), this->targetgname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetgname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->targetgname(), target);
  }

  // optional string TargetServerId = 9;
  if (has_targetserverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetserverid().data(), this->targetserverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetserverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->targetserverid(), target);
  }

  // optional uint32 TargetGLevel = 10;
  if (has_targetglevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->targetglevel(), target);
  }

  // repeated .pb.EGuildWarResult ArrCallForBattleResult = 11;
  for (int i = 0; i < this->arrcallforbattleresult_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->arrcallforbattleresult(i), target);
  }

  // optional .pb.EGuildWarResult GuildWarResult = 12;
  if (has_guildwarresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->guildwarresult(), target);
  }

  // optional string SceneId = 13;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneid().data(), this->sceneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->sceneid(), target);
  }

  // optional uint32 SurplusAttackNum = 14;
  if (has_surplusattacknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->surplusattacknum(), target);
  }

  // optional bool IsSetCallForBattleHero = 15;
  if (has_issetcallforbattlehero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->issetcallforbattlehero(), target);
  }

  // repeated .pb.TGuildWarTowerSimpleInfo ArrSelfTowerInfo = 16;
  for (int i = 0; i < this->arrselftowerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->arrselftowerinfo(i), target);
  }

  // repeated .pb.TGuildWarTeamBaseInfo ArrSelfTeamBaseInfo = 17;
  for (int i = 0; i < this->arrselfteambaseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->arrselfteambaseinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarStageInfo)
  return target;
}

int TGuildWarStageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EGuildWarStage CurStage = 1;
    if (has_curstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->curstage());
    }

    // optional uint64 BeginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint64 SignUpTime = 4;
    if (has_signuptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->signuptime());
    }

    // optional uint32 SelfGLevel = 5;
    if (has_selfglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfglevel());
    }

    // optional uint32 SelfGPos = 6;
    if (has_selfgpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selfgpos());
    }

    // optional uint64 TargetGid = 7;
    if (has_targetgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetgid());
    }

    // optional string TargetGName = 8;
    if (has_targetgname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetgname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string TargetServerId = 9;
    if (has_targetserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetserverid());
    }

    // optional uint32 TargetGLevel = 10;
    if (has_targetglevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetglevel());
    }

    // optional .pb.EGuildWarResult GuildWarResult = 12;
    if (has_guildwarresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->guildwarresult());
    }

    // optional string SceneId = 13;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneid());
    }

    // optional uint32 SurplusAttackNum = 14;
    if (has_surplusattacknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->surplusattacknum());
    }

    // optional bool IsSetCallForBattleHero = 15;
    if (has_issetcallforbattlehero()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.EGuildWarResult ArrCallForBattleResult = 11;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrcallforbattleresult_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->arrcallforbattleresult(i));
    }
    total_size += 1 * this->arrcallforbattleresult_size() + data_size;
  }

  // repeated .pb.TGuildWarTowerSimpleInfo ArrSelfTowerInfo = 16;
  total_size += 2 * this->arrselftowerinfo_size();
  for (int i = 0; i < this->arrselftowerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrselftowerinfo(i));
  }

  // repeated .pb.TGuildWarTeamBaseInfo ArrSelfTeamBaseInfo = 17;
  total_size += 2 * this->arrselfteambaseinfo_size();
  for (int i = 0; i < this->arrselfteambaseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrselfteambaseinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarStageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarStageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarStageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarStageInfo::MergeFrom(const TGuildWarStageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrcallforbattleresult_.MergeFrom(from.arrcallforbattleresult_);
  arrselftowerinfo_.MergeFrom(from.arrselftowerinfo_);
  arrselfteambaseinfo_.MergeFrom(from.arrselfteambaseinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curstage()) {
      set_curstage(from.curstage());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_signuptime()) {
      set_signuptime(from.signuptime());
    }
    if (from.has_selfglevel()) {
      set_selfglevel(from.selfglevel());
    }
    if (from.has_selfgpos()) {
      set_selfgpos(from.selfgpos());
    }
    if (from.has_targetgid()) {
      set_targetgid(from.targetgid());
    }
    if (from.has_targetgname()) {
      set_targetgname(from.targetgname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_targetserverid()) {
      set_targetserverid(from.targetserverid());
    }
    if (from.has_targetglevel()) {
      set_targetglevel(from.targetglevel());
    }
    if (from.has_guildwarresult()) {
      set_guildwarresult(from.guildwarresult());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_surplusattacknum()) {
      set_surplusattacknum(from.surplusattacknum());
    }
    if (from.has_issetcallforbattlehero()) {
      set_issetcallforbattlehero(from.issetcallforbattlehero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarStageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarStageInfo::CopyFrom(const TGuildWarStageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarStageInfo::IsInitialized() const {

  return true;
}

void TGuildWarStageInfo::Swap(TGuildWarStageInfo* other) {
  if (other != this) {
    std::swap(curstage_, other->curstage_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(signuptime_, other->signuptime_);
    std::swap(selfglevel_, other->selfglevel_);
    std::swap(selfgpos_, other->selfgpos_);
    std::swap(targetgid_, other->targetgid_);
    std::swap(targetgname_, other->targetgname_);
    std::swap(targetserverid_, other->targetserverid_);
    std::swap(targetglevel_, other->targetglevel_);
    arrcallforbattleresult_.Swap(&other->arrcallforbattleresult_);
    std::swap(guildwarresult_, other->guildwarresult_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(surplusattacknum_, other->surplusattacknum_);
    std::swap(issetcallforbattlehero_, other->issetcallforbattlehero_);
    arrselftowerinfo_.Swap(&other->arrselftowerinfo_);
    arrselfteambaseinfo_.Swap(&other->arrselfteambaseinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarStageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarStageInfo_descriptor_;
  metadata.reflection = TGuildWarStageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetServerTeamInfoRsp::kTeamIdFieldNumber;
const int TGuildWarGetServerTeamInfoRsp::kNeedOpenDayFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetServerTeamInfoRsp::TGuildWarGetServerTeamInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetServerTeamInfoRsp)
}

void TGuildWarGetServerTeamInfoRsp::InitAsDefaultInstance() {
}

TGuildWarGetServerTeamInfoRsp::TGuildWarGetServerTeamInfoRsp(const TGuildWarGetServerTeamInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetServerTeamInfoRsp)
}

void TGuildWarGetServerTeamInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  needopenday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetServerTeamInfoRsp::~TGuildWarGetServerTeamInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetServerTeamInfoRsp)
  SharedDtor();
}

void TGuildWarGetServerTeamInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetServerTeamInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetServerTeamInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetServerTeamInfoRsp_descriptor_;
}

const TGuildWarGetServerTeamInfoRsp& TGuildWarGetServerTeamInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetServerTeamInfoRsp* TGuildWarGetServerTeamInfoRsp::default_instance_ = NULL;

TGuildWarGetServerTeamInfoRsp* TGuildWarGetServerTeamInfoRsp::New() const {
  return new TGuildWarGetServerTeamInfoRsp;
}

void TGuildWarGetServerTeamInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildWarGetServerTeamInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(teamid_, needopenday_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetServerTeamInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetServerTeamInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TeamId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_NeedOpenDay;
        break;
      }

      // optional uint32 NeedOpenDay = 2;
      case 2: {
        if (tag == 16) {
         parse_NeedOpenDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needopenday_)));
          set_has_needopenday();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetServerTeamInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetServerTeamInfoRsp)
  return false;
#undef DO_
}

void TGuildWarGetServerTeamInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetServerTeamInfoRsp)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 NeedOpenDay = 2;
  if (has_needopenday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->needopenday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetServerTeamInfoRsp)
}

::google::protobuf::uint8* TGuildWarGetServerTeamInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetServerTeamInfoRsp)
  // optional uint32 TeamId = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 NeedOpenDay = 2;
  if (has_needopenday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->needopenday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetServerTeamInfoRsp)
  return target;
}

int TGuildWarGetServerTeamInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TeamId = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 NeedOpenDay = 2;
    if (has_needopenday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needopenday());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetServerTeamInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetServerTeamInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetServerTeamInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetServerTeamInfoRsp::MergeFrom(const TGuildWarGetServerTeamInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_needopenday()) {
      set_needopenday(from.needopenday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetServerTeamInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetServerTeamInfoRsp::CopyFrom(const TGuildWarGetServerTeamInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetServerTeamInfoRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetServerTeamInfoRsp::Swap(TGuildWarGetServerTeamInfoRsp* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(needopenday_, other->needopenday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetServerTeamInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetServerTeamInfoRsp_descriptor_;
  metadata.reflection = TGuildWarGetServerTeamInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetStageInfoRsp::kStageInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetStageInfoRsp::TGuildWarGetStageInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetStageInfoRsp)
}

void TGuildWarGetStageInfoRsp::InitAsDefaultInstance() {
  stageinfo_ = const_cast< ::pb::TGuildWarStageInfo*>(&::pb::TGuildWarStageInfo::default_instance());
}

TGuildWarGetStageInfoRsp::TGuildWarGetStageInfoRsp(const TGuildWarGetStageInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetStageInfoRsp)
}

void TGuildWarGetStageInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  stageinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetStageInfoRsp::~TGuildWarGetStageInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetStageInfoRsp)
  SharedDtor();
}

void TGuildWarGetStageInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete stageinfo_;
  }
}

void TGuildWarGetStageInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetStageInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetStageInfoRsp_descriptor_;
}

const TGuildWarGetStageInfoRsp& TGuildWarGetStageInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetStageInfoRsp* TGuildWarGetStageInfoRsp::default_instance_ = NULL;

TGuildWarGetStageInfoRsp* TGuildWarGetStageInfoRsp::New() const {
  return new TGuildWarGetStageInfoRsp;
}

void TGuildWarGetStageInfoRsp::Clear() {
  if (has_stageinfo()) {
    if (stageinfo_ != NULL) stageinfo_->::pb::TGuildWarStageInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetStageInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetStageInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarStageInfo StageInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetStageInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetStageInfoRsp)
  return false;
#undef DO_
}

void TGuildWarGetStageInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetStageInfoRsp)
  // optional .pb.TGuildWarStageInfo StageInfo = 1;
  if (has_stageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stageinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetStageInfoRsp)
}

::google::protobuf::uint8* TGuildWarGetStageInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetStageInfoRsp)
  // optional .pb.TGuildWarStageInfo StageInfo = 1;
  if (has_stageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stageinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetStageInfoRsp)
  return target;
}

int TGuildWarGetStageInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarStageInfo StageInfo = 1;
    if (has_stageinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stageinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetStageInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetStageInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetStageInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetStageInfoRsp::MergeFrom(const TGuildWarGetStageInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageinfo()) {
      mutable_stageinfo()->::pb::TGuildWarStageInfo::MergeFrom(from.stageinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetStageInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetStageInfoRsp::CopyFrom(const TGuildWarGetStageInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetStageInfoRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetStageInfoRsp::Swap(TGuildWarGetStageInfoRsp* other) {
  if (other != this) {
    std::swap(stageinfo_, other->stageinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetStageInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetStageInfoRsp_descriptor_;
  metadata.reflection = TGuildWarGetStageInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarEnterFieldRsp::kFieldInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarEnterFieldRsp::TGuildWarEnterFieldRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarEnterFieldRsp)
}

void TGuildWarEnterFieldRsp::InitAsDefaultInstance() {
  fieldinfo_ = const_cast< ::pb::TGuildWarFieldInfo*>(&::pb::TGuildWarFieldInfo::default_instance());
}

TGuildWarEnterFieldRsp::TGuildWarEnterFieldRsp(const TGuildWarEnterFieldRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarEnterFieldRsp)
}

void TGuildWarEnterFieldRsp::SharedCtor() {
  _cached_size_ = 0;
  fieldinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarEnterFieldRsp::~TGuildWarEnterFieldRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarEnterFieldRsp)
  SharedDtor();
}

void TGuildWarEnterFieldRsp::SharedDtor() {
  if (this != default_instance_) {
    delete fieldinfo_;
  }
}

void TGuildWarEnterFieldRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarEnterFieldRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarEnterFieldRsp_descriptor_;
}

const TGuildWarEnterFieldRsp& TGuildWarEnterFieldRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarEnterFieldRsp* TGuildWarEnterFieldRsp::default_instance_ = NULL;

TGuildWarEnterFieldRsp* TGuildWarEnterFieldRsp::New() const {
  return new TGuildWarEnterFieldRsp;
}

void TGuildWarEnterFieldRsp::Clear() {
  if (has_fieldinfo()) {
    if (fieldinfo_ != NULL) fieldinfo_->::pb::TGuildWarFieldInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarEnterFieldRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarEnterFieldRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarFieldInfo FieldInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fieldinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarEnterFieldRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarEnterFieldRsp)
  return false;
#undef DO_
}

void TGuildWarEnterFieldRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarEnterFieldRsp)
  // optional .pb.TGuildWarFieldInfo FieldInfo = 1;
  if (has_fieldinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarEnterFieldRsp)
}

::google::protobuf::uint8* TGuildWarEnterFieldRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarEnterFieldRsp)
  // optional .pb.TGuildWarFieldInfo FieldInfo = 1;
  if (has_fieldinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fieldinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarEnterFieldRsp)
  return target;
}

int TGuildWarEnterFieldRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarFieldInfo FieldInfo = 1;
    if (has_fieldinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fieldinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarEnterFieldRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarEnterFieldRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarEnterFieldRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarEnterFieldRsp::MergeFrom(const TGuildWarEnterFieldRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldinfo()) {
      mutable_fieldinfo()->::pb::TGuildWarFieldInfo::MergeFrom(from.fieldinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarEnterFieldRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarEnterFieldRsp::CopyFrom(const TGuildWarEnterFieldRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarEnterFieldRsp::IsInitialized() const {

  return true;
}

void TGuildWarEnterFieldRsp::Swap(TGuildWarEnterFieldRsp* other) {
  if (other != this) {
    std::swap(fieldinfo_, other->fieldinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarEnterFieldRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarEnterFieldRsp_descriptor_;
  metadata.reflection = TGuildWarEnterFieldRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetFieldInfoRsp::kFieldInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetFieldInfoRsp::TGuildWarGetFieldInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetFieldInfoRsp)
}

void TGuildWarGetFieldInfoRsp::InitAsDefaultInstance() {
  fieldinfo_ = const_cast< ::pb::TGuildWarFieldInfo*>(&::pb::TGuildWarFieldInfo::default_instance());
}

TGuildWarGetFieldInfoRsp::TGuildWarGetFieldInfoRsp(const TGuildWarGetFieldInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetFieldInfoRsp)
}

void TGuildWarGetFieldInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  fieldinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetFieldInfoRsp::~TGuildWarGetFieldInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetFieldInfoRsp)
  SharedDtor();
}

void TGuildWarGetFieldInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete fieldinfo_;
  }
}

void TGuildWarGetFieldInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetFieldInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetFieldInfoRsp_descriptor_;
}

const TGuildWarGetFieldInfoRsp& TGuildWarGetFieldInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetFieldInfoRsp* TGuildWarGetFieldInfoRsp::default_instance_ = NULL;

TGuildWarGetFieldInfoRsp* TGuildWarGetFieldInfoRsp::New() const {
  return new TGuildWarGetFieldInfoRsp;
}

void TGuildWarGetFieldInfoRsp::Clear() {
  if (has_fieldinfo()) {
    if (fieldinfo_ != NULL) fieldinfo_->::pb::TGuildWarFieldInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetFieldInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetFieldInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarFieldInfo FieldInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fieldinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetFieldInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetFieldInfoRsp)
  return false;
#undef DO_
}

void TGuildWarGetFieldInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetFieldInfoRsp)
  // optional .pb.TGuildWarFieldInfo FieldInfo = 1;
  if (has_fieldinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fieldinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetFieldInfoRsp)
}

::google::protobuf::uint8* TGuildWarGetFieldInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetFieldInfoRsp)
  // optional .pb.TGuildWarFieldInfo FieldInfo = 1;
  if (has_fieldinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fieldinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetFieldInfoRsp)
  return target;
}

int TGuildWarGetFieldInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarFieldInfo FieldInfo = 1;
    if (has_fieldinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fieldinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetFieldInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetFieldInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetFieldInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetFieldInfoRsp::MergeFrom(const TGuildWarGetFieldInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldinfo()) {
      mutable_fieldinfo()->::pb::TGuildWarFieldInfo::MergeFrom(from.fieldinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetFieldInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetFieldInfoRsp::CopyFrom(const TGuildWarGetFieldInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetFieldInfoRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetFieldInfoRsp::Swap(TGuildWarGetFieldInfoRsp* other) {
  if (other != this) {
    std::swap(fieldinfo_, other->fieldinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetFieldInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetFieldInfoRsp_descriptor_;
  metadata.reflection = TGuildWarGetFieldInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarSetTeamFormationReq::kArrTeamFormationFieldNumber;
const int TGuildWarSetTeamFormationReq::kUseHistoryFieldNumber;
#endif  // !_MSC_VER

TGuildWarSetTeamFormationReq::TGuildWarSetTeamFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarSetTeamFormationReq)
}

void TGuildWarSetTeamFormationReq::InitAsDefaultInstance() {
}

TGuildWarSetTeamFormationReq::TGuildWarSetTeamFormationReq(const TGuildWarSetTeamFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarSetTeamFormationReq)
}

void TGuildWarSetTeamFormationReq::SharedCtor() {
  _cached_size_ = 0;
  usehistory_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarSetTeamFormationReq::~TGuildWarSetTeamFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarSetTeamFormationReq)
  SharedDtor();
}

void TGuildWarSetTeamFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarSetTeamFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarSetTeamFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarSetTeamFormationReq_descriptor_;
}

const TGuildWarSetTeamFormationReq& TGuildWarSetTeamFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarSetTeamFormationReq* TGuildWarSetTeamFormationReq::default_instance_ = NULL;

TGuildWarSetTeamFormationReq* TGuildWarSetTeamFormationReq::New() const {
  return new TGuildWarSetTeamFormationReq;
}

void TGuildWarSetTeamFormationReq::Clear() {
  usehistory_ = false;
  arrteamformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarSetTeamFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarSetTeamFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarTeamFormationInfo ArrTeamFormation = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrTeamFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrteamformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrTeamFormation;
        if (input->ExpectTag(16)) goto parse_UseHistory;
        break;
      }

      // optional bool UseHistory = 2;
      case 2: {
        if (tag == 16) {
         parse_UseHistory:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usehistory_)));
          set_has_usehistory();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarSetTeamFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarSetTeamFormationReq)
  return false;
#undef DO_
}

void TGuildWarSetTeamFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarSetTeamFormationReq)
  // repeated .pb.TGuildWarTeamFormationInfo ArrTeamFormation = 1;
  for (int i = 0; i < this->arrteamformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrteamformation(i), output);
  }

  // optional bool UseHistory = 2;
  if (has_usehistory()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->usehistory(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarSetTeamFormationReq)
}

::google::protobuf::uint8* TGuildWarSetTeamFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarSetTeamFormationReq)
  // repeated .pb.TGuildWarTeamFormationInfo ArrTeamFormation = 1;
  for (int i = 0; i < this->arrteamformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrteamformation(i), target);
  }

  // optional bool UseHistory = 2;
  if (has_usehistory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->usehistory(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarSetTeamFormationReq)
  return target;
}

int TGuildWarSetTeamFormationReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool UseHistory = 2;
    if (has_usehistory()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.TGuildWarTeamFormationInfo ArrTeamFormation = 1;
  total_size += 1 * this->arrteamformation_size();
  for (int i = 0; i < this->arrteamformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrteamformation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarSetTeamFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarSetTeamFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarSetTeamFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarSetTeamFormationReq::MergeFrom(const TGuildWarSetTeamFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrteamformation_.MergeFrom(from.arrteamformation_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_usehistory()) {
      set_usehistory(from.usehistory());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarSetTeamFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarSetTeamFormationReq::CopyFrom(const TGuildWarSetTeamFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarSetTeamFormationReq::IsInitialized() const {

  return true;
}

void TGuildWarSetTeamFormationReq::Swap(TGuildWarSetTeamFormationReq* other) {
  if (other != this) {
    arrteamformation_.Swap(&other->arrteamformation_);
    std::swap(usehistory_, other->usehistory_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarSetTeamFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarSetTeamFormationReq_descriptor_;
  metadata.reflection = TGuildWarSetTeamFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarSetTeamFormationRsp::kArrTeamInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarSetTeamFormationRsp::TGuildWarSetTeamFormationRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarSetTeamFormationRsp)
}

void TGuildWarSetTeamFormationRsp::InitAsDefaultInstance() {
}

TGuildWarSetTeamFormationRsp::TGuildWarSetTeamFormationRsp(const TGuildWarSetTeamFormationRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarSetTeamFormationRsp)
}

void TGuildWarSetTeamFormationRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarSetTeamFormationRsp::~TGuildWarSetTeamFormationRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarSetTeamFormationRsp)
  SharedDtor();
}

void TGuildWarSetTeamFormationRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarSetTeamFormationRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarSetTeamFormationRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarSetTeamFormationRsp_descriptor_;
}

const TGuildWarSetTeamFormationRsp& TGuildWarSetTeamFormationRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarSetTeamFormationRsp* TGuildWarSetTeamFormationRsp::default_instance_ = NULL;

TGuildWarSetTeamFormationRsp* TGuildWarSetTeamFormationRsp::New() const {
  return new TGuildWarSetTeamFormationRsp;
}

void TGuildWarSetTeamFormationRsp::Clear() {
  arrteaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarSetTeamFormationRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarSetTeamFormationRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrteaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrTeamInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarSetTeamFormationRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarSetTeamFormationRsp)
  return false;
#undef DO_
}

void TGuildWarSetTeamFormationRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarSetTeamFormationRsp)
  // repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 1;
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrteaminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarSetTeamFormationRsp)
}

::google::protobuf::uint8* TGuildWarSetTeamFormationRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarSetTeamFormationRsp)
  // repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 1;
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrteaminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarSetTeamFormationRsp)
  return target;
}

int TGuildWarSetTeamFormationRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWarUserTeamInfo ArrTeamInfo = 1;
  total_size += 1 * this->arrteaminfo_size();
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrteaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarSetTeamFormationRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarSetTeamFormationRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarSetTeamFormationRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarSetTeamFormationRsp::MergeFrom(const TGuildWarSetTeamFormationRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrteaminfo_.MergeFrom(from.arrteaminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarSetTeamFormationRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarSetTeamFormationRsp::CopyFrom(const TGuildWarSetTeamFormationRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarSetTeamFormationRsp::IsInitialized() const {

  return true;
}

void TGuildWarSetTeamFormationRsp::Swap(TGuildWarSetTeamFormationRsp* other) {
  if (other != this) {
    arrteaminfo_.Swap(&other->arrteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarSetTeamFormationRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarSetTeamFormationRsp_descriptor_;
  metadata.reflection = TGuildWarSetTeamFormationRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarSetCallForBattleHeroReq::kHidFieldNumber;
#endif  // !_MSC_VER

TGuildWarSetCallForBattleHeroReq::TGuildWarSetCallForBattleHeroReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarSetCallForBattleHeroReq)
}

void TGuildWarSetCallForBattleHeroReq::InitAsDefaultInstance() {
}

TGuildWarSetCallForBattleHeroReq::TGuildWarSetCallForBattleHeroReq(const TGuildWarSetCallForBattleHeroReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarSetCallForBattleHeroReq)
}

void TGuildWarSetCallForBattleHeroReq::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarSetCallForBattleHeroReq::~TGuildWarSetCallForBattleHeroReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarSetCallForBattleHeroReq)
  SharedDtor();
}

void TGuildWarSetCallForBattleHeroReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarSetCallForBattleHeroReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarSetCallForBattleHeroReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarSetCallForBattleHeroReq_descriptor_;
}

const TGuildWarSetCallForBattleHeroReq& TGuildWarSetCallForBattleHeroReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarSetCallForBattleHeroReq* TGuildWarSetCallForBattleHeroReq::default_instance_ = NULL;

TGuildWarSetCallForBattleHeroReq* TGuildWarSetCallForBattleHeroReq::New() const {
  return new TGuildWarSetCallForBattleHeroReq;
}

void TGuildWarSetCallForBattleHeroReq::Clear() {
  hid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarSetCallForBattleHeroReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarSetCallForBattleHeroReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarSetCallForBattleHeroReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarSetCallForBattleHeroReq)
  return false;
#undef DO_
}

void TGuildWarSetCallForBattleHeroReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarSetCallForBattleHeroReq)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarSetCallForBattleHeroReq)
}

::google::protobuf::uint8* TGuildWarSetCallForBattleHeroReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarSetCallForBattleHeroReq)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarSetCallForBattleHeroReq)
  return target;
}

int TGuildWarSetCallForBattleHeroReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarSetCallForBattleHeroReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarSetCallForBattleHeroReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarSetCallForBattleHeroReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarSetCallForBattleHeroReq::MergeFrom(const TGuildWarSetCallForBattleHeroReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarSetCallForBattleHeroReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarSetCallForBattleHeroReq::CopyFrom(const TGuildWarSetCallForBattleHeroReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarSetCallForBattleHeroReq::IsInitialized() const {

  return true;
}

void TGuildWarSetCallForBattleHeroReq::Swap(TGuildWarSetCallForBattleHeroReq* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarSetCallForBattleHeroReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarSetCallForBattleHeroReq_descriptor_;
  metadata.reflection = TGuildWarSetCallForBattleHeroReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarSetCallForBattleHeroRsp::kCallForBattleHeroFieldNumber;
#endif  // !_MSC_VER

TGuildWarSetCallForBattleHeroRsp::TGuildWarSetCallForBattleHeroRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarSetCallForBattleHeroRsp)
}

void TGuildWarSetCallForBattleHeroRsp::InitAsDefaultInstance() {
  callforbattlehero_ = const_cast< ::pb::TGuildWarHeroDetailInfo*>(&::pb::TGuildWarHeroDetailInfo::default_instance());
}

TGuildWarSetCallForBattleHeroRsp::TGuildWarSetCallForBattleHeroRsp(const TGuildWarSetCallForBattleHeroRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarSetCallForBattleHeroRsp)
}

void TGuildWarSetCallForBattleHeroRsp::SharedCtor() {
  _cached_size_ = 0;
  callforbattlehero_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarSetCallForBattleHeroRsp::~TGuildWarSetCallForBattleHeroRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarSetCallForBattleHeroRsp)
  SharedDtor();
}

void TGuildWarSetCallForBattleHeroRsp::SharedDtor() {
  if (this != default_instance_) {
    delete callforbattlehero_;
  }
}

void TGuildWarSetCallForBattleHeroRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarSetCallForBattleHeroRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarSetCallForBattleHeroRsp_descriptor_;
}

const TGuildWarSetCallForBattleHeroRsp& TGuildWarSetCallForBattleHeroRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarSetCallForBattleHeroRsp* TGuildWarSetCallForBattleHeroRsp::default_instance_ = NULL;

TGuildWarSetCallForBattleHeroRsp* TGuildWarSetCallForBattleHeroRsp::New() const {
  return new TGuildWarSetCallForBattleHeroRsp;
}

void TGuildWarSetCallForBattleHeroRsp::Clear() {
  if (has_callforbattlehero()) {
    if (callforbattlehero_ != NULL) callforbattlehero_->::pb::TGuildWarHeroDetailInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarSetCallForBattleHeroRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarSetCallForBattleHeroRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_callforbattlehero()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarSetCallForBattleHeroRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarSetCallForBattleHeroRsp)
  return false;
#undef DO_
}

void TGuildWarSetCallForBattleHeroRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarSetCallForBattleHeroRsp)
  // optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 1;
  if (has_callforbattlehero()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->callforbattlehero(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarSetCallForBattleHeroRsp)
}

::google::protobuf::uint8* TGuildWarSetCallForBattleHeroRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarSetCallForBattleHeroRsp)
  // optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 1;
  if (has_callforbattlehero()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->callforbattlehero(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarSetCallForBattleHeroRsp)
  return target;
}

int TGuildWarSetCallForBattleHeroRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarHeroDetailInfo CallForBattleHero = 1;
    if (has_callforbattlehero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->callforbattlehero());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarSetCallForBattleHeroRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarSetCallForBattleHeroRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarSetCallForBattleHeroRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarSetCallForBattleHeroRsp::MergeFrom(const TGuildWarSetCallForBattleHeroRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callforbattlehero()) {
      mutable_callforbattlehero()->::pb::TGuildWarHeroDetailInfo::MergeFrom(from.callforbattlehero());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarSetCallForBattleHeroRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarSetCallForBattleHeroRsp::CopyFrom(const TGuildWarSetCallForBattleHeroRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarSetCallForBattleHeroRsp::IsInitialized() const {

  return true;
}

void TGuildWarSetCallForBattleHeroRsp::Swap(TGuildWarSetCallForBattleHeroRsp* other) {
  if (other != this) {
    std::swap(callforbattlehero_, other->callforbattlehero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarSetCallForBattleHeroRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarSetCallForBattleHeroRsp_descriptor_;
  metadata.reflection = TGuildWarSetCallForBattleHeroRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarSetAttackFormationReq::kArrFormationFieldNumber;
#endif  // !_MSC_VER

TGuildWarSetAttackFormationReq::TGuildWarSetAttackFormationReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarSetAttackFormationReq)
}

void TGuildWarSetAttackFormationReq::InitAsDefaultInstance() {
}

TGuildWarSetAttackFormationReq::TGuildWarSetAttackFormationReq(const TGuildWarSetAttackFormationReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarSetAttackFormationReq)
}

void TGuildWarSetAttackFormationReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarSetAttackFormationReq::~TGuildWarSetAttackFormationReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarSetAttackFormationReq)
  SharedDtor();
}

void TGuildWarSetAttackFormationReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarSetAttackFormationReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarSetAttackFormationReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarSetAttackFormationReq_descriptor_;
}

const TGuildWarSetAttackFormationReq& TGuildWarSetAttackFormationReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarSetAttackFormationReq* TGuildWarSetAttackFormationReq::default_instance_ = NULL;

TGuildWarSetAttackFormationReq* TGuildWarSetAttackFormationReq::New() const {
  return new TGuildWarSetAttackFormationReq;
}

void TGuildWarSetAttackFormationReq::Clear() {
  arrformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarSetAttackFormationReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarSetAttackFormationReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarFormation ArrFormation = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrFormation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarSetAttackFormationReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarSetAttackFormationReq)
  return false;
#undef DO_
}

void TGuildWarSetAttackFormationReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarSetAttackFormationReq)
  // repeated .pb.TGuildWarFormation ArrFormation = 1;
  for (int i = 0; i < this->arrformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrformation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarSetAttackFormationReq)
}

::google::protobuf::uint8* TGuildWarSetAttackFormationReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarSetAttackFormationReq)
  // repeated .pb.TGuildWarFormation ArrFormation = 1;
  for (int i = 0; i < this->arrformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrformation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarSetAttackFormationReq)
  return target;
}

int TGuildWarSetAttackFormationReq::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWarFormation ArrFormation = 1;
  total_size += 1 * this->arrformation_size();
  for (int i = 0; i < this->arrformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrformation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarSetAttackFormationReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarSetAttackFormationReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarSetAttackFormationReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarSetAttackFormationReq::MergeFrom(const TGuildWarSetAttackFormationReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrformation_.MergeFrom(from.arrformation_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarSetAttackFormationReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarSetAttackFormationReq::CopyFrom(const TGuildWarSetAttackFormationReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarSetAttackFormationReq::IsInitialized() const {

  return true;
}

void TGuildWarSetAttackFormationReq::Swap(TGuildWarSetAttackFormationReq* other) {
  if (other != this) {
    arrformation_.Swap(&other->arrformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarSetAttackFormationReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarSetAttackFormationReq_descriptor_;
  metadata.reflection = TGuildWarSetAttackFormationReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTowerInfoReq::kTowerIdFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTowerInfoReq::TGuildWarGetTowerInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTowerInfoReq)
}

void TGuildWarGetTowerInfoReq::InitAsDefaultInstance() {
}

TGuildWarGetTowerInfoReq::TGuildWarGetTowerInfoReq(const TGuildWarGetTowerInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTowerInfoReq)
}

void TGuildWarGetTowerInfoReq::SharedCtor() {
  _cached_size_ = 0;
  towerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTowerInfoReq::~TGuildWarGetTowerInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTowerInfoReq)
  SharedDtor();
}

void TGuildWarGetTowerInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetTowerInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTowerInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTowerInfoReq_descriptor_;
}

const TGuildWarGetTowerInfoReq& TGuildWarGetTowerInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTowerInfoReq* TGuildWarGetTowerInfoReq::default_instance_ = NULL;

TGuildWarGetTowerInfoReq* TGuildWarGetTowerInfoReq::New() const {
  return new TGuildWarGetTowerInfoReq;
}

void TGuildWarGetTowerInfoReq::Clear() {
  towerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTowerInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTowerInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTowerInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTowerInfoReq)
  return false;
#undef DO_
}

void TGuildWarGetTowerInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTowerInfoReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTowerInfoReq)
}

::google::protobuf::uint8* TGuildWarGetTowerInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTowerInfoReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTowerInfoReq)
  return target;
}

int TGuildWarGetTowerInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerId = 1;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTowerInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTowerInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTowerInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTowerInfoReq::MergeFrom(const TGuildWarGetTowerInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTowerInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTowerInfoReq::CopyFrom(const TGuildWarGetTowerInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTowerInfoReq::IsInitialized() const {

  return true;
}

void TGuildWarGetTowerInfoReq::Swap(TGuildWarGetTowerInfoReq* other) {
  if (other != this) {
    std::swap(towerid_, other->towerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTowerInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTowerInfoReq_descriptor_;
  metadata.reflection = TGuildWarGetTowerInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTowerInfoRsp::kTowerIdFieldNumber;
const int TGuildWarGetTowerInfoRsp::kArrTeamInfoFieldNumber;
const int TGuildWarGetTowerInfoRsp::kArrUserSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTowerInfoRsp::TGuildWarGetTowerInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTowerInfoRsp)
}

void TGuildWarGetTowerInfoRsp::InitAsDefaultInstance() {
}

TGuildWarGetTowerInfoRsp::TGuildWarGetTowerInfoRsp(const TGuildWarGetTowerInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTowerInfoRsp)
}

void TGuildWarGetTowerInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  towerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTowerInfoRsp::~TGuildWarGetTowerInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTowerInfoRsp)
  SharedDtor();
}

void TGuildWarGetTowerInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetTowerInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTowerInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTowerInfoRsp_descriptor_;
}

const TGuildWarGetTowerInfoRsp& TGuildWarGetTowerInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTowerInfoRsp* TGuildWarGetTowerInfoRsp::default_instance_ = NULL;

TGuildWarGetTowerInfoRsp* TGuildWarGetTowerInfoRsp::New() const {
  return new TGuildWarGetTowerInfoRsp;
}

void TGuildWarGetTowerInfoRsp::Clear() {
  towerid_ = 0u;
  arrteaminfo_.Clear();
  arrusersimpleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTowerInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTowerInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrTeamInfo;
        break;
      }

      // repeated .pb.TGuildWarTeamInfoWithHp ArrTeamInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrteaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrTeamInfo;
        if (input->ExpectTag(26)) goto parse_ArrUserSimpleInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrUserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrusersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrUserSimpleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTowerInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTowerInfoRsp)
  return false;
#undef DO_
}

void TGuildWarGetTowerInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTowerInfoRsp)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerid(), output);
  }

  // repeated .pb.TGuildWarTeamInfoWithHp ArrTeamInfo = 2;
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrteaminfo(i), output);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 3;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrusersimpleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTowerInfoRsp)
}

::google::protobuf::uint8* TGuildWarGetTowerInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTowerInfoRsp)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerid(), target);
  }

  // repeated .pb.TGuildWarTeamInfoWithHp ArrTeamInfo = 2;
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrteaminfo(i), target);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 3;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrusersimpleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTowerInfoRsp)
  return target;
}

int TGuildWarGetTowerInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerId = 1;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

  }
  // repeated .pb.TGuildWarTeamInfoWithHp ArrTeamInfo = 2;
  total_size += 1 * this->arrteaminfo_size();
  for (int i = 0; i < this->arrteaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrteaminfo(i));
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 3;
  total_size += 1 * this->arrusersimpleinfo_size();
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrusersimpleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTowerInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTowerInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTowerInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTowerInfoRsp::MergeFrom(const TGuildWarGetTowerInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrteaminfo_.MergeFrom(from.arrteaminfo_);
  arrusersimpleinfo_.MergeFrom(from.arrusersimpleinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTowerInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTowerInfoRsp::CopyFrom(const TGuildWarGetTowerInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTowerInfoRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetTowerInfoRsp::Swap(TGuildWarGetTowerInfoRsp* other) {
  if (other != this) {
    std::swap(towerid_, other->towerid_);
    arrteaminfo_.Swap(&other->arrteaminfo_);
    arrusersimpleinfo_.Swap(&other->arrusersimpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTowerInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTowerInfoRsp_descriptor_;
  metadata.reflection = TGuildWarGetTowerInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTowerTeamInfoReq::kTowerIdFieldNumber;
const int TGuildWarGetTowerTeamInfoReq::kTeamIdInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTowerTeamInfoReq::TGuildWarGetTowerTeamInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTowerTeamInfoReq)
}

void TGuildWarGetTowerTeamInfoReq::InitAsDefaultInstance() {
  teamidinfo_ = const_cast< ::pb::TGuildWarTeamIdInfo*>(&::pb::TGuildWarTeamIdInfo::default_instance());
}

TGuildWarGetTowerTeamInfoReq::TGuildWarGetTowerTeamInfoReq(const TGuildWarGetTowerTeamInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTowerTeamInfoReq)
}

void TGuildWarGetTowerTeamInfoReq::SharedCtor() {
  _cached_size_ = 0;
  towerid_ = 0u;
  teamidinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTowerTeamInfoReq::~TGuildWarGetTowerTeamInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTowerTeamInfoReq)
  SharedDtor();
}

void TGuildWarGetTowerTeamInfoReq::SharedDtor() {
  if (this != default_instance_) {
    delete teamidinfo_;
  }
}

void TGuildWarGetTowerTeamInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTowerTeamInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTowerTeamInfoReq_descriptor_;
}

const TGuildWarGetTowerTeamInfoReq& TGuildWarGetTowerTeamInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTowerTeamInfoReq* TGuildWarGetTowerTeamInfoReq::default_instance_ = NULL;

TGuildWarGetTowerTeamInfoReq* TGuildWarGetTowerTeamInfoReq::New() const {
  return new TGuildWarGetTowerTeamInfoReq;
}

void TGuildWarGetTowerTeamInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    towerid_ = 0u;
    if (has_teamidinfo()) {
      if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTowerTeamInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTowerTeamInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamIdInfo;
        break;
      }

      // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TeamIdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamidinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTowerTeamInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTowerTeamInfoReq)
  return false;
#undef DO_
}

void TGuildWarGetTowerTeamInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTowerTeamInfoReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerid(), output);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teamidinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTowerTeamInfoReq)
}

::google::protobuf::uint8* TGuildWarGetTowerTeamInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTowerTeamInfoReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerid(), target);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teamidinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTowerTeamInfoReq)
  return target;
}

int TGuildWarGetTowerTeamInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerId = 1;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

    // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
    if (has_teamidinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamidinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTowerTeamInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTowerTeamInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTowerTeamInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTowerTeamInfoReq::MergeFrom(const TGuildWarGetTowerTeamInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
    if (from.has_teamidinfo()) {
      mutable_teamidinfo()->::pb::TGuildWarTeamIdInfo::MergeFrom(from.teamidinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTowerTeamInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTowerTeamInfoReq::CopyFrom(const TGuildWarGetTowerTeamInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTowerTeamInfoReq::IsInitialized() const {

  return true;
}

void TGuildWarGetTowerTeamInfoReq::Swap(TGuildWarGetTowerTeamInfoReq* other) {
  if (other != this) {
    std::swap(towerid_, other->towerid_);
    std::swap(teamidinfo_, other->teamidinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTowerTeamInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTowerTeamInfoReq_descriptor_;
  metadata.reflection = TGuildWarGetTowerTeamInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTowerTeamInfoRsp::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTowerTeamInfoRsp::TGuildWarGetTowerTeamInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTowerTeamInfoRsp)
}

void TGuildWarGetTowerTeamInfoRsp::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::TGuildWarTeamDetailInfo*>(&::pb::TGuildWarTeamDetailInfo::default_instance());
}

TGuildWarGetTowerTeamInfoRsp::TGuildWarGetTowerTeamInfoRsp(const TGuildWarGetTowerTeamInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTowerTeamInfoRsp)
}

void TGuildWarGetTowerTeamInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTowerTeamInfoRsp::~TGuildWarGetTowerTeamInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTowerTeamInfoRsp)
  SharedDtor();
}

void TGuildWarGetTowerTeamInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void TGuildWarGetTowerTeamInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTowerTeamInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTowerTeamInfoRsp_descriptor_;
}

const TGuildWarGetTowerTeamInfoRsp& TGuildWarGetTowerTeamInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTowerTeamInfoRsp* TGuildWarGetTowerTeamInfoRsp::default_instance_ = NULL;

TGuildWarGetTowerTeamInfoRsp* TGuildWarGetTowerTeamInfoRsp::New() const {
  return new TGuildWarGetTowerTeamInfoRsp;
}

void TGuildWarGetTowerTeamInfoRsp::Clear() {
  if (has_teaminfo()) {
    if (teaminfo_ != NULL) teaminfo_->::pb::TGuildWarTeamDetailInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTowerTeamInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTowerTeamInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTowerTeamInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTowerTeamInfoRsp)
  return false;
#undef DO_
}

void TGuildWarGetTowerTeamInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTowerTeamInfoRsp)
  // optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTowerTeamInfoRsp)
}

::google::protobuf::uint8* TGuildWarGetTowerTeamInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTowerTeamInfoRsp)
  // optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTowerTeamInfoRsp)
  return target;
}

int TGuildWarGetTowerTeamInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTowerTeamInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTowerTeamInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTowerTeamInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTowerTeamInfoRsp::MergeFrom(const TGuildWarGetTowerTeamInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TGuildWarTeamDetailInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTowerTeamInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTowerTeamInfoRsp::CopyFrom(const TGuildWarGetTowerTeamInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTowerTeamInfoRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetTowerTeamInfoRsp::Swap(TGuildWarGetTowerTeamInfoRsp* other) {
  if (other != this) {
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTowerTeamInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTowerTeamInfoRsp_descriptor_;
  metadata.reflection = TGuildWarGetTowerTeamInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGarrisonTowerReq::kTowerIdFieldNumber;
const int TGuildWarGarrisonTowerReq::kTeamIdInfoFieldNumber;
const int TGuildWarGarrisonTowerReq::kReplaceTeamIdInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGarrisonTowerReq::TGuildWarGarrisonTowerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGarrisonTowerReq)
}

void TGuildWarGarrisonTowerReq::InitAsDefaultInstance() {
  teamidinfo_ = const_cast< ::pb::TGuildWarTeamIdInfo*>(&::pb::TGuildWarTeamIdInfo::default_instance());
  replaceteamidinfo_ = const_cast< ::pb::TGuildWarTeamIdInfo*>(&::pb::TGuildWarTeamIdInfo::default_instance());
}

TGuildWarGarrisonTowerReq::TGuildWarGarrisonTowerReq(const TGuildWarGarrisonTowerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGarrisonTowerReq)
}

void TGuildWarGarrisonTowerReq::SharedCtor() {
  _cached_size_ = 0;
  towerid_ = 0u;
  teamidinfo_ = NULL;
  replaceteamidinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGarrisonTowerReq::~TGuildWarGarrisonTowerReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGarrisonTowerReq)
  SharedDtor();
}

void TGuildWarGarrisonTowerReq::SharedDtor() {
  if (this != default_instance_) {
    delete teamidinfo_;
    delete replaceteamidinfo_;
  }
}

void TGuildWarGarrisonTowerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGarrisonTowerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGarrisonTowerReq_descriptor_;
}

const TGuildWarGarrisonTowerReq& TGuildWarGarrisonTowerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGarrisonTowerReq* TGuildWarGarrisonTowerReq::default_instance_ = NULL;

TGuildWarGarrisonTowerReq* TGuildWarGarrisonTowerReq::New() const {
  return new TGuildWarGarrisonTowerReq;
}

void TGuildWarGarrisonTowerReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    towerid_ = 0u;
    if (has_teamidinfo()) {
      if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
    }
    if (has_replaceteamidinfo()) {
      if (replaceteamidinfo_ != NULL) replaceteamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGarrisonTowerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGarrisonTowerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamIdInfo;
        break;
      }

      // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TeamIdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamidinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ReplaceTeamIdInfo;
        break;
      }

      // optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ReplaceTeamIdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replaceteamidinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGarrisonTowerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGarrisonTowerReq)
  return false;
#undef DO_
}

void TGuildWarGarrisonTowerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGarrisonTowerReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerid(), output);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teamidinfo(), output);
  }

  // optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
  if (has_replaceteamidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->replaceteamidinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGarrisonTowerReq)
}

::google::protobuf::uint8* TGuildWarGarrisonTowerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGarrisonTowerReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerid(), target);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teamidinfo(), target);
  }

  // optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
  if (has_replaceteamidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->replaceteamidinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGarrisonTowerReq)
  return target;
}

int TGuildWarGarrisonTowerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerId = 1;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

    // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
    if (has_teamidinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamidinfo());
    }

    // optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
    if (has_replaceteamidinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replaceteamidinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGarrisonTowerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGarrisonTowerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGarrisonTowerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGarrisonTowerReq::MergeFrom(const TGuildWarGarrisonTowerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
    if (from.has_teamidinfo()) {
      mutable_teamidinfo()->::pb::TGuildWarTeamIdInfo::MergeFrom(from.teamidinfo());
    }
    if (from.has_replaceteamidinfo()) {
      mutable_replaceteamidinfo()->::pb::TGuildWarTeamIdInfo::MergeFrom(from.replaceteamidinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGarrisonTowerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGarrisonTowerReq::CopyFrom(const TGuildWarGarrisonTowerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGarrisonTowerReq::IsInitialized() const {

  return true;
}

void TGuildWarGarrisonTowerReq::Swap(TGuildWarGarrisonTowerReq* other) {
  if (other != this) {
    std::swap(towerid_, other->towerid_);
    std::swap(teamidinfo_, other->teamidinfo_);
    std::swap(replaceteamidinfo_, other->replaceteamidinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGarrisonTowerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGarrisonTowerReq_descriptor_;
  metadata.reflection = TGuildWarGarrisonTowerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarCancelGarrisonTowerReq::kTowerIdFieldNumber;
const int TGuildWarCancelGarrisonTowerReq::kTeamIdInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarCancelGarrisonTowerReq::TGuildWarCancelGarrisonTowerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarCancelGarrisonTowerReq)
}

void TGuildWarCancelGarrisonTowerReq::InitAsDefaultInstance() {
  teamidinfo_ = const_cast< ::pb::TGuildWarTeamIdInfo*>(&::pb::TGuildWarTeamIdInfo::default_instance());
}

TGuildWarCancelGarrisonTowerReq::TGuildWarCancelGarrisonTowerReq(const TGuildWarCancelGarrisonTowerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarCancelGarrisonTowerReq)
}

void TGuildWarCancelGarrisonTowerReq::SharedCtor() {
  _cached_size_ = 0;
  towerid_ = 0u;
  teamidinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarCancelGarrisonTowerReq::~TGuildWarCancelGarrisonTowerReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarCancelGarrisonTowerReq)
  SharedDtor();
}

void TGuildWarCancelGarrisonTowerReq::SharedDtor() {
  if (this != default_instance_) {
    delete teamidinfo_;
  }
}

void TGuildWarCancelGarrisonTowerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarCancelGarrisonTowerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarCancelGarrisonTowerReq_descriptor_;
}

const TGuildWarCancelGarrisonTowerReq& TGuildWarCancelGarrisonTowerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarCancelGarrisonTowerReq* TGuildWarCancelGarrisonTowerReq::default_instance_ = NULL;

TGuildWarCancelGarrisonTowerReq* TGuildWarCancelGarrisonTowerReq::New() const {
  return new TGuildWarCancelGarrisonTowerReq;
}

void TGuildWarCancelGarrisonTowerReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    towerid_ = 0u;
    if (has_teamidinfo()) {
      if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarCancelGarrisonTowerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarCancelGarrisonTowerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamIdInfo;
        break;
      }

      // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TeamIdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamidinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarCancelGarrisonTowerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarCancelGarrisonTowerReq)
  return false;
#undef DO_
}

void TGuildWarCancelGarrisonTowerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarCancelGarrisonTowerReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerid(), output);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teamidinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarCancelGarrisonTowerReq)
}

::google::protobuf::uint8* TGuildWarCancelGarrisonTowerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarCancelGarrisonTowerReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerid(), target);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teamidinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarCancelGarrisonTowerReq)
  return target;
}

int TGuildWarCancelGarrisonTowerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerId = 1;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

    // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
    if (has_teamidinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamidinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarCancelGarrisonTowerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarCancelGarrisonTowerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarCancelGarrisonTowerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarCancelGarrisonTowerReq::MergeFrom(const TGuildWarCancelGarrisonTowerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
    if (from.has_teamidinfo()) {
      mutable_teamidinfo()->::pb::TGuildWarTeamIdInfo::MergeFrom(from.teamidinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarCancelGarrisonTowerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarCancelGarrisonTowerReq::CopyFrom(const TGuildWarCancelGarrisonTowerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarCancelGarrisonTowerReq::IsInitialized() const {

  return true;
}

void TGuildWarCancelGarrisonTowerReq::Swap(TGuildWarCancelGarrisonTowerReq* other) {
  if (other != this) {
    std::swap(towerid_, other->towerid_);
    std::swap(teamidinfo_, other->teamidinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarCancelGarrisonTowerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarCancelGarrisonTowerReq_descriptor_;
  metadata.reflection = TGuildWarCancelGarrisonTowerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetAllTeamInfoRsp::kArrTeamBaseInfoFieldNumber;
const int TGuildWarGetAllTeamInfoRsp::kArrUserSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetAllTeamInfoRsp::TGuildWarGetAllTeamInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetAllTeamInfoRsp)
}

void TGuildWarGetAllTeamInfoRsp::InitAsDefaultInstance() {
}

TGuildWarGetAllTeamInfoRsp::TGuildWarGetAllTeamInfoRsp(const TGuildWarGetAllTeamInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetAllTeamInfoRsp)
}

void TGuildWarGetAllTeamInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetAllTeamInfoRsp::~TGuildWarGetAllTeamInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetAllTeamInfoRsp)
  SharedDtor();
}

void TGuildWarGetAllTeamInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetAllTeamInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetAllTeamInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetAllTeamInfoRsp_descriptor_;
}

const TGuildWarGetAllTeamInfoRsp& TGuildWarGetAllTeamInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetAllTeamInfoRsp* TGuildWarGetAllTeamInfoRsp::default_instance_ = NULL;

TGuildWarGetAllTeamInfoRsp* TGuildWarGetAllTeamInfoRsp::New() const {
  return new TGuildWarGetAllTeamInfoRsp;
}

void TGuildWarGetAllTeamInfoRsp::Clear() {
  arrteambaseinfo_.Clear();
  arrusersimpleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetAllTeamInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetAllTeamInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarTeamBaseInfo ArrTeamBaseInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrTeamBaseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrteambaseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrTeamBaseInfo;
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrUserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrusersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetAllTeamInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetAllTeamInfoRsp)
  return false;
#undef DO_
}

void TGuildWarGetAllTeamInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetAllTeamInfoRsp)
  // repeated .pb.TGuildWarTeamBaseInfo ArrTeamBaseInfo = 1;
  for (int i = 0; i < this->arrteambaseinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrteambaseinfo(i), output);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrusersimpleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetAllTeamInfoRsp)
}

::google::protobuf::uint8* TGuildWarGetAllTeamInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetAllTeamInfoRsp)
  // repeated .pb.TGuildWarTeamBaseInfo ArrTeamBaseInfo = 1;
  for (int i = 0; i < this->arrteambaseinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrteambaseinfo(i), target);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrusersimpleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetAllTeamInfoRsp)
  return target;
}

int TGuildWarGetAllTeamInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWarTeamBaseInfo ArrTeamBaseInfo = 1;
  total_size += 1 * this->arrteambaseinfo_size();
  for (int i = 0; i < this->arrteambaseinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrteambaseinfo(i));
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  total_size += 1 * this->arrusersimpleinfo_size();
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrusersimpleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetAllTeamInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetAllTeamInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetAllTeamInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetAllTeamInfoRsp::MergeFrom(const TGuildWarGetAllTeamInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrteambaseinfo_.MergeFrom(from.arrteambaseinfo_);
  arrusersimpleinfo_.MergeFrom(from.arrusersimpleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetAllTeamInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetAllTeamInfoRsp::CopyFrom(const TGuildWarGetAllTeamInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetAllTeamInfoRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetAllTeamInfoRsp::Swap(TGuildWarGetAllTeamInfoRsp* other) {
  if (other != this) {
    arrteambaseinfo_.Swap(&other->arrteambaseinfo_);
    arrusersimpleinfo_.Swap(&other->arrusersimpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetAllTeamInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetAllTeamInfoRsp_descriptor_;
  metadata.reflection = TGuildWarGetAllTeamInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTeamInfoReq::kTeamIdInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTeamInfoReq::TGuildWarGetTeamInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTeamInfoReq)
}

void TGuildWarGetTeamInfoReq::InitAsDefaultInstance() {
  teamidinfo_ = const_cast< ::pb::TGuildWarTeamIdInfo*>(&::pb::TGuildWarTeamIdInfo::default_instance());
}

TGuildWarGetTeamInfoReq::TGuildWarGetTeamInfoReq(const TGuildWarGetTeamInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTeamInfoReq)
}

void TGuildWarGetTeamInfoReq::SharedCtor() {
  _cached_size_ = 0;
  teamidinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTeamInfoReq::~TGuildWarGetTeamInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTeamInfoReq)
  SharedDtor();
}

void TGuildWarGetTeamInfoReq::SharedDtor() {
  if (this != default_instance_) {
    delete teamidinfo_;
  }
}

void TGuildWarGetTeamInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTeamInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTeamInfoReq_descriptor_;
}

const TGuildWarGetTeamInfoReq& TGuildWarGetTeamInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTeamInfoReq* TGuildWarGetTeamInfoReq::default_instance_ = NULL;

TGuildWarGetTeamInfoReq* TGuildWarGetTeamInfoReq::New() const {
  return new TGuildWarGetTeamInfoReq;
}

void TGuildWarGetTeamInfoReq::Clear() {
  if (has_teamidinfo()) {
    if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTeamInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTeamInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamidinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTeamInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTeamInfoReq)
  return false;
#undef DO_
}

void TGuildWarGetTeamInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTeamInfoReq)
  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
  if (has_teamidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teamidinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTeamInfoReq)
}

::google::protobuf::uint8* TGuildWarGetTeamInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTeamInfoReq)
  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
  if (has_teamidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teamidinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTeamInfoReq)
  return target;
}

int TGuildWarGetTeamInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 1;
    if (has_teamidinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamidinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTeamInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTeamInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTeamInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTeamInfoReq::MergeFrom(const TGuildWarGetTeamInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamidinfo()) {
      mutable_teamidinfo()->::pb::TGuildWarTeamIdInfo::MergeFrom(from.teamidinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTeamInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTeamInfoReq::CopyFrom(const TGuildWarGetTeamInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTeamInfoReq::IsInitialized() const {

  return true;
}

void TGuildWarGetTeamInfoReq::Swap(TGuildWarGetTeamInfoReq* other) {
  if (other != this) {
    std::swap(teamidinfo_, other->teamidinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTeamInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTeamInfoReq_descriptor_;
  metadata.reflection = TGuildWarGetTeamInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTeamInfoRsp::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTeamInfoRsp::TGuildWarGetTeamInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTeamInfoRsp)
}

void TGuildWarGetTeamInfoRsp::InitAsDefaultInstance() {
  teaminfo_ = const_cast< ::pb::TGuildWarTeamDetailInfo*>(&::pb::TGuildWarTeamDetailInfo::default_instance());
}

TGuildWarGetTeamInfoRsp::TGuildWarGetTeamInfoRsp(const TGuildWarGetTeamInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTeamInfoRsp)
}

void TGuildWarGetTeamInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  teaminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTeamInfoRsp::~TGuildWarGetTeamInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTeamInfoRsp)
  SharedDtor();
}

void TGuildWarGetTeamInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete teaminfo_;
  }
}

void TGuildWarGetTeamInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTeamInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTeamInfoRsp_descriptor_;
}

const TGuildWarGetTeamInfoRsp& TGuildWarGetTeamInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTeamInfoRsp* TGuildWarGetTeamInfoRsp::default_instance_ = NULL;

TGuildWarGetTeamInfoRsp* TGuildWarGetTeamInfoRsp::New() const {
  return new TGuildWarGetTeamInfoRsp;
}

void TGuildWarGetTeamInfoRsp::Clear() {
  if (has_teaminfo()) {
    if (teaminfo_ != NULL) teaminfo_->::pb::TGuildWarTeamDetailInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTeamInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTeamInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teaminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTeamInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTeamInfoRsp)
  return false;
#undef DO_
}

void TGuildWarGetTeamInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTeamInfoRsp)
  // optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
  if (has_teaminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teaminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTeamInfoRsp)
}

::google::protobuf::uint8* TGuildWarGetTeamInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTeamInfoRsp)
  // optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
  if (has_teaminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teaminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTeamInfoRsp)
  return target;
}

int TGuildWarGetTeamInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarTeamDetailInfo TeamInfo = 1;
    if (has_teaminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teaminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTeamInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTeamInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTeamInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTeamInfoRsp::MergeFrom(const TGuildWarGetTeamInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teaminfo()) {
      mutable_teaminfo()->::pb::TGuildWarTeamDetailInfo::MergeFrom(from.teaminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTeamInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTeamInfoRsp::CopyFrom(const TGuildWarGetTeamInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTeamInfoRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetTeamInfoRsp::Swap(TGuildWarGetTeamInfoRsp* other) {
  if (other != this) {
    std::swap(teaminfo_, other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTeamInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTeamInfoRsp_descriptor_;
  metadata.reflection = TGuildWarGetTeamInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarDeployTeamToTowerReq::kTowerIdFieldNumber;
const int TGuildWarDeployTeamToTowerReq::kTeamIdInfoFieldNumber;
const int TGuildWarDeployTeamToTowerReq::kReplaceTeamIdInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarDeployTeamToTowerReq::TGuildWarDeployTeamToTowerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarDeployTeamToTowerReq)
}

void TGuildWarDeployTeamToTowerReq::InitAsDefaultInstance() {
  teamidinfo_ = const_cast< ::pb::TGuildWarTeamIdInfo*>(&::pb::TGuildWarTeamIdInfo::default_instance());
  replaceteamidinfo_ = const_cast< ::pb::TGuildWarTeamIdInfo*>(&::pb::TGuildWarTeamIdInfo::default_instance());
}

TGuildWarDeployTeamToTowerReq::TGuildWarDeployTeamToTowerReq(const TGuildWarDeployTeamToTowerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarDeployTeamToTowerReq)
}

void TGuildWarDeployTeamToTowerReq::SharedCtor() {
  _cached_size_ = 0;
  towerid_ = 0u;
  teamidinfo_ = NULL;
  replaceteamidinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarDeployTeamToTowerReq::~TGuildWarDeployTeamToTowerReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarDeployTeamToTowerReq)
  SharedDtor();
}

void TGuildWarDeployTeamToTowerReq::SharedDtor() {
  if (this != default_instance_) {
    delete teamidinfo_;
    delete replaceteamidinfo_;
  }
}

void TGuildWarDeployTeamToTowerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarDeployTeamToTowerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarDeployTeamToTowerReq_descriptor_;
}

const TGuildWarDeployTeamToTowerReq& TGuildWarDeployTeamToTowerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarDeployTeamToTowerReq* TGuildWarDeployTeamToTowerReq::default_instance_ = NULL;

TGuildWarDeployTeamToTowerReq* TGuildWarDeployTeamToTowerReq::New() const {
  return new TGuildWarDeployTeamToTowerReq;
}

void TGuildWarDeployTeamToTowerReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    towerid_ = 0u;
    if (has_teamidinfo()) {
      if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
    }
    if (has_replaceteamidinfo()) {
      if (replaceteamidinfo_ != NULL) replaceteamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarDeployTeamToTowerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarDeployTeamToTowerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamIdInfo;
        break;
      }

      // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TeamIdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamidinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ReplaceTeamIdInfo;
        break;
      }

      // optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_ReplaceTeamIdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_replaceteamidinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarDeployTeamToTowerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarDeployTeamToTowerReq)
  return false;
#undef DO_
}

void TGuildWarDeployTeamToTowerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarDeployTeamToTowerReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerid(), output);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teamidinfo(), output);
  }

  // optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
  if (has_replaceteamidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->replaceteamidinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarDeployTeamToTowerReq)
}

::google::protobuf::uint8* TGuildWarDeployTeamToTowerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarDeployTeamToTowerReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerid(), target);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teamidinfo(), target);
  }

  // optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
  if (has_replaceteamidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->replaceteamidinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarDeployTeamToTowerReq)
  return target;
}

int TGuildWarDeployTeamToTowerReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerId = 1;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

    // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
    if (has_teamidinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamidinfo());
    }

    // optional .pb.TGuildWarTeamIdInfo ReplaceTeamIdInfo = 3;
    if (has_replaceteamidinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->replaceteamidinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarDeployTeamToTowerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarDeployTeamToTowerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarDeployTeamToTowerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarDeployTeamToTowerReq::MergeFrom(const TGuildWarDeployTeamToTowerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
    if (from.has_teamidinfo()) {
      mutable_teamidinfo()->::pb::TGuildWarTeamIdInfo::MergeFrom(from.teamidinfo());
    }
    if (from.has_replaceteamidinfo()) {
      mutable_replaceteamidinfo()->::pb::TGuildWarTeamIdInfo::MergeFrom(from.replaceteamidinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarDeployTeamToTowerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarDeployTeamToTowerReq::CopyFrom(const TGuildWarDeployTeamToTowerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarDeployTeamToTowerReq::IsInitialized() const {

  return true;
}

void TGuildWarDeployTeamToTowerReq::Swap(TGuildWarDeployTeamToTowerReq* other) {
  if (other != this) {
    std::swap(towerid_, other->towerid_);
    std::swap(teamidinfo_, other->teamidinfo_);
    std::swap(replaceteamidinfo_, other->replaceteamidinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarDeployTeamToTowerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarDeployTeamToTowerReq_descriptor_;
  metadata.reflection = TGuildWarDeployTeamToTowerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetAllCallForBattleHeroInfoRsp::kArrHeroInfoFieldNumber;
const int TGuildWarGetAllCallForBattleHeroInfoRsp::kArrUserSimpleInfoFieldNumber;
const int TGuildWarGetAllCallForBattleHeroInfoRsp::kArrUidFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetAllCallForBattleHeroInfoRsp::TGuildWarGetAllCallForBattleHeroInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetAllCallForBattleHeroInfoRsp)
}

void TGuildWarGetAllCallForBattleHeroInfoRsp::InitAsDefaultInstance() {
}

TGuildWarGetAllCallForBattleHeroInfoRsp::TGuildWarGetAllCallForBattleHeroInfoRsp(const TGuildWarGetAllCallForBattleHeroInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetAllCallForBattleHeroInfoRsp)
}

void TGuildWarGetAllCallForBattleHeroInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetAllCallForBattleHeroInfoRsp::~TGuildWarGetAllCallForBattleHeroInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetAllCallForBattleHeroInfoRsp)
  SharedDtor();
}

void TGuildWarGetAllCallForBattleHeroInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetAllCallForBattleHeroInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetAllCallForBattleHeroInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetAllCallForBattleHeroInfoRsp_descriptor_;
}

const TGuildWarGetAllCallForBattleHeroInfoRsp& TGuildWarGetAllCallForBattleHeroInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetAllCallForBattleHeroInfoRsp* TGuildWarGetAllCallForBattleHeroInfoRsp::default_instance_ = NULL;

TGuildWarGetAllCallForBattleHeroInfoRsp* TGuildWarGetAllCallForBattleHeroInfoRsp::New() const {
  return new TGuildWarGetAllCallForBattleHeroInfoRsp;
}

void TGuildWarGetAllCallForBattleHeroInfoRsp::Clear() {
  arrheroinfo_.Clear();
  arrusersimpleinfo_.Clear();
  arruid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetAllCallForBattleHeroInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetAllCallForBattleHeroInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrHeroInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrheroinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrHeroInfo;
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrUserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrusersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        if (input->ExpectTag(24)) goto parse_ArrUid;
        break;
      }

      // repeated uint64 ArrUid = 3;
      case 3: {
        if (tag == 24) {
         parse_ArrUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_arruid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_arruid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ArrUid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetAllCallForBattleHeroInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetAllCallForBattleHeroInfoRsp)
  return false;
#undef DO_
}

void TGuildWarGetAllCallForBattleHeroInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetAllCallForBattleHeroInfoRsp)
  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 1;
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrheroinfo(i), output);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrusersimpleinfo(i), output);
  }

  // repeated uint64 ArrUid = 3;
  for (int i = 0; i < this->arruid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->arruid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetAllCallForBattleHeroInfoRsp)
}

::google::protobuf::uint8* TGuildWarGetAllCallForBattleHeroInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetAllCallForBattleHeroInfoRsp)
  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 1;
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrheroinfo(i), target);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrusersimpleinfo(i), target);
  }

  // repeated uint64 ArrUid = 3;
  for (int i = 0; i < this->arruid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->arruid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetAllCallForBattleHeroInfoRsp)
  return target;
}

int TGuildWarGetAllCallForBattleHeroInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo = 1;
  total_size += 1 * this->arrheroinfo_size();
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrheroinfo(i));
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  total_size += 1 * this->arrusersimpleinfo_size();
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrusersimpleinfo(i));
  }

  // repeated uint64 ArrUid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->arruid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->arruid(i));
    }
    total_size += 1 * this->arruid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetAllCallForBattleHeroInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetAllCallForBattleHeroInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetAllCallForBattleHeroInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetAllCallForBattleHeroInfoRsp::MergeFrom(const TGuildWarGetAllCallForBattleHeroInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrheroinfo_.MergeFrom(from.arrheroinfo_);
  arrusersimpleinfo_.MergeFrom(from.arrusersimpleinfo_);
  arruid_.MergeFrom(from.arruid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetAllCallForBattleHeroInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetAllCallForBattleHeroInfoRsp::CopyFrom(const TGuildWarGetAllCallForBattleHeroInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetAllCallForBattleHeroInfoRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetAllCallForBattleHeroInfoRsp::Swap(TGuildWarGetAllCallForBattleHeroInfoRsp* other) {
  if (other != this) {
    arrheroinfo_.Swap(&other->arrheroinfo_);
    arrusersimpleinfo_.Swap(&other->arrusersimpleinfo_);
    arruid_.Swap(&other->arruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetAllCallForBattleHeroInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetAllCallForBattleHeroInfoRsp_descriptor_;
  metadata.reflection = TGuildWarGetAllCallForBattleHeroInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarSetCallForBattleHeroListReq::kArrUidFieldNumber;
#endif  // !_MSC_VER

TGuildWarSetCallForBattleHeroListReq::TGuildWarSetCallForBattleHeroListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarSetCallForBattleHeroListReq)
}

void TGuildWarSetCallForBattleHeroListReq::InitAsDefaultInstance() {
}

TGuildWarSetCallForBattleHeroListReq::TGuildWarSetCallForBattleHeroListReq(const TGuildWarSetCallForBattleHeroListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarSetCallForBattleHeroListReq)
}

void TGuildWarSetCallForBattleHeroListReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarSetCallForBattleHeroListReq::~TGuildWarSetCallForBattleHeroListReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarSetCallForBattleHeroListReq)
  SharedDtor();
}

void TGuildWarSetCallForBattleHeroListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarSetCallForBattleHeroListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarSetCallForBattleHeroListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarSetCallForBattleHeroListReq_descriptor_;
}

const TGuildWarSetCallForBattleHeroListReq& TGuildWarSetCallForBattleHeroListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarSetCallForBattleHeroListReq* TGuildWarSetCallForBattleHeroListReq::default_instance_ = NULL;

TGuildWarSetCallForBattleHeroListReq* TGuildWarSetCallForBattleHeroListReq::New() const {
  return new TGuildWarSetCallForBattleHeroListReq;
}

void TGuildWarSetCallForBattleHeroListReq::Clear() {
  arruid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarSetCallForBattleHeroListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarSetCallForBattleHeroListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ArrUid = 1;
      case 1: {
        if (tag == 8) {
         parse_ArrUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_arruid())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_arruid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ArrUid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarSetCallForBattleHeroListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarSetCallForBattleHeroListReq)
  return false;
#undef DO_
}

void TGuildWarSetCallForBattleHeroListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarSetCallForBattleHeroListReq)
  // repeated uint64 ArrUid = 1;
  for (int i = 0; i < this->arruid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->arruid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarSetCallForBattleHeroListReq)
}

::google::protobuf::uint8* TGuildWarSetCallForBattleHeroListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarSetCallForBattleHeroListReq)
  // repeated uint64 ArrUid = 1;
  for (int i = 0; i < this->arruid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->arruid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarSetCallForBattleHeroListReq)
  return target;
}

int TGuildWarSetCallForBattleHeroListReq::ByteSize() const {
  int total_size = 0;

  // repeated uint64 ArrUid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arruid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->arruid(i));
    }
    total_size += 1 * this->arruid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarSetCallForBattleHeroListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarSetCallForBattleHeroListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarSetCallForBattleHeroListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarSetCallForBattleHeroListReq::MergeFrom(const TGuildWarSetCallForBattleHeroListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arruid_.MergeFrom(from.arruid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarSetCallForBattleHeroListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarSetCallForBattleHeroListReq::CopyFrom(const TGuildWarSetCallForBattleHeroListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarSetCallForBattleHeroListReq::IsInitialized() const {

  return true;
}

void TGuildWarSetCallForBattleHeroListReq::Swap(TGuildWarSetCallForBattleHeroListReq* other) {
  if (other != this) {
    arruid_.Swap(&other->arruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarSetCallForBattleHeroListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarSetCallForBattleHeroListReq_descriptor_;
  metadata.reflection = TGuildWarSetCallForBattleHeroListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetCallForBattleRecordRsp::kArrRecordInfoFieldNumber;
const int TGuildWarGetCallForBattleRecordRsp::kArrHeroInfo1FieldNumber;
const int TGuildWarGetCallForBattleRecordRsp::kArrHeroInfo2FieldNumber;
const int TGuildWarGetCallForBattleRecordRsp::kArrUserSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetCallForBattleRecordRsp::TGuildWarGetCallForBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetCallForBattleRecordRsp)
}

void TGuildWarGetCallForBattleRecordRsp::InitAsDefaultInstance() {
}

TGuildWarGetCallForBattleRecordRsp::TGuildWarGetCallForBattleRecordRsp(const TGuildWarGetCallForBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetCallForBattleRecordRsp)
}

void TGuildWarGetCallForBattleRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetCallForBattleRecordRsp::~TGuildWarGetCallForBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetCallForBattleRecordRsp)
  SharedDtor();
}

void TGuildWarGetCallForBattleRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetCallForBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetCallForBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetCallForBattleRecordRsp_descriptor_;
}

const TGuildWarGetCallForBattleRecordRsp& TGuildWarGetCallForBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetCallForBattleRecordRsp* TGuildWarGetCallForBattleRecordRsp::default_instance_ = NULL;

TGuildWarGetCallForBattleRecordRsp* TGuildWarGetCallForBattleRecordRsp::New() const {
  return new TGuildWarGetCallForBattleRecordRsp;
}

void TGuildWarGetCallForBattleRecordRsp::Clear() {
  arrrecordinfo_.Clear();
  arrheroinfo1_.Clear();
  arrheroinfo2_.Clear();
  arrusersimpleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetCallForBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetCallForBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRecordInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrecordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRecordInfo;
        if (input->ExpectTag(18)) goto parse_ArrHeroInfo1;
        break;
      }

      // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrHeroInfo1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrheroinfo1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrHeroInfo1;
        if (input->ExpectTag(26)) goto parse_ArrHeroInfo2;
        break;
      }

      // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrHeroInfo2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrheroinfo2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrHeroInfo2;
        if (input->ExpectTag(34)) goto parse_ArrUserSimpleInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrUserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrusersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrUserSimpleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetCallForBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetCallForBattleRecordRsp)
  return false;
#undef DO_
}

void TGuildWarGetCallForBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetCallForBattleRecordRsp)
  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrecordinfo(i), output);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 2;
  for (int i = 0; i < this->arrheroinfo1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrheroinfo1(i), output);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 3;
  for (int i = 0; i < this->arrheroinfo2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrheroinfo2(i), output);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 4;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrusersimpleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetCallForBattleRecordRsp)
}

::google::protobuf::uint8* TGuildWarGetCallForBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetCallForBattleRecordRsp)
  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrecordinfo(i), target);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 2;
  for (int i = 0; i < this->arrheroinfo1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrheroinfo1(i), target);
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 3;
  for (int i = 0; i < this->arrheroinfo2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrheroinfo2(i), target);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 4;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrusersimpleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetCallForBattleRecordRsp)
  return target;
}

int TGuildWarGetCallForBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  total_size += 1 * this->arrrecordinfo_size();
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrecordinfo(i));
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo1 = 2;
  total_size += 1 * this->arrheroinfo1_size();
  for (int i = 0; i < this->arrheroinfo1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrheroinfo1(i));
  }

  // repeated .pb.TGuildWarHeroDetailInfo ArrHeroInfo2 = 3;
  total_size += 1 * this->arrheroinfo2_size();
  for (int i = 0; i < this->arrheroinfo2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrheroinfo2(i));
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 4;
  total_size += 1 * this->arrusersimpleinfo_size();
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrusersimpleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetCallForBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetCallForBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetCallForBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetCallForBattleRecordRsp::MergeFrom(const TGuildWarGetCallForBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrecordinfo_.MergeFrom(from.arrrecordinfo_);
  arrheroinfo1_.MergeFrom(from.arrheroinfo1_);
  arrheroinfo2_.MergeFrom(from.arrheroinfo2_);
  arrusersimpleinfo_.MergeFrom(from.arrusersimpleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetCallForBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetCallForBattleRecordRsp::CopyFrom(const TGuildWarGetCallForBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetCallForBattleRecordRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetCallForBattleRecordRsp::Swap(TGuildWarGetCallForBattleRecordRsp* other) {
  if (other != this) {
    arrrecordinfo_.Swap(&other->arrrecordinfo_);
    arrheroinfo1_.Swap(&other->arrheroinfo1_);
    arrheroinfo2_.Swap(&other->arrheroinfo2_);
    arrusersimpleinfo_.Swap(&other->arrusersimpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetCallForBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetCallForBattleRecordRsp_descriptor_;
  metadata.reflection = TGuildWarGetCallForBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarAttackTowerTeamReq::kTowerIdFieldNumber;
const int TGuildWarAttackTowerTeamReq::kTeamIdInfoFieldNumber;
const int TGuildWarAttackTowerTeamReq::kArrFormationFieldNumber;
#endif  // !_MSC_VER

TGuildWarAttackTowerTeamReq::TGuildWarAttackTowerTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarAttackTowerTeamReq)
}

void TGuildWarAttackTowerTeamReq::InitAsDefaultInstance() {
  teamidinfo_ = const_cast< ::pb::TGuildWarTeamIdInfo*>(&::pb::TGuildWarTeamIdInfo::default_instance());
}

TGuildWarAttackTowerTeamReq::TGuildWarAttackTowerTeamReq(const TGuildWarAttackTowerTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarAttackTowerTeamReq)
}

void TGuildWarAttackTowerTeamReq::SharedCtor() {
  _cached_size_ = 0;
  towerid_ = 0u;
  teamidinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarAttackTowerTeamReq::~TGuildWarAttackTowerTeamReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarAttackTowerTeamReq)
  SharedDtor();
}

void TGuildWarAttackTowerTeamReq::SharedDtor() {
  if (this != default_instance_) {
    delete teamidinfo_;
  }
}

void TGuildWarAttackTowerTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarAttackTowerTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarAttackTowerTeamReq_descriptor_;
}

const TGuildWarAttackTowerTeamReq& TGuildWarAttackTowerTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarAttackTowerTeamReq* TGuildWarAttackTowerTeamReq::default_instance_ = NULL;

TGuildWarAttackTowerTeamReq* TGuildWarAttackTowerTeamReq::New() const {
  return new TGuildWarAttackTowerTeamReq;
}

void TGuildWarAttackTowerTeamReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    towerid_ = 0u;
    if (has_teamidinfo()) {
      if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
    }
  }
  arrformation_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarAttackTowerTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarAttackTowerTeamReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamIdInfo;
        break;
      }

      // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TeamIdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamidinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrFormation;
        break;
      }

      // repeated .pb.TGuildWarFormation ArrFormation = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrFormation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrformation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrFormation;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarAttackTowerTeamReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarAttackTowerTeamReq)
  return false;
#undef DO_
}

void TGuildWarAttackTowerTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarAttackTowerTeamReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerid(), output);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teamidinfo(), output);
  }

  // repeated .pb.TGuildWarFormation ArrFormation = 3;
  for (int i = 0; i < this->arrformation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrformation(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarAttackTowerTeamReq)
}

::google::protobuf::uint8* TGuildWarAttackTowerTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarAttackTowerTeamReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerid(), target);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teamidinfo(), target);
  }

  // repeated .pb.TGuildWarFormation ArrFormation = 3;
  for (int i = 0; i < this->arrformation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrformation(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarAttackTowerTeamReq)
  return target;
}

int TGuildWarAttackTowerTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerId = 1;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

    // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
    if (has_teamidinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamidinfo());
    }

  }
  // repeated .pb.TGuildWarFormation ArrFormation = 3;
  total_size += 1 * this->arrformation_size();
  for (int i = 0; i < this->arrformation_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrformation(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarAttackTowerTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarAttackTowerTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarAttackTowerTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarAttackTowerTeamReq::MergeFrom(const TGuildWarAttackTowerTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrformation_.MergeFrom(from.arrformation_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
    if (from.has_teamidinfo()) {
      mutable_teamidinfo()->::pb::TGuildWarTeamIdInfo::MergeFrom(from.teamidinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarAttackTowerTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarAttackTowerTeamReq::CopyFrom(const TGuildWarAttackTowerTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarAttackTowerTeamReq::IsInitialized() const {

  return true;
}

void TGuildWarAttackTowerTeamReq::Swap(TGuildWarAttackTowerTeamReq* other) {
  if (other != this) {
    std::swap(towerid_, other->towerid_);
    std::swap(teamidinfo_, other->teamidinfo_);
    arrformation_.Swap(&other->arrformation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarAttackTowerTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarAttackTowerTeamReq_descriptor_;
  metadata.reflection = TGuildWarAttackTowerTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarAttackTowerTeamRsp::kBattleRetFieldNumber;
const int TGuildWarAttackTowerTeamRsp::kSuccessFieldNumber;
const int TGuildWarAttackTowerTeamRsp::kArrNotPickedBuffFieldNumber;
const int TGuildWarAttackTowerTeamRsp::kArrHeroInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarAttackTowerTeamRsp::TGuildWarAttackTowerTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarAttackTowerTeamRsp)
}

void TGuildWarAttackTowerTeamRsp::InitAsDefaultInstance() {
  battleret_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TGuildWarAttackTowerTeamRsp::TGuildWarAttackTowerTeamRsp(const TGuildWarAttackTowerTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarAttackTowerTeamRsp)
}

void TGuildWarAttackTowerTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  battleret_ = NULL;
  success_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarAttackTowerTeamRsp::~TGuildWarAttackTowerTeamRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarAttackTowerTeamRsp)
  SharedDtor();
}

void TGuildWarAttackTowerTeamRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleret_;
  }
}

void TGuildWarAttackTowerTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarAttackTowerTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarAttackTowerTeamRsp_descriptor_;
}

const TGuildWarAttackTowerTeamRsp& TGuildWarAttackTowerTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarAttackTowerTeamRsp* TGuildWarAttackTowerTeamRsp::default_instance_ = NULL;

TGuildWarAttackTowerTeamRsp* TGuildWarAttackTowerTeamRsp::New() const {
  return new TGuildWarAttackTowerTeamRsp;
}

void TGuildWarAttackTowerTeamRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_battleret()) {
      if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
    }
    success_ = 0u;
  }
  arrnotpickedbuff_.Clear();
  arrheroinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarAttackTowerTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarAttackTowerTeamRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TBattleResult BattleRet = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Success;
        break;
      }

      // optional uint32 Success = 2;
      case 2: {
        if (tag == 16) {
         parse_Success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ArrNotPickedBuff;
        break;
      }

      // repeated uint32 ArrNotPickedBuff = 3;
      case 3: {
        if (tag == 24) {
         parse_ArrNotPickedBuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_arrnotpickedbuff())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrnotpickedbuff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ArrNotPickedBuff;
        if (input->ExpectTag(34)) goto parse_ArrHeroInfo;
        break;
      }

      // repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrHeroInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrheroinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrHeroInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarAttackTowerTeamRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarAttackTowerTeamRsp)
  return false;
#undef DO_
}

void TGuildWarAttackTowerTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarAttackTowerTeamRsp)
  // optional .pb.TBattleResult BattleRet = 1;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleret(), output);
  }

  // optional uint32 Success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->success(), output);
  }

  // repeated uint32 ArrNotPickedBuff = 3;
  for (int i = 0; i < this->arrnotpickedbuff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->arrnotpickedbuff(i), output);
  }

  // repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 4;
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrheroinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarAttackTowerTeamRsp)
}

::google::protobuf::uint8* TGuildWarAttackTowerTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarAttackTowerTeamRsp)
  // optional .pb.TBattleResult BattleRet = 1;
  if (has_battleret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleret(), target);
  }

  // optional uint32 Success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->success(), target);
  }

  // repeated uint32 ArrNotPickedBuff = 3;
  for (int i = 0; i < this->arrnotpickedbuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->arrnotpickedbuff(i), target);
  }

  // repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 4;
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrheroinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarAttackTowerTeamRsp)
  return target;
}

int TGuildWarAttackTowerTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TBattleResult BattleRet = 1;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleret());
    }

    // optional uint32 Success = 2;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->success());
    }

  }
  // repeated uint32 ArrNotPickedBuff = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrnotpickedbuff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrnotpickedbuff(i));
    }
    total_size += 1 * this->arrnotpickedbuff_size() + data_size;
  }

  // repeated .pb.TGuildWarUserHeroInheritInfo ArrHeroInfo = 4;
  total_size += 1 * this->arrheroinfo_size();
  for (int i = 0; i < this->arrheroinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrheroinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarAttackTowerTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarAttackTowerTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarAttackTowerTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarAttackTowerTeamRsp::MergeFrom(const TGuildWarAttackTowerTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrnotpickedbuff_.MergeFrom(from.arrnotpickedbuff_);
  arrheroinfo_.MergeFrom(from.arrheroinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleret()) {
      mutable_battleret()->::pb::TBattleResult::MergeFrom(from.battleret());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarAttackTowerTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarAttackTowerTeamRsp::CopyFrom(const TGuildWarAttackTowerTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarAttackTowerTeamRsp::IsInitialized() const {

  if (has_battleret()) {
    if (!this->battleret().IsInitialized()) return false;
  }
  return true;
}

void TGuildWarAttackTowerTeamRsp::Swap(TGuildWarAttackTowerTeamRsp* other) {
  if (other != this) {
    std::swap(battleret_, other->battleret_);
    std::swap(success_, other->success_);
    arrnotpickedbuff_.Swap(&other->arrnotpickedbuff_);
    arrheroinfo_.Swap(&other->arrheroinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarAttackTowerTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarAttackTowerTeamRsp_descriptor_;
  metadata.reflection = TGuildWarAttackTowerTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarChooseBuffReq::kBuffIdFieldNumber;
#endif  // !_MSC_VER

TGuildWarChooseBuffReq::TGuildWarChooseBuffReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarChooseBuffReq)
}

void TGuildWarChooseBuffReq::InitAsDefaultInstance() {
}

TGuildWarChooseBuffReq::TGuildWarChooseBuffReq(const TGuildWarChooseBuffReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarChooseBuffReq)
}

void TGuildWarChooseBuffReq::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarChooseBuffReq::~TGuildWarChooseBuffReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarChooseBuffReq)
  SharedDtor();
}

void TGuildWarChooseBuffReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarChooseBuffReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarChooseBuffReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarChooseBuffReq_descriptor_;
}

const TGuildWarChooseBuffReq& TGuildWarChooseBuffReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarChooseBuffReq* TGuildWarChooseBuffReq::default_instance_ = NULL;

TGuildWarChooseBuffReq* TGuildWarChooseBuffReq::New() const {
  return new TGuildWarChooseBuffReq;
}

void TGuildWarChooseBuffReq::Clear() {
  buffid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarChooseBuffReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarChooseBuffReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BuffId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarChooseBuffReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarChooseBuffReq)
  return false;
#undef DO_
}

void TGuildWarChooseBuffReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarChooseBuffReq)
  // optional uint32 BuffId = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buffid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarChooseBuffReq)
}

::google::protobuf::uint8* TGuildWarChooseBuffReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarChooseBuffReq)
  // optional uint32 BuffId = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buffid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarChooseBuffReq)
  return target;
}

int TGuildWarChooseBuffReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BuffId = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarChooseBuffReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarChooseBuffReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarChooseBuffReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarChooseBuffReq::MergeFrom(const TGuildWarChooseBuffReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarChooseBuffReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarChooseBuffReq::CopyFrom(const TGuildWarChooseBuffReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarChooseBuffReq::IsInitialized() const {

  return true;
}

void TGuildWarChooseBuffReq::Swap(TGuildWarChooseBuffReq* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarChooseBuffReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarChooseBuffReq_descriptor_;
  metadata.reflection = TGuildWarChooseBuffReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTowerBattleRecordReq::kTowerIdFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTowerBattleRecordReq::TGuildWarGetTowerBattleRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTowerBattleRecordReq)
}

void TGuildWarGetTowerBattleRecordReq::InitAsDefaultInstance() {
}

TGuildWarGetTowerBattleRecordReq::TGuildWarGetTowerBattleRecordReq(const TGuildWarGetTowerBattleRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTowerBattleRecordReq)
}

void TGuildWarGetTowerBattleRecordReq::SharedCtor() {
  _cached_size_ = 0;
  towerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTowerBattleRecordReq::~TGuildWarGetTowerBattleRecordReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTowerBattleRecordReq)
  SharedDtor();
}

void TGuildWarGetTowerBattleRecordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetTowerBattleRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTowerBattleRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTowerBattleRecordReq_descriptor_;
}

const TGuildWarGetTowerBattleRecordReq& TGuildWarGetTowerBattleRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTowerBattleRecordReq* TGuildWarGetTowerBattleRecordReq::default_instance_ = NULL;

TGuildWarGetTowerBattleRecordReq* TGuildWarGetTowerBattleRecordReq::New() const {
  return new TGuildWarGetTowerBattleRecordReq;
}

void TGuildWarGetTowerBattleRecordReq::Clear() {
  towerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTowerBattleRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTowerBattleRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTowerBattleRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTowerBattleRecordReq)
  return false;
#undef DO_
}

void TGuildWarGetTowerBattleRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTowerBattleRecordReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTowerBattleRecordReq)
}

::google::protobuf::uint8* TGuildWarGetTowerBattleRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTowerBattleRecordReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTowerBattleRecordReq)
  return target;
}

int TGuildWarGetTowerBattleRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerId = 1;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTowerBattleRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTowerBattleRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTowerBattleRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTowerBattleRecordReq::MergeFrom(const TGuildWarGetTowerBattleRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTowerBattleRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTowerBattleRecordReq::CopyFrom(const TGuildWarGetTowerBattleRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTowerBattleRecordReq::IsInitialized() const {

  return true;
}

void TGuildWarGetTowerBattleRecordReq::Swap(TGuildWarGetTowerBattleRecordReq* other) {
  if (other != this) {
    std::swap(towerid_, other->towerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTowerBattleRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTowerBattleRecordReq_descriptor_;
  metadata.reflection = TGuildWarGetTowerBattleRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTowerBattleRecordRsp::kArrRecordInfoFieldNumber;
const int TGuildWarGetTowerBattleRecordRsp::kArrUserSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTowerBattleRecordRsp::TGuildWarGetTowerBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTowerBattleRecordRsp)
}

void TGuildWarGetTowerBattleRecordRsp::InitAsDefaultInstance() {
}

TGuildWarGetTowerBattleRecordRsp::TGuildWarGetTowerBattleRecordRsp(const TGuildWarGetTowerBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTowerBattleRecordRsp)
}

void TGuildWarGetTowerBattleRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTowerBattleRecordRsp::~TGuildWarGetTowerBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTowerBattleRecordRsp)
  SharedDtor();
}

void TGuildWarGetTowerBattleRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetTowerBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTowerBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTowerBattleRecordRsp_descriptor_;
}

const TGuildWarGetTowerBattleRecordRsp& TGuildWarGetTowerBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTowerBattleRecordRsp* TGuildWarGetTowerBattleRecordRsp::default_instance_ = NULL;

TGuildWarGetTowerBattleRecordRsp* TGuildWarGetTowerBattleRecordRsp::New() const {
  return new TGuildWarGetTowerBattleRecordRsp;
}

void TGuildWarGetTowerBattleRecordRsp::Clear() {
  arrrecordinfo_.Clear();
  arrusersimpleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTowerBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTowerBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRecordInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrecordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRecordInfo;
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrUserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrusersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTowerBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTowerBattleRecordRsp)
  return false;
#undef DO_
}

void TGuildWarGetTowerBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTowerBattleRecordRsp)
  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrecordinfo(i), output);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrusersimpleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTowerBattleRecordRsp)
}

::google::protobuf::uint8* TGuildWarGetTowerBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTowerBattleRecordRsp)
  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrecordinfo(i), target);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrusersimpleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTowerBattleRecordRsp)
  return target;
}

int TGuildWarGetTowerBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  total_size += 1 * this->arrrecordinfo_size();
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrecordinfo(i));
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  total_size += 1 * this->arrusersimpleinfo_size();
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrusersimpleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTowerBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTowerBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTowerBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTowerBattleRecordRsp::MergeFrom(const TGuildWarGetTowerBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrecordinfo_.MergeFrom(from.arrrecordinfo_);
  arrusersimpleinfo_.MergeFrom(from.arrusersimpleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTowerBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTowerBattleRecordRsp::CopyFrom(const TGuildWarGetTowerBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTowerBattleRecordRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetTowerBattleRecordRsp::Swap(TGuildWarGetTowerBattleRecordRsp* other) {
  if (other != this) {
    arrrecordinfo_.Swap(&other->arrrecordinfo_);
    arrusersimpleinfo_.Swap(&other->arrusersimpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTowerBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTowerBattleRecordRsp_descriptor_;
  metadata.reflection = TGuildWarGetTowerBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTeamBattleRecordReq::kTowerIdFieldNumber;
const int TGuildWarGetTeamBattleRecordReq::kTeamIdInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTeamBattleRecordReq::TGuildWarGetTeamBattleRecordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTeamBattleRecordReq)
}

void TGuildWarGetTeamBattleRecordReq::InitAsDefaultInstance() {
  teamidinfo_ = const_cast< ::pb::TGuildWarTeamIdInfo*>(&::pb::TGuildWarTeamIdInfo::default_instance());
}

TGuildWarGetTeamBattleRecordReq::TGuildWarGetTeamBattleRecordReq(const TGuildWarGetTeamBattleRecordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTeamBattleRecordReq)
}

void TGuildWarGetTeamBattleRecordReq::SharedCtor() {
  _cached_size_ = 0;
  towerid_ = 0u;
  teamidinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTeamBattleRecordReq::~TGuildWarGetTeamBattleRecordReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTeamBattleRecordReq)
  SharedDtor();
}

void TGuildWarGetTeamBattleRecordReq::SharedDtor() {
  if (this != default_instance_) {
    delete teamidinfo_;
  }
}

void TGuildWarGetTeamBattleRecordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTeamBattleRecordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTeamBattleRecordReq_descriptor_;
}

const TGuildWarGetTeamBattleRecordReq& TGuildWarGetTeamBattleRecordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTeamBattleRecordReq* TGuildWarGetTeamBattleRecordReq::default_instance_ = NULL;

TGuildWarGetTeamBattleRecordReq* TGuildWarGetTeamBattleRecordReq::New() const {
  return new TGuildWarGetTeamBattleRecordReq;
}

void TGuildWarGetTeamBattleRecordReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    towerid_ = 0u;
    if (has_teamidinfo()) {
      if (teamidinfo_ != NULL) teamidinfo_->::pb::TGuildWarTeamIdInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTeamBattleRecordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTeamBattleRecordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_TeamIdInfo;
        break;
      }

      // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_TeamIdInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamidinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTeamBattleRecordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTeamBattleRecordReq)
  return false;
#undef DO_
}

void TGuildWarGetTeamBattleRecordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTeamBattleRecordReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerid(), output);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teamidinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTeamBattleRecordReq)
}

::google::protobuf::uint8* TGuildWarGetTeamBattleRecordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTeamBattleRecordReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerid(), target);
  }

  // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
  if (has_teamidinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teamidinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTeamBattleRecordReq)
  return target;
}

int TGuildWarGetTeamBattleRecordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerId = 1;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

    // optional .pb.TGuildWarTeamIdInfo TeamIdInfo = 2;
    if (has_teamidinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamidinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTeamBattleRecordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTeamBattleRecordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTeamBattleRecordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTeamBattleRecordReq::MergeFrom(const TGuildWarGetTeamBattleRecordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
    if (from.has_teamidinfo()) {
      mutable_teamidinfo()->::pb::TGuildWarTeamIdInfo::MergeFrom(from.teamidinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTeamBattleRecordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTeamBattleRecordReq::CopyFrom(const TGuildWarGetTeamBattleRecordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTeamBattleRecordReq::IsInitialized() const {

  return true;
}

void TGuildWarGetTeamBattleRecordReq::Swap(TGuildWarGetTeamBattleRecordReq* other) {
  if (other != this) {
    std::swap(towerid_, other->towerid_);
    std::swap(teamidinfo_, other->teamidinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTeamBattleRecordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTeamBattleRecordReq_descriptor_;
  metadata.reflection = TGuildWarGetTeamBattleRecordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTeamBattleRecordRsp::kArrRecordInfoFieldNumber;
const int TGuildWarGetTeamBattleRecordRsp::kArrUserSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTeamBattleRecordRsp::TGuildWarGetTeamBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTeamBattleRecordRsp)
}

void TGuildWarGetTeamBattleRecordRsp::InitAsDefaultInstance() {
}

TGuildWarGetTeamBattleRecordRsp::TGuildWarGetTeamBattleRecordRsp(const TGuildWarGetTeamBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTeamBattleRecordRsp)
}

void TGuildWarGetTeamBattleRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTeamBattleRecordRsp::~TGuildWarGetTeamBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTeamBattleRecordRsp)
  SharedDtor();
}

void TGuildWarGetTeamBattleRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetTeamBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTeamBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTeamBattleRecordRsp_descriptor_;
}

const TGuildWarGetTeamBattleRecordRsp& TGuildWarGetTeamBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTeamBattleRecordRsp* TGuildWarGetTeamBattleRecordRsp::default_instance_ = NULL;

TGuildWarGetTeamBattleRecordRsp* TGuildWarGetTeamBattleRecordRsp::New() const {
  return new TGuildWarGetTeamBattleRecordRsp;
}

void TGuildWarGetTeamBattleRecordRsp::Clear() {
  arrrecordinfo_.Clear();
  arrusersimpleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTeamBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTeamBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRecordInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrecordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRecordInfo;
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrUserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrusersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTeamBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTeamBattleRecordRsp)
  return false;
#undef DO_
}

void TGuildWarGetTeamBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTeamBattleRecordRsp)
  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrecordinfo(i), output);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrusersimpleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTeamBattleRecordRsp)
}

::google::protobuf::uint8* TGuildWarGetTeamBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTeamBattleRecordRsp)
  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrecordinfo(i), target);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrusersimpleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTeamBattleRecordRsp)
  return target;
}

int TGuildWarGetTeamBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  total_size += 1 * this->arrrecordinfo_size();
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrecordinfo(i));
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  total_size += 1 * this->arrusersimpleinfo_size();
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrusersimpleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTeamBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTeamBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTeamBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTeamBattleRecordRsp::MergeFrom(const TGuildWarGetTeamBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrecordinfo_.MergeFrom(from.arrrecordinfo_);
  arrusersimpleinfo_.MergeFrom(from.arrusersimpleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTeamBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTeamBattleRecordRsp::CopyFrom(const TGuildWarGetTeamBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTeamBattleRecordRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetTeamBattleRecordRsp::Swap(TGuildWarGetTeamBattleRecordRsp* other) {
  if (other != this) {
    arrrecordinfo_.Swap(&other->arrrecordinfo_);
    arrusersimpleinfo_.Swap(&other->arrusersimpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTeamBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTeamBattleRecordRsp_descriptor_;
  metadata.reflection = TGuildWarGetTeamBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetSelfBattleRecordRsp::kArrRecordInfoFieldNumber;
const int TGuildWarGetSelfBattleRecordRsp::kArrUserSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetSelfBattleRecordRsp::TGuildWarGetSelfBattleRecordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetSelfBattleRecordRsp)
}

void TGuildWarGetSelfBattleRecordRsp::InitAsDefaultInstance() {
}

TGuildWarGetSelfBattleRecordRsp::TGuildWarGetSelfBattleRecordRsp(const TGuildWarGetSelfBattleRecordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetSelfBattleRecordRsp)
}

void TGuildWarGetSelfBattleRecordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetSelfBattleRecordRsp::~TGuildWarGetSelfBattleRecordRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetSelfBattleRecordRsp)
  SharedDtor();
}

void TGuildWarGetSelfBattleRecordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetSelfBattleRecordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetSelfBattleRecordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetSelfBattleRecordRsp_descriptor_;
}

const TGuildWarGetSelfBattleRecordRsp& TGuildWarGetSelfBattleRecordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetSelfBattleRecordRsp* TGuildWarGetSelfBattleRecordRsp::default_instance_ = NULL;

TGuildWarGetSelfBattleRecordRsp* TGuildWarGetSelfBattleRecordRsp::New() const {
  return new TGuildWarGetSelfBattleRecordRsp;
}

void TGuildWarGetSelfBattleRecordRsp::Clear() {
  arrrecordinfo_.Clear();
  arrusersimpleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetSelfBattleRecordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetSelfBattleRecordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRecordInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrecordinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRecordInfo;
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrUserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrusersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetSelfBattleRecordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetSelfBattleRecordRsp)
  return false;
#undef DO_
}

void TGuildWarGetSelfBattleRecordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetSelfBattleRecordRsp)
  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrecordinfo(i), output);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrusersimpleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetSelfBattleRecordRsp)
}

::google::protobuf::uint8* TGuildWarGetSelfBattleRecordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetSelfBattleRecordRsp)
  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrecordinfo(i), target);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrusersimpleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetSelfBattleRecordRsp)
  return target;
}

int TGuildWarGetSelfBattleRecordRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWarBattleRecordInfo ArrRecordInfo = 1;
  total_size += 1 * this->arrrecordinfo_size();
  for (int i = 0; i < this->arrrecordinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrecordinfo(i));
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  total_size += 1 * this->arrusersimpleinfo_size();
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrusersimpleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetSelfBattleRecordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetSelfBattleRecordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetSelfBattleRecordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetSelfBattleRecordRsp::MergeFrom(const TGuildWarGetSelfBattleRecordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrecordinfo_.MergeFrom(from.arrrecordinfo_);
  arrusersimpleinfo_.MergeFrom(from.arrusersimpleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetSelfBattleRecordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetSelfBattleRecordRsp::CopyFrom(const TGuildWarGetSelfBattleRecordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetSelfBattleRecordRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetSelfBattleRecordRsp::Swap(TGuildWarGetSelfBattleRecordRsp* other) {
  if (other != this) {
    arrrecordinfo_.Swap(&other->arrrecordinfo_);
    arrusersimpleinfo_.Swap(&other->arrusersimpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetSelfBattleRecordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetSelfBattleRecordRsp_descriptor_;
  metadata.reflection = TGuildWarGetSelfBattleRecordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTowerRewardReq::kTowerIdFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTowerRewardReq::TGuildWarGetTowerRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTowerRewardReq)
}

void TGuildWarGetTowerRewardReq::InitAsDefaultInstance() {
}

TGuildWarGetTowerRewardReq::TGuildWarGetTowerRewardReq(const TGuildWarGetTowerRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTowerRewardReq)
}

void TGuildWarGetTowerRewardReq::SharedCtor() {
  _cached_size_ = 0;
  towerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTowerRewardReq::~TGuildWarGetTowerRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTowerRewardReq)
  SharedDtor();
}

void TGuildWarGetTowerRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetTowerRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTowerRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTowerRewardReq_descriptor_;
}

const TGuildWarGetTowerRewardReq& TGuildWarGetTowerRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTowerRewardReq* TGuildWarGetTowerRewardReq::default_instance_ = NULL;

TGuildWarGetTowerRewardReq* TGuildWarGetTowerRewardReq::New() const {
  return new TGuildWarGetTowerRewardReq;
}

void TGuildWarGetTowerRewardReq::Clear() {
  towerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTowerRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTowerRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TowerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &towerid_)));
          set_has_towerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTowerRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTowerRewardReq)
  return false;
#undef DO_
}

void TGuildWarGetTowerRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTowerRewardReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->towerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTowerRewardReq)
}

::google::protobuf::uint8* TGuildWarGetTowerRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTowerRewardReq)
  // optional uint32 TowerId = 1;
  if (has_towerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->towerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTowerRewardReq)
  return target;
}

int TGuildWarGetTowerRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TowerId = 1;
    if (has_towerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->towerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTowerRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTowerRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTowerRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTowerRewardReq::MergeFrom(const TGuildWarGetTowerRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_towerid()) {
      set_towerid(from.towerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTowerRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTowerRewardReq::CopyFrom(const TGuildWarGetTowerRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTowerRewardReq::IsInitialized() const {

  return true;
}

void TGuildWarGetTowerRewardReq::Swap(TGuildWarGetTowerRewardReq* other) {
  if (other != this) {
    std::swap(towerid_, other->towerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTowerRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTowerRewardReq_descriptor_;
  metadata.reflection = TGuildWarGetTowerRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetTowerRewardRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetTowerRewardRsp::TGuildWarGetTowerRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetTowerRewardRsp)
}

void TGuildWarGetTowerRewardRsp::InitAsDefaultInstance() {
}

TGuildWarGetTowerRewardRsp::TGuildWarGetTowerRewardRsp(const TGuildWarGetTowerRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetTowerRewardRsp)
}

void TGuildWarGetTowerRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetTowerRewardRsp::~TGuildWarGetTowerRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetTowerRewardRsp)
  SharedDtor();
}

void TGuildWarGetTowerRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetTowerRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetTowerRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetTowerRewardRsp_descriptor_;
}

const TGuildWarGetTowerRewardRsp& TGuildWarGetTowerRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetTowerRewardRsp* TGuildWarGetTowerRewardRsp::default_instance_ = NULL;

TGuildWarGetTowerRewardRsp* TGuildWarGetTowerRewardRsp::New() const {
  return new TGuildWarGetTowerRewardRsp;
}

void TGuildWarGetTowerRewardRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetTowerRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetTowerRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetTowerRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetTowerRewardRsp)
  return false;
#undef DO_
}

void TGuildWarGetTowerRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetTowerRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetTowerRewardRsp)
}

::google::protobuf::uint8* TGuildWarGetTowerRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetTowerRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetTowerRewardRsp)
  return target;
}

int TGuildWarGetTowerRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetTowerRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetTowerRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetTowerRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetTowerRewardRsp::MergeFrom(const TGuildWarGetTowerRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetTowerRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetTowerRewardRsp::CopyFrom(const TGuildWarGetTowerRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetTowerRewardRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetTowerRewardRsp::Swap(TGuildWarGetTowerRewardRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetTowerRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetTowerRewardRsp_descriptor_;
  metadata.reflection = TGuildWarGetTowerRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetBuffListRsp::kArrBuffFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetBuffListRsp::TGuildWarGetBuffListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetBuffListRsp)
}

void TGuildWarGetBuffListRsp::InitAsDefaultInstance() {
}

TGuildWarGetBuffListRsp::TGuildWarGetBuffListRsp(const TGuildWarGetBuffListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetBuffListRsp)
}

void TGuildWarGetBuffListRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetBuffListRsp::~TGuildWarGetBuffListRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetBuffListRsp)
  SharedDtor();
}

void TGuildWarGetBuffListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetBuffListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetBuffListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetBuffListRsp_descriptor_;
}

const TGuildWarGetBuffListRsp& TGuildWarGetBuffListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetBuffListRsp* TGuildWarGetBuffListRsp::default_instance_ = NULL;

TGuildWarGetBuffListRsp* TGuildWarGetBuffListRsp::New() const {
  return new TGuildWarGetBuffListRsp;
}

void TGuildWarGetBuffListRsp::Clear() {
  arrbuff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetBuffListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetBuffListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 ArrBuff = 1;
      case 1: {
        if (tag == 8) {
         parse_ArrBuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_arrbuff())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_arrbuff())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_ArrBuff;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetBuffListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetBuffListRsp)
  return false;
#undef DO_
}

void TGuildWarGetBuffListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetBuffListRsp)
  // repeated uint32 ArrBuff = 1;
  for (int i = 0; i < this->arrbuff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->arrbuff(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetBuffListRsp)
}

::google::protobuf::uint8* TGuildWarGetBuffListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetBuffListRsp)
  // repeated uint32 ArrBuff = 1;
  for (int i = 0; i < this->arrbuff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->arrbuff(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetBuffListRsp)
  return target;
}

int TGuildWarGetBuffListRsp::ByteSize() const {
  int total_size = 0;

  // repeated uint32 ArrBuff = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrbuff_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->arrbuff(i));
    }
    total_size += 1 * this->arrbuff_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetBuffListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetBuffListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetBuffListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetBuffListRsp::MergeFrom(const TGuildWarGetBuffListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrbuff_.MergeFrom(from.arrbuff_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetBuffListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetBuffListRsp::CopyFrom(const TGuildWarGetBuffListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetBuffListRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetBuffListRsp::Swap(TGuildWarGetBuffListRsp* other) {
  if (other != this) {
    arrbuff_.Swap(&other->arrbuff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetBuffListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetBuffListRsp_descriptor_;
  metadata.reflection = TGuildWarGetBuffListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetFieldRankRsp::kArrRankFieldNumber;
const int TGuildWarGetFieldRankRsp::kArrUserSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetFieldRankRsp::TGuildWarGetFieldRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetFieldRankRsp)
}

void TGuildWarGetFieldRankRsp::InitAsDefaultInstance() {
}

TGuildWarGetFieldRankRsp::TGuildWarGetFieldRankRsp(const TGuildWarGetFieldRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetFieldRankRsp)
}

void TGuildWarGetFieldRankRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetFieldRankRsp::~TGuildWarGetFieldRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetFieldRankRsp)
  SharedDtor();
}

void TGuildWarGetFieldRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetFieldRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetFieldRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetFieldRankRsp_descriptor_;
}

const TGuildWarGetFieldRankRsp& TGuildWarGetFieldRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetFieldRankRsp* TGuildWarGetFieldRankRsp::default_instance_ = NULL;

TGuildWarGetFieldRankRsp* TGuildWarGetFieldRankRsp::New() const {
  return new TGuildWarGetFieldRankRsp;
}

void TGuildWarGetFieldRankRsp::Clear() {
  arrrank_.Clear();
  arrusersimpleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetFieldRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetFieldRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarRankInfo ArrRank = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRank;
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        break;
      }

      // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrUserSimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrusersimpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrUserSimpleInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetFieldRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetFieldRankRsp)
  return false;
#undef DO_
}

void TGuildWarGetFieldRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetFieldRankRsp)
  // repeated .pb.TGuildWarRankInfo ArrRank = 1;
  for (int i = 0; i < this->arrrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrank(i), output);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrusersimpleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetFieldRankRsp)
}

::google::protobuf::uint8* TGuildWarGetFieldRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetFieldRankRsp)
  // repeated .pb.TGuildWarRankInfo ArrRank = 1;
  for (int i = 0; i < this->arrrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrank(i), target);
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrusersimpleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetFieldRankRsp)
  return target;
}

int TGuildWarGetFieldRankRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWarRankInfo ArrRank = 1;
  total_size += 1 * this->arrrank_size();
  for (int i = 0; i < this->arrrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrank(i));
  }

  // repeated .pb.TUserSimpleInfo ArrUserSimpleInfo = 2;
  total_size += 1 * this->arrusersimpleinfo_size();
  for (int i = 0; i < this->arrusersimpleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrusersimpleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetFieldRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetFieldRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetFieldRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetFieldRankRsp::MergeFrom(const TGuildWarGetFieldRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrank_.MergeFrom(from.arrrank_);
  arrusersimpleinfo_.MergeFrom(from.arrusersimpleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetFieldRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetFieldRankRsp::CopyFrom(const TGuildWarGetFieldRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetFieldRankRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetFieldRankRsp::Swap(TGuildWarGetFieldRankRsp* other) {
  if (other != this) {
    arrrank_.Swap(&other->arrrank_);
    arrusersimpleinfo_.Swap(&other->arrusersimpleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetFieldRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetFieldRankRsp_descriptor_;
  metadata.reflection = TGuildWarGetFieldRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarGetEndRewardRsp::kRewardArrayFieldNumber;
#endif  // !_MSC_VER

TGuildWarGetEndRewardRsp::TGuildWarGetEndRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarGetEndRewardRsp)
}

void TGuildWarGetEndRewardRsp::InitAsDefaultInstance() {
}

TGuildWarGetEndRewardRsp::TGuildWarGetEndRewardRsp(const TGuildWarGetEndRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarGetEndRewardRsp)
}

void TGuildWarGetEndRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarGetEndRewardRsp::~TGuildWarGetEndRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarGetEndRewardRsp)
  SharedDtor();
}

void TGuildWarGetEndRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarGetEndRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarGetEndRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarGetEndRewardRsp_descriptor_;
}

const TGuildWarGetEndRewardRsp& TGuildWarGetEndRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarGetEndRewardRsp* TGuildWarGetEndRewardRsp::default_instance_ = NULL;

TGuildWarGetEndRewardRsp* TGuildWarGetEndRewardRsp::New() const {
  return new TGuildWarGetEndRewardRsp;
}

void TGuildWarGetEndRewardRsp::Clear() {
  rewardarray_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarGetEndRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarGetEndRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward RewardArray = 1;
      case 1: {
        if (tag == 10) {
         parse_RewardArray:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarray()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RewardArray;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarGetEndRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarGetEndRewardRsp)
  return false;
#undef DO_
}

void TGuildWarGetEndRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarGetEndRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewardarray(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarGetEndRewardRsp)
}

::google::protobuf::uint8* TGuildWarGetEndRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarGetEndRewardRsp)
  // repeated .pb.TCommonReward RewardArray = 1;
  for (int i = 0; i < this->rewardarray_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewardarray(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarGetEndRewardRsp)
  return target;
}

int TGuildWarGetEndRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward RewardArray = 1;
  total_size += 1 * this->rewardarray_size();
  for (int i = 0; i < this->rewardarray_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarray(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarGetEndRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarGetEndRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarGetEndRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarGetEndRewardRsp::MergeFrom(const TGuildWarGetEndRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardarray_.MergeFrom(from.rewardarray_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarGetEndRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarGetEndRewardRsp::CopyFrom(const TGuildWarGetEndRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarGetEndRewardRsp::IsInitialized() const {

  return true;
}

void TGuildWarGetEndRewardRsp::Swap(TGuildWarGetEndRewardRsp* other) {
  if (other != this) {
    rewardarray_.Swap(&other->rewardarray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarGetEndRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarGetEndRewardRsp_descriptor_;
  metadata.reflection = TGuildWarGetEndRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarSendMsgReq::kMsgTypeFieldNumber;
const int TGuildWarSendMsgReq::kMsgFieldNumber;
#endif  // !_MSC_VER

TGuildWarSendMsgReq::TGuildWarSendMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarSendMsgReq)
}

void TGuildWarSendMsgReq::InitAsDefaultInstance() {
}

TGuildWarSendMsgReq::TGuildWarSendMsgReq(const TGuildWarSendMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarSendMsgReq)
}

void TGuildWarSendMsgReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgtype_ = 1;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarSendMsgReq::~TGuildWarSendMsgReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarSendMsgReq)
  SharedDtor();
}

void TGuildWarSendMsgReq::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void TGuildWarSendMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarSendMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarSendMsgReq_descriptor_;
}

const TGuildWarSendMsgReq& TGuildWarSendMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarSendMsgReq* TGuildWarSendMsgReq::default_instance_ = NULL;

TGuildWarSendMsgReq* TGuildWarSendMsgReq::New() const {
  return new TGuildWarSendMsgReq;
}

void TGuildWarSendMsgReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgtype_ = 1;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarSendMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarSendMsgReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EGuildWarMsgType MsgType = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuildWarMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::pb::EGuildWarMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Msg;
        break;
      }

      // optional string Msg = 2;
      case 2: {
        if (tag == 18) {
         parse_Msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarSendMsgReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarSendMsgReq)
  return false;
#undef DO_
}

void TGuildWarSendMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarSendMsgReq)
  // optional .pb.EGuildWarMsgType MsgType = 1;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // optional string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarSendMsgReq)
}

::google::protobuf::uint8* TGuildWarSendMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarSendMsgReq)
  // optional .pb.EGuildWarMsgType MsgType = 1;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msgtype(), target);
  }

  // optional string Msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarSendMsgReq)
  return target;
}

int TGuildWarSendMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EGuildWarMsgType MsgType = 1;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

    // optional string Msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarSendMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarSendMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarSendMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarSendMsgReq::MergeFrom(const TGuildWarSendMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarSendMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarSendMsgReq::CopyFrom(const TGuildWarSendMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarSendMsgReq::IsInitialized() const {

  return true;
}

void TGuildWarSendMsgReq::Swap(TGuildWarSendMsgReq* other) {
  if (other != this) {
    std::swap(msgtype_, other->msgtype_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarSendMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarSendMsgReq_descriptor_;
  metadata.reflection = TGuildWarSendMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarMoveReq::kTargetPosFieldNumber;
#endif  // !_MSC_VER

TGuildWarMoveReq::TGuildWarMoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarMoveReq)
}

void TGuildWarMoveReq::InitAsDefaultInstance() {
}

TGuildWarMoveReq::TGuildWarMoveReq(const TGuildWarMoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarMoveReq)
}

void TGuildWarMoveReq::SharedCtor() {
  _cached_size_ = 0;
  targetpos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarMoveReq::~TGuildWarMoveReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarMoveReq)
  SharedDtor();
}

void TGuildWarMoveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarMoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarMoveReq_descriptor_;
}

const TGuildWarMoveReq& TGuildWarMoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarMoveReq* TGuildWarMoveReq::default_instance_ = NULL;

TGuildWarMoveReq* TGuildWarMoveReq::New() const {
  return new TGuildWarMoveReq;
}

void TGuildWarMoveReq::Clear() {
  targetpos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarMoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TargetPos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &targetpos_)));
          set_has_targetpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarMoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarMoveReq)
  return false;
#undef DO_
}

void TGuildWarMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarMoveReq)
  // optional uint32 TargetPos = 1;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarMoveReq)
}

::google::protobuf::uint8* TGuildWarMoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarMoveReq)
  // optional uint32 TargetPos = 1;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarMoveReq)
  return target;
}

int TGuildWarMoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TargetPos = 1;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarMoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarMoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarMoveReq::MergeFrom(const TGuildWarMoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetpos()) {
      set_targetpos(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarMoveReq::CopyFrom(const TGuildWarMoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarMoveReq::IsInitialized() const {

  return true;
}

void TGuildWarMoveReq::Swap(TGuildWarMoveReq* other) {
  if (other != this) {
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarMoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarMoveReq_descriptor_;
  metadata.reflection = TGuildWarMoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarUserMoveNotify::kOtherUserInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarUserMoveNotify::TGuildWarUserMoveNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarUserMoveNotify)
}

void TGuildWarUserMoveNotify::InitAsDefaultInstance() {
  otheruserinfo_ = const_cast< ::pb::TGuildWarOtherUserInfo*>(&::pb::TGuildWarOtherUserInfo::default_instance());
}

TGuildWarUserMoveNotify::TGuildWarUserMoveNotify(const TGuildWarUserMoveNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarUserMoveNotify)
}

void TGuildWarUserMoveNotify::SharedCtor() {
  _cached_size_ = 0;
  otheruserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarUserMoveNotify::~TGuildWarUserMoveNotify() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarUserMoveNotify)
  SharedDtor();
}

void TGuildWarUserMoveNotify::SharedDtor() {
  if (this != default_instance_) {
    delete otheruserinfo_;
  }
}

void TGuildWarUserMoveNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarUserMoveNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarUserMoveNotify_descriptor_;
}

const TGuildWarUserMoveNotify& TGuildWarUserMoveNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarUserMoveNotify* TGuildWarUserMoveNotify::default_instance_ = NULL;

TGuildWarUserMoveNotify* TGuildWarUserMoveNotify::New() const {
  return new TGuildWarUserMoveNotify;
}

void TGuildWarUserMoveNotify::Clear() {
  if (has_otheruserinfo()) {
    if (otheruserinfo_ != NULL) otheruserinfo_->::pb::TGuildWarOtherUserInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarUserMoveNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarUserMoveNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarOtherUserInfo OtherUserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_otheruserinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarUserMoveNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarUserMoveNotify)
  return false;
#undef DO_
}

void TGuildWarUserMoveNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarUserMoveNotify)
  // optional .pb.TGuildWarOtherUserInfo OtherUserInfo = 1;
  if (has_otheruserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->otheruserinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarUserMoveNotify)
}

::google::protobuf::uint8* TGuildWarUserMoveNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarUserMoveNotify)
  // optional .pb.TGuildWarOtherUserInfo OtherUserInfo = 1;
  if (has_otheruserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->otheruserinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarUserMoveNotify)
  return target;
}

int TGuildWarUserMoveNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarOtherUserInfo OtherUserInfo = 1;
    if (has_otheruserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->otheruserinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarUserMoveNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarUserMoveNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarUserMoveNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarUserMoveNotify::MergeFrom(const TGuildWarUserMoveNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otheruserinfo()) {
      mutable_otheruserinfo()->::pb::TGuildWarOtherUserInfo::MergeFrom(from.otheruserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarUserMoveNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarUserMoveNotify::CopyFrom(const TGuildWarUserMoveNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarUserMoveNotify::IsInitialized() const {

  return true;
}

void TGuildWarUserMoveNotify::Swap(TGuildWarUserMoveNotify* other) {
  if (other != this) {
    std::swap(otheruserinfo_, other->otheruserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarUserMoveNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarUserMoveNotify_descriptor_;
  metadata.reflection = TGuildWarUserMoveNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarStageNotify::kStageInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarStageNotify::TGuildWarStageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarStageNotify)
}

void TGuildWarStageNotify::InitAsDefaultInstance() {
  stageinfo_ = const_cast< ::pb::TGuildWarStageInfo*>(&::pb::TGuildWarStageInfo::default_instance());
}

TGuildWarStageNotify::TGuildWarStageNotify(const TGuildWarStageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarStageNotify)
}

void TGuildWarStageNotify::SharedCtor() {
  _cached_size_ = 0;
  stageinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarStageNotify::~TGuildWarStageNotify() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarStageNotify)
  SharedDtor();
}

void TGuildWarStageNotify::SharedDtor() {
  if (this != default_instance_) {
    delete stageinfo_;
  }
}

void TGuildWarStageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarStageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarStageNotify_descriptor_;
}

const TGuildWarStageNotify& TGuildWarStageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarStageNotify* TGuildWarStageNotify::default_instance_ = NULL;

TGuildWarStageNotify* TGuildWarStageNotify::New() const {
  return new TGuildWarStageNotify;
}

void TGuildWarStageNotify::Clear() {
  if (has_stageinfo()) {
    if (stageinfo_ != NULL) stageinfo_->::pb::TGuildWarStageInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarStageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarStageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarStageInfo StageInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarStageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarStageNotify)
  return false;
#undef DO_
}

void TGuildWarStageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarStageNotify)
  // optional .pb.TGuildWarStageInfo StageInfo = 1;
  if (has_stageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stageinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarStageNotify)
}

::google::protobuf::uint8* TGuildWarStageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarStageNotify)
  // optional .pb.TGuildWarStageInfo StageInfo = 1;
  if (has_stageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stageinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarStageNotify)
  return target;
}

int TGuildWarStageNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarStageInfo StageInfo = 1;
    if (has_stageinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stageinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarStageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarStageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarStageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarStageNotify::MergeFrom(const TGuildWarStageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageinfo()) {
      mutable_stageinfo()->::pb::TGuildWarStageInfo::MergeFrom(from.stageinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarStageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarStageNotify::CopyFrom(const TGuildWarStageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarStageNotify::IsInitialized() const {

  return true;
}

void TGuildWarStageNotify::Swap(TGuildWarStageNotify* other) {
  if (other != this) {
    std::swap(stageinfo_, other->stageinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarStageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarStageNotify_descriptor_;
  metadata.reflection = TGuildWarStageNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarTowerNotify::kArrTowerInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarTowerNotify::TGuildWarTowerNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarTowerNotify)
}

void TGuildWarTowerNotify::InitAsDefaultInstance() {
}

TGuildWarTowerNotify::TGuildWarTowerNotify(const TGuildWarTowerNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarTowerNotify)
}

void TGuildWarTowerNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarTowerNotify::~TGuildWarTowerNotify() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarTowerNotify)
  SharedDtor();
}

void TGuildWarTowerNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildWarTowerNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarTowerNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarTowerNotify_descriptor_;
}

const TGuildWarTowerNotify& TGuildWarTowerNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarTowerNotify* TGuildWarTowerNotify::default_instance_ = NULL;

TGuildWarTowerNotify* TGuildWarTowerNotify::New() const {
  return new TGuildWarTowerNotify;
}

void TGuildWarTowerNotify::Clear() {
  arrtowerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarTowerNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarTowerNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrTowerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtowerinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrTowerInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarTowerNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarTowerNotify)
  return false;
#undef DO_
}

void TGuildWarTowerNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarTowerNotify)
  // repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
  for (int i = 0; i < this->arrtowerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrtowerinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarTowerNotify)
}

::google::protobuf::uint8* TGuildWarTowerNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarTowerNotify)
  // repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
  for (int i = 0; i < this->arrtowerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrtowerinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarTowerNotify)
  return target;
}

int TGuildWarTowerNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TGuildWarTowerSimpleInfo ArrTowerInfo = 1;
  total_size += 1 * this->arrtowerinfo_size();
  for (int i = 0; i < this->arrtowerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtowerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarTowerNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarTowerNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarTowerNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarTowerNotify::MergeFrom(const TGuildWarTowerNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrtowerinfo_.MergeFrom(from.arrtowerinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarTowerNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarTowerNotify::CopyFrom(const TGuildWarTowerNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarTowerNotify::IsInitialized() const {

  return true;
}

void TGuildWarTowerNotify::Swap(TGuildWarTowerNotify* other) {
  if (other != this) {
    arrtowerinfo_.Swap(&other->arrtowerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarTowerNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarTowerNotify_descriptor_;
  metadata.reflection = TGuildWarTowerNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarMessageWithChatType::kChatMessageFieldNumber;
const int TGuildWarMessageWithChatType::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

TGuildWarMessageWithChatType::TGuildWarMessageWithChatType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarMessageWithChatType)
}

void TGuildWarMessageWithChatType::InitAsDefaultInstance() {
  chatmessage_ = const_cast< ::pb::TChatMessage*>(&::pb::TChatMessage::default_instance());
}

TGuildWarMessageWithChatType::TGuildWarMessageWithChatType(const TGuildWarMessageWithChatType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarMessageWithChatType)
}

void TGuildWarMessageWithChatType::SharedCtor() {
  _cached_size_ = 0;
  chatmessage_ = NULL;
  msgtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarMessageWithChatType::~TGuildWarMessageWithChatType() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarMessageWithChatType)
  SharedDtor();
}

void TGuildWarMessageWithChatType::SharedDtor() {
  if (this != default_instance_) {
    delete chatmessage_;
  }
}

void TGuildWarMessageWithChatType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarMessageWithChatType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarMessageWithChatType_descriptor_;
}

const TGuildWarMessageWithChatType& TGuildWarMessageWithChatType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarMessageWithChatType* TGuildWarMessageWithChatType::default_instance_ = NULL;

TGuildWarMessageWithChatType* TGuildWarMessageWithChatType::New() const {
  return new TGuildWarMessageWithChatType;
}

void TGuildWarMessageWithChatType::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_chatmessage()) {
      if (chatmessage_ != NULL) chatmessage_->::pb::TChatMessage::Clear();
    }
    msgtype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarMessageWithChatType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarMessageWithChatType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TChatMessage ChatMessage = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatmessage()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MsgType;
        break;
      }

      // optional .pb.EGuildWarMsgType MsgType = 2;
      case 2: {
        if (tag == 16) {
         parse_MsgType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EGuildWarMsgType_IsValid(value)) {
            set_msgtype(static_cast< ::pb::EGuildWarMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarMessageWithChatType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarMessageWithChatType)
  return false;
#undef DO_
}

void TGuildWarMessageWithChatType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarMessageWithChatType)
  // optional .pb.TChatMessage ChatMessage = 1;
  if (has_chatmessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->chatmessage(), output);
  }

  // optional .pb.EGuildWarMsgType MsgType = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarMessageWithChatType)
}

::google::protobuf::uint8* TGuildWarMessageWithChatType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarMessageWithChatType)
  // optional .pb.TChatMessage ChatMessage = 1;
  if (has_chatmessage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->chatmessage(), target);
  }

  // optional .pb.EGuildWarMsgType MsgType = 2;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarMessageWithChatType)
  return target;
}

int TGuildWarMessageWithChatType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TChatMessage ChatMessage = 1;
    if (has_chatmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatmessage());
    }

    // optional .pb.EGuildWarMsgType MsgType = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarMessageWithChatType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarMessageWithChatType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarMessageWithChatType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarMessageWithChatType::MergeFrom(const TGuildWarMessageWithChatType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chatmessage()) {
      mutable_chatmessage()->::pb::TChatMessage::MergeFrom(from.chatmessage());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarMessageWithChatType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarMessageWithChatType::CopyFrom(const TGuildWarMessageWithChatType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarMessageWithChatType::IsInitialized() const {

  return true;
}

void TGuildWarMessageWithChatType::Swap(TGuildWarMessageWithChatType* other) {
  if (other != this) {
    std::swap(chatmessage_, other->chatmessage_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarMessageWithChatType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarMessageWithChatType_descriptor_;
  metadata.reflection = TGuildWarMessageWithChatType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildWarMessageNotify::kMessageInfoFieldNumber;
#endif  // !_MSC_VER

TGuildWarMessageNotify::TGuildWarMessageNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildWarMessageNotify)
}

void TGuildWarMessageNotify::InitAsDefaultInstance() {
  messageinfo_ = const_cast< ::pb::TGuildWarMessageWithChatType*>(&::pb::TGuildWarMessageWithChatType::default_instance());
}

TGuildWarMessageNotify::TGuildWarMessageNotify(const TGuildWarMessageNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildWarMessageNotify)
}

void TGuildWarMessageNotify::SharedCtor() {
  _cached_size_ = 0;
  messageinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildWarMessageNotify::~TGuildWarMessageNotify() {
  // @@protoc_insertion_point(destructor:pb.TGuildWarMessageNotify)
  SharedDtor();
}

void TGuildWarMessageNotify::SharedDtor() {
  if (this != default_instance_) {
    delete messageinfo_;
  }
}

void TGuildWarMessageNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildWarMessageNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildWarMessageNotify_descriptor_;
}

const TGuildWarMessageNotify& TGuildWarMessageNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildWar_2eproto();
  return *default_instance_;
}

TGuildWarMessageNotify* TGuildWarMessageNotify::default_instance_ = NULL;

TGuildWarMessageNotify* TGuildWarMessageNotify::New() const {
  return new TGuildWarMessageNotify;
}

void TGuildWarMessageNotify::Clear() {
  if (has_messageinfo()) {
    if (messageinfo_ != NULL) messageinfo_->::pb::TGuildWarMessageWithChatType::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildWarMessageNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildWarMessageNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGuildWarMessageWithChatType MessageInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_messageinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildWarMessageNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildWarMessageNotify)
  return false;
#undef DO_
}

void TGuildWarMessageNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildWarMessageNotify)
  // optional .pb.TGuildWarMessageWithChatType MessageInfo = 1;
  if (has_messageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messageinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildWarMessageNotify)
}

::google::protobuf::uint8* TGuildWarMessageNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildWarMessageNotify)
  // optional .pb.TGuildWarMessageWithChatType MessageInfo = 1;
  if (has_messageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messageinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildWarMessageNotify)
  return target;
}

int TGuildWarMessageNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGuildWarMessageWithChatType MessageInfo = 1;
    if (has_messageinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->messageinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildWarMessageNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildWarMessageNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildWarMessageNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildWarMessageNotify::MergeFrom(const TGuildWarMessageNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageinfo()) {
      mutable_messageinfo()->::pb::TGuildWarMessageWithChatType::MergeFrom(from.messageinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildWarMessageNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildWarMessageNotify::CopyFrom(const TGuildWarMessageNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildWarMessageNotify::IsInitialized() const {

  return true;
}

void TGuildWarMessageNotify::Swap(TGuildWarMessageNotify* other) {
  if (other != this) {
    std::swap(messageinfo_, other->messageinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildWarMessageNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildWarMessageNotify_descriptor_;
  metadata.reflection = TGuildWarMessageNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
