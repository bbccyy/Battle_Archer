// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/PathData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/PathData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* AreaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AreaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ObstacleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObstacleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MistyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MistyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GridNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fPathData_2eproto() {
  protobuf_AddDesc_module_2fPathData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/PathData.proto");
  GOOGLE_CHECK(file != NULL);
  AreaInfo_descriptor_ = file->message_type(0);
  static const int AreaInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaInfo, areatype_),
  };
  AreaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AreaInfo_descriptor_,
      AreaInfo::default_instance_,
      AreaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AreaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AreaInfo));
  ObstacleInfo_descriptor_ = file->message_type(1);
  static const int ObstacleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleInfo, index_),
  };
  ObstacleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObstacleInfo_descriptor_,
      ObstacleInfo::default_instance_,
      ObstacleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObstacleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObstacleInfo));
  MistyInfo_descriptor_ = file->message_type(2);
  static const int MistyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MistyInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MistyInfo, index_),
  };
  MistyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MistyInfo_descriptor_,
      MistyInfo::default_instance_,
      MistyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MistyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MistyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MistyInfo));
  GridNode_descriptor_ = file->message_type(3);
  static const int GridNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridNode, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridNode, gridflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridNode, areaflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridNode, obstacleflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridNode, mistyflag_),
  };
  GridNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GridNode_descriptor_,
      GridNode::default_instance_,
      GridNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GridNode));
  PathData_descriptor_ = file->message_type(4);
  static const int PathData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, gridsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, nodesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, areainfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, obstacleinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, gridnodearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, mistyinfoarr_),
  };
  PathData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathData_descriptor_,
      PathData::default_instance_,
      PathData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fPathData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AreaInfo_descriptor_, &AreaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObstacleInfo_descriptor_, &ObstacleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MistyInfo_descriptor_, &MistyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GridNode_descriptor_, &GridNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathData_descriptor_, &PathData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fPathData_2eproto() {
  delete AreaInfo::default_instance_;
  delete AreaInfo_reflection_;
  delete ObstacleInfo::default_instance_;
  delete ObstacleInfo_reflection_;
  delete MistyInfo::default_instance_;
  delete MistyInfo_reflection_;
  delete GridNode::default_instance_;
  delete GridNode_reflection_;
  delete PathData::default_instance_;
  delete PathData_reflection_;
}

void protobuf_AddDesc_module_2fPathData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025module/PathData.proto\022\002pb\032\021module/Util"
    ".proto\"9\n\010AreaInfo\022\014\n\004Name\030\001 \001(\t\022\r\n\005Inde"
    "x\030\002 \001(\005\022\020\n\010AreaType\030\003 \001(\005\"+\n\014ObstacleInf"
    "o\022\014\n\004Name\030\001 \001(\t\022\r\n\005Index\030\002 \001(\005\"(\n\tMistyI"
    "nfo\022\014\n\004Name\030\001 \001(\t\022\r\n\005Index\030\002 \001(\005\"f\n\010Grid"
    "Node\022\r\n\005Index\030\001 \001(\005\022\020\n\010GridFlag\030\002 \001(\005\022\020\n"
    "\010AreaFlag\030\003 \001(\005\022\024\n\014ObstacleFlag\030\004 \001(\005\022\021\n"
    "\tMistyFlag\030\005 \001(\005\"\215\002\n\010PathData\022#\n\010GridSiz"
    "e\030\001 \001(\0132\021.pb.PbVector2_Int\022#\n\010NodeSize\030\002"
    " \001(\0132\021.pb.PbVector2_Int\022!\n\006Origin\030\003 \001(\0132"
    "\021.pb.PbVector2_Int\022!\n\013AreaInfoArr\030\004 \003(\0132"
    "\014.pb.AreaInfo\022)\n\017ObstacleInfoArr\030\005 \003(\0132\020"
    ".pb.ObstacleInfo\022!\n\013GridNodeArr\030\006 \003(\0132\014."
    "pb.GridNode\022#\n\014MistyInfoArr\030\007 \003(\0132\r.pb.M"
    "istyInfo", 568);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/PathData.proto", &protobuf_RegisterTypes);
  AreaInfo::default_instance_ = new AreaInfo();
  ObstacleInfo::default_instance_ = new ObstacleInfo();
  MistyInfo::default_instance_ = new MistyInfo();
  GridNode::default_instance_ = new GridNode();
  PathData::default_instance_ = new PathData();
  AreaInfo::default_instance_->InitAsDefaultInstance();
  ObstacleInfo::default_instance_->InitAsDefaultInstance();
  MistyInfo::default_instance_->InitAsDefaultInstance();
  GridNode::default_instance_->InitAsDefaultInstance();
  PathData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fPathData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fPathData_2eproto {
  StaticDescriptorInitializer_module_2fPathData_2eproto() {
    protobuf_AddDesc_module_2fPathData_2eproto();
  }
} static_descriptor_initializer_module_2fPathData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AreaInfo::kNameFieldNumber;
const int AreaInfo::kIndexFieldNumber;
const int AreaInfo::kAreaTypeFieldNumber;
#endif  // !_MSC_VER

AreaInfo::AreaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AreaInfo)
}

void AreaInfo::InitAsDefaultInstance() {
}

AreaInfo::AreaInfo(const AreaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AreaInfo)
}

void AreaInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  areatype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AreaInfo::~AreaInfo() {
  // @@protoc_insertion_point(destructor:pb.AreaInfo)
  SharedDtor();
}

void AreaInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AreaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AreaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AreaInfo_descriptor_;
}

const AreaInfo& AreaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fPathData_2eproto();
  return *default_instance_;
}

AreaInfo* AreaInfo::default_instance_ = NULL;

AreaInfo* AreaInfo::New() const {
  return new AreaInfo;
}

void AreaInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AreaInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(index_, areatype_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AreaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AreaInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Index;
        break;
      }

      // optional int32 Index = 2;
      case 2: {
        if (tag == 16) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AreaType;
        break;
      }

      // optional int32 AreaType = 3;
      case 3: {
        if (tag == 24) {
         parse_AreaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areatype_)));
          set_has_areatype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AreaInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AreaInfo)
  return false;
#undef DO_
}

void AreaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AreaInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 Index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional int32 AreaType = 3;
  if (has_areatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->areatype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AreaInfo)
}

::google::protobuf::uint8* AreaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AreaInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 Index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional int32 AreaType = 3;
  if (has_areatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->areatype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AreaInfo)
  return target;
}

int AreaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 AreaType = 3;
    if (has_areatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areatype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AreaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AreaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AreaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AreaInfo::MergeFrom(const AreaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_areatype()) {
      set_areatype(from.areatype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AreaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AreaInfo::CopyFrom(const AreaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AreaInfo::IsInitialized() const {

  return true;
}

void AreaInfo::Swap(AreaInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(index_, other->index_);
    std::swap(areatype_, other->areatype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AreaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AreaInfo_descriptor_;
  metadata.reflection = AreaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObstacleInfo::kNameFieldNumber;
const int ObstacleInfo::kIndexFieldNumber;
#endif  // !_MSC_VER

ObstacleInfo::ObstacleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.ObstacleInfo)
}

void ObstacleInfo::InitAsDefaultInstance() {
}

ObstacleInfo::ObstacleInfo(const ObstacleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.ObstacleInfo)
}

void ObstacleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObstacleInfo::~ObstacleInfo() {
  // @@protoc_insertion_point(destructor:pb.ObstacleInfo)
  SharedDtor();
}

void ObstacleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ObstacleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObstacleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObstacleInfo_descriptor_;
}

const ObstacleInfo& ObstacleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fPathData_2eproto();
  return *default_instance_;
}

ObstacleInfo* ObstacleInfo::default_instance_ = NULL;

ObstacleInfo* ObstacleInfo::New() const {
  return new ObstacleInfo;
}

void ObstacleInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObstacleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.ObstacleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Index;
        break;
      }

      // optional int32 Index = 2;
      case 2: {
        if (tag == 16) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.ObstacleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.ObstacleInfo)
  return false;
#undef DO_
}

void ObstacleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.ObstacleInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 Index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.ObstacleInfo)
}

::google::protobuf::uint8* ObstacleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.ObstacleInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 Index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.ObstacleInfo)
  return target;
}

int ObstacleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObstacleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObstacleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObstacleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObstacleInfo::MergeFrom(const ObstacleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObstacleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObstacleInfo::CopyFrom(const ObstacleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObstacleInfo::IsInitialized() const {

  return true;
}

void ObstacleInfo::Swap(ObstacleInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObstacleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObstacleInfo_descriptor_;
  metadata.reflection = ObstacleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MistyInfo::kNameFieldNumber;
const int MistyInfo::kIndexFieldNumber;
#endif  // !_MSC_VER

MistyInfo::MistyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.MistyInfo)
}

void MistyInfo::InitAsDefaultInstance() {
}

MistyInfo::MistyInfo(const MistyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.MistyInfo)
}

void MistyInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MistyInfo::~MistyInfo() {
  // @@protoc_insertion_point(destructor:pb.MistyInfo)
  SharedDtor();
}

void MistyInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MistyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MistyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MistyInfo_descriptor_;
}

const MistyInfo& MistyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fPathData_2eproto();
  return *default_instance_;
}

MistyInfo* MistyInfo::default_instance_ = NULL;

MistyInfo* MistyInfo::New() const {
  return new MistyInfo;
}

void MistyInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MistyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.MistyInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Index;
        break;
      }

      // optional int32 Index = 2;
      case 2: {
        if (tag == 16) {
         parse_Index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.MistyInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.MistyInfo)
  return false;
#undef DO_
}

void MistyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.MistyInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 Index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.MistyInfo)
}

::google::protobuf::uint8* MistyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.MistyInfo)
  // optional string Name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 Index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.MistyInfo)
  return target;
}

int MistyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 Index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MistyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MistyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MistyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MistyInfo::MergeFrom(const MistyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MistyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MistyInfo::CopyFrom(const MistyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MistyInfo::IsInitialized() const {

  return true;
}

void MistyInfo::Swap(MistyInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MistyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MistyInfo_descriptor_;
  metadata.reflection = MistyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GridNode::kIndexFieldNumber;
const int GridNode::kGridFlagFieldNumber;
const int GridNode::kAreaFlagFieldNumber;
const int GridNode::kObstacleFlagFieldNumber;
const int GridNode::kMistyFlagFieldNumber;
#endif  // !_MSC_VER

GridNode::GridNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.GridNode)
}

void GridNode::InitAsDefaultInstance() {
}

GridNode::GridNode(const GridNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.GridNode)
}

void GridNode::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  gridflag_ = 0;
  areaflag_ = 0;
  obstacleflag_ = 0;
  mistyflag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GridNode::~GridNode() {
  // @@protoc_insertion_point(destructor:pb.GridNode)
  SharedDtor();
}

void GridNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridNode_descriptor_;
}

const GridNode& GridNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fPathData_2eproto();
  return *default_instance_;
}

GridNode* GridNode::default_instance_ = NULL;

GridNode* GridNode::New() const {
  return new GridNode;
}

void GridNode::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GridNode*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(index_, mistyflag_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GridNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.GridNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GridFlag;
        break;
      }

      // optional int32 GridFlag = 2;
      case 2: {
        if (tag == 16) {
         parse_GridFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gridflag_)));
          set_has_gridflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AreaFlag;
        break;
      }

      // optional int32 AreaFlag = 3;
      case 3: {
        if (tag == 24) {
         parse_AreaFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areaflag_)));
          set_has_areaflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ObstacleFlag;
        break;
      }

      // optional int32 ObstacleFlag = 4;
      case 4: {
        if (tag == 32) {
         parse_ObstacleFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obstacleflag_)));
          set_has_obstacleflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_MistyFlag;
        break;
      }

      // optional int32 MistyFlag = 5;
      case 5: {
        if (tag == 40) {
         parse_MistyFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mistyflag_)));
          set_has_mistyflag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.GridNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.GridNode)
  return false;
#undef DO_
}

void GridNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.GridNode)
  // optional int32 Index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 GridFlag = 2;
  if (has_gridflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gridflag(), output);
  }

  // optional int32 AreaFlag = 3;
  if (has_areaflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->areaflag(), output);
  }

  // optional int32 ObstacleFlag = 4;
  if (has_obstacleflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->obstacleflag(), output);
  }

  // optional int32 MistyFlag = 5;
  if (has_mistyflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->mistyflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.GridNode)
}

::google::protobuf::uint8* GridNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.GridNode)
  // optional int32 Index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 GridFlag = 2;
  if (has_gridflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gridflag(), target);
  }

  // optional int32 AreaFlag = 3;
  if (has_areaflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->areaflag(), target);
  }

  // optional int32 ObstacleFlag = 4;
  if (has_obstacleflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->obstacleflag(), target);
  }

  // optional int32 MistyFlag = 5;
  if (has_mistyflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mistyflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.GridNode)
  return target;
}

int GridNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 GridFlag = 2;
    if (has_gridflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gridflag());
    }

    // optional int32 AreaFlag = 3;
    if (has_areaflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areaflag());
    }

    // optional int32 ObstacleFlag = 4;
    if (has_obstacleflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obstacleflag());
    }

    // optional int32 MistyFlag = 5;
    if (has_mistyflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mistyflag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GridNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GridNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GridNode::MergeFrom(const GridNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_gridflag()) {
      set_gridflag(from.gridflag());
    }
    if (from.has_areaflag()) {
      set_areaflag(from.areaflag());
    }
    if (from.has_obstacleflag()) {
      set_obstacleflag(from.obstacleflag());
    }
    if (from.has_mistyflag()) {
      set_mistyflag(from.mistyflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GridNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridNode::CopyFrom(const GridNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridNode::IsInitialized() const {

  return true;
}

void GridNode::Swap(GridNode* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(gridflag_, other->gridflag_);
    std::swap(areaflag_, other->areaflag_);
    std::swap(obstacleflag_, other->obstacleflag_);
    std::swap(mistyflag_, other->mistyflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GridNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridNode_descriptor_;
  metadata.reflection = GridNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathData::kGridSizeFieldNumber;
const int PathData::kNodeSizeFieldNumber;
const int PathData::kOriginFieldNumber;
const int PathData::kAreaInfoArrFieldNumber;
const int PathData::kObstacleInfoArrFieldNumber;
const int PathData::kGridNodeArrFieldNumber;
const int PathData::kMistyInfoArrFieldNumber;
#endif  // !_MSC_VER

PathData::PathData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PathData)
}

void PathData::InitAsDefaultInstance() {
  gridsize_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
  nodesize_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
  origin_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

PathData::PathData(const PathData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PathData)
}

void PathData::SharedCtor() {
  _cached_size_ = 0;
  gridsize_ = NULL;
  nodesize_ = NULL;
  origin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathData::~PathData() {
  // @@protoc_insertion_point(destructor:pb.PathData)
  SharedDtor();
}

void PathData::SharedDtor() {
  if (this != default_instance_) {
    delete gridsize_;
    delete nodesize_;
    delete origin_;
  }
}

void PathData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathData_descriptor_;
}

const PathData& PathData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fPathData_2eproto();
  return *default_instance_;
}

PathData* PathData::default_instance_ = NULL;

PathData* PathData::New() const {
  return new PathData;
}

void PathData::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_gridsize()) {
      if (gridsize_ != NULL) gridsize_->::pb::PbVector2_Int::Clear();
    }
    if (has_nodesize()) {
      if (nodesize_ != NULL) nodesize_->::pb::PbVector2_Int::Clear();
    }
    if (has_origin()) {
      if (origin_ != NULL) origin_->::pb::PbVector2_Int::Clear();
    }
  }
  areainfoarr_.Clear();
  obstacleinfoarr_.Clear();
  gridnodearr_.Clear();
  mistyinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PathData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PbVector2_Int GridSize = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gridsize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NodeSize;
        break;
      }

      // optional .pb.PbVector2_Int NodeSize = 2;
      case 2: {
        if (tag == 18) {
         parse_NodeSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodesize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Origin;
        break;
      }

      // optional .pb.PbVector2_Int Origin = 3;
      case 3: {
        if (tag == 26) {
         parse_Origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AreaInfoArr;
        break;
      }

      // repeated .pb.AreaInfo AreaInfoArr = 4;
      case 4: {
        if (tag == 34) {
         parse_AreaInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_areainfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_AreaInfoArr;
        if (input->ExpectTag(42)) goto parse_ObstacleInfoArr;
        break;
      }

      // repeated .pb.ObstacleInfo ObstacleInfoArr = 5;
      case 5: {
        if (tag == 42) {
         parse_ObstacleInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacleinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ObstacleInfoArr;
        if (input->ExpectTag(50)) goto parse_GridNodeArr;
        break;
      }

      // repeated .pb.GridNode GridNodeArr = 6;
      case 6: {
        if (tag == 50) {
         parse_GridNodeArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gridnodearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_GridNodeArr;
        if (input->ExpectTag(58)) goto parse_MistyInfoArr;
        break;
      }

      // repeated .pb.MistyInfo MistyInfoArr = 7;
      case 7: {
        if (tag == 58) {
         parse_MistyInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mistyinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_MistyInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PathData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PathData)
  return false;
#undef DO_
}

void PathData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PathData)
  // optional .pb.PbVector2_Int GridSize = 1;
  if (has_gridsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gridsize(), output);
  }

  // optional .pb.PbVector2_Int NodeSize = 2;
  if (has_nodesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodesize(), output);
  }

  // optional .pb.PbVector2_Int Origin = 3;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->origin(), output);
  }

  // repeated .pb.AreaInfo AreaInfoArr = 4;
  for (int i = 0; i < this->areainfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->areainfoarr(i), output);
  }

  // repeated .pb.ObstacleInfo ObstacleInfoArr = 5;
  for (int i = 0; i < this->obstacleinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->obstacleinfoarr(i), output);
  }

  // repeated .pb.GridNode GridNodeArr = 6;
  for (int i = 0; i < this->gridnodearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gridnodearr(i), output);
  }

  // repeated .pb.MistyInfo MistyInfoArr = 7;
  for (int i = 0; i < this->mistyinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mistyinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PathData)
}

::google::protobuf::uint8* PathData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PathData)
  // optional .pb.PbVector2_Int GridSize = 1;
  if (has_gridsize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gridsize(), target);
  }

  // optional .pb.PbVector2_Int NodeSize = 2;
  if (has_nodesize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodesize(), target);
  }

  // optional .pb.PbVector2_Int Origin = 3;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->origin(), target);
  }

  // repeated .pb.AreaInfo AreaInfoArr = 4;
  for (int i = 0; i < this->areainfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->areainfoarr(i), target);
  }

  // repeated .pb.ObstacleInfo ObstacleInfoArr = 5;
  for (int i = 0; i < this->obstacleinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->obstacleinfoarr(i), target);
  }

  // repeated .pb.GridNode GridNodeArr = 6;
  for (int i = 0; i < this->gridnodearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gridnodearr(i), target);
  }

  // repeated .pb.MistyInfo MistyInfoArr = 7;
  for (int i = 0; i < this->mistyinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mistyinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PathData)
  return target;
}

int PathData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PbVector2_Int GridSize = 1;
    if (has_gridsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gridsize());
    }

    // optional .pb.PbVector2_Int NodeSize = 2;
    if (has_nodesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodesize());
    }

    // optional .pb.PbVector2_Int Origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }

  }
  // repeated .pb.AreaInfo AreaInfoArr = 4;
  total_size += 1 * this->areainfoarr_size();
  for (int i = 0; i < this->areainfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->areainfoarr(i));
  }

  // repeated .pb.ObstacleInfo ObstacleInfoArr = 5;
  total_size += 1 * this->obstacleinfoarr_size();
  for (int i = 0; i < this->obstacleinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacleinfoarr(i));
  }

  // repeated .pb.GridNode GridNodeArr = 6;
  total_size += 1 * this->gridnodearr_size();
  for (int i = 0; i < this->gridnodearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gridnodearr(i));
  }

  // repeated .pb.MistyInfo MistyInfoArr = 7;
  total_size += 1 * this->mistyinfoarr_size();
  for (int i = 0; i < this->mistyinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mistyinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathData::MergeFrom(const PathData& from) {
  GOOGLE_CHECK_NE(&from, this);
  areainfoarr_.MergeFrom(from.areainfoarr_);
  obstacleinfoarr_.MergeFrom(from.obstacleinfoarr_);
  gridnodearr_.MergeFrom(from.gridnodearr_);
  mistyinfoarr_.MergeFrom(from.mistyinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gridsize()) {
      mutable_gridsize()->::pb::PbVector2_Int::MergeFrom(from.gridsize());
    }
    if (from.has_nodesize()) {
      mutable_nodesize()->::pb::PbVector2_Int::MergeFrom(from.nodesize());
    }
    if (from.has_origin()) {
      mutable_origin()->::pb::PbVector2_Int::MergeFrom(from.origin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathData::CopyFrom(const PathData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathData::IsInitialized() const {

  return true;
}

void PathData::Swap(PathData* other) {
  if (other != this) {
    std::swap(gridsize_, other->gridsize_);
    std::swap(nodesize_, other->nodesize_);
    std::swap(origin_, other->origin_);
    areainfoarr_.Swap(&other->areainfoarr_);
    obstacleinfoarr_.Swap(&other->obstacleinfoarr_);
    gridnodearr_.Swap(&other->gridnodearr_);
    mistyinfoarr_.Swap(&other->mistyinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathData_descriptor_;
  metadata.reflection = PathData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
