// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActImperialWar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActImperialWar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActImperialWarUserInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarUserInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarGetViewRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarGetViewRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarTargetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarTargetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarGetTodayRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarGetTodayRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarGetTotalRankRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarGetTotalRankRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarGetWarInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarGetWarInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarLoveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarLoveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarViewInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarViewInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarDailyScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarDailyScoreInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarTaskCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarTaskCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarTargetReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarTargetReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarDetailRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarDetailRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarCreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarCreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarGetBattleRetReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarGetBattleRetReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarGetBattleRetRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarGetBattleRetRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarEnterWithUserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarEnterWithUserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarGetBattleScoreReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarGetBattleScoreReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarGetBattleScoreRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarGetBattleScoreRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarBattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarBattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarBattleTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarBattleTeamInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActImperialWar_2eproto() {
  protobuf_AddDesc_net_2fActImperialWar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActImperialWar.proto");
  GOOGLE_CHECK(file != NULL);
  TActImperialWarUserInfoRsp_descriptor_ = file->message_type(0);
  static const int TActImperialWarUserInfoRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarUserInfoRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarUserInfoRsp, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarUserInfoRsp, lovetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarUserInfoRsp, arrtaskcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarUserInfoRsp, arrtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarUserInfoRsp, arrtargetreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarUserInfoRsp, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarUserInfoRsp, teamid_),
  };
  TActImperialWarUserInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarUserInfoRsp_descriptor_,
      TActImperialWarUserInfoRsp::default_instance_,
      TActImperialWarUserInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarUserInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarUserInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarUserInfoRsp));
  TActImperialWarGetViewRsp_descriptor_ = file->message_type(1);
  static const int TActImperialWarGetViewRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetViewRsp, lteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetViewRsp, rteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetViewRsp, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetViewRsp, mvpscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetViewRsp, dailyscore_),
  };
  TActImperialWarGetViewRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarGetViewRsp_descriptor_,
      TActImperialWarGetViewRsp::default_instance_,
      TActImperialWarGetViewRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetViewRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetViewRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarGetViewRsp));
  TActImperialWarGetInfoRsp_descriptor_ = file->message_type(2);
  static const int TActImperialWarGetInfoRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetInfoRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetInfoRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetInfoRsp, arrtaskcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetInfoRsp, arrtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetInfoRsp, arrtargetreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetInfoRsp, totalscore_),
  };
  TActImperialWarGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarGetInfoRsp_descriptor_,
      TActImperialWarGetInfoRsp::default_instance_,
      TActImperialWarGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarGetInfoRsp));
  TActImperialWarTargetRewardReq_descriptor_ = file->message_type(3);
  static const int TActImperialWarTargetRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTargetRewardReq, id_),
  };
  TActImperialWarTargetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarTargetRewardReq_descriptor_,
      TActImperialWarTargetRewardReq::default_instance_,
      TActImperialWarTargetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTargetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTargetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarTargetRewardReq));
  TActImperialWarGetTodayRankRsp_descriptor_ = file->message_type(4);
  static const int TActImperialWarGetTodayRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetTodayRankRsp, arrrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetTodayRankRsp, myrank_),
  };
  TActImperialWarGetTodayRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarGetTodayRankRsp_descriptor_,
      TActImperialWarGetTodayRankRsp::default_instance_,
      TActImperialWarGetTodayRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetTodayRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetTodayRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarGetTodayRankRsp));
  TActImperialWarGetTotalRankRsp_descriptor_ = file->message_type(5);
  static const int TActImperialWarGetTotalRankRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetTotalRankRsp, arrrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetTotalRankRsp, myrank_),
  };
  TActImperialWarGetTotalRankRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarGetTotalRankRsp_descriptor_,
      TActImperialWarGetTotalRankRsp::default_instance_,
      TActImperialWarGetTotalRankRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetTotalRankRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetTotalRankRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarGetTotalRankRsp));
  TActImperialWarGetWarInfoRsp_descriptor_ = file->message_type(6);
  static const int TActImperialWarGetWarInfoRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetWarInfoRsp, lteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetWarInfoRsp, rteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetWarInfoRsp, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetWarInfoRsp, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetWarInfoRsp, lovetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetWarInfoRsp, canenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetWarInfoRsp, totallovetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetWarInfoRsp, battlescore_),
  };
  TActImperialWarGetWarInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarGetWarInfoRsp_descriptor_,
      TActImperialWarGetWarInfoRsp::default_instance_,
      TActImperialWarGetWarInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetWarInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetWarInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarGetWarInfoRsp));
  TActImperialWarLoveRsp_descriptor_ = file->message_type(7);
  static const int TActImperialWarLoveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarLoveRsp, totallovetimes_),
  };
  TActImperialWarLoveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarLoveRsp_descriptor_,
      TActImperialWarLoveRsp::default_instance_,
      TActImperialWarLoveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarLoveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarLoveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarLoveRsp));
  TActImperialWarViewInfo_descriptor_ = file->message_type(8);
  static const int TActImperialWarViewInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarViewInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarViewInfo, arrserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarViewInfo, battleret_),
  };
  TActImperialWarViewInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarViewInfo_descriptor_,
      TActImperialWarViewInfo::default_instance_,
      TActImperialWarViewInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarViewInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarViewInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarViewInfo));
  TActImperialWarDailyScoreInfo_descriptor_ = file->message_type(9);
  static const int TActImperialWarDailyScoreInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarDailyScoreInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarDailyScoreInfo, lscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarDailyScoreInfo, rscore_),
  };
  TActImperialWarDailyScoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarDailyScoreInfo_descriptor_,
      TActImperialWarDailyScoreInfo::default_instance_,
      TActImperialWarDailyScoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarDailyScoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarDailyScoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarDailyScoreInfo));
  TActImperialWarTaskCount_descriptor_ = file->message_type(10);
  static const int TActImperialWarTaskCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTaskCount, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTaskCount, count_),
  };
  TActImperialWarTaskCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarTaskCount_descriptor_,
      TActImperialWarTaskCount::default_instance_,
      TActImperialWarTaskCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTaskCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTaskCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarTaskCount));
  TActImperialWarTaskInfo_descriptor_ = file->message_type(11);
  static const int TActImperialWarTaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTaskInfo, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTaskInfo, finishtime_),
  };
  TActImperialWarTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarTaskInfo_descriptor_,
      TActImperialWarTaskInfo::default_instance_,
      TActImperialWarTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarTaskInfo));
  TActImperialWarTargetReward_descriptor_ = file->message_type(12);
  static const int TActImperialWarTargetReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTargetReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTargetReward, rewardtime_),
  };
  TActImperialWarTargetReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarTargetReward_descriptor_,
      TActImperialWarTargetReward::default_instance_,
      TActImperialWarTargetReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTargetReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTargetReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarTargetReward));
  TActImperialWarDetailRankInfo_descriptor_ = file->message_type(13);
  static const int TActImperialWarDetailRankInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarDetailRankInfo, userdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarDetailRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarDetailRankInfo, rank_),
  };
  TActImperialWarDetailRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarDetailRankInfo_descriptor_,
      TActImperialWarDetailRankInfo::default_instance_,
      TActImperialWarDetailRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarDetailRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarDetailRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarDetailRankInfo));
  TActImperialWarCreateReq_descriptor_ = file->message_type(14);
  static const int TActImperialWarCreateReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarCreateReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarCreateReq, atkinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarCreateReq, definfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarCreateReq, begintime_),
  };
  TActImperialWarCreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarCreateReq_descriptor_,
      TActImperialWarCreateReq::default_instance_,
      TActImperialWarCreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarCreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarCreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarCreateReq));
  TActImperialWarCreateRsp_descriptor_ = file->message_type(15);
  static const int TActImperialWarCreateRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarCreateRsp, ret_),
  };
  TActImperialWarCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarCreateRsp_descriptor_,
      TActImperialWarCreateRsp::default_instance_,
      TActImperialWarCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarCreateRsp));
  TActImperialWarTeamInfo_descriptor_ = file->message_type(16);
  static const int TActImperialWarTeamInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTeamInfo, masteruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTeamInfo, mastersid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTeamInfo, masterscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTeamInfo, subteaminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTeamInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTeamInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTeamInfo, leftright_),
  };
  TActImperialWarTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarTeamInfo_descriptor_,
      TActImperialWarTeamInfo::default_instance_,
      TActImperialWarTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarTeamInfo));
  TActImperialWarGetBattleRetReq_descriptor_ = file->message_type(17);
  static const int TActImperialWarGetBattleRetReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleRetReq, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleRetReq, masteruid_),
  };
  TActImperialWarGetBattleRetReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarGetBattleRetReq_descriptor_,
      TActImperialWarGetBattleRetReq::default_instance_,
      TActImperialWarGetBattleRetReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleRetReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleRetReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarGetBattleRetReq));
  TActImperialWarGetBattleRetRsp_descriptor_ = file->message_type(18);
  static const int TActImperialWarGetBattleRetRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleRetRsp, battleret_),
  };
  TActImperialWarGetBattleRetRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarGetBattleRetRsp_descriptor_,
      TActImperialWarGetBattleRetRsp::default_instance_,
      TActImperialWarGetBattleRetRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleRetRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleRetRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarGetBattleRetRsp));
  TActImperialWarEnterWithUserInfoReq_descriptor_ = file->message_type(19);
  static const int TActImperialWarEnterWithUserInfoReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarEnterWithUserInfoReq, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarEnterWithUserInfoReq, my7rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarEnterWithUserInfoReq, masteruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarEnterWithUserInfoReq, serverid_),
  };
  TActImperialWarEnterWithUserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarEnterWithUserInfoReq_descriptor_,
      TActImperialWarEnterWithUserInfoReq::default_instance_,
      TActImperialWarEnterWithUserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarEnterWithUserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarEnterWithUserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarEnterWithUserInfoReq));
  TActImperialWarGetBattleScoreReq_descriptor_ = file->message_type(20);
  static const int TActImperialWarGetBattleScoreReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleScoreReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleScoreReq, serverid_),
  };
  TActImperialWarGetBattleScoreReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarGetBattleScoreReq_descriptor_,
      TActImperialWarGetBattleScoreReq::default_instance_,
      TActImperialWarGetBattleScoreReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleScoreReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleScoreReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarGetBattleScoreReq));
  TActImperialWarGetBattleScoreRsp_descriptor_ = file->message_type(21);
  static const int TActImperialWarGetBattleScoreRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleScoreRsp, score_),
  };
  TActImperialWarGetBattleScoreRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarGetBattleScoreRsp_descriptor_,
      TActImperialWarGetBattleScoreRsp::default_instance_,
      TActImperialWarGetBattleScoreRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleScoreRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetBattleScoreRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarGetBattleScoreRsp));
  TActImperialWarBattleInfo_descriptor_ = file->message_type(22);
  static const int TActImperialWarBattleInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleInfo, fieldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleInfo, atkinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleInfo, definfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleInfo, battleret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleInfo, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleInfo, periodkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleInfo, teamid_),
  };
  TActImperialWarBattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarBattleInfo_descriptor_,
      TActImperialWarBattleInfo::default_instance_,
      TActImperialWarBattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarBattleInfo));
  TActImperialWarBattleTeamInfo_descriptor_ = file->message_type(23);
  static const int TActImperialWarBattleTeamInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleTeamInfo, masteruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleTeamInfo, mastersid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleTeamInfo, masterscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleTeamInfo, subteaminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleTeamInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleTeamInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleTeamInfo, leftright_),
  };
  TActImperialWarBattleTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarBattleTeamInfo_descriptor_,
      TActImperialWarBattleTeamInfo::default_instance_,
      TActImperialWarBattleTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBattleTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarBattleTeamInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActImperialWar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarUserInfoRsp_descriptor_, &TActImperialWarUserInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarGetViewRsp_descriptor_, &TActImperialWarGetViewRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarGetInfoRsp_descriptor_, &TActImperialWarGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarTargetRewardReq_descriptor_, &TActImperialWarTargetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarGetTodayRankRsp_descriptor_, &TActImperialWarGetTodayRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarGetTotalRankRsp_descriptor_, &TActImperialWarGetTotalRankRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarGetWarInfoRsp_descriptor_, &TActImperialWarGetWarInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarLoveRsp_descriptor_, &TActImperialWarLoveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarViewInfo_descriptor_, &TActImperialWarViewInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarDailyScoreInfo_descriptor_, &TActImperialWarDailyScoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarTaskCount_descriptor_, &TActImperialWarTaskCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarTaskInfo_descriptor_, &TActImperialWarTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarTargetReward_descriptor_, &TActImperialWarTargetReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarDetailRankInfo_descriptor_, &TActImperialWarDetailRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarCreateReq_descriptor_, &TActImperialWarCreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarCreateRsp_descriptor_, &TActImperialWarCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarTeamInfo_descriptor_, &TActImperialWarTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarGetBattleRetReq_descriptor_, &TActImperialWarGetBattleRetReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarGetBattleRetRsp_descriptor_, &TActImperialWarGetBattleRetRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarEnterWithUserInfoReq_descriptor_, &TActImperialWarEnterWithUserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarGetBattleScoreReq_descriptor_, &TActImperialWarGetBattleScoreReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarGetBattleScoreRsp_descriptor_, &TActImperialWarGetBattleScoreRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarBattleInfo_descriptor_, &TActImperialWarBattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarBattleTeamInfo_descriptor_, &TActImperialWarBattleTeamInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActImperialWar_2eproto() {
  delete TActImperialWarUserInfoRsp::default_instance_;
  delete TActImperialWarUserInfoRsp_reflection_;
  delete TActImperialWarGetViewRsp::default_instance_;
  delete TActImperialWarGetViewRsp_reflection_;
  delete TActImperialWarGetInfoRsp::default_instance_;
  delete TActImperialWarGetInfoRsp_reflection_;
  delete TActImperialWarTargetRewardReq::default_instance_;
  delete TActImperialWarTargetRewardReq_reflection_;
  delete TActImperialWarGetTodayRankRsp::default_instance_;
  delete TActImperialWarGetTodayRankRsp_reflection_;
  delete TActImperialWarGetTotalRankRsp::default_instance_;
  delete TActImperialWarGetTotalRankRsp_reflection_;
  delete TActImperialWarGetWarInfoRsp::default_instance_;
  delete TActImperialWarGetWarInfoRsp_reflection_;
  delete TActImperialWarLoveRsp::default_instance_;
  delete TActImperialWarLoveRsp_reflection_;
  delete TActImperialWarViewInfo::default_instance_;
  delete TActImperialWarViewInfo_reflection_;
  delete TActImperialWarDailyScoreInfo::default_instance_;
  delete TActImperialWarDailyScoreInfo_reflection_;
  delete TActImperialWarTaskCount::default_instance_;
  delete TActImperialWarTaskCount_reflection_;
  delete TActImperialWarTaskInfo::default_instance_;
  delete TActImperialWarTaskInfo_reflection_;
  delete TActImperialWarTargetReward::default_instance_;
  delete TActImperialWarTargetReward_reflection_;
  delete TActImperialWarDetailRankInfo::default_instance_;
  delete TActImperialWarDetailRankInfo_reflection_;
  delete TActImperialWarCreateReq::default_instance_;
  delete TActImperialWarCreateReq_reflection_;
  delete TActImperialWarCreateRsp::default_instance_;
  delete TActImperialWarCreateRsp_reflection_;
  delete TActImperialWarTeamInfo::default_instance_;
  delete TActImperialWarTeamInfo_reflection_;
  delete TActImperialWarGetBattleRetReq::default_instance_;
  delete TActImperialWarGetBattleRetReq_reflection_;
  delete TActImperialWarGetBattleRetRsp::default_instance_;
  delete TActImperialWarGetBattleRetRsp_reflection_;
  delete TActImperialWarEnterWithUserInfoReq::default_instance_;
  delete TActImperialWarEnterWithUserInfoReq_reflection_;
  delete TActImperialWarGetBattleScoreReq::default_instance_;
  delete TActImperialWarGetBattleScoreReq_reflection_;
  delete TActImperialWarGetBattleScoreRsp::default_instance_;
  delete TActImperialWarGetBattleScoreRsp_reflection_;
  delete TActImperialWarBattleInfo::default_instance_;
  delete TActImperialWarBattleInfo_reflection_;
  delete TActImperialWarBattleTeamInfo::default_instance_;
  delete TActImperialWarBattleTeamInfo_reflection_;
}

void protobuf_AddDesc_net_2fActImperialWar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/ActImperialWar.proto\022\002pb\032\016net/User"
    ".proto\"\216\002\n\032TActImperialWarUserInfoRsp\022\r\n"
    "\005Score\030\001 \001(\r\022\022\n\nTotalScore\030\002 \001(\r\022\021\n\tLove"
    "Times\030\003 \001(\r\0222\n\014ArrTaskCount\030\004 \003(\0132\034.pb.T"
    "ActImperialWarTaskCount\022,\n\007ArrTask\030\005 \003(\013"
    "2\033.pb.TActImperialWarTaskInfo\0228\n\017ArrTarg"
    "etReward\030\006 \003(\0132\037.pb.TActImperialWarTarge"
    "tReward\022\016\n\006Status\030\007 \001(\r\022\016\n\006TeamId\030\010 \001(\r\""
    "\343\001\n\031TActImperialWarGetViewRsp\022*\n\005LTeam\030\001"
    " \001(\0132\033.pb.TActImperialWarViewInfo\022*\n\005RTe"
    "am\030\002 \001(\0132\033.pb.TActImperialWarViewInfo\022%\n"
    "\010UserData\030\003 \001(\0132\023.pb.TUserSimpleInfo\022\020\n\010"
    "MvpScore\030\004 \001(\r\0225\n\nDailyScore\030\005 \003(\0132!.pb."
    "TActImperialWarDailyScoreInfo\"\352\001\n\031TActIm"
    "perialWarGetInfoRsp\022\r\n\005Score\030\001 \001(\r\022\016\n\006My"
    "Rank\030\002 \001(\r\0222\n\014ArrTaskCount\030\003 \003(\0132\034.pb.TA"
    "ctImperialWarTaskCount\022,\n\007ArrTask\030\004 \003(\0132"
    "\033.pb.TActImperialWarTaskInfo\0228\n\017ArrTarge"
    "tReward\030\005 \003(\0132\037.pb.TActImperialWarTarget"
    "Reward\022\022\n\nTotalScore\030\006 \001(\r\",\n\036TActImperi"
    "alWarTargetRewardReq\022\n\n\002Id\030\001 \001(\r\"d\n\036TAct"
    "ImperialWarGetTodayRankRsp\0222\n\007ArrRank\030\001 "
    "\003(\0132!.pb.TActImperialWarDetailRankInfo\022\016"
    "\n\006MyRank\030\002 \001(\r\"d\n\036TActImperialWarGetTota"
    "lRankRsp\0222\n\007ArrRank\030\001 \003(\0132!.pb.TActImper"
    "ialWarDetailRankInfo\022\016\n\006MyRank\030\002 \001(\r\"\376\001\n"
    "\034TActImperialWarGetWarInfoRsp\022*\n\005LTeam\030\001"
    " \001(\0132\033.pb.TActImperialWarViewInfo\022*\n\005RTe"
    "am\030\002 \001(\0132\033.pb.TActImperialWarViewInfo\022%\n"
    "\010UserData\030\003 \001(\0132\023.pb.TUserSimpleInfo\022\r\n\005"
    "Score\030\004 \001(\r\022\021\n\tLoveTimes\030\005 \001(\r\022\020\n\010CanEnt"
    "er\030\006 \001(\010\022\026\n\016TotalLoveTimes\030\007 \001(\r\022\023\n\013Batt"
    "leScore\030\010 \001(\r\"0\n\026TActImperialWarLoveRsp\022"
    "\026\n\016TotalLoveTimes\030\001 \001(\r\"N\n\027TActImperialW"
    "arViewInfo\022\r\n\005Score\030\001 \001(\r\022\021\n\tArrServer\030\002"
    " \003(\t\022\021\n\tBattleRet\030\003 \001(\r\"L\n\035TActImperialW"
    "arDailyScoreInfo\022\013\n\003Day\030\001 \001(\r\022\016\n\006LScore\030"
    "\002 \001(\r\022\016\n\006RScore\030\003 \001(\r\";\n\030TActImperialWar"
    "TaskCount\022\020\n\010TaskType\030\001 \001(\r\022\r\n\005Count\030\002 \001"
    "(\r\"=\n\027TActImperialWarTaskInfo\022\016\n\006TaskId\030"
    "\001 \001(\r\022\022\n\nFinishTime\030\002 \001(\004\"=\n\033TActImperia"
    "lWarTargetReward\022\n\n\002Id\030\001 \001(\r\022\022\n\nRewardTi"
    "me\030\002 \001(\004\"c\n\035TActImperialWarDetailRankInf"
    "o\022%\n\010UserData\030\001 \001(\0132\023.pb.TUserSimpleInfo"
    "\022\r\n\005Score\030\002 \001(\r\022\014\n\004Rank\030\003 \001(\r\"\233\001\n\030TActIm"
    "perialWarCreateReq\022\020\n\010ServerId\030\001 \001(\t\022,\n\007"
    "AtkInfo\030\002 \001(\0132\033.pb.TActImperialWarTeamIn"
    "fo\022,\n\007DefInfo\030\003 \001(\0132\033.pb.TActImperialWar"
    "TeamInfo\022\021\n\tBeginTime\030\004 \001(\004\"\'\n\030TActImper"
    "ialWarCreateRsp\022\013\n\003Ret\030\001 \001(\010\"\231\001\n\027TActImp"
    "erialWarTeamInfo\022\021\n\tMasterUid\030\001 \001(\004\022\021\n\tM"
    "asterSid\030\002 \001(\t\022\023\n\013MasterScore\030\003 \001(\r\022\023\n\013S"
    "ubTeamInfo\030\004 \003(\t\022\014\n\004Name\030\005 \001(\t\022\r\n\005Score\030"
    "\006 \001(\003\022\021\n\tLeftRight\030\007 \001(\005\"E\n\036TActImperial"
    "WarGetBattleRetReq\022\020\n\010ServerId\030\001 \001(\t\022\021\n\t"
    "MasterUid\030\002 \001(\004\"3\n\036TActImperialWarGetBat"
    "tleRetRsp\022\021\n\tBattleRet\030\001 \001(\r\"\202\001\n#TActImp"
    "erialWarEnterWithUserInfoReq\022%\n\010UserInfo"
    "\030\001 \001(\0132\023.pb.TUserSimpleInfo\022\017\n\007My7Rank\030\002"
    " \001(\r\022\021\n\tMasterUid\030\003 \001(\004\022\020\n\010ServerId\030\004 \001("
    "\t\"A\n TActImperialWarGetBattleScoreReq\022\013\n"
    "\003Uid\030\001 \001(\004\022\020\n\010ServerId\030\002 \001(\t\"1\n TActImpe"
    "rialWarGetBattleScoreRsp\022\r\n\005Score\030\001 \001(\r\""
    "\336\001\n\031TActImperialWarBattleInfo\022\017\n\007FieldId"
    "\030\001 \001(\004\0222\n\007AtkInfo\030\002 \001(\0132!.pb.TActImperia"
    "lWarBattleTeamInfo\0222\n\007DefInfo\030\003 \001(\0132!.pb"
    ".TActImperialWarBattleTeamInfo\022\021\n\tBattle"
    "Ret\030\004 \001(\r\022\022\n\nUpdateTime\030\005 \001(\004\022\021\n\tPeriodK"
    "ey\030\006 \001(\004\022\016\n\006TeamId\030\007 \001(\r\"\237\001\n\035TActImperia"
    "lWarBattleTeamInfo\022\021\n\tMasterUid\030\001 \001(\004\022\021\n"
    "\tMasterSid\030\002 \001(\t\022\023\n\013MasterScore\030\003 \001(\r\022\023\n"
    "\013SubTeamInfo\030\004 \003(\t\022\014\n\004Name\030\005 \001(\t\022\r\n\005Scor"
    "e\030\006 \001(\003\022\021\n\tLeftRight\030\007 \001(\005", 2906);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActImperialWar.proto", &protobuf_RegisterTypes);
  TActImperialWarUserInfoRsp::default_instance_ = new TActImperialWarUserInfoRsp();
  TActImperialWarGetViewRsp::default_instance_ = new TActImperialWarGetViewRsp();
  TActImperialWarGetInfoRsp::default_instance_ = new TActImperialWarGetInfoRsp();
  TActImperialWarTargetRewardReq::default_instance_ = new TActImperialWarTargetRewardReq();
  TActImperialWarGetTodayRankRsp::default_instance_ = new TActImperialWarGetTodayRankRsp();
  TActImperialWarGetTotalRankRsp::default_instance_ = new TActImperialWarGetTotalRankRsp();
  TActImperialWarGetWarInfoRsp::default_instance_ = new TActImperialWarGetWarInfoRsp();
  TActImperialWarLoveRsp::default_instance_ = new TActImperialWarLoveRsp();
  TActImperialWarViewInfo::default_instance_ = new TActImperialWarViewInfo();
  TActImperialWarDailyScoreInfo::default_instance_ = new TActImperialWarDailyScoreInfo();
  TActImperialWarTaskCount::default_instance_ = new TActImperialWarTaskCount();
  TActImperialWarTaskInfo::default_instance_ = new TActImperialWarTaskInfo();
  TActImperialWarTargetReward::default_instance_ = new TActImperialWarTargetReward();
  TActImperialWarDetailRankInfo::default_instance_ = new TActImperialWarDetailRankInfo();
  TActImperialWarCreateReq::default_instance_ = new TActImperialWarCreateReq();
  TActImperialWarCreateRsp::default_instance_ = new TActImperialWarCreateRsp();
  TActImperialWarTeamInfo::default_instance_ = new TActImperialWarTeamInfo();
  TActImperialWarGetBattleRetReq::default_instance_ = new TActImperialWarGetBattleRetReq();
  TActImperialWarGetBattleRetRsp::default_instance_ = new TActImperialWarGetBattleRetRsp();
  TActImperialWarEnterWithUserInfoReq::default_instance_ = new TActImperialWarEnterWithUserInfoReq();
  TActImperialWarGetBattleScoreReq::default_instance_ = new TActImperialWarGetBattleScoreReq();
  TActImperialWarGetBattleScoreRsp::default_instance_ = new TActImperialWarGetBattleScoreRsp();
  TActImperialWarBattleInfo::default_instance_ = new TActImperialWarBattleInfo();
  TActImperialWarBattleTeamInfo::default_instance_ = new TActImperialWarBattleTeamInfo();
  TActImperialWarUserInfoRsp::default_instance_->InitAsDefaultInstance();
  TActImperialWarGetViewRsp::default_instance_->InitAsDefaultInstance();
  TActImperialWarGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActImperialWarTargetRewardReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarGetTodayRankRsp::default_instance_->InitAsDefaultInstance();
  TActImperialWarGetTotalRankRsp::default_instance_->InitAsDefaultInstance();
  TActImperialWarGetWarInfoRsp::default_instance_->InitAsDefaultInstance();
  TActImperialWarLoveRsp::default_instance_->InitAsDefaultInstance();
  TActImperialWarViewInfo::default_instance_->InitAsDefaultInstance();
  TActImperialWarDailyScoreInfo::default_instance_->InitAsDefaultInstance();
  TActImperialWarTaskCount::default_instance_->InitAsDefaultInstance();
  TActImperialWarTaskInfo::default_instance_->InitAsDefaultInstance();
  TActImperialWarTargetReward::default_instance_->InitAsDefaultInstance();
  TActImperialWarDetailRankInfo::default_instance_->InitAsDefaultInstance();
  TActImperialWarCreateReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarCreateRsp::default_instance_->InitAsDefaultInstance();
  TActImperialWarTeamInfo::default_instance_->InitAsDefaultInstance();
  TActImperialWarGetBattleRetReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarGetBattleRetRsp::default_instance_->InitAsDefaultInstance();
  TActImperialWarEnterWithUserInfoReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarGetBattleScoreReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarGetBattleScoreRsp::default_instance_->InitAsDefaultInstance();
  TActImperialWarBattleInfo::default_instance_->InitAsDefaultInstance();
  TActImperialWarBattleTeamInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActImperialWar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActImperialWar_2eproto {
  StaticDescriptorInitializer_net_2fActImperialWar_2eproto() {
    protobuf_AddDesc_net_2fActImperialWar_2eproto();
  }
} static_descriptor_initializer_net_2fActImperialWar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarUserInfoRsp::kScoreFieldNumber;
const int TActImperialWarUserInfoRsp::kTotalScoreFieldNumber;
const int TActImperialWarUserInfoRsp::kLoveTimesFieldNumber;
const int TActImperialWarUserInfoRsp::kArrTaskCountFieldNumber;
const int TActImperialWarUserInfoRsp::kArrTaskFieldNumber;
const int TActImperialWarUserInfoRsp::kArrTargetRewardFieldNumber;
const int TActImperialWarUserInfoRsp::kStatusFieldNumber;
const int TActImperialWarUserInfoRsp::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TActImperialWarUserInfoRsp::TActImperialWarUserInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarUserInfoRsp)
}

void TActImperialWarUserInfoRsp::InitAsDefaultInstance() {
}

TActImperialWarUserInfoRsp::TActImperialWarUserInfoRsp(const TActImperialWarUserInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarUserInfoRsp)
}

void TActImperialWarUserInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  totalscore_ = 0u;
  lovetimes_ = 0u;
  status_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarUserInfoRsp::~TActImperialWarUserInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarUserInfoRsp)
  SharedDtor();
}

void TActImperialWarUserInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarUserInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarUserInfoRsp_descriptor_;
}

const TActImperialWarUserInfoRsp& TActImperialWarUserInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarUserInfoRsp* TActImperialWarUserInfoRsp::default_instance_ = NULL;

TActImperialWarUserInfoRsp* TActImperialWarUserInfoRsp::New() const {
  return new TActImperialWarUserInfoRsp;
}

void TActImperialWarUserInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarUserInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 199) {
    ZR_(score_, totalscore_);
    ZR_(lovetimes_, status_);
    teamid_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrtaskcount_.Clear();
  arrtask_.Clear();
  arrtargetreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarUserInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_TotalScore;
        break;
      }

      // optional uint32 TotalScore = 2;
      case 2: {
        if (tag == 16) {
         parse_TotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LoveTimes;
        break;
      }

      // optional uint32 LoveTimes = 3;
      case 3: {
        if (tag == 24) {
         parse_LoveTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lovetimes_)));
          set_has_lovetimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrTaskCount;
        break;
      }

      // repeated .pb.TActImperialWarTaskCount ArrTaskCount = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrTaskCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskcount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrTaskCount;
        if (input->ExpectTag(42)) goto parse_ArrTask;
        break;
      }

      // repeated .pb.TActImperialWarTaskInfo ArrTask = 5;
      case 5: {
        if (tag == 42) {
         parse_ArrTask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ArrTask;
        if (input->ExpectTag(50)) goto parse_ArrTargetReward;
        break;
      }

      // repeated .pb.TActImperialWarTargetReward ArrTargetReward = 6;
      case 6: {
        if (tag == 50) {
         parse_ArrTargetReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtargetreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_ArrTargetReward;
        if (input->ExpectTag(56)) goto parse_Status;
        break;
      }

      // optional uint32 Status = 7;
      case 7: {
        if (tag == 56) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_TeamId;
        break;
      }

      // optional uint32 TeamId = 8;
      case 8: {
        if (tag == 64) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarUserInfoRsp)
  return false;
#undef DO_
}

void TActImperialWarUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarUserInfoRsp)
  // optional uint32 Score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // optional uint32 TotalScore = 2;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->totalscore(), output);
  }

  // optional uint32 LoveTimes = 3;
  if (has_lovetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lovetimes(), output);
  }

  // repeated .pb.TActImperialWarTaskCount ArrTaskCount = 4;
  for (int i = 0; i < this->arrtaskcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrtaskcount(i), output);
  }

  // repeated .pb.TActImperialWarTaskInfo ArrTask = 5;
  for (int i = 0; i < this->arrtask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arrtask(i), output);
  }

  // repeated .pb.TActImperialWarTargetReward ArrTargetReward = 6;
  for (int i = 0; i < this->arrtargetreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arrtargetreward(i), output);
  }

  // optional uint32 Status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->status(), output);
  }

  // optional uint32 TeamId = 8;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarUserInfoRsp)
}

::google::protobuf::uint8* TActImperialWarUserInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarUserInfoRsp)
  // optional uint32 Score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // optional uint32 TotalScore = 2;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->totalscore(), target);
  }

  // optional uint32 LoveTimes = 3;
  if (has_lovetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lovetimes(), target);
  }

  // repeated .pb.TActImperialWarTaskCount ArrTaskCount = 4;
  for (int i = 0; i < this->arrtaskcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrtaskcount(i), target);
  }

  // repeated .pb.TActImperialWarTaskInfo ArrTask = 5;
  for (int i = 0; i < this->arrtask_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arrtask(i), target);
  }

  // repeated .pb.TActImperialWarTargetReward ArrTargetReward = 6;
  for (int i = 0; i < this->arrtargetreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arrtargetreward(i), target);
  }

  // optional uint32 Status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->status(), target);
  }

  // optional uint32 TeamId = 8;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarUserInfoRsp)
  return target;
}

int TActImperialWarUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 TotalScore = 2;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalscore());
    }

    // optional uint32 LoveTimes = 3;
    if (has_lovetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lovetimes());
    }

    // optional uint32 Status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 TeamId = 8;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  // repeated .pb.TActImperialWarTaskCount ArrTaskCount = 4;
  total_size += 1 * this->arrtaskcount_size();
  for (int i = 0; i < this->arrtaskcount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskcount(i));
  }

  // repeated .pb.TActImperialWarTaskInfo ArrTask = 5;
  total_size += 1 * this->arrtask_size();
  for (int i = 0; i < this->arrtask_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtask(i));
  }

  // repeated .pb.TActImperialWarTargetReward ArrTargetReward = 6;
  total_size += 1 * this->arrtargetreward_size();
  for (int i = 0; i < this->arrtargetreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtargetreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarUserInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarUserInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarUserInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarUserInfoRsp::MergeFrom(const TActImperialWarUserInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrtaskcount_.MergeFrom(from.arrtaskcount_);
  arrtask_.MergeFrom(from.arrtask_);
  arrtargetreward_.MergeFrom(from.arrtargetreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_lovetimes()) {
      set_lovetimes(from.lovetimes());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarUserInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarUserInfoRsp::CopyFrom(const TActImperialWarUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarUserInfoRsp::IsInitialized() const {

  return true;
}

void TActImperialWarUserInfoRsp::Swap(TActImperialWarUserInfoRsp* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(lovetimes_, other->lovetimes_);
    arrtaskcount_.Swap(&other->arrtaskcount_);
    arrtask_.Swap(&other->arrtask_);
    arrtargetreward_.Swap(&other->arrtargetreward_);
    std::swap(status_, other->status_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarUserInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarUserInfoRsp_descriptor_;
  metadata.reflection = TActImperialWarUserInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarGetViewRsp::kLTeamFieldNumber;
const int TActImperialWarGetViewRsp::kRTeamFieldNumber;
const int TActImperialWarGetViewRsp::kUserDataFieldNumber;
const int TActImperialWarGetViewRsp::kMvpScoreFieldNumber;
const int TActImperialWarGetViewRsp::kDailyScoreFieldNumber;
#endif  // !_MSC_VER

TActImperialWarGetViewRsp::TActImperialWarGetViewRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarGetViewRsp)
}

void TActImperialWarGetViewRsp::InitAsDefaultInstance() {
  lteam_ = const_cast< ::pb::TActImperialWarViewInfo*>(&::pb::TActImperialWarViewInfo::default_instance());
  rteam_ = const_cast< ::pb::TActImperialWarViewInfo*>(&::pb::TActImperialWarViewInfo::default_instance());
  userdata_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TActImperialWarGetViewRsp::TActImperialWarGetViewRsp(const TActImperialWarGetViewRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarGetViewRsp)
}

void TActImperialWarGetViewRsp::SharedCtor() {
  _cached_size_ = 0;
  lteam_ = NULL;
  rteam_ = NULL;
  userdata_ = NULL;
  mvpscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarGetViewRsp::~TActImperialWarGetViewRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarGetViewRsp)
  SharedDtor();
}

void TActImperialWarGetViewRsp::SharedDtor() {
  if (this != default_instance_) {
    delete lteam_;
    delete rteam_;
    delete userdata_;
  }
}

void TActImperialWarGetViewRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarGetViewRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarGetViewRsp_descriptor_;
}

const TActImperialWarGetViewRsp& TActImperialWarGetViewRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarGetViewRsp* TActImperialWarGetViewRsp::default_instance_ = NULL;

TActImperialWarGetViewRsp* TActImperialWarGetViewRsp::New() const {
  return new TActImperialWarGetViewRsp;
}

void TActImperialWarGetViewRsp::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_lteam()) {
      if (lteam_ != NULL) lteam_->::pb::TActImperialWarViewInfo::Clear();
    }
    if (has_rteam()) {
      if (rteam_ != NULL) rteam_->::pb::TActImperialWarViewInfo::Clear();
    }
    if (has_userdata()) {
      if (userdata_ != NULL) userdata_->::pb::TUserSimpleInfo::Clear();
    }
    mvpscore_ = 0u;
  }
  dailyscore_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarGetViewRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarGetViewRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TActImperialWarViewInfo LTeam = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lteam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RTeam;
        break;
      }

      // optional .pb.TActImperialWarViewInfo RTeam = 2;
      case 2: {
        if (tag == 18) {
         parse_RTeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rteam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserData;
        break;
      }

      // optional .pb.TUserSimpleInfo UserData = 3;
      case 3: {
        if (tag == 26) {
         parse_UserData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MvpScore;
        break;
      }

      // optional uint32 MvpScore = 4;
      case 4: {
        if (tag == 32) {
         parse_MvpScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mvpscore_)));
          set_has_mvpscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DailyScore;
        break;
      }

      // repeated .pb.TActImperialWarDailyScoreInfo DailyScore = 5;
      case 5: {
        if (tag == 42) {
         parse_DailyScore:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailyscore()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DailyScore;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarGetViewRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarGetViewRsp)
  return false;
#undef DO_
}

void TActImperialWarGetViewRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarGetViewRsp)
  // optional .pb.TActImperialWarViewInfo LTeam = 1;
  if (has_lteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lteam(), output);
  }

  // optional .pb.TActImperialWarViewInfo RTeam = 2;
  if (has_rteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rteam(), output);
  }

  // optional .pb.TUserSimpleInfo UserData = 3;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userdata(), output);
  }

  // optional uint32 MvpScore = 4;
  if (has_mvpscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mvpscore(), output);
  }

  // repeated .pb.TActImperialWarDailyScoreInfo DailyScore = 5;
  for (int i = 0; i < this->dailyscore_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dailyscore(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarGetViewRsp)
}

::google::protobuf::uint8* TActImperialWarGetViewRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarGetViewRsp)
  // optional .pb.TActImperialWarViewInfo LTeam = 1;
  if (has_lteam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lteam(), target);
  }

  // optional .pb.TActImperialWarViewInfo RTeam = 2;
  if (has_rteam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rteam(), target);
  }

  // optional .pb.TUserSimpleInfo UserData = 3;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userdata(), target);
  }

  // optional uint32 MvpScore = 4;
  if (has_mvpscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mvpscore(), target);
  }

  // repeated .pb.TActImperialWarDailyScoreInfo DailyScore = 5;
  for (int i = 0; i < this->dailyscore_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dailyscore(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarGetViewRsp)
  return target;
}

int TActImperialWarGetViewRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TActImperialWarViewInfo LTeam = 1;
    if (has_lteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lteam());
    }

    // optional .pb.TActImperialWarViewInfo RTeam = 2;
    if (has_rteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rteam());
    }

    // optional .pb.TUserSimpleInfo UserData = 3;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdata());
    }

    // optional uint32 MvpScore = 4;
    if (has_mvpscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mvpscore());
    }

  }
  // repeated .pb.TActImperialWarDailyScoreInfo DailyScore = 5;
  total_size += 1 * this->dailyscore_size();
  for (int i = 0; i < this->dailyscore_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailyscore(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarGetViewRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarGetViewRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarGetViewRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarGetViewRsp::MergeFrom(const TActImperialWarGetViewRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailyscore_.MergeFrom(from.dailyscore_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lteam()) {
      mutable_lteam()->::pb::TActImperialWarViewInfo::MergeFrom(from.lteam());
    }
    if (from.has_rteam()) {
      mutable_rteam()->::pb::TActImperialWarViewInfo::MergeFrom(from.rteam());
    }
    if (from.has_userdata()) {
      mutable_userdata()->::pb::TUserSimpleInfo::MergeFrom(from.userdata());
    }
    if (from.has_mvpscore()) {
      set_mvpscore(from.mvpscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarGetViewRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarGetViewRsp::CopyFrom(const TActImperialWarGetViewRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarGetViewRsp::IsInitialized() const {

  return true;
}

void TActImperialWarGetViewRsp::Swap(TActImperialWarGetViewRsp* other) {
  if (other != this) {
    std::swap(lteam_, other->lteam_);
    std::swap(rteam_, other->rteam_);
    std::swap(userdata_, other->userdata_);
    std::swap(mvpscore_, other->mvpscore_);
    dailyscore_.Swap(&other->dailyscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarGetViewRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarGetViewRsp_descriptor_;
  metadata.reflection = TActImperialWarGetViewRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarGetInfoRsp::kScoreFieldNumber;
const int TActImperialWarGetInfoRsp::kMyRankFieldNumber;
const int TActImperialWarGetInfoRsp::kArrTaskCountFieldNumber;
const int TActImperialWarGetInfoRsp::kArrTaskFieldNumber;
const int TActImperialWarGetInfoRsp::kArrTargetRewardFieldNumber;
const int TActImperialWarGetInfoRsp::kTotalScoreFieldNumber;
#endif  // !_MSC_VER

TActImperialWarGetInfoRsp::TActImperialWarGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarGetInfoRsp)
}

void TActImperialWarGetInfoRsp::InitAsDefaultInstance() {
}

TActImperialWarGetInfoRsp::TActImperialWarGetInfoRsp(const TActImperialWarGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarGetInfoRsp)
}

void TActImperialWarGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  myrank_ = 0u;
  totalscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarGetInfoRsp::~TActImperialWarGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarGetInfoRsp)
  SharedDtor();
}

void TActImperialWarGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarGetInfoRsp_descriptor_;
}

const TActImperialWarGetInfoRsp& TActImperialWarGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarGetInfoRsp* TActImperialWarGetInfoRsp::default_instance_ = NULL;

TActImperialWarGetInfoRsp* TActImperialWarGetInfoRsp::New() const {
  return new TActImperialWarGetInfoRsp;
}

void TActImperialWarGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 35) {
    ZR_(score_, myrank_);
    totalscore_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrtaskcount_.Clear();
  arrtask_.Clear();
  arrtargetreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional uint32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrTaskCount;
        break;
      }

      // repeated .pb.TActImperialWarTaskCount ArrTaskCount = 3;
      case 3: {
        if (tag == 26) {
         parse_ArrTaskCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtaskcount()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ArrTaskCount;
        if (input->ExpectTag(34)) goto parse_ArrTask;
        break;
      }

      // repeated .pb.TActImperialWarTaskInfo ArrTask = 4;
      case 4: {
        if (tag == 34) {
         parse_ArrTask:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtask()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ArrTask;
        if (input->ExpectTag(42)) goto parse_ArrTargetReward;
        break;
      }

      // repeated .pb.TActImperialWarTargetReward ArrTargetReward = 5;
      case 5: {
        if (tag == 42) {
         parse_ArrTargetReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrtargetreward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ArrTargetReward;
        if (input->ExpectTag(48)) goto parse_TotalScore;
        break;
      }

      // optional uint32 TotalScore = 6;
      case 6: {
        if (tag == 48) {
         parse_TotalScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarGetInfoRsp)
  return false;
#undef DO_
}

void TActImperialWarGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarGetInfoRsp)
  // optional uint32 Score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // optional uint32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  // repeated .pb.TActImperialWarTaskCount ArrTaskCount = 3;
  for (int i = 0; i < this->arrtaskcount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arrtaskcount(i), output);
  }

  // repeated .pb.TActImperialWarTaskInfo ArrTask = 4;
  for (int i = 0; i < this->arrtask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->arrtask(i), output);
  }

  // repeated .pb.TActImperialWarTargetReward ArrTargetReward = 5;
  for (int i = 0; i < this->arrtargetreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arrtargetreward(i), output);
  }

  // optional uint32 TotalScore = 6;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->totalscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarGetInfoRsp)
}

::google::protobuf::uint8* TActImperialWarGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarGetInfoRsp)
  // optional uint32 Score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // optional uint32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  // repeated .pb.TActImperialWarTaskCount ArrTaskCount = 3;
  for (int i = 0; i < this->arrtaskcount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arrtaskcount(i), target);
  }

  // repeated .pb.TActImperialWarTaskInfo ArrTask = 4;
  for (int i = 0; i < this->arrtask_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->arrtask(i), target);
  }

  // repeated .pb.TActImperialWarTargetReward ArrTargetReward = 5;
  for (int i = 0; i < this->arrtargetreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arrtargetreward(i), target);
  }

  // optional uint32 TotalScore = 6;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->totalscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarGetInfoRsp)
  return target;
}

int TActImperialWarGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

    // optional uint32 TotalScore = 6;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalscore());
    }

  }
  // repeated .pb.TActImperialWarTaskCount ArrTaskCount = 3;
  total_size += 1 * this->arrtaskcount_size();
  for (int i = 0; i < this->arrtaskcount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtaskcount(i));
  }

  // repeated .pb.TActImperialWarTaskInfo ArrTask = 4;
  total_size += 1 * this->arrtask_size();
  for (int i = 0; i < this->arrtask_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtask(i));
  }

  // repeated .pb.TActImperialWarTargetReward ArrTargetReward = 5;
  total_size += 1 * this->arrtargetreward_size();
  for (int i = 0; i < this->arrtargetreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrtargetreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarGetInfoRsp::MergeFrom(const TActImperialWarGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrtaskcount_.MergeFrom(from.arrtaskcount_);
  arrtask_.MergeFrom(from.arrtask_);
  arrtargetreward_.MergeFrom(from.arrtargetreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarGetInfoRsp::CopyFrom(const TActImperialWarGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarGetInfoRsp::IsInitialized() const {

  return true;
}

void TActImperialWarGetInfoRsp::Swap(TActImperialWarGetInfoRsp* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(myrank_, other->myrank_);
    arrtaskcount_.Swap(&other->arrtaskcount_);
    arrtask_.Swap(&other->arrtask_);
    arrtargetreward_.Swap(&other->arrtargetreward_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarGetInfoRsp_descriptor_;
  metadata.reflection = TActImperialWarGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarTargetRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActImperialWarTargetRewardReq::TActImperialWarTargetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarTargetRewardReq)
}

void TActImperialWarTargetRewardReq::InitAsDefaultInstance() {
}

TActImperialWarTargetRewardReq::TActImperialWarTargetRewardReq(const TActImperialWarTargetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarTargetRewardReq)
}

void TActImperialWarTargetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarTargetRewardReq::~TActImperialWarTargetRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarTargetRewardReq)
  SharedDtor();
}

void TActImperialWarTargetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarTargetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarTargetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarTargetRewardReq_descriptor_;
}

const TActImperialWarTargetRewardReq& TActImperialWarTargetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarTargetRewardReq* TActImperialWarTargetRewardReq::default_instance_ = NULL;

TActImperialWarTargetRewardReq* TActImperialWarTargetRewardReq::New() const {
  return new TActImperialWarTargetRewardReq;
}

void TActImperialWarTargetRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarTargetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarTargetRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarTargetRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarTargetRewardReq)
  return false;
#undef DO_
}

void TActImperialWarTargetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarTargetRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarTargetRewardReq)
}

::google::protobuf::uint8* TActImperialWarTargetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarTargetRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarTargetRewardReq)
  return target;
}

int TActImperialWarTargetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarTargetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarTargetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarTargetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarTargetRewardReq::MergeFrom(const TActImperialWarTargetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarTargetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarTargetRewardReq::CopyFrom(const TActImperialWarTargetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarTargetRewardReq::IsInitialized() const {

  return true;
}

void TActImperialWarTargetRewardReq::Swap(TActImperialWarTargetRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarTargetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarTargetRewardReq_descriptor_;
  metadata.reflection = TActImperialWarTargetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarGetTodayRankRsp::kArrRankFieldNumber;
const int TActImperialWarGetTodayRankRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TActImperialWarGetTodayRankRsp::TActImperialWarGetTodayRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarGetTodayRankRsp)
}

void TActImperialWarGetTodayRankRsp::InitAsDefaultInstance() {
}

TActImperialWarGetTodayRankRsp::TActImperialWarGetTodayRankRsp(const TActImperialWarGetTodayRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarGetTodayRankRsp)
}

void TActImperialWarGetTodayRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarGetTodayRankRsp::~TActImperialWarGetTodayRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarGetTodayRankRsp)
  SharedDtor();
}

void TActImperialWarGetTodayRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarGetTodayRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarGetTodayRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarGetTodayRankRsp_descriptor_;
}

const TActImperialWarGetTodayRankRsp& TActImperialWarGetTodayRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarGetTodayRankRsp* TActImperialWarGetTodayRankRsp::default_instance_ = NULL;

TActImperialWarGetTodayRankRsp* TActImperialWarGetTodayRankRsp::New() const {
  return new TActImperialWarGetTodayRankRsp;
}

void TActImperialWarGetTodayRankRsp::Clear() {
  myrank_ = 0u;
  arrrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarGetTodayRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarGetTodayRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRank;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional uint32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarGetTodayRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarGetTodayRankRsp)
  return false;
#undef DO_
}

void TActImperialWarGetTodayRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarGetTodayRankRsp)
  // repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
  for (int i = 0; i < this->arrrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrank(i), output);
  }

  // optional uint32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarGetTodayRankRsp)
}

::google::protobuf::uint8* TActImperialWarGetTodayRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarGetTodayRankRsp)
  // repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
  for (int i = 0; i < this->arrrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrank(i), target);
  }

  // optional uint32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarGetTodayRankRsp)
  return target;
}

int TActImperialWarGetTodayRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
  total_size += 1 * this->arrrank_size();
  for (int i = 0; i < this->arrrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarGetTodayRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarGetTodayRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarGetTodayRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarGetTodayRankRsp::MergeFrom(const TActImperialWarGetTodayRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrank_.MergeFrom(from.arrrank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarGetTodayRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarGetTodayRankRsp::CopyFrom(const TActImperialWarGetTodayRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarGetTodayRankRsp::IsInitialized() const {

  return true;
}

void TActImperialWarGetTodayRankRsp::Swap(TActImperialWarGetTodayRankRsp* other) {
  if (other != this) {
    arrrank_.Swap(&other->arrrank_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarGetTodayRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarGetTodayRankRsp_descriptor_;
  metadata.reflection = TActImperialWarGetTodayRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarGetTotalRankRsp::kArrRankFieldNumber;
const int TActImperialWarGetTotalRankRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TActImperialWarGetTotalRankRsp::TActImperialWarGetTotalRankRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarGetTotalRankRsp)
}

void TActImperialWarGetTotalRankRsp::InitAsDefaultInstance() {
}

TActImperialWarGetTotalRankRsp::TActImperialWarGetTotalRankRsp(const TActImperialWarGetTotalRankRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarGetTotalRankRsp)
}

void TActImperialWarGetTotalRankRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarGetTotalRankRsp::~TActImperialWarGetTotalRankRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarGetTotalRankRsp)
  SharedDtor();
}

void TActImperialWarGetTotalRankRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarGetTotalRankRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarGetTotalRankRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarGetTotalRankRsp_descriptor_;
}

const TActImperialWarGetTotalRankRsp& TActImperialWarGetTotalRankRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarGetTotalRankRsp* TActImperialWarGetTotalRankRsp::default_instance_ = NULL;

TActImperialWarGetTotalRankRsp* TActImperialWarGetTotalRankRsp::New() const {
  return new TActImperialWarGetTotalRankRsp;
}

void TActImperialWarGetTotalRankRsp::Clear() {
  myrank_ = 0u;
  arrrank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarGetTotalRankRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarGetTotalRankRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrank()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRank;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional uint32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarGetTotalRankRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarGetTotalRankRsp)
  return false;
#undef DO_
}

void TActImperialWarGetTotalRankRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarGetTotalRankRsp)
  // repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
  for (int i = 0; i < this->arrrank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrank(i), output);
  }

  // optional uint32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarGetTotalRankRsp)
}

::google::protobuf::uint8* TActImperialWarGetTotalRankRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarGetTotalRankRsp)
  // repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
  for (int i = 0; i < this->arrrank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrank(i), target);
  }

  // optional uint32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarGetTotalRankRsp)
  return target;
}

int TActImperialWarGetTotalRankRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .pb.TActImperialWarDetailRankInfo ArrRank = 1;
  total_size += 1 * this->arrrank_size();
  for (int i = 0; i < this->arrrank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarGetTotalRankRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarGetTotalRankRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarGetTotalRankRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarGetTotalRankRsp::MergeFrom(const TActImperialWarGetTotalRankRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrank_.MergeFrom(from.arrrank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarGetTotalRankRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarGetTotalRankRsp::CopyFrom(const TActImperialWarGetTotalRankRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarGetTotalRankRsp::IsInitialized() const {

  return true;
}

void TActImperialWarGetTotalRankRsp::Swap(TActImperialWarGetTotalRankRsp* other) {
  if (other != this) {
    arrrank_.Swap(&other->arrrank_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarGetTotalRankRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarGetTotalRankRsp_descriptor_;
  metadata.reflection = TActImperialWarGetTotalRankRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarGetWarInfoRsp::kLTeamFieldNumber;
const int TActImperialWarGetWarInfoRsp::kRTeamFieldNumber;
const int TActImperialWarGetWarInfoRsp::kUserDataFieldNumber;
const int TActImperialWarGetWarInfoRsp::kScoreFieldNumber;
const int TActImperialWarGetWarInfoRsp::kLoveTimesFieldNumber;
const int TActImperialWarGetWarInfoRsp::kCanEnterFieldNumber;
const int TActImperialWarGetWarInfoRsp::kTotalLoveTimesFieldNumber;
const int TActImperialWarGetWarInfoRsp::kBattleScoreFieldNumber;
#endif  // !_MSC_VER

TActImperialWarGetWarInfoRsp::TActImperialWarGetWarInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarGetWarInfoRsp)
}

void TActImperialWarGetWarInfoRsp::InitAsDefaultInstance() {
  lteam_ = const_cast< ::pb::TActImperialWarViewInfo*>(&::pb::TActImperialWarViewInfo::default_instance());
  rteam_ = const_cast< ::pb::TActImperialWarViewInfo*>(&::pb::TActImperialWarViewInfo::default_instance());
  userdata_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TActImperialWarGetWarInfoRsp::TActImperialWarGetWarInfoRsp(const TActImperialWarGetWarInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarGetWarInfoRsp)
}

void TActImperialWarGetWarInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  lteam_ = NULL;
  rteam_ = NULL;
  userdata_ = NULL;
  score_ = 0u;
  lovetimes_ = 0u;
  canenter_ = false;
  totallovetimes_ = 0u;
  battlescore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarGetWarInfoRsp::~TActImperialWarGetWarInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarGetWarInfoRsp)
  SharedDtor();
}

void TActImperialWarGetWarInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete lteam_;
    delete rteam_;
    delete userdata_;
  }
}

void TActImperialWarGetWarInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarGetWarInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarGetWarInfoRsp_descriptor_;
}

const TActImperialWarGetWarInfoRsp& TActImperialWarGetWarInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarGetWarInfoRsp* TActImperialWarGetWarInfoRsp::default_instance_ = NULL;

TActImperialWarGetWarInfoRsp* TActImperialWarGetWarInfoRsp::New() const {
  return new TActImperialWarGetWarInfoRsp;
}

void TActImperialWarGetWarInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarGetWarInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(score_, battlescore_);
    if (has_lteam()) {
      if (lteam_ != NULL) lteam_->::pb::TActImperialWarViewInfo::Clear();
    }
    if (has_rteam()) {
      if (rteam_ != NULL) rteam_->::pb::TActImperialWarViewInfo::Clear();
    }
    if (has_userdata()) {
      if (userdata_ != NULL) userdata_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarGetWarInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarGetWarInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TActImperialWarViewInfo LTeam = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lteam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RTeam;
        break;
      }

      // optional .pb.TActImperialWarViewInfo RTeam = 2;
      case 2: {
        if (tag == 18) {
         parse_RTeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rteam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UserData;
        break;
      }

      // optional .pb.TUserSimpleInfo UserData = 3;
      case 3: {
        if (tag == 26) {
         parse_UserData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 4;
      case 4: {
        if (tag == 32) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_LoveTimes;
        break;
      }

      // optional uint32 LoveTimes = 5;
      case 5: {
        if (tag == 40) {
         parse_LoveTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lovetimes_)));
          set_has_lovetimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_CanEnter;
        break;
      }

      // optional bool CanEnter = 6;
      case 6: {
        if (tag == 48) {
         parse_CanEnter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canenter_)));
          set_has_canenter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TotalLoveTimes;
        break;
      }

      // optional uint32 TotalLoveTimes = 7;
      case 7: {
        if (tag == 56) {
         parse_TotalLoveTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallovetimes_)));
          set_has_totallovetimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_BattleScore;
        break;
      }

      // optional uint32 BattleScore = 8;
      case 8: {
        if (tag == 64) {
         parse_BattleScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlescore_)));
          set_has_battlescore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarGetWarInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarGetWarInfoRsp)
  return false;
#undef DO_
}

void TActImperialWarGetWarInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarGetWarInfoRsp)
  // optional .pb.TActImperialWarViewInfo LTeam = 1;
  if (has_lteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lteam(), output);
  }

  // optional .pb.TActImperialWarViewInfo RTeam = 2;
  if (has_rteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rteam(), output);
  }

  // optional .pb.TUserSimpleInfo UserData = 3;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userdata(), output);
  }

  // optional uint32 Score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->score(), output);
  }

  // optional uint32 LoveTimes = 5;
  if (has_lovetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lovetimes(), output);
  }

  // optional bool CanEnter = 6;
  if (has_canenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->canenter(), output);
  }

  // optional uint32 TotalLoveTimes = 7;
  if (has_totallovetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->totallovetimes(), output);
  }

  // optional uint32 BattleScore = 8;
  if (has_battlescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->battlescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarGetWarInfoRsp)
}

::google::protobuf::uint8* TActImperialWarGetWarInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarGetWarInfoRsp)
  // optional .pb.TActImperialWarViewInfo LTeam = 1;
  if (has_lteam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lteam(), target);
  }

  // optional .pb.TActImperialWarViewInfo RTeam = 2;
  if (has_rteam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rteam(), target);
  }

  // optional .pb.TUserSimpleInfo UserData = 3;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userdata(), target);
  }

  // optional uint32 Score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->score(), target);
  }

  // optional uint32 LoveTimes = 5;
  if (has_lovetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lovetimes(), target);
  }

  // optional bool CanEnter = 6;
  if (has_canenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->canenter(), target);
  }

  // optional uint32 TotalLoveTimes = 7;
  if (has_totallovetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->totallovetimes(), target);
  }

  // optional uint32 BattleScore = 8;
  if (has_battlescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->battlescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarGetWarInfoRsp)
  return target;
}

int TActImperialWarGetWarInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TActImperialWarViewInfo LTeam = 1;
    if (has_lteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lteam());
    }

    // optional .pb.TActImperialWarViewInfo RTeam = 2;
    if (has_rteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rteam());
    }

    // optional .pb.TUserSimpleInfo UserData = 3;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdata());
    }

    // optional uint32 Score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 LoveTimes = 5;
    if (has_lovetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lovetimes());
    }

    // optional bool CanEnter = 6;
    if (has_canenter()) {
      total_size += 1 + 1;
    }

    // optional uint32 TotalLoveTimes = 7;
    if (has_totallovetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totallovetimes());
    }

    // optional uint32 BattleScore = 8;
    if (has_battlescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlescore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarGetWarInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarGetWarInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarGetWarInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarGetWarInfoRsp::MergeFrom(const TActImperialWarGetWarInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lteam()) {
      mutable_lteam()->::pb::TActImperialWarViewInfo::MergeFrom(from.lteam());
    }
    if (from.has_rteam()) {
      mutable_rteam()->::pb::TActImperialWarViewInfo::MergeFrom(from.rteam());
    }
    if (from.has_userdata()) {
      mutable_userdata()->::pb::TUserSimpleInfo::MergeFrom(from.userdata());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_lovetimes()) {
      set_lovetimes(from.lovetimes());
    }
    if (from.has_canenter()) {
      set_canenter(from.canenter());
    }
    if (from.has_totallovetimes()) {
      set_totallovetimes(from.totallovetimes());
    }
    if (from.has_battlescore()) {
      set_battlescore(from.battlescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarGetWarInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarGetWarInfoRsp::CopyFrom(const TActImperialWarGetWarInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarGetWarInfoRsp::IsInitialized() const {

  return true;
}

void TActImperialWarGetWarInfoRsp::Swap(TActImperialWarGetWarInfoRsp* other) {
  if (other != this) {
    std::swap(lteam_, other->lteam_);
    std::swap(rteam_, other->rteam_);
    std::swap(userdata_, other->userdata_);
    std::swap(score_, other->score_);
    std::swap(lovetimes_, other->lovetimes_);
    std::swap(canenter_, other->canenter_);
    std::swap(totallovetimes_, other->totallovetimes_);
    std::swap(battlescore_, other->battlescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarGetWarInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarGetWarInfoRsp_descriptor_;
  metadata.reflection = TActImperialWarGetWarInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarLoveRsp::kTotalLoveTimesFieldNumber;
#endif  // !_MSC_VER

TActImperialWarLoveRsp::TActImperialWarLoveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarLoveRsp)
}

void TActImperialWarLoveRsp::InitAsDefaultInstance() {
}

TActImperialWarLoveRsp::TActImperialWarLoveRsp(const TActImperialWarLoveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarLoveRsp)
}

void TActImperialWarLoveRsp::SharedCtor() {
  _cached_size_ = 0;
  totallovetimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarLoveRsp::~TActImperialWarLoveRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarLoveRsp)
  SharedDtor();
}

void TActImperialWarLoveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarLoveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarLoveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarLoveRsp_descriptor_;
}

const TActImperialWarLoveRsp& TActImperialWarLoveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarLoveRsp* TActImperialWarLoveRsp::default_instance_ = NULL;

TActImperialWarLoveRsp* TActImperialWarLoveRsp::New() const {
  return new TActImperialWarLoveRsp;
}

void TActImperialWarLoveRsp::Clear() {
  totallovetimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarLoveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarLoveRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TotalLoveTimes = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totallovetimes_)));
          set_has_totallovetimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarLoveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarLoveRsp)
  return false;
#undef DO_
}

void TActImperialWarLoveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarLoveRsp)
  // optional uint32 TotalLoveTimes = 1;
  if (has_totallovetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totallovetimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarLoveRsp)
}

::google::protobuf::uint8* TActImperialWarLoveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarLoveRsp)
  // optional uint32 TotalLoveTimes = 1;
  if (has_totallovetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->totallovetimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarLoveRsp)
  return target;
}

int TActImperialWarLoveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TotalLoveTimes = 1;
    if (has_totallovetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totallovetimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarLoveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarLoveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarLoveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarLoveRsp::MergeFrom(const TActImperialWarLoveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totallovetimes()) {
      set_totallovetimes(from.totallovetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarLoveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarLoveRsp::CopyFrom(const TActImperialWarLoveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarLoveRsp::IsInitialized() const {

  return true;
}

void TActImperialWarLoveRsp::Swap(TActImperialWarLoveRsp* other) {
  if (other != this) {
    std::swap(totallovetimes_, other->totallovetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarLoveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarLoveRsp_descriptor_;
  metadata.reflection = TActImperialWarLoveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarViewInfo::kScoreFieldNumber;
const int TActImperialWarViewInfo::kArrServerFieldNumber;
const int TActImperialWarViewInfo::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TActImperialWarViewInfo::TActImperialWarViewInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarViewInfo)
}

void TActImperialWarViewInfo::InitAsDefaultInstance() {
}

TActImperialWarViewInfo::TActImperialWarViewInfo(const TActImperialWarViewInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarViewInfo)
}

void TActImperialWarViewInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  score_ = 0u;
  battleret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarViewInfo::~TActImperialWarViewInfo() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarViewInfo)
  SharedDtor();
}

void TActImperialWarViewInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarViewInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarViewInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarViewInfo_descriptor_;
}

const TActImperialWarViewInfo& TActImperialWarViewInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarViewInfo* TActImperialWarViewInfo::default_instance_ = NULL;

TActImperialWarViewInfo* TActImperialWarViewInfo::New() const {
  return new TActImperialWarViewInfo;
}

void TActImperialWarViewInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarViewInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(score_, battleret_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  arrserver_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarViewInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarViewInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrServer;
        break;
      }

      // repeated string ArrServer = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrServer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_arrserver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->arrserver(this->arrserver_size() - 1).data(),
            this->arrserver(this->arrserver_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "arrserver");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrServer;
        if (input->ExpectTag(24)) goto parse_BattleRet;
        break;
      }

      // optional uint32 BattleRet = 3;
      case 3: {
        if (tag == 24) {
         parse_BattleRet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleret_)));
          set_has_battleret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarViewInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarViewInfo)
  return false;
#undef DO_
}

void TActImperialWarViewInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarViewInfo)
  // optional uint32 Score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  // repeated string ArrServer = 2;
  for (int i = 0; i < this->arrserver_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->arrserver(i).data(), this->arrserver(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "arrserver");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->arrserver(i), output);
  }

  // optional uint32 BattleRet = 3;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarViewInfo)
}

::google::protobuf::uint8* TActImperialWarViewInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarViewInfo)
  // optional uint32 Score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  // repeated string ArrServer = 2;
  for (int i = 0; i < this->arrserver_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->arrserver(i).data(), this->arrserver(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "arrserver");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->arrserver(i), target);
  }

  // optional uint32 BattleRet = 3;
  if (has_battleret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarViewInfo)
  return target;
}

int TActImperialWarViewInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 BattleRet = 3;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleret());
    }

  }
  // repeated string ArrServer = 2;
  total_size += 1 * this->arrserver_size();
  for (int i = 0; i < this->arrserver_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->arrserver(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarViewInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarViewInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarViewInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarViewInfo::MergeFrom(const TActImperialWarViewInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrserver_.MergeFrom(from.arrserver_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarViewInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarViewInfo::CopyFrom(const TActImperialWarViewInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarViewInfo::IsInitialized() const {

  return true;
}

void TActImperialWarViewInfo::Swap(TActImperialWarViewInfo* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    arrserver_.Swap(&other->arrserver_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarViewInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarViewInfo_descriptor_;
  metadata.reflection = TActImperialWarViewInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarDailyScoreInfo::kDayFieldNumber;
const int TActImperialWarDailyScoreInfo::kLScoreFieldNumber;
const int TActImperialWarDailyScoreInfo::kRScoreFieldNumber;
#endif  // !_MSC_VER

TActImperialWarDailyScoreInfo::TActImperialWarDailyScoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarDailyScoreInfo)
}

void TActImperialWarDailyScoreInfo::InitAsDefaultInstance() {
}

TActImperialWarDailyScoreInfo::TActImperialWarDailyScoreInfo(const TActImperialWarDailyScoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarDailyScoreInfo)
}

void TActImperialWarDailyScoreInfo::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  lscore_ = 0u;
  rscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarDailyScoreInfo::~TActImperialWarDailyScoreInfo() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarDailyScoreInfo)
  SharedDtor();
}

void TActImperialWarDailyScoreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarDailyScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarDailyScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarDailyScoreInfo_descriptor_;
}

const TActImperialWarDailyScoreInfo& TActImperialWarDailyScoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarDailyScoreInfo* TActImperialWarDailyScoreInfo::default_instance_ = NULL;

TActImperialWarDailyScoreInfo* TActImperialWarDailyScoreInfo::New() const {
  return new TActImperialWarDailyScoreInfo;
}

void TActImperialWarDailyScoreInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarDailyScoreInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(day_, rscore_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarDailyScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarDailyScoreInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Day = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LScore;
        break;
      }

      // optional uint32 LScore = 2;
      case 2: {
        if (tag == 16) {
         parse_LScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lscore_)));
          set_has_lscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RScore;
        break;
      }

      // optional uint32 RScore = 3;
      case 3: {
        if (tag == 24) {
         parse_RScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rscore_)));
          set_has_rscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarDailyScoreInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarDailyScoreInfo)
  return false;
#undef DO_
}

void TActImperialWarDailyScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarDailyScoreInfo)
  // optional uint32 Day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // optional uint32 LScore = 2;
  if (has_lscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lscore(), output);
  }

  // optional uint32 RScore = 3;
  if (has_rscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarDailyScoreInfo)
}

::google::protobuf::uint8* TActImperialWarDailyScoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarDailyScoreInfo)
  // optional uint32 Day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // optional uint32 LScore = 2;
  if (has_lscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lscore(), target);
  }

  // optional uint32 RScore = 3;
  if (has_rscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarDailyScoreInfo)
  return target;
}

int TActImperialWarDailyScoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 LScore = 2;
    if (has_lscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lscore());
    }

    // optional uint32 RScore = 3;
    if (has_rscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarDailyScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarDailyScoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarDailyScoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarDailyScoreInfo::MergeFrom(const TActImperialWarDailyScoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_lscore()) {
      set_lscore(from.lscore());
    }
    if (from.has_rscore()) {
      set_rscore(from.rscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarDailyScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarDailyScoreInfo::CopyFrom(const TActImperialWarDailyScoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarDailyScoreInfo::IsInitialized() const {

  return true;
}

void TActImperialWarDailyScoreInfo::Swap(TActImperialWarDailyScoreInfo* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(lscore_, other->lscore_);
    std::swap(rscore_, other->rscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarDailyScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarDailyScoreInfo_descriptor_;
  metadata.reflection = TActImperialWarDailyScoreInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarTaskCount::kTaskTypeFieldNumber;
const int TActImperialWarTaskCount::kCountFieldNumber;
#endif  // !_MSC_VER

TActImperialWarTaskCount::TActImperialWarTaskCount()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarTaskCount)
}

void TActImperialWarTaskCount::InitAsDefaultInstance() {
}

TActImperialWarTaskCount::TActImperialWarTaskCount(const TActImperialWarTaskCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarTaskCount)
}

void TActImperialWarTaskCount::SharedCtor() {
  _cached_size_ = 0;
  tasktype_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarTaskCount::~TActImperialWarTaskCount() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarTaskCount)
  SharedDtor();
}

void TActImperialWarTaskCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarTaskCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarTaskCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarTaskCount_descriptor_;
}

const TActImperialWarTaskCount& TActImperialWarTaskCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarTaskCount* TActImperialWarTaskCount::default_instance_ = NULL;

TActImperialWarTaskCount* TActImperialWarTaskCount::New() const {
  return new TActImperialWarTaskCount;
}

void TActImperialWarTaskCount::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarTaskCount*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(tasktype_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarTaskCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarTaskCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Count;
        break;
      }

      // optional uint32 Count = 2;
      case 2: {
        if (tag == 16) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarTaskCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarTaskCount)
  return false;
#undef DO_
}

void TActImperialWarTaskCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarTaskCount)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tasktype(), output);
  }

  // optional uint32 Count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarTaskCount)
}

::google::protobuf::uint8* TActImperialWarTaskCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarTaskCount)
  // optional uint32 TaskType = 1;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tasktype(), target);
  }

  // optional uint32 Count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarTaskCount)
  return target;
}

int TActImperialWarTaskCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskType = 1;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

    // optional uint32 Count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarTaskCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarTaskCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarTaskCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarTaskCount::MergeFrom(const TActImperialWarTaskCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarTaskCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarTaskCount::CopyFrom(const TActImperialWarTaskCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarTaskCount::IsInitialized() const {

  return true;
}

void TActImperialWarTaskCount::Swap(TActImperialWarTaskCount* other) {
  if (other != this) {
    std::swap(tasktype_, other->tasktype_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarTaskCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarTaskCount_descriptor_;
  metadata.reflection = TActImperialWarTaskCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarTaskInfo::kTaskIdFieldNumber;
const int TActImperialWarTaskInfo::kFinishTimeFieldNumber;
#endif  // !_MSC_VER

TActImperialWarTaskInfo::TActImperialWarTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarTaskInfo)
}

void TActImperialWarTaskInfo::InitAsDefaultInstance() {
}

TActImperialWarTaskInfo::TActImperialWarTaskInfo(const TActImperialWarTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarTaskInfo)
}

void TActImperialWarTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  finishtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarTaskInfo::~TActImperialWarTaskInfo() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarTaskInfo)
  SharedDtor();
}

void TActImperialWarTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarTaskInfo_descriptor_;
}

const TActImperialWarTaskInfo& TActImperialWarTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarTaskInfo* TActImperialWarTaskInfo::default_instance_ = NULL;

TActImperialWarTaskInfo* TActImperialWarTaskInfo::New() const {
  return new TActImperialWarTaskInfo;
}

void TActImperialWarTaskInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarTaskInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(finishtime_, taskid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarTaskInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TaskId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_FinishTime;
        break;
      }

      // optional uint64 FinishTime = 2;
      case 2: {
        if (tag == 16) {
         parse_FinishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarTaskInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarTaskInfo)
  return false;
#undef DO_
}

void TActImperialWarTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarTaskInfo)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint64 FinishTime = 2;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->finishtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarTaskInfo)
}

::google::protobuf::uint8* TActImperialWarTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarTaskInfo)
  // optional uint32 TaskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint64 FinishTime = 2;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->finishtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarTaskInfo)
  return target;
}

int TActImperialWarTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TaskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint64 FinishTime = 2;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finishtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarTaskInfo::MergeFrom(const TActImperialWarTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarTaskInfo::CopyFrom(const TActImperialWarTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarTaskInfo::IsInitialized() const {

  return true;
}

void TActImperialWarTaskInfo::Swap(TActImperialWarTaskInfo* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarTaskInfo_descriptor_;
  metadata.reflection = TActImperialWarTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarTargetReward::kIdFieldNumber;
const int TActImperialWarTargetReward::kRewardTimeFieldNumber;
#endif  // !_MSC_VER

TActImperialWarTargetReward::TActImperialWarTargetReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarTargetReward)
}

void TActImperialWarTargetReward::InitAsDefaultInstance() {
}

TActImperialWarTargetReward::TActImperialWarTargetReward(const TActImperialWarTargetReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarTargetReward)
}

void TActImperialWarTargetReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rewardtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarTargetReward::~TActImperialWarTargetReward() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarTargetReward)
  SharedDtor();
}

void TActImperialWarTargetReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarTargetReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarTargetReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarTargetReward_descriptor_;
}

const TActImperialWarTargetReward& TActImperialWarTargetReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarTargetReward* TActImperialWarTargetReward::default_instance_ = NULL;

TActImperialWarTargetReward* TActImperialWarTargetReward::New() const {
  return new TActImperialWarTargetReward;
}

void TActImperialWarTargetReward::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarTargetReward*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rewardtime_, id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarTargetReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarTargetReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardTime;
        break;
      }

      // optional uint64 RewardTime = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarTargetReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarTargetReward)
  return false;
#undef DO_
}

void TActImperialWarTargetReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarTargetReward)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rewardtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarTargetReward)
}

::google::protobuf::uint8* TActImperialWarTargetReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarTargetReward)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 RewardTime = 2;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rewardtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarTargetReward)
  return target;
}

int TActImperialWarTargetReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 RewardTime = 2;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewardtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarTargetReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarTargetReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarTargetReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarTargetReward::MergeFrom(const TActImperialWarTargetReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarTargetReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarTargetReward::CopyFrom(const TActImperialWarTargetReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarTargetReward::IsInitialized() const {

  return true;
}

void TActImperialWarTargetReward::Swap(TActImperialWarTargetReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarTargetReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarTargetReward_descriptor_;
  metadata.reflection = TActImperialWarTargetReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarDetailRankInfo::kUserDataFieldNumber;
const int TActImperialWarDetailRankInfo::kScoreFieldNumber;
const int TActImperialWarDetailRankInfo::kRankFieldNumber;
#endif  // !_MSC_VER

TActImperialWarDetailRankInfo::TActImperialWarDetailRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarDetailRankInfo)
}

void TActImperialWarDetailRankInfo::InitAsDefaultInstance() {
  userdata_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TActImperialWarDetailRankInfo::TActImperialWarDetailRankInfo(const TActImperialWarDetailRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarDetailRankInfo)
}

void TActImperialWarDetailRankInfo::SharedCtor() {
  _cached_size_ = 0;
  userdata_ = NULL;
  score_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarDetailRankInfo::~TActImperialWarDetailRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarDetailRankInfo)
  SharedDtor();
}

void TActImperialWarDetailRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userdata_;
  }
}

void TActImperialWarDetailRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarDetailRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarDetailRankInfo_descriptor_;
}

const TActImperialWarDetailRankInfo& TActImperialWarDetailRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarDetailRankInfo* TActImperialWarDetailRankInfo::default_instance_ = NULL;

TActImperialWarDetailRankInfo* TActImperialWarDetailRankInfo::New() const {
  return new TActImperialWarDetailRankInfo;
}

void TActImperialWarDetailRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarDetailRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(score_, rank_);
    if (has_userdata()) {
      if (userdata_ != NULL) userdata_->::pb::TUserSimpleInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarDetailRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarDetailRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserData = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 2;
      case 2: {
        if (tag == 16) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 3;
      case 3: {
        if (tag == 24) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarDetailRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarDetailRankInfo)
  return false;
#undef DO_
}

void TActImperialWarDetailRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarDetailRankInfo)
  // optional .pb.TUserSimpleInfo UserData = 1;
  if (has_userdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userdata(), output);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarDetailRankInfo)
}

::google::protobuf::uint8* TActImperialWarDetailRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarDetailRankInfo)
  // optional .pb.TUserSimpleInfo UserData = 1;
  if (has_userdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userdata(), target);
  }

  // optional uint32 Score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  // optional uint32 Rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarDetailRankInfo)
  return target;
}

int TActImperialWarDetailRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserData = 1;
    if (has_userdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userdata());
    }

    // optional uint32 Score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 Rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarDetailRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarDetailRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarDetailRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarDetailRankInfo::MergeFrom(const TActImperialWarDetailRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userdata()) {
      mutable_userdata()->::pb::TUserSimpleInfo::MergeFrom(from.userdata());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarDetailRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarDetailRankInfo::CopyFrom(const TActImperialWarDetailRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarDetailRankInfo::IsInitialized() const {

  return true;
}

void TActImperialWarDetailRankInfo::Swap(TActImperialWarDetailRankInfo* other) {
  if (other != this) {
    std::swap(userdata_, other->userdata_);
    std::swap(score_, other->score_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarDetailRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarDetailRankInfo_descriptor_;
  metadata.reflection = TActImperialWarDetailRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarCreateReq::kServerIdFieldNumber;
const int TActImperialWarCreateReq::kAtkInfoFieldNumber;
const int TActImperialWarCreateReq::kDefInfoFieldNumber;
const int TActImperialWarCreateReq::kBeginTimeFieldNumber;
#endif  // !_MSC_VER

TActImperialWarCreateReq::TActImperialWarCreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarCreateReq)
}

void TActImperialWarCreateReq::InitAsDefaultInstance() {
  atkinfo_ = const_cast< ::pb::TActImperialWarTeamInfo*>(&::pb::TActImperialWarTeamInfo::default_instance());
  definfo_ = const_cast< ::pb::TActImperialWarTeamInfo*>(&::pb::TActImperialWarTeamInfo::default_instance());
}

TActImperialWarCreateReq::TActImperialWarCreateReq(const TActImperialWarCreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarCreateReq)
}

void TActImperialWarCreateReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  atkinfo_ = NULL;
  definfo_ = NULL;
  begintime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarCreateReq::~TActImperialWarCreateReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarCreateReq)
  SharedDtor();
}

void TActImperialWarCreateReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
    delete atkinfo_;
    delete definfo_;
  }
}

void TActImperialWarCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarCreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarCreateReq_descriptor_;
}

const TActImperialWarCreateReq& TActImperialWarCreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarCreateReq* TActImperialWarCreateReq::default_instance_ = NULL;

TActImperialWarCreateReq* TActImperialWarCreateReq::New() const {
  return new TActImperialWarCreateReq;
}

void TActImperialWarCreateReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    if (has_atkinfo()) {
      if (atkinfo_ != NULL) atkinfo_->::pb::TActImperialWarTeamInfo::Clear();
    }
    if (has_definfo()) {
      if (definfo_ != NULL) definfo_->::pb::TActImperialWarTeamInfo::Clear();
    }
    begintime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarCreateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AtkInfo;
        break;
      }

      // optional .pb.TActImperialWarTeamInfo AtkInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AtkInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DefInfo;
        break;
      }

      // optional .pb.TActImperialWarTeamInfo DefInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_DefInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_definfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BeginTime;
        break;
      }

      // optional uint64 BeginTime = 4;
      case 4: {
        if (tag == 32) {
         parse_BeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarCreateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarCreateReq)
  return false;
#undef DO_
}

void TActImperialWarCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarCreateReq)
  // optional string ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverid(), output);
  }

  // optional .pb.TActImperialWarTeamInfo AtkInfo = 2;
  if (has_atkinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atkinfo(), output);
  }

  // optional .pb.TActImperialWarTeamInfo DefInfo = 3;
  if (has_definfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->definfo(), output);
  }

  // optional uint64 BeginTime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->begintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarCreateReq)
}

::google::protobuf::uint8* TActImperialWarCreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarCreateReq)
  // optional string ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // optional .pb.TActImperialWarTeamInfo AtkInfo = 2;
  if (has_atkinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atkinfo(), target);
  }

  // optional .pb.TActImperialWarTeamInfo DefInfo = 3;
  if (has_definfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->definfo(), target);
  }

  // optional uint64 BeginTime = 4;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->begintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarCreateReq)
  return target;
}

int TActImperialWarCreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ServerId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional .pb.TActImperialWarTeamInfo AtkInfo = 2;
    if (has_atkinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkinfo());
    }

    // optional .pb.TActImperialWarTeamInfo DefInfo = 3;
    if (has_definfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->definfo());
    }

    // optional uint64 BeginTime = 4;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarCreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarCreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarCreateReq::MergeFrom(const TActImperialWarCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_atkinfo()) {
      mutable_atkinfo()->::pb::TActImperialWarTeamInfo::MergeFrom(from.atkinfo());
    }
    if (from.has_definfo()) {
      mutable_definfo()->::pb::TActImperialWarTeamInfo::MergeFrom(from.definfo());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarCreateReq::CopyFrom(const TActImperialWarCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarCreateReq::IsInitialized() const {

  return true;
}

void TActImperialWarCreateReq::Swap(TActImperialWarCreateReq* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(atkinfo_, other->atkinfo_);
    std::swap(definfo_, other->definfo_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarCreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarCreateReq_descriptor_;
  metadata.reflection = TActImperialWarCreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarCreateRsp::kRetFieldNumber;
#endif  // !_MSC_VER

TActImperialWarCreateRsp::TActImperialWarCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarCreateRsp)
}

void TActImperialWarCreateRsp::InitAsDefaultInstance() {
}

TActImperialWarCreateRsp::TActImperialWarCreateRsp(const TActImperialWarCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarCreateRsp)
}

void TActImperialWarCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarCreateRsp::~TActImperialWarCreateRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarCreateRsp)
  SharedDtor();
}

void TActImperialWarCreateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarCreateRsp_descriptor_;
}

const TActImperialWarCreateRsp& TActImperialWarCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarCreateRsp* TActImperialWarCreateRsp::default_instance_ = NULL;

TActImperialWarCreateRsp* TActImperialWarCreateRsp::New() const {
  return new TActImperialWarCreateRsp;
}

void TActImperialWarCreateRsp::Clear() {
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarCreateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool Ret = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarCreateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarCreateRsp)
  return false;
#undef DO_
}

void TActImperialWarCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarCreateRsp)
  // optional bool Ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarCreateRsp)
}

::google::protobuf::uint8* TActImperialWarCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarCreateRsp)
  // optional bool Ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarCreateRsp)
  return target;
}

int TActImperialWarCreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool Ret = 1;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarCreateRsp::MergeFrom(const TActImperialWarCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarCreateRsp::CopyFrom(const TActImperialWarCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarCreateRsp::IsInitialized() const {

  return true;
}

void TActImperialWarCreateRsp::Swap(TActImperialWarCreateRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarCreateRsp_descriptor_;
  metadata.reflection = TActImperialWarCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarTeamInfo::kMasterUidFieldNumber;
const int TActImperialWarTeamInfo::kMasterSidFieldNumber;
const int TActImperialWarTeamInfo::kMasterScoreFieldNumber;
const int TActImperialWarTeamInfo::kSubTeamInfoFieldNumber;
const int TActImperialWarTeamInfo::kNameFieldNumber;
const int TActImperialWarTeamInfo::kScoreFieldNumber;
const int TActImperialWarTeamInfo::kLeftRightFieldNumber;
#endif  // !_MSC_VER

TActImperialWarTeamInfo::TActImperialWarTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarTeamInfo)
}

void TActImperialWarTeamInfo::InitAsDefaultInstance() {
}

TActImperialWarTeamInfo::TActImperialWarTeamInfo(const TActImperialWarTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarTeamInfo)
}

void TActImperialWarTeamInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  masteruid_ = GOOGLE_ULONGLONG(0);
  mastersid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  masterscore_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = GOOGLE_LONGLONG(0);
  leftright_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarTeamInfo::~TActImperialWarTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarTeamInfo)
  SharedDtor();
}

void TActImperialWarTeamInfo::SharedDtor() {
  if (mastersid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastersid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TActImperialWarTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarTeamInfo_descriptor_;
}

const TActImperialWarTeamInfo& TActImperialWarTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarTeamInfo* TActImperialWarTeamInfo::default_instance_ = NULL;

TActImperialWarTeamInfo* TActImperialWarTeamInfo::New() const {
  return new TActImperialWarTeamInfo;
}

void TActImperialWarTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(masterscore_, score_);
    masteruid_ = GOOGLE_ULONGLONG(0);
    if (has_mastersid()) {
      if (mastersid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mastersid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  subteaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 MasterUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masteruid_)));
          set_has_masteruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MasterSid;
        break;
      }

      // optional string MasterSid = 2;
      case 2: {
        if (tag == 18) {
         parse_MasterSid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mastersid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mastersid().data(), this->mastersid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mastersid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MasterScore;
        break;
      }

      // optional uint32 MasterScore = 3;
      case 3: {
        if (tag == 24) {
         parse_MasterScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masterscore_)));
          set_has_masterscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SubTeamInfo;
        break;
      }

      // repeated string SubTeamInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_SubTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subteaminfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subteaminfo(this->subteaminfo_size() - 1).data(),
            this->subteaminfo(this->subteaminfo_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subteaminfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SubTeamInfo;
        if (input->ExpectTag(42)) goto parse_Name;
        break;
      }

      // optional string Name = 5;
      case 5: {
        if (tag == 42) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Score;
        break;
      }

      // optional int64 Score = 6;
      case 6: {
        if (tag == 48) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LeftRight;
        break;
      }

      // optional int32 LeftRight = 7;
      case 7: {
        if (tag == 56) {
         parse_LeftRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftright_)));
          set_has_leftright();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarTeamInfo)
  return false;
#undef DO_
}

void TActImperialWarTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarTeamInfo)
  // optional uint64 MasterUid = 1;
  if (has_masteruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->masteruid(), output);
  }

  // optional string MasterSid = 2;
  if (has_mastersid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastersid().data(), this->mastersid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastersid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mastersid(), output);
  }

  // optional uint32 MasterScore = 3;
  if (has_masterscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->masterscore(), output);
  }

  // repeated string SubTeamInfo = 4;
  for (int i = 0; i < this->subteaminfo_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->subteaminfo(i).data(), this->subteaminfo(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "subteaminfo");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->subteaminfo(i), output);
  }

  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional int64 Score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->score(), output);
  }

  // optional int32 LeftRight = 7;
  if (has_leftright()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->leftright(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarTeamInfo)
}

::google::protobuf::uint8* TActImperialWarTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarTeamInfo)
  // optional uint64 MasterUid = 1;
  if (has_masteruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->masteruid(), target);
  }

  // optional string MasterSid = 2;
  if (has_mastersid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastersid().data(), this->mastersid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastersid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mastersid(), target);
  }

  // optional uint32 MasterScore = 3;
  if (has_masterscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->masterscore(), target);
  }

  // repeated string SubTeamInfo = 4;
  for (int i = 0; i < this->subteaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subteaminfo(i).data(), this->subteaminfo(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subteaminfo");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->subteaminfo(i), target);
  }

  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int64 Score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->score(), target);
  }

  // optional int32 LeftRight = 7;
  if (has_leftright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->leftright(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarTeamInfo)
  return target;
}

int TActImperialWarTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 MasterUid = 1;
    if (has_masteruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masteruid());
    }

    // optional string MasterSid = 2;
    if (has_mastersid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mastersid());
    }

    // optional uint32 MasterScore = 3;
    if (has_masterscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masterscore());
    }

    // optional string Name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 Score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int32 LeftRight = 7;
    if (has_leftright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftright());
    }

  }
  // repeated string SubTeamInfo = 4;
  total_size += 1 * this->subteaminfo_size();
  for (int i = 0; i < this->subteaminfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subteaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarTeamInfo::MergeFrom(const TActImperialWarTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  subteaminfo_.MergeFrom(from.subteaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_masteruid()) {
      set_masteruid(from.masteruid());
    }
    if (from.has_mastersid()) {
      set_mastersid(from.mastersid());
    }
    if (from.has_masterscore()) {
      set_masterscore(from.masterscore());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_leftright()) {
      set_leftright(from.leftright());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarTeamInfo::CopyFrom(const TActImperialWarTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarTeamInfo::IsInitialized() const {

  return true;
}

void TActImperialWarTeamInfo::Swap(TActImperialWarTeamInfo* other) {
  if (other != this) {
    std::swap(masteruid_, other->masteruid_);
    std::swap(mastersid_, other->mastersid_);
    std::swap(masterscore_, other->masterscore_);
    subteaminfo_.Swap(&other->subteaminfo_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(leftright_, other->leftright_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarTeamInfo_descriptor_;
  metadata.reflection = TActImperialWarTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarGetBattleRetReq::kServerIdFieldNumber;
const int TActImperialWarGetBattleRetReq::kMasterUidFieldNumber;
#endif  // !_MSC_VER

TActImperialWarGetBattleRetReq::TActImperialWarGetBattleRetReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarGetBattleRetReq)
}

void TActImperialWarGetBattleRetReq::InitAsDefaultInstance() {
}

TActImperialWarGetBattleRetReq::TActImperialWarGetBattleRetReq(const TActImperialWarGetBattleRetReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarGetBattleRetReq)
}

void TActImperialWarGetBattleRetReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  masteruid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarGetBattleRetReq::~TActImperialWarGetBattleRetReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarGetBattleRetReq)
  SharedDtor();
}

void TActImperialWarGetBattleRetReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TActImperialWarGetBattleRetReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarGetBattleRetReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarGetBattleRetReq_descriptor_;
}

const TActImperialWarGetBattleRetReq& TActImperialWarGetBattleRetReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarGetBattleRetReq* TActImperialWarGetBattleRetReq::default_instance_ = NULL;

TActImperialWarGetBattleRetReq* TActImperialWarGetBattleRetReq::New() const {
  return new TActImperialWarGetBattleRetReq;
}

void TActImperialWarGetBattleRetReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
    masteruid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarGetBattleRetReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarGetBattleRetReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ServerId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MasterUid;
        break;
      }

      // optional uint64 MasterUid = 2;
      case 2: {
        if (tag == 16) {
         parse_MasterUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masteruid_)));
          set_has_masteruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarGetBattleRetReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarGetBattleRetReq)
  return false;
#undef DO_
}

void TActImperialWarGetBattleRetReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarGetBattleRetReq)
  // optional string ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->serverid(), output);
  }

  // optional uint64 MasterUid = 2;
  if (has_masteruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->masteruid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarGetBattleRetReq)
}

::google::protobuf::uint8* TActImperialWarGetBattleRetReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarGetBattleRetReq)
  // optional string ServerId = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->serverid(), target);
  }

  // optional uint64 MasterUid = 2;
  if (has_masteruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->masteruid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarGetBattleRetReq)
  return target;
}

int TActImperialWarGetBattleRetReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ServerId = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional uint64 MasterUid = 2;
    if (has_masteruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masteruid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarGetBattleRetReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarGetBattleRetReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarGetBattleRetReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarGetBattleRetReq::MergeFrom(const TActImperialWarGetBattleRetReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_masteruid()) {
      set_masteruid(from.masteruid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarGetBattleRetReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarGetBattleRetReq::CopyFrom(const TActImperialWarGetBattleRetReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarGetBattleRetReq::IsInitialized() const {

  return true;
}

void TActImperialWarGetBattleRetReq::Swap(TActImperialWarGetBattleRetReq* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(masteruid_, other->masteruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarGetBattleRetReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarGetBattleRetReq_descriptor_;
  metadata.reflection = TActImperialWarGetBattleRetReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarGetBattleRetRsp::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TActImperialWarGetBattleRetRsp::TActImperialWarGetBattleRetRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarGetBattleRetRsp)
}

void TActImperialWarGetBattleRetRsp::InitAsDefaultInstance() {
}

TActImperialWarGetBattleRetRsp::TActImperialWarGetBattleRetRsp(const TActImperialWarGetBattleRetRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarGetBattleRetRsp)
}

void TActImperialWarGetBattleRetRsp::SharedCtor() {
  _cached_size_ = 0;
  battleret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarGetBattleRetRsp::~TActImperialWarGetBattleRetRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarGetBattleRetRsp)
  SharedDtor();
}

void TActImperialWarGetBattleRetRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarGetBattleRetRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarGetBattleRetRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarGetBattleRetRsp_descriptor_;
}

const TActImperialWarGetBattleRetRsp& TActImperialWarGetBattleRetRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarGetBattleRetRsp* TActImperialWarGetBattleRetRsp::default_instance_ = NULL;

TActImperialWarGetBattleRetRsp* TActImperialWarGetBattleRetRsp::New() const {
  return new TActImperialWarGetBattleRetRsp;
}

void TActImperialWarGetBattleRetRsp::Clear() {
  battleret_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarGetBattleRetRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarGetBattleRetRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BattleRet = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleret_)));
          set_has_battleret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarGetBattleRetRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarGetBattleRetRsp)
  return false;
#undef DO_
}

void TActImperialWarGetBattleRetRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarGetBattleRetRsp)
  // optional uint32 BattleRet = 1;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarGetBattleRetRsp)
}

::google::protobuf::uint8* TActImperialWarGetBattleRetRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarGetBattleRetRsp)
  // optional uint32 BattleRet = 1;
  if (has_battleret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarGetBattleRetRsp)
  return target;
}

int TActImperialWarGetBattleRetRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BattleRet = 1;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarGetBattleRetRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarGetBattleRetRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarGetBattleRetRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarGetBattleRetRsp::MergeFrom(const TActImperialWarGetBattleRetRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarGetBattleRetRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarGetBattleRetRsp::CopyFrom(const TActImperialWarGetBattleRetRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarGetBattleRetRsp::IsInitialized() const {

  return true;
}

void TActImperialWarGetBattleRetRsp::Swap(TActImperialWarGetBattleRetRsp* other) {
  if (other != this) {
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarGetBattleRetRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarGetBattleRetRsp_descriptor_;
  metadata.reflection = TActImperialWarGetBattleRetRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarEnterWithUserInfoReq::kUserInfoFieldNumber;
const int TActImperialWarEnterWithUserInfoReq::kMy7RankFieldNumber;
const int TActImperialWarEnterWithUserInfoReq::kMasterUidFieldNumber;
const int TActImperialWarEnterWithUserInfoReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TActImperialWarEnterWithUserInfoReq::TActImperialWarEnterWithUserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarEnterWithUserInfoReq)
}

void TActImperialWarEnterWithUserInfoReq::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserSimpleInfo*>(&::pb::TUserSimpleInfo::default_instance());
}

TActImperialWarEnterWithUserInfoReq::TActImperialWarEnterWithUserInfoReq(const TActImperialWarEnterWithUserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarEnterWithUserInfoReq)
}

void TActImperialWarEnterWithUserInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  userinfo_ = NULL;
  my7rank_ = 0u;
  masteruid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarEnterWithUserInfoReq::~TActImperialWarEnterWithUserInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarEnterWithUserInfoReq)
  SharedDtor();
}

void TActImperialWarEnterWithUserInfoReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TActImperialWarEnterWithUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarEnterWithUserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarEnterWithUserInfoReq_descriptor_;
}

const TActImperialWarEnterWithUserInfoReq& TActImperialWarEnterWithUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarEnterWithUserInfoReq* TActImperialWarEnterWithUserInfoReq::default_instance_ = NULL;

TActImperialWarEnterWithUserInfoReq* TActImperialWarEnterWithUserInfoReq::New() const {
  return new TActImperialWarEnterWithUserInfoReq;
}

void TActImperialWarEnterWithUserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
    }
    my7rank_ = 0u;
    masteruid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarEnterWithUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarEnterWithUserInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserSimpleInfo UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_My7Rank;
        break;
      }

      // optional uint32 My7Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_My7Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my7rank_)));
          set_has_my7rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MasterUid;
        break;
      }

      // optional uint64 MasterUid = 3;
      case 3: {
        if (tag == 24) {
         parse_MasterUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masteruid_)));
          set_has_masteruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 4;
      case 4: {
        if (tag == 34) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarEnterWithUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarEnterWithUserInfoReq)
  return false;
#undef DO_
}

void TActImperialWarEnterWithUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarEnterWithUserInfoReq)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 My7Rank = 2;
  if (has_my7rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->my7rank(), output);
  }

  // optional uint64 MasterUid = 3;
  if (has_masteruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masteruid(), output);
  }

  // optional string ServerId = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarEnterWithUserInfoReq)
}

::google::protobuf::uint8* TActImperialWarEnterWithUserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarEnterWithUserInfoReq)
  // optional .pb.TUserSimpleInfo UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 My7Rank = 2;
  if (has_my7rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->my7rank(), target);
  }

  // optional uint64 MasterUid = 3;
  if (has_masteruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masteruid(), target);
  }

  // optional string ServerId = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarEnterWithUserInfoReq)
  return target;
}

int TActImperialWarEnterWithUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserSimpleInfo UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 My7Rank = 2;
    if (has_my7rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my7rank());
    }

    // optional uint64 MasterUid = 3;
    if (has_masteruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masteruid());
    }

    // optional string ServerId = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarEnterWithUserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarEnterWithUserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarEnterWithUserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarEnterWithUserInfoReq::MergeFrom(const TActImperialWarEnterWithUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserSimpleInfo::MergeFrom(from.userinfo());
    }
    if (from.has_my7rank()) {
      set_my7rank(from.my7rank());
    }
    if (from.has_masteruid()) {
      set_masteruid(from.masteruid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarEnterWithUserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarEnterWithUserInfoReq::CopyFrom(const TActImperialWarEnterWithUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarEnterWithUserInfoReq::IsInitialized() const {

  return true;
}

void TActImperialWarEnterWithUserInfoReq::Swap(TActImperialWarEnterWithUserInfoReq* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(my7rank_, other->my7rank_);
    std::swap(masteruid_, other->masteruid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarEnterWithUserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarEnterWithUserInfoReq_descriptor_;
  metadata.reflection = TActImperialWarEnterWithUserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarGetBattleScoreReq::kUidFieldNumber;
const int TActImperialWarGetBattleScoreReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TActImperialWarGetBattleScoreReq::TActImperialWarGetBattleScoreReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarGetBattleScoreReq)
}

void TActImperialWarGetBattleScoreReq::InitAsDefaultInstance() {
}

TActImperialWarGetBattleScoreReq::TActImperialWarGetBattleScoreReq(const TActImperialWarGetBattleScoreReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarGetBattleScoreReq)
}

void TActImperialWarGetBattleScoreReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarGetBattleScoreReq::~TActImperialWarGetBattleScoreReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarGetBattleScoreReq)
  SharedDtor();
}

void TActImperialWarGetBattleScoreReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TActImperialWarGetBattleScoreReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarGetBattleScoreReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarGetBattleScoreReq_descriptor_;
}

const TActImperialWarGetBattleScoreReq& TActImperialWarGetBattleScoreReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarGetBattleScoreReq* TActImperialWarGetBattleScoreReq::default_instance_ = NULL;

TActImperialWarGetBattleScoreReq* TActImperialWarGetBattleScoreReq::New() const {
  return new TActImperialWarGetBattleScoreReq;
}

void TActImperialWarGetBattleScoreReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarGetBattleScoreReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarGetBattleScoreReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarGetBattleScoreReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarGetBattleScoreReq)
  return false;
#undef DO_
}

void TActImperialWarGetBattleScoreReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarGetBattleScoreReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarGetBattleScoreReq)
}

::google::protobuf::uint8* TActImperialWarGetBattleScoreReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarGetBattleScoreReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarGetBattleScoreReq)
  return target;
}

int TActImperialWarGetBattleScoreReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarGetBattleScoreReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarGetBattleScoreReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarGetBattleScoreReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarGetBattleScoreReq::MergeFrom(const TActImperialWarGetBattleScoreReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarGetBattleScoreReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarGetBattleScoreReq::CopyFrom(const TActImperialWarGetBattleScoreReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarGetBattleScoreReq::IsInitialized() const {

  return true;
}

void TActImperialWarGetBattleScoreReq::Swap(TActImperialWarGetBattleScoreReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarGetBattleScoreReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarGetBattleScoreReq_descriptor_;
  metadata.reflection = TActImperialWarGetBattleScoreReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarGetBattleScoreRsp::kScoreFieldNumber;
#endif  // !_MSC_VER

TActImperialWarGetBattleScoreRsp::TActImperialWarGetBattleScoreRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarGetBattleScoreRsp)
}

void TActImperialWarGetBattleScoreRsp::InitAsDefaultInstance() {
}

TActImperialWarGetBattleScoreRsp::TActImperialWarGetBattleScoreRsp(const TActImperialWarGetBattleScoreRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarGetBattleScoreRsp)
}

void TActImperialWarGetBattleScoreRsp::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarGetBattleScoreRsp::~TActImperialWarGetBattleScoreRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarGetBattleScoreRsp)
  SharedDtor();
}

void TActImperialWarGetBattleScoreRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarGetBattleScoreRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarGetBattleScoreRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarGetBattleScoreRsp_descriptor_;
}

const TActImperialWarGetBattleScoreRsp& TActImperialWarGetBattleScoreRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarGetBattleScoreRsp* TActImperialWarGetBattleScoreRsp::default_instance_ = NULL;

TActImperialWarGetBattleScoreRsp* TActImperialWarGetBattleScoreRsp::New() const {
  return new TActImperialWarGetBattleScoreRsp;
}

void TActImperialWarGetBattleScoreRsp::Clear() {
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarGetBattleScoreRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarGetBattleScoreRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Score = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarGetBattleScoreRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarGetBattleScoreRsp)
  return false;
#undef DO_
}

void TActImperialWarGetBattleScoreRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarGetBattleScoreRsp)
  // optional uint32 Score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarGetBattleScoreRsp)
}

::google::protobuf::uint8* TActImperialWarGetBattleScoreRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarGetBattleScoreRsp)
  // optional uint32 Score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarGetBattleScoreRsp)
  return target;
}

int TActImperialWarGetBattleScoreRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarGetBattleScoreRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarGetBattleScoreRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarGetBattleScoreRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarGetBattleScoreRsp::MergeFrom(const TActImperialWarGetBattleScoreRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarGetBattleScoreRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarGetBattleScoreRsp::CopyFrom(const TActImperialWarGetBattleScoreRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarGetBattleScoreRsp::IsInitialized() const {

  return true;
}

void TActImperialWarGetBattleScoreRsp::Swap(TActImperialWarGetBattleScoreRsp* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarGetBattleScoreRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarGetBattleScoreRsp_descriptor_;
  metadata.reflection = TActImperialWarGetBattleScoreRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarBattleInfo::kFieldIdFieldNumber;
const int TActImperialWarBattleInfo::kAtkInfoFieldNumber;
const int TActImperialWarBattleInfo::kDefInfoFieldNumber;
const int TActImperialWarBattleInfo::kBattleRetFieldNumber;
const int TActImperialWarBattleInfo::kUpdateTimeFieldNumber;
const int TActImperialWarBattleInfo::kPeriodKeyFieldNumber;
const int TActImperialWarBattleInfo::kTeamIdFieldNumber;
#endif  // !_MSC_VER

TActImperialWarBattleInfo::TActImperialWarBattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarBattleInfo)
}

void TActImperialWarBattleInfo::InitAsDefaultInstance() {
  atkinfo_ = const_cast< ::pb::TActImperialWarBattleTeamInfo*>(&::pb::TActImperialWarBattleTeamInfo::default_instance());
  definfo_ = const_cast< ::pb::TActImperialWarBattleTeamInfo*>(&::pb::TActImperialWarBattleTeamInfo::default_instance());
}

TActImperialWarBattleInfo::TActImperialWarBattleInfo(const TActImperialWarBattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarBattleInfo)
}

void TActImperialWarBattleInfo::SharedCtor() {
  _cached_size_ = 0;
  fieldid_ = GOOGLE_ULONGLONG(0);
  atkinfo_ = NULL;
  definfo_ = NULL;
  battleret_ = 0u;
  updatetime_ = GOOGLE_ULONGLONG(0);
  periodkey_ = GOOGLE_ULONGLONG(0);
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarBattleInfo::~TActImperialWarBattleInfo() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarBattleInfo)
  SharedDtor();
}

void TActImperialWarBattleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete atkinfo_;
    delete definfo_;
  }
}

void TActImperialWarBattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarBattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarBattleInfo_descriptor_;
}

const TActImperialWarBattleInfo& TActImperialWarBattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarBattleInfo* TActImperialWarBattleInfo::default_instance_ = NULL;

TActImperialWarBattleInfo* TActImperialWarBattleInfo::New() const {
  return new TActImperialWarBattleInfo;
}

void TActImperialWarBattleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarBattleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(updatetime_, periodkey_);
    fieldid_ = GOOGLE_ULONGLONG(0);
    if (has_atkinfo()) {
      if (atkinfo_ != NULL) atkinfo_->::pb::TActImperialWarBattleTeamInfo::Clear();
    }
    if (has_definfo()) {
      if (definfo_ != NULL) definfo_->::pb::TActImperialWarBattleTeamInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarBattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarBattleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 FieldId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fieldid_)));
          set_has_fieldid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_AtkInfo;
        break;
      }

      // optional .pb.TActImperialWarBattleTeamInfo AtkInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_AtkInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_atkinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_DefInfo;
        break;
      }

      // optional .pb.TActImperialWarBattleTeamInfo DefInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_DefInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_definfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BattleRet;
        break;
      }

      // optional uint32 BattleRet = 4;
      case 4: {
        if (tag == 32) {
         parse_BattleRet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battleret_)));
          set_has_battleret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UpdateTime;
        break;
      }

      // optional uint64 UpdateTime = 5;
      case 5: {
        if (tag == 40) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_PeriodKey;
        break;
      }

      // optional uint64 PeriodKey = 6;
      case 6: {
        if (tag == 48) {
         parse_PeriodKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &periodkey_)));
          set_has_periodkey();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_TeamId;
        break;
      }

      // optional uint32 TeamId = 7;
      case 7: {
        if (tag == 56) {
         parse_TeamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarBattleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarBattleInfo)
  return false;
#undef DO_
}

void TActImperialWarBattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarBattleInfo)
  // optional uint64 FieldId = 1;
  if (has_fieldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fieldid(), output);
  }

  // optional .pb.TActImperialWarBattleTeamInfo AtkInfo = 2;
  if (has_atkinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->atkinfo(), output);
  }

  // optional .pb.TActImperialWarBattleTeamInfo DefInfo = 3;
  if (has_definfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->definfo(), output);
  }

  // optional uint32 BattleRet = 4;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->battleret(), output);
  }

  // optional uint64 UpdateTime = 5;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->updatetime(), output);
  }

  // optional uint64 PeriodKey = 6;
  if (has_periodkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->periodkey(), output);
  }

  // optional uint32 TeamId = 7;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarBattleInfo)
}

::google::protobuf::uint8* TActImperialWarBattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarBattleInfo)
  // optional uint64 FieldId = 1;
  if (has_fieldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fieldid(), target);
  }

  // optional .pb.TActImperialWarBattleTeamInfo AtkInfo = 2;
  if (has_atkinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->atkinfo(), target);
  }

  // optional .pb.TActImperialWarBattleTeamInfo DefInfo = 3;
  if (has_definfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->definfo(), target);
  }

  // optional uint32 BattleRet = 4;
  if (has_battleret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->battleret(), target);
  }

  // optional uint64 UpdateTime = 5;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->updatetime(), target);
  }

  // optional uint64 PeriodKey = 6;
  if (has_periodkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->periodkey(), target);
  }

  // optional uint32 TeamId = 7;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarBattleInfo)
  return target;
}

int TActImperialWarBattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 FieldId = 1;
    if (has_fieldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fieldid());
    }

    // optional .pb.TActImperialWarBattleTeamInfo AtkInfo = 2;
    if (has_atkinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->atkinfo());
    }

    // optional .pb.TActImperialWarBattleTeamInfo DefInfo = 3;
    if (has_definfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->definfo());
    }

    // optional uint32 BattleRet = 4;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battleret());
    }

    // optional uint64 UpdateTime = 5;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

    // optional uint64 PeriodKey = 6;
    if (has_periodkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->periodkey());
    }

    // optional uint32 TeamId = 7;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarBattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarBattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarBattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarBattleInfo::MergeFrom(const TActImperialWarBattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldid()) {
      set_fieldid(from.fieldid());
    }
    if (from.has_atkinfo()) {
      mutable_atkinfo()->::pb::TActImperialWarBattleTeamInfo::MergeFrom(from.atkinfo());
    }
    if (from.has_definfo()) {
      mutable_definfo()->::pb::TActImperialWarBattleTeamInfo::MergeFrom(from.definfo());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_periodkey()) {
      set_periodkey(from.periodkey());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarBattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarBattleInfo::CopyFrom(const TActImperialWarBattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarBattleInfo::IsInitialized() const {

  return true;
}

void TActImperialWarBattleInfo::Swap(TActImperialWarBattleInfo* other) {
  if (other != this) {
    std::swap(fieldid_, other->fieldid_);
    std::swap(atkinfo_, other->atkinfo_);
    std::swap(definfo_, other->definfo_);
    std::swap(battleret_, other->battleret_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(periodkey_, other->periodkey_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarBattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarBattleInfo_descriptor_;
  metadata.reflection = TActImperialWarBattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarBattleTeamInfo::kMasterUidFieldNumber;
const int TActImperialWarBattleTeamInfo::kMasterSidFieldNumber;
const int TActImperialWarBattleTeamInfo::kMasterScoreFieldNumber;
const int TActImperialWarBattleTeamInfo::kSubTeamInfoFieldNumber;
const int TActImperialWarBattleTeamInfo::kNameFieldNumber;
const int TActImperialWarBattleTeamInfo::kScoreFieldNumber;
const int TActImperialWarBattleTeamInfo::kLeftRightFieldNumber;
#endif  // !_MSC_VER

TActImperialWarBattleTeamInfo::TActImperialWarBattleTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarBattleTeamInfo)
}

void TActImperialWarBattleTeamInfo::InitAsDefaultInstance() {
}

TActImperialWarBattleTeamInfo::TActImperialWarBattleTeamInfo(const TActImperialWarBattleTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarBattleTeamInfo)
}

void TActImperialWarBattleTeamInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  masteruid_ = GOOGLE_ULONGLONG(0);
  mastersid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  masterscore_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  score_ = GOOGLE_LONGLONG(0);
  leftright_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarBattleTeamInfo::~TActImperialWarBattleTeamInfo() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarBattleTeamInfo)
  SharedDtor();
}

void TActImperialWarBattleTeamInfo::SharedDtor() {
  if (mastersid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastersid_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TActImperialWarBattleTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarBattleTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarBattleTeamInfo_descriptor_;
}

const TActImperialWarBattleTeamInfo& TActImperialWarBattleTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarBattleTeamInfo* TActImperialWarBattleTeamInfo::default_instance_ = NULL;

TActImperialWarBattleTeamInfo* TActImperialWarBattleTeamInfo::New() const {
  return new TActImperialWarBattleTeamInfo;
}

void TActImperialWarBattleTeamInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarBattleTeamInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(masterscore_, score_);
    masteruid_ = GOOGLE_ULONGLONG(0);
    if (has_mastersid()) {
      if (mastersid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mastersid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  subteaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarBattleTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarBattleTeamInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 MasterUid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masteruid_)));
          set_has_masteruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_MasterSid;
        break;
      }

      // optional string MasterSid = 2;
      case 2: {
        if (tag == 18) {
         parse_MasterSid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mastersid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mastersid().data(), this->mastersid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mastersid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MasterScore;
        break;
      }

      // optional uint32 MasterScore = 3;
      case 3: {
        if (tag == 24) {
         parse_MasterScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &masterscore_)));
          set_has_masterscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SubTeamInfo;
        break;
      }

      // repeated string SubTeamInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_SubTeamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subteaminfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subteaminfo(this->subteaminfo_size() - 1).data(),
            this->subteaminfo(this->subteaminfo_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subteaminfo");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_SubTeamInfo;
        if (input->ExpectTag(42)) goto parse_Name;
        break;
      }

      // optional string Name = 5;
      case 5: {
        if (tag == 42) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_Score;
        break;
      }

      // optional int64 Score = 6;
      case 6: {
        if (tag == 48) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LeftRight;
        break;
      }

      // optional int32 LeftRight = 7;
      case 7: {
        if (tag == 56) {
         parse_LeftRight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftright_)));
          set_has_leftright();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarBattleTeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarBattleTeamInfo)
  return false;
#undef DO_
}

void TActImperialWarBattleTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarBattleTeamInfo)
  // optional uint64 MasterUid = 1;
  if (has_masteruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->masteruid(), output);
  }

  // optional string MasterSid = 2;
  if (has_mastersid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastersid().data(), this->mastersid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastersid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mastersid(), output);
  }

  // optional uint32 MasterScore = 3;
  if (has_masterscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->masterscore(), output);
  }

  // repeated string SubTeamInfo = 4;
  for (int i = 0; i < this->subteaminfo_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->subteaminfo(i).data(), this->subteaminfo(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "subteaminfo");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->subteaminfo(i), output);
  }

  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional int64 Score = 6;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->score(), output);
  }

  // optional int32 LeftRight = 7;
  if (has_leftright()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->leftright(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarBattleTeamInfo)
}

::google::protobuf::uint8* TActImperialWarBattleTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarBattleTeamInfo)
  // optional uint64 MasterUid = 1;
  if (has_masteruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->masteruid(), target);
  }

  // optional string MasterSid = 2;
  if (has_mastersid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastersid().data(), this->mastersid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastersid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mastersid(), target);
  }

  // optional uint32 MasterScore = 3;
  if (has_masterscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->masterscore(), target);
  }

  // repeated string SubTeamInfo = 4;
  for (int i = 0; i < this->subteaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subteaminfo(i).data(), this->subteaminfo(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subteaminfo");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->subteaminfo(i), target);
  }

  // optional string Name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional int64 Score = 6;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->score(), target);
  }

  // optional int32 LeftRight = 7;
  if (has_leftright()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->leftright(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarBattleTeamInfo)
  return target;
}

int TActImperialWarBattleTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 MasterUid = 1;
    if (has_masteruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masteruid());
    }

    // optional string MasterSid = 2;
    if (has_mastersid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mastersid());
    }

    // optional uint32 MasterScore = 3;
    if (has_masterscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->masterscore());
    }

    // optional string Name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 Score = 6;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->score());
    }

    // optional int32 LeftRight = 7;
    if (has_leftright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftright());
    }

  }
  // repeated string SubTeamInfo = 4;
  total_size += 1 * this->subteaminfo_size();
  for (int i = 0; i < this->subteaminfo_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subteaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarBattleTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarBattleTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarBattleTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarBattleTeamInfo::MergeFrom(const TActImperialWarBattleTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  subteaminfo_.MergeFrom(from.subteaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_masteruid()) {
      set_masteruid(from.masteruid());
    }
    if (from.has_mastersid()) {
      set_mastersid(from.mastersid());
    }
    if (from.has_masterscore()) {
      set_masterscore(from.masterscore());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_leftright()) {
      set_leftright(from.leftright());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarBattleTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarBattleTeamInfo::CopyFrom(const TActImperialWarBattleTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarBattleTeamInfo::IsInitialized() const {

  return true;
}

void TActImperialWarBattleTeamInfo::Swap(TActImperialWarBattleTeamInfo* other) {
  if (other != this) {
    std::swap(masteruid_, other->masteruid_);
    std::swap(mastersid_, other->mastersid_);
    std::swap(masterscore_, other->masterscore_);
    subteaminfo_.Swap(&other->subteaminfo_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(leftright_, other->leftright_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarBattleTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarBattleTeamInfo_descriptor_;
  metadata.reflection = TActImperialWarBattleTeamInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
