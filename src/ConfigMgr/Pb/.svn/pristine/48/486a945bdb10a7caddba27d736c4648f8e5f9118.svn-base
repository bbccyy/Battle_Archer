// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/FameHall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/FameHall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TPowerTopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TPowerTopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLevelTopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLevelTopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFameHallGetPowerTopInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFameHallGetPowerTopInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFameHallGetLevelTopInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFameHallGetLevelTopInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFameHallLikeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFameHallLikeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TFameHallLikeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TFameHallLikeRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fFameHall_2eproto() {
  protobuf_AddDesc_net_2fFameHall_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/FameHall.proto");
  GOOGLE_CHECK(file != NULL);
  TPowerTopInfo_descriptor_ = file->message_type(0);
  static const int TPowerTopInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPowerTopInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPowerTopInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPowerTopInfo, liketotal_),
  };
  TPowerTopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TPowerTopInfo_descriptor_,
      TPowerTopInfo::default_instance_,
      TPowerTopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPowerTopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TPowerTopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TPowerTopInfo));
  TLevelTopInfo_descriptor_ = file->message_type(1);
  static const int TLevelTopInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevelTopInfo, userinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevelTopInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevelTopInfo, liketotal_),
  };
  TLevelTopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLevelTopInfo_descriptor_,
      TLevelTopInfo::default_instance_,
      TLevelTopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevelTopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLevelTopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLevelTopInfo));
  TFameHallGetPowerTopInfoRsp_descriptor_ = file->message_type(2);
  static const int TFameHallGetPowerTopInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallGetPowerTopInfoRsp, arrpowertopinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallGetPowerTopInfoRsp, likenum_),
  };
  TFameHallGetPowerTopInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFameHallGetPowerTopInfoRsp_descriptor_,
      TFameHallGetPowerTopInfoRsp::default_instance_,
      TFameHallGetPowerTopInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallGetPowerTopInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallGetPowerTopInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFameHallGetPowerTopInfoRsp));
  TFameHallGetLevelTopInfoRsp_descriptor_ = file->message_type(3);
  static const int TFameHallGetLevelTopInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallGetLevelTopInfoRsp, arrleveltopinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallGetLevelTopInfoRsp, likenum_),
  };
  TFameHallGetLevelTopInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFameHallGetLevelTopInfoRsp_descriptor_,
      TFameHallGetLevelTopInfoRsp::default_instance_,
      TFameHallGetLevelTopInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallGetLevelTopInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallGetLevelTopInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFameHallGetLevelTopInfoRsp));
  TFameHallLikeReq_descriptor_ = file->message_type(4);
  static const int TFameHallLikeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallLikeReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallLikeReq, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallLikeReq, type_),
  };
  TFameHallLikeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFameHallLikeReq_descriptor_,
      TFameHallLikeReq::default_instance_,
      TFameHallLikeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallLikeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallLikeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFameHallLikeReq));
  TFameHallLikeRsp_descriptor_ = file->message_type(5);
  static const int TFameHallLikeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallLikeRsp, arrrewardinfo_),
  };
  TFameHallLikeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TFameHallLikeRsp_descriptor_,
      TFameHallLikeRsp::default_instance_,
      TFameHallLikeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallLikeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TFameHallLikeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TFameHallLikeRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fFameHall_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TPowerTopInfo_descriptor_, &TPowerTopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLevelTopInfo_descriptor_, &TLevelTopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFameHallGetPowerTopInfoRsp_descriptor_, &TFameHallGetPowerTopInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFameHallGetLevelTopInfoRsp_descriptor_, &TFameHallGetLevelTopInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFameHallLikeReq_descriptor_, &TFameHallLikeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TFameHallLikeRsp_descriptor_, &TFameHallLikeRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fFameHall_2eproto() {
  delete TPowerTopInfo::default_instance_;
  delete TPowerTopInfo_reflection_;
  delete TLevelTopInfo::default_instance_;
  delete TLevelTopInfo_reflection_;
  delete TFameHallGetPowerTopInfoRsp::default_instance_;
  delete TFameHallGetPowerTopInfoRsp_reflection_;
  delete TFameHallGetLevelTopInfoRsp::default_instance_;
  delete TFameHallGetLevelTopInfoRsp_reflection_;
  delete TFameHallLikeReq::default_instance_;
  delete TFameHallLikeReq_reflection_;
  delete TFameHallLikeRsp::default_instance_;
  delete TFameHallLikeRsp_reflection_;
}

void protobuf_AddDesc_net_2fFameHall_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fUser_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022net/FameHall.proto\022\002pb\032\016net/User.proto"
    "\032\026net/CommonReward.proto\"_\n\rTPowerTopInf"
    "o\022-\n\010UserInfo\030\001 \001(\0132\033.pb.TUserFightForce"
    "RankItem\022\014\n\004Rank\030\002 \001(\r\022\021\n\tLikeTotal\030\003 \001("
    "\r\"Z\n\rTLevelTopInfo\022(\n\010UserInfo\030\001 \001(\0132\026.p"
    "b.TUserLevelRankItem\022\014\n\004Rank\030\002 \001(\r\022\021\n\tLi"
    "keTotal\030\003 \001(\r\"Z\n\033TFameHallGetPowerTopInf"
    "oRsp\022*\n\017ArrPowerTopInfo\030\001 \003(\0132\021.pb.TPowe"
    "rTopInfo\022\017\n\007LikeNum\030\002 \001(\r\"Z\n\033TFameHallGe"
    "tLevelTopInfoRsp\022*\n\017ArrLevelTopInfo\030\001 \003("
    "\0132\021.pb.TLevelTopInfo\022\017\n\007LikeNum\030\002 \001(\r\";\n"
    "\020TFameHallLikeReq\022\013\n\003Uid\030\001 \001(\004\022\014\n\004Rank\030\002"
    " \001(\r\022\014\n\004Type\030\003 \001(\r\"<\n\020TFameHallLikeRsp\022("
    "\n\rArrRewardInfo\030\001 \003(\0132\021.pb.TCommonReward", 560);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/FameHall.proto", &protobuf_RegisterTypes);
  TPowerTopInfo::default_instance_ = new TPowerTopInfo();
  TLevelTopInfo::default_instance_ = new TLevelTopInfo();
  TFameHallGetPowerTopInfoRsp::default_instance_ = new TFameHallGetPowerTopInfoRsp();
  TFameHallGetLevelTopInfoRsp::default_instance_ = new TFameHallGetLevelTopInfoRsp();
  TFameHallLikeReq::default_instance_ = new TFameHallLikeReq();
  TFameHallLikeRsp::default_instance_ = new TFameHallLikeRsp();
  TPowerTopInfo::default_instance_->InitAsDefaultInstance();
  TLevelTopInfo::default_instance_->InitAsDefaultInstance();
  TFameHallGetPowerTopInfoRsp::default_instance_->InitAsDefaultInstance();
  TFameHallGetLevelTopInfoRsp::default_instance_->InitAsDefaultInstance();
  TFameHallLikeReq::default_instance_->InitAsDefaultInstance();
  TFameHallLikeRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fFameHall_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fFameHall_2eproto {
  StaticDescriptorInitializer_net_2fFameHall_2eproto() {
    protobuf_AddDesc_net_2fFameHall_2eproto();
  }
} static_descriptor_initializer_net_2fFameHall_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TPowerTopInfo::kUserInfoFieldNumber;
const int TPowerTopInfo::kRankFieldNumber;
const int TPowerTopInfo::kLikeTotalFieldNumber;
#endif  // !_MSC_VER

TPowerTopInfo::TPowerTopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TPowerTopInfo)
}

void TPowerTopInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserFightForceRankItem*>(&::pb::TUserFightForceRankItem::default_instance());
}

TPowerTopInfo::TPowerTopInfo(const TPowerTopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TPowerTopInfo)
}

void TPowerTopInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  rank_ = 0u;
  liketotal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TPowerTopInfo::~TPowerTopInfo() {
  // @@protoc_insertion_point(destructor:pb.TPowerTopInfo)
  SharedDtor();
}

void TPowerTopInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TPowerTopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TPowerTopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TPowerTopInfo_descriptor_;
}

const TPowerTopInfo& TPowerTopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFameHall_2eproto();
  return *default_instance_;
}

TPowerTopInfo* TPowerTopInfo::default_instance_ = NULL;

TPowerTopInfo* TPowerTopInfo::New() const {
  return new TPowerTopInfo;
}

void TPowerTopInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TPowerTopInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(rank_, liketotal_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserFightForceRankItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TPowerTopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TPowerTopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserFightForceRankItem UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LikeTotal;
        break;
      }

      // optional uint32 LikeTotal = 3;
      case 3: {
        if (tag == 24) {
         parse_LikeTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &liketotal_)));
          set_has_liketotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TPowerTopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TPowerTopInfo)
  return false;
#undef DO_
}

void TPowerTopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TPowerTopInfo)
  // optional .pb.TUserFightForceRankItem UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 LikeTotal = 3;
  if (has_liketotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->liketotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TPowerTopInfo)
}

::google::protobuf::uint8* TPowerTopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TPowerTopInfo)
  // optional .pb.TUserFightForceRankItem UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 LikeTotal = 3;
  if (has_liketotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->liketotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TPowerTopInfo)
  return target;
}

int TPowerTopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserFightForceRankItem UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 LikeTotal = 3;
    if (has_liketotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->liketotal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TPowerTopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TPowerTopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TPowerTopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TPowerTopInfo::MergeFrom(const TPowerTopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserFightForceRankItem::MergeFrom(from.userinfo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_liketotal()) {
      set_liketotal(from.liketotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TPowerTopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TPowerTopInfo::CopyFrom(const TPowerTopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPowerTopInfo::IsInitialized() const {

  return true;
}

void TPowerTopInfo::Swap(TPowerTopInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(rank_, other->rank_);
    std::swap(liketotal_, other->liketotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TPowerTopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TPowerTopInfo_descriptor_;
  metadata.reflection = TPowerTopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLevelTopInfo::kUserInfoFieldNumber;
const int TLevelTopInfo::kRankFieldNumber;
const int TLevelTopInfo::kLikeTotalFieldNumber;
#endif  // !_MSC_VER

TLevelTopInfo::TLevelTopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLevelTopInfo)
}

void TLevelTopInfo::InitAsDefaultInstance() {
  userinfo_ = const_cast< ::pb::TUserLevelRankItem*>(&::pb::TUserLevelRankItem::default_instance());
}

TLevelTopInfo::TLevelTopInfo(const TLevelTopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLevelTopInfo)
}

void TLevelTopInfo::SharedCtor() {
  _cached_size_ = 0;
  userinfo_ = NULL;
  rank_ = 0u;
  liketotal_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLevelTopInfo::~TLevelTopInfo() {
  // @@protoc_insertion_point(destructor:pb.TLevelTopInfo)
  SharedDtor();
}

void TLevelTopInfo::SharedDtor() {
  if (this != default_instance_) {
    delete userinfo_;
  }
}

void TLevelTopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLevelTopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLevelTopInfo_descriptor_;
}

const TLevelTopInfo& TLevelTopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFameHall_2eproto();
  return *default_instance_;
}

TLevelTopInfo* TLevelTopInfo::default_instance_ = NULL;

TLevelTopInfo* TLevelTopInfo::New() const {
  return new TLevelTopInfo;
}

void TLevelTopInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLevelTopInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(rank_, liketotal_);
    if (has_userinfo()) {
      if (userinfo_ != NULL) userinfo_->::pb::TUserLevelRankItem::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLevelTopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLevelTopInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TUserLevelRankItem UserInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_LikeTotal;
        break;
      }

      // optional uint32 LikeTotal = 3;
      case 3: {
        if (tag == 24) {
         parse_LikeTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &liketotal_)));
          set_has_liketotal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLevelTopInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLevelTopInfo)
  return false;
#undef DO_
}

void TLevelTopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLevelTopInfo)
  // optional .pb.TUserLevelRankItem UserInfo = 1;
  if (has_userinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(), output);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 LikeTotal = 3;
  if (has_liketotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->liketotal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLevelTopInfo)
}

::google::protobuf::uint8* TLevelTopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLevelTopInfo)
  // optional .pb.TUserLevelRankItem UserInfo = 1;
  if (has_userinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(), target);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 LikeTotal = 3;
  if (has_liketotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->liketotal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLevelTopInfo)
  return target;
}

int TLevelTopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TUserLevelRankItem UserInfo = 1;
    if (has_userinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfo());
    }

    // optional uint32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 LikeTotal = 3;
    if (has_liketotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->liketotal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLevelTopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLevelTopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLevelTopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLevelTopInfo::MergeFrom(const TLevelTopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userinfo()) {
      mutable_userinfo()->::pb::TUserLevelRankItem::MergeFrom(from.userinfo());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_liketotal()) {
      set_liketotal(from.liketotal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLevelTopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLevelTopInfo::CopyFrom(const TLevelTopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLevelTopInfo::IsInitialized() const {

  return true;
}

void TLevelTopInfo::Swap(TLevelTopInfo* other) {
  if (other != this) {
    std::swap(userinfo_, other->userinfo_);
    std::swap(rank_, other->rank_);
    std::swap(liketotal_, other->liketotal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLevelTopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLevelTopInfo_descriptor_;
  metadata.reflection = TLevelTopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFameHallGetPowerTopInfoRsp::kArrPowerTopInfoFieldNumber;
const int TFameHallGetPowerTopInfoRsp::kLikeNumFieldNumber;
#endif  // !_MSC_VER

TFameHallGetPowerTopInfoRsp::TFameHallGetPowerTopInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFameHallGetPowerTopInfoRsp)
}

void TFameHallGetPowerTopInfoRsp::InitAsDefaultInstance() {
}

TFameHallGetPowerTopInfoRsp::TFameHallGetPowerTopInfoRsp(const TFameHallGetPowerTopInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFameHallGetPowerTopInfoRsp)
}

void TFameHallGetPowerTopInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  likenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFameHallGetPowerTopInfoRsp::~TFameHallGetPowerTopInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TFameHallGetPowerTopInfoRsp)
  SharedDtor();
}

void TFameHallGetPowerTopInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFameHallGetPowerTopInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFameHallGetPowerTopInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFameHallGetPowerTopInfoRsp_descriptor_;
}

const TFameHallGetPowerTopInfoRsp& TFameHallGetPowerTopInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFameHall_2eproto();
  return *default_instance_;
}

TFameHallGetPowerTopInfoRsp* TFameHallGetPowerTopInfoRsp::default_instance_ = NULL;

TFameHallGetPowerTopInfoRsp* TFameHallGetPowerTopInfoRsp::New() const {
  return new TFameHallGetPowerTopInfoRsp;
}

void TFameHallGetPowerTopInfoRsp::Clear() {
  likenum_ = 0u;
  arrpowertopinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFameHallGetPowerTopInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFameHallGetPowerTopInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TPowerTopInfo ArrPowerTopInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrPowerTopInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrpowertopinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrPowerTopInfo;
        if (input->ExpectTag(16)) goto parse_LikeNum;
        break;
      }

      // optional uint32 LikeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_LikeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likenum_)));
          set_has_likenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFameHallGetPowerTopInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFameHallGetPowerTopInfoRsp)
  return false;
#undef DO_
}

void TFameHallGetPowerTopInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFameHallGetPowerTopInfoRsp)
  // repeated .pb.TPowerTopInfo ArrPowerTopInfo = 1;
  for (int i = 0; i < this->arrpowertopinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrpowertopinfo(i), output);
  }

  // optional uint32 LikeNum = 2;
  if (has_likenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->likenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFameHallGetPowerTopInfoRsp)
}

::google::protobuf::uint8* TFameHallGetPowerTopInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFameHallGetPowerTopInfoRsp)
  // repeated .pb.TPowerTopInfo ArrPowerTopInfo = 1;
  for (int i = 0; i < this->arrpowertopinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrpowertopinfo(i), target);
  }

  // optional uint32 LikeNum = 2;
  if (has_likenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->likenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFameHallGetPowerTopInfoRsp)
  return target;
}

int TFameHallGetPowerTopInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 LikeNum = 2;
    if (has_likenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->likenum());
    }

  }
  // repeated .pb.TPowerTopInfo ArrPowerTopInfo = 1;
  total_size += 1 * this->arrpowertopinfo_size();
  for (int i = 0; i < this->arrpowertopinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrpowertopinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFameHallGetPowerTopInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFameHallGetPowerTopInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFameHallGetPowerTopInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFameHallGetPowerTopInfoRsp::MergeFrom(const TFameHallGetPowerTopInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrpowertopinfo_.MergeFrom(from.arrpowertopinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_likenum()) {
      set_likenum(from.likenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFameHallGetPowerTopInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFameHallGetPowerTopInfoRsp::CopyFrom(const TFameHallGetPowerTopInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFameHallGetPowerTopInfoRsp::IsInitialized() const {

  return true;
}

void TFameHallGetPowerTopInfoRsp::Swap(TFameHallGetPowerTopInfoRsp* other) {
  if (other != this) {
    arrpowertopinfo_.Swap(&other->arrpowertopinfo_);
    std::swap(likenum_, other->likenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFameHallGetPowerTopInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFameHallGetPowerTopInfoRsp_descriptor_;
  metadata.reflection = TFameHallGetPowerTopInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFameHallGetLevelTopInfoRsp::kArrLevelTopInfoFieldNumber;
const int TFameHallGetLevelTopInfoRsp::kLikeNumFieldNumber;
#endif  // !_MSC_VER

TFameHallGetLevelTopInfoRsp::TFameHallGetLevelTopInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFameHallGetLevelTopInfoRsp)
}

void TFameHallGetLevelTopInfoRsp::InitAsDefaultInstance() {
}

TFameHallGetLevelTopInfoRsp::TFameHallGetLevelTopInfoRsp(const TFameHallGetLevelTopInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFameHallGetLevelTopInfoRsp)
}

void TFameHallGetLevelTopInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  likenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFameHallGetLevelTopInfoRsp::~TFameHallGetLevelTopInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TFameHallGetLevelTopInfoRsp)
  SharedDtor();
}

void TFameHallGetLevelTopInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFameHallGetLevelTopInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFameHallGetLevelTopInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFameHallGetLevelTopInfoRsp_descriptor_;
}

const TFameHallGetLevelTopInfoRsp& TFameHallGetLevelTopInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFameHall_2eproto();
  return *default_instance_;
}

TFameHallGetLevelTopInfoRsp* TFameHallGetLevelTopInfoRsp::default_instance_ = NULL;

TFameHallGetLevelTopInfoRsp* TFameHallGetLevelTopInfoRsp::New() const {
  return new TFameHallGetLevelTopInfoRsp;
}

void TFameHallGetLevelTopInfoRsp::Clear() {
  likenum_ = 0u;
  arrleveltopinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFameHallGetLevelTopInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFameHallGetLevelTopInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TLevelTopInfo ArrLevelTopInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrLevelTopInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrleveltopinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrLevelTopInfo;
        if (input->ExpectTag(16)) goto parse_LikeNum;
        break;
      }

      // optional uint32 LikeNum = 2;
      case 2: {
        if (tag == 16) {
         parse_LikeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &likenum_)));
          set_has_likenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFameHallGetLevelTopInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFameHallGetLevelTopInfoRsp)
  return false;
#undef DO_
}

void TFameHallGetLevelTopInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFameHallGetLevelTopInfoRsp)
  // repeated .pb.TLevelTopInfo ArrLevelTopInfo = 1;
  for (int i = 0; i < this->arrleveltopinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrleveltopinfo(i), output);
  }

  // optional uint32 LikeNum = 2;
  if (has_likenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->likenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFameHallGetLevelTopInfoRsp)
}

::google::protobuf::uint8* TFameHallGetLevelTopInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFameHallGetLevelTopInfoRsp)
  // repeated .pb.TLevelTopInfo ArrLevelTopInfo = 1;
  for (int i = 0; i < this->arrleveltopinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrleveltopinfo(i), target);
  }

  // optional uint32 LikeNum = 2;
  if (has_likenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->likenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFameHallGetLevelTopInfoRsp)
  return target;
}

int TFameHallGetLevelTopInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 LikeNum = 2;
    if (has_likenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->likenum());
    }

  }
  // repeated .pb.TLevelTopInfo ArrLevelTopInfo = 1;
  total_size += 1 * this->arrleveltopinfo_size();
  for (int i = 0; i < this->arrleveltopinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrleveltopinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFameHallGetLevelTopInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFameHallGetLevelTopInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFameHallGetLevelTopInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFameHallGetLevelTopInfoRsp::MergeFrom(const TFameHallGetLevelTopInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrleveltopinfo_.MergeFrom(from.arrleveltopinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_likenum()) {
      set_likenum(from.likenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFameHallGetLevelTopInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFameHallGetLevelTopInfoRsp::CopyFrom(const TFameHallGetLevelTopInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFameHallGetLevelTopInfoRsp::IsInitialized() const {

  return true;
}

void TFameHallGetLevelTopInfoRsp::Swap(TFameHallGetLevelTopInfoRsp* other) {
  if (other != this) {
    arrleveltopinfo_.Swap(&other->arrleveltopinfo_);
    std::swap(likenum_, other->likenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFameHallGetLevelTopInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFameHallGetLevelTopInfoRsp_descriptor_;
  metadata.reflection = TFameHallGetLevelTopInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFameHallLikeReq::kUidFieldNumber;
const int TFameHallLikeReq::kRankFieldNumber;
const int TFameHallLikeReq::kTypeFieldNumber;
#endif  // !_MSC_VER

TFameHallLikeReq::TFameHallLikeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFameHallLikeReq)
}

void TFameHallLikeReq::InitAsDefaultInstance() {
}

TFameHallLikeReq::TFameHallLikeReq(const TFameHallLikeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFameHallLikeReq)
}

void TFameHallLikeReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFameHallLikeReq::~TFameHallLikeReq() {
  // @@protoc_insertion_point(destructor:pb.TFameHallLikeReq)
  SharedDtor();
}

void TFameHallLikeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFameHallLikeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFameHallLikeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFameHallLikeReq_descriptor_;
}

const TFameHallLikeReq& TFameHallLikeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFameHall_2eproto();
  return *default_instance_;
}

TFameHallLikeReq* TFameHallLikeReq::default_instance_ = NULL;

TFameHallLikeReq* TFameHallLikeReq::New() const {
  return new TFameHallLikeReq;
}

void TFameHallLikeReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TFameHallLikeReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFameHallLikeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFameHallLikeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional uint32 Type = 3;
      case 3: {
        if (tag == 24) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFameHallLikeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFameHallLikeReq)
  return false;
#undef DO_
}

void TFameHallLikeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFameHallLikeReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  // optional uint32 Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFameHallLikeReq)
}

::google::protobuf::uint8* TFameHallLikeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFameHallLikeReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 Rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  // optional uint32 Type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFameHallLikeReq)
  return target;
}

int TFameHallLikeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 Rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFameHallLikeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFameHallLikeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFameHallLikeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFameHallLikeReq::MergeFrom(const TFameHallLikeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFameHallLikeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFameHallLikeReq::CopyFrom(const TFameHallLikeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFameHallLikeReq::IsInitialized() const {

  return true;
}

void TFameHallLikeReq::Swap(TFameHallLikeReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(rank_, other->rank_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFameHallLikeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFameHallLikeReq_descriptor_;
  metadata.reflection = TFameHallLikeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TFameHallLikeRsp::kArrRewardInfoFieldNumber;
#endif  // !_MSC_VER

TFameHallLikeRsp::TFameHallLikeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TFameHallLikeRsp)
}

void TFameHallLikeRsp::InitAsDefaultInstance() {
}

TFameHallLikeRsp::TFameHallLikeRsp(const TFameHallLikeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TFameHallLikeRsp)
}

void TFameHallLikeRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TFameHallLikeRsp::~TFameHallLikeRsp() {
  // @@protoc_insertion_point(destructor:pb.TFameHallLikeRsp)
  SharedDtor();
}

void TFameHallLikeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TFameHallLikeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TFameHallLikeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TFameHallLikeRsp_descriptor_;
}

const TFameHallLikeRsp& TFameHallLikeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fFameHall_2eproto();
  return *default_instance_;
}

TFameHallLikeRsp* TFameHallLikeRsp::default_instance_ = NULL;

TFameHallLikeRsp* TFameHallLikeRsp::New() const {
  return new TFameHallLikeRsp;
}

void TFameHallLikeRsp::Clear() {
  arrrewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TFameHallLikeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TFameHallLikeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCommonReward ArrRewardInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_ArrRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ArrRewardInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TFameHallLikeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TFameHallLikeRsp)
  return false;
#undef DO_
}

void TFameHallLikeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TFameHallLikeRsp)
  // repeated .pb.TCommonReward ArrRewardInfo = 1;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrrewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TFameHallLikeRsp)
}

::google::protobuf::uint8* TFameHallLikeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TFameHallLikeRsp)
  // repeated .pb.TCommonReward ArrRewardInfo = 1;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrrewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TFameHallLikeRsp)
  return target;
}

int TFameHallLikeRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCommonReward ArrRewardInfo = 1;
  total_size += 1 * this->arrrewardinfo_size();
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFameHallLikeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TFameHallLikeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TFameHallLikeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TFameHallLikeRsp::MergeFrom(const TFameHallLikeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrewardinfo_.MergeFrom(from.arrrewardinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TFameHallLikeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TFameHallLikeRsp::CopyFrom(const TFameHallLikeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFameHallLikeRsp::IsInitialized() const {

  return true;
}

void TFameHallLikeRsp::Swap(TFameHallLikeRsp* other) {
  if (other != this) {
    arrrewardinfo_.Swap(&other->arrrewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TFameHallLikeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TFameHallLikeRsp_descriptor_;
  metadata.reflection = TFameHallLikeRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
