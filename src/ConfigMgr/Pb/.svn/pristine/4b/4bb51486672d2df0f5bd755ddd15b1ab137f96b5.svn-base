// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/SceneConfAudio.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/SceneConfAudio.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* PointAudioInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointAudioInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneConfAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneConfAudio_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fSceneConfAudio_2eproto() {
  protobuf_AddDesc_module_2fSceneConfAudio_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/SceneConfAudio.proto");
  GOOGLE_CHECK(file != NULL);
  PointAudioInfo_descriptor_ = file->message_type(0);
  static const int PointAudioInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAudioInfo, enteraudioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAudioInfo, leaveaudioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAudioInfo, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAudioInfo, position_),
  };
  PointAudioInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointAudioInfo_descriptor_,
      PointAudioInfo::default_instance_,
      PointAudioInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAudioInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointAudioInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointAudioInfo));
  SceneConfAudio_descriptor_ = file->message_type(1);
  static const int SceneConfAudio_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfAudio, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfAudio, sceneconfname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfAudio, pointaudioinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfAudio, ariariaudioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfAudio, ambientaudioinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfAudio, entersceneaudioinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfAudio, leavesceneaudioinfoarr_),
  };
  SceneConfAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneConfAudio_descriptor_,
      SceneConfAudio::default_instance_,
      SceneConfAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneConfAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneConfAudio));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fSceneConfAudio_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointAudioInfo_descriptor_, &PointAudioInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneConfAudio_descriptor_, &SceneConfAudio::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fSceneConfAudio_2eproto() {
  delete PointAudioInfo::default_instance_;
  delete PointAudioInfo_reflection_;
  delete SceneConfAudio::default_instance_;
  delete SceneConfAudio_reflection_;
}

void protobuf_AddDesc_module_2fSceneConfAudio_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fAudioDefine_2eproto();
  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033module/SceneConfAudio.proto\022\002pb\032\030modul"
    "e/AudioDefine.proto\032\021module/Util.proto\"\217"
    "\001\n\016PointAudioInfo\022%\n\016EnterAudioInfo\030\001 \001("
    "\0132\r.pb.AudioInfo\022%\n\016LeaveAudioInfo\030\002 \001(\013"
    "2\r.pb.AudioInfo\022\016\n\006Radius\030\003 \001(\002\022\037\n\010Posit"
    "ion\030\004 \001(\0132\r.pb.PbVector2\"\221\002\n\016SceneConfAu"
    "dio\022\n\n\002Id\030\001 \001(\005\022\025\n\rSceneConfName\030\002 \001(\t\022-"
    "\n\021PointAudioInfoArr\030\003 \003(\0132\022.pb.PointAudi"
    "oInfo\022&\n\017AriariAudioInfo\030\004 \001(\0132\r.pb.Audi"
    "oInfo\022\'\n\020AmbientAudioInfo\030\005 \001(\0132\r.pb.Aud"
    "ioInfo\022-\n\026EnterSceneAudioInfoArr\030\006 \003(\0132\r"
    ".pb.AudioInfo\022-\n\026LeaveSceneAudioInfoArr\030"
    "\007 \003(\0132\r.pb.AudioInfo", 500);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/SceneConfAudio.proto", &protobuf_RegisterTypes);
  PointAudioInfo::default_instance_ = new PointAudioInfo();
  SceneConfAudio::default_instance_ = new SceneConfAudio();
  PointAudioInfo::default_instance_->InitAsDefaultInstance();
  SceneConfAudio::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fSceneConfAudio_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fSceneConfAudio_2eproto {
  StaticDescriptorInitializer_module_2fSceneConfAudio_2eproto() {
    protobuf_AddDesc_module_2fSceneConfAudio_2eproto();
  }
} static_descriptor_initializer_module_2fSceneConfAudio_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PointAudioInfo::kEnterAudioInfoFieldNumber;
const int PointAudioInfo::kLeaveAudioInfoFieldNumber;
const int PointAudioInfo::kRadiusFieldNumber;
const int PointAudioInfo::kPositionFieldNumber;
#endif  // !_MSC_VER

PointAudioInfo::PointAudioInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.PointAudioInfo)
}

void PointAudioInfo::InitAsDefaultInstance() {
  enteraudioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
  leaveaudioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
  position_ = const_cast< ::pb::PbVector2*>(&::pb::PbVector2::default_instance());
}

PointAudioInfo::PointAudioInfo(const PointAudioInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.PointAudioInfo)
}

void PointAudioInfo::SharedCtor() {
  _cached_size_ = 0;
  enteraudioinfo_ = NULL;
  leaveaudioinfo_ = NULL;
  radius_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointAudioInfo::~PointAudioInfo() {
  // @@protoc_insertion_point(destructor:pb.PointAudioInfo)
  SharedDtor();
}

void PointAudioInfo::SharedDtor() {
  if (this != default_instance_) {
    delete enteraudioinfo_;
    delete leaveaudioinfo_;
    delete position_;
  }
}

void PointAudioInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointAudioInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointAudioInfo_descriptor_;
}

const PointAudioInfo& PointAudioInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConfAudio_2eproto();
  return *default_instance_;
}

PointAudioInfo* PointAudioInfo::default_instance_ = NULL;

PointAudioInfo* PointAudioInfo::New() const {
  return new PointAudioInfo;
}

void PointAudioInfo::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_enteraudioinfo()) {
      if (enteraudioinfo_ != NULL) enteraudioinfo_->::pb::AudioInfo::Clear();
    }
    if (has_leaveaudioinfo()) {
      if (leaveaudioinfo_ != NULL) leaveaudioinfo_->::pb::AudioInfo::Clear();
    }
    radius_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::pb::PbVector2::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointAudioInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.PointAudioInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.AudioInfo EnterAudioInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_enteraudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_LeaveAudioInfo;
        break;
      }

      // optional .pb.AudioInfo LeaveAudioInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_LeaveAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaveaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_Radius;
        break;
      }

      // optional float Radius = 3;
      case 3: {
        if (tag == 29) {
         parse_Radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Position;
        break;
      }

      // optional .pb.PbVector2 Position = 4;
      case 4: {
        if (tag == 34) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.PointAudioInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.PointAudioInfo)
  return false;
#undef DO_
}

void PointAudioInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.PointAudioInfo)
  // optional .pb.AudioInfo EnterAudioInfo = 1;
  if (has_enteraudioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->enteraudioinfo(), output);
  }

  // optional .pb.AudioInfo LeaveAudioInfo = 2;
  if (has_leaveaudioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leaveaudioinfo(), output);
  }

  // optional float Radius = 3;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // optional .pb.PbVector2 Position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.PointAudioInfo)
}

::google::protobuf::uint8* PointAudioInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.PointAudioInfo)
  // optional .pb.AudioInfo EnterAudioInfo = 1;
  if (has_enteraudioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->enteraudioinfo(), target);
  }

  // optional .pb.AudioInfo LeaveAudioInfo = 2;
  if (has_leaveaudioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leaveaudioinfo(), target);
  }

  // optional float Radius = 3;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // optional .pb.PbVector2 Position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.PointAudioInfo)
  return target;
}

int PointAudioInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.AudioInfo EnterAudioInfo = 1;
    if (has_enteraudioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->enteraudioinfo());
    }

    // optional .pb.AudioInfo LeaveAudioInfo = 2;
    if (has_leaveaudioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaveaudioinfo());
    }

    // optional float Radius = 3;
    if (has_radius()) {
      total_size += 1 + 4;
    }

    // optional .pb.PbVector2 Position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointAudioInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointAudioInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointAudioInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointAudioInfo::MergeFrom(const PointAudioInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_enteraudioinfo()) {
      mutable_enteraudioinfo()->::pb::AudioInfo::MergeFrom(from.enteraudioinfo());
    }
    if (from.has_leaveaudioinfo()) {
      mutable_leaveaudioinfo()->::pb::AudioInfo::MergeFrom(from.leaveaudioinfo());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_position()) {
      mutable_position()->::pb::PbVector2::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointAudioInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointAudioInfo::CopyFrom(const PointAudioInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointAudioInfo::IsInitialized() const {

  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void PointAudioInfo::Swap(PointAudioInfo* other) {
  if (other != this) {
    std::swap(enteraudioinfo_, other->enteraudioinfo_);
    std::swap(leaveaudioinfo_, other->leaveaudioinfo_);
    std::swap(radius_, other->radius_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointAudioInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointAudioInfo_descriptor_;
  metadata.reflection = PointAudioInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneConfAudio::kIdFieldNumber;
const int SceneConfAudio::kSceneConfNameFieldNumber;
const int SceneConfAudio::kPointAudioInfoArrFieldNumber;
const int SceneConfAudio::kAriariAudioInfoFieldNumber;
const int SceneConfAudio::kAmbientAudioInfoFieldNumber;
const int SceneConfAudio::kEnterSceneAudioInfoArrFieldNumber;
const int SceneConfAudio::kLeaveSceneAudioInfoArrFieldNumber;
#endif  // !_MSC_VER

SceneConfAudio::SceneConfAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.SceneConfAudio)
}

void SceneConfAudio::InitAsDefaultInstance() {
  ariariaudioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
  ambientaudioinfo_ = const_cast< ::pb::AudioInfo*>(&::pb::AudioInfo::default_instance());
}

SceneConfAudio::SceneConfAudio(const SceneConfAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.SceneConfAudio)
}

void SceneConfAudio::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  sceneconfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ariariaudioinfo_ = NULL;
  ambientaudioinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneConfAudio::~SceneConfAudio() {
  // @@protoc_insertion_point(destructor:pb.SceneConfAudio)
  SharedDtor();
}

void SceneConfAudio::SharedDtor() {
  if (sceneconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneconfname_;
  }
  if (this != default_instance_) {
    delete ariariaudioinfo_;
    delete ambientaudioinfo_;
  }
}

void SceneConfAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneConfAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneConfAudio_descriptor_;
}

const SceneConfAudio& SceneConfAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fSceneConfAudio_2eproto();
  return *default_instance_;
}

SceneConfAudio* SceneConfAudio::default_instance_ = NULL;

SceneConfAudio* SceneConfAudio::New() const {
  return new SceneConfAudio;
}

void SceneConfAudio::Clear() {
  if (_has_bits_[0 / 32] & 27) {
    id_ = 0;
    if (has_sceneconfname()) {
      if (sceneconfname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sceneconfname_->clear();
      }
    }
    if (has_ariariaudioinfo()) {
      if (ariariaudioinfo_ != NULL) ariariaudioinfo_->::pb::AudioInfo::Clear();
    }
    if (has_ambientaudioinfo()) {
      if (ambientaudioinfo_ != NULL) ambientaudioinfo_->::pb::AudioInfo::Clear();
    }
  }
  pointaudioinfoarr_.Clear();
  entersceneaudioinfoarr_.Clear();
  leavesceneaudioinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneConfAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.SceneConfAudio)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_SceneConfName;
        break;
      }

      // optional string SceneConfName = 2;
      case 2: {
        if (tag == 18) {
         parse_SceneConfName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sceneconfname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sceneconfname().data(), this->sceneconfname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sceneconfname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PointAudioInfoArr;
        break;
      }

      // repeated .pb.PointAudioInfo PointAudioInfoArr = 3;
      case 3: {
        if (tag == 26) {
         parse_PointAudioInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointaudioinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PointAudioInfoArr;
        if (input->ExpectTag(34)) goto parse_AriariAudioInfo;
        break;
      }

      // optional .pb.AudioInfo AriariAudioInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_AriariAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ariariaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_AmbientAudioInfo;
        break;
      }

      // optional .pb.AudioInfo AmbientAudioInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_AmbientAudioInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ambientaudioinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_EnterSceneAudioInfoArr;
        break;
      }

      // repeated .pb.AudioInfo EnterSceneAudioInfoArr = 6;
      case 6: {
        if (tag == 50) {
         parse_EnterSceneAudioInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entersceneaudioinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_EnterSceneAudioInfoArr;
        if (input->ExpectTag(58)) goto parse_LeaveSceneAudioInfoArr;
        break;
      }

      // repeated .pb.AudioInfo LeaveSceneAudioInfoArr = 7;
      case 7: {
        if (tag == 58) {
         parse_LeaveSceneAudioInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leavesceneaudioinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_LeaveSceneAudioInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.SceneConfAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.SceneConfAudio)
  return false;
#undef DO_
}

void SceneConfAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.SceneConfAudio)
  // optional int32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string SceneConfName = 2;
  if (has_sceneconfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneconfname().data(), this->sceneconfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneconfname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sceneconfname(), output);
  }

  // repeated .pb.PointAudioInfo PointAudioInfoArr = 3;
  for (int i = 0; i < this->pointaudioinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pointaudioinfoarr(i), output);
  }

  // optional .pb.AudioInfo AriariAudioInfo = 4;
  if (has_ariariaudioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ariariaudioinfo(), output);
  }

  // optional .pb.AudioInfo AmbientAudioInfo = 5;
  if (has_ambientaudioinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ambientaudioinfo(), output);
  }

  // repeated .pb.AudioInfo EnterSceneAudioInfoArr = 6;
  for (int i = 0; i < this->entersceneaudioinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->entersceneaudioinfoarr(i), output);
  }

  // repeated .pb.AudioInfo LeaveSceneAudioInfoArr = 7;
  for (int i = 0; i < this->leavesceneaudioinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->leavesceneaudioinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.SceneConfAudio)
}

::google::protobuf::uint8* SceneConfAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.SceneConfAudio)
  // optional int32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string SceneConfName = 2;
  if (has_sceneconfname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sceneconfname().data(), this->sceneconfname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sceneconfname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sceneconfname(), target);
  }

  // repeated .pb.PointAudioInfo PointAudioInfoArr = 3;
  for (int i = 0; i < this->pointaudioinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pointaudioinfoarr(i), target);
  }

  // optional .pb.AudioInfo AriariAudioInfo = 4;
  if (has_ariariaudioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ariariaudioinfo(), target);
  }

  // optional .pb.AudioInfo AmbientAudioInfo = 5;
  if (has_ambientaudioinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ambientaudioinfo(), target);
  }

  // repeated .pb.AudioInfo EnterSceneAudioInfoArr = 6;
  for (int i = 0; i < this->entersceneaudioinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->entersceneaudioinfoarr(i), target);
  }

  // repeated .pb.AudioInfo LeaveSceneAudioInfoArr = 7;
  for (int i = 0; i < this->leavesceneaudioinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->leavesceneaudioinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.SceneConfAudio)
  return target;
}

int SceneConfAudio::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string SceneConfName = 2;
    if (has_sceneconfname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sceneconfname());
    }

    // optional .pb.AudioInfo AriariAudioInfo = 4;
    if (has_ariariaudioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ariariaudioinfo());
    }

    // optional .pb.AudioInfo AmbientAudioInfo = 5;
    if (has_ambientaudioinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ambientaudioinfo());
    }

  }
  // repeated .pb.PointAudioInfo PointAudioInfoArr = 3;
  total_size += 1 * this->pointaudioinfoarr_size();
  for (int i = 0; i < this->pointaudioinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointaudioinfoarr(i));
  }

  // repeated .pb.AudioInfo EnterSceneAudioInfoArr = 6;
  total_size += 1 * this->entersceneaudioinfoarr_size();
  for (int i = 0; i < this->entersceneaudioinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entersceneaudioinfoarr(i));
  }

  // repeated .pb.AudioInfo LeaveSceneAudioInfoArr = 7;
  total_size += 1 * this->leavesceneaudioinfoarr_size();
  for (int i = 0; i < this->leavesceneaudioinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leavesceneaudioinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneConfAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneConfAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneConfAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneConfAudio::MergeFrom(const SceneConfAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointaudioinfoarr_.MergeFrom(from.pointaudioinfoarr_);
  entersceneaudioinfoarr_.MergeFrom(from.entersceneaudioinfoarr_);
  leavesceneaudioinfoarr_.MergeFrom(from.leavesceneaudioinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sceneconfname()) {
      set_sceneconfname(from.sceneconfname());
    }
    if (from.has_ariariaudioinfo()) {
      mutable_ariariaudioinfo()->::pb::AudioInfo::MergeFrom(from.ariariaudioinfo());
    }
    if (from.has_ambientaudioinfo()) {
      mutable_ambientaudioinfo()->::pb::AudioInfo::MergeFrom(from.ambientaudioinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneConfAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneConfAudio::CopyFrom(const SceneConfAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneConfAudio::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->pointaudioinfoarr())) return false;
  return true;
}

void SceneConfAudio::Swap(SceneConfAudio* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sceneconfname_, other->sceneconfname_);
    pointaudioinfoarr_.Swap(&other->pointaudioinfoarr_);
    std::swap(ariariaudioinfo_, other->ariariaudioinfo_);
    std::swap(ambientaudioinfo_, other->ambientaudioinfo_);
    entersceneaudioinfoarr_.Swap(&other->entersceneaudioinfoarr_);
    leavesceneaudioinfoarr_.Swap(&other->leavesceneaudioinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneConfAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneConfAudio_descriptor_;
  metadata.reflection = SceneConfAudio_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
