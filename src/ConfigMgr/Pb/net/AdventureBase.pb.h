// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/AdventureBase.proto

#ifndef PROTOBUF_net_2fAdventureBase_2eproto__INCLUDED
#define PROTOBUF_net_2fAdventureBase_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
#include "module/AdventureMap.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

class TAdventureUserSimpleInfo;
class TUserInfoWithPos;
class TAdventureTeamRecord;
class TAdventureMapStatus;
class TAdventureMapList;
class TAdventLevelExpNum;
class TAdventureTeamExtraReward;
class TAdventureGoods;
class TAdventureBusinessMan;
class TAdventureMonsterStatus;
class TAdventureMonsterInfo;
class InteractItemInfo;
class TAdventureEventRet;
class TAdventureAttr;
class TAdventureBuff;
class TAdventurePassBlock;
class TAdventureGetTeamRankUserInfo;
class TAdventureBattleMonsterInfo;

enum EMapStatus {
  MAP_NOTACCEPTABLE = 0,
  MAP_ACCEPTABLE = 1,
  MAP_INPROGRESS = 2,
  MAP_COMPLETED = 3
};
bool EMapStatus_IsValid(int value);
const EMapStatus EMapStatus_MIN = MAP_NOTACCEPTABLE;
const EMapStatus EMapStatus_MAX = MAP_COMPLETED;
const int EMapStatus_ARRAYSIZE = EMapStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMapStatus_descriptor();
inline const ::std::string& EMapStatus_Name(EMapStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMapStatus_descriptor(), value);
}
inline bool EMapStatus_Parse(
    const ::std::string& name, EMapStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMapStatus>(
    EMapStatus_descriptor(), name, value);
}
enum EMapUserStatus {
  MAPUSER_STATUS_INBATTLE = 2,
  MAPUSER_STATUS_NOTINBATTLE = 3
};
bool EMapUserStatus_IsValid(int value);
const EMapUserStatus EMapUserStatus_MIN = MAPUSER_STATUS_INBATTLE;
const EMapUserStatus EMapUserStatus_MAX = MAPUSER_STATUS_NOTINBATTLE;
const int EMapUserStatus_ARRAYSIZE = EMapUserStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMapUserStatus_descriptor();
inline const ::std::string& EMapUserStatus_Name(EMapUserStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMapUserStatus_descriptor(), value);
}
inline bool EMapUserStatus_Parse(
    const ::std::string& name, EMapUserStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMapUserStatus>(
    EMapUserStatus_descriptor(), name, value);
}
enum EAdvantureRecordType {
  RECORD_TYPE_EVENTDONE = 1,
  RECORD_TYPE_EVENTREWARD = 2,
  RECORD_TYPE_SEND = 3,
  RECORD_TYPE_ACCEPTCALL = 4,
  RECORD_TYPE_PROGRESSRWD = 5
};
bool EAdvantureRecordType_IsValid(int value);
const EAdvantureRecordType EAdvantureRecordType_MIN = RECORD_TYPE_EVENTDONE;
const EAdvantureRecordType EAdvantureRecordType_MAX = RECORD_TYPE_PROGRESSRWD;
const int EAdvantureRecordType_ARRAYSIZE = EAdvantureRecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAdvantureRecordType_descriptor();
inline const ::std::string& EAdvantureRecordType_Name(EAdvantureRecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAdvantureRecordType_descriptor(), value);
}
inline bool EAdvantureRecordType_Parse(
    const ::std::string& name, EAdvantureRecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAdvantureRecordType>(
    EAdvantureRecordType_descriptor(), name, value);
}
enum EMapType {
  MAP_TYPE_ALONE = 1,
  MAP_TYPE_TEAM = 2
};
bool EMapType_IsValid(int value);
const EMapType EMapType_MIN = MAP_TYPE_ALONE;
const EMapType EMapType_MAX = MAP_TYPE_TEAM;
const int EMapType_ARRAYSIZE = EMapType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMapType_descriptor();
inline const ::std::string& EMapType_Name(EMapType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMapType_descriptor(), value);
}
inline bool EMapType_Parse(
    const ::std::string& name, EMapType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMapType>(
    EMapType_descriptor(), name, value);
}
enum ETeamChangeType {
  TEAM_CHANGE_JOIN = 1,
  TEAM_CHANGE_QUIT = 2,
  TEAM_CHANGE_KICK = 3,
  TEAM_CHANGE_DISMISS = 4,
  TEAM_CHANGE_LEADERQUIT = 5
};
bool ETeamChangeType_IsValid(int value);
const ETeamChangeType ETeamChangeType_MIN = TEAM_CHANGE_JOIN;
const ETeamChangeType ETeamChangeType_MAX = TEAM_CHANGE_LEADERQUIT;
const int ETeamChangeType_ARRAYSIZE = ETeamChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETeamChangeType_descriptor();
inline const ::std::string& ETeamChangeType_Name(ETeamChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETeamChangeType_descriptor(), value);
}
inline bool ETeamChangeType_Parse(
    const ::std::string& name, ETeamChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETeamChangeType>(
    ETeamChangeType_descriptor(), name, value);
}
enum EAdventureTeamStatus {
  TEAM_STATUS_NOTSTART = 1,
  TEAM_STATUS_DISMISS = 2,
  TEAM_STATUS_STARTED = 3,
  TEAM_STATUS_EXPIRED = 4
};
bool EAdventureTeamStatus_IsValid(int value);
const EAdventureTeamStatus EAdventureTeamStatus_MIN = TEAM_STATUS_NOTSTART;
const EAdventureTeamStatus EAdventureTeamStatus_MAX = TEAM_STATUS_EXPIRED;
const int EAdventureTeamStatus_ARRAYSIZE = EAdventureTeamStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAdventureTeamStatus_descriptor();
inline const ::std::string& EAdventureTeamStatus_Name(EAdventureTeamStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAdventureTeamStatus_descriptor(), value);
}
inline bool EAdventureTeamStatus_Parse(
    const ::std::string& name, EAdventureTeamStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAdventureTeamStatus>(
    EAdventureTeamStatus_descriptor(), name, value);
}
enum EAdventureGetTeamType {
  GETTEAM_TYPE_ALL = 1,
  GETTEAM_TYPE_GUILD = 2,
  GETTEAM_TYPE_FRIEND = 3
};
bool EAdventureGetTeamType_IsValid(int value);
const EAdventureGetTeamType EAdventureGetTeamType_MIN = GETTEAM_TYPE_ALL;
const EAdventureGetTeamType EAdventureGetTeamType_MAX = GETTEAM_TYPE_FRIEND;
const int EAdventureGetTeamType_ARRAYSIZE = EAdventureGetTeamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAdventureGetTeamType_descriptor();
inline const ::std::string& EAdventureGetTeamType_Name(EAdventureGetTeamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAdventureGetTeamType_descriptor(), value);
}
inline bool EAdventureGetTeamType_Parse(
    const ::std::string& name, EAdventureGetTeamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAdventureGetTeamType>(
    EAdventureGetTeamType_descriptor(), name, value);
}
enum EAdventurePosChangeType {
  POS_CHANGE_SELFMOVE = 1,
  POS_CHANGE_SELFTRANSMIT = 2,
  POS_CHANGE_SEND = 3,
  POS_CHANGE_ACCEPTCALL = 4,
  POS_CHANGE_TRAPPOSRESET = 5
};
bool EAdventurePosChangeType_IsValid(int value);
const EAdventurePosChangeType EAdventurePosChangeType_MIN = POS_CHANGE_SELFMOVE;
const EAdventurePosChangeType EAdventurePosChangeType_MAX = POS_CHANGE_TRAPPOSRESET;
const int EAdventurePosChangeType_ARRAYSIZE = EAdventurePosChangeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAdventurePosChangeType_descriptor();
inline const ::std::string& EAdventurePosChangeType_Name(EAdventurePosChangeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAdventurePosChangeType_descriptor(), value);
}
inline bool EAdventurePosChangeType_Parse(
    const ::std::string& name, EAdventurePosChangeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAdventurePosChangeType>(
    EAdventurePosChangeType_descriptor(), name, value);
}
enum EAdventureSendToMateRetCode {
  RET_CODE_OK = 1,
  RET_CODE_COSTFAIL = 2,
  RET_CODE_MATELEAVE = 3,
  RET_CODE_SAMEPOS = 4,
  RET_CODE_NOTINMAP = 5
};
bool EAdventureSendToMateRetCode_IsValid(int value);
const EAdventureSendToMateRetCode EAdventureSendToMateRetCode_MIN = RET_CODE_OK;
const EAdventureSendToMateRetCode EAdventureSendToMateRetCode_MAX = RET_CODE_NOTINMAP;
const int EAdventureSendToMateRetCode_ARRAYSIZE = EAdventureSendToMateRetCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAdventureSendToMateRetCode_descriptor();
inline const ::std::string& EAdventureSendToMateRetCode_Name(EAdventureSendToMateRetCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAdventureSendToMateRetCode_descriptor(), value);
}
inline bool EAdventureSendToMateRetCode_Parse(
    const ::std::string& name, EAdventureSendToMateRetCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAdventureSendToMateRetCode>(
    EAdventureSendToMateRetCode_descriptor(), name, value);
}
enum EAdventureRollRewardRetCode {
  ROLL_RETCODE_OK = 1,
  ROLL_RETCODE_REWARDED = 2,
  ROLL_RETCODE_ROLLED = 3,
  ROLL_RET_CODE_ROLLEND = 4
};
bool EAdventureRollRewardRetCode_IsValid(int value);
const EAdventureRollRewardRetCode EAdventureRollRewardRetCode_MIN = ROLL_RETCODE_OK;
const EAdventureRollRewardRetCode EAdventureRollRewardRetCode_MAX = ROLL_RET_CODE_ROLLEND;
const int EAdventureRollRewardRetCode_ARRAYSIZE = EAdventureRollRewardRetCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAdventureRollRewardRetCode_descriptor();
inline const ::std::string& EAdventureRollRewardRetCode_Name(EAdventureRollRewardRetCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAdventureRollRewardRetCode_descriptor(), value);
}
inline bool EAdventureRollRewardRetCode_Parse(
    const ::std::string& name, EAdventureRollRewardRetCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAdventureRollRewardRetCode>(
    EAdventureRollRewardRetCode_descriptor(), name, value);
}
enum EAdventureStartBattleRetCode {
  STARTBT_RETCODE_OK = 1,
  STARTBT_RETCODE_DONE = 2,
  STARTBT_RETCODE_INBT = 3
};
bool EAdventureStartBattleRetCode_IsValid(int value);
const EAdventureStartBattleRetCode EAdventureStartBattleRetCode_MIN = STARTBT_RETCODE_OK;
const EAdventureStartBattleRetCode EAdventureStartBattleRetCode_MAX = STARTBT_RETCODE_INBT;
const int EAdventureStartBattleRetCode_ARRAYSIZE = EAdventureStartBattleRetCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAdventureStartBattleRetCode_descriptor();
inline const ::std::string& EAdventureStartBattleRetCode_Name(EAdventureStartBattleRetCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAdventureStartBattleRetCode_descriptor(), value);
}
inline bool EAdventureStartBattleRetCode_Parse(
    const ::std::string& name, EAdventureStartBattleRetCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAdventureStartBattleRetCode>(
    EAdventureStartBattleRetCode_descriptor(), name, value);
}
enum EAdventureType {
  ADVENT_TYPE_NOT_IN_MAP = 0,
  ADVENT_TYPE_NORMAL = 1,
  ADVENT_TYPE_EXP = 2,
  ADVENT_TYPE_TEAM = 3,
  ADVENT_TYPE_ACT_NORMAL = 4,
  ADVENT_TYPE_ACT_TEAM = 5
};
bool EAdventureType_IsValid(int value);
const EAdventureType EAdventureType_MIN = ADVENT_TYPE_NOT_IN_MAP;
const EAdventureType EAdventureType_MAX = ADVENT_TYPE_ACT_TEAM;
const int EAdventureType_ARRAYSIZE = EAdventureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAdventureType_descriptor();
inline const ::std::string& EAdventureType_Name(EAdventureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAdventureType_descriptor(), value);
}
inline bool EAdventureType_Parse(
    const ::std::string& name, EAdventureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAdventureType>(
    EAdventureType_descriptor(), name, value);
}
enum ETeamStartPlayErrorCode {
  TEAM_START_OK = 0,
  TEAM_START_IN_MAP = 1,
  TEAM_START_NO_ADVENT_NUM = 2,
  TEAM_START_GET_MAP_FAIL = 3
};
bool ETeamStartPlayErrorCode_IsValid(int value);
const ETeamStartPlayErrorCode ETeamStartPlayErrorCode_MIN = TEAM_START_OK;
const ETeamStartPlayErrorCode ETeamStartPlayErrorCode_MAX = TEAM_START_GET_MAP_FAIL;
const int ETeamStartPlayErrorCode_ARRAYSIZE = ETeamStartPlayErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETeamStartPlayErrorCode_descriptor();
inline const ::std::string& ETeamStartPlayErrorCode_Name(ETeamStartPlayErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETeamStartPlayErrorCode_descriptor(), value);
}
inline bool ETeamStartPlayErrorCode_Parse(
    const ::std::string& name, ETeamStartPlayErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETeamStartPlayErrorCode>(
    ETeamStartPlayErrorCode_descriptor(), name, value);
}
enum ETeamMode {
  TEAM_MODE_ALONE = 0,
  TEAM_MODE_LEADER = 1,
  TEAM_MODE_MEMBER = 2,
  TEAM_MODE_HELPER = 3
};
bool ETeamMode_IsValid(int value);
const ETeamMode ETeamMode_MIN = TEAM_MODE_ALONE;
const ETeamMode ETeamMode_MAX = TEAM_MODE_HELPER;
const int ETeamMode_ARRAYSIZE = ETeamMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETeamMode_descriptor();
inline const ::std::string& ETeamMode_Name(ETeamMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETeamMode_descriptor(), value);
}
inline bool ETeamMode_Parse(
    const ::std::string& name, ETeamMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETeamMode>(
    ETeamMode_descriptor(), name, value);
}
enum EAdventureRefreshMapCostType {
  ADVENT_RFR_COST_TYPE_FREE = 1,
  ADVENT_RFR_COST_TYPE_ITEM = 2,
  ADVENT_RFR_COST_TYPE_GOLD = 3
};
bool EAdventureRefreshMapCostType_IsValid(int value);
const EAdventureRefreshMapCostType EAdventureRefreshMapCostType_MIN = ADVENT_RFR_COST_TYPE_FREE;
const EAdventureRefreshMapCostType EAdventureRefreshMapCostType_MAX = ADVENT_RFR_COST_TYPE_GOLD;
const int EAdventureRefreshMapCostType_ARRAYSIZE = EAdventureRefreshMapCostType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAdventureRefreshMapCostType_descriptor();
inline const ::std::string& EAdventureRefreshMapCostType_Name(EAdventureRefreshMapCostType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAdventureRefreshMapCostType_descriptor(), value);
}
inline bool EAdventureRefreshMapCostType_Parse(
    const ::std::string& name, EAdventureRefreshMapCostType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAdventureRefreshMapCostType>(
    EAdventureRefreshMapCostType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TAdventureUserSimpleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureUserSimpleInfo : public ::google::protobuf::Message {
 public:
  TAdventureUserSimpleInfo();
  virtual ~TAdventureUserSimpleInfo();

  TAdventureUserSimpleInfo(const TAdventureUserSimpleInfo& from);

  inline TAdventureUserSimpleInfo& operator=(const TAdventureUserSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureUserSimpleInfo& default_instance();

  void Swap(TAdventureUserSimpleInfo* other);

  // implements Message ----------------------------------------------

  TAdventureUserSimpleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureUserSimpleInfo& from);
  void MergeFrom(const TAdventureUserSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional string Uname = 3;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 Htid = 4;
  inline bool has_htid() const;
  inline void clear_htid();
  static const int kHtidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_htid</name>
  		<replaceName>Htid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 htid() const;
  inline void set_htid(::google::protobuf::uint32 value);

  // optional uint32 Level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_level</name>
  		<replaceName>Level</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 VipLevel = 6;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viplevel</name>
  		<replaceName>VipLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 viplevel() const;
  inline void set_viplevel(::google::protobuf::uint32 value);

  // optional uint64 FightForce = 7;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 PlayerImageFrameTid = 8;
  inline bool has_playerimageframetid() const;
  inline void clear_playerimageframetid();
  static const int kPlayerImageFrameTidFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_playerimageframetid</name>
  		<replaceName>PlayerImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 playerimageframetid() const;
  inline void set_playerimageframetid(::google::protobuf::uint32 value);

  // optional string GuildName = 9;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildname</name>
  		<replaceName>GuildName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 CurMount = 10;
  inline bool has_curmount() const;
  inline void clear_curmount();
  static const int kCurMountFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>curmount</name>
  		<replaceName>CurMount</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curmount</name>
  		<replaceName>CurMount</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curmount</name>
  		<replaceName>CurMount</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curmount() const;
  inline void set_curmount(::google::protobuf::uint32 value);

  // optional uint32 MasterHtid = 11;
  inline bool has_masterhtid() const;
  inline void clear_masterhtid();
  static const int kMasterHtidFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>masterhtid</name>
  		<replaceName>MasterHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_masterhtid</name>
  		<replaceName>MasterHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_masterhtid</name>
  		<replaceName>MasterHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 masterhtid() const;
  inline void set_masterhtid(::google::protobuf::uint32 value);

  // optional uint64 GuildId = 12;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional uint32 Title = 13;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TAdventureUserSimpleInfo</name>
  	<Function>
  		<name>title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 title() const;
  inline void set_title(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureUserSimpleInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_htid();
  inline void clear_has_htid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_playerimageframetid();
  inline void clear_has_playerimageframetid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_curmount();
  inline void clear_has_curmount();
  inline void set_has_masterhtid();
  inline void clear_has_masterhtid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* serverid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 htid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 viplevel_;
  ::google::protobuf::uint32 playerimageframetid_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 curmount_;
  ::google::protobuf::uint32 masterhtid_;
  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::uint32 title_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureUserSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUserInfoWithPos</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUserInfoWithPos : public ::google::protobuf::Message {
 public:
  TUserInfoWithPos();
  virtual ~TUserInfoWithPos();

  TUserInfoWithPos(const TUserInfoWithPos& from);

  inline TUserInfoWithPos& operator=(const TUserInfoWithPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUserInfoWithPos& default_instance();

  void Swap(TUserInfoWithPos* other);

  // implements Message ----------------------------------------------

  TUserInfoWithPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUserInfoWithPos& from);
  void MergeFrom(const TUserInfoWithPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUserInfoWithPos</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 LayerIndex = 2;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUserInfoWithPos</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 PosX = 3;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUserInfoWithPos</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 4;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUserInfoWithPos</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // optional .pb.ETeamMode TeamMode = 5;
  inline bool has_teammode() const;
  inline void clear_teammode();
  static const int kTeamModeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUserInfoWithPos</name>
  	<Function>
  		<name>teammode</name>
  		<replaceName>TeamMode</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teammode</name>
  		<replaceName>TeamMode</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teammode</name>
  		<replaceName>TeamMode</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ETeamMode teammode() const;
  inline void set_teammode(::pb::ETeamMode value);

  // optional .pb.EMapUserStatus UserStatus = 6;
  inline bool has_userstatus() const;
  inline void clear_userstatus();
  static const int kUserStatusFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUserInfoWithPos</name>
  	<Function>
  		<name>userstatus</name>
  		<replaceName>UserStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userstatus</name>
  		<replaceName>UserStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userstatus</name>
  		<replaceName>UserStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EMapUserStatus userstatus() const;
  inline void set_userstatus(::pb::EMapUserStatus value);

  // optional int32 BattleObjectIndex = 7;
  inline bool has_battleobjectindex() const;
  inline void clear_battleobjectindex();
  static const int kBattleObjectIndexFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TUserInfoWithPos</name>
  	<Function>
  		<name>battleobjectindex</name>
  		<replaceName>BattleObjectIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleobjectindex</name>
  		<replaceName>BattleObjectIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleobjectindex</name>
  		<replaceName>BattleObjectIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 battleobjectindex() const;
  inline void set_battleobjectindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TUserInfoWithPos)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_teammode();
  inline void clear_has_teammode();
  inline void set_has_userstatus();
  inline void clear_has_userstatus();
  inline void set_has_battleobjectindex();
  inline void clear_has_battleobjectindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  int teammode_;
  int userstatus_;
  ::google::protobuf::int32 battleobjectindex_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TUserInfoWithPos* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTeamRecord</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTeamRecord : public ::google::protobuf::Message {
 public:
  TAdventureTeamRecord();
  virtual ~TAdventureTeamRecord();

  TAdventureTeamRecord(const TAdventureTeamRecord& from);

  inline TAdventureTeamRecord& operator=(const TAdventureTeamRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTeamRecord& default_instance();

  void Swap(TAdventureTeamRecord* other);

  // implements Message ----------------------------------------------

  TAdventureTeamRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTeamRecord& from);
  void MergeFrom(const TAdventureTeamRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EAdvantureRecordType RecordType = 1;
  inline bool has_recordtype() const;
  inline void clear_recordtype();
  static const int kRecordTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamRecord</name>
  	<Function>
  		<name>recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAdvantureRecordType recordtype() const;
  inline void set_recordtype(::pb::EAdvantureRecordType value);

  // repeated uint64 ParamArr = 2;
  inline int paramarr_size() const;
  inline void clear_paramarr();
  static const int kParamArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamRecord</name>
  	<Function>
  		<name>paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_paramarr</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>paramarr_size</name>
  		<replaceName>ParamArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 paramarr(int index) const;
  inline void set_paramarr(int index, ::google::protobuf::uint64 value);
  inline void add_paramarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      paramarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_paramarr();

  // repeated .pb.TCommonReward RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamRecord</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureTeamRecord)
 private:
  inline void set_has_recordtype();
  inline void clear_has_recordtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > paramarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  int recordtype_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTeamRecord* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureMapStatus</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureMapStatus : public ::google::protobuf::Message {
 public:
  TAdventureMapStatus();
  virtual ~TAdventureMapStatus();

  TAdventureMapStatus(const TAdventureMapStatus& from);

  inline TAdventureMapStatus& operator=(const TAdventureMapStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureMapStatus& default_instance();

  void Swap(TAdventureMapStatus* other);

  // implements Message ----------------------------------------------

  TAdventureMapStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureMapStatus& from);
  void MergeFrom(const TAdventureMapStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 MapId = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMapStatus</name>
  	<Function>
  		<name>mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapid</name>
  		<replaceName>MapId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mapid() const;
  inline void set_mapid(::google::protobuf::uint64 value);

  // optional uint32 MapEntryId = 2;
  inline bool has_mapentryid() const;
  inline void clear_mapentryid();
  static const int kMapEntryIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMapStatus</name>
  	<Function>
  		<name>mapentryid</name>
  		<replaceName>MapEntryId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapentryid</name>
  		<replaceName>MapEntryId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapentryid</name>
  		<replaceName>MapEntryId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapentryid() const;
  inline void set_mapentryid(::google::protobuf::uint32 value);

  // optional .pb.EMapStatus Status = 3;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMapStatus</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EMapStatus status() const;
  inline void set_status(::pb::EMapStatus value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureMapStatus)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_mapentryid();
  inline void clear_has_mapentryid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mapid_;
  ::google::protobuf::uint32 mapentryid_;
  int status_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureMapStatus* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureMapList</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureMapList : public ::google::protobuf::Message {
 public:
  TAdventureMapList();
  virtual ~TAdventureMapList();

  TAdventureMapList(const TAdventureMapList& from);

  inline TAdventureMapList& operator=(const TAdventureMapList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureMapList& default_instance();

  void Swap(TAdventureMapList* other);

  // implements Message ----------------------------------------------

  TAdventureMapList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureMapList& from);
  void MergeFrom(const TAdventureMapList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TAdventureMapStatus MapArray = 1;
  inline int maparray_size() const;
  inline void clear_maparray();
  static const int kMapArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMapList</name>
  	<Function>
  		<name>maparray</name>
  		<replaceName>MapArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_maparray</name>
  		<replaceName>MapArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_maparray</name>
  		<replaceName>MapArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maparray</name>
  		<replaceName>MapArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>maparray_size</name>
  		<replaceName>MapArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureMapStatus& maparray(int index) const;
  inline ::pb::TAdventureMapStatus* mutable_maparray(int index);
  inline ::pb::TAdventureMapStatus* add_maparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMapStatus >&
      maparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMapStatus >*
      mutable_maparray();

  // @@protoc_insertion_point(class_scope:pb.TAdventureMapList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMapStatus > maparray_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureMapList* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventLevelExpNum</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventLevelExpNum : public ::google::protobuf::Message {
 public:
  TAdventLevelExpNum();
  virtual ~TAdventLevelExpNum();

  TAdventLevelExpNum(const TAdventLevelExpNum& from);

  inline TAdventLevelExpNum& operator=(const TAdventLevelExpNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventLevelExpNum& default_instance();

  void Swap(TAdventLevelExpNum* other);

  // implements Message ----------------------------------------------

  TAdventLevelExpNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventLevelExpNum& from);
  void MergeFrom(const TAdventLevelExpNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AdventureLevelId = 1;
  inline bool has_adventurelevelid() const;
  inline void clear_adventurelevelid();
  static const int kAdventureLevelIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventLevelExpNum</name>
  	<Function>
  		<name>adventurelevelid</name>
  		<replaceName>AdventureLevelId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adventurelevelid</name>
  		<replaceName>AdventureLevelId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adventurelevelid</name>
  		<replaceName>AdventureLevelId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 adventurelevelid() const;
  inline void set_adventurelevelid(::google::protobuf::uint32 value);

  // optional uint32 ExpNum = 2;
  inline bool has_expnum() const;
  inline void clear_expnum();
  static const int kExpNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventLevelExpNum</name>
  	<Function>
  		<name>expnum</name>
  		<replaceName>ExpNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_expnum</name>
  		<replaceName>ExpNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_expnum</name>
  		<replaceName>ExpNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 expnum() const;
  inline void set_expnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventLevelExpNum)
 private:
  inline void set_has_adventurelevelid();
  inline void clear_has_adventurelevelid();
  inline void set_has_expnum();
  inline void clear_has_expnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 adventurelevelid_;
  ::google::protobuf::uint32 expnum_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventLevelExpNum* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureTeamExtraReward</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureTeamExtraReward : public ::google::protobuf::Message {
 public:
  TAdventureTeamExtraReward();
  virtual ~TAdventureTeamExtraReward();

  TAdventureTeamExtraReward(const TAdventureTeamExtraReward& from);

  inline TAdventureTeamExtraReward& operator=(const TAdventureTeamExtraReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureTeamExtraReward& default_instance();

  void Swap(TAdventureTeamExtraReward* other);

  // implements Message ----------------------------------------------

  TAdventureTeamExtraReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureTeamExtraReward& from);
  void MergeFrom(const TAdventureTeamExtraReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RewardUid = 1;
  inline bool has_rewarduid() const;
  inline void clear_rewarduid();
  static const int kRewardUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamExtraReward</name>
  	<Function>
  		<name>rewarduid</name>
  		<replaceName>RewardUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewarduid</name>
  		<replaceName>RewardUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewarduid</name>
  		<replaceName>RewardUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewarduid() const;
  inline void set_rewarduid(::google::protobuf::uint64 value);

  // optional .pb.TCommonReward RewardInfo = 2;
  inline bool has_rewardinfo() const;
  inline void clear_rewardinfo();
  static const int kRewardInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureTeamExtraReward</name>
  	<Function>
  		<name>rewardinfo</name>
  		<replaceName>RewardInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardinfo</name>
  		<replaceName>RewardInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_rewardinfo</name>
  		<replaceName>RewardInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardinfo</name>
  		<replaceName>RewardInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardinfo() const;
  inline ::pb::TCommonReward* mutable_rewardinfo();
  inline ::pb::TCommonReward* release_rewardinfo();
  inline void set_allocated_rewardinfo(::pb::TCommonReward* rewardinfo);

  // @@protoc_insertion_point(class_scope:pb.TAdventureTeamExtraReward)
 private:
  inline void set_has_rewarduid();
  inline void clear_has_rewarduid();
  inline void set_has_rewardinfo();
  inline void clear_has_rewardinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rewarduid_;
  ::pb::TCommonReward* rewardinfo_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureTeamExtraReward* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureGoods</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGoods : public ::google::protobuf::Message {
 public:
  TAdventureGoods();
  virtual ~TAdventureGoods();

  TAdventureGoods(const TAdventureGoods& from);

  inline TAdventureGoods& operator=(const TAdventureGoods& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGoods& default_instance();

  void Swap(TAdventureGoods* other);

  // implements Message ----------------------------------------------

  TAdventureGoods* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGoods& from);
  void MergeFrom(const TAdventureGoods& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GoodsId = 1;
  inline bool has_goodsid() const;
  inline void clear_goodsid();
  static const int kGoodsIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGoods</name>
  	<Function>
  		<name>goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodsid</name>
  		<replaceName>GoodsId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goodsid() const;
  inline void set_goodsid(::google::protobuf::uint32 value);

  // optional uint32 BoughtNum = 2;
  inline bool has_boughtnum() const;
  inline void clear_boughtnum();
  static const int kBoughtNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGoods</name>
  	<Function>
  		<name>boughtnum</name>
  		<replaceName>BoughtNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_boughtnum</name>
  		<replaceName>BoughtNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_boughtnum</name>
  		<replaceName>BoughtNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 boughtnum() const;
  inline void set_boughtnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureGoods)
 private:
  inline void set_has_goodsid();
  inline void clear_has_goodsid();
  inline void set_has_boughtnum();
  inline void clear_has_boughtnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 goodsid_;
  ::google::protobuf::uint32 boughtnum_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGoods* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureBusinessMan</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureBusinessMan : public ::google::protobuf::Message {
 public:
  TAdventureBusinessMan();
  virtual ~TAdventureBusinessMan();

  TAdventureBusinessMan(const TAdventureBusinessMan& from);

  inline TAdventureBusinessMan& operator=(const TAdventureBusinessMan& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureBusinessMan& default_instance();

  void Swap(TAdventureBusinessMan* other);

  // implements Message ----------------------------------------------

  TAdventureBusinessMan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureBusinessMan& from);
  void MergeFrom(const TAdventureBusinessMan& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerIndex = 1;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBusinessMan</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 PosX = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBusinessMan</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBusinessMan</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // repeated .pb.TAdventureGoods GoodsArray = 4;
  inline int goodsarray_size() const;
  inline void clear_goodsarray();
  static const int kGoodsArrayFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBusinessMan</name>
  	<Function>
  		<name>goodsarray</name>
  		<replaceName>GoodsArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_goodsarray</name>
  		<replaceName>GoodsArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_goodsarray</name>
  		<replaceName>GoodsArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goodsarray</name>
  		<replaceName>GoodsArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>goodsarray_size</name>
  		<replaceName>GoodsArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureGoods& goodsarray(int index) const;
  inline ::pb::TAdventureGoods* mutable_goodsarray(int index);
  inline ::pb::TAdventureGoods* add_goodsarray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureGoods >&
      goodsarray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureGoods >*
      mutable_goodsarray();

  // @@protoc_insertion_point(class_scope:pb.TAdventureBusinessMan)
 private:
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureGoods > goodsarray_;
  ::google::protobuf::int32 posy_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureBusinessMan* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureMonsterStatus</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureMonsterStatus : public ::google::protobuf::Message {
 public:
  TAdventureMonsterStatus();
  virtual ~TAdventureMonsterStatus();

  TAdventureMonsterStatus(const TAdventureMonsterStatus& from);

  inline TAdventureMonsterStatus& operator=(const TAdventureMonsterStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureMonsterStatus& default_instance();

  void Swap(TAdventureMonsterStatus* other);

  // implements Message ----------------------------------------------

  TAdventureMonsterStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureMonsterStatus& from);
  void MergeFrom(const TAdventureMonsterStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MonsterPos = 1;
  inline bool has_monsterpos() const;
  inline void clear_monsterpos();
  static const int kMonsterPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMonsterStatus</name>
  	<Function>
  		<name>monsterpos</name>
  		<replaceName>MonsterPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterpos</name>
  		<replaceName>MonsterPos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterpos</name>
  		<replaceName>MonsterPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterpos() const;
  inline void set_monsterpos(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 2;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMonsterStatus</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional uint64 CurRage = 3;
  inline bool has_currage() const;
  inline void clear_currage();
  static const int kCurRageFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMonsterStatus</name>
  	<Function>
  		<name>currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currage</name>
  		<replaceName>CurRage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 currage() const;
  inline void set_currage(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 4;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMonsterStatus</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureMonsterStatus)
 private:
  inline void set_has_monsterpos();
  inline void clear_has_monsterpos();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_currage();
  inline void clear_has_currage();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::uint64 currage_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint32 monsterpos_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureMonsterStatus* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureMonsterInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureMonsterInfo : public ::google::protobuf::Message {
 public:
  TAdventureMonsterInfo();
  virtual ~TAdventureMonsterInfo();

  TAdventureMonsterInfo(const TAdventureMonsterInfo& from);

  inline TAdventureMonsterInfo& operator=(const TAdventureMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureMonsterInfo& default_instance();

  void Swap(TAdventureMonsterInfo* other);

  // implements Message ----------------------------------------------

  TAdventureMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureMonsterInfo& from);
  void MergeFrom(const TAdventureMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LayerIndex = 1;
  inline bool has_layerindex() const;
  inline void clear_layerindex();
  static const int kLayerIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMonsterInfo</name>
  	<Function>
  		<name>layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layerindex</name>
  		<replaceName>LayerIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layerindex() const;
  inline void set_layerindex(::google::protobuf::uint32 value);

  // optional int32 PosX = 2;
  inline bool has_posx() const;
  inline void clear_posx();
  static const int kPosXFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMonsterInfo</name>
  	<Function>
  		<name>posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posx</name>
  		<replaceName>PosX</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posx() const;
  inline void set_posx(::google::protobuf::int32 value);

  // optional int32 PosY = 3;
  inline bool has_posy() const;
  inline void clear_posy();
  static const int kPosYFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMonsterInfo</name>
  	<Function>
  		<name>posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_posy</name>
  		<replaceName>PosY</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 posy() const;
  inline void set_posy(::google::protobuf::int32 value);

  // optional uint32 BattleinfoId = 4;
  inline bool has_battleinfoid() const;
  inline void clear_battleinfoid();
  static const int kBattleinfoIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMonsterInfo</name>
  	<Function>
  		<name>battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleinfoid() const;
  inline void set_battleinfoid(::google::protobuf::uint32 value);

  // optional uint64 CurTotalHp = 5;
  inline bool has_curtotalhp() const;
  inline void clear_curtotalhp();
  static const int kCurTotalHpFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMonsterInfo</name>
  	<Function>
  		<name>curtotalhp</name>
  		<replaceName>CurTotalHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curtotalhp</name>
  		<replaceName>CurTotalHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curtotalhp</name>
  		<replaceName>CurTotalHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curtotalhp() const;
  inline void set_curtotalhp(::google::protobuf::uint64 value);

  // optional uint64 MaxTotalHp = 6;
  inline bool has_maxtotalhp() const;
  inline void clear_maxtotalhp();
  static const int kMaxTotalHpFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAdventureMonsterInfo</name>
  	<Function>
  		<name>maxtotalhp</name>
  		<replaceName>MaxTotalHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxtotalhp</name>
  		<replaceName>MaxTotalHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxtotalhp</name>
  		<replaceName>MaxTotalHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxtotalhp() const;
  inline void set_maxtotalhp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureMonsterInfo)
 private:
  inline void set_has_layerindex();
  inline void clear_has_layerindex();
  inline void set_has_posx();
  inline void clear_has_posx();
  inline void set_has_posy();
  inline void clear_has_posy();
  inline void set_has_battleinfoid();
  inline void clear_has_battleinfoid();
  inline void set_has_curtotalhp();
  inline void clear_has_curtotalhp();
  inline void set_has_maxtotalhp();
  inline void clear_has_maxtotalhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 layerindex_;
  ::google::protobuf::int32 posx_;
  ::google::protobuf::int32 posy_;
  ::google::protobuf::uint32 battleinfoid_;
  ::google::protobuf::uint64 curtotalhp_;
  ::google::protobuf::uint64 maxtotalhp_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureMonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>InteractItemInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class InteractItemInfo : public ::google::protobuf::Message {
 public:
  InteractItemInfo();
  virtual ~InteractItemInfo();

  InteractItemInfo(const InteractItemInfo& from);

  inline InteractItemInfo& operator=(const InteractItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InteractItemInfo& default_instance();

  void Swap(InteractItemInfo* other);

  // implements Message ----------------------------------------------

  InteractItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InteractItemInfo& from);
  void MergeFrom(const InteractItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 InteractItemId = 1;
  inline bool has_interactitemid() const;
  inline void clear_interactitemid();
  static const int kInteractItemIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>InteractItemInfo</name>
  	<Function>
  		<name>interactitemid</name>
  		<replaceName>InteractItemId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_interactitemid</name>
  		<replaceName>InteractItemId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_interactitemid</name>
  		<replaceName>InteractItemId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 interactitemid() const;
  inline void set_interactitemid(::google::protobuf::uint32 value);

  // optional bool ItemInAct = 2;
  inline bool has_iteminact() const;
  inline void clear_iteminact();
  static const int kItemInActFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>InteractItemInfo</name>
  	<Function>
  		<name>iteminact</name>
  		<replaceName>ItemInAct</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iteminact</name>
  		<replaceName>ItemInAct</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iteminact</name>
  		<replaceName>ItemInAct</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iteminact() const;
  inline void set_iteminact(bool value);

  // @@protoc_insertion_point(class_scope:pb.InteractItemInfo)
 private:
  inline void set_has_interactitemid();
  inline void clear_has_interactitemid();
  inline void set_has_iteminact();
  inline void clear_has_iteminact();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 interactitemid_;
  bool iteminact_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static InteractItemInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureEventRet</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureEventRet : public ::google::protobuf::Message {
 public:
  TAdventureEventRet();
  virtual ~TAdventureEventRet();

  TAdventureEventRet(const TAdventureEventRet& from);

  inline TAdventureEventRet& operator=(const TAdventureEventRet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureEventRet& default_instance();

  void Swap(TAdventureEventRet* other);

  // implements Message ----------------------------------------------

  TAdventureEventRet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureEventRet& from);
  void MergeFrom(const TAdventureEventRet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TalkId = 1;
  inline bool has_talkid() const;
  inline void clear_talkid();
  static const int kTalkIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventRet</name>
  	<Function>
  		<name>talkid</name>
  		<replaceName>TalkId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_talkid</name>
  		<replaceName>TalkId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_talkid</name>
  		<replaceName>TalkId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 talkid() const;
  inline void set_talkid(::google::protobuf::uint32 value);

  // optional .pb.AdventureBehavior Behavior = 2;
  inline bool has_behavior() const;
  inline void clear_behavior();
  static const int kBehaviorFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventRet</name>
  	<Function>
  		<name>behavior</name>
  		<replaceName>Behavior</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_behavior</name>
  		<replaceName>Behavior</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_behavior</name>
  		<replaceName>Behavior</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_behavior</name>
  		<replaceName>Behavior</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AdventureBehavior& behavior() const;
  inline ::pb::AdventureBehavior* mutable_behavior();
  inline ::pb::AdventureBehavior* release_behavior();
  inline void set_allocated_behavior(::pb::AdventureBehavior* behavior);

  // repeated .pb.InteractItemInfo InteractItemArr = 3;
  inline int interactitemarr_size() const;
  inline void clear_interactitemarr();
  static const int kInteractItemArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventRet</name>
  	<Function>
  		<name>interactitemarr</name>
  		<replaceName>InteractItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_interactitemarr</name>
  		<replaceName>InteractItemArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_interactitemarr</name>
  		<replaceName>InteractItemArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_interactitemarr</name>
  		<replaceName>InteractItemArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>interactitemarr_size</name>
  		<replaceName>InteractItemArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::InteractItemInfo& interactitemarr(int index) const;
  inline ::pb::InteractItemInfo* mutable_interactitemarr(int index);
  inline ::pb::InteractItemInfo* add_interactitemarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::InteractItemInfo >&
      interactitemarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::InteractItemInfo >*
      mutable_interactitemarr();

  // optional uint32 AnswerId = 4;
  inline bool has_answerid() const;
  inline void clear_answerid();
  static const int kAnswerIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventRet</name>
  	<Function>
  		<name>answerid</name>
  		<replaceName>AnswerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_answerid</name>
  		<replaceName>AnswerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_answerid</name>
  		<replaceName>AnswerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 answerid() const;
  inline void set_answerid(::google::protobuf::uint32 value);

  // optional uint64 AnswerStartTime = 5;
  inline bool has_answerstarttime() const;
  inline void clear_answerstarttime();
  static const int kAnswerStartTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventRet</name>
  	<Function>
  		<name>answerstarttime</name>
  		<replaceName>AnswerStartTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_answerstarttime</name>
  		<replaceName>AnswerStartTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_answerstarttime</name>
  		<replaceName>AnswerStartTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 answerstarttime() const;
  inline void set_answerstarttime(::google::protobuf::uint64 value);

  // optional uint32 BattleinfoId = 6;
  inline bool has_battleinfoid() const;
  inline void clear_battleinfoid();
  static const int kBattleinfoIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventRet</name>
  	<Function>
  		<name>battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleinfoid</name>
  		<replaceName>BattleinfoId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleinfoid() const;
  inline void set_battleinfoid(::google::protobuf::uint32 value);

  // optional uint32 BossLevel = 7;
  inline bool has_bosslevel() const;
  inline void clear_bosslevel();
  static const int kBossLevelFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventRet</name>
  	<Function>
  		<name>bosslevel</name>
  		<replaceName>BossLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bosslevel</name>
  		<replaceName>BossLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bosslevel</name>
  		<replaceName>BossLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bosslevel() const;
  inline void set_bosslevel(::google::protobuf::uint32 value);

  // optional uint64 ArmyFightForce = 8;
  inline bool has_armyfightforce() const;
  inline void clear_armyfightforce();
  static const int kArmyFightForceFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TAdventureEventRet</name>
  	<Function>
  		<name>armyfightforce</name>
  		<replaceName>ArmyFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyfightforce</name>
  		<replaceName>ArmyFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyfightforce</name>
  		<replaceName>ArmyFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 armyfightforce() const;
  inline void set_armyfightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureEventRet)
 private:
  inline void set_has_talkid();
  inline void clear_has_talkid();
  inline void set_has_behavior();
  inline void clear_has_behavior();
  inline void set_has_answerid();
  inline void clear_has_answerid();
  inline void set_has_answerstarttime();
  inline void clear_has_answerstarttime();
  inline void set_has_battleinfoid();
  inline void clear_has_battleinfoid();
  inline void set_has_bosslevel();
  inline void clear_has_bosslevel();
  inline void set_has_armyfightforce();
  inline void clear_has_armyfightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::AdventureBehavior* behavior_;
  ::google::protobuf::uint32 talkid_;
  ::google::protobuf::uint32 answerid_;
  ::google::protobuf::RepeatedPtrField< ::pb::InteractItemInfo > interactitemarr_;
  ::google::protobuf::uint64 answerstarttime_;
  ::google::protobuf::uint32 battleinfoid_;
  ::google::protobuf::uint32 bosslevel_;
  ::google::protobuf::uint64 armyfightforce_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureEventRet* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureAttr</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureAttr : public ::google::protobuf::Message {
 public:
  TAdventureAttr();
  virtual ~TAdventureAttr();

  TAdventureAttr(const TAdventureAttr& from);

  inline TAdventureAttr& operator=(const TAdventureAttr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureAttr& default_instance();

  void Swap(TAdventureAttr* other);

  // implements Message ----------------------------------------------

  TAdventureAttr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureAttr& from);
  void MergeFrom(const TAdventureAttr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 AttrId = 1;
  inline bool has_attrid() const;
  inline void clear_attrid();
  static const int kAttrIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAttr</name>
  	<Function>
  		<name>attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrid</name>
  		<replaceName>AttrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attrid() const;
  inline void set_attrid(::google::protobuf::uint32 value);

  // optional uint32 AttrNum = 2;
  inline bool has_attrnum() const;
  inline void clear_attrnum();
  static const int kAttrNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureAttr</name>
  	<Function>
  		<name>attrnum</name>
  		<replaceName>AttrNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attrnum</name>
  		<replaceName>AttrNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrnum</name>
  		<replaceName>AttrNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attrnum() const;
  inline void set_attrnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureAttr)
 private:
  inline void set_has_attrid();
  inline void clear_has_attrid();
  inline void set_has_attrnum();
  inline void clear_has_attrnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 attrid_;
  ::google::protobuf::uint32 attrnum_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureAttr* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureBuff</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureBuff : public ::google::protobuf::Message {
 public:
  TAdventureBuff();
  virtual ~TAdventureBuff();

  TAdventureBuff(const TAdventureBuff& from);

  inline TAdventureBuff& operator=(const TAdventureBuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureBuff& default_instance();

  void Swap(TAdventureBuff* other);

  // implements Message ----------------------------------------------

  TAdventureBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureBuff& from);
  void MergeFrom(const TAdventureBuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BuffType = 1;
  inline bool has_bufftype() const;
  inline void clear_bufftype();
  static const int kBuffTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBuff</name>
  	<Function>
  		<name>bufftype</name>
  		<replaceName>BuffType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bufftype</name>
  		<replaceName>BuffType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bufftype</name>
  		<replaceName>BuffType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bufftype() const;
  inline void set_bufftype(::google::protobuf::uint32 value);

  // repeated .pb.TAdventureAttr AttrArr = 2;
  inline int attrarr_size() const;
  inline void clear_attrarr();
  static const int kAttrArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBuff</name>
  	<Function>
  		<name>attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attrarr</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attrarr_size</name>
  		<replaceName>AttrArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureAttr& attrarr(int index) const;
  inline ::pb::TAdventureAttr* mutable_attrarr(int index);
  inline ::pb::TAdventureAttr* add_attrarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureAttr >&
      attrarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureAttr >*
      mutable_attrarr();

  // optional uint32 Hid = 3;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBuff</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureBuff)
 private:
  inline void set_has_bufftype();
  inline void clear_has_bufftype();
  inline void set_has_hid();
  inline void clear_has_hid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureAttr > attrarr_;
  ::google::protobuf::uint32 bufftype_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureBuff* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventurePassBlock</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventurePassBlock : public ::google::protobuf::Message {
 public:
  TAdventurePassBlock();
  virtual ~TAdventurePassBlock();

  TAdventurePassBlock(const TAdventurePassBlock& from);

  inline TAdventurePassBlock& operator=(const TAdventurePassBlock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventurePassBlock& default_instance();

  void Swap(TAdventurePassBlock* other);

  // implements Message ----------------------------------------------

  TAdventurePassBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventurePassBlock& from);
  void MergeFrom(const TAdventurePassBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventurePassBlock</name>
  	<Function>
  		<name>x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_x</name>
  		<replaceName>X</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventurePassBlock</name>
  	<Function>
  		<name>y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_y</name>
  		<replaceName>Y</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional uint32 LayerIdx = 3;
  inline bool has_layeridx() const;
  inline void clear_layeridx();
  static const int kLayerIdxFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventurePassBlock</name>
  	<Function>
  		<name>layeridx</name>
  		<replaceName>LayerIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_layeridx</name>
  		<replaceName>LayerIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_layeridx</name>
  		<replaceName>LayerIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 layeridx() const;
  inline void set_layeridx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventurePassBlock)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_layeridx();
  inline void clear_has_layeridx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::uint32 layeridx_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventurePassBlock* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureGetTeamRankUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureGetTeamRankUserInfo : public ::google::protobuf::Message {
 public:
  TAdventureGetTeamRankUserInfo();
  virtual ~TAdventureGetTeamRankUserInfo();

  TAdventureGetTeamRankUserInfo(const TAdventureGetTeamRankUserInfo& from);

  inline TAdventureGetTeamRankUserInfo& operator=(const TAdventureGetTeamRankUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureGetTeamRankUserInfo& default_instance();

  void Swap(TAdventureGetTeamRankUserInfo* other);

  // implements Message ----------------------------------------------

  TAdventureGetTeamRankUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureGetTeamRankUserInfo& from);
  void MergeFrom(const TAdventureGetTeamRankUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 MemberUid = 1;
  inline bool has_memberuid() const;
  inline void clear_memberuid();
  static const int kMemberUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetTeamRankUserInfo</name>
  	<Function>
  		<name>memberuid</name>
  		<replaceName>MemberUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_memberuid</name>
  		<replaceName>MemberUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_memberuid</name>
  		<replaceName>MemberUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 memberuid() const;
  inline void set_memberuid(::google::protobuf::uint64 value);

  // optional uint64 DamageValue = 2;
  inline bool has_damagevalue() const;
  inline void clear_damagevalue();
  static const int kDamageValueFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetTeamRankUserInfo</name>
  	<Function>
  		<name>damagevalue</name>
  		<replaceName>DamageValue</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damagevalue</name>
  		<replaceName>DamageValue</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damagevalue</name>
  		<replaceName>DamageValue</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 damagevalue() const;
  inline void set_damagevalue(::google::protobuf::uint64 value);

  // optional uint32 DoEventNum = 3;
  inline bool has_doeventnum() const;
  inline void clear_doeventnum();
  static const int kDoEventNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TAdventureGetTeamRankUserInfo</name>
  	<Function>
  		<name>doeventnum</name>
  		<replaceName>DoEventNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_doeventnum</name>
  		<replaceName>DoEventNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_doeventnum</name>
  		<replaceName>DoEventNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 doeventnum() const;
  inline void set_doeventnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TAdventureGetTeamRankUserInfo)
 private:
  inline void set_has_memberuid();
  inline void clear_has_memberuid();
  inline void set_has_damagevalue();
  inline void clear_has_damagevalue();
  inline void set_has_doeventnum();
  inline void clear_has_doeventnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 memberuid_;
  ::google::protobuf::uint64 damagevalue_;
  ::google::protobuf::uint32 doeventnum_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureGetTeamRankUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TAdventureBattleMonsterInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/AdventureBase.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TAdventureBattleMonsterInfo : public ::google::protobuf::Message {
 public:
  TAdventureBattleMonsterInfo();
  virtual ~TAdventureBattleMonsterInfo();

  TAdventureBattleMonsterInfo(const TAdventureBattleMonsterInfo& from);

  inline TAdventureBattleMonsterInfo& operator=(const TAdventureBattleMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TAdventureBattleMonsterInfo& default_instance();

  void Swap(TAdventureBattleMonsterInfo* other);

  // implements Message ----------------------------------------------

  TAdventureBattleMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TAdventureBattleMonsterInfo& from);
  void MergeFrom(const TAdventureBattleMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ScreenIndex = 1;
  inline bool has_screenindex() const;
  inline void clear_screenindex();
  static const int kScreenIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBattleMonsterInfo</name>
  	<Function>
  		<name>screenindex</name>
  		<replaceName>ScreenIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_screenindex</name>
  		<replaceName>ScreenIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_screenindex</name>
  		<replaceName>ScreenIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 screenindex() const;
  inline void set_screenindex(::google::protobuf::uint32 value);

  // repeated .pb.TAdventureMonsterStatus MonsterArr = 2;
  inline int monsterarr_size() const;
  inline void clear_monsterarr();
  static const int kMonsterArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TAdventureBattleMonsterInfo</name>
  	<Function>
  		<name>monsterarr</name>
  		<replaceName>MonsterArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterarr</name>
  		<replaceName>MonsterArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterarr</name>
  		<replaceName>MonsterArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterarr</name>
  		<replaceName>MonsterArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterarr_size</name>
  		<replaceName>MonsterArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAdventureMonsterStatus& monsterarr(int index) const;
  inline ::pb::TAdventureMonsterStatus* mutable_monsterarr(int index);
  inline ::pb::TAdventureMonsterStatus* add_monsterarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterStatus >&
      monsterarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterStatus >*
      mutable_monsterarr();

  // @@protoc_insertion_point(class_scope:pb.TAdventureBattleMonsterInfo)
 private:
  inline void set_has_screenindex();
  inline void clear_has_screenindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterStatus > monsterarr_;
  ::google::protobuf::uint32 screenindex_;
  friend void  protobuf_AddDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_AssignDesc_net_2fAdventureBase_2eproto();
  friend void protobuf_ShutdownFile_net_2fAdventureBase_2eproto();

  void InitAsDefaultInstance();
  static TAdventureBattleMonsterInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// TAdventureUserSimpleInfo

// optional uint64 Uid = 1;
inline bool TAdventureUserSimpleInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureUserSimpleInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureUserSimpleInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TAdventureUserSimpleInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.Uid)
  return uid_;
}
inline void TAdventureUserSimpleInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.Uid)
}

// optional string ServerId = 2;
inline bool TAdventureUserSimpleInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureUserSimpleInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureUserSimpleInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TAdventureUserSimpleInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.ServerId)
  return *serverid_;
}
inline void TAdventureUserSimpleInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.ServerId)
}
inline void TAdventureUserSimpleInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAdventureUserSimpleInfo.ServerId)
}
inline void TAdventureUserSimpleInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAdventureUserSimpleInfo.ServerId)
}
inline ::std::string* TAdventureUserSimpleInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAdventureUserSimpleInfo.ServerId)
  return serverid_;
}
inline ::std::string* TAdventureUserSimpleInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAdventureUserSimpleInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureUserSimpleInfo.ServerId)
}

// optional string Uname = 3;
inline bool TAdventureUserSimpleInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureUserSimpleInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureUserSimpleInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TAdventureUserSimpleInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.Uname)
  return *uname_;
}
inline void TAdventureUserSimpleInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.Uname)
}
inline void TAdventureUserSimpleInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAdventureUserSimpleInfo.Uname)
}
inline void TAdventureUserSimpleInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAdventureUserSimpleInfo.Uname)
}
inline ::std::string* TAdventureUserSimpleInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAdventureUserSimpleInfo.Uname)
  return uname_;
}
inline ::std::string* TAdventureUserSimpleInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAdventureUserSimpleInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureUserSimpleInfo.Uname)
}

// optional uint32 Htid = 4;
inline bool TAdventureUserSimpleInfo::has_htid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_htid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureUserSimpleInfo::clear_has_htid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureUserSimpleInfo::clear_htid() {
  htid_ = 0u;
  clear_has_htid();
}
inline ::google::protobuf::uint32 TAdventureUserSimpleInfo::htid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.Htid)
  return htid_;
}
inline void TAdventureUserSimpleInfo::set_htid(::google::protobuf::uint32 value) {
  set_has_htid();
  htid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.Htid)
}

// optional uint32 Level = 5;
inline bool TAdventureUserSimpleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureUserSimpleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureUserSimpleInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 TAdventureUserSimpleInfo::level() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.Level)
  return level_;
}
inline void TAdventureUserSimpleInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.Level)
}

// optional uint32 VipLevel = 6;
inline bool TAdventureUserSimpleInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAdventureUserSimpleInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAdventureUserSimpleInfo::clear_viplevel() {
  viplevel_ = 0u;
  clear_has_viplevel();
}
inline ::google::protobuf::uint32 TAdventureUserSimpleInfo::viplevel() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.VipLevel)
  return viplevel_;
}
inline void TAdventureUserSimpleInfo::set_viplevel(::google::protobuf::uint32 value) {
  set_has_viplevel();
  viplevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.VipLevel)
}

// optional uint64 FightForce = 7;
inline bool TAdventureUserSimpleInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TAdventureUserSimpleInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TAdventureUserSimpleInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TAdventureUserSimpleInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.FightForce)
  return fightforce_;
}
inline void TAdventureUserSimpleInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.FightForce)
}

// optional uint32 PlayerImageFrameTid = 8;
inline bool TAdventureUserSimpleInfo::has_playerimageframetid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_playerimageframetid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TAdventureUserSimpleInfo::clear_has_playerimageframetid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TAdventureUserSimpleInfo::clear_playerimageframetid() {
  playerimageframetid_ = 0u;
  clear_has_playerimageframetid();
}
inline ::google::protobuf::uint32 TAdventureUserSimpleInfo::playerimageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.PlayerImageFrameTid)
  return playerimageframetid_;
}
inline void TAdventureUserSimpleInfo::set_playerimageframetid(::google::protobuf::uint32 value) {
  set_has_playerimageframetid();
  playerimageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.PlayerImageFrameTid)
}

// optional string GuildName = 9;
inline bool TAdventureUserSimpleInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TAdventureUserSimpleInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TAdventureUserSimpleInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& TAdventureUserSimpleInfo::guildname() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.GuildName)
  return *guildname_;
}
inline void TAdventureUserSimpleInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.GuildName)
}
inline void TAdventureUserSimpleInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TAdventureUserSimpleInfo.GuildName)
}
inline void TAdventureUserSimpleInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TAdventureUserSimpleInfo.GuildName)
}
inline ::std::string* TAdventureUserSimpleInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TAdventureUserSimpleInfo.GuildName)
  return guildname_;
}
inline ::std::string* TAdventureUserSimpleInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TAdventureUserSimpleInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureUserSimpleInfo.GuildName)
}

// optional uint32 CurMount = 10;
inline bool TAdventureUserSimpleInfo::has_curmount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_curmount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TAdventureUserSimpleInfo::clear_has_curmount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TAdventureUserSimpleInfo::clear_curmount() {
  curmount_ = 0u;
  clear_has_curmount();
}
inline ::google::protobuf::uint32 TAdventureUserSimpleInfo::curmount() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.CurMount)
  return curmount_;
}
inline void TAdventureUserSimpleInfo::set_curmount(::google::protobuf::uint32 value) {
  set_has_curmount();
  curmount_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.CurMount)
}

// optional uint32 MasterHtid = 11;
inline bool TAdventureUserSimpleInfo::has_masterhtid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_masterhtid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TAdventureUserSimpleInfo::clear_has_masterhtid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TAdventureUserSimpleInfo::clear_masterhtid() {
  masterhtid_ = 0u;
  clear_has_masterhtid();
}
inline ::google::protobuf::uint32 TAdventureUserSimpleInfo::masterhtid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.MasterHtid)
  return masterhtid_;
}
inline void TAdventureUserSimpleInfo::set_masterhtid(::google::protobuf::uint32 value) {
  set_has_masterhtid();
  masterhtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.MasterHtid)
}

// optional uint64 GuildId = 12;
inline bool TAdventureUserSimpleInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TAdventureUserSimpleInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TAdventureUserSimpleInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TAdventureUserSimpleInfo::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.GuildId)
  return guildid_;
}
inline void TAdventureUserSimpleInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.GuildId)
}

// optional uint32 Title = 13;
inline bool TAdventureUserSimpleInfo::has_title() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TAdventureUserSimpleInfo::set_has_title() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TAdventureUserSimpleInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TAdventureUserSimpleInfo::clear_title() {
  title_ = 0u;
  clear_has_title();
}
inline ::google::protobuf::uint32 TAdventureUserSimpleInfo::title() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureUserSimpleInfo.Title)
  return title_;
}
inline void TAdventureUserSimpleInfo::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureUserSimpleInfo.Title)
}

// -------------------------------------------------------------------

// TUserInfoWithPos

// optional uint64 Uid = 1;
inline bool TUserInfoWithPos::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUserInfoWithPos::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUserInfoWithPos::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUserInfoWithPos::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TUserInfoWithPos::uid() const {
  // @@protoc_insertion_point(field_get:pb.TUserInfoWithPos.Uid)
  return uid_;
}
inline void TUserInfoWithPos::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserInfoWithPos.Uid)
}

// optional uint32 LayerIndex = 2;
inline bool TUserInfoWithPos::has_layerindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUserInfoWithPos::set_has_layerindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUserInfoWithPos::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUserInfoWithPos::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TUserInfoWithPos::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TUserInfoWithPos.LayerIndex)
  return layerindex_;
}
inline void TUserInfoWithPos::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserInfoWithPos.LayerIndex)
}

// optional int32 PosX = 3;
inline bool TUserInfoWithPos::has_posx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUserInfoWithPos::set_has_posx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUserInfoWithPos::clear_has_posx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUserInfoWithPos::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TUserInfoWithPos::posx() const {
  // @@protoc_insertion_point(field_get:pb.TUserInfoWithPos.PosX)
  return posx_;
}
inline void TUserInfoWithPos::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserInfoWithPos.PosX)
}

// optional int32 PosY = 4;
inline bool TUserInfoWithPos::has_posy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUserInfoWithPos::set_has_posy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUserInfoWithPos::clear_has_posy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUserInfoWithPos::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TUserInfoWithPos::posy() const {
  // @@protoc_insertion_point(field_get:pb.TUserInfoWithPos.PosY)
  return posy_;
}
inline void TUserInfoWithPos::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserInfoWithPos.PosY)
}

// optional .pb.ETeamMode TeamMode = 5;
inline bool TUserInfoWithPos::has_teammode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUserInfoWithPos::set_has_teammode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUserInfoWithPos::clear_has_teammode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUserInfoWithPos::clear_teammode() {
  teammode_ = 0;
  clear_has_teammode();
}
inline ::pb::ETeamMode TUserInfoWithPos::teammode() const {
  // @@protoc_insertion_point(field_get:pb.TUserInfoWithPos.TeamMode)
  return static_cast< ::pb::ETeamMode >(teammode_);
}
inline void TUserInfoWithPos::set_teammode(::pb::ETeamMode value) {
  assert(::pb::ETeamMode_IsValid(value));
  set_has_teammode();
  teammode_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserInfoWithPos.TeamMode)
}

// optional .pb.EMapUserStatus UserStatus = 6;
inline bool TUserInfoWithPos::has_userstatus() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUserInfoWithPos::set_has_userstatus() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUserInfoWithPos::clear_has_userstatus() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUserInfoWithPos::clear_userstatus() {
  userstatus_ = 2;
  clear_has_userstatus();
}
inline ::pb::EMapUserStatus TUserInfoWithPos::userstatus() const {
  // @@protoc_insertion_point(field_get:pb.TUserInfoWithPos.UserStatus)
  return static_cast< ::pb::EMapUserStatus >(userstatus_);
}
inline void TUserInfoWithPos::set_userstatus(::pb::EMapUserStatus value) {
  assert(::pb::EMapUserStatus_IsValid(value));
  set_has_userstatus();
  userstatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserInfoWithPos.UserStatus)
}

// optional int32 BattleObjectIndex = 7;
inline bool TUserInfoWithPos::has_battleobjectindex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TUserInfoWithPos::set_has_battleobjectindex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TUserInfoWithPos::clear_has_battleobjectindex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TUserInfoWithPos::clear_battleobjectindex() {
  battleobjectindex_ = 0;
  clear_has_battleobjectindex();
}
inline ::google::protobuf::int32 TUserInfoWithPos::battleobjectindex() const {
  // @@protoc_insertion_point(field_get:pb.TUserInfoWithPos.BattleObjectIndex)
  return battleobjectindex_;
}
inline void TUserInfoWithPos::set_battleobjectindex(::google::protobuf::int32 value) {
  set_has_battleobjectindex();
  battleobjectindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TUserInfoWithPos.BattleObjectIndex)
}

// -------------------------------------------------------------------

// TAdventureTeamRecord

// optional .pb.EAdvantureRecordType RecordType = 1;
inline bool TAdventureTeamRecord::has_recordtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTeamRecord::set_has_recordtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTeamRecord::clear_has_recordtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTeamRecord::clear_recordtype() {
  recordtype_ = 1;
  clear_has_recordtype();
}
inline ::pb::EAdvantureRecordType TAdventureTeamRecord::recordtype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamRecord.RecordType)
  return static_cast< ::pb::EAdvantureRecordType >(recordtype_);
}
inline void TAdventureTeamRecord::set_recordtype(::pb::EAdvantureRecordType value) {
  assert(::pb::EAdvantureRecordType_IsValid(value));
  set_has_recordtype();
  recordtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamRecord.RecordType)
}

// repeated uint64 ParamArr = 2;
inline int TAdventureTeamRecord::paramarr_size() const {
  return paramarr_.size();
}
inline void TAdventureTeamRecord::clear_paramarr() {
  paramarr_.Clear();
}
inline ::google::protobuf::uint64 TAdventureTeamRecord::paramarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamRecord.ParamArr)
  return paramarr_.Get(index);
}
inline void TAdventureTeamRecord::set_paramarr(int index, ::google::protobuf::uint64 value) {
  paramarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamRecord.ParamArr)
}
inline void TAdventureTeamRecord::add_paramarr(::google::protobuf::uint64 value) {
  paramarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TAdventureTeamRecord.ParamArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TAdventureTeamRecord::paramarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTeamRecord.ParamArr)
  return paramarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TAdventureTeamRecord::mutable_paramarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTeamRecord.ParamArr)
  return &paramarr_;
}

// repeated .pb.TCommonReward RewardArr = 3;
inline int TAdventureTeamRecord::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TAdventureTeamRecord::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TAdventureTeamRecord::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamRecord.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TAdventureTeamRecord::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTeamRecord.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TAdventureTeamRecord::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureTeamRecord.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TAdventureTeamRecord::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureTeamRecord.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TAdventureTeamRecord::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureTeamRecord.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TAdventureMapStatus

// optional uint64 MapId = 1;
inline bool TAdventureMapStatus::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureMapStatus::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureMapStatus::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureMapStatus::clear_mapid() {
  mapid_ = GOOGLE_ULONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::uint64 TAdventureMapStatus::mapid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMapStatus.MapId)
  return mapid_;
}
inline void TAdventureMapStatus::set_mapid(::google::protobuf::uint64 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMapStatus.MapId)
}

// optional uint32 MapEntryId = 2;
inline bool TAdventureMapStatus::has_mapentryid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureMapStatus::set_has_mapentryid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureMapStatus::clear_has_mapentryid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureMapStatus::clear_mapentryid() {
  mapentryid_ = 0u;
  clear_has_mapentryid();
}
inline ::google::protobuf::uint32 TAdventureMapStatus::mapentryid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMapStatus.MapEntryId)
  return mapentryid_;
}
inline void TAdventureMapStatus::set_mapentryid(::google::protobuf::uint32 value) {
  set_has_mapentryid();
  mapentryid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMapStatus.MapEntryId)
}

// optional .pb.EMapStatus Status = 3;
inline bool TAdventureMapStatus::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureMapStatus::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureMapStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureMapStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pb::EMapStatus TAdventureMapStatus::status() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMapStatus.Status)
  return static_cast< ::pb::EMapStatus >(status_);
}
inline void TAdventureMapStatus::set_status(::pb::EMapStatus value) {
  assert(::pb::EMapStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMapStatus.Status)
}

// -------------------------------------------------------------------

// TAdventureMapList

// repeated .pb.TAdventureMapStatus MapArray = 1;
inline int TAdventureMapList::maparray_size() const {
  return maparray_.size();
}
inline void TAdventureMapList::clear_maparray() {
  maparray_.Clear();
}
inline const ::pb::TAdventureMapStatus& TAdventureMapList::maparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMapList.MapArray)
  return maparray_.Get(index);
}
inline ::pb::TAdventureMapStatus* TAdventureMapList::mutable_maparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureMapList.MapArray)
  return maparray_.Mutable(index);
}
inline ::pb::TAdventureMapStatus* TAdventureMapList::add_maparray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureMapList.MapArray)
  return maparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMapStatus >&
TAdventureMapList::maparray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureMapList.MapArray)
  return maparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMapStatus >*
TAdventureMapList::mutable_maparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureMapList.MapArray)
  return &maparray_;
}

// -------------------------------------------------------------------

// TAdventLevelExpNum

// optional uint32 AdventureLevelId = 1;
inline bool TAdventLevelExpNum::has_adventurelevelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventLevelExpNum::set_has_adventurelevelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventLevelExpNum::clear_has_adventurelevelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventLevelExpNum::clear_adventurelevelid() {
  adventurelevelid_ = 0u;
  clear_has_adventurelevelid();
}
inline ::google::protobuf::uint32 TAdventLevelExpNum::adventurelevelid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventLevelExpNum.AdventureLevelId)
  return adventurelevelid_;
}
inline void TAdventLevelExpNum::set_adventurelevelid(::google::protobuf::uint32 value) {
  set_has_adventurelevelid();
  adventurelevelid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventLevelExpNum.AdventureLevelId)
}

// optional uint32 ExpNum = 2;
inline bool TAdventLevelExpNum::has_expnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventLevelExpNum::set_has_expnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventLevelExpNum::clear_has_expnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventLevelExpNum::clear_expnum() {
  expnum_ = 0u;
  clear_has_expnum();
}
inline ::google::protobuf::uint32 TAdventLevelExpNum::expnum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventLevelExpNum.ExpNum)
  return expnum_;
}
inline void TAdventLevelExpNum::set_expnum(::google::protobuf::uint32 value) {
  set_has_expnum();
  expnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventLevelExpNum.ExpNum)
}

// -------------------------------------------------------------------

// TAdventureTeamExtraReward

// optional uint64 RewardUid = 1;
inline bool TAdventureTeamExtraReward::has_rewarduid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureTeamExtraReward::set_has_rewarduid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureTeamExtraReward::clear_has_rewarduid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureTeamExtraReward::clear_rewarduid() {
  rewarduid_ = GOOGLE_ULONGLONG(0);
  clear_has_rewarduid();
}
inline ::google::protobuf::uint64 TAdventureTeamExtraReward::rewarduid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamExtraReward.RewardUid)
  return rewarduid_;
}
inline void TAdventureTeamExtraReward::set_rewarduid(::google::protobuf::uint64 value) {
  set_has_rewarduid();
  rewarduid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureTeamExtraReward.RewardUid)
}

// optional .pb.TCommonReward RewardInfo = 2;
inline bool TAdventureTeamExtraReward::has_rewardinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureTeamExtraReward::set_has_rewardinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureTeamExtraReward::clear_has_rewardinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureTeamExtraReward::clear_rewardinfo() {
  if (rewardinfo_ != NULL) rewardinfo_->::pb::TCommonReward::Clear();
  clear_has_rewardinfo();
}
inline const ::pb::TCommonReward& TAdventureTeamExtraReward::rewardinfo() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureTeamExtraReward.RewardInfo)
  return rewardinfo_ != NULL ? *rewardinfo_ : *default_instance_->rewardinfo_;
}
inline ::pb::TCommonReward* TAdventureTeamExtraReward::mutable_rewardinfo() {
  set_has_rewardinfo();
  if (rewardinfo_ == NULL) rewardinfo_ = new ::pb::TCommonReward;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureTeamExtraReward.RewardInfo)
  return rewardinfo_;
}
inline ::pb::TCommonReward* TAdventureTeamExtraReward::release_rewardinfo() {
  clear_has_rewardinfo();
  ::pb::TCommonReward* temp = rewardinfo_;
  rewardinfo_ = NULL;
  return temp;
}
inline void TAdventureTeamExtraReward::set_allocated_rewardinfo(::pb::TCommonReward* rewardinfo) {
  delete rewardinfo_;
  rewardinfo_ = rewardinfo;
  if (rewardinfo) {
    set_has_rewardinfo();
  } else {
    clear_has_rewardinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureTeamExtraReward.RewardInfo)
}

// -------------------------------------------------------------------

// TAdventureGoods

// optional uint32 GoodsId = 1;
inline bool TAdventureGoods::has_goodsid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureGoods::set_has_goodsid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureGoods::clear_has_goodsid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureGoods::clear_goodsid() {
  goodsid_ = 0u;
  clear_has_goodsid();
}
inline ::google::protobuf::uint32 TAdventureGoods::goodsid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGoods.GoodsId)
  return goodsid_;
}
inline void TAdventureGoods::set_goodsid(::google::protobuf::uint32 value) {
  set_has_goodsid();
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGoods.GoodsId)
}

// optional uint32 BoughtNum = 2;
inline bool TAdventureGoods::has_boughtnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureGoods::set_has_boughtnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureGoods::clear_has_boughtnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureGoods::clear_boughtnum() {
  boughtnum_ = 0u;
  clear_has_boughtnum();
}
inline ::google::protobuf::uint32 TAdventureGoods::boughtnum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGoods.BoughtNum)
  return boughtnum_;
}
inline void TAdventureGoods::set_boughtnum(::google::protobuf::uint32 value) {
  set_has_boughtnum();
  boughtnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGoods.BoughtNum)
}

// -------------------------------------------------------------------

// TAdventureBusinessMan

// optional uint32 LayerIndex = 1;
inline bool TAdventureBusinessMan::has_layerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureBusinessMan::set_has_layerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureBusinessMan::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureBusinessMan::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureBusinessMan::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBusinessMan.LayerIndex)
  return layerindex_;
}
inline void TAdventureBusinessMan::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBusinessMan.LayerIndex)
}

// optional int32 PosX = 2;
inline bool TAdventureBusinessMan::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureBusinessMan::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureBusinessMan::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureBusinessMan::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TAdventureBusinessMan::posx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBusinessMan.PosX)
  return posx_;
}
inline void TAdventureBusinessMan::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBusinessMan.PosX)
}

// optional int32 PosY = 3;
inline bool TAdventureBusinessMan::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureBusinessMan::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureBusinessMan::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureBusinessMan::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TAdventureBusinessMan::posy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBusinessMan.PosY)
  return posy_;
}
inline void TAdventureBusinessMan::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBusinessMan.PosY)
}

// repeated .pb.TAdventureGoods GoodsArray = 4;
inline int TAdventureBusinessMan::goodsarray_size() const {
  return goodsarray_.size();
}
inline void TAdventureBusinessMan::clear_goodsarray() {
  goodsarray_.Clear();
}
inline const ::pb::TAdventureGoods& TAdventureBusinessMan::goodsarray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBusinessMan.GoodsArray)
  return goodsarray_.Get(index);
}
inline ::pb::TAdventureGoods* TAdventureBusinessMan::mutable_goodsarray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureBusinessMan.GoodsArray)
  return goodsarray_.Mutable(index);
}
inline ::pb::TAdventureGoods* TAdventureBusinessMan::add_goodsarray() {
  // @@protoc_insertion_point(field_add:pb.TAdventureBusinessMan.GoodsArray)
  return goodsarray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureGoods >&
TAdventureBusinessMan::goodsarray() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureBusinessMan.GoodsArray)
  return goodsarray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureGoods >*
TAdventureBusinessMan::mutable_goodsarray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureBusinessMan.GoodsArray)
  return &goodsarray_;
}

// -------------------------------------------------------------------

// TAdventureMonsterStatus

// optional uint32 MonsterPos = 1;
inline bool TAdventureMonsterStatus::has_monsterpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureMonsterStatus::set_has_monsterpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureMonsterStatus::clear_has_monsterpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureMonsterStatus::clear_monsterpos() {
  monsterpos_ = 0u;
  clear_has_monsterpos();
}
inline ::google::protobuf::uint32 TAdventureMonsterStatus::monsterpos() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMonsterStatus.MonsterPos)
  return monsterpos_;
}
inline void TAdventureMonsterStatus::set_monsterpos(::google::protobuf::uint32 value) {
  set_has_monsterpos();
  monsterpos_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMonsterStatus.MonsterPos)
}

// optional uint64 CurHp = 2;
inline bool TAdventureMonsterStatus::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureMonsterStatus::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureMonsterStatus::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureMonsterStatus::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TAdventureMonsterStatus::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMonsterStatus.CurHp)
  return curhp_;
}
inline void TAdventureMonsterStatus::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMonsterStatus.CurHp)
}

// optional uint64 CurRage = 3;
inline bool TAdventureMonsterStatus::has_currage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureMonsterStatus::set_has_currage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureMonsterStatus::clear_has_currage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureMonsterStatus::clear_currage() {
  currage_ = GOOGLE_ULONGLONG(0);
  clear_has_currage();
}
inline ::google::protobuf::uint64 TAdventureMonsterStatus::currage() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMonsterStatus.CurRage)
  return currage_;
}
inline void TAdventureMonsterStatus::set_currage(::google::protobuf::uint64 value) {
  set_has_currage();
  currage_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMonsterStatus.CurRage)
}

// optional uint64 MaxHp = 4;
inline bool TAdventureMonsterStatus::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureMonsterStatus::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureMonsterStatus::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureMonsterStatus::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TAdventureMonsterStatus::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMonsterStatus.MaxHp)
  return maxhp_;
}
inline void TAdventureMonsterStatus::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMonsterStatus.MaxHp)
}

// -------------------------------------------------------------------

// TAdventureMonsterInfo

// optional uint32 LayerIndex = 1;
inline bool TAdventureMonsterInfo::has_layerindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureMonsterInfo::set_has_layerindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureMonsterInfo::clear_has_layerindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureMonsterInfo::clear_layerindex() {
  layerindex_ = 0u;
  clear_has_layerindex();
}
inline ::google::protobuf::uint32 TAdventureMonsterInfo::layerindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMonsterInfo.LayerIndex)
  return layerindex_;
}
inline void TAdventureMonsterInfo::set_layerindex(::google::protobuf::uint32 value) {
  set_has_layerindex();
  layerindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMonsterInfo.LayerIndex)
}

// optional int32 PosX = 2;
inline bool TAdventureMonsterInfo::has_posx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureMonsterInfo::set_has_posx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureMonsterInfo::clear_has_posx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureMonsterInfo::clear_posx() {
  posx_ = 0;
  clear_has_posx();
}
inline ::google::protobuf::int32 TAdventureMonsterInfo::posx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMonsterInfo.PosX)
  return posx_;
}
inline void TAdventureMonsterInfo::set_posx(::google::protobuf::int32 value) {
  set_has_posx();
  posx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMonsterInfo.PosX)
}

// optional int32 PosY = 3;
inline bool TAdventureMonsterInfo::has_posy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureMonsterInfo::set_has_posy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureMonsterInfo::clear_has_posy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureMonsterInfo::clear_posy() {
  posy_ = 0;
  clear_has_posy();
}
inline ::google::protobuf::int32 TAdventureMonsterInfo::posy() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMonsterInfo.PosY)
  return posy_;
}
inline void TAdventureMonsterInfo::set_posy(::google::protobuf::int32 value) {
  set_has_posy();
  posy_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMonsterInfo.PosY)
}

// optional uint32 BattleinfoId = 4;
inline bool TAdventureMonsterInfo::has_battleinfoid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureMonsterInfo::set_has_battleinfoid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureMonsterInfo::clear_has_battleinfoid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureMonsterInfo::clear_battleinfoid() {
  battleinfoid_ = 0u;
  clear_has_battleinfoid();
}
inline ::google::protobuf::uint32 TAdventureMonsterInfo::battleinfoid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMonsterInfo.BattleinfoId)
  return battleinfoid_;
}
inline void TAdventureMonsterInfo::set_battleinfoid(::google::protobuf::uint32 value) {
  set_has_battleinfoid();
  battleinfoid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMonsterInfo.BattleinfoId)
}

// optional uint64 CurTotalHp = 5;
inline bool TAdventureMonsterInfo::has_curtotalhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureMonsterInfo::set_has_curtotalhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureMonsterInfo::clear_has_curtotalhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureMonsterInfo::clear_curtotalhp() {
  curtotalhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curtotalhp();
}
inline ::google::protobuf::uint64 TAdventureMonsterInfo::curtotalhp() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMonsterInfo.CurTotalHp)
  return curtotalhp_;
}
inline void TAdventureMonsterInfo::set_curtotalhp(::google::protobuf::uint64 value) {
  set_has_curtotalhp();
  curtotalhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMonsterInfo.CurTotalHp)
}

// optional uint64 MaxTotalHp = 6;
inline bool TAdventureMonsterInfo::has_maxtotalhp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAdventureMonsterInfo::set_has_maxtotalhp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAdventureMonsterInfo::clear_has_maxtotalhp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAdventureMonsterInfo::clear_maxtotalhp() {
  maxtotalhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxtotalhp();
}
inline ::google::protobuf::uint64 TAdventureMonsterInfo::maxtotalhp() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureMonsterInfo.MaxTotalHp)
  return maxtotalhp_;
}
inline void TAdventureMonsterInfo::set_maxtotalhp(::google::protobuf::uint64 value) {
  set_has_maxtotalhp();
  maxtotalhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureMonsterInfo.MaxTotalHp)
}

// -------------------------------------------------------------------

// InteractItemInfo

// optional uint32 InteractItemId = 1;
inline bool InteractItemInfo::has_interactitemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InteractItemInfo::set_has_interactitemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InteractItemInfo::clear_has_interactitemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InteractItemInfo::clear_interactitemid() {
  interactitemid_ = 0u;
  clear_has_interactitemid();
}
inline ::google::protobuf::uint32 InteractItemInfo::interactitemid() const {
  // @@protoc_insertion_point(field_get:pb.InteractItemInfo.InteractItemId)
  return interactitemid_;
}
inline void InteractItemInfo::set_interactitemid(::google::protobuf::uint32 value) {
  set_has_interactitemid();
  interactitemid_ = value;
  // @@protoc_insertion_point(field_set:pb.InteractItemInfo.InteractItemId)
}

// optional bool ItemInAct = 2;
inline bool InteractItemInfo::has_iteminact() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InteractItemInfo::set_has_iteminact() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InteractItemInfo::clear_has_iteminact() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InteractItemInfo::clear_iteminact() {
  iteminact_ = false;
  clear_has_iteminact();
}
inline bool InteractItemInfo::iteminact() const {
  // @@protoc_insertion_point(field_get:pb.InteractItemInfo.ItemInAct)
  return iteminact_;
}
inline void InteractItemInfo::set_iteminact(bool value) {
  set_has_iteminact();
  iteminact_ = value;
  // @@protoc_insertion_point(field_set:pb.InteractItemInfo.ItemInAct)
}

// -------------------------------------------------------------------

// TAdventureEventRet

// optional uint32 TalkId = 1;
inline bool TAdventureEventRet::has_talkid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureEventRet::set_has_talkid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureEventRet::clear_has_talkid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureEventRet::clear_talkid() {
  talkid_ = 0u;
  clear_has_talkid();
}
inline ::google::protobuf::uint32 TAdventureEventRet::talkid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventRet.TalkId)
  return talkid_;
}
inline void TAdventureEventRet::set_talkid(::google::protobuf::uint32 value) {
  set_has_talkid();
  talkid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEventRet.TalkId)
}

// optional .pb.AdventureBehavior Behavior = 2;
inline bool TAdventureEventRet::has_behavior() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureEventRet::set_has_behavior() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureEventRet::clear_has_behavior() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureEventRet::clear_behavior() {
  if (behavior_ != NULL) behavior_->::pb::AdventureBehavior::Clear();
  clear_has_behavior();
}
inline const ::pb::AdventureBehavior& TAdventureEventRet::behavior() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventRet.Behavior)
  return behavior_ != NULL ? *behavior_ : *default_instance_->behavior_;
}
inline ::pb::AdventureBehavior* TAdventureEventRet::mutable_behavior() {
  set_has_behavior();
  if (behavior_ == NULL) behavior_ = new ::pb::AdventureBehavior;
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEventRet.Behavior)
  return behavior_;
}
inline ::pb::AdventureBehavior* TAdventureEventRet::release_behavior() {
  clear_has_behavior();
  ::pb::AdventureBehavior* temp = behavior_;
  behavior_ = NULL;
  return temp;
}
inline void TAdventureEventRet::set_allocated_behavior(::pb::AdventureBehavior* behavior) {
  delete behavior_;
  behavior_ = behavior;
  if (behavior) {
    set_has_behavior();
  } else {
    clear_has_behavior();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TAdventureEventRet.Behavior)
}

// repeated .pb.InteractItemInfo InteractItemArr = 3;
inline int TAdventureEventRet::interactitemarr_size() const {
  return interactitemarr_.size();
}
inline void TAdventureEventRet::clear_interactitemarr() {
  interactitemarr_.Clear();
}
inline const ::pb::InteractItemInfo& TAdventureEventRet::interactitemarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventRet.InteractItemArr)
  return interactitemarr_.Get(index);
}
inline ::pb::InteractItemInfo* TAdventureEventRet::mutable_interactitemarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureEventRet.InteractItemArr)
  return interactitemarr_.Mutable(index);
}
inline ::pb::InteractItemInfo* TAdventureEventRet::add_interactitemarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureEventRet.InteractItemArr)
  return interactitemarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::InteractItemInfo >&
TAdventureEventRet::interactitemarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureEventRet.InteractItemArr)
  return interactitemarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::InteractItemInfo >*
TAdventureEventRet::mutable_interactitemarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureEventRet.InteractItemArr)
  return &interactitemarr_;
}

// optional uint32 AnswerId = 4;
inline bool TAdventureEventRet::has_answerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TAdventureEventRet::set_has_answerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TAdventureEventRet::clear_has_answerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TAdventureEventRet::clear_answerid() {
  answerid_ = 0u;
  clear_has_answerid();
}
inline ::google::protobuf::uint32 TAdventureEventRet::answerid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventRet.AnswerId)
  return answerid_;
}
inline void TAdventureEventRet::set_answerid(::google::protobuf::uint32 value) {
  set_has_answerid();
  answerid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEventRet.AnswerId)
}

// optional uint64 AnswerStartTime = 5;
inline bool TAdventureEventRet::has_answerstarttime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TAdventureEventRet::set_has_answerstarttime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TAdventureEventRet::clear_has_answerstarttime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TAdventureEventRet::clear_answerstarttime() {
  answerstarttime_ = GOOGLE_ULONGLONG(0);
  clear_has_answerstarttime();
}
inline ::google::protobuf::uint64 TAdventureEventRet::answerstarttime() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventRet.AnswerStartTime)
  return answerstarttime_;
}
inline void TAdventureEventRet::set_answerstarttime(::google::protobuf::uint64 value) {
  set_has_answerstarttime();
  answerstarttime_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEventRet.AnswerStartTime)
}

// optional uint32 BattleinfoId = 6;
inline bool TAdventureEventRet::has_battleinfoid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TAdventureEventRet::set_has_battleinfoid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TAdventureEventRet::clear_has_battleinfoid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TAdventureEventRet::clear_battleinfoid() {
  battleinfoid_ = 0u;
  clear_has_battleinfoid();
}
inline ::google::protobuf::uint32 TAdventureEventRet::battleinfoid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventRet.BattleinfoId)
  return battleinfoid_;
}
inline void TAdventureEventRet::set_battleinfoid(::google::protobuf::uint32 value) {
  set_has_battleinfoid();
  battleinfoid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEventRet.BattleinfoId)
}

// optional uint32 BossLevel = 7;
inline bool TAdventureEventRet::has_bosslevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TAdventureEventRet::set_has_bosslevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TAdventureEventRet::clear_has_bosslevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TAdventureEventRet::clear_bosslevel() {
  bosslevel_ = 0u;
  clear_has_bosslevel();
}
inline ::google::protobuf::uint32 TAdventureEventRet::bosslevel() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventRet.BossLevel)
  return bosslevel_;
}
inline void TAdventureEventRet::set_bosslevel(::google::protobuf::uint32 value) {
  set_has_bosslevel();
  bosslevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEventRet.BossLevel)
}

// optional uint64 ArmyFightForce = 8;
inline bool TAdventureEventRet::has_armyfightforce() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TAdventureEventRet::set_has_armyfightforce() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TAdventureEventRet::clear_has_armyfightforce() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TAdventureEventRet::clear_armyfightforce() {
  armyfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_armyfightforce();
}
inline ::google::protobuf::uint64 TAdventureEventRet::armyfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureEventRet.ArmyFightForce)
  return armyfightforce_;
}
inline void TAdventureEventRet::set_armyfightforce(::google::protobuf::uint64 value) {
  set_has_armyfightforce();
  armyfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureEventRet.ArmyFightForce)
}

// -------------------------------------------------------------------

// TAdventureAttr

// optional uint32 AttrId = 1;
inline bool TAdventureAttr::has_attrid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureAttr::set_has_attrid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureAttr::clear_has_attrid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureAttr::clear_attrid() {
  attrid_ = 0u;
  clear_has_attrid();
}
inline ::google::protobuf::uint32 TAdventureAttr::attrid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAttr.AttrId)
  return attrid_;
}
inline void TAdventureAttr::set_attrid(::google::protobuf::uint32 value) {
  set_has_attrid();
  attrid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAttr.AttrId)
}

// optional uint32 AttrNum = 2;
inline bool TAdventureAttr::has_attrnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureAttr::set_has_attrnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureAttr::clear_has_attrnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureAttr::clear_attrnum() {
  attrnum_ = 0u;
  clear_has_attrnum();
}
inline ::google::protobuf::uint32 TAdventureAttr::attrnum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureAttr.AttrNum)
  return attrnum_;
}
inline void TAdventureAttr::set_attrnum(::google::protobuf::uint32 value) {
  set_has_attrnum();
  attrnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureAttr.AttrNum)
}

// -------------------------------------------------------------------

// TAdventureBuff

// optional uint32 BuffType = 1;
inline bool TAdventureBuff::has_bufftype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureBuff::set_has_bufftype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureBuff::clear_has_bufftype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureBuff::clear_bufftype() {
  bufftype_ = 0u;
  clear_has_bufftype();
}
inline ::google::protobuf::uint32 TAdventureBuff::bufftype() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBuff.BuffType)
  return bufftype_;
}
inline void TAdventureBuff::set_bufftype(::google::protobuf::uint32 value) {
  set_has_bufftype();
  bufftype_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBuff.BuffType)
}

// repeated .pb.TAdventureAttr AttrArr = 2;
inline int TAdventureBuff::attrarr_size() const {
  return attrarr_.size();
}
inline void TAdventureBuff::clear_attrarr() {
  attrarr_.Clear();
}
inline const ::pb::TAdventureAttr& TAdventureBuff::attrarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBuff.AttrArr)
  return attrarr_.Get(index);
}
inline ::pb::TAdventureAttr* TAdventureBuff::mutable_attrarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureBuff.AttrArr)
  return attrarr_.Mutable(index);
}
inline ::pb::TAdventureAttr* TAdventureBuff::add_attrarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureBuff.AttrArr)
  return attrarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureAttr >&
TAdventureBuff::attrarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureBuff.AttrArr)
  return attrarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureAttr >*
TAdventureBuff::mutable_attrarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureBuff.AttrArr)
  return &attrarr_;
}

// optional uint32 Hid = 3;
inline bool TAdventureBuff::has_hid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureBuff::set_has_hid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureBuff::clear_has_hid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureBuff::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TAdventureBuff::hid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBuff.Hid)
  return hid_;
}
inline void TAdventureBuff::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBuff.Hid)
}

// -------------------------------------------------------------------

// TAdventurePassBlock

// optional int32 X = 1;
inline bool TAdventurePassBlock::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventurePassBlock::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventurePassBlock::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventurePassBlock::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 TAdventurePassBlock::x() const {
  // @@protoc_insertion_point(field_get:pb.TAdventurePassBlock.X)
  return x_;
}
inline void TAdventurePassBlock::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventurePassBlock.X)
}

// optional int32 Y = 2;
inline bool TAdventurePassBlock::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventurePassBlock::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventurePassBlock::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventurePassBlock::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 TAdventurePassBlock::y() const {
  // @@protoc_insertion_point(field_get:pb.TAdventurePassBlock.Y)
  return y_;
}
inline void TAdventurePassBlock::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventurePassBlock.Y)
}

// optional uint32 LayerIdx = 3;
inline bool TAdventurePassBlock::has_layeridx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventurePassBlock::set_has_layeridx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventurePassBlock::clear_has_layeridx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventurePassBlock::clear_layeridx() {
  layeridx_ = 0u;
  clear_has_layeridx();
}
inline ::google::protobuf::uint32 TAdventurePassBlock::layeridx() const {
  // @@protoc_insertion_point(field_get:pb.TAdventurePassBlock.LayerIdx)
  return layeridx_;
}
inline void TAdventurePassBlock::set_layeridx(::google::protobuf::uint32 value) {
  set_has_layeridx();
  layeridx_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventurePassBlock.LayerIdx)
}

// -------------------------------------------------------------------

// TAdventureGetTeamRankUserInfo

// optional uint64 MemberUid = 1;
inline bool TAdventureGetTeamRankUserInfo::has_memberuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureGetTeamRankUserInfo::set_has_memberuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureGetTeamRankUserInfo::clear_has_memberuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureGetTeamRankUserInfo::clear_memberuid() {
  memberuid_ = GOOGLE_ULONGLONG(0);
  clear_has_memberuid();
}
inline ::google::protobuf::uint64 TAdventureGetTeamRankUserInfo::memberuid() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetTeamRankUserInfo.MemberUid)
  return memberuid_;
}
inline void TAdventureGetTeamRankUserInfo::set_memberuid(::google::protobuf::uint64 value) {
  set_has_memberuid();
  memberuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetTeamRankUserInfo.MemberUid)
}

// optional uint64 DamageValue = 2;
inline bool TAdventureGetTeamRankUserInfo::has_damagevalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TAdventureGetTeamRankUserInfo::set_has_damagevalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TAdventureGetTeamRankUserInfo::clear_has_damagevalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TAdventureGetTeamRankUserInfo::clear_damagevalue() {
  damagevalue_ = GOOGLE_ULONGLONG(0);
  clear_has_damagevalue();
}
inline ::google::protobuf::uint64 TAdventureGetTeamRankUserInfo::damagevalue() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetTeamRankUserInfo.DamageValue)
  return damagevalue_;
}
inline void TAdventureGetTeamRankUserInfo::set_damagevalue(::google::protobuf::uint64 value) {
  set_has_damagevalue();
  damagevalue_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetTeamRankUserInfo.DamageValue)
}

// optional uint32 DoEventNum = 3;
inline bool TAdventureGetTeamRankUserInfo::has_doeventnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TAdventureGetTeamRankUserInfo::set_has_doeventnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TAdventureGetTeamRankUserInfo::clear_has_doeventnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TAdventureGetTeamRankUserInfo::clear_doeventnum() {
  doeventnum_ = 0u;
  clear_has_doeventnum();
}
inline ::google::protobuf::uint32 TAdventureGetTeamRankUserInfo::doeventnum() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureGetTeamRankUserInfo.DoEventNum)
  return doeventnum_;
}
inline void TAdventureGetTeamRankUserInfo::set_doeventnum(::google::protobuf::uint32 value) {
  set_has_doeventnum();
  doeventnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureGetTeamRankUserInfo.DoEventNum)
}

// -------------------------------------------------------------------

// TAdventureBattleMonsterInfo

// optional uint32 ScreenIndex = 1;
inline bool TAdventureBattleMonsterInfo::has_screenindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TAdventureBattleMonsterInfo::set_has_screenindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TAdventureBattleMonsterInfo::clear_has_screenindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TAdventureBattleMonsterInfo::clear_screenindex() {
  screenindex_ = 0u;
  clear_has_screenindex();
}
inline ::google::protobuf::uint32 TAdventureBattleMonsterInfo::screenindex() const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBattleMonsterInfo.ScreenIndex)
  return screenindex_;
}
inline void TAdventureBattleMonsterInfo::set_screenindex(::google::protobuf::uint32 value) {
  set_has_screenindex();
  screenindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TAdventureBattleMonsterInfo.ScreenIndex)
}

// repeated .pb.TAdventureMonsterStatus MonsterArr = 2;
inline int TAdventureBattleMonsterInfo::monsterarr_size() const {
  return monsterarr_.size();
}
inline void TAdventureBattleMonsterInfo::clear_monsterarr() {
  monsterarr_.Clear();
}
inline const ::pb::TAdventureMonsterStatus& TAdventureBattleMonsterInfo::monsterarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TAdventureBattleMonsterInfo.MonsterArr)
  return monsterarr_.Get(index);
}
inline ::pb::TAdventureMonsterStatus* TAdventureBattleMonsterInfo::mutable_monsterarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TAdventureBattleMonsterInfo.MonsterArr)
  return monsterarr_.Mutable(index);
}
inline ::pb::TAdventureMonsterStatus* TAdventureBattleMonsterInfo::add_monsterarr() {
  // @@protoc_insertion_point(field_add:pb.TAdventureBattleMonsterInfo.MonsterArr)
  return monsterarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterStatus >&
TAdventureBattleMonsterInfo::monsterarr() const {
  // @@protoc_insertion_point(field_list:pb.TAdventureBattleMonsterInfo.MonsterArr)
  return monsterarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAdventureMonsterStatus >*
TAdventureBattleMonsterInfo::mutable_monsterarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TAdventureBattleMonsterInfo.MonsterArr)
  return &monsterarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EMapStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EMapStatus>() {
  return ::pb::EMapStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::EMapUserStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EMapUserStatus>() {
  return ::pb::EMapUserStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::EAdvantureRecordType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAdvantureRecordType>() {
  return ::pb::EAdvantureRecordType_descriptor();
}
template <> struct is_proto_enum< ::pb::EMapType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EMapType>() {
  return ::pb::EMapType_descriptor();
}
template <> struct is_proto_enum< ::pb::ETeamChangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ETeamChangeType>() {
  return ::pb::ETeamChangeType_descriptor();
}
template <> struct is_proto_enum< ::pb::EAdventureTeamStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAdventureTeamStatus>() {
  return ::pb::EAdventureTeamStatus_descriptor();
}
template <> struct is_proto_enum< ::pb::EAdventureGetTeamType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAdventureGetTeamType>() {
  return ::pb::EAdventureGetTeamType_descriptor();
}
template <> struct is_proto_enum< ::pb::EAdventurePosChangeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAdventurePosChangeType>() {
  return ::pb::EAdventurePosChangeType_descriptor();
}
template <> struct is_proto_enum< ::pb::EAdventureSendToMateRetCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAdventureSendToMateRetCode>() {
  return ::pb::EAdventureSendToMateRetCode_descriptor();
}
template <> struct is_proto_enum< ::pb::EAdventureRollRewardRetCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAdventureRollRewardRetCode>() {
  return ::pb::EAdventureRollRewardRetCode_descriptor();
}
template <> struct is_proto_enum< ::pb::EAdventureStartBattleRetCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAdventureStartBattleRetCode>() {
  return ::pb::EAdventureStartBattleRetCode_descriptor();
}
template <> struct is_proto_enum< ::pb::EAdventureType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAdventureType>() {
  return ::pb::EAdventureType_descriptor();
}
template <> struct is_proto_enum< ::pb::ETeamStartPlayErrorCode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ETeamStartPlayErrorCode>() {
  return ::pb::ETeamStartPlayErrorCode_descriptor();
}
template <> struct is_proto_enum< ::pb::ETeamMode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ETeamMode>() {
  return ::pb::ETeamMode_descriptor();
}
template <> struct is_proto_enum< ::pb::EAdventureRefreshMapCostType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAdventureRefreshMapCostType>() {
  return ::pb::EAdventureRefreshMapCostType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fAdventureBase_2eproto__INCLUDED
