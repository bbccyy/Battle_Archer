// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/FightForceRanking.proto

#ifndef PROTOBUF_net_2fFightForceRanking_2eproto__INCLUDED
#define PROTOBUF_net_2fFightForceRanking_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fFightForceRanking_2eproto();
void protobuf_AssignDesc_net_2fFightForceRanking_2eproto();
void protobuf_ShutdownFile_net_2fFightForceRanking_2eproto();

class TFightForceRankingRankItem;
class TFightForceRankingTakeRewardRecordRsp;
class TFightForceRankingTakeRewardReq;
class TFightForceRankingRankRewardInfo;
class TFightForceRankingGetRankRewardRsp;
class TFightForceRankingEntranceCloseReq;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TFightForceRankingRankItem</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightForceRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightForceRankingRankItem : public ::google::protobuf::Message {
 public:
  TFightForceRankingRankItem();
  virtual ~TFightForceRankingRankItem();

  TFightForceRankingRankItem(const TFightForceRankingRankItem& from);

  inline TFightForceRankingRankItem& operator=(const TFightForceRankingRankItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightForceRankingRankItem& default_instance();

  void Swap(TFightForceRankingRankItem* other);

  // implements Message ----------------------------------------------

  TFightForceRankingRankItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightForceRankingRankItem& from);
  void MergeFrom(const TFightForceRankingRankItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingRankItem</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint64 FightForce = 2;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingRankItem</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint64 ChangeTime = 3;
  inline bool has_changetime() const;
  inline void clear_changetime();
  static const int kChangeTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingRankItem</name>
  	<Function>
  		<name>changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_changetime</name>
  		<replaceName>ChangeTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 changetime() const;
  inline void set_changetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFightForceRankingRankItem)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_changetime();
  inline void clear_has_changetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint64 changetime_;
  friend void  protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightForceRanking_2eproto();

  void InitAsDefaultInstance();
  static TFightForceRankingRankItem* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightForceRankingTakeRewardRecordRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightForceRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightForceRankingTakeRewardRecordRsp : public ::google::protobuf::Message {
 public:
  TFightForceRankingTakeRewardRecordRsp();
  virtual ~TFightForceRankingTakeRewardRecordRsp();

  TFightForceRankingTakeRewardRecordRsp(const TFightForceRankingTakeRewardRecordRsp& from);

  inline TFightForceRankingTakeRewardRecordRsp& operator=(const TFightForceRankingTakeRewardRecordRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightForceRankingTakeRewardRecordRsp& default_instance();

  void Swap(TFightForceRankingTakeRewardRecordRsp* other);

  // implements Message ----------------------------------------------

  TFightForceRankingTakeRewardRecordRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightForceRankingTakeRewardRecordRsp& from);
  void MergeFrom(const TFightForceRankingTakeRewardRecordRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 TakeArr = 1;
  inline int takearr_size() const;
  inline void clear_takearr();
  static const int kTakeArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingTakeRewardRecordRsp</name>
  	<Function>
  		<name>takearr</name>
  		<replaceName>TakeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_takearr</name>
  		<replaceName>TakeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_takearr</name>
  		<replaceName>TakeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_takearr</name>
  		<replaceName>TakeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>takearr_size</name>
  		<replaceName>TakeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 takearr(int index) const;
  inline void set_takearr(int index, ::google::protobuf::int32 value);
  inline void add_takearr(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      takearr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_takearr();

  // optional uint64 FightForce = 2;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingTakeRewardRecordRsp</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFightForceRankingTakeRewardRecordRsp)
 private:
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > takearr_;
  ::google::protobuf::uint64 fightforce_;
  friend void  protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightForceRanking_2eproto();

  void InitAsDefaultInstance();
  static TFightForceRankingTakeRewardRecordRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightForceRankingTakeRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightForceRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightForceRankingTakeRewardReq : public ::google::protobuf::Message {
 public:
  TFightForceRankingTakeRewardReq();
  virtual ~TFightForceRankingTakeRewardReq();

  TFightForceRankingTakeRewardReq(const TFightForceRankingTakeRewardReq& from);

  inline TFightForceRankingTakeRewardReq& operator=(const TFightForceRankingTakeRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightForceRankingTakeRewardReq& default_instance();

  void Swap(TFightForceRankingTakeRewardReq* other);

  // implements Message ----------------------------------------------

  TFightForceRankingTakeRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightForceRankingTakeRewardReq& from);
  void MergeFrom(const TFightForceRankingTakeRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 RewardId = 1;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingTakeRewardReq</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rewardid() const;
  inline void set_rewardid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TFightForceRankingTakeRewardReq)
 private:
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 rewardid_;
  friend void  protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightForceRanking_2eproto();

  void InitAsDefaultInstance();
  static TFightForceRankingTakeRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightForceRankingRankRewardInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightForceRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightForceRankingRankRewardInfo : public ::google::protobuf::Message {
 public:
  TFightForceRankingRankRewardInfo();
  virtual ~TFightForceRankingRankRewardInfo();

  TFightForceRankingRankRewardInfo(const TFightForceRankingRankRewardInfo& from);

  inline TFightForceRankingRankRewardInfo& operator=(const TFightForceRankingRankRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightForceRankingRankRewardInfo& default_instance();

  void Swap(TFightForceRankingRankRewardInfo* other);

  // implements Message ----------------------------------------------

  TFightForceRankingRankRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightForceRankingRankRewardInfo& from);
  void MergeFrom(const TFightForceRankingRankRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TFightForceRankingRankItem RankInfo = 1;
  inline bool has_rankinfo() const;
  inline void clear_rankinfo();
  static const int kRankInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingRankRewardInfo</name>
  	<Function>
  		<name>rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankinfo</name>
  		<replaceName>RankInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TFightForceRankingRankItem& rankinfo() const;
  inline ::pb::TFightForceRankingRankItem* mutable_rankinfo();
  inline ::pb::TFightForceRankingRankItem* release_rankinfo();
  inline void set_allocated_rankinfo(::pb::TFightForceRankingRankItem* rankinfo);

  // optional int32 Rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingRankRewardInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 Count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingRankRewardInfo</name>
  	<Function>
  		<name>count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_count</name>
  		<replaceName>Count</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TFightForceRankingRankRewardInfo)
 private:
  inline void set_has_rankinfo();
  inline void clear_has_rankinfo();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TFightForceRankingRankItem* rankinfo_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 count_;
  friend void  protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightForceRanking_2eproto();

  void InitAsDefaultInstance();
  static TFightForceRankingRankRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightForceRankingGetRankRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightForceRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightForceRankingGetRankRewardRsp : public ::google::protobuf::Message {
 public:
  TFightForceRankingGetRankRewardRsp();
  virtual ~TFightForceRankingGetRankRewardRsp();

  TFightForceRankingGetRankRewardRsp(const TFightForceRankingGetRankRewardRsp& from);

  inline TFightForceRankingGetRankRewardRsp& operator=(const TFightForceRankingGetRankRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightForceRankingGetRankRewardRsp& default_instance();

  void Swap(TFightForceRankingGetRankRewardRsp* other);

  // implements Message ----------------------------------------------

  TFightForceRankingGetRankRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightForceRankingGetRankRewardRsp& from);
  void MergeFrom(const TFightForceRankingGetRankRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingGetRankRewardRsp</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // repeated .pb.TFightForceRankingRankRewardInfo RankRewardArr = 2;
  inline int rankrewardarr_size() const;
  inline void clear_rankrewardarr();
  static const int kRankRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingGetRankRewardRsp</name>
  	<Function>
  		<name>rankrewardarr</name>
  		<replaceName>RankRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankrewardarr</name>
  		<replaceName>RankRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankrewardarr</name>
  		<replaceName>RankRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankrewardarr</name>
  		<replaceName>RankRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankrewardarr_size</name>
  		<replaceName>RankRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TFightForceRankingRankRewardInfo& rankrewardarr(int index) const;
  inline ::pb::TFightForceRankingRankRewardInfo* mutable_rankrewardarr(int index);
  inline ::pb::TFightForceRankingRankRewardInfo* add_rankrewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TFightForceRankingRankRewardInfo >&
      rankrewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TFightForceRankingRankRewardInfo >*
      mutable_rankrewardarr();

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TFightForceRankingGetRankRewardRsp</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TFightForceRankingGetRankRewardRsp)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TFightForceRankingRankRewardInfo > rankrewardarr_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::int32 rank_;
  friend void  protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightForceRanking_2eproto();

  void InitAsDefaultInstance();
  static TFightForceRankingGetRankRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TFightForceRankingEntranceCloseReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/FightForceRanking.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TFightForceRankingEntranceCloseReq : public ::google::protobuf::Message {
 public:
  TFightForceRankingEntranceCloseReq();
  virtual ~TFightForceRankingEntranceCloseReq();

  TFightForceRankingEntranceCloseReq(const TFightForceRankingEntranceCloseReq& from);

  inline TFightForceRankingEntranceCloseReq& operator=(const TFightForceRankingEntranceCloseReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TFightForceRankingEntranceCloseReq& default_instance();

  void Swap(TFightForceRankingEntranceCloseReq* other);

  // implements Message ----------------------------------------------

  TFightForceRankingEntranceCloseReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TFightForceRankingEntranceCloseReq& from);
  void MergeFrom(const TFightForceRankingEntranceCloseReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pb.TFightForceRankingEntranceCloseReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_AssignDesc_net_2fFightForceRanking_2eproto();
  friend void protobuf_ShutdownFile_net_2fFightForceRanking_2eproto();

  void InitAsDefaultInstance();
  static TFightForceRankingEntranceCloseReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TFightForceRankingRankItem

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TFightForceRankingRankItem::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFightForceRankingRankItem::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFightForceRankingRankItem::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFightForceRankingRankItem::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TFightForceRankingRankItem::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingRankItem.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TFightForceRankingRankItem::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TFightForceRankingRankItem.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TFightForceRankingRankItem::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TFightForceRankingRankItem::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFightForceRankingRankItem.UserInfo)
}

// optional uint64 FightForce = 2;
inline bool TFightForceRankingRankItem::has_fightforce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFightForceRankingRankItem::set_has_fightforce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFightForceRankingRankItem::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFightForceRankingRankItem::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TFightForceRankingRankItem::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingRankItem.FightForce)
  return fightforce_;
}
inline void TFightForceRankingRankItem::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightForceRankingRankItem.FightForce)
}

// optional uint64 ChangeTime = 3;
inline bool TFightForceRankingRankItem::has_changetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFightForceRankingRankItem::set_has_changetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFightForceRankingRankItem::clear_has_changetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFightForceRankingRankItem::clear_changetime() {
  changetime_ = GOOGLE_ULONGLONG(0);
  clear_has_changetime();
}
inline ::google::protobuf::uint64 TFightForceRankingRankItem::changetime() const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingRankItem.ChangeTime)
  return changetime_;
}
inline void TFightForceRankingRankItem::set_changetime(::google::protobuf::uint64 value) {
  set_has_changetime();
  changetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightForceRankingRankItem.ChangeTime)
}

// -------------------------------------------------------------------

// TFightForceRankingTakeRewardRecordRsp

// repeated int32 TakeArr = 1;
inline int TFightForceRankingTakeRewardRecordRsp::takearr_size() const {
  return takearr_.size();
}
inline void TFightForceRankingTakeRewardRecordRsp::clear_takearr() {
  takearr_.Clear();
}
inline ::google::protobuf::int32 TFightForceRankingTakeRewardRecordRsp::takearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingTakeRewardRecordRsp.TakeArr)
  return takearr_.Get(index);
}
inline void TFightForceRankingTakeRewardRecordRsp::set_takearr(int index, ::google::protobuf::int32 value) {
  takearr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TFightForceRankingTakeRewardRecordRsp.TakeArr)
}
inline void TFightForceRankingTakeRewardRecordRsp::add_takearr(::google::protobuf::int32 value) {
  takearr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TFightForceRankingTakeRewardRecordRsp.TakeArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
TFightForceRankingTakeRewardRecordRsp::takearr() const {
  // @@protoc_insertion_point(field_list:pb.TFightForceRankingTakeRewardRecordRsp.TakeArr)
  return takearr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
TFightForceRankingTakeRewardRecordRsp::mutable_takearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFightForceRankingTakeRewardRecordRsp.TakeArr)
  return &takearr_;
}

// optional uint64 FightForce = 2;
inline bool TFightForceRankingTakeRewardRecordRsp::has_fightforce() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFightForceRankingTakeRewardRecordRsp::set_has_fightforce() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFightForceRankingTakeRewardRecordRsp::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFightForceRankingTakeRewardRecordRsp::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TFightForceRankingTakeRewardRecordRsp::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingTakeRewardRecordRsp.FightForce)
  return fightforce_;
}
inline void TFightForceRankingTakeRewardRecordRsp::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightForceRankingTakeRewardRecordRsp.FightForce)
}

// -------------------------------------------------------------------

// TFightForceRankingTakeRewardReq

// optional int32 RewardId = 1;
inline bool TFightForceRankingTakeRewardReq::has_rewardid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFightForceRankingTakeRewardReq::set_has_rewardid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFightForceRankingTakeRewardReq::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFightForceRankingTakeRewardReq::clear_rewardid() {
  rewardid_ = 0;
  clear_has_rewardid();
}
inline ::google::protobuf::int32 TFightForceRankingTakeRewardReq::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingTakeRewardReq.RewardId)
  return rewardid_;
}
inline void TFightForceRankingTakeRewardReq::set_rewardid(::google::protobuf::int32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightForceRankingTakeRewardReq.RewardId)
}

// -------------------------------------------------------------------

// TFightForceRankingRankRewardInfo

// optional .pb.TFightForceRankingRankItem RankInfo = 1;
inline bool TFightForceRankingRankRewardInfo::has_rankinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFightForceRankingRankRewardInfo::set_has_rankinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFightForceRankingRankRewardInfo::clear_has_rankinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFightForceRankingRankRewardInfo::clear_rankinfo() {
  if (rankinfo_ != NULL) rankinfo_->::pb::TFightForceRankingRankItem::Clear();
  clear_has_rankinfo();
}
inline const ::pb::TFightForceRankingRankItem& TFightForceRankingRankRewardInfo::rankinfo() const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingRankRewardInfo.RankInfo)
  return rankinfo_ != NULL ? *rankinfo_ : *default_instance_->rankinfo_;
}
inline ::pb::TFightForceRankingRankItem* TFightForceRankingRankRewardInfo::mutable_rankinfo() {
  set_has_rankinfo();
  if (rankinfo_ == NULL) rankinfo_ = new ::pb::TFightForceRankingRankItem;
  // @@protoc_insertion_point(field_mutable:pb.TFightForceRankingRankRewardInfo.RankInfo)
  return rankinfo_;
}
inline ::pb::TFightForceRankingRankItem* TFightForceRankingRankRewardInfo::release_rankinfo() {
  clear_has_rankinfo();
  ::pb::TFightForceRankingRankItem* temp = rankinfo_;
  rankinfo_ = NULL;
  return temp;
}
inline void TFightForceRankingRankRewardInfo::set_allocated_rankinfo(::pb::TFightForceRankingRankItem* rankinfo) {
  delete rankinfo_;
  rankinfo_ = rankinfo;
  if (rankinfo) {
    set_has_rankinfo();
  } else {
    clear_has_rankinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TFightForceRankingRankRewardInfo.RankInfo)
}

// optional int32 Rank = 2;
inline bool TFightForceRankingRankRewardInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFightForceRankingRankRewardInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFightForceRankingRankRewardInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFightForceRankingRankRewardInfo::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 TFightForceRankingRankRewardInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingRankRewardInfo.Rank)
  return rank_;
}
inline void TFightForceRankingRankRewardInfo::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightForceRankingRankRewardInfo.Rank)
}

// optional int32 Count = 3;
inline bool TFightForceRankingRankRewardInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFightForceRankingRankRewardInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFightForceRankingRankRewardInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFightForceRankingRankRewardInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 TFightForceRankingRankRewardInfo::count() const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingRankRewardInfo.Count)
  return count_;
}
inline void TFightForceRankingRankRewardInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightForceRankingRankRewardInfo.Count)
}

// -------------------------------------------------------------------

// TFightForceRankingGetRankRewardRsp

// optional int32 Rank = 1;
inline bool TFightForceRankingGetRankRewardRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFightForceRankingGetRankRewardRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFightForceRankingGetRankRewardRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFightForceRankingGetRankRewardRsp::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 TFightForceRankingGetRankRewardRsp::rank() const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingGetRankRewardRsp.Rank)
  return rank_;
}
inline void TFightForceRankingGetRankRewardRsp::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightForceRankingGetRankRewardRsp.Rank)
}

// repeated .pb.TFightForceRankingRankRewardInfo RankRewardArr = 2;
inline int TFightForceRankingGetRankRewardRsp::rankrewardarr_size() const {
  return rankrewardarr_.size();
}
inline void TFightForceRankingGetRankRewardRsp::clear_rankrewardarr() {
  rankrewardarr_.Clear();
}
inline const ::pb::TFightForceRankingRankRewardInfo& TFightForceRankingGetRankRewardRsp::rankrewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingGetRankRewardRsp.RankRewardArr)
  return rankrewardarr_.Get(index);
}
inline ::pb::TFightForceRankingRankRewardInfo* TFightForceRankingGetRankRewardRsp::mutable_rankrewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TFightForceRankingGetRankRewardRsp.RankRewardArr)
  return rankrewardarr_.Mutable(index);
}
inline ::pb::TFightForceRankingRankRewardInfo* TFightForceRankingGetRankRewardRsp::add_rankrewardarr() {
  // @@protoc_insertion_point(field_add:pb.TFightForceRankingGetRankRewardRsp.RankRewardArr)
  return rankrewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TFightForceRankingRankRewardInfo >&
TFightForceRankingGetRankRewardRsp::rankrewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TFightForceRankingGetRankRewardRsp.RankRewardArr)
  return rankrewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TFightForceRankingRankRewardInfo >*
TFightForceRankingGetRankRewardRsp::mutable_rankrewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TFightForceRankingGetRankRewardRsp.RankRewardArr)
  return &rankrewardarr_;
}

// optional uint64 FightForce = 3;
inline bool TFightForceRankingGetRankRewardRsp::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFightForceRankingGetRankRewardRsp::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFightForceRankingGetRankRewardRsp::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFightForceRankingGetRankRewardRsp::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TFightForceRankingGetRankRewardRsp::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TFightForceRankingGetRankRewardRsp.FightForce)
  return fightforce_;
}
inline void TFightForceRankingGetRankRewardRsp::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TFightForceRankingGetRankRewardRsp.FightForce)
}

// -------------------------------------------------------------------

// TFightForceRankingEntranceCloseReq


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fFightForceRanking_2eproto__INCLUDED
