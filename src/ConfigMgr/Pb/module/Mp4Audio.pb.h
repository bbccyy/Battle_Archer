// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/Mp4Audio.proto

#ifndef PROTOBUF_module_2fMp4Audio_2eproto__INCLUDED
#define PROTOBUF_module_2fMp4Audio_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/AudioDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fMp4Audio_2eproto();
void protobuf_AssignDesc_module_2fMp4Audio_2eproto();
void protobuf_ShutdownFile_module_2fMp4Audio_2eproto();

class Mp4Audio;
class Mp4AudioInfo;

// ===================================================================

/*FOR2LUA
<Record>
	<name>Mp4Audio</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Mp4Audio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class Mp4Audio : public ::google::protobuf::Message {
 public:
  Mp4Audio();
  virtual ~Mp4Audio();

  Mp4Audio(const Mp4Audio& from);

  inline Mp4Audio& operator=(const Mp4Audio& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mp4Audio& default_instance();

  void Swap(Mp4Audio* other);

  // implements Message ----------------------------------------------

  Mp4Audio* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mp4Audio& from);
  void MergeFrom(const Mp4Audio& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>Mp4Audio</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string Mp4Name = 2;
  inline bool has_mp4name() const;
  inline void clear_mp4name();
  static const int kMp4NameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>Mp4Audio</name>
  	<Function>
  		<name>mp4name</name>
  		<replaceName>Mp4Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mp4name</name>
  		<replaceName>Mp4Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mp4name</name>
  		<replaceName>Mp4Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& mp4name() const;
  inline void set_mp4name(const ::std::string& value);
  inline void set_mp4name(const char* value);
  inline void set_mp4name(const char* value, size_t size);
  inline ::std::string* mutable_mp4name();
  inline ::std::string* release_mp4name();
  inline void set_allocated_mp4name(::std::string* mp4name);

  // repeated .pb.Mp4AudioInfo Mp4StartAudioInfoArr = 3;
  inline int mp4startaudioinfoarr_size() const;
  inline void clear_mp4startaudioinfoarr();
  static const int kMp4StartAudioInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>Mp4Audio</name>
  	<Function>
  		<name>mp4startaudioinfoarr</name>
  		<replaceName>Mp4StartAudioInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_mp4startaudioinfoarr</name>
  		<replaceName>Mp4StartAudioInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_mp4startaudioinfoarr</name>
  		<replaceName>Mp4StartAudioInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mp4startaudioinfoarr</name>
  		<replaceName>Mp4StartAudioInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mp4startaudioinfoarr_size</name>
  		<replaceName>Mp4StartAudioInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::Mp4AudioInfo& mp4startaudioinfoarr(int index) const;
  inline ::pb::Mp4AudioInfo* mutable_mp4startaudioinfoarr(int index);
  inline ::pb::Mp4AudioInfo* add_mp4startaudioinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Mp4AudioInfo >&
      mp4startaudioinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Mp4AudioInfo >*
      mutable_mp4startaudioinfoarr();

  // repeated .pb.Mp4AudioInfo Mp4EndAudioInfoArr = 4;
  inline int mp4endaudioinfoarr_size() const;
  inline void clear_mp4endaudioinfoarr();
  static const int kMp4EndAudioInfoArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>Mp4Audio</name>
  	<Function>
  		<name>mp4endaudioinfoarr</name>
  		<replaceName>Mp4EndAudioInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_mp4endaudioinfoarr</name>
  		<replaceName>Mp4EndAudioInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_mp4endaudioinfoarr</name>
  		<replaceName>Mp4EndAudioInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mp4endaudioinfoarr</name>
  		<replaceName>Mp4EndAudioInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mp4endaudioinfoarr_size</name>
  		<replaceName>Mp4EndAudioInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::Mp4AudioInfo& mp4endaudioinfoarr(int index) const;
  inline ::pb::Mp4AudioInfo* mutable_mp4endaudioinfoarr(int index);
  inline ::pb::Mp4AudioInfo* add_mp4endaudioinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::Mp4AudioInfo >&
      mp4endaudioinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::Mp4AudioInfo >*
      mutable_mp4endaudioinfoarr();

  // @@protoc_insertion_point(class_scope:pb.Mp4Audio)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_mp4name();
  inline void clear_has_mp4name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mp4name_;
  ::google::protobuf::RepeatedPtrField< ::pb::Mp4AudioInfo > mp4startaudioinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::Mp4AudioInfo > mp4endaudioinfoarr_;
  ::google::protobuf::int32 id_;
  friend void  protobuf_AddDesc_module_2fMp4Audio_2eproto();
  friend void protobuf_AssignDesc_module_2fMp4Audio_2eproto();
  friend void protobuf_ShutdownFile_module_2fMp4Audio_2eproto();

  void InitAsDefaultInstance();
  static Mp4Audio* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>Mp4AudioInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/Mp4Audio.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class Mp4AudioInfo : public ::google::protobuf::Message {
 public:
  Mp4AudioInfo();
  virtual ~Mp4AudioInfo();

  Mp4AudioInfo(const Mp4AudioInfo& from);

  inline Mp4AudioInfo& operator=(const Mp4AudioInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Mp4AudioInfo& default_instance();

  void Swap(Mp4AudioInfo* other);

  // implements Message ----------------------------------------------

  Mp4AudioInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Mp4AudioInfo& from);
  void MergeFrom(const Mp4AudioInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.AudioInfo AudioInfo = 1;
  inline bool has_audioinfo() const;
  inline void clear_audioinfo();
  static const int kAudioInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>Mp4AudioInfo</name>
  	<Function>
  		<name>audioinfo</name>
  		<replaceName>AudioInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_audioinfo</name>
  		<replaceName>AudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_audioinfo</name>
  		<replaceName>AudioInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_audioinfo</name>
  		<replaceName>AudioInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AudioInfo& audioinfo() const;
  inline ::pb::AudioInfo* mutable_audioinfo();
  inline ::pb::AudioInfo* release_audioinfo();
  inline void set_allocated_audioinfo(::pb::AudioInfo* audioinfo);

  // @@protoc_insertion_point(class_scope:pb.Mp4AudioInfo)
 private:
  inline void set_has_audioinfo();
  inline void clear_has_audioinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::AudioInfo* audioinfo_;
  friend void  protobuf_AddDesc_module_2fMp4Audio_2eproto();
  friend void protobuf_AssignDesc_module_2fMp4Audio_2eproto();
  friend void protobuf_ShutdownFile_module_2fMp4Audio_2eproto();

  void InitAsDefaultInstance();
  static Mp4AudioInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// Mp4Audio

// optional int32 Id = 1;
inline bool Mp4Audio::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mp4Audio::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mp4Audio::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mp4Audio::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Mp4Audio::id() const {
  // @@protoc_insertion_point(field_get:pb.Mp4Audio.Id)
  return id_;
}
inline void Mp4Audio::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.Mp4Audio.Id)
}

// optional string Mp4Name = 2;
inline bool Mp4Audio::has_mp4name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Mp4Audio::set_has_mp4name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Mp4Audio::clear_has_mp4name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Mp4Audio::clear_mp4name() {
  if (mp4name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mp4name_->clear();
  }
  clear_has_mp4name();
}
inline const ::std::string& Mp4Audio::mp4name() const {
  // @@protoc_insertion_point(field_get:pb.Mp4Audio.Mp4Name)
  return *mp4name_;
}
inline void Mp4Audio::set_mp4name(const ::std::string& value) {
  set_has_mp4name();
  if (mp4name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mp4name_ = new ::std::string;
  }
  mp4name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.Mp4Audio.Mp4Name)
}
inline void Mp4Audio::set_mp4name(const char* value) {
  set_has_mp4name();
  if (mp4name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mp4name_ = new ::std::string;
  }
  mp4name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.Mp4Audio.Mp4Name)
}
inline void Mp4Audio::set_mp4name(const char* value, size_t size) {
  set_has_mp4name();
  if (mp4name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mp4name_ = new ::std::string;
  }
  mp4name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.Mp4Audio.Mp4Name)
}
inline ::std::string* Mp4Audio::mutable_mp4name() {
  set_has_mp4name();
  if (mp4name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mp4name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.Mp4Audio.Mp4Name)
  return mp4name_;
}
inline ::std::string* Mp4Audio::release_mp4name() {
  clear_has_mp4name();
  if (mp4name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mp4name_;
    mp4name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Mp4Audio::set_allocated_mp4name(::std::string* mp4name) {
  if (mp4name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mp4name_;
  }
  if (mp4name) {
    set_has_mp4name();
    mp4name_ = mp4name;
  } else {
    clear_has_mp4name();
    mp4name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Mp4Audio.Mp4Name)
}

// repeated .pb.Mp4AudioInfo Mp4StartAudioInfoArr = 3;
inline int Mp4Audio::mp4startaudioinfoarr_size() const {
  return mp4startaudioinfoarr_.size();
}
inline void Mp4Audio::clear_mp4startaudioinfoarr() {
  mp4startaudioinfoarr_.Clear();
}
inline const ::pb::Mp4AudioInfo& Mp4Audio::mp4startaudioinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.Mp4Audio.Mp4StartAudioInfoArr)
  return mp4startaudioinfoarr_.Get(index);
}
inline ::pb::Mp4AudioInfo* Mp4Audio::mutable_mp4startaudioinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Mp4Audio.Mp4StartAudioInfoArr)
  return mp4startaudioinfoarr_.Mutable(index);
}
inline ::pb::Mp4AudioInfo* Mp4Audio::add_mp4startaudioinfoarr() {
  // @@protoc_insertion_point(field_add:pb.Mp4Audio.Mp4StartAudioInfoArr)
  return mp4startaudioinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Mp4AudioInfo >&
Mp4Audio::mp4startaudioinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.Mp4Audio.Mp4StartAudioInfoArr)
  return mp4startaudioinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Mp4AudioInfo >*
Mp4Audio::mutable_mp4startaudioinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.Mp4Audio.Mp4StartAudioInfoArr)
  return &mp4startaudioinfoarr_;
}

// repeated .pb.Mp4AudioInfo Mp4EndAudioInfoArr = 4;
inline int Mp4Audio::mp4endaudioinfoarr_size() const {
  return mp4endaudioinfoarr_.size();
}
inline void Mp4Audio::clear_mp4endaudioinfoarr() {
  mp4endaudioinfoarr_.Clear();
}
inline const ::pb::Mp4AudioInfo& Mp4Audio::mp4endaudioinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.Mp4Audio.Mp4EndAudioInfoArr)
  return mp4endaudioinfoarr_.Get(index);
}
inline ::pb::Mp4AudioInfo* Mp4Audio::mutable_mp4endaudioinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.Mp4Audio.Mp4EndAudioInfoArr)
  return mp4endaudioinfoarr_.Mutable(index);
}
inline ::pb::Mp4AudioInfo* Mp4Audio::add_mp4endaudioinfoarr() {
  // @@protoc_insertion_point(field_add:pb.Mp4Audio.Mp4EndAudioInfoArr)
  return mp4endaudioinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::Mp4AudioInfo >&
Mp4Audio::mp4endaudioinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.Mp4Audio.Mp4EndAudioInfoArr)
  return mp4endaudioinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::Mp4AudioInfo >*
Mp4Audio::mutable_mp4endaudioinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.Mp4Audio.Mp4EndAudioInfoArr)
  return &mp4endaudioinfoarr_;
}

// -------------------------------------------------------------------

// Mp4AudioInfo

// optional .pb.AudioInfo AudioInfo = 1;
inline bool Mp4AudioInfo::has_audioinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Mp4AudioInfo::set_has_audioinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Mp4AudioInfo::clear_has_audioinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Mp4AudioInfo::clear_audioinfo() {
  if (audioinfo_ != NULL) audioinfo_->::pb::AudioInfo::Clear();
  clear_has_audioinfo();
}
inline const ::pb::AudioInfo& Mp4AudioInfo::audioinfo() const {
  // @@protoc_insertion_point(field_get:pb.Mp4AudioInfo.AudioInfo)
  return audioinfo_ != NULL ? *audioinfo_ : *default_instance_->audioinfo_;
}
inline ::pb::AudioInfo* Mp4AudioInfo::mutable_audioinfo() {
  set_has_audioinfo();
  if (audioinfo_ == NULL) audioinfo_ = new ::pb::AudioInfo;
  // @@protoc_insertion_point(field_mutable:pb.Mp4AudioInfo.AudioInfo)
  return audioinfo_;
}
inline ::pb::AudioInfo* Mp4AudioInfo::release_audioinfo() {
  clear_has_audioinfo();
  ::pb::AudioInfo* temp = audioinfo_;
  audioinfo_ = NULL;
  return temp;
}
inline void Mp4AudioInfo::set_allocated_audioinfo(::pb::AudioInfo* audioinfo) {
  delete audioinfo_;
  audioinfo_ = audioinfo;
  if (audioinfo) {
    set_has_audioinfo();
  } else {
    clear_has_audioinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.Mp4AudioInfo.AudioInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fMp4Audio_2eproto__INCLUDED
