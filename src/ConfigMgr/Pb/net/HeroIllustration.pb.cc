// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/HeroIllustration.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/HeroIllustration.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* THeroIllustrationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroIllustrationGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroIllustrationActiveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationActiveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroIllustrationActiveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationActiveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroIllustrationUpgradeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationUpgradeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroIllustrationUpgradeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationUpgradeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroIllustrationGoldBreakReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationGoldBreakReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroIllustrationGoldBreakRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationGoldBreakRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroIllustrationWhiteGoldBreakReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationWhiteGoldBreakReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroIllustrationWhiteGoldBreakRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationWhiteGoldBreakRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroIllustrationPurpleGoldBreakReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationPurpleGoldBreakReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* THeroIllustrationPurpleGoldBreakRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  THeroIllustrationPurpleGoldBreakRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fHeroIllustration_2eproto() {
  protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/HeroIllustration.proto");
  GOOGLE_CHECK(file != NULL);
  THeroIllustrationInfo_descriptor_ = file->message_type(0);
  static const int THeroIllustrationInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationInfo, illustrationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationInfo, illustrationlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationInfo, goldbreaktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationInfo, whitegoldbreaktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationInfo, purplegoldbreaktime_),
  };
  THeroIllustrationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationInfo_descriptor_,
      THeroIllustrationInfo::default_instance_,
      THeroIllustrationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationInfo));
  THeroIllustrationGetInfoRsp_descriptor_ = file->message_type(1);
  static const int THeroIllustrationGetInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationGetInfoRsp, illustrationarr_),
  };
  THeroIllustrationGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationGetInfoRsp_descriptor_,
      THeroIllustrationGetInfoRsp::default_instance_,
      THeroIllustrationGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationGetInfoRsp));
  THeroIllustrationActiveReq_descriptor_ = file->message_type(2);
  static const int THeroIllustrationActiveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationActiveReq, illustrationid_),
  };
  THeroIllustrationActiveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationActiveReq_descriptor_,
      THeroIllustrationActiveReq::default_instance_,
      THeroIllustrationActiveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationActiveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationActiveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationActiveReq));
  THeroIllustrationActiveRsp_descriptor_ = file->message_type(3);
  static const int THeroIllustrationActiveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationActiveRsp, illustrationinfo_),
  };
  THeroIllustrationActiveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationActiveRsp_descriptor_,
      THeroIllustrationActiveRsp::default_instance_,
      THeroIllustrationActiveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationActiveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationActiveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationActiveRsp));
  THeroIllustrationUpgradeReq_descriptor_ = file->message_type(4);
  static const int THeroIllustrationUpgradeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationUpgradeReq, illustrationid_),
  };
  THeroIllustrationUpgradeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationUpgradeReq_descriptor_,
      THeroIllustrationUpgradeReq::default_instance_,
      THeroIllustrationUpgradeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationUpgradeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationUpgradeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationUpgradeReq));
  THeroIllustrationUpgradeRsp_descriptor_ = file->message_type(5);
  static const int THeroIllustrationUpgradeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationUpgradeRsp, illustrationinfo_),
  };
  THeroIllustrationUpgradeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationUpgradeRsp_descriptor_,
      THeroIllustrationUpgradeRsp::default_instance_,
      THeroIllustrationUpgradeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationUpgradeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationUpgradeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationUpgradeRsp));
  THeroIllustrationGoldBreakReq_descriptor_ = file->message_type(6);
  static const int THeroIllustrationGoldBreakReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationGoldBreakReq, illustrationid_),
  };
  THeroIllustrationGoldBreakReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationGoldBreakReq_descriptor_,
      THeroIllustrationGoldBreakReq::default_instance_,
      THeroIllustrationGoldBreakReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationGoldBreakReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationGoldBreakReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationGoldBreakReq));
  THeroIllustrationGoldBreakRsp_descriptor_ = file->message_type(7);
  static const int THeroIllustrationGoldBreakRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationGoldBreakRsp, illustrationinfo_),
  };
  THeroIllustrationGoldBreakRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationGoldBreakRsp_descriptor_,
      THeroIllustrationGoldBreakRsp::default_instance_,
      THeroIllustrationGoldBreakRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationGoldBreakRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationGoldBreakRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationGoldBreakRsp));
  THeroIllustrationWhiteGoldBreakReq_descriptor_ = file->message_type(8);
  static const int THeroIllustrationWhiteGoldBreakReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationWhiteGoldBreakReq, illustrationid_),
  };
  THeroIllustrationWhiteGoldBreakReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationWhiteGoldBreakReq_descriptor_,
      THeroIllustrationWhiteGoldBreakReq::default_instance_,
      THeroIllustrationWhiteGoldBreakReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationWhiteGoldBreakReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationWhiteGoldBreakReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationWhiteGoldBreakReq));
  THeroIllustrationWhiteGoldBreakRsp_descriptor_ = file->message_type(9);
  static const int THeroIllustrationWhiteGoldBreakRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationWhiteGoldBreakRsp, illustrationinfo_),
  };
  THeroIllustrationWhiteGoldBreakRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationWhiteGoldBreakRsp_descriptor_,
      THeroIllustrationWhiteGoldBreakRsp::default_instance_,
      THeroIllustrationWhiteGoldBreakRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationWhiteGoldBreakRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationWhiteGoldBreakRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationWhiteGoldBreakRsp));
  THeroIllustrationPurpleGoldBreakReq_descriptor_ = file->message_type(10);
  static const int THeroIllustrationPurpleGoldBreakReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationPurpleGoldBreakReq, illustrationid_),
  };
  THeroIllustrationPurpleGoldBreakReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationPurpleGoldBreakReq_descriptor_,
      THeroIllustrationPurpleGoldBreakReq::default_instance_,
      THeroIllustrationPurpleGoldBreakReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationPurpleGoldBreakReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationPurpleGoldBreakReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationPurpleGoldBreakReq));
  THeroIllustrationPurpleGoldBreakRsp_descriptor_ = file->message_type(11);
  static const int THeroIllustrationPurpleGoldBreakRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationPurpleGoldBreakRsp, illustrationinfo_),
  };
  THeroIllustrationPurpleGoldBreakRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      THeroIllustrationPurpleGoldBreakRsp_descriptor_,
      THeroIllustrationPurpleGoldBreakRsp::default_instance_,
      THeroIllustrationPurpleGoldBreakRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationPurpleGoldBreakRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(THeroIllustrationPurpleGoldBreakRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(THeroIllustrationPurpleGoldBreakRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fHeroIllustration_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationInfo_descriptor_, &THeroIllustrationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationGetInfoRsp_descriptor_, &THeroIllustrationGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationActiveReq_descriptor_, &THeroIllustrationActiveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationActiveRsp_descriptor_, &THeroIllustrationActiveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationUpgradeReq_descriptor_, &THeroIllustrationUpgradeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationUpgradeRsp_descriptor_, &THeroIllustrationUpgradeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationGoldBreakReq_descriptor_, &THeroIllustrationGoldBreakReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationGoldBreakRsp_descriptor_, &THeroIllustrationGoldBreakRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationWhiteGoldBreakReq_descriptor_, &THeroIllustrationWhiteGoldBreakReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationWhiteGoldBreakRsp_descriptor_, &THeroIllustrationWhiteGoldBreakRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationPurpleGoldBreakReq_descriptor_, &THeroIllustrationPurpleGoldBreakReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    THeroIllustrationPurpleGoldBreakRsp_descriptor_, &THeroIllustrationPurpleGoldBreakRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fHeroIllustration_2eproto() {
  delete THeroIllustrationInfo::default_instance_;
  delete THeroIllustrationInfo_reflection_;
  delete THeroIllustrationGetInfoRsp::default_instance_;
  delete THeroIllustrationGetInfoRsp_reflection_;
  delete THeroIllustrationActiveReq::default_instance_;
  delete THeroIllustrationActiveReq_reflection_;
  delete THeroIllustrationActiveRsp::default_instance_;
  delete THeroIllustrationActiveRsp_reflection_;
  delete THeroIllustrationUpgradeReq::default_instance_;
  delete THeroIllustrationUpgradeReq_reflection_;
  delete THeroIllustrationUpgradeRsp::default_instance_;
  delete THeroIllustrationUpgradeRsp_reflection_;
  delete THeroIllustrationGoldBreakReq::default_instance_;
  delete THeroIllustrationGoldBreakReq_reflection_;
  delete THeroIllustrationGoldBreakRsp::default_instance_;
  delete THeroIllustrationGoldBreakRsp_reflection_;
  delete THeroIllustrationWhiteGoldBreakReq::default_instance_;
  delete THeroIllustrationWhiteGoldBreakReq_reflection_;
  delete THeroIllustrationWhiteGoldBreakRsp::default_instance_;
  delete THeroIllustrationWhiteGoldBreakRsp_reflection_;
  delete THeroIllustrationPurpleGoldBreakReq::default_instance_;
  delete THeroIllustrationPurpleGoldBreakReq_reflection_;
  delete THeroIllustrationPurpleGoldBreakRsp::default_instance_;
  delete THeroIllustrationPurpleGoldBreakRsp_reflection_;
}

void protobuf_AddDesc_net_2fHeroIllustration_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032net/HeroIllustration.proto\022\002pb\"\227\001\n\025THe"
    "roIllustrationInfo\022\026\n\016IllustrationId\030\001 \001"
    "(\r\022\026\n\016IllustrationLv\030\002 \001(\r\022\025\n\rGoldBreakT"
    "ime\030\003 \001(\004\022\032\n\022WhiteGoldBreakTime\030\004 \001(\004\022\033\n"
    "\023PurpleGoldBreakTime\030\005 \001(\004\"Q\n\033THeroIllus"
    "trationGetInfoRsp\0222\n\017IllustrationArr\030\001 \003"
    "(\0132\031.pb.THeroIllustrationInfo\"4\n\032THeroIl"
    "lustrationActiveReq\022\026\n\016IllustrationId\030\001 "
    "\001(\r\"Q\n\032THeroIllustrationActiveRsp\0223\n\020Ill"
    "ustrationInfo\030\001 \001(\0132\031.pb.THeroIllustrati"
    "onInfo\"5\n\033THeroIllustrationUpgradeReq\022\026\n"
    "\016IllustrationId\030\001 \001(\r\"R\n\033THeroIllustrati"
    "onUpgradeRsp\0223\n\020IllustrationInfo\030\001 \001(\0132\031"
    ".pb.THeroIllustrationInfo\"7\n\035THeroIllust"
    "rationGoldBreakReq\022\026\n\016IllustrationId\030\001 \001"
    "(\r\"T\n\035THeroIllustrationGoldBreakRsp\0223\n\020I"
    "llustrationInfo\030\001 \001(\0132\031.pb.THeroIllustra"
    "tionInfo\"<\n\"THeroIllustrationWhiteGoldBr"
    "eakReq\022\026\n\016IllustrationId\030\001 \001(\r\"Y\n\"THeroI"
    "llustrationWhiteGoldBreakRsp\0223\n\020Illustra"
    "tionInfo\030\001 \001(\0132\031.pb.THeroIllustrationInf"
    "o\"=\n#THeroIllustrationPurpleGoldBreakReq"
    "\022\026\n\016IllustrationId\030\001 \001(\r\"Z\n#THeroIllustr"
    "ationPurpleGoldBreakRsp\0223\n\020IllustrationI"
    "nfo\030\001 \001(\0132\031.pb.THeroIllustrationInfo", 996);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/HeroIllustration.proto", &protobuf_RegisterTypes);
  THeroIllustrationInfo::default_instance_ = new THeroIllustrationInfo();
  THeroIllustrationGetInfoRsp::default_instance_ = new THeroIllustrationGetInfoRsp();
  THeroIllustrationActiveReq::default_instance_ = new THeroIllustrationActiveReq();
  THeroIllustrationActiveRsp::default_instance_ = new THeroIllustrationActiveRsp();
  THeroIllustrationUpgradeReq::default_instance_ = new THeroIllustrationUpgradeReq();
  THeroIllustrationUpgradeRsp::default_instance_ = new THeroIllustrationUpgradeRsp();
  THeroIllustrationGoldBreakReq::default_instance_ = new THeroIllustrationGoldBreakReq();
  THeroIllustrationGoldBreakRsp::default_instance_ = new THeroIllustrationGoldBreakRsp();
  THeroIllustrationWhiteGoldBreakReq::default_instance_ = new THeroIllustrationWhiteGoldBreakReq();
  THeroIllustrationWhiteGoldBreakRsp::default_instance_ = new THeroIllustrationWhiteGoldBreakRsp();
  THeroIllustrationPurpleGoldBreakReq::default_instance_ = new THeroIllustrationPurpleGoldBreakReq();
  THeroIllustrationPurpleGoldBreakRsp::default_instance_ = new THeroIllustrationPurpleGoldBreakRsp();
  THeroIllustrationInfo::default_instance_->InitAsDefaultInstance();
  THeroIllustrationGetInfoRsp::default_instance_->InitAsDefaultInstance();
  THeroIllustrationActiveReq::default_instance_->InitAsDefaultInstance();
  THeroIllustrationActiveRsp::default_instance_->InitAsDefaultInstance();
  THeroIllustrationUpgradeReq::default_instance_->InitAsDefaultInstance();
  THeroIllustrationUpgradeRsp::default_instance_->InitAsDefaultInstance();
  THeroIllustrationGoldBreakReq::default_instance_->InitAsDefaultInstance();
  THeroIllustrationGoldBreakRsp::default_instance_->InitAsDefaultInstance();
  THeroIllustrationWhiteGoldBreakReq::default_instance_->InitAsDefaultInstance();
  THeroIllustrationWhiteGoldBreakRsp::default_instance_->InitAsDefaultInstance();
  THeroIllustrationPurpleGoldBreakReq::default_instance_->InitAsDefaultInstance();
  THeroIllustrationPurpleGoldBreakRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fHeroIllustration_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fHeroIllustration_2eproto {
  StaticDescriptorInitializer_net_2fHeroIllustration_2eproto() {
    protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  }
} static_descriptor_initializer_net_2fHeroIllustration_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationInfo::kIllustrationIdFieldNumber;
const int THeroIllustrationInfo::kIllustrationLvFieldNumber;
const int THeroIllustrationInfo::kGoldBreakTimeFieldNumber;
const int THeroIllustrationInfo::kWhiteGoldBreakTimeFieldNumber;
const int THeroIllustrationInfo::kPurpleGoldBreakTimeFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationInfo::THeroIllustrationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationInfo)
}

void THeroIllustrationInfo::InitAsDefaultInstance() {
}

THeroIllustrationInfo::THeroIllustrationInfo(const THeroIllustrationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationInfo)
}

void THeroIllustrationInfo::SharedCtor() {
  _cached_size_ = 0;
  illustrationid_ = 0u;
  illustrationlv_ = 0u;
  goldbreaktime_ = GOOGLE_ULONGLONG(0);
  whitegoldbreaktime_ = GOOGLE_ULONGLONG(0);
  purplegoldbreaktime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationInfo::~THeroIllustrationInfo() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationInfo)
  SharedDtor();
}

void THeroIllustrationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroIllustrationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationInfo_descriptor_;
}

const THeroIllustrationInfo& THeroIllustrationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationInfo* THeroIllustrationInfo::default_instance_ = NULL;

THeroIllustrationInfo* THeroIllustrationInfo::New() const {
  return new THeroIllustrationInfo;
}

void THeroIllustrationInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<THeroIllustrationInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(illustrationid_, purplegoldbreaktime_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IllustrationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &illustrationid_)));
          set_has_illustrationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IllustrationLv;
        break;
      }

      // optional uint32 IllustrationLv = 2;
      case 2: {
        if (tag == 16) {
         parse_IllustrationLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &illustrationlv_)));
          set_has_illustrationlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_GoldBreakTime;
        break;
      }

      // optional uint64 GoldBreakTime = 3;
      case 3: {
        if (tag == 24) {
         parse_GoldBreakTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &goldbreaktime_)));
          set_has_goldbreaktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_WhiteGoldBreakTime;
        break;
      }

      // optional uint64 WhiteGoldBreakTime = 4;
      case 4: {
        if (tag == 32) {
         parse_WhiteGoldBreakTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &whitegoldbreaktime_)));
          set_has_whitegoldbreaktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_PurpleGoldBreakTime;
        break;
      }

      // optional uint64 PurpleGoldBreakTime = 5;
      case 5: {
        if (tag == 40) {
         parse_PurpleGoldBreakTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &purplegoldbreaktime_)));
          set_has_purplegoldbreaktime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationInfo)
  return false;
#undef DO_
}

void THeroIllustrationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationInfo)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->illustrationid(), output);
  }

  // optional uint32 IllustrationLv = 2;
  if (has_illustrationlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->illustrationlv(), output);
  }

  // optional uint64 GoldBreakTime = 3;
  if (has_goldbreaktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->goldbreaktime(), output);
  }

  // optional uint64 WhiteGoldBreakTime = 4;
  if (has_whitegoldbreaktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->whitegoldbreaktime(), output);
  }

  // optional uint64 PurpleGoldBreakTime = 5;
  if (has_purplegoldbreaktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->purplegoldbreaktime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationInfo)
}

::google::protobuf::uint8* THeroIllustrationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationInfo)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->illustrationid(), target);
  }

  // optional uint32 IllustrationLv = 2;
  if (has_illustrationlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->illustrationlv(), target);
  }

  // optional uint64 GoldBreakTime = 3;
  if (has_goldbreaktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->goldbreaktime(), target);
  }

  // optional uint64 WhiteGoldBreakTime = 4;
  if (has_whitegoldbreaktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->whitegoldbreaktime(), target);
  }

  // optional uint64 PurpleGoldBreakTime = 5;
  if (has_purplegoldbreaktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->purplegoldbreaktime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationInfo)
  return target;
}

int THeroIllustrationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IllustrationId = 1;
    if (has_illustrationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->illustrationid());
    }

    // optional uint32 IllustrationLv = 2;
    if (has_illustrationlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->illustrationlv());
    }

    // optional uint64 GoldBreakTime = 3;
    if (has_goldbreaktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->goldbreaktime());
    }

    // optional uint64 WhiteGoldBreakTime = 4;
    if (has_whitegoldbreaktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->whitegoldbreaktime());
    }

    // optional uint64 PurpleGoldBreakTime = 5;
    if (has_purplegoldbreaktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->purplegoldbreaktime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationInfo::MergeFrom(const THeroIllustrationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationid()) {
      set_illustrationid(from.illustrationid());
    }
    if (from.has_illustrationlv()) {
      set_illustrationlv(from.illustrationlv());
    }
    if (from.has_goldbreaktime()) {
      set_goldbreaktime(from.goldbreaktime());
    }
    if (from.has_whitegoldbreaktime()) {
      set_whitegoldbreaktime(from.whitegoldbreaktime());
    }
    if (from.has_purplegoldbreaktime()) {
      set_purplegoldbreaktime(from.purplegoldbreaktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationInfo::CopyFrom(const THeroIllustrationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationInfo::IsInitialized() const {

  return true;
}

void THeroIllustrationInfo::Swap(THeroIllustrationInfo* other) {
  if (other != this) {
    std::swap(illustrationid_, other->illustrationid_);
    std::swap(illustrationlv_, other->illustrationlv_);
    std::swap(goldbreaktime_, other->goldbreaktime_);
    std::swap(whitegoldbreaktime_, other->whitegoldbreaktime_);
    std::swap(purplegoldbreaktime_, other->purplegoldbreaktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationInfo_descriptor_;
  metadata.reflection = THeroIllustrationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationGetInfoRsp::kIllustrationArrFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationGetInfoRsp::THeroIllustrationGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationGetInfoRsp)
}

void THeroIllustrationGetInfoRsp::InitAsDefaultInstance() {
}

THeroIllustrationGetInfoRsp::THeroIllustrationGetInfoRsp(const THeroIllustrationGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationGetInfoRsp)
}

void THeroIllustrationGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationGetInfoRsp::~THeroIllustrationGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationGetInfoRsp)
  SharedDtor();
}

void THeroIllustrationGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroIllustrationGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationGetInfoRsp_descriptor_;
}

const THeroIllustrationGetInfoRsp& THeroIllustrationGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationGetInfoRsp* THeroIllustrationGetInfoRsp::default_instance_ = NULL;

THeroIllustrationGetInfoRsp* THeroIllustrationGetInfoRsp::New() const {
  return new THeroIllustrationGetInfoRsp;
}

void THeroIllustrationGetInfoRsp::Clear() {
  illustrationarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.THeroIllustrationInfo IllustrationArr = 1;
      case 1: {
        if (tag == 10) {
         parse_IllustrationArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_illustrationarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_IllustrationArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationGetInfoRsp)
  return false;
#undef DO_
}

void THeroIllustrationGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationGetInfoRsp)
  // repeated .pb.THeroIllustrationInfo IllustrationArr = 1;
  for (int i = 0; i < this->illustrationarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->illustrationarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationGetInfoRsp)
}

::google::protobuf::uint8* THeroIllustrationGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationGetInfoRsp)
  // repeated .pb.THeroIllustrationInfo IllustrationArr = 1;
  for (int i = 0; i < this->illustrationarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->illustrationarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationGetInfoRsp)
  return target;
}

int THeroIllustrationGetInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.THeroIllustrationInfo IllustrationArr = 1;
  total_size += 1 * this->illustrationarr_size();
  for (int i = 0; i < this->illustrationarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->illustrationarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationGetInfoRsp::MergeFrom(const THeroIllustrationGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  illustrationarr_.MergeFrom(from.illustrationarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationGetInfoRsp::CopyFrom(const THeroIllustrationGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationGetInfoRsp::IsInitialized() const {

  return true;
}

void THeroIllustrationGetInfoRsp::Swap(THeroIllustrationGetInfoRsp* other) {
  if (other != this) {
    illustrationarr_.Swap(&other->illustrationarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationGetInfoRsp_descriptor_;
  metadata.reflection = THeroIllustrationGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationActiveReq::kIllustrationIdFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationActiveReq::THeroIllustrationActiveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationActiveReq)
}

void THeroIllustrationActiveReq::InitAsDefaultInstance() {
}

THeroIllustrationActiveReq::THeroIllustrationActiveReq(const THeroIllustrationActiveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationActiveReq)
}

void THeroIllustrationActiveReq::SharedCtor() {
  _cached_size_ = 0;
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationActiveReq::~THeroIllustrationActiveReq() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationActiveReq)
  SharedDtor();
}

void THeroIllustrationActiveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroIllustrationActiveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationActiveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationActiveReq_descriptor_;
}

const THeroIllustrationActiveReq& THeroIllustrationActiveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationActiveReq* THeroIllustrationActiveReq::default_instance_ = NULL;

THeroIllustrationActiveReq* THeroIllustrationActiveReq::New() const {
  return new THeroIllustrationActiveReq;
}

void THeroIllustrationActiveReq::Clear() {
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationActiveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationActiveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IllustrationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &illustrationid_)));
          set_has_illustrationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationActiveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationActiveReq)
  return false;
#undef DO_
}

void THeroIllustrationActiveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationActiveReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->illustrationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationActiveReq)
}

::google::protobuf::uint8* THeroIllustrationActiveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationActiveReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->illustrationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationActiveReq)
  return target;
}

int THeroIllustrationActiveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IllustrationId = 1;
    if (has_illustrationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->illustrationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationActiveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationActiveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationActiveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationActiveReq::MergeFrom(const THeroIllustrationActiveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationid()) {
      set_illustrationid(from.illustrationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationActiveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationActiveReq::CopyFrom(const THeroIllustrationActiveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationActiveReq::IsInitialized() const {

  return true;
}

void THeroIllustrationActiveReq::Swap(THeroIllustrationActiveReq* other) {
  if (other != this) {
    std::swap(illustrationid_, other->illustrationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationActiveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationActiveReq_descriptor_;
  metadata.reflection = THeroIllustrationActiveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationActiveRsp::kIllustrationInfoFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationActiveRsp::THeroIllustrationActiveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationActiveRsp)
}

void THeroIllustrationActiveRsp::InitAsDefaultInstance() {
  illustrationinfo_ = const_cast< ::pb::THeroIllustrationInfo*>(&::pb::THeroIllustrationInfo::default_instance());
}

THeroIllustrationActiveRsp::THeroIllustrationActiveRsp(const THeroIllustrationActiveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationActiveRsp)
}

void THeroIllustrationActiveRsp::SharedCtor() {
  _cached_size_ = 0;
  illustrationinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationActiveRsp::~THeroIllustrationActiveRsp() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationActiveRsp)
  SharedDtor();
}

void THeroIllustrationActiveRsp::SharedDtor() {
  if (this != default_instance_) {
    delete illustrationinfo_;
  }
}

void THeroIllustrationActiveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationActiveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationActiveRsp_descriptor_;
}

const THeroIllustrationActiveRsp& THeroIllustrationActiveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationActiveRsp* THeroIllustrationActiveRsp::default_instance_ = NULL;

THeroIllustrationActiveRsp* THeroIllustrationActiveRsp::New() const {
  return new THeroIllustrationActiveRsp;
}

void THeroIllustrationActiveRsp::Clear() {
  if (has_illustrationinfo()) {
    if (illustrationinfo_ != NULL) illustrationinfo_->::pb::THeroIllustrationInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationActiveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationActiveRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_illustrationinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationActiveRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationActiveRsp)
  return false;
#undef DO_
}

void THeroIllustrationActiveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationActiveRsp)
  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->illustrationinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationActiveRsp)
}

::google::protobuf::uint8* THeroIllustrationActiveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationActiveRsp)
  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->illustrationinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationActiveRsp)
  return target;
}

int THeroIllustrationActiveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
    if (has_illustrationinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->illustrationinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationActiveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationActiveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationActiveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationActiveRsp::MergeFrom(const THeroIllustrationActiveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationinfo()) {
      mutable_illustrationinfo()->::pb::THeroIllustrationInfo::MergeFrom(from.illustrationinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationActiveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationActiveRsp::CopyFrom(const THeroIllustrationActiveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationActiveRsp::IsInitialized() const {

  return true;
}

void THeroIllustrationActiveRsp::Swap(THeroIllustrationActiveRsp* other) {
  if (other != this) {
    std::swap(illustrationinfo_, other->illustrationinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationActiveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationActiveRsp_descriptor_;
  metadata.reflection = THeroIllustrationActiveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationUpgradeReq::kIllustrationIdFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationUpgradeReq::THeroIllustrationUpgradeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationUpgradeReq)
}

void THeroIllustrationUpgradeReq::InitAsDefaultInstance() {
}

THeroIllustrationUpgradeReq::THeroIllustrationUpgradeReq(const THeroIllustrationUpgradeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationUpgradeReq)
}

void THeroIllustrationUpgradeReq::SharedCtor() {
  _cached_size_ = 0;
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationUpgradeReq::~THeroIllustrationUpgradeReq() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationUpgradeReq)
  SharedDtor();
}

void THeroIllustrationUpgradeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroIllustrationUpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationUpgradeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationUpgradeReq_descriptor_;
}

const THeroIllustrationUpgradeReq& THeroIllustrationUpgradeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationUpgradeReq* THeroIllustrationUpgradeReq::default_instance_ = NULL;

THeroIllustrationUpgradeReq* THeroIllustrationUpgradeReq::New() const {
  return new THeroIllustrationUpgradeReq;
}

void THeroIllustrationUpgradeReq::Clear() {
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationUpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationUpgradeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IllustrationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &illustrationid_)));
          set_has_illustrationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationUpgradeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationUpgradeReq)
  return false;
#undef DO_
}

void THeroIllustrationUpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationUpgradeReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->illustrationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationUpgradeReq)
}

::google::protobuf::uint8* THeroIllustrationUpgradeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationUpgradeReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->illustrationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationUpgradeReq)
  return target;
}

int THeroIllustrationUpgradeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IllustrationId = 1;
    if (has_illustrationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->illustrationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationUpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationUpgradeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationUpgradeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationUpgradeReq::MergeFrom(const THeroIllustrationUpgradeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationid()) {
      set_illustrationid(from.illustrationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationUpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationUpgradeReq::CopyFrom(const THeroIllustrationUpgradeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationUpgradeReq::IsInitialized() const {

  return true;
}

void THeroIllustrationUpgradeReq::Swap(THeroIllustrationUpgradeReq* other) {
  if (other != this) {
    std::swap(illustrationid_, other->illustrationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationUpgradeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationUpgradeReq_descriptor_;
  metadata.reflection = THeroIllustrationUpgradeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationUpgradeRsp::kIllustrationInfoFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationUpgradeRsp::THeroIllustrationUpgradeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationUpgradeRsp)
}

void THeroIllustrationUpgradeRsp::InitAsDefaultInstance() {
  illustrationinfo_ = const_cast< ::pb::THeroIllustrationInfo*>(&::pb::THeroIllustrationInfo::default_instance());
}

THeroIllustrationUpgradeRsp::THeroIllustrationUpgradeRsp(const THeroIllustrationUpgradeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationUpgradeRsp)
}

void THeroIllustrationUpgradeRsp::SharedCtor() {
  _cached_size_ = 0;
  illustrationinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationUpgradeRsp::~THeroIllustrationUpgradeRsp() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationUpgradeRsp)
  SharedDtor();
}

void THeroIllustrationUpgradeRsp::SharedDtor() {
  if (this != default_instance_) {
    delete illustrationinfo_;
  }
}

void THeroIllustrationUpgradeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationUpgradeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationUpgradeRsp_descriptor_;
}

const THeroIllustrationUpgradeRsp& THeroIllustrationUpgradeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationUpgradeRsp* THeroIllustrationUpgradeRsp::default_instance_ = NULL;

THeroIllustrationUpgradeRsp* THeroIllustrationUpgradeRsp::New() const {
  return new THeroIllustrationUpgradeRsp;
}

void THeroIllustrationUpgradeRsp::Clear() {
  if (has_illustrationinfo()) {
    if (illustrationinfo_ != NULL) illustrationinfo_->::pb::THeroIllustrationInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationUpgradeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationUpgradeRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_illustrationinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationUpgradeRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationUpgradeRsp)
  return false;
#undef DO_
}

void THeroIllustrationUpgradeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationUpgradeRsp)
  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->illustrationinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationUpgradeRsp)
}

::google::protobuf::uint8* THeroIllustrationUpgradeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationUpgradeRsp)
  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->illustrationinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationUpgradeRsp)
  return target;
}

int THeroIllustrationUpgradeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
    if (has_illustrationinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->illustrationinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationUpgradeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationUpgradeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationUpgradeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationUpgradeRsp::MergeFrom(const THeroIllustrationUpgradeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationinfo()) {
      mutable_illustrationinfo()->::pb::THeroIllustrationInfo::MergeFrom(from.illustrationinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationUpgradeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationUpgradeRsp::CopyFrom(const THeroIllustrationUpgradeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationUpgradeRsp::IsInitialized() const {

  return true;
}

void THeroIllustrationUpgradeRsp::Swap(THeroIllustrationUpgradeRsp* other) {
  if (other != this) {
    std::swap(illustrationinfo_, other->illustrationinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationUpgradeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationUpgradeRsp_descriptor_;
  metadata.reflection = THeroIllustrationUpgradeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationGoldBreakReq::kIllustrationIdFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationGoldBreakReq::THeroIllustrationGoldBreakReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationGoldBreakReq)
}

void THeroIllustrationGoldBreakReq::InitAsDefaultInstance() {
}

THeroIllustrationGoldBreakReq::THeroIllustrationGoldBreakReq(const THeroIllustrationGoldBreakReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationGoldBreakReq)
}

void THeroIllustrationGoldBreakReq::SharedCtor() {
  _cached_size_ = 0;
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationGoldBreakReq::~THeroIllustrationGoldBreakReq() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationGoldBreakReq)
  SharedDtor();
}

void THeroIllustrationGoldBreakReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroIllustrationGoldBreakReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationGoldBreakReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationGoldBreakReq_descriptor_;
}

const THeroIllustrationGoldBreakReq& THeroIllustrationGoldBreakReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationGoldBreakReq* THeroIllustrationGoldBreakReq::default_instance_ = NULL;

THeroIllustrationGoldBreakReq* THeroIllustrationGoldBreakReq::New() const {
  return new THeroIllustrationGoldBreakReq;
}

void THeroIllustrationGoldBreakReq::Clear() {
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationGoldBreakReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationGoldBreakReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IllustrationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &illustrationid_)));
          set_has_illustrationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationGoldBreakReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationGoldBreakReq)
  return false;
#undef DO_
}

void THeroIllustrationGoldBreakReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationGoldBreakReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->illustrationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationGoldBreakReq)
}

::google::protobuf::uint8* THeroIllustrationGoldBreakReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationGoldBreakReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->illustrationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationGoldBreakReq)
  return target;
}

int THeroIllustrationGoldBreakReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IllustrationId = 1;
    if (has_illustrationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->illustrationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationGoldBreakReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationGoldBreakReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationGoldBreakReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationGoldBreakReq::MergeFrom(const THeroIllustrationGoldBreakReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationid()) {
      set_illustrationid(from.illustrationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationGoldBreakReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationGoldBreakReq::CopyFrom(const THeroIllustrationGoldBreakReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationGoldBreakReq::IsInitialized() const {

  return true;
}

void THeroIllustrationGoldBreakReq::Swap(THeroIllustrationGoldBreakReq* other) {
  if (other != this) {
    std::swap(illustrationid_, other->illustrationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationGoldBreakReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationGoldBreakReq_descriptor_;
  metadata.reflection = THeroIllustrationGoldBreakReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationGoldBreakRsp::kIllustrationInfoFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationGoldBreakRsp::THeroIllustrationGoldBreakRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationGoldBreakRsp)
}

void THeroIllustrationGoldBreakRsp::InitAsDefaultInstance() {
  illustrationinfo_ = const_cast< ::pb::THeroIllustrationInfo*>(&::pb::THeroIllustrationInfo::default_instance());
}

THeroIllustrationGoldBreakRsp::THeroIllustrationGoldBreakRsp(const THeroIllustrationGoldBreakRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationGoldBreakRsp)
}

void THeroIllustrationGoldBreakRsp::SharedCtor() {
  _cached_size_ = 0;
  illustrationinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationGoldBreakRsp::~THeroIllustrationGoldBreakRsp() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationGoldBreakRsp)
  SharedDtor();
}

void THeroIllustrationGoldBreakRsp::SharedDtor() {
  if (this != default_instance_) {
    delete illustrationinfo_;
  }
}

void THeroIllustrationGoldBreakRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationGoldBreakRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationGoldBreakRsp_descriptor_;
}

const THeroIllustrationGoldBreakRsp& THeroIllustrationGoldBreakRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationGoldBreakRsp* THeroIllustrationGoldBreakRsp::default_instance_ = NULL;

THeroIllustrationGoldBreakRsp* THeroIllustrationGoldBreakRsp::New() const {
  return new THeroIllustrationGoldBreakRsp;
}

void THeroIllustrationGoldBreakRsp::Clear() {
  if (has_illustrationinfo()) {
    if (illustrationinfo_ != NULL) illustrationinfo_->::pb::THeroIllustrationInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationGoldBreakRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationGoldBreakRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_illustrationinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationGoldBreakRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationGoldBreakRsp)
  return false;
#undef DO_
}

void THeroIllustrationGoldBreakRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationGoldBreakRsp)
  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->illustrationinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationGoldBreakRsp)
}

::google::protobuf::uint8* THeroIllustrationGoldBreakRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationGoldBreakRsp)
  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->illustrationinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationGoldBreakRsp)
  return target;
}

int THeroIllustrationGoldBreakRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
    if (has_illustrationinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->illustrationinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationGoldBreakRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationGoldBreakRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationGoldBreakRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationGoldBreakRsp::MergeFrom(const THeroIllustrationGoldBreakRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationinfo()) {
      mutable_illustrationinfo()->::pb::THeroIllustrationInfo::MergeFrom(from.illustrationinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationGoldBreakRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationGoldBreakRsp::CopyFrom(const THeroIllustrationGoldBreakRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationGoldBreakRsp::IsInitialized() const {

  return true;
}

void THeroIllustrationGoldBreakRsp::Swap(THeroIllustrationGoldBreakRsp* other) {
  if (other != this) {
    std::swap(illustrationinfo_, other->illustrationinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationGoldBreakRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationGoldBreakRsp_descriptor_;
  metadata.reflection = THeroIllustrationGoldBreakRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationWhiteGoldBreakReq::kIllustrationIdFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationWhiteGoldBreakReq::THeroIllustrationWhiteGoldBreakReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationWhiteGoldBreakReq)
}

void THeroIllustrationWhiteGoldBreakReq::InitAsDefaultInstance() {
}

THeroIllustrationWhiteGoldBreakReq::THeroIllustrationWhiteGoldBreakReq(const THeroIllustrationWhiteGoldBreakReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationWhiteGoldBreakReq)
}

void THeroIllustrationWhiteGoldBreakReq::SharedCtor() {
  _cached_size_ = 0;
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationWhiteGoldBreakReq::~THeroIllustrationWhiteGoldBreakReq() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationWhiteGoldBreakReq)
  SharedDtor();
}

void THeroIllustrationWhiteGoldBreakReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroIllustrationWhiteGoldBreakReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationWhiteGoldBreakReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationWhiteGoldBreakReq_descriptor_;
}

const THeroIllustrationWhiteGoldBreakReq& THeroIllustrationWhiteGoldBreakReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationWhiteGoldBreakReq* THeroIllustrationWhiteGoldBreakReq::default_instance_ = NULL;

THeroIllustrationWhiteGoldBreakReq* THeroIllustrationWhiteGoldBreakReq::New() const {
  return new THeroIllustrationWhiteGoldBreakReq;
}

void THeroIllustrationWhiteGoldBreakReq::Clear() {
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationWhiteGoldBreakReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationWhiteGoldBreakReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IllustrationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &illustrationid_)));
          set_has_illustrationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationWhiteGoldBreakReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationWhiteGoldBreakReq)
  return false;
#undef DO_
}

void THeroIllustrationWhiteGoldBreakReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationWhiteGoldBreakReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->illustrationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationWhiteGoldBreakReq)
}

::google::protobuf::uint8* THeroIllustrationWhiteGoldBreakReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationWhiteGoldBreakReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->illustrationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationWhiteGoldBreakReq)
  return target;
}

int THeroIllustrationWhiteGoldBreakReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IllustrationId = 1;
    if (has_illustrationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->illustrationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationWhiteGoldBreakReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationWhiteGoldBreakReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationWhiteGoldBreakReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationWhiteGoldBreakReq::MergeFrom(const THeroIllustrationWhiteGoldBreakReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationid()) {
      set_illustrationid(from.illustrationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationWhiteGoldBreakReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationWhiteGoldBreakReq::CopyFrom(const THeroIllustrationWhiteGoldBreakReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationWhiteGoldBreakReq::IsInitialized() const {

  return true;
}

void THeroIllustrationWhiteGoldBreakReq::Swap(THeroIllustrationWhiteGoldBreakReq* other) {
  if (other != this) {
    std::swap(illustrationid_, other->illustrationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationWhiteGoldBreakReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationWhiteGoldBreakReq_descriptor_;
  metadata.reflection = THeroIllustrationWhiteGoldBreakReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationWhiteGoldBreakRsp::kIllustrationInfoFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationWhiteGoldBreakRsp::THeroIllustrationWhiteGoldBreakRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationWhiteGoldBreakRsp)
}

void THeroIllustrationWhiteGoldBreakRsp::InitAsDefaultInstance() {
  illustrationinfo_ = const_cast< ::pb::THeroIllustrationInfo*>(&::pb::THeroIllustrationInfo::default_instance());
}

THeroIllustrationWhiteGoldBreakRsp::THeroIllustrationWhiteGoldBreakRsp(const THeroIllustrationWhiteGoldBreakRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationWhiteGoldBreakRsp)
}

void THeroIllustrationWhiteGoldBreakRsp::SharedCtor() {
  _cached_size_ = 0;
  illustrationinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationWhiteGoldBreakRsp::~THeroIllustrationWhiteGoldBreakRsp() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationWhiteGoldBreakRsp)
  SharedDtor();
}

void THeroIllustrationWhiteGoldBreakRsp::SharedDtor() {
  if (this != default_instance_) {
    delete illustrationinfo_;
  }
}

void THeroIllustrationWhiteGoldBreakRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationWhiteGoldBreakRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationWhiteGoldBreakRsp_descriptor_;
}

const THeroIllustrationWhiteGoldBreakRsp& THeroIllustrationWhiteGoldBreakRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationWhiteGoldBreakRsp* THeroIllustrationWhiteGoldBreakRsp::default_instance_ = NULL;

THeroIllustrationWhiteGoldBreakRsp* THeroIllustrationWhiteGoldBreakRsp::New() const {
  return new THeroIllustrationWhiteGoldBreakRsp;
}

void THeroIllustrationWhiteGoldBreakRsp::Clear() {
  if (has_illustrationinfo()) {
    if (illustrationinfo_ != NULL) illustrationinfo_->::pb::THeroIllustrationInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationWhiteGoldBreakRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationWhiteGoldBreakRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_illustrationinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationWhiteGoldBreakRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationWhiteGoldBreakRsp)
  return false;
#undef DO_
}

void THeroIllustrationWhiteGoldBreakRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationWhiteGoldBreakRsp)
  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->illustrationinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationWhiteGoldBreakRsp)
}

::google::protobuf::uint8* THeroIllustrationWhiteGoldBreakRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationWhiteGoldBreakRsp)
  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->illustrationinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationWhiteGoldBreakRsp)
  return target;
}

int THeroIllustrationWhiteGoldBreakRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
    if (has_illustrationinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->illustrationinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationWhiteGoldBreakRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationWhiteGoldBreakRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationWhiteGoldBreakRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationWhiteGoldBreakRsp::MergeFrom(const THeroIllustrationWhiteGoldBreakRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationinfo()) {
      mutable_illustrationinfo()->::pb::THeroIllustrationInfo::MergeFrom(from.illustrationinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationWhiteGoldBreakRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationWhiteGoldBreakRsp::CopyFrom(const THeroIllustrationWhiteGoldBreakRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationWhiteGoldBreakRsp::IsInitialized() const {

  return true;
}

void THeroIllustrationWhiteGoldBreakRsp::Swap(THeroIllustrationWhiteGoldBreakRsp* other) {
  if (other != this) {
    std::swap(illustrationinfo_, other->illustrationinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationWhiteGoldBreakRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationWhiteGoldBreakRsp_descriptor_;
  metadata.reflection = THeroIllustrationWhiteGoldBreakRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationPurpleGoldBreakReq::kIllustrationIdFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationPurpleGoldBreakReq::THeroIllustrationPurpleGoldBreakReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationPurpleGoldBreakReq)
}

void THeroIllustrationPurpleGoldBreakReq::InitAsDefaultInstance() {
}

THeroIllustrationPurpleGoldBreakReq::THeroIllustrationPurpleGoldBreakReq(const THeroIllustrationPurpleGoldBreakReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationPurpleGoldBreakReq)
}

void THeroIllustrationPurpleGoldBreakReq::SharedCtor() {
  _cached_size_ = 0;
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationPurpleGoldBreakReq::~THeroIllustrationPurpleGoldBreakReq() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationPurpleGoldBreakReq)
  SharedDtor();
}

void THeroIllustrationPurpleGoldBreakReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void THeroIllustrationPurpleGoldBreakReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationPurpleGoldBreakReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationPurpleGoldBreakReq_descriptor_;
}

const THeroIllustrationPurpleGoldBreakReq& THeroIllustrationPurpleGoldBreakReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationPurpleGoldBreakReq* THeroIllustrationPurpleGoldBreakReq::default_instance_ = NULL;

THeroIllustrationPurpleGoldBreakReq* THeroIllustrationPurpleGoldBreakReq::New() const {
  return new THeroIllustrationPurpleGoldBreakReq;
}

void THeroIllustrationPurpleGoldBreakReq::Clear() {
  illustrationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationPurpleGoldBreakReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationPurpleGoldBreakReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IllustrationId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &illustrationid_)));
          set_has_illustrationid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationPurpleGoldBreakReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationPurpleGoldBreakReq)
  return false;
#undef DO_
}

void THeroIllustrationPurpleGoldBreakReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationPurpleGoldBreakReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->illustrationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationPurpleGoldBreakReq)
}

::google::protobuf::uint8* THeroIllustrationPurpleGoldBreakReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationPurpleGoldBreakReq)
  // optional uint32 IllustrationId = 1;
  if (has_illustrationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->illustrationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationPurpleGoldBreakReq)
  return target;
}

int THeroIllustrationPurpleGoldBreakReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IllustrationId = 1;
    if (has_illustrationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->illustrationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationPurpleGoldBreakReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationPurpleGoldBreakReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationPurpleGoldBreakReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationPurpleGoldBreakReq::MergeFrom(const THeroIllustrationPurpleGoldBreakReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationid()) {
      set_illustrationid(from.illustrationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationPurpleGoldBreakReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationPurpleGoldBreakReq::CopyFrom(const THeroIllustrationPurpleGoldBreakReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationPurpleGoldBreakReq::IsInitialized() const {

  return true;
}

void THeroIllustrationPurpleGoldBreakReq::Swap(THeroIllustrationPurpleGoldBreakReq* other) {
  if (other != this) {
    std::swap(illustrationid_, other->illustrationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationPurpleGoldBreakReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationPurpleGoldBreakReq_descriptor_;
  metadata.reflection = THeroIllustrationPurpleGoldBreakReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int THeroIllustrationPurpleGoldBreakRsp::kIllustrationInfoFieldNumber;
#endif  // !_MSC_VER

THeroIllustrationPurpleGoldBreakRsp::THeroIllustrationPurpleGoldBreakRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.THeroIllustrationPurpleGoldBreakRsp)
}

void THeroIllustrationPurpleGoldBreakRsp::InitAsDefaultInstance() {
  illustrationinfo_ = const_cast< ::pb::THeroIllustrationInfo*>(&::pb::THeroIllustrationInfo::default_instance());
}

THeroIllustrationPurpleGoldBreakRsp::THeroIllustrationPurpleGoldBreakRsp(const THeroIllustrationPurpleGoldBreakRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.THeroIllustrationPurpleGoldBreakRsp)
}

void THeroIllustrationPurpleGoldBreakRsp::SharedCtor() {
  _cached_size_ = 0;
  illustrationinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

THeroIllustrationPurpleGoldBreakRsp::~THeroIllustrationPurpleGoldBreakRsp() {
  // @@protoc_insertion_point(destructor:pb.THeroIllustrationPurpleGoldBreakRsp)
  SharedDtor();
}

void THeroIllustrationPurpleGoldBreakRsp::SharedDtor() {
  if (this != default_instance_) {
    delete illustrationinfo_;
  }
}

void THeroIllustrationPurpleGoldBreakRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* THeroIllustrationPurpleGoldBreakRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return THeroIllustrationPurpleGoldBreakRsp_descriptor_;
}

const THeroIllustrationPurpleGoldBreakRsp& THeroIllustrationPurpleGoldBreakRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fHeroIllustration_2eproto();
  return *default_instance_;
}

THeroIllustrationPurpleGoldBreakRsp* THeroIllustrationPurpleGoldBreakRsp::default_instance_ = NULL;

THeroIllustrationPurpleGoldBreakRsp* THeroIllustrationPurpleGoldBreakRsp::New() const {
  return new THeroIllustrationPurpleGoldBreakRsp;
}

void THeroIllustrationPurpleGoldBreakRsp::Clear() {
  if (has_illustrationinfo()) {
    if (illustrationinfo_ != NULL) illustrationinfo_->::pb::THeroIllustrationInfo::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool THeroIllustrationPurpleGoldBreakRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.THeroIllustrationPurpleGoldBreakRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_illustrationinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.THeroIllustrationPurpleGoldBreakRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.THeroIllustrationPurpleGoldBreakRsp)
  return false;
#undef DO_
}

void THeroIllustrationPurpleGoldBreakRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.THeroIllustrationPurpleGoldBreakRsp)
  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->illustrationinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.THeroIllustrationPurpleGoldBreakRsp)
}

::google::protobuf::uint8* THeroIllustrationPurpleGoldBreakRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.THeroIllustrationPurpleGoldBreakRsp)
  // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
  if (has_illustrationinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->illustrationinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.THeroIllustrationPurpleGoldBreakRsp)
  return target;
}

int THeroIllustrationPurpleGoldBreakRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.THeroIllustrationInfo IllustrationInfo = 1;
    if (has_illustrationinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->illustrationinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void THeroIllustrationPurpleGoldBreakRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const THeroIllustrationPurpleGoldBreakRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const THeroIllustrationPurpleGoldBreakRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void THeroIllustrationPurpleGoldBreakRsp::MergeFrom(const THeroIllustrationPurpleGoldBreakRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_illustrationinfo()) {
      mutable_illustrationinfo()->::pb::THeroIllustrationInfo::MergeFrom(from.illustrationinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void THeroIllustrationPurpleGoldBreakRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void THeroIllustrationPurpleGoldBreakRsp::CopyFrom(const THeroIllustrationPurpleGoldBreakRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool THeroIllustrationPurpleGoldBreakRsp::IsInitialized() const {

  return true;
}

void THeroIllustrationPurpleGoldBreakRsp::Swap(THeroIllustrationPurpleGoldBreakRsp* other) {
  if (other != this) {
    std::swap(illustrationinfo_, other->illustrationinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata THeroIllustrationPurpleGoldBreakRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = THeroIllustrationPurpleGoldBreakRsp_descriptor_;
  metadata.reflection = THeroIllustrationPurpleGoldBreakRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
