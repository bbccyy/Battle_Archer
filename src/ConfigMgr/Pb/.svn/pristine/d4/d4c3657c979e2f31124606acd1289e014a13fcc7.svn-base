// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ViewServer.proto

#ifndef PROTOBUF_net_2fViewServer_2eproto__INCLUDED
#define PROTOBUF_net_2fViewServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/ViewScene.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fViewServer_2eproto();
void protobuf_AssignDesc_net_2fViewServer_2eproto();
void protobuf_ShutdownFile_net_2fViewServer_2eproto();

class TViewServerObjectInfo;
class TViewServerNotifyObjectEnter;
class TViewServerNotifyObjectLeave;
class TViewServerNotifyObjectChange;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TViewServerObjectInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewServer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewServerObjectInfo : public ::google::protobuf::Message {
 public:
  TViewServerObjectInfo();
  virtual ~TViewServerObjectInfo();

  TViewServerObjectInfo(const TViewServerObjectInfo& from);

  inline TViewServerObjectInfo& operator=(const TViewServerObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewServerObjectInfo& default_instance();

  void Swap(TViewServerObjectInfo* other);

  // implements Message ----------------------------------------------

  TViewServerObjectInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewServerObjectInfo& from);
  void MergeFrom(const TViewServerObjectInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewServerObjectInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TViewServerObjectInfo</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint32 Pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TViewServerObjectInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .pb.EViewSceneUserStatus Status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TViewServerObjectInfo</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneUserStatus status() const;
  inline void set_status(::pb::EViewSceneUserStatus value);

  // optional bytes InfoData = 5;
  inline bool has_infodata() const;
  inline void clear_infodata();
  static const int kInfoDataFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TViewServerObjectInfo</name>
  	<Function>
  		<name>infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& infodata() const;
  inline void set_infodata(const ::std::string& value);
  inline void set_infodata(const char* value);
  inline void set_infodata(const void* value, size_t size);
  inline ::std::string* mutable_infodata();
  inline ::std::string* release_infodata();
  inline void set_allocated_infodata(::std::string* infodata);

  // @@protoc_insertion_point(class_scope:pb.TViewServerObjectInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_infodata();
  inline void clear_has_infodata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 pos_;
  int status_;
  ::std::string* infodata_;
  friend void  protobuf_AddDesc_net_2fViewServer_2eproto();
  friend void protobuf_AssignDesc_net_2fViewServer_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewServer_2eproto();

  void InitAsDefaultInstance();
  static TViewServerObjectInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewServerNotifyObjectEnter</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewServer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewServerNotifyObjectEnter : public ::google::protobuf::Message {
 public:
  TViewServerNotifyObjectEnter();
  virtual ~TViewServerNotifyObjectEnter();

  TViewServerNotifyObjectEnter(const TViewServerNotifyObjectEnter& from);

  inline TViewServerNotifyObjectEnter& operator=(const TViewServerNotifyObjectEnter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewServerNotifyObjectEnter& default_instance();

  void Swap(TViewServerNotifyObjectEnter* other);

  // implements Message ----------------------------------------------

  TViewServerNotifyObjectEnter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewServerNotifyObjectEnter& from);
  void MergeFrom(const TViewServerNotifyObjectEnter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ViewName = 1;
  inline bool has_viewname() const;
  inline void clear_viewname();
  static const int kViewNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectEnter</name>
  	<Function>
  		<name>viewname</name>
  		<replaceName>ViewName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewname</name>
  		<replaceName>ViewName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewname</name>
  		<replaceName>ViewName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& viewname() const;
  inline void set_viewname(const ::std::string& value);
  inline void set_viewname(const char* value);
  inline void set_viewname(const char* value, size_t size);
  inline ::std::string* mutable_viewname();
  inline ::std::string* release_viewname();
  inline void set_allocated_viewname(::std::string* viewname);

  // optional string SceneName = 2;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kSceneNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectEnter</name>
  	<Function>
  		<name>scenename</name>
  		<replaceName>SceneName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenename</name>
  		<replaceName>SceneName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenename</name>
  		<replaceName>SceneName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // optional .pb.EViewSceneType ViewSceneType = 3;
  inline bool has_viewscenetype() const;
  inline void clear_viewscenetype();
  static const int kViewSceneTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectEnter</name>
  	<Function>
  		<name>viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneType viewscenetype() const;
  inline void set_viewscenetype(::pb::EViewSceneType value);

  // optional uint64 ViewSceneId = 4;
  inline bool has_viewsceneid() const;
  inline void clear_viewsceneid();
  static const int kViewSceneIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectEnter</name>
  	<Function>
  		<name>viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 viewsceneid() const;
  inline void set_viewsceneid(::google::protobuf::uint64 value);

  // repeated .pb.TViewServerObjectInfo ObjectArr = 5;
  inline int objectarr_size() const;
  inline void clear_objectarr();
  static const int kObjectArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectEnter</name>
  	<Function>
  		<name>objectarr</name>
  		<replaceName>ObjectArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_objectarr</name>
  		<replaceName>ObjectArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_objectarr</name>
  		<replaceName>ObjectArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_objectarr</name>
  		<replaceName>ObjectArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>objectarr_size</name>
  		<replaceName>ObjectArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TViewServerObjectInfo& objectarr(int index) const;
  inline ::pb::TViewServerObjectInfo* mutable_objectarr(int index);
  inline ::pb::TViewServerObjectInfo* add_objectarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TViewServerObjectInfo >&
      objectarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TViewServerObjectInfo >*
      mutable_objectarr();

  // @@protoc_insertion_point(class_scope:pb.TViewServerNotifyObjectEnter)
 private:
  inline void set_has_viewname();
  inline void clear_has_viewname();
  inline void set_has_scenename();
  inline void clear_has_scenename();
  inline void set_has_viewscenetype();
  inline void clear_has_viewscenetype();
  inline void set_has_viewsceneid();
  inline void clear_has_viewsceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* viewname_;
  ::std::string* scenename_;
  ::google::protobuf::uint64 viewsceneid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TViewServerObjectInfo > objectarr_;
  int viewscenetype_;
  friend void  protobuf_AddDesc_net_2fViewServer_2eproto();
  friend void protobuf_AssignDesc_net_2fViewServer_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewServer_2eproto();

  void InitAsDefaultInstance();
  static TViewServerNotifyObjectEnter* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewServerNotifyObjectLeave</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewServer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewServerNotifyObjectLeave : public ::google::protobuf::Message {
 public:
  TViewServerNotifyObjectLeave();
  virtual ~TViewServerNotifyObjectLeave();

  TViewServerNotifyObjectLeave(const TViewServerNotifyObjectLeave& from);

  inline TViewServerNotifyObjectLeave& operator=(const TViewServerNotifyObjectLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewServerNotifyObjectLeave& default_instance();

  void Swap(TViewServerNotifyObjectLeave* other);

  // implements Message ----------------------------------------------

  TViewServerNotifyObjectLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewServerNotifyObjectLeave& from);
  void MergeFrom(const TViewServerNotifyObjectLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ViewName = 1;
  inline bool has_viewname() const;
  inline void clear_viewname();
  static const int kViewNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectLeave</name>
  	<Function>
  		<name>viewname</name>
  		<replaceName>ViewName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewname</name>
  		<replaceName>ViewName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewname</name>
  		<replaceName>ViewName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& viewname() const;
  inline void set_viewname(const ::std::string& value);
  inline void set_viewname(const char* value);
  inline void set_viewname(const char* value, size_t size);
  inline ::std::string* mutable_viewname();
  inline ::std::string* release_viewname();
  inline void set_allocated_viewname(::std::string* viewname);

  // optional string SceneName = 2;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kSceneNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectLeave</name>
  	<Function>
  		<name>scenename</name>
  		<replaceName>SceneName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenename</name>
  		<replaceName>SceneName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenename</name>
  		<replaceName>SceneName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // optional .pb.EViewSceneType ViewSceneType = 3;
  inline bool has_viewscenetype() const;
  inline void clear_viewscenetype();
  static const int kViewSceneTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectLeave</name>
  	<Function>
  		<name>viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneType viewscenetype() const;
  inline void set_viewscenetype(::pb::EViewSceneType value);

  // optional uint64 ViewSceneId = 4;
  inline bool has_viewsceneid() const;
  inline void clear_viewsceneid();
  static const int kViewSceneIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectLeave</name>
  	<Function>
  		<name>viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 viewsceneid() const;
  inline void set_viewsceneid(::google::protobuf::uint64 value);

  // repeated uint64 ArrId = 5;
  inline int arrid_size() const;
  inline void clear_arrid();
  static const int kArrIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectLeave</name>
  	<Function>
  		<name>arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrid</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrid_size</name>
  		<replaceName>ArrId</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 arrid(int index) const;
  inline void set_arrid(int index, ::google::protobuf::uint64 value);
  inline void add_arrid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      arrid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_arrid();

  // @@protoc_insertion_point(class_scope:pb.TViewServerNotifyObjectLeave)
 private:
  inline void set_has_viewname();
  inline void clear_has_viewname();
  inline void set_has_scenename();
  inline void clear_has_scenename();
  inline void set_has_viewscenetype();
  inline void clear_has_viewscenetype();
  inline void set_has_viewsceneid();
  inline void clear_has_viewsceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* viewname_;
  ::std::string* scenename_;
  ::google::protobuf::uint64 viewsceneid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > arrid_;
  int viewscenetype_;
  friend void  protobuf_AddDesc_net_2fViewServer_2eproto();
  friend void protobuf_AssignDesc_net_2fViewServer_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewServer_2eproto();

  void InitAsDefaultInstance();
  static TViewServerNotifyObjectLeave* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TViewServerNotifyObjectChange</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ViewServer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TViewServerNotifyObjectChange : public ::google::protobuf::Message {
 public:
  TViewServerNotifyObjectChange();
  virtual ~TViewServerNotifyObjectChange();

  TViewServerNotifyObjectChange(const TViewServerNotifyObjectChange& from);

  inline TViewServerNotifyObjectChange& operator=(const TViewServerNotifyObjectChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TViewServerNotifyObjectChange& default_instance();

  void Swap(TViewServerNotifyObjectChange* other);

  // implements Message ----------------------------------------------

  TViewServerNotifyObjectChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TViewServerNotifyObjectChange& from);
  void MergeFrom(const TViewServerNotifyObjectChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ViewName = 1;
  inline bool has_viewname() const;
  inline void clear_viewname();
  static const int kViewNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectChange</name>
  	<Function>
  		<name>viewname</name>
  		<replaceName>ViewName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewname</name>
  		<replaceName>ViewName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewname</name>
  		<replaceName>ViewName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& viewname() const;
  inline void set_viewname(const ::std::string& value);
  inline void set_viewname(const char* value);
  inline void set_viewname(const char* value, size_t size);
  inline ::std::string* mutable_viewname();
  inline ::std::string* release_viewname();
  inline void set_allocated_viewname(::std::string* viewname);

  // optional string SceneName = 2;
  inline bool has_scenename() const;
  inline void clear_scenename();
  static const int kSceneNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectChange</name>
  	<Function>
  		<name>scenename</name>
  		<replaceName>SceneName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenename</name>
  		<replaceName>SceneName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenename</name>
  		<replaceName>SceneName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& scenename() const;
  inline void set_scenename(const ::std::string& value);
  inline void set_scenename(const char* value);
  inline void set_scenename(const char* value, size_t size);
  inline ::std::string* mutable_scenename();
  inline ::std::string* release_scenename();
  inline void set_allocated_scenename(::std::string* scenename);

  // optional .pb.EViewSceneType ViewSceneType = 3;
  inline bool has_viewscenetype() const;
  inline void clear_viewscenetype();
  static const int kViewSceneTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectChange</name>
  	<Function>
  		<name>viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewscenetype</name>
  		<replaceName>ViewSceneType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneType viewscenetype() const;
  inline void set_viewscenetype(::pb::EViewSceneType value);

  // optional uint64 ViewSceneId = 4;
  inline bool has_viewsceneid() const;
  inline void clear_viewsceneid();
  static const int kViewSceneIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectChange</name>
  	<Function>
  		<name>viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_viewsceneid</name>
  		<replaceName>ViewSceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 viewsceneid() const;
  inline void set_viewsceneid(::google::protobuf::uint64 value);

  // optional uint64 Id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectChange</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 Pos = 6;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectChange</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .pb.EViewSceneUserStatus Status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectChange</name>
  	<Function>
  		<name>status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_status</name>
  		<replaceName>Status</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EViewSceneUserStatus status() const;
  inline void set_status(::pb::EViewSceneUserStatus value);

  // optional bytes InfoData = 8;
  inline bool has_infodata() const;
  inline void clear_infodata();
  static const int kInfoDataFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TViewServerNotifyObjectChange</name>
  	<Function>
  		<name>infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_infodata</name>
  		<replaceName>InfoData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& infodata() const;
  inline void set_infodata(const ::std::string& value);
  inline void set_infodata(const char* value);
  inline void set_infodata(const void* value, size_t size);
  inline ::std::string* mutable_infodata();
  inline ::std::string* release_infodata();
  inline void set_allocated_infodata(::std::string* infodata);

  // @@protoc_insertion_point(class_scope:pb.TViewServerNotifyObjectChange)
 private:
  inline void set_has_viewname();
  inline void clear_has_viewname();
  inline void set_has_scenename();
  inline void clear_has_scenename();
  inline void set_has_viewscenetype();
  inline void clear_has_viewscenetype();
  inline void set_has_viewsceneid();
  inline void clear_has_viewsceneid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_infodata();
  inline void clear_has_infodata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* viewname_;
  ::std::string* scenename_;
  ::google::protobuf::uint64 viewsceneid_;
  int viewscenetype_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint64 id_;
  ::std::string* infodata_;
  int status_;
  friend void  protobuf_AddDesc_net_2fViewServer_2eproto();
  friend void protobuf_AssignDesc_net_2fViewServer_2eproto();
  friend void protobuf_ShutdownFile_net_2fViewServer_2eproto();

  void InitAsDefaultInstance();
  static TViewServerNotifyObjectChange* default_instance_;
};
// ===================================================================


// ===================================================================

// TViewServerObjectInfo

// optional uint64 Id = 1;
inline bool TViewServerObjectInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewServerObjectInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewServerObjectInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewServerObjectInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 TViewServerObjectInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerObjectInfo.Id)
  return id_;
}
inline void TViewServerObjectInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerObjectInfo.Id)
}

// optional string ServerId = 2;
inline bool TViewServerObjectInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TViewServerObjectInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TViewServerObjectInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TViewServerObjectInfo::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TViewServerObjectInfo::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerObjectInfo.ServerId)
  return *serverid_;
}
inline void TViewServerObjectInfo::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TViewServerObjectInfo.ServerId)
}
inline void TViewServerObjectInfo::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TViewServerObjectInfo.ServerId)
}
inline void TViewServerObjectInfo::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TViewServerObjectInfo.ServerId)
}
inline ::std::string* TViewServerObjectInfo::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TViewServerObjectInfo.ServerId)
  return serverid_;
}
inline ::std::string* TViewServerObjectInfo::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TViewServerObjectInfo::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewServerObjectInfo.ServerId)
}

// optional uint32 Pos = 3;
inline bool TViewServerObjectInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TViewServerObjectInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TViewServerObjectInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TViewServerObjectInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TViewServerObjectInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerObjectInfo.Pos)
  return pos_;
}
inline void TViewServerObjectInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerObjectInfo.Pos)
}

// optional .pb.EViewSceneUserStatus Status = 4;
inline bool TViewServerObjectInfo::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TViewServerObjectInfo::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TViewServerObjectInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TViewServerObjectInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pb::EViewSceneUserStatus TViewServerObjectInfo::status() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerObjectInfo.Status)
  return static_cast< ::pb::EViewSceneUserStatus >(status_);
}
inline void TViewServerObjectInfo::set_status(::pb::EViewSceneUserStatus value) {
  assert(::pb::EViewSceneUserStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerObjectInfo.Status)
}

// optional bytes InfoData = 5;
inline bool TViewServerObjectInfo::has_infodata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TViewServerObjectInfo::set_has_infodata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TViewServerObjectInfo::clear_has_infodata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TViewServerObjectInfo::clear_infodata() {
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_->clear();
  }
  clear_has_infodata();
}
inline const ::std::string& TViewServerObjectInfo::infodata() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerObjectInfo.InfoData)
  return *infodata_;
}
inline void TViewServerObjectInfo::set_infodata(const ::std::string& value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TViewServerObjectInfo.InfoData)
}
inline void TViewServerObjectInfo::set_infodata(const char* value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TViewServerObjectInfo.InfoData)
}
inline void TViewServerObjectInfo::set_infodata(const void* value, size_t size) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TViewServerObjectInfo.InfoData)
}
inline ::std::string* TViewServerObjectInfo::mutable_infodata() {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TViewServerObjectInfo.InfoData)
  return infodata_;
}
inline ::std::string* TViewServerObjectInfo::release_infodata() {
  clear_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = infodata_;
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TViewServerObjectInfo::set_allocated_infodata(::std::string* infodata) {
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete infodata_;
  }
  if (infodata) {
    set_has_infodata();
    infodata_ = infodata;
  } else {
    clear_has_infodata();
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewServerObjectInfo.InfoData)
}

// -------------------------------------------------------------------

// TViewServerNotifyObjectEnter

// optional string ViewName = 1;
inline bool TViewServerNotifyObjectEnter::has_viewname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewServerNotifyObjectEnter::set_has_viewname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewServerNotifyObjectEnter::clear_has_viewname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewServerNotifyObjectEnter::clear_viewname() {
  if (viewname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_->clear();
  }
  clear_has_viewname();
}
inline const ::std::string& TViewServerNotifyObjectEnter::viewname() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectEnter.ViewName)
  return *viewname_;
}
inline void TViewServerNotifyObjectEnter::set_viewname(const ::std::string& value) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectEnter.ViewName)
}
inline void TViewServerNotifyObjectEnter::set_viewname(const char* value) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TViewServerNotifyObjectEnter.ViewName)
}
inline void TViewServerNotifyObjectEnter::set_viewname(const char* value, size_t size) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TViewServerNotifyObjectEnter.ViewName)
}
inline ::std::string* TViewServerNotifyObjectEnter::mutable_viewname() {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TViewServerNotifyObjectEnter.ViewName)
  return viewname_;
}
inline ::std::string* TViewServerNotifyObjectEnter::release_viewname() {
  clear_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = viewname_;
    viewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TViewServerNotifyObjectEnter::set_allocated_viewname(::std::string* viewname) {
  if (viewname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viewname_;
  }
  if (viewname) {
    set_has_viewname();
    viewname_ = viewname;
  } else {
    clear_has_viewname();
    viewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewServerNotifyObjectEnter.ViewName)
}

// optional string SceneName = 2;
inline bool TViewServerNotifyObjectEnter::has_scenename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TViewServerNotifyObjectEnter::set_has_scenename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TViewServerNotifyObjectEnter::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TViewServerNotifyObjectEnter::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& TViewServerNotifyObjectEnter::scenename() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectEnter.SceneName)
  return *scenename_;
}
inline void TViewServerNotifyObjectEnter::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectEnter.SceneName)
}
inline void TViewServerNotifyObjectEnter::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TViewServerNotifyObjectEnter.SceneName)
}
inline void TViewServerNotifyObjectEnter::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TViewServerNotifyObjectEnter.SceneName)
}
inline ::std::string* TViewServerNotifyObjectEnter::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TViewServerNotifyObjectEnter.SceneName)
  return scenename_;
}
inline ::std::string* TViewServerNotifyObjectEnter::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TViewServerNotifyObjectEnter::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewServerNotifyObjectEnter.SceneName)
}

// optional .pb.EViewSceneType ViewSceneType = 3;
inline bool TViewServerNotifyObjectEnter::has_viewscenetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TViewServerNotifyObjectEnter::set_has_viewscenetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TViewServerNotifyObjectEnter::clear_has_viewscenetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TViewServerNotifyObjectEnter::clear_viewscenetype() {
  viewscenetype_ = 1;
  clear_has_viewscenetype();
}
inline ::pb::EViewSceneType TViewServerNotifyObjectEnter::viewscenetype() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectEnter.ViewSceneType)
  return static_cast< ::pb::EViewSceneType >(viewscenetype_);
}
inline void TViewServerNotifyObjectEnter::set_viewscenetype(::pb::EViewSceneType value) {
  assert(::pb::EViewSceneType_IsValid(value));
  set_has_viewscenetype();
  viewscenetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectEnter.ViewSceneType)
}

// optional uint64 ViewSceneId = 4;
inline bool TViewServerNotifyObjectEnter::has_viewsceneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TViewServerNotifyObjectEnter::set_has_viewsceneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TViewServerNotifyObjectEnter::clear_has_viewsceneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TViewServerNotifyObjectEnter::clear_viewsceneid() {
  viewsceneid_ = GOOGLE_ULONGLONG(0);
  clear_has_viewsceneid();
}
inline ::google::protobuf::uint64 TViewServerNotifyObjectEnter::viewsceneid() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectEnter.ViewSceneId)
  return viewsceneid_;
}
inline void TViewServerNotifyObjectEnter::set_viewsceneid(::google::protobuf::uint64 value) {
  set_has_viewsceneid();
  viewsceneid_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectEnter.ViewSceneId)
}

// repeated .pb.TViewServerObjectInfo ObjectArr = 5;
inline int TViewServerNotifyObjectEnter::objectarr_size() const {
  return objectarr_.size();
}
inline void TViewServerNotifyObjectEnter::clear_objectarr() {
  objectarr_.Clear();
}
inline const ::pb::TViewServerObjectInfo& TViewServerNotifyObjectEnter::objectarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectEnter.ObjectArr)
  return objectarr_.Get(index);
}
inline ::pb::TViewServerObjectInfo* TViewServerNotifyObjectEnter::mutable_objectarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TViewServerNotifyObjectEnter.ObjectArr)
  return objectarr_.Mutable(index);
}
inline ::pb::TViewServerObjectInfo* TViewServerNotifyObjectEnter::add_objectarr() {
  // @@protoc_insertion_point(field_add:pb.TViewServerNotifyObjectEnter.ObjectArr)
  return objectarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TViewServerObjectInfo >&
TViewServerNotifyObjectEnter::objectarr() const {
  // @@protoc_insertion_point(field_list:pb.TViewServerNotifyObjectEnter.ObjectArr)
  return objectarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TViewServerObjectInfo >*
TViewServerNotifyObjectEnter::mutable_objectarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TViewServerNotifyObjectEnter.ObjectArr)
  return &objectarr_;
}

// -------------------------------------------------------------------

// TViewServerNotifyObjectLeave

// optional string ViewName = 1;
inline bool TViewServerNotifyObjectLeave::has_viewname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewServerNotifyObjectLeave::set_has_viewname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewServerNotifyObjectLeave::clear_has_viewname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewServerNotifyObjectLeave::clear_viewname() {
  if (viewname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_->clear();
  }
  clear_has_viewname();
}
inline const ::std::string& TViewServerNotifyObjectLeave::viewname() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectLeave.ViewName)
  return *viewname_;
}
inline void TViewServerNotifyObjectLeave::set_viewname(const ::std::string& value) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectLeave.ViewName)
}
inline void TViewServerNotifyObjectLeave::set_viewname(const char* value) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TViewServerNotifyObjectLeave.ViewName)
}
inline void TViewServerNotifyObjectLeave::set_viewname(const char* value, size_t size) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TViewServerNotifyObjectLeave.ViewName)
}
inline ::std::string* TViewServerNotifyObjectLeave::mutable_viewname() {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TViewServerNotifyObjectLeave.ViewName)
  return viewname_;
}
inline ::std::string* TViewServerNotifyObjectLeave::release_viewname() {
  clear_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = viewname_;
    viewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TViewServerNotifyObjectLeave::set_allocated_viewname(::std::string* viewname) {
  if (viewname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viewname_;
  }
  if (viewname) {
    set_has_viewname();
    viewname_ = viewname;
  } else {
    clear_has_viewname();
    viewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewServerNotifyObjectLeave.ViewName)
}

// optional string SceneName = 2;
inline bool TViewServerNotifyObjectLeave::has_scenename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TViewServerNotifyObjectLeave::set_has_scenename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TViewServerNotifyObjectLeave::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TViewServerNotifyObjectLeave::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& TViewServerNotifyObjectLeave::scenename() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectLeave.SceneName)
  return *scenename_;
}
inline void TViewServerNotifyObjectLeave::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectLeave.SceneName)
}
inline void TViewServerNotifyObjectLeave::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TViewServerNotifyObjectLeave.SceneName)
}
inline void TViewServerNotifyObjectLeave::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TViewServerNotifyObjectLeave.SceneName)
}
inline ::std::string* TViewServerNotifyObjectLeave::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TViewServerNotifyObjectLeave.SceneName)
  return scenename_;
}
inline ::std::string* TViewServerNotifyObjectLeave::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TViewServerNotifyObjectLeave::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewServerNotifyObjectLeave.SceneName)
}

// optional .pb.EViewSceneType ViewSceneType = 3;
inline bool TViewServerNotifyObjectLeave::has_viewscenetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TViewServerNotifyObjectLeave::set_has_viewscenetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TViewServerNotifyObjectLeave::clear_has_viewscenetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TViewServerNotifyObjectLeave::clear_viewscenetype() {
  viewscenetype_ = 1;
  clear_has_viewscenetype();
}
inline ::pb::EViewSceneType TViewServerNotifyObjectLeave::viewscenetype() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectLeave.ViewSceneType)
  return static_cast< ::pb::EViewSceneType >(viewscenetype_);
}
inline void TViewServerNotifyObjectLeave::set_viewscenetype(::pb::EViewSceneType value) {
  assert(::pb::EViewSceneType_IsValid(value));
  set_has_viewscenetype();
  viewscenetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectLeave.ViewSceneType)
}

// optional uint64 ViewSceneId = 4;
inline bool TViewServerNotifyObjectLeave::has_viewsceneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TViewServerNotifyObjectLeave::set_has_viewsceneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TViewServerNotifyObjectLeave::clear_has_viewsceneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TViewServerNotifyObjectLeave::clear_viewsceneid() {
  viewsceneid_ = GOOGLE_ULONGLONG(0);
  clear_has_viewsceneid();
}
inline ::google::protobuf::uint64 TViewServerNotifyObjectLeave::viewsceneid() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectLeave.ViewSceneId)
  return viewsceneid_;
}
inline void TViewServerNotifyObjectLeave::set_viewsceneid(::google::protobuf::uint64 value) {
  set_has_viewsceneid();
  viewsceneid_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectLeave.ViewSceneId)
}

// repeated uint64 ArrId = 5;
inline int TViewServerNotifyObjectLeave::arrid_size() const {
  return arrid_.size();
}
inline void TViewServerNotifyObjectLeave::clear_arrid() {
  arrid_.Clear();
}
inline ::google::protobuf::uint64 TViewServerNotifyObjectLeave::arrid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectLeave.ArrId)
  return arrid_.Get(index);
}
inline void TViewServerNotifyObjectLeave::set_arrid(int index, ::google::protobuf::uint64 value) {
  arrid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectLeave.ArrId)
}
inline void TViewServerNotifyObjectLeave::add_arrid(::google::protobuf::uint64 value) {
  arrid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TViewServerNotifyObjectLeave.ArrId)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TViewServerNotifyObjectLeave::arrid() const {
  // @@protoc_insertion_point(field_list:pb.TViewServerNotifyObjectLeave.ArrId)
  return arrid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TViewServerNotifyObjectLeave::mutable_arrid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TViewServerNotifyObjectLeave.ArrId)
  return &arrid_;
}

// -------------------------------------------------------------------

// TViewServerNotifyObjectChange

// optional string ViewName = 1;
inline bool TViewServerNotifyObjectChange::has_viewname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TViewServerNotifyObjectChange::set_has_viewname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TViewServerNotifyObjectChange::clear_has_viewname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TViewServerNotifyObjectChange::clear_viewname() {
  if (viewname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_->clear();
  }
  clear_has_viewname();
}
inline const ::std::string& TViewServerNotifyObjectChange::viewname() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectChange.ViewName)
  return *viewname_;
}
inline void TViewServerNotifyObjectChange::set_viewname(const ::std::string& value) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectChange.ViewName)
}
inline void TViewServerNotifyObjectChange::set_viewname(const char* value) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TViewServerNotifyObjectChange.ViewName)
}
inline void TViewServerNotifyObjectChange::set_viewname(const char* value, size_t size) {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  viewname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TViewServerNotifyObjectChange.ViewName)
}
inline ::std::string* TViewServerNotifyObjectChange::mutable_viewname() {
  set_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    viewname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TViewServerNotifyObjectChange.ViewName)
  return viewname_;
}
inline ::std::string* TViewServerNotifyObjectChange::release_viewname() {
  clear_has_viewname();
  if (viewname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = viewname_;
    viewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TViewServerNotifyObjectChange::set_allocated_viewname(::std::string* viewname) {
  if (viewname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete viewname_;
  }
  if (viewname) {
    set_has_viewname();
    viewname_ = viewname;
  } else {
    clear_has_viewname();
    viewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewServerNotifyObjectChange.ViewName)
}

// optional string SceneName = 2;
inline bool TViewServerNotifyObjectChange::has_scenename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TViewServerNotifyObjectChange::set_has_scenename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TViewServerNotifyObjectChange::clear_has_scenename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TViewServerNotifyObjectChange::clear_scenename() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_->clear();
  }
  clear_has_scenename();
}
inline const ::std::string& TViewServerNotifyObjectChange::scenename() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectChange.SceneName)
  return *scenename_;
}
inline void TViewServerNotifyObjectChange::set_scenename(const ::std::string& value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectChange.SceneName)
}
inline void TViewServerNotifyObjectChange::set_scenename(const char* value) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TViewServerNotifyObjectChange.SceneName)
}
inline void TViewServerNotifyObjectChange::set_scenename(const char* value, size_t size) {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  scenename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TViewServerNotifyObjectChange.SceneName)
}
inline ::std::string* TViewServerNotifyObjectChange::mutable_scenename() {
  set_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    scenename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TViewServerNotifyObjectChange.SceneName)
  return scenename_;
}
inline ::std::string* TViewServerNotifyObjectChange::release_scenename() {
  clear_has_scenename();
  if (scenename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = scenename_;
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TViewServerNotifyObjectChange::set_allocated_scenename(::std::string* scenename) {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (scenename) {
    set_has_scenename();
    scenename_ = scenename;
  } else {
    clear_has_scenename();
    scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewServerNotifyObjectChange.SceneName)
}

// optional .pb.EViewSceneType ViewSceneType = 3;
inline bool TViewServerNotifyObjectChange::has_viewscenetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TViewServerNotifyObjectChange::set_has_viewscenetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TViewServerNotifyObjectChange::clear_has_viewscenetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TViewServerNotifyObjectChange::clear_viewscenetype() {
  viewscenetype_ = 1;
  clear_has_viewscenetype();
}
inline ::pb::EViewSceneType TViewServerNotifyObjectChange::viewscenetype() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectChange.ViewSceneType)
  return static_cast< ::pb::EViewSceneType >(viewscenetype_);
}
inline void TViewServerNotifyObjectChange::set_viewscenetype(::pb::EViewSceneType value) {
  assert(::pb::EViewSceneType_IsValid(value));
  set_has_viewscenetype();
  viewscenetype_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectChange.ViewSceneType)
}

// optional uint64 ViewSceneId = 4;
inline bool TViewServerNotifyObjectChange::has_viewsceneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TViewServerNotifyObjectChange::set_has_viewsceneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TViewServerNotifyObjectChange::clear_has_viewsceneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TViewServerNotifyObjectChange::clear_viewsceneid() {
  viewsceneid_ = GOOGLE_ULONGLONG(0);
  clear_has_viewsceneid();
}
inline ::google::protobuf::uint64 TViewServerNotifyObjectChange::viewsceneid() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectChange.ViewSceneId)
  return viewsceneid_;
}
inline void TViewServerNotifyObjectChange::set_viewsceneid(::google::protobuf::uint64 value) {
  set_has_viewsceneid();
  viewsceneid_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectChange.ViewSceneId)
}

// optional uint64 Id = 5;
inline bool TViewServerNotifyObjectChange::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TViewServerNotifyObjectChange::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TViewServerNotifyObjectChange::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TViewServerNotifyObjectChange::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 TViewServerNotifyObjectChange::id() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectChange.Id)
  return id_;
}
inline void TViewServerNotifyObjectChange::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectChange.Id)
}

// optional uint32 Pos = 6;
inline bool TViewServerNotifyObjectChange::has_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TViewServerNotifyObjectChange::set_has_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TViewServerNotifyObjectChange::clear_has_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TViewServerNotifyObjectChange::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TViewServerNotifyObjectChange::pos() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectChange.Pos)
  return pos_;
}
inline void TViewServerNotifyObjectChange::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectChange.Pos)
}

// optional .pb.EViewSceneUserStatus Status = 7;
inline bool TViewServerNotifyObjectChange::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TViewServerNotifyObjectChange::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TViewServerNotifyObjectChange::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TViewServerNotifyObjectChange::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::pb::EViewSceneUserStatus TViewServerNotifyObjectChange::status() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectChange.Status)
  return static_cast< ::pb::EViewSceneUserStatus >(status_);
}
inline void TViewServerNotifyObjectChange::set_status(::pb::EViewSceneUserStatus value) {
  assert(::pb::EViewSceneUserStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectChange.Status)
}

// optional bytes InfoData = 8;
inline bool TViewServerNotifyObjectChange::has_infodata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TViewServerNotifyObjectChange::set_has_infodata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TViewServerNotifyObjectChange::clear_has_infodata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TViewServerNotifyObjectChange::clear_infodata() {
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_->clear();
  }
  clear_has_infodata();
}
inline const ::std::string& TViewServerNotifyObjectChange::infodata() const {
  // @@protoc_insertion_point(field_get:pb.TViewServerNotifyObjectChange.InfoData)
  return *infodata_;
}
inline void TViewServerNotifyObjectChange::set_infodata(const ::std::string& value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TViewServerNotifyObjectChange.InfoData)
}
inline void TViewServerNotifyObjectChange::set_infodata(const char* value) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TViewServerNotifyObjectChange.InfoData)
}
inline void TViewServerNotifyObjectChange::set_infodata(const void* value, size_t size) {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  infodata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TViewServerNotifyObjectChange.InfoData)
}
inline ::std::string* TViewServerNotifyObjectChange::mutable_infodata() {
  set_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    infodata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TViewServerNotifyObjectChange.InfoData)
  return infodata_;
}
inline ::std::string* TViewServerNotifyObjectChange::release_infodata() {
  clear_has_infodata();
  if (infodata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = infodata_;
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TViewServerNotifyObjectChange::set_allocated_infodata(::std::string* infodata) {
  if (infodata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete infodata_;
  }
  if (infodata) {
    set_has_infodata();
    infodata_ = infodata;
  } else {
    clear_has_infodata();
    infodata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TViewServerNotifyObjectChange.InfoData)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fViewServer_2eproto__INCLUDED
