// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/LocalBattleReport.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/LocalBattleReport.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TLocalBattleReportSimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalBattleReportSimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLocalReportGetInstanceReportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalReportGetInstanceReportReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLocalReportGetInstanceReportRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalReportGetInstanceReportRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLocalReportGetCampTowerReportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalReportGetCampTowerReportReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLocalReportGetCampTowerReportRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalReportGetCampTowerReportRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLocalReportGetTowerReportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalReportGetTowerReportReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLocalReportTowerReportCampSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalReportTowerReportCampSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLocalReportGetTowerReportRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalReportGetTowerReportRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLocalReportGetTowerHellReportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalReportGetTowerHellReportReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLocalReportGetTowerHellReportRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalReportGetTowerHellReportRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLocalReportInsertReportInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalReportInsertReportInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TLocalReportDeleteUserReportReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TLocalReportDeleteUserReportReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fLocalBattleReport_2eproto() {
  protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/LocalBattleReport.proto");
  GOOGLE_CHECK(file != NULL);
  TLocalBattleReportSimpleInfo_descriptor_ = file->message_type(0);
  static const int TLocalBattleReportSimpleInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, battletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, playerimageframetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, localid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, serverid_),
  };
  TLocalBattleReportSimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalBattleReportSimpleInfo_descriptor_,
      TLocalBattleReportSimpleInfo::default_instance_,
      TLocalBattleReportSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalBattleReportSimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalBattleReportSimpleInfo));
  TLocalReportGetInstanceReportReq_descriptor_ = file->message_type(1);
  static const int TLocalReportGetInstanceReportReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetInstanceReportReq, strongholdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetInstanceReportReq, reporttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetInstanceReportReq, campid_),
  };
  TLocalReportGetInstanceReportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalReportGetInstanceReportReq_descriptor_,
      TLocalReportGetInstanceReportReq::default_instance_,
      TLocalReportGetInstanceReportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetInstanceReportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetInstanceReportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalReportGetInstanceReportReq));
  TLocalReportGetInstanceReportRsp_descriptor_ = file->message_type(2);
  static const int TLocalReportGetInstanceReportRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetInstanceReportRsp, reportarr_),
  };
  TLocalReportGetInstanceReportRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalReportGetInstanceReportRsp_descriptor_,
      TLocalReportGetInstanceReportRsp::default_instance_,
      TLocalReportGetInstanceReportRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetInstanceReportRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetInstanceReportRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalReportGetInstanceReportRsp));
  TLocalReportGetCampTowerReportReq_descriptor_ = file->message_type(3);
  static const int TLocalReportGetCampTowerReportReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetCampTowerReportReq, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetCampTowerReportReq, layerid_),
  };
  TLocalReportGetCampTowerReportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalReportGetCampTowerReportReq_descriptor_,
      TLocalReportGetCampTowerReportReq::default_instance_,
      TLocalReportGetCampTowerReportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetCampTowerReportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetCampTowerReportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalReportGetCampTowerReportReq));
  TLocalReportGetCampTowerReportRsp_descriptor_ = file->message_type(4);
  static const int TLocalReportGetCampTowerReportRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetCampTowerReportRsp, reportarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetCampTowerReportRsp, recentreportarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetCampTowerReportRsp, extremereportarr_),
  };
  TLocalReportGetCampTowerReportRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalReportGetCampTowerReportRsp_descriptor_,
      TLocalReportGetCampTowerReportRsp::default_instance_,
      TLocalReportGetCampTowerReportRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetCampTowerReportRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetCampTowerReportRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalReportGetCampTowerReportRsp));
  TLocalReportGetTowerReportReq_descriptor_ = file->message_type(5);
  static const int TLocalReportGetTowerReportReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerReportReq, layerid_),
  };
  TLocalReportGetTowerReportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalReportGetTowerReportReq_descriptor_,
      TLocalReportGetTowerReportReq::default_instance_,
      TLocalReportGetTowerReportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerReportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerReportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalReportGetTowerReportReq));
  TLocalReportTowerReportCampSingle_descriptor_ = file->message_type(6);
  static const int TLocalReportTowerReportCampSingle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportTowerReportCampSingle, campid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportTowerReportCampSingle, reportarr_),
  };
  TLocalReportTowerReportCampSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalReportTowerReportCampSingle_descriptor_,
      TLocalReportTowerReportCampSingle::default_instance_,
      TLocalReportTowerReportCampSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportTowerReportCampSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportTowerReportCampSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalReportTowerReportCampSingle));
  TLocalReportGetTowerReportRsp_descriptor_ = file->message_type(7);
  static const int TLocalReportGetTowerReportRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerReportRsp, firstcampreportarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerReportRsp, recentlycampreportarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerReportRsp, fightforcemincampreportarr_),
  };
  TLocalReportGetTowerReportRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalReportGetTowerReportRsp_descriptor_,
      TLocalReportGetTowerReportRsp::default_instance_,
      TLocalReportGetTowerReportRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerReportRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerReportRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalReportGetTowerReportRsp));
  TLocalReportGetTowerHellReportReq_descriptor_ = file->message_type(8);
  static const int TLocalReportGetTowerHellReportReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerHellReportReq, layerid_),
  };
  TLocalReportGetTowerHellReportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalReportGetTowerHellReportReq_descriptor_,
      TLocalReportGetTowerHellReportReq::default_instance_,
      TLocalReportGetTowerHellReportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerHellReportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerHellReportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalReportGetTowerHellReportReq));
  TLocalReportGetTowerHellReportRsp_descriptor_ = file->message_type(9);
  static const int TLocalReportGetTowerHellReportRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerHellReportRsp, firstreportarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerHellReportRsp, recentlyreportarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerHellReportRsp, fightforceminreportarr_),
  };
  TLocalReportGetTowerHellReportRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalReportGetTowerHellReportRsp_descriptor_,
      TLocalReportGetTowerHellReportRsp::default_instance_,
      TLocalReportGetTowerHellReportRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerHellReportRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportGetTowerHellReportRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalReportGetTowerHellReportRsp));
  TLocalReportInsertReportInfoReq_descriptor_ = file->message_type(10);
  static const int TLocalReportInsertReportInfoReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportInsertReportInfoReq, moduleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportInsertReportInfoReq, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportInsertReportInfoReq, reporttypearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportInsertReportInfoReq, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportInsertReportInfoReq, simpleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportInsertReportInfoReq, battlebytes_),
  };
  TLocalReportInsertReportInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalReportInsertReportInfoReq_descriptor_,
      TLocalReportInsertReportInfoReq::default_instance_,
      TLocalReportInsertReportInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportInsertReportInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportInsertReportInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalReportInsertReportInfoReq));
  TLocalReportDeleteUserReportReq_descriptor_ = file->message_type(11);
  static const int TLocalReportDeleteUserReportReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportDeleteUserReportReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportDeleteUserReportReq, serverid_),
  };
  TLocalReportDeleteUserReportReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TLocalReportDeleteUserReportReq_descriptor_,
      TLocalReportDeleteUserReportReq::default_instance_,
      TLocalReportDeleteUserReportReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportDeleteUserReportReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TLocalReportDeleteUserReportReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TLocalReportDeleteUserReportReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fLocalBattleReport_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalBattleReportSimpleInfo_descriptor_, &TLocalBattleReportSimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalReportGetInstanceReportReq_descriptor_, &TLocalReportGetInstanceReportReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalReportGetInstanceReportRsp_descriptor_, &TLocalReportGetInstanceReportRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalReportGetCampTowerReportReq_descriptor_, &TLocalReportGetCampTowerReportReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalReportGetCampTowerReportRsp_descriptor_, &TLocalReportGetCampTowerReportRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalReportGetTowerReportReq_descriptor_, &TLocalReportGetTowerReportReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalReportTowerReportCampSingle_descriptor_, &TLocalReportTowerReportCampSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalReportGetTowerReportRsp_descriptor_, &TLocalReportGetTowerReportRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalReportGetTowerHellReportReq_descriptor_, &TLocalReportGetTowerHellReportReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalReportGetTowerHellReportRsp_descriptor_, &TLocalReportGetTowerHellReportRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalReportInsertReportInfoReq_descriptor_, &TLocalReportInsertReportInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TLocalReportDeleteUserReportReq_descriptor_, &TLocalReportDeleteUserReportReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto() {
  delete TLocalBattleReportSimpleInfo::default_instance_;
  delete TLocalBattleReportSimpleInfo_reflection_;
  delete TLocalReportGetInstanceReportReq::default_instance_;
  delete TLocalReportGetInstanceReportReq_reflection_;
  delete TLocalReportGetInstanceReportRsp::default_instance_;
  delete TLocalReportGetInstanceReportRsp_reflection_;
  delete TLocalReportGetCampTowerReportReq::default_instance_;
  delete TLocalReportGetCampTowerReportReq_reflection_;
  delete TLocalReportGetCampTowerReportRsp::default_instance_;
  delete TLocalReportGetCampTowerReportRsp_reflection_;
  delete TLocalReportGetTowerReportReq::default_instance_;
  delete TLocalReportGetTowerReportReq_reflection_;
  delete TLocalReportTowerReportCampSingle::default_instance_;
  delete TLocalReportTowerReportCampSingle_reflection_;
  delete TLocalReportGetTowerReportRsp::default_instance_;
  delete TLocalReportGetTowerReportRsp_reflection_;
  delete TLocalReportGetTowerHellReportReq::default_instance_;
  delete TLocalReportGetTowerHellReportReq_reflection_;
  delete TLocalReportGetTowerHellReportRsp::default_instance_;
  delete TLocalReportGetTowerHellReportRsp_reflection_;
  delete TLocalReportInsertReportInfoReq::default_instance_;
  delete TLocalReportInsertReportInfoReq_reflection_;
  delete TLocalReportDeleteUserReportReq::default_instance_;
  delete TLocalReportDeleteUserReportReq_reflection_;
}

void protobuf_AddDesc_net_2fLocalBattleReport_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033net/LocalBattleReport.proto\022\002pb\"\314\001\n\034TL"
    "ocalBattleReportSimpleInfo\022\013\n\003Rid\030\001 \001(\004\022"
    "\022\n\nBattleTime\030\002 \001(\004\022\013\n\003Uid\030\003 \001(\004\022\r\n\005Unam"
    "e\030\004 \001(\t\022\r\n\005Level\030\005 \001(\r\022\022\n\nFightForce\030\006 \001"
    "(\004\022\014\n\004Htid\030\007 \001(\r\022\033\n\023PlayerImageFrameTid\030"
    "\010 \001(\r\022\017\n\007LocalId\030\t \001(\t\022\020\n\010ServerId\030\n \001(\t"
    "\"\\\n TLocalReportGetInstanceReportReq\022\024\n\014"
    "StrongholdId\030\001 \001(\r\022\022\n\nReportType\030\002 \001(\r\022\016"
    "\n\006CampId\030\003 \001(\r\"W\n TLocalReportGetInstanc"
    "eReportRsp\0223\n\tReportArr\030\001 \003(\0132 .pb.TLoca"
    "lBattleReportSimpleInfo\"D\n!TLocalReportG"
    "etCampTowerReportReq\022\016\n\006CampId\030\001 \001(\r\022\017\n\007"
    "LayerId\030\002 \001(\r\"\317\001\n!TLocalReportGetCampTow"
    "erReportRsp\0223\n\tReportArr\030\001 \003(\0132 .pb.TLoc"
    "alBattleReportSimpleInfo\0229\n\017RecentReport"
    "Arr\030\002 \003(\0132 .pb.TLocalBattleReportSimpleI"
    "nfo\022:\n\020ExtremeReportArr\030\003 \003(\0132 .pb.TLoca"
    "lBattleReportSimpleInfo\"0\n\035TLocalReportG"
    "etTowerReportReq\022\017\n\007LayerId\030\001 \001(\r\"h\n!TLo"
    "calReportTowerReportCampSingle\022\016\n\006CampId"
    "\030\001 \001(\r\0223\n\tReportArr\030\002 \003(\0132 .pb.TLocalBat"
    "tleReportSimpleInfo\"\363\001\n\035TLocalReportGetT"
    "owerReportRsp\022A\n\022FirstCampReportArr\030\001 \003("
    "\0132%.pb.TLocalReportTowerReportCampSingle"
    "\022D\n\025RecentlyCampReportArr\030\002 \003(\0132%.pb.TLo"
    "calReportTowerReportCampSingle\022I\n\032FightF"
    "orceMinCampReportArr\030\003 \003(\0132%.pb.TLocalRe"
    "portTowerReportCampSingle\"4\n!TLocalRepor"
    "tGetTowerHellReportReq\022\017\n\007LayerId\030\001 \001(\r\""
    "\334\001\n!TLocalReportGetTowerHellReportRsp\0228\n"
    "\016FirstReportArr\030\001 \003(\0132 .pb.TLocalBattleR"
    "eportSimpleInfo\022;\n\021RecentlyReportArr\030\002 \003"
    "(\0132 .pb.TLocalBattleReportSimpleInfo\022@\n\026"
    "FightForceMinReportArr\030\003 \003(\0132 .pb.TLocal"
    "BattleReportSimpleInfo\"\271\001\n\037TLocalReportI"
    "nsertReportInfoReq\022\020\n\010ModuleId\030\001 \001(\004\022\022\n\n"
    "InstanceId\030\002 \001(\004\022\025\n\rReportTypeArr\030\003 \003(\004\022"
    "\016\n\006StarLv\030\004 \001(\r\0224\n\nSimpleInfo\030\005 \001(\0132 .pb"
    ".TLocalBattleReportSimpleInfo\022\023\n\013BattleB"
    "ytes\030\006 \001(\014\"@\n\037TLocalReportDeleteUserRepo"
    "rtReq\022\013\n\003Uid\030\001 \001(\004\022\020\n\010ServerId\030\002 \001(\t", 1636);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/LocalBattleReport.proto", &protobuf_RegisterTypes);
  TLocalBattleReportSimpleInfo::default_instance_ = new TLocalBattleReportSimpleInfo();
  TLocalReportGetInstanceReportReq::default_instance_ = new TLocalReportGetInstanceReportReq();
  TLocalReportGetInstanceReportRsp::default_instance_ = new TLocalReportGetInstanceReportRsp();
  TLocalReportGetCampTowerReportReq::default_instance_ = new TLocalReportGetCampTowerReportReq();
  TLocalReportGetCampTowerReportRsp::default_instance_ = new TLocalReportGetCampTowerReportRsp();
  TLocalReportGetTowerReportReq::default_instance_ = new TLocalReportGetTowerReportReq();
  TLocalReportTowerReportCampSingle::default_instance_ = new TLocalReportTowerReportCampSingle();
  TLocalReportGetTowerReportRsp::default_instance_ = new TLocalReportGetTowerReportRsp();
  TLocalReportGetTowerHellReportReq::default_instance_ = new TLocalReportGetTowerHellReportReq();
  TLocalReportGetTowerHellReportRsp::default_instance_ = new TLocalReportGetTowerHellReportRsp();
  TLocalReportInsertReportInfoReq::default_instance_ = new TLocalReportInsertReportInfoReq();
  TLocalReportDeleteUserReportReq::default_instance_ = new TLocalReportDeleteUserReportReq();
  TLocalBattleReportSimpleInfo::default_instance_->InitAsDefaultInstance();
  TLocalReportGetInstanceReportReq::default_instance_->InitAsDefaultInstance();
  TLocalReportGetInstanceReportRsp::default_instance_->InitAsDefaultInstance();
  TLocalReportGetCampTowerReportReq::default_instance_->InitAsDefaultInstance();
  TLocalReportGetCampTowerReportRsp::default_instance_->InitAsDefaultInstance();
  TLocalReportGetTowerReportReq::default_instance_->InitAsDefaultInstance();
  TLocalReportTowerReportCampSingle::default_instance_->InitAsDefaultInstance();
  TLocalReportGetTowerReportRsp::default_instance_->InitAsDefaultInstance();
  TLocalReportGetTowerHellReportReq::default_instance_->InitAsDefaultInstance();
  TLocalReportGetTowerHellReportRsp::default_instance_->InitAsDefaultInstance();
  TLocalReportInsertReportInfoReq::default_instance_->InitAsDefaultInstance();
  TLocalReportDeleteUserReportReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fLocalBattleReport_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fLocalBattleReport_2eproto {
  StaticDescriptorInitializer_net_2fLocalBattleReport_2eproto() {
    protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  }
} static_descriptor_initializer_net_2fLocalBattleReport_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TLocalBattleReportSimpleInfo::kRidFieldNumber;
const int TLocalBattleReportSimpleInfo::kBattleTimeFieldNumber;
const int TLocalBattleReportSimpleInfo::kUidFieldNumber;
const int TLocalBattleReportSimpleInfo::kUnameFieldNumber;
const int TLocalBattleReportSimpleInfo::kLevelFieldNumber;
const int TLocalBattleReportSimpleInfo::kFightForceFieldNumber;
const int TLocalBattleReportSimpleInfo::kHtidFieldNumber;
const int TLocalBattleReportSimpleInfo::kPlayerImageFrameTidFieldNumber;
const int TLocalBattleReportSimpleInfo::kLocalIdFieldNumber;
const int TLocalBattleReportSimpleInfo::kServerIdFieldNumber;
#endif  // !_MSC_VER

TLocalBattleReportSimpleInfo::TLocalBattleReportSimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalBattleReportSimpleInfo)
}

void TLocalBattleReportSimpleInfo::InitAsDefaultInstance() {
}

TLocalBattleReportSimpleInfo::TLocalBattleReportSimpleInfo(const TLocalBattleReportSimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalBattleReportSimpleInfo)
}

void TLocalBattleReportSimpleInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rid_ = GOOGLE_ULONGLONG(0);
  battletime_ = GOOGLE_ULONGLONG(0);
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  htid_ = 0u;
  playerimageframetid_ = 0u;
  localid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalBattleReportSimpleInfo::~TLocalBattleReportSimpleInfo() {
  // @@protoc_insertion_point(destructor:pb.TLocalBattleReportSimpleInfo)
  SharedDtor();
}

void TLocalBattleReportSimpleInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete localid_;
  }
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TLocalBattleReportSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalBattleReportSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalBattleReportSimpleInfo_descriptor_;
}

const TLocalBattleReportSimpleInfo& TLocalBattleReportSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalBattleReportSimpleInfo* TLocalBattleReportSimpleInfo::default_instance_ = NULL;

TLocalBattleReportSimpleInfo* TLocalBattleReportSimpleInfo::New() const {
  return new TLocalBattleReportSimpleInfo;
}

void TLocalBattleReportSimpleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLocalBattleReportSimpleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rid_, uid_);
    ZR_(fightforce_, htid_);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
    playerimageframetid_ = 0u;
  }
  if (_has_bits_[8 / 32] & 768) {
    if (has_localid()) {
      if (localid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        localid_->clear();
      }
    }
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalBattleReportSimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalBattleReportSimpleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Rid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BattleTime;
        break;
      }

      // optional uint64 BattleTime = 2;
      case 2: {
        if (tag == 16) {
         parse_BattleTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &battletime_)));
          set_has_battletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Uid;
        break;
      }

      // optional uint64 Uid = 3;
      case 3: {
        if (tag == 24) {
         parse_Uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_Uname;
        break;
      }

      // optional string Uname = 4;
      case 4: {
        if (tag == 34) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 5;
      case 5: {
        if (tag == 40) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 6;
      case 6: {
        if (tag == 48) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 7;
      case 7: {
        if (tag == 56) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_PlayerImageFrameTid;
        break;
      }

      // optional uint32 PlayerImageFrameTid = 8;
      case 8: {
        if (tag == 64) {
         parse_PlayerImageFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerimageframetid_)));
          set_has_playerimageframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_LocalId;
        break;
      }

      // optional string LocalId = 9;
      case 9: {
        if (tag == 74) {
         parse_LocalId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localid().data(), this->localid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "localid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 10;
      case 10: {
        if (tag == 82) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalBattleReportSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalBattleReportSimpleInfo)
  return false;
#undef DO_
}

void TLocalBattleReportSimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalBattleReportSimpleInfo)
  // optional uint64 Rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->rid(), output);
  }

  // optional uint64 BattleTime = 2;
  if (has_battletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->battletime(), output);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uid(), output);
  }

  // optional string Uname = 4;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uname(), output);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint64 FightForce = 6;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fightforce(), output);
  }

  // optional uint32 Htid = 7;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->htid(), output);
  }

  // optional uint32 PlayerImageFrameTid = 8;
  if (has_playerimageframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->playerimageframetid(), output);
  }

  // optional string LocalId = 9;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localid().data(), this->localid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "localid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->localid(), output);
  }

  // optional string ServerId = 10;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalBattleReportSimpleInfo)
}

::google::protobuf::uint8* TLocalBattleReportSimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalBattleReportSimpleInfo)
  // optional uint64 Rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->rid(), target);
  }

  // optional uint64 BattleTime = 2;
  if (has_battletime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->battletime(), target);
  }

  // optional uint64 Uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uid(), target);
  }

  // optional string Uname = 4;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uname(), target);
  }

  // optional uint32 Level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint64 FightForce = 6;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fightforce(), target);
  }

  // optional uint32 Htid = 7;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->htid(), target);
  }

  // optional uint32 PlayerImageFrameTid = 8;
  if (has_playerimageframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->playerimageframetid(), target);
  }

  // optional string LocalId = 9;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localid().data(), this->localid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "localid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->localid(), target);
  }

  // optional string ServerId = 10;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalBattleReportSimpleInfo)
  return target;
}

int TLocalBattleReportSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rid());
    }

    // optional uint64 BattleTime = 2;
    if (has_battletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->battletime());
    }

    // optional uint64 Uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 4;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 Level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 FightForce = 6;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 Htid = 7;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint32 PlayerImageFrameTid = 8;
    if (has_playerimageframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerimageframetid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string LocalId = 9;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localid());
    }

    // optional string ServerId = 10;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalBattleReportSimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalBattleReportSimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalBattleReportSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalBattleReportSimpleInfo::MergeFrom(const TLocalBattleReportSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_battletime()) {
      set_battletime(from.battletime());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_playerimageframetid()) {
      set_playerimageframetid(from.playerimageframetid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_localid()) {
      set_localid(from.localid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalBattleReportSimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalBattleReportSimpleInfo::CopyFrom(const TLocalBattleReportSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalBattleReportSimpleInfo::IsInitialized() const {

  return true;
}

void TLocalBattleReportSimpleInfo::Swap(TLocalBattleReportSimpleInfo* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(battletime_, other->battletime_);
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(level_, other->level_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(htid_, other->htid_);
    std::swap(playerimageframetid_, other->playerimageframetid_);
    std::swap(localid_, other->localid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalBattleReportSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalBattleReportSimpleInfo_descriptor_;
  metadata.reflection = TLocalBattleReportSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLocalReportGetInstanceReportReq::kStrongholdIdFieldNumber;
const int TLocalReportGetInstanceReportReq::kReportTypeFieldNumber;
const int TLocalReportGetInstanceReportReq::kCampIdFieldNumber;
#endif  // !_MSC_VER

TLocalReportGetInstanceReportReq::TLocalReportGetInstanceReportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalReportGetInstanceReportReq)
}

void TLocalReportGetInstanceReportReq::InitAsDefaultInstance() {
}

TLocalReportGetInstanceReportReq::TLocalReportGetInstanceReportReq(const TLocalReportGetInstanceReportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalReportGetInstanceReportReq)
}

void TLocalReportGetInstanceReportReq::SharedCtor() {
  _cached_size_ = 0;
  strongholdid_ = 0u;
  reporttype_ = 0u;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalReportGetInstanceReportReq::~TLocalReportGetInstanceReportReq() {
  // @@protoc_insertion_point(destructor:pb.TLocalReportGetInstanceReportReq)
  SharedDtor();
}

void TLocalReportGetInstanceReportReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLocalReportGetInstanceReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalReportGetInstanceReportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalReportGetInstanceReportReq_descriptor_;
}

const TLocalReportGetInstanceReportReq& TLocalReportGetInstanceReportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalReportGetInstanceReportReq* TLocalReportGetInstanceReportReq::default_instance_ = NULL;

TLocalReportGetInstanceReportReq* TLocalReportGetInstanceReportReq::New() const {
  return new TLocalReportGetInstanceReportReq;
}

void TLocalReportGetInstanceReportReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLocalReportGetInstanceReportReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(strongholdid_, campid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalReportGetInstanceReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalReportGetInstanceReportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 StrongholdId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strongholdid_)));
          set_has_strongholdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ReportType;
        break;
      }

      // optional uint32 ReportType = 2;
      case 2: {
        if (tag == 16) {
         parse_ReportType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reporttype_)));
          set_has_reporttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CampId;
        break;
      }

      // optional uint32 CampId = 3;
      case 3: {
        if (tag == 24) {
         parse_CampId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalReportGetInstanceReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalReportGetInstanceReportReq)
  return false;
#undef DO_
}

void TLocalReportGetInstanceReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalReportGetInstanceReportReq)
  // optional uint32 StrongholdId = 1;
  if (has_strongholdid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->strongholdid(), output);
  }

  // optional uint32 ReportType = 2;
  if (has_reporttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reporttype(), output);
  }

  // optional uint32 CampId = 3;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->campid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalReportGetInstanceReportReq)
}

::google::protobuf::uint8* TLocalReportGetInstanceReportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalReportGetInstanceReportReq)
  // optional uint32 StrongholdId = 1;
  if (has_strongholdid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->strongholdid(), target);
  }

  // optional uint32 ReportType = 2;
  if (has_reporttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reporttype(), target);
  }

  // optional uint32 CampId = 3;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->campid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalReportGetInstanceReportReq)
  return target;
}

int TLocalReportGetInstanceReportReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 StrongholdId = 1;
    if (has_strongholdid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strongholdid());
    }

    // optional uint32 ReportType = 2;
    if (has_reporttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reporttype());
    }

    // optional uint32 CampId = 3;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalReportGetInstanceReportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalReportGetInstanceReportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalReportGetInstanceReportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalReportGetInstanceReportReq::MergeFrom(const TLocalReportGetInstanceReportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strongholdid()) {
      set_strongholdid(from.strongholdid());
    }
    if (from.has_reporttype()) {
      set_reporttype(from.reporttype());
    }
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalReportGetInstanceReportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalReportGetInstanceReportReq::CopyFrom(const TLocalReportGetInstanceReportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalReportGetInstanceReportReq::IsInitialized() const {

  return true;
}

void TLocalReportGetInstanceReportReq::Swap(TLocalReportGetInstanceReportReq* other) {
  if (other != this) {
    std::swap(strongholdid_, other->strongholdid_);
    std::swap(reporttype_, other->reporttype_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalReportGetInstanceReportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalReportGetInstanceReportReq_descriptor_;
  metadata.reflection = TLocalReportGetInstanceReportReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLocalReportGetInstanceReportRsp::kReportArrFieldNumber;
#endif  // !_MSC_VER

TLocalReportGetInstanceReportRsp::TLocalReportGetInstanceReportRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalReportGetInstanceReportRsp)
}

void TLocalReportGetInstanceReportRsp::InitAsDefaultInstance() {
}

TLocalReportGetInstanceReportRsp::TLocalReportGetInstanceReportRsp(const TLocalReportGetInstanceReportRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalReportGetInstanceReportRsp)
}

void TLocalReportGetInstanceReportRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalReportGetInstanceReportRsp::~TLocalReportGetInstanceReportRsp() {
  // @@protoc_insertion_point(destructor:pb.TLocalReportGetInstanceReportRsp)
  SharedDtor();
}

void TLocalReportGetInstanceReportRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLocalReportGetInstanceReportRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalReportGetInstanceReportRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalReportGetInstanceReportRsp_descriptor_;
}

const TLocalReportGetInstanceReportRsp& TLocalReportGetInstanceReportRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalReportGetInstanceReportRsp* TLocalReportGetInstanceReportRsp::default_instance_ = NULL;

TLocalReportGetInstanceReportRsp* TLocalReportGetInstanceReportRsp::New() const {
  return new TLocalReportGetInstanceReportRsp;
}

void TLocalReportGetInstanceReportRsp::Clear() {
  reportarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalReportGetInstanceReportRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalReportGetInstanceReportRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ReportArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalReportGetInstanceReportRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalReportGetInstanceReportRsp)
  return false;
#undef DO_
}

void TLocalReportGetInstanceReportRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalReportGetInstanceReportRsp)
  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  for (int i = 0; i < this->reportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reportarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalReportGetInstanceReportRsp)
}

::google::protobuf::uint8* TLocalReportGetInstanceReportRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalReportGetInstanceReportRsp)
  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  for (int i = 0; i < this->reportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reportarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalReportGetInstanceReportRsp)
  return target;
}

int TLocalReportGetInstanceReportRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  total_size += 1 * this->reportarr_size();
  for (int i = 0; i < this->reportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reportarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalReportGetInstanceReportRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalReportGetInstanceReportRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalReportGetInstanceReportRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalReportGetInstanceReportRsp::MergeFrom(const TLocalReportGetInstanceReportRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reportarr_.MergeFrom(from.reportarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalReportGetInstanceReportRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalReportGetInstanceReportRsp::CopyFrom(const TLocalReportGetInstanceReportRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalReportGetInstanceReportRsp::IsInitialized() const {

  return true;
}

void TLocalReportGetInstanceReportRsp::Swap(TLocalReportGetInstanceReportRsp* other) {
  if (other != this) {
    reportarr_.Swap(&other->reportarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalReportGetInstanceReportRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalReportGetInstanceReportRsp_descriptor_;
  metadata.reflection = TLocalReportGetInstanceReportRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLocalReportGetCampTowerReportReq::kCampIdFieldNumber;
const int TLocalReportGetCampTowerReportReq::kLayerIdFieldNumber;
#endif  // !_MSC_VER

TLocalReportGetCampTowerReportReq::TLocalReportGetCampTowerReportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalReportGetCampTowerReportReq)
}

void TLocalReportGetCampTowerReportReq::InitAsDefaultInstance() {
}

TLocalReportGetCampTowerReportReq::TLocalReportGetCampTowerReportReq(const TLocalReportGetCampTowerReportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalReportGetCampTowerReportReq)
}

void TLocalReportGetCampTowerReportReq::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  layerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalReportGetCampTowerReportReq::~TLocalReportGetCampTowerReportReq() {
  // @@protoc_insertion_point(destructor:pb.TLocalReportGetCampTowerReportReq)
  SharedDtor();
}

void TLocalReportGetCampTowerReportReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLocalReportGetCampTowerReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalReportGetCampTowerReportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalReportGetCampTowerReportReq_descriptor_;
}

const TLocalReportGetCampTowerReportReq& TLocalReportGetCampTowerReportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalReportGetCampTowerReportReq* TLocalReportGetCampTowerReportReq::default_instance_ = NULL;

TLocalReportGetCampTowerReportReq* TLocalReportGetCampTowerReportReq::New() const {
  return new TLocalReportGetCampTowerReportReq;
}

void TLocalReportGetCampTowerReportReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLocalReportGetCampTowerReportReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(campid_, layerid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalReportGetCampTowerReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalReportGetCampTowerReportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CampId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LayerId;
        break;
      }

      // optional uint32 LayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_LayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalReportGetCampTowerReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalReportGetCampTowerReportReq)
  return false;
#undef DO_
}

void TLocalReportGetCampTowerReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalReportGetCampTowerReportReq)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // optional uint32 LayerId = 2;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalReportGetCampTowerReportReq)
}

::google::protobuf::uint8* TLocalReportGetCampTowerReportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalReportGetCampTowerReportReq)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // optional uint32 LayerId = 2;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalReportGetCampTowerReportReq)
  return target;
}

int TLocalReportGetCampTowerReportReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CampId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

    // optional uint32 LayerId = 2;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalReportGetCampTowerReportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalReportGetCampTowerReportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalReportGetCampTowerReportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalReportGetCampTowerReportReq::MergeFrom(const TLocalReportGetCampTowerReportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalReportGetCampTowerReportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalReportGetCampTowerReportReq::CopyFrom(const TLocalReportGetCampTowerReportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalReportGetCampTowerReportReq::IsInitialized() const {

  return true;
}

void TLocalReportGetCampTowerReportReq::Swap(TLocalReportGetCampTowerReportReq* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    std::swap(layerid_, other->layerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalReportGetCampTowerReportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalReportGetCampTowerReportReq_descriptor_;
  metadata.reflection = TLocalReportGetCampTowerReportReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLocalReportGetCampTowerReportRsp::kReportArrFieldNumber;
const int TLocalReportGetCampTowerReportRsp::kRecentReportArrFieldNumber;
const int TLocalReportGetCampTowerReportRsp::kExtremeReportArrFieldNumber;
#endif  // !_MSC_VER

TLocalReportGetCampTowerReportRsp::TLocalReportGetCampTowerReportRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalReportGetCampTowerReportRsp)
}

void TLocalReportGetCampTowerReportRsp::InitAsDefaultInstance() {
}

TLocalReportGetCampTowerReportRsp::TLocalReportGetCampTowerReportRsp(const TLocalReportGetCampTowerReportRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalReportGetCampTowerReportRsp)
}

void TLocalReportGetCampTowerReportRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalReportGetCampTowerReportRsp::~TLocalReportGetCampTowerReportRsp() {
  // @@protoc_insertion_point(destructor:pb.TLocalReportGetCampTowerReportRsp)
  SharedDtor();
}

void TLocalReportGetCampTowerReportRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLocalReportGetCampTowerReportRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalReportGetCampTowerReportRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalReportGetCampTowerReportRsp_descriptor_;
}

const TLocalReportGetCampTowerReportRsp& TLocalReportGetCampTowerReportRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalReportGetCampTowerReportRsp* TLocalReportGetCampTowerReportRsp::default_instance_ = NULL;

TLocalReportGetCampTowerReportRsp* TLocalReportGetCampTowerReportRsp::New() const {
  return new TLocalReportGetCampTowerReportRsp;
}

void TLocalReportGetCampTowerReportRsp::Clear() {
  reportarr_.Clear();
  recentreportarr_.Clear();
  extremereportarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalReportGetCampTowerReportRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalReportGetCampTowerReportRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ReportArr;
        if (input->ExpectTag(18)) goto parse_RecentReportArr;
        break;
      }

      // repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RecentReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recentreportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RecentReportArr;
        if (input->ExpectTag(26)) goto parse_ExtremeReportArr;
        break;
      }

      // repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
      case 3: {
        if (tag == 26) {
         parse_ExtremeReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_extremereportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ExtremeReportArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalReportGetCampTowerReportRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalReportGetCampTowerReportRsp)
  return false;
#undef DO_
}

void TLocalReportGetCampTowerReportRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalReportGetCampTowerReportRsp)
  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  for (int i = 0; i < this->reportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reportarr(i), output);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
  for (int i = 0; i < this->recentreportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recentreportarr(i), output);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
  for (int i = 0; i < this->extremereportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->extremereportarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalReportGetCampTowerReportRsp)
}

::google::protobuf::uint8* TLocalReportGetCampTowerReportRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalReportGetCampTowerReportRsp)
  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  for (int i = 0; i < this->reportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reportarr(i), target);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
  for (int i = 0; i < this->recentreportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recentreportarr(i), target);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
  for (int i = 0; i < this->extremereportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->extremereportarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalReportGetCampTowerReportRsp)
  return target;
}

int TLocalReportGetCampTowerReportRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 1;
  total_size += 1 * this->reportarr_size();
  for (int i = 0; i < this->reportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reportarr(i));
  }

  // repeated .pb.TLocalBattleReportSimpleInfo RecentReportArr = 2;
  total_size += 1 * this->recentreportarr_size();
  for (int i = 0; i < this->recentreportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recentreportarr(i));
  }

  // repeated .pb.TLocalBattleReportSimpleInfo ExtremeReportArr = 3;
  total_size += 1 * this->extremereportarr_size();
  for (int i = 0; i < this->extremereportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->extremereportarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalReportGetCampTowerReportRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalReportGetCampTowerReportRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalReportGetCampTowerReportRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalReportGetCampTowerReportRsp::MergeFrom(const TLocalReportGetCampTowerReportRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  reportarr_.MergeFrom(from.reportarr_);
  recentreportarr_.MergeFrom(from.recentreportarr_);
  extremereportarr_.MergeFrom(from.extremereportarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalReportGetCampTowerReportRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalReportGetCampTowerReportRsp::CopyFrom(const TLocalReportGetCampTowerReportRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalReportGetCampTowerReportRsp::IsInitialized() const {

  return true;
}

void TLocalReportGetCampTowerReportRsp::Swap(TLocalReportGetCampTowerReportRsp* other) {
  if (other != this) {
    reportarr_.Swap(&other->reportarr_);
    recentreportarr_.Swap(&other->recentreportarr_);
    extremereportarr_.Swap(&other->extremereportarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalReportGetCampTowerReportRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalReportGetCampTowerReportRsp_descriptor_;
  metadata.reflection = TLocalReportGetCampTowerReportRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLocalReportGetTowerReportReq::kLayerIdFieldNumber;
#endif  // !_MSC_VER

TLocalReportGetTowerReportReq::TLocalReportGetTowerReportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalReportGetTowerReportReq)
}

void TLocalReportGetTowerReportReq::InitAsDefaultInstance() {
}

TLocalReportGetTowerReportReq::TLocalReportGetTowerReportReq(const TLocalReportGetTowerReportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalReportGetTowerReportReq)
}

void TLocalReportGetTowerReportReq::SharedCtor() {
  _cached_size_ = 0;
  layerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalReportGetTowerReportReq::~TLocalReportGetTowerReportReq() {
  // @@protoc_insertion_point(destructor:pb.TLocalReportGetTowerReportReq)
  SharedDtor();
}

void TLocalReportGetTowerReportReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLocalReportGetTowerReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalReportGetTowerReportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalReportGetTowerReportReq_descriptor_;
}

const TLocalReportGetTowerReportReq& TLocalReportGetTowerReportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalReportGetTowerReportReq* TLocalReportGetTowerReportReq::default_instance_ = NULL;

TLocalReportGetTowerReportReq* TLocalReportGetTowerReportReq::New() const {
  return new TLocalReportGetTowerReportReq;
}

void TLocalReportGetTowerReportReq::Clear() {
  layerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalReportGetTowerReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalReportGetTowerReportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalReportGetTowerReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalReportGetTowerReportReq)
  return false;
#undef DO_
}

void TLocalReportGetTowerReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalReportGetTowerReportReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalReportGetTowerReportReq)
}

::google::protobuf::uint8* TLocalReportGetTowerReportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalReportGetTowerReportReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalReportGetTowerReportReq)
  return target;
}

int TLocalReportGetTowerReportReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerId = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalReportGetTowerReportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalReportGetTowerReportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalReportGetTowerReportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalReportGetTowerReportReq::MergeFrom(const TLocalReportGetTowerReportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalReportGetTowerReportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalReportGetTowerReportReq::CopyFrom(const TLocalReportGetTowerReportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalReportGetTowerReportReq::IsInitialized() const {

  return true;
}

void TLocalReportGetTowerReportReq::Swap(TLocalReportGetTowerReportReq* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalReportGetTowerReportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalReportGetTowerReportReq_descriptor_;
  metadata.reflection = TLocalReportGetTowerReportReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLocalReportTowerReportCampSingle::kCampIdFieldNumber;
const int TLocalReportTowerReportCampSingle::kReportArrFieldNumber;
#endif  // !_MSC_VER

TLocalReportTowerReportCampSingle::TLocalReportTowerReportCampSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalReportTowerReportCampSingle)
}

void TLocalReportTowerReportCampSingle::InitAsDefaultInstance() {
}

TLocalReportTowerReportCampSingle::TLocalReportTowerReportCampSingle(const TLocalReportTowerReportCampSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalReportTowerReportCampSingle)
}

void TLocalReportTowerReportCampSingle::SharedCtor() {
  _cached_size_ = 0;
  campid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalReportTowerReportCampSingle::~TLocalReportTowerReportCampSingle() {
  // @@protoc_insertion_point(destructor:pb.TLocalReportTowerReportCampSingle)
  SharedDtor();
}

void TLocalReportTowerReportCampSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLocalReportTowerReportCampSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalReportTowerReportCampSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalReportTowerReportCampSingle_descriptor_;
}

const TLocalReportTowerReportCampSingle& TLocalReportTowerReportCampSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalReportTowerReportCampSingle* TLocalReportTowerReportCampSingle::default_instance_ = NULL;

TLocalReportTowerReportCampSingle* TLocalReportTowerReportCampSingle::New() const {
  return new TLocalReportTowerReportCampSingle;
}

void TLocalReportTowerReportCampSingle::Clear() {
  campid_ = 0u;
  reportarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalReportTowerReportCampSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalReportTowerReportCampSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 CampId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReportArr;
        break;
      }

      // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ReportArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalReportTowerReportCampSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalReportTowerReportCampSingle)
  return false;
#undef DO_
}

void TLocalReportTowerReportCampSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalReportTowerReportCampSingle)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->campid(), output);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
  for (int i = 0; i < this->reportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reportarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalReportTowerReportCampSingle)
}

::google::protobuf::uint8* TLocalReportTowerReportCampSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalReportTowerReportCampSingle)
  // optional uint32 CampId = 1;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->campid(), target);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
  for (int i = 0; i < this->reportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reportarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalReportTowerReportCampSingle)
  return target;
}

int TLocalReportTowerReportCampSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 CampId = 1;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->campid());
    }

  }
  // repeated .pb.TLocalBattleReportSimpleInfo ReportArr = 2;
  total_size += 1 * this->reportarr_size();
  for (int i = 0; i < this->reportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reportarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalReportTowerReportCampSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalReportTowerReportCampSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalReportTowerReportCampSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalReportTowerReportCampSingle::MergeFrom(const TLocalReportTowerReportCampSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  reportarr_.MergeFrom(from.reportarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalReportTowerReportCampSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalReportTowerReportCampSingle::CopyFrom(const TLocalReportTowerReportCampSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalReportTowerReportCampSingle::IsInitialized() const {

  return true;
}

void TLocalReportTowerReportCampSingle::Swap(TLocalReportTowerReportCampSingle* other) {
  if (other != this) {
    std::swap(campid_, other->campid_);
    reportarr_.Swap(&other->reportarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalReportTowerReportCampSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalReportTowerReportCampSingle_descriptor_;
  metadata.reflection = TLocalReportTowerReportCampSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLocalReportGetTowerReportRsp::kFirstCampReportArrFieldNumber;
const int TLocalReportGetTowerReportRsp::kRecentlyCampReportArrFieldNumber;
const int TLocalReportGetTowerReportRsp::kFightForceMinCampReportArrFieldNumber;
#endif  // !_MSC_VER

TLocalReportGetTowerReportRsp::TLocalReportGetTowerReportRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalReportGetTowerReportRsp)
}

void TLocalReportGetTowerReportRsp::InitAsDefaultInstance() {
}

TLocalReportGetTowerReportRsp::TLocalReportGetTowerReportRsp(const TLocalReportGetTowerReportRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalReportGetTowerReportRsp)
}

void TLocalReportGetTowerReportRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalReportGetTowerReportRsp::~TLocalReportGetTowerReportRsp() {
  // @@protoc_insertion_point(destructor:pb.TLocalReportGetTowerReportRsp)
  SharedDtor();
}

void TLocalReportGetTowerReportRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLocalReportGetTowerReportRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalReportGetTowerReportRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalReportGetTowerReportRsp_descriptor_;
}

const TLocalReportGetTowerReportRsp& TLocalReportGetTowerReportRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalReportGetTowerReportRsp* TLocalReportGetTowerReportRsp::default_instance_ = NULL;

TLocalReportGetTowerReportRsp* TLocalReportGetTowerReportRsp::New() const {
  return new TLocalReportGetTowerReportRsp;
}

void TLocalReportGetTowerReportRsp::Clear() {
  firstcampreportarr_.Clear();
  recentlycampreportarr_.Clear();
  fightforcemincampreportarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalReportGetTowerReportRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalReportGetTowerReportRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TLocalReportTowerReportCampSingle FirstCampReportArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FirstCampReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firstcampreportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FirstCampReportArr;
        if (input->ExpectTag(18)) goto parse_RecentlyCampReportArr;
        break;
      }

      // repeated .pb.TLocalReportTowerReportCampSingle RecentlyCampReportArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RecentlyCampReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recentlycampreportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RecentlyCampReportArr;
        if (input->ExpectTag(26)) goto parse_FightForceMinCampReportArr;
        break;
      }

      // repeated .pb.TLocalReportTowerReportCampSingle FightForceMinCampReportArr = 3;
      case 3: {
        if (tag == 26) {
         parse_FightForceMinCampReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightforcemincampreportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FightForceMinCampReportArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalReportGetTowerReportRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalReportGetTowerReportRsp)
  return false;
#undef DO_
}

void TLocalReportGetTowerReportRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalReportGetTowerReportRsp)
  // repeated .pb.TLocalReportTowerReportCampSingle FirstCampReportArr = 1;
  for (int i = 0; i < this->firstcampreportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->firstcampreportarr(i), output);
  }

  // repeated .pb.TLocalReportTowerReportCampSingle RecentlyCampReportArr = 2;
  for (int i = 0; i < this->recentlycampreportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recentlycampreportarr(i), output);
  }

  // repeated .pb.TLocalReportTowerReportCampSingle FightForceMinCampReportArr = 3;
  for (int i = 0; i < this->fightforcemincampreportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fightforcemincampreportarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalReportGetTowerReportRsp)
}

::google::protobuf::uint8* TLocalReportGetTowerReportRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalReportGetTowerReportRsp)
  // repeated .pb.TLocalReportTowerReportCampSingle FirstCampReportArr = 1;
  for (int i = 0; i < this->firstcampreportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->firstcampreportarr(i), target);
  }

  // repeated .pb.TLocalReportTowerReportCampSingle RecentlyCampReportArr = 2;
  for (int i = 0; i < this->recentlycampreportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recentlycampreportarr(i), target);
  }

  // repeated .pb.TLocalReportTowerReportCampSingle FightForceMinCampReportArr = 3;
  for (int i = 0; i < this->fightforcemincampreportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fightforcemincampreportarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalReportGetTowerReportRsp)
  return target;
}

int TLocalReportGetTowerReportRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TLocalReportTowerReportCampSingle FirstCampReportArr = 1;
  total_size += 1 * this->firstcampreportarr_size();
  for (int i = 0; i < this->firstcampreportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firstcampreportarr(i));
  }

  // repeated .pb.TLocalReportTowerReportCampSingle RecentlyCampReportArr = 2;
  total_size += 1 * this->recentlycampreportarr_size();
  for (int i = 0; i < this->recentlycampreportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recentlycampreportarr(i));
  }

  // repeated .pb.TLocalReportTowerReportCampSingle FightForceMinCampReportArr = 3;
  total_size += 1 * this->fightforcemincampreportarr_size();
  for (int i = 0; i < this->fightforcemincampreportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightforcemincampreportarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalReportGetTowerReportRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalReportGetTowerReportRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalReportGetTowerReportRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalReportGetTowerReportRsp::MergeFrom(const TLocalReportGetTowerReportRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  firstcampreportarr_.MergeFrom(from.firstcampreportarr_);
  recentlycampreportarr_.MergeFrom(from.recentlycampreportarr_);
  fightforcemincampreportarr_.MergeFrom(from.fightforcemincampreportarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalReportGetTowerReportRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalReportGetTowerReportRsp::CopyFrom(const TLocalReportGetTowerReportRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalReportGetTowerReportRsp::IsInitialized() const {

  return true;
}

void TLocalReportGetTowerReportRsp::Swap(TLocalReportGetTowerReportRsp* other) {
  if (other != this) {
    firstcampreportarr_.Swap(&other->firstcampreportarr_);
    recentlycampreportarr_.Swap(&other->recentlycampreportarr_);
    fightforcemincampreportarr_.Swap(&other->fightforcemincampreportarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalReportGetTowerReportRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalReportGetTowerReportRsp_descriptor_;
  metadata.reflection = TLocalReportGetTowerReportRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLocalReportGetTowerHellReportReq::kLayerIdFieldNumber;
#endif  // !_MSC_VER

TLocalReportGetTowerHellReportReq::TLocalReportGetTowerHellReportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalReportGetTowerHellReportReq)
}

void TLocalReportGetTowerHellReportReq::InitAsDefaultInstance() {
}

TLocalReportGetTowerHellReportReq::TLocalReportGetTowerHellReportReq(const TLocalReportGetTowerHellReportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalReportGetTowerHellReportReq)
}

void TLocalReportGetTowerHellReportReq::SharedCtor() {
  _cached_size_ = 0;
  layerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalReportGetTowerHellReportReq::~TLocalReportGetTowerHellReportReq() {
  // @@protoc_insertion_point(destructor:pb.TLocalReportGetTowerHellReportReq)
  SharedDtor();
}

void TLocalReportGetTowerHellReportReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLocalReportGetTowerHellReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalReportGetTowerHellReportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalReportGetTowerHellReportReq_descriptor_;
}

const TLocalReportGetTowerHellReportReq& TLocalReportGetTowerHellReportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalReportGetTowerHellReportReq* TLocalReportGetTowerHellReportReq::default_instance_ = NULL;

TLocalReportGetTowerHellReportReq* TLocalReportGetTowerHellReportReq::New() const {
  return new TLocalReportGetTowerHellReportReq;
}

void TLocalReportGetTowerHellReportReq::Clear() {
  layerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalReportGetTowerHellReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalReportGetTowerHellReportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalReportGetTowerHellReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalReportGetTowerHellReportReq)
  return false;
#undef DO_
}

void TLocalReportGetTowerHellReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalReportGetTowerHellReportReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalReportGetTowerHellReportReq)
}

::google::protobuf::uint8* TLocalReportGetTowerHellReportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalReportGetTowerHellReportReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalReportGetTowerHellReportReq)
  return target;
}

int TLocalReportGetTowerHellReportReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerId = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalReportGetTowerHellReportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalReportGetTowerHellReportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalReportGetTowerHellReportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalReportGetTowerHellReportReq::MergeFrom(const TLocalReportGetTowerHellReportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalReportGetTowerHellReportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalReportGetTowerHellReportReq::CopyFrom(const TLocalReportGetTowerHellReportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalReportGetTowerHellReportReq::IsInitialized() const {

  return true;
}

void TLocalReportGetTowerHellReportReq::Swap(TLocalReportGetTowerHellReportReq* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalReportGetTowerHellReportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalReportGetTowerHellReportReq_descriptor_;
  metadata.reflection = TLocalReportGetTowerHellReportReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLocalReportGetTowerHellReportRsp::kFirstReportArrFieldNumber;
const int TLocalReportGetTowerHellReportRsp::kRecentlyReportArrFieldNumber;
const int TLocalReportGetTowerHellReportRsp::kFightForceMinReportArrFieldNumber;
#endif  // !_MSC_VER

TLocalReportGetTowerHellReportRsp::TLocalReportGetTowerHellReportRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalReportGetTowerHellReportRsp)
}

void TLocalReportGetTowerHellReportRsp::InitAsDefaultInstance() {
}

TLocalReportGetTowerHellReportRsp::TLocalReportGetTowerHellReportRsp(const TLocalReportGetTowerHellReportRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalReportGetTowerHellReportRsp)
}

void TLocalReportGetTowerHellReportRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalReportGetTowerHellReportRsp::~TLocalReportGetTowerHellReportRsp() {
  // @@protoc_insertion_point(destructor:pb.TLocalReportGetTowerHellReportRsp)
  SharedDtor();
}

void TLocalReportGetTowerHellReportRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TLocalReportGetTowerHellReportRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalReportGetTowerHellReportRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalReportGetTowerHellReportRsp_descriptor_;
}

const TLocalReportGetTowerHellReportRsp& TLocalReportGetTowerHellReportRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalReportGetTowerHellReportRsp* TLocalReportGetTowerHellReportRsp::default_instance_ = NULL;

TLocalReportGetTowerHellReportRsp* TLocalReportGetTowerHellReportRsp::New() const {
  return new TLocalReportGetTowerHellReportRsp;
}

void TLocalReportGetTowerHellReportRsp::Clear() {
  firstreportarr_.Clear();
  recentlyreportarr_.Clear();
  fightforceminreportarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalReportGetTowerHellReportRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalReportGetTowerHellReportRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TLocalBattleReportSimpleInfo FirstReportArr = 1;
      case 1: {
        if (tag == 10) {
         parse_FirstReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_firstreportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_FirstReportArr;
        if (input->ExpectTag(18)) goto parse_RecentlyReportArr;
        break;
      }

      // repeated .pb.TLocalBattleReportSimpleInfo RecentlyReportArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RecentlyReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recentlyreportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RecentlyReportArr;
        if (input->ExpectTag(26)) goto parse_FightForceMinReportArr;
        break;
      }

      // repeated .pb.TLocalBattleReportSimpleInfo FightForceMinReportArr = 3;
      case 3: {
        if (tag == 26) {
         parse_FightForceMinReportArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightforceminreportarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_FightForceMinReportArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalReportGetTowerHellReportRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalReportGetTowerHellReportRsp)
  return false;
#undef DO_
}

void TLocalReportGetTowerHellReportRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalReportGetTowerHellReportRsp)
  // repeated .pb.TLocalBattleReportSimpleInfo FirstReportArr = 1;
  for (int i = 0; i < this->firstreportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->firstreportarr(i), output);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo RecentlyReportArr = 2;
  for (int i = 0; i < this->recentlyreportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->recentlyreportarr(i), output);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo FightForceMinReportArr = 3;
  for (int i = 0; i < this->fightforceminreportarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fightforceminreportarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalReportGetTowerHellReportRsp)
}

::google::protobuf::uint8* TLocalReportGetTowerHellReportRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalReportGetTowerHellReportRsp)
  // repeated .pb.TLocalBattleReportSimpleInfo FirstReportArr = 1;
  for (int i = 0; i < this->firstreportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->firstreportarr(i), target);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo RecentlyReportArr = 2;
  for (int i = 0; i < this->recentlyreportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->recentlyreportarr(i), target);
  }

  // repeated .pb.TLocalBattleReportSimpleInfo FightForceMinReportArr = 3;
  for (int i = 0; i < this->fightforceminreportarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fightforceminreportarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalReportGetTowerHellReportRsp)
  return target;
}

int TLocalReportGetTowerHellReportRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TLocalBattleReportSimpleInfo FirstReportArr = 1;
  total_size += 1 * this->firstreportarr_size();
  for (int i = 0; i < this->firstreportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->firstreportarr(i));
  }

  // repeated .pb.TLocalBattleReportSimpleInfo RecentlyReportArr = 2;
  total_size += 1 * this->recentlyreportarr_size();
  for (int i = 0; i < this->recentlyreportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recentlyreportarr(i));
  }

  // repeated .pb.TLocalBattleReportSimpleInfo FightForceMinReportArr = 3;
  total_size += 1 * this->fightforceminreportarr_size();
  for (int i = 0; i < this->fightforceminreportarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightforceminreportarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalReportGetTowerHellReportRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalReportGetTowerHellReportRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalReportGetTowerHellReportRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalReportGetTowerHellReportRsp::MergeFrom(const TLocalReportGetTowerHellReportRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  firstreportarr_.MergeFrom(from.firstreportarr_);
  recentlyreportarr_.MergeFrom(from.recentlyreportarr_);
  fightforceminreportarr_.MergeFrom(from.fightforceminreportarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalReportGetTowerHellReportRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalReportGetTowerHellReportRsp::CopyFrom(const TLocalReportGetTowerHellReportRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalReportGetTowerHellReportRsp::IsInitialized() const {

  return true;
}

void TLocalReportGetTowerHellReportRsp::Swap(TLocalReportGetTowerHellReportRsp* other) {
  if (other != this) {
    firstreportarr_.Swap(&other->firstreportarr_);
    recentlyreportarr_.Swap(&other->recentlyreportarr_);
    fightforceminreportarr_.Swap(&other->fightforceminreportarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalReportGetTowerHellReportRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalReportGetTowerHellReportRsp_descriptor_;
  metadata.reflection = TLocalReportGetTowerHellReportRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLocalReportInsertReportInfoReq::kModuleIdFieldNumber;
const int TLocalReportInsertReportInfoReq::kInstanceIdFieldNumber;
const int TLocalReportInsertReportInfoReq::kReportTypeArrFieldNumber;
const int TLocalReportInsertReportInfoReq::kStarLvFieldNumber;
const int TLocalReportInsertReportInfoReq::kSimpleInfoFieldNumber;
const int TLocalReportInsertReportInfoReq::kBattleBytesFieldNumber;
#endif  // !_MSC_VER

TLocalReportInsertReportInfoReq::TLocalReportInsertReportInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalReportInsertReportInfoReq)
}

void TLocalReportInsertReportInfoReq::InitAsDefaultInstance() {
  simpleinfo_ = const_cast< ::pb::TLocalBattleReportSimpleInfo*>(&::pb::TLocalBattleReportSimpleInfo::default_instance());
}

TLocalReportInsertReportInfoReq::TLocalReportInsertReportInfoReq(const TLocalReportInsertReportInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalReportInsertReportInfoReq)
}

void TLocalReportInsertReportInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  moduleid_ = GOOGLE_ULONGLONG(0);
  instanceid_ = GOOGLE_ULONGLONG(0);
  starlv_ = 0u;
  simpleinfo_ = NULL;
  battlebytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalReportInsertReportInfoReq::~TLocalReportInsertReportInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TLocalReportInsertReportInfoReq)
  SharedDtor();
}

void TLocalReportInsertReportInfoReq::SharedDtor() {
  if (battlebytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battlebytes_;
  }
  if (this != default_instance_) {
    delete simpleinfo_;
  }
}

void TLocalReportInsertReportInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalReportInsertReportInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalReportInsertReportInfoReq_descriptor_;
}

const TLocalReportInsertReportInfoReq& TLocalReportInsertReportInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalReportInsertReportInfoReq* TLocalReportInsertReportInfoReq::default_instance_ = NULL;

TLocalReportInsertReportInfoReq* TLocalReportInsertReportInfoReq::New() const {
  return new TLocalReportInsertReportInfoReq;
}

void TLocalReportInsertReportInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TLocalReportInsertReportInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(moduleid_, instanceid_);
    starlv_ = 0u;
    if (has_simpleinfo()) {
      if (simpleinfo_ != NULL) simpleinfo_->::pb::TLocalBattleReportSimpleInfo::Clear();
    }
    if (has_battlebytes()) {
      if (battlebytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battlebytes_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  reporttypearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalReportInsertReportInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalReportInsertReportInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ModuleId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &moduleid_)));
          set_has_moduleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_InstanceId;
        break;
      }

      // optional uint64 InstanceId = 2;
      case 2: {
        if (tag == 16) {
         parse_InstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReportTypeArr;
        break;
      }

      // repeated uint64 ReportTypeArr = 3;
      case 3: {
        if (tag == 24) {
         parse_ReportTypeArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_reporttypearr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_reporttypearr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ReportTypeArr;
        if (input->ExpectTag(32)) goto parse_StarLv;
        break;
      }

      // optional uint32 StarLv = 4;
      case 4: {
        if (tag == 32) {
         parse_StarLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_SimpleInfo;
        break;
      }

      // optional .pb.TLocalBattleReportSimpleInfo SimpleInfo = 5;
      case 5: {
        if (tag == 42) {
         parse_SimpleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simpleinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_BattleBytes;
        break;
      }

      // optional bytes BattleBytes = 6;
      case 6: {
        if (tag == 50) {
         parse_BattleBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battlebytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalReportInsertReportInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalReportInsertReportInfoReq)
  return false;
#undef DO_
}

void TLocalReportInsertReportInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalReportInsertReportInfoReq)
  // optional uint64 ModuleId = 1;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->moduleid(), output);
  }

  // optional uint64 InstanceId = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->instanceid(), output);
  }

  // repeated uint64 ReportTypeArr = 3;
  for (int i = 0; i < this->reporttypearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->reporttypearr(i), output);
  }

  // optional uint32 StarLv = 4;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starlv(), output);
  }

  // optional .pb.TLocalBattleReportSimpleInfo SimpleInfo = 5;
  if (has_simpleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->simpleinfo(), output);
  }

  // optional bytes BattleBytes = 6;
  if (has_battlebytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->battlebytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalReportInsertReportInfoReq)
}

::google::protobuf::uint8* TLocalReportInsertReportInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalReportInsertReportInfoReq)
  // optional uint64 ModuleId = 1;
  if (has_moduleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->moduleid(), target);
  }

  // optional uint64 InstanceId = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->instanceid(), target);
  }

  // repeated uint64 ReportTypeArr = 3;
  for (int i = 0; i < this->reporttypearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->reporttypearr(i), target);
  }

  // optional uint32 StarLv = 4;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starlv(), target);
  }

  // optional .pb.TLocalBattleReportSimpleInfo SimpleInfo = 5;
  if (has_simpleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->simpleinfo(), target);
  }

  // optional bytes BattleBytes = 6;
  if (has_battlebytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->battlebytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalReportInsertReportInfoReq)
  return target;
}

int TLocalReportInsertReportInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ModuleId = 1;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->moduleid());
    }

    // optional uint64 InstanceId = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 StarLv = 4;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starlv());
    }

    // optional .pb.TLocalBattleReportSimpleInfo SimpleInfo = 5;
    if (has_simpleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simpleinfo());
    }

    // optional bytes BattleBytes = 6;
    if (has_battlebytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battlebytes());
    }

  }
  // repeated uint64 ReportTypeArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->reporttypearr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->reporttypearr(i));
    }
    total_size += 1 * this->reporttypearr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalReportInsertReportInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalReportInsertReportInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalReportInsertReportInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalReportInsertReportInfoReq::MergeFrom(const TLocalReportInsertReportInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  reporttypearr_.MergeFrom(from.reporttypearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moduleid()) {
      set_moduleid(from.moduleid());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_simpleinfo()) {
      mutable_simpleinfo()->::pb::TLocalBattleReportSimpleInfo::MergeFrom(from.simpleinfo());
    }
    if (from.has_battlebytes()) {
      set_battlebytes(from.battlebytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalReportInsertReportInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalReportInsertReportInfoReq::CopyFrom(const TLocalReportInsertReportInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalReportInsertReportInfoReq::IsInitialized() const {

  return true;
}

void TLocalReportInsertReportInfoReq::Swap(TLocalReportInsertReportInfoReq* other) {
  if (other != this) {
    std::swap(moduleid_, other->moduleid_);
    std::swap(instanceid_, other->instanceid_);
    reporttypearr_.Swap(&other->reporttypearr_);
    std::swap(starlv_, other->starlv_);
    std::swap(simpleinfo_, other->simpleinfo_);
    std::swap(battlebytes_, other->battlebytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalReportInsertReportInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalReportInsertReportInfoReq_descriptor_;
  metadata.reflection = TLocalReportInsertReportInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TLocalReportDeleteUserReportReq::kUidFieldNumber;
const int TLocalReportDeleteUserReportReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TLocalReportDeleteUserReportReq::TLocalReportDeleteUserReportReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TLocalReportDeleteUserReportReq)
}

void TLocalReportDeleteUserReportReq::InitAsDefaultInstance() {
}

TLocalReportDeleteUserReportReq::TLocalReportDeleteUserReportReq(const TLocalReportDeleteUserReportReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TLocalReportDeleteUserReportReq)
}

void TLocalReportDeleteUserReportReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TLocalReportDeleteUserReportReq::~TLocalReportDeleteUserReportReq() {
  // @@protoc_insertion_point(destructor:pb.TLocalReportDeleteUserReportReq)
  SharedDtor();
}

void TLocalReportDeleteUserReportReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TLocalReportDeleteUserReportReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TLocalReportDeleteUserReportReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TLocalReportDeleteUserReportReq_descriptor_;
}

const TLocalReportDeleteUserReportReq& TLocalReportDeleteUserReportReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fLocalBattleReport_2eproto();
  return *default_instance_;
}

TLocalReportDeleteUserReportReq* TLocalReportDeleteUserReportReq::default_instance_ = NULL;

TLocalReportDeleteUserReportReq* TLocalReportDeleteUserReportReq::New() const {
  return new TLocalReportDeleteUserReportReq;
}

void TLocalReportDeleteUserReportReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TLocalReportDeleteUserReportReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TLocalReportDeleteUserReportReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ServerId;
        break;
      }

      // optional string ServerId = 2;
      case 2: {
        if (tag == 18) {
         parse_ServerId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TLocalReportDeleteUserReportReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TLocalReportDeleteUserReportReq)
  return false;
#undef DO_
}

void TLocalReportDeleteUserReportReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TLocalReportDeleteUserReportReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TLocalReportDeleteUserReportReq)
}

::google::protobuf::uint8* TLocalReportDeleteUserReportReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TLocalReportDeleteUserReportReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string ServerId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TLocalReportDeleteUserReportReq)
  return target;
}

int TLocalReportDeleteUserReportReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string ServerId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TLocalReportDeleteUserReportReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TLocalReportDeleteUserReportReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TLocalReportDeleteUserReportReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TLocalReportDeleteUserReportReq::MergeFrom(const TLocalReportDeleteUserReportReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TLocalReportDeleteUserReportReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TLocalReportDeleteUserReportReq::CopyFrom(const TLocalReportDeleteUserReportReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLocalReportDeleteUserReportReq::IsInitialized() const {

  return true;
}

void TLocalReportDeleteUserReportReq::Swap(TLocalReportDeleteUserReportReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TLocalReportDeleteUserReportReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TLocalReportDeleteUserReportReq_descriptor_;
  metadata.reflection = TLocalReportDeleteUserReportReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
