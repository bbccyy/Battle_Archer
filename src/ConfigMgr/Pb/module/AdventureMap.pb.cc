// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/AdventureMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/AdventureMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* AdventureBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureBehaviorKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureBehaviorKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureBehaviorNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureBehaviorNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureBehavior_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureBehavior_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserEventInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserEventInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureBridge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureBridge_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureGimmickDoor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureGimmickDoor_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureTaskNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureTaskNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureMystery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureMystery_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransferObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransferObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrapResetPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrapResetPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdventureMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdventureMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EEventStatus_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fAdventureMap_2eproto() {
  protobuf_AddDesc_module_2fAdventureMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/AdventureMap.proto");
  GOOGLE_CHECK(file != NULL);
  AdventureBlock_descriptor_ = file->message_type(0);
  static const int AdventureBlock_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBlock, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBlock, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBlock, ispass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBlock, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBlock, canplace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBlock, regionid_),
  };
  AdventureBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureBlock_descriptor_,
      AdventureBlock::default_instance_,
      AdventureBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureBlock));
  AdventureBehaviorKeyValue_descriptor_ = file->message_type(1);
  static const int AdventureBehaviorKeyValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehaviorKeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehaviorKeyValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehaviorKeyValue, type_),
  };
  AdventureBehaviorKeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureBehaviorKeyValue_descriptor_,
      AdventureBehaviorKeyValue::default_instance_,
      AdventureBehaviorKeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehaviorKeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehaviorKeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureBehaviorKeyValue));
  AdventureBehaviorNode_descriptor_ = file->message_type(2);
  static const int AdventureBehaviorNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehaviorNode, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehaviorNode, values_),
  };
  AdventureBehaviorNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureBehaviorNode_descriptor_,
      AdventureBehaviorNode::default_instance_,
      AdventureBehaviorNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehaviorNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehaviorNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureBehaviorNode));
  AdventureBehavior_descriptor_ = file->message_type(3);
  static const int AdventureBehavior_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehavior, behaviorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehavior, nodearr_),
  };
  AdventureBehavior_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureBehavior_descriptor_,
      AdventureBehavior::default_instance_,
      AdventureBehavior_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehavior, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBehavior, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureBehavior));
  UserEventInfo_descriptor_ = file->message_type(4);
  static const int UserEventInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEventInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEventInfo, choseindex_),
  };
  UserEventInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserEventInfo_descriptor_,
      UserEventInfo::default_instance_,
      UserEventInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEventInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEventInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserEventInfo));
  AdventureEvent_descriptor_ = file->message_type(5);
  static const int AdventureEvent_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, eventid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, eventstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, behavior_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, usereventinfoarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, battleinfoidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, answerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, statevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, donevalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, rewardinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, answerstarttime_),
  };
  AdventureEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureEvent_descriptor_,
      AdventureEvent::default_instance_,
      AdventureEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureEvent));
  AdventureObject_descriptor_ = file->message_type(6);
  static const int AdventureObject_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureObject, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureObject, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureObject, objecttid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureObject, modelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureObject, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureObject, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureObject, sortingorder_),
  };
  AdventureObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureObject_descriptor_,
      AdventureObject::default_instance_,
      AdventureObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureObject));
  AdventureBridge_descriptor_ = file->message_type(7);
  static const int AdventureBridge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBridge, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBridge, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBridge, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBridge, y2_),
  };
  AdventureBridge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureBridge_descriptor_,
      AdventureBridge::default_instance_,
      AdventureBridge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBridge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureBridge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureBridge));
  AdventureGimmickDoor_descriptor_ = file->message_type(8);
  static const int AdventureGimmickDoor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureGimmickDoor, keyindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureGimmickDoor, doorindex_),
  };
  AdventureGimmickDoor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureGimmickDoor_descriptor_,
      AdventureGimmickDoor::default_instance_,
      AdventureGimmickDoor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureGimmickDoor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureGimmickDoor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureGimmickDoor));
  AdventureTaskNpc_descriptor_ = file->message_type(9);
  static const int AdventureTaskNpc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureTaskNpc, npcindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureTaskNpc, objindexarr_),
  };
  AdventureTaskNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureTaskNpc_descriptor_,
      AdventureTaskNpc::default_instance_,
      AdventureTaskNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureTaskNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureTaskNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureTaskNpc));
  AdventureMystery_descriptor_ = file->message_type(10);
  static const int AdventureMystery_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMystery, mysterydoorindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMystery, objindexarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMystery, targetobjindexarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMystery, nontargetobjindexarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMystery, mysterylayerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMystery, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMystery, ciphermonsterindex_),
  };
  AdventureMystery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureMystery_descriptor_,
      AdventureMystery::default_instance_,
      AdventureMystery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMystery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMystery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureMystery));
  TransferObject_descriptor_ = file->message_type(11);
  static const int TransferObject_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferObject, objectlayerindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferObject, objectindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferObject, transferlayerindex_),
  };
  TransferObject_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransferObject_descriptor_,
      TransferObject::default_instance_,
      TransferObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferObject, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransferObject, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransferObject));
  TrapResetPoint_descriptor_ = file->message_type(12);
  static const int TrapResetPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapResetPoint, trapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapResetPoint, pos_),
  };
  TrapResetPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrapResetPoint_descriptor_,
      TrapResetPoint::default_instance_,
      TrapResetPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapResetPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrapResetPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrapResetPoint));
  AdventureLayer_descriptor_ = file->message_type(13);
  static const int AdventureLayer_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureLayer, blockarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureLayer, objectarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureLayer, bridgearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureLayer, layersize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureLayer, doorarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureLayer, tasknpc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureLayer, mysteryentry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureLayer, roomposarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureLayer, trapposarr_),
  };
  AdventureLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureLayer_descriptor_,
      AdventureLayer::default_instance_,
      AdventureLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureLayer));
  AdventureMap_descriptor_ = file->message_type(14);
  static const int AdventureMap_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, maptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, mapname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, startx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, starty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, directx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, directy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, layerarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, terrainmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, eventnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, monsterhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, transferobjarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, doneeventnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, mapexpiretime_),
  };
  AdventureMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdventureMap_descriptor_,
      AdventureMap::default_instance_,
      AdventureMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdventureMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdventureMap));
  EEventStatus_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fAdventureMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureBlock_descriptor_, &AdventureBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureBehaviorKeyValue_descriptor_, &AdventureBehaviorKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureBehaviorNode_descriptor_, &AdventureBehaviorNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureBehavior_descriptor_, &AdventureBehavior::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserEventInfo_descriptor_, &UserEventInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureEvent_descriptor_, &AdventureEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureObject_descriptor_, &AdventureObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureBridge_descriptor_, &AdventureBridge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureGimmickDoor_descriptor_, &AdventureGimmickDoor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureTaskNpc_descriptor_, &AdventureTaskNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureMystery_descriptor_, &AdventureMystery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransferObject_descriptor_, &TransferObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrapResetPoint_descriptor_, &TrapResetPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureLayer_descriptor_, &AdventureLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdventureMap_descriptor_, &AdventureMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fAdventureMap_2eproto() {
  delete AdventureBlock::default_instance_;
  delete AdventureBlock_reflection_;
  delete AdventureBehaviorKeyValue::default_instance_;
  delete AdventureBehaviorKeyValue_reflection_;
  delete AdventureBehaviorNode::default_instance_;
  delete AdventureBehaviorNode_reflection_;
  delete AdventureBehavior::default_instance_;
  delete AdventureBehavior_reflection_;
  delete UserEventInfo::default_instance_;
  delete UserEventInfo_reflection_;
  delete AdventureEvent::default_instance_;
  delete AdventureEvent_reflection_;
  delete AdventureObject::default_instance_;
  delete AdventureObject_reflection_;
  delete AdventureBridge::default_instance_;
  delete AdventureBridge_reflection_;
  delete AdventureGimmickDoor::default_instance_;
  delete AdventureGimmickDoor_reflection_;
  delete AdventureTaskNpc::default_instance_;
  delete AdventureTaskNpc_reflection_;
  delete AdventureMystery::default_instance_;
  delete AdventureMystery_reflection_;
  delete TransferObject::default_instance_;
  delete TransferObject_reflection_;
  delete TrapResetPoint::default_instance_;
  delete TrapResetPoint_reflection_;
  delete AdventureLayer::default_instance_;
  delete AdventureLayer_reflection_;
  delete AdventureMap::default_instance_;
  delete AdventureMap_reflection_;
}

void protobuf_AddDesc_module_2fAdventureMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031module/AdventureMap.proto\022\002pb\032\021module/"
    "Util.proto\"i\n\016AdventureBlock\022\t\n\001X\030\001 \001(\005\022"
    "\t\n\001Y\030\002 \001(\005\022\016\n\006IsPass\030\003 \001(\010\022\r\n\005ResId\030\004 \001("
    "\r\022\020\n\010CanPlace\030\005 \001(\010\022\020\n\010RegionId\030\006 \001(\r\"E\n"
    "\031AdventureBehaviorKeyValue\022\013\n\003Key\030\001 \001(\t\022"
    "\r\n\005Value\030\002 \001(\t\022\014\n\004Type\030\003 \001(\005\"V\n\025Adventur"
    "eBehaviorNode\022\016\n\006NodeId\030\001 \001(\r\022-\n\006Values\030"
    "\002 \003(\0132\035.pb.AdventureBehaviorKeyValue\"S\n\021"
    "AdventureBehavior\022\022\n\nBehaviorId\030\001 \001(\r\022*\n"
    "\007NodeArr\030\002 \003(\0132\031.pb.AdventureBehaviorNod"
    "e\"0\n\rUserEventInfo\022\013\n\003Uid\030\001 \001(\004\022\022\n\nChose"
    "Index\030\002 \001(\r\"\235\002\n\016AdventureEvent\022\017\n\007EventI"
    "d\030\001 \001(\r\022%\n\013EventStatus\030\002 \001(\0162\020.pb.EEvent"
    "Status\022\'\n\010Behavior\030\003 \001(\0132\025.pb.AdventureB"
    "ehavior\022+\n\020UserEventInfoArr\030\004 \003(\0132\021.pb.U"
    "serEventInfo\022\027\n\017BattleinfoIdArr\030\005 \003(\r\022\020\n"
    "\010AnswerId\030\006 \001(\r\022\022\n\nStateValue\030\007 \001(\r\022\021\n\tD"
    "oneValue\030\010 \001(\r\022\022\n\nRewardInfo\030\t \003(\005\022\027\n\017An"
    "swerStartTime\030\n \001(\004\"\244\001\n\017AdventureObject\022"
    "\t\n\001X\030\001 \001(\005\022\t\n\001Y\030\002 \001(\005\022\021\n\tObjectTid\030\003 \001(\r"
    "\022\021\n\tModelName\030\004 \001(\t\022\034\n\005Scale\030\005 \001(\0132\r.pb."
    "PbVector3\022!\n\005Event\030\006 \001(\0132\022.pb.AdventureE"
    "vent\022\024\n\014SortingOrder\030\007 \001(\r\"A\n\017AdventureB"
    "ridge\022\n\n\002X1\030\001 \001(\005\022\n\n\002Y1\030\002 \001(\005\022\n\n\002X2\030\003 \001("
    "\005\022\n\n\002Y2\030\004 \001(\005\";\n\024AdventureGimmickDoor\022\020\n"
    "\010KeyIndex\030\001 \001(\005\022\021\n\tDoorIndex\030\002 \001(\005\"9\n\020Ad"
    "ventureTaskNpc\022\020\n\010NpcIndex\030\001 \001(\005\022\023\n\013ObjI"
    "ndexArr\030\002 \003(\005\"\301\001\n\020AdventureMystery\022\030\n\020My"
    "steryDoorIndex\030\001 \001(\005\022\023\n\013ObjIndexArr\030\002 \003("
    "\005\022\031\n\021TargetObjIndexArr\030\003 \003(\005\022\034\n\024NonTarge"
    "tObjIndexArr\030\004 \003(\005\022\031\n\021MysteryLayerIndex\030"
    "\005 \001(\r\022\016\n\006IsOpen\030\006 \001(\r\022\032\n\022CipherMonsterIn"
    "dex\030\007 \001(\005\"[\n\016TransferObject\022\030\n\020ObjectLay"
    "erIndex\030\001 \001(\r\022\023\n\013ObjectIndex\030\002 \001(\005\022\032\n\022Tr"
    "ansferLayerIndex\030\003 \001(\r\"@\n\016TrapResetPoint"
    "\022\016\n\006TrapId\030\001 \001(\r\022\036\n\003Pos\030\002 \001(\0132\021.pb.PbVec"
    "tor2_Int\"\371\002\n\016AdventureLayer\022$\n\010BlockArr\030"
    "\001 \003(\0132\022.pb.AdventureBlock\022&\n\tObjectArr\030\002"
    " \003(\0132\023.pb.AdventureObject\022&\n\tBridgeArr\030\003"
    " \003(\0132\023.pb.AdventureBridge\022$\n\tLayerSize\030\004"
    " \001(\0132\021.pb.PbVector2_Int\022)\n\007DoorArr\030\005 \003(\013"
    "2\030.pb.AdventureGimmickDoor\022%\n\007TaskNpc\030\006 "
    "\001(\0132\024.pb.AdventureTaskNpc\022*\n\014MysteryEntr"
    "y\030\007 \001(\0132\024.pb.AdventureMystery\022%\n\nRoomPos"
    "Arr\030\010 \003(\0132\021.pb.PbVector2_Int\022&\n\nTrapPosA"
    "rr\030\t \003(\0132\022.pb.TrapResetPoint\"\267\002\n\014Adventu"
    "reMap\022\n\n\002Id\030\001 \001(\004\022\016\n\006MapTid\030\002 \001(\r\022\017\n\007Map"
    "Name\030\003 \001(\t\022\016\n\006StartX\030\004 \001(\005\022\016\n\006StartY\030\005 \001"
    "(\005\022\017\n\007DirectX\030\006 \001(\005\022\017\n\007DirectY\030\007 \001(\005\022$\n\010"
    "LayerArr\030\010 \003(\0132\022.pb.AdventureLayer\022\024\n\014Te"
    "rrainMapId\030\t \001(\r\022\020\n\010EventNum\030\n \001(\r\022\021\n\tMo"
    "nsterHp\030\013 \001(\004\022*\n\016TransferObjArr\030\014 \003(\0132\022."
    "pb.TransferObject\022\024\n\014DoneEventNum\030\r \001(\r\022"
    "\025\n\rMapExpireTime\030\016 \001(\004*F\n\014EEventStatus\022\020"
    "\n\014EVENT_UNDONE\020\000\022\024\n\020EVENT_INPROGRESS\020\001\022\016"
    "\n\nEVENT_DONE\020\002", 2214);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/AdventureMap.proto", &protobuf_RegisterTypes);
  AdventureBlock::default_instance_ = new AdventureBlock();
  AdventureBehaviorKeyValue::default_instance_ = new AdventureBehaviorKeyValue();
  AdventureBehaviorNode::default_instance_ = new AdventureBehaviorNode();
  AdventureBehavior::default_instance_ = new AdventureBehavior();
  UserEventInfo::default_instance_ = new UserEventInfo();
  AdventureEvent::default_instance_ = new AdventureEvent();
  AdventureObject::default_instance_ = new AdventureObject();
  AdventureBridge::default_instance_ = new AdventureBridge();
  AdventureGimmickDoor::default_instance_ = new AdventureGimmickDoor();
  AdventureTaskNpc::default_instance_ = new AdventureTaskNpc();
  AdventureMystery::default_instance_ = new AdventureMystery();
  TransferObject::default_instance_ = new TransferObject();
  TrapResetPoint::default_instance_ = new TrapResetPoint();
  AdventureLayer::default_instance_ = new AdventureLayer();
  AdventureMap::default_instance_ = new AdventureMap();
  AdventureBlock::default_instance_->InitAsDefaultInstance();
  AdventureBehaviorKeyValue::default_instance_->InitAsDefaultInstance();
  AdventureBehaviorNode::default_instance_->InitAsDefaultInstance();
  AdventureBehavior::default_instance_->InitAsDefaultInstance();
  UserEventInfo::default_instance_->InitAsDefaultInstance();
  AdventureEvent::default_instance_->InitAsDefaultInstance();
  AdventureObject::default_instance_->InitAsDefaultInstance();
  AdventureBridge::default_instance_->InitAsDefaultInstance();
  AdventureGimmickDoor::default_instance_->InitAsDefaultInstance();
  AdventureTaskNpc::default_instance_->InitAsDefaultInstance();
  AdventureMystery::default_instance_->InitAsDefaultInstance();
  TransferObject::default_instance_->InitAsDefaultInstance();
  TrapResetPoint::default_instance_->InitAsDefaultInstance();
  AdventureLayer::default_instance_->InitAsDefaultInstance();
  AdventureMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fAdventureMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fAdventureMap_2eproto {
  StaticDescriptorInitializer_module_2fAdventureMap_2eproto() {
    protobuf_AddDesc_module_2fAdventureMap_2eproto();
  }
} static_descriptor_initializer_module_2fAdventureMap_2eproto_;
const ::google::protobuf::EnumDescriptor* EEventStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEventStatus_descriptor_;
}
bool EEventStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureBlock::kXFieldNumber;
const int AdventureBlock::kYFieldNumber;
const int AdventureBlock::kIsPassFieldNumber;
const int AdventureBlock::kResIdFieldNumber;
const int AdventureBlock::kCanPlaceFieldNumber;
const int AdventureBlock::kRegionIdFieldNumber;
#endif  // !_MSC_VER

AdventureBlock::AdventureBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureBlock)
}

void AdventureBlock::InitAsDefaultInstance() {
}

AdventureBlock::AdventureBlock(const AdventureBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureBlock)
}

void AdventureBlock::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ispass_ = false;
  resid_ = 0u;
  canplace_ = false;
  regionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureBlock::~AdventureBlock() {
  // @@protoc_insertion_point(destructor:pb.AdventureBlock)
  SharedDtor();
}

void AdventureBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdventureBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureBlock_descriptor_;
}

const AdventureBlock& AdventureBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureBlock* AdventureBlock::default_instance_ = NULL;

AdventureBlock* AdventureBlock::New() const {
  return new AdventureBlock;
}

void AdventureBlock::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdventureBlock*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(x_, regionid_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsPass;
        break;
      }

      // optional bool IsPass = 3;
      case 3: {
        if (tag == 24) {
         parse_IsPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispass_)));
          set_has_ispass();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ResId;
        break;
      }

      // optional uint32 ResId = 4;
      case 4: {
        if (tag == 32) {
         parse_ResId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid_)));
          set_has_resid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_CanPlace;
        break;
      }

      // optional bool CanPlace = 5;
      case 5: {
        if (tag == 40) {
         parse_CanPlace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canplace_)));
          set_has_canplace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_RegionId;
        break;
      }

      // optional uint32 RegionId = 6;
      case 6: {
        if (tag == 48) {
         parse_RegionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regionid_)));
          set_has_regionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureBlock)
  return false;
#undef DO_
}

void AdventureBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureBlock)
  // optional int32 X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional bool IsPass = 3;
  if (has_ispass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ispass(), output);
  }

  // optional uint32 ResId = 4;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resid(), output);
  }

  // optional bool CanPlace = 5;
  if (has_canplace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->canplace(), output);
  }

  // optional uint32 RegionId = 6;
  if (has_regionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->regionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureBlock)
}

::google::protobuf::uint8* AdventureBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureBlock)
  // optional int32 X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional bool IsPass = 3;
  if (has_ispass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ispass(), target);
  }

  // optional uint32 ResId = 4;
  if (has_resid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resid(), target);
  }

  // optional bool CanPlace = 5;
  if (has_canplace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->canplace(), target);
  }

  // optional uint32 RegionId = 6;
  if (has_regionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->regionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureBlock)
  return target;
}

int AdventureBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional bool IsPass = 3;
    if (has_ispass()) {
      total_size += 1 + 1;
    }

    // optional uint32 ResId = 4;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid());
    }

    // optional bool CanPlace = 5;
    if (has_canplace()) {
      total_size += 1 + 1;
    }

    // optional uint32 RegionId = 6;
    if (has_regionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureBlock::MergeFrom(const AdventureBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_ispass()) {
      set_ispass(from.ispass());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_canplace()) {
      set_canplace(from.canplace());
    }
    if (from.has_regionid()) {
      set_regionid(from.regionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureBlock::CopyFrom(const AdventureBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureBlock::IsInitialized() const {

  return true;
}

void AdventureBlock::Swap(AdventureBlock* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(ispass_, other->ispass_);
    std::swap(resid_, other->resid_);
    std::swap(canplace_, other->canplace_);
    std::swap(regionid_, other->regionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureBlock_descriptor_;
  metadata.reflection = AdventureBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureBehaviorKeyValue::kKeyFieldNumber;
const int AdventureBehaviorKeyValue::kValueFieldNumber;
const int AdventureBehaviorKeyValue::kTypeFieldNumber;
#endif  // !_MSC_VER

AdventureBehaviorKeyValue::AdventureBehaviorKeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureBehaviorKeyValue)
}

void AdventureBehaviorKeyValue::InitAsDefaultInstance() {
}

AdventureBehaviorKeyValue::AdventureBehaviorKeyValue(const AdventureBehaviorKeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureBehaviorKeyValue)
}

void AdventureBehaviorKeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureBehaviorKeyValue::~AdventureBehaviorKeyValue() {
  // @@protoc_insertion_point(destructor:pb.AdventureBehaviorKeyValue)
  SharedDtor();
}

void AdventureBehaviorKeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void AdventureBehaviorKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureBehaviorKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureBehaviorKeyValue_descriptor_;
}

const AdventureBehaviorKeyValue& AdventureBehaviorKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureBehaviorKeyValue* AdventureBehaviorKeyValue::default_instance_ = NULL;

AdventureBehaviorKeyValue* AdventureBehaviorKeyValue::New() const {
  return new AdventureBehaviorKeyValue;
}

void AdventureBehaviorKeyValue::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureBehaviorKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureBehaviorKeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // optional string Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional int32 Type = 3;
      case 3: {
        if (tag == 24) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureBehaviorKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureBehaviorKeyValue)
  return false;
#undef DO_
}

void AdventureBehaviorKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureBehaviorKeyValue)
  // optional string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional int32 Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureBehaviorKeyValue)
}

::google::protobuf::uint8* AdventureBehaviorKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureBehaviorKeyValue)
  // optional string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional int32 Type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureBehaviorKeyValue)
  return target;
}

int AdventureBehaviorKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional int32 Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureBehaviorKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureBehaviorKeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureBehaviorKeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureBehaviorKeyValue::MergeFrom(const AdventureBehaviorKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureBehaviorKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureBehaviorKeyValue::CopyFrom(const AdventureBehaviorKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureBehaviorKeyValue::IsInitialized() const {

  return true;
}

void AdventureBehaviorKeyValue::Swap(AdventureBehaviorKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureBehaviorKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureBehaviorKeyValue_descriptor_;
  metadata.reflection = AdventureBehaviorKeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureBehaviorNode::kNodeIdFieldNumber;
const int AdventureBehaviorNode::kValuesFieldNumber;
#endif  // !_MSC_VER

AdventureBehaviorNode::AdventureBehaviorNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureBehaviorNode)
}

void AdventureBehaviorNode::InitAsDefaultInstance() {
}

AdventureBehaviorNode::AdventureBehaviorNode(const AdventureBehaviorNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureBehaviorNode)
}

void AdventureBehaviorNode::SharedCtor() {
  _cached_size_ = 0;
  nodeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureBehaviorNode::~AdventureBehaviorNode() {
  // @@protoc_insertion_point(destructor:pb.AdventureBehaviorNode)
  SharedDtor();
}

void AdventureBehaviorNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdventureBehaviorNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureBehaviorNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureBehaviorNode_descriptor_;
}

const AdventureBehaviorNode& AdventureBehaviorNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureBehaviorNode* AdventureBehaviorNode::default_instance_ = NULL;

AdventureBehaviorNode* AdventureBehaviorNode::New() const {
  return new AdventureBehaviorNode;
}

void AdventureBehaviorNode::Clear() {
  nodeid_ = 0u;
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureBehaviorNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureBehaviorNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 NodeId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nodeid_)));
          set_has_nodeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Values;
        break;
      }

      // repeated .pb.AdventureBehaviorKeyValue Values = 2;
      case 2: {
        if (tag == 18) {
         parse_Values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Values;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureBehaviorNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureBehaviorNode)
  return false;
#undef DO_
}

void AdventureBehaviorNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureBehaviorNode)
  // optional uint32 NodeId = 1;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nodeid(), output);
  }

  // repeated .pb.AdventureBehaviorKeyValue Values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->values(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureBehaviorNode)
}

::google::protobuf::uint8* AdventureBehaviorNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureBehaviorNode)
  // optional uint32 NodeId = 1;
  if (has_nodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nodeid(), target);
  }

  // repeated .pb.AdventureBehaviorKeyValue Values = 2;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->values(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureBehaviorNode)
  return target;
}

int AdventureBehaviorNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NodeId = 1;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nodeid());
    }

  }
  // repeated .pb.AdventureBehaviorKeyValue Values = 2;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureBehaviorNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureBehaviorNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureBehaviorNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureBehaviorNode::MergeFrom(const AdventureBehaviorNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureBehaviorNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureBehaviorNode::CopyFrom(const AdventureBehaviorNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureBehaviorNode::IsInitialized() const {

  return true;
}

void AdventureBehaviorNode::Swap(AdventureBehaviorNode* other) {
  if (other != this) {
    std::swap(nodeid_, other->nodeid_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureBehaviorNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureBehaviorNode_descriptor_;
  metadata.reflection = AdventureBehaviorNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureBehavior::kBehaviorIdFieldNumber;
const int AdventureBehavior::kNodeArrFieldNumber;
#endif  // !_MSC_VER

AdventureBehavior::AdventureBehavior()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureBehavior)
}

void AdventureBehavior::InitAsDefaultInstance() {
}

AdventureBehavior::AdventureBehavior(const AdventureBehavior& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureBehavior)
}

void AdventureBehavior::SharedCtor() {
  _cached_size_ = 0;
  behaviorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureBehavior::~AdventureBehavior() {
  // @@protoc_insertion_point(destructor:pb.AdventureBehavior)
  SharedDtor();
}

void AdventureBehavior::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdventureBehavior::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureBehavior::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureBehavior_descriptor_;
}

const AdventureBehavior& AdventureBehavior::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureBehavior* AdventureBehavior::default_instance_ = NULL;

AdventureBehavior* AdventureBehavior::New() const {
  return new AdventureBehavior;
}

void AdventureBehavior::Clear() {
  behaviorid_ = 0u;
  nodearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureBehavior::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureBehavior)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BehaviorId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &behaviorid_)));
          set_has_behaviorid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NodeArr;
        break;
      }

      // repeated .pb.AdventureBehaviorNode NodeArr = 2;
      case 2: {
        if (tag == 18) {
         parse_NodeArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nodearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_NodeArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureBehavior)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureBehavior)
  return false;
#undef DO_
}

void AdventureBehavior::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureBehavior)
  // optional uint32 BehaviorId = 1;
  if (has_behaviorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->behaviorid(), output);
  }

  // repeated .pb.AdventureBehaviorNode NodeArr = 2;
  for (int i = 0; i < this->nodearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureBehavior)
}

::google::protobuf::uint8* AdventureBehavior::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureBehavior)
  // optional uint32 BehaviorId = 1;
  if (has_behaviorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->behaviorid(), target);
  }

  // repeated .pb.AdventureBehaviorNode NodeArr = 2;
  for (int i = 0; i < this->nodearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureBehavior)
  return target;
}

int AdventureBehavior::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BehaviorId = 1;
    if (has_behaviorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->behaviorid());
    }

  }
  // repeated .pb.AdventureBehaviorNode NodeArr = 2;
  total_size += 1 * this->nodearr_size();
  for (int i = 0; i < this->nodearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nodearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureBehavior::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureBehavior* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureBehavior*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureBehavior::MergeFrom(const AdventureBehavior& from) {
  GOOGLE_CHECK_NE(&from, this);
  nodearr_.MergeFrom(from.nodearr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_behaviorid()) {
      set_behaviorid(from.behaviorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureBehavior::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureBehavior::CopyFrom(const AdventureBehavior& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureBehavior::IsInitialized() const {

  return true;
}

void AdventureBehavior::Swap(AdventureBehavior* other) {
  if (other != this) {
    std::swap(behaviorid_, other->behaviorid_);
    nodearr_.Swap(&other->nodearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureBehavior::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureBehavior_descriptor_;
  metadata.reflection = AdventureBehavior_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserEventInfo::kUidFieldNumber;
const int UserEventInfo::kChoseIndexFieldNumber;
#endif  // !_MSC_VER

UserEventInfo::UserEventInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.UserEventInfo)
}

void UserEventInfo::InitAsDefaultInstance() {
}

UserEventInfo::UserEventInfo(const UserEventInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.UserEventInfo)
}

void UserEventInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  choseindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserEventInfo::~UserEventInfo() {
  // @@protoc_insertion_point(destructor:pb.UserEventInfo)
  SharedDtor();
}

void UserEventInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserEventInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserEventInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserEventInfo_descriptor_;
}

const UserEventInfo& UserEventInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

UserEventInfo* UserEventInfo::default_instance_ = NULL;

UserEventInfo* UserEventInfo::New() const {
  return new UserEventInfo;
}

void UserEventInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserEventInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, choseindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserEventInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.UserEventInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ChoseIndex;
        break;
      }

      // optional uint32 ChoseIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_ChoseIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &choseindex_)));
          set_has_choseindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.UserEventInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.UserEventInfo)
  return false;
#undef DO_
}

void UserEventInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.UserEventInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 ChoseIndex = 2;
  if (has_choseindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->choseindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.UserEventInfo)
}

::google::protobuf::uint8* UserEventInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.UserEventInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 ChoseIndex = 2;
  if (has_choseindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->choseindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.UserEventInfo)
  return target;
}

int UserEventInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 ChoseIndex = 2;
    if (has_choseindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->choseindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserEventInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserEventInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserEventInfo::MergeFrom(const UserEventInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_choseindex()) {
      set_choseindex(from.choseindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserEventInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEventInfo::CopyFrom(const UserEventInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventInfo::IsInitialized() const {

  return true;
}

void UserEventInfo::Swap(UserEventInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(choseindex_, other->choseindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserEventInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserEventInfo_descriptor_;
  metadata.reflection = UserEventInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureEvent::kEventIdFieldNumber;
const int AdventureEvent::kEventStatusFieldNumber;
const int AdventureEvent::kBehaviorFieldNumber;
const int AdventureEvent::kUserEventInfoArrFieldNumber;
const int AdventureEvent::kBattleinfoIdArrFieldNumber;
const int AdventureEvent::kAnswerIdFieldNumber;
const int AdventureEvent::kStateValueFieldNumber;
const int AdventureEvent::kDoneValueFieldNumber;
const int AdventureEvent::kRewardInfoFieldNumber;
const int AdventureEvent::kAnswerStartTimeFieldNumber;
#endif  // !_MSC_VER

AdventureEvent::AdventureEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureEvent)
}

void AdventureEvent::InitAsDefaultInstance() {
  behavior_ = const_cast< ::pb::AdventureBehavior*>(&::pb::AdventureBehavior::default_instance());
}

AdventureEvent::AdventureEvent(const AdventureEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureEvent)
}

void AdventureEvent::SharedCtor() {
  _cached_size_ = 0;
  eventid_ = 0u;
  eventstatus_ = 0;
  behavior_ = NULL;
  answerid_ = 0u;
  statevalue_ = 0u;
  donevalue_ = 0u;
  answerstarttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureEvent::~AdventureEvent() {
  // @@protoc_insertion_point(destructor:pb.AdventureEvent)
  SharedDtor();
}

void AdventureEvent::SharedDtor() {
  if (this != default_instance_) {
    delete behavior_;
  }
}

void AdventureEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureEvent_descriptor_;
}

const AdventureEvent& AdventureEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureEvent* AdventureEvent::default_instance_ = NULL;

AdventureEvent* AdventureEvent::New() const {
  return new AdventureEvent;
}

void AdventureEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdventureEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 231) {
    ZR_(eventid_, eventstatus_);
    ZR_(answerid_, statevalue_);
    if (has_behavior()) {
      if (behavior_ != NULL) behavior_->::pb::AdventureBehavior::Clear();
    }
    donevalue_ = 0u;
  }
  answerstarttime_ = GOOGLE_ULONGLONG(0);

#undef OFFSET_OF_FIELD_
#undef ZR_

  usereventinfoarr_.Clear();
  battleinfoidarr_.Clear();
  rewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 EventId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventid_)));
          set_has_eventid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EventStatus;
        break;
      }

      // optional .pb.EEventStatus EventStatus = 2;
      case 2: {
        if (tag == 16) {
         parse_EventStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EEventStatus_IsValid(value)) {
            set_eventstatus(static_cast< ::pb::EEventStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Behavior;
        break;
      }

      // optional .pb.AdventureBehavior Behavior = 3;
      case 3: {
        if (tag == 26) {
         parse_Behavior:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_behavior()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserEventInfoArr;
        break;
      }

      // repeated .pb.UserEventInfo UserEventInfoArr = 4;
      case 4: {
        if (tag == 34) {
         parse_UserEventInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usereventinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_UserEventInfoArr;
        if (input->ExpectTag(40)) goto parse_BattleinfoIdArr;
        break;
      }

      // repeated uint32 BattleinfoIdArr = 5;
      case 5: {
        if (tag == 40) {
         parse_BattleinfoIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_battleinfoidarr())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_battleinfoidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BattleinfoIdArr;
        if (input->ExpectTag(48)) goto parse_AnswerId;
        break;
      }

      // optional uint32 AnswerId = 6;
      case 6: {
        if (tag == 48) {
         parse_AnswerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answerid_)));
          set_has_answerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_StateValue;
        break;
      }

      // optional uint32 StateValue = 7;
      case 7: {
        if (tag == 56) {
         parse_StateValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &statevalue_)));
          set_has_statevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_DoneValue;
        break;
      }

      // optional uint32 DoneValue = 8;
      case 8: {
        if (tag == 64) {
         parse_DoneValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donevalue_)));
          set_has_donevalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_RewardInfo;
        break;
      }

      // repeated int32 RewardInfo = 9;
      case 9: {
        if (tag == 72) {
         parse_RewardInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_rewardinfo())));
        } else if (tag == 74) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewardinfo())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_RewardInfo;
        if (input->ExpectTag(80)) goto parse_AnswerStartTime;
        break;
      }

      // optional uint64 AnswerStartTime = 10;
      case 10: {
        if (tag == 80) {
         parse_AnswerStartTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &answerstarttime_)));
          set_has_answerstarttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureEvent)
  return false;
#undef DO_
}

void AdventureEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureEvent)
  // optional uint32 EventId = 1;
  if (has_eventid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->eventid(), output);
  }

  // optional .pb.EEventStatus EventStatus = 2;
  if (has_eventstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eventstatus(), output);
  }

  // optional .pb.AdventureBehavior Behavior = 3;
  if (has_behavior()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->behavior(), output);
  }

  // repeated .pb.UserEventInfo UserEventInfoArr = 4;
  for (int i = 0; i < this->usereventinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->usereventinfoarr(i), output);
  }

  // repeated uint32 BattleinfoIdArr = 5;
  for (int i = 0; i < this->battleinfoidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->battleinfoidarr(i), output);
  }

  // optional uint32 AnswerId = 6;
  if (has_answerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->answerid(), output);
  }

  // optional uint32 StateValue = 7;
  if (has_statevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->statevalue(), output);
  }

  // optional uint32 DoneValue = 8;
  if (has_donevalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->donevalue(), output);
  }

  // repeated int32 RewardInfo = 9;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->rewardinfo(i), output);
  }

  // optional uint64 AnswerStartTime = 10;
  if (has_answerstarttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->answerstarttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureEvent)
}

::google::protobuf::uint8* AdventureEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureEvent)
  // optional uint32 EventId = 1;
  if (has_eventid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->eventid(), target);
  }

  // optional .pb.EEventStatus EventStatus = 2;
  if (has_eventstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eventstatus(), target);
  }

  // optional .pb.AdventureBehavior Behavior = 3;
  if (has_behavior()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->behavior(), target);
  }

  // repeated .pb.UserEventInfo UserEventInfoArr = 4;
  for (int i = 0; i < this->usereventinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->usereventinfoarr(i), target);
  }

  // repeated uint32 BattleinfoIdArr = 5;
  for (int i = 0; i < this->battleinfoidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->battleinfoidarr(i), target);
  }

  // optional uint32 AnswerId = 6;
  if (has_answerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->answerid(), target);
  }

  // optional uint32 StateValue = 7;
  if (has_statevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->statevalue(), target);
  }

  // optional uint32 DoneValue = 8;
  if (has_donevalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->donevalue(), target);
  }

  // repeated int32 RewardInfo = 9;
  for (int i = 0; i < this->rewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->rewardinfo(i), target);
  }

  // optional uint64 AnswerStartTime = 10;
  if (has_answerstarttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->answerstarttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureEvent)
  return target;
}

int AdventureEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 EventId = 1;
    if (has_eventid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventid());
    }

    // optional .pb.EEventStatus EventStatus = 2;
    if (has_eventstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventstatus());
    }

    // optional .pb.AdventureBehavior Behavior = 3;
    if (has_behavior()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->behavior());
    }

    // optional uint32 AnswerId = 6;
    if (has_answerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answerid());
    }

    // optional uint32 StateValue = 7;
    if (has_statevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->statevalue());
    }

    // optional uint32 DoneValue = 8;
    if (has_donevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donevalue());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint64 AnswerStartTime = 10;
    if (has_answerstarttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->answerstarttime());
    }

  }
  // repeated .pb.UserEventInfo UserEventInfoArr = 4;
  total_size += 1 * this->usereventinfoarr_size();
  for (int i = 0; i < this->usereventinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usereventinfoarr(i));
  }

  // repeated uint32 BattleinfoIdArr = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->battleinfoidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->battleinfoidarr(i));
    }
    total_size += 1 * this->battleinfoidarr_size() + data_size;
  }

  // repeated int32 RewardInfo = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewardinfo(i));
    }
    total_size += 1 * this->rewardinfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureEvent::MergeFrom(const AdventureEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  usereventinfoarr_.MergeFrom(from.usereventinfoarr_);
  battleinfoidarr_.MergeFrom(from.battleinfoidarr_);
  rewardinfo_.MergeFrom(from.rewardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventid()) {
      set_eventid(from.eventid());
    }
    if (from.has_eventstatus()) {
      set_eventstatus(from.eventstatus());
    }
    if (from.has_behavior()) {
      mutable_behavior()->::pb::AdventureBehavior::MergeFrom(from.behavior());
    }
    if (from.has_answerid()) {
      set_answerid(from.answerid());
    }
    if (from.has_statevalue()) {
      set_statevalue(from.statevalue());
    }
    if (from.has_donevalue()) {
      set_donevalue(from.donevalue());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_answerstarttime()) {
      set_answerstarttime(from.answerstarttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureEvent::CopyFrom(const AdventureEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureEvent::IsInitialized() const {

  return true;
}

void AdventureEvent::Swap(AdventureEvent* other) {
  if (other != this) {
    std::swap(eventid_, other->eventid_);
    std::swap(eventstatus_, other->eventstatus_);
    std::swap(behavior_, other->behavior_);
    usereventinfoarr_.Swap(&other->usereventinfoarr_);
    battleinfoidarr_.Swap(&other->battleinfoidarr_);
    std::swap(answerid_, other->answerid_);
    std::swap(statevalue_, other->statevalue_);
    std::swap(donevalue_, other->donevalue_);
    rewardinfo_.Swap(&other->rewardinfo_);
    std::swap(answerstarttime_, other->answerstarttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureEvent_descriptor_;
  metadata.reflection = AdventureEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureObject::kXFieldNumber;
const int AdventureObject::kYFieldNumber;
const int AdventureObject::kObjectTidFieldNumber;
const int AdventureObject::kModelNameFieldNumber;
const int AdventureObject::kScaleFieldNumber;
const int AdventureObject::kEventFieldNumber;
const int AdventureObject::kSortingOrderFieldNumber;
#endif  // !_MSC_VER

AdventureObject::AdventureObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureObject)
}

void AdventureObject::InitAsDefaultInstance() {
  scale_ = const_cast< ::pb::PbVector3*>(&::pb::PbVector3::default_instance());
  event_ = const_cast< ::pb::AdventureEvent*>(&::pb::AdventureEvent::default_instance());
}

AdventureObject::AdventureObject(const AdventureObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureObject)
}

void AdventureObject::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  objecttid_ = 0u;
  modelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scale_ = NULL;
  event_ = NULL;
  sortingorder_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureObject::~AdventureObject() {
  // @@protoc_insertion_point(destructor:pb.AdventureObject)
  SharedDtor();
}

void AdventureObject::SharedDtor() {
  if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete modelname_;
  }
  if (this != default_instance_) {
    delete scale_;
    delete event_;
  }
}

void AdventureObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureObject_descriptor_;
}

const AdventureObject& AdventureObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureObject* AdventureObject::default_instance_ = NULL;

AdventureObject* AdventureObject::New() const {
  return new AdventureObject;
}

void AdventureObject::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdventureObject*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(x_, y_);
    ZR_(objecttid_, sortingorder_);
    if (has_modelname()) {
      if (modelname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        modelname_->clear();
      }
    }
    if (has_scale()) {
      if (scale_ != NULL) scale_->::pb::PbVector3::Clear();
    }
    if (has_event()) {
      if (event_ != NULL) event_->::pb::AdventureEvent::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ObjectTid;
        break;
      }

      // optional uint32 ObjectTid = 3;
      case 3: {
        if (tag == 24) {
         parse_ObjectTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objecttid_)));
          set_has_objecttid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ModelName;
        break;
      }

      // optional string ModelName = 4;
      case 4: {
        if (tag == 34) {
         parse_ModelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->modelname().data(), this->modelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "modelname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_Scale;
        break;
      }

      // optional .pb.PbVector3 Scale = 5;
      case 5: {
        if (tag == 42) {
         parse_Scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_Event;
        break;
      }

      // optional .pb.AdventureEvent Event = 6;
      case 6: {
        if (tag == 50) {
         parse_Event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_SortingOrder;
        break;
      }

      // optional uint32 SortingOrder = 7;
      case 7: {
        if (tag == 56) {
         parse_SortingOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sortingorder_)));
          set_has_sortingorder();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureObject)
  return false;
#undef DO_
}

void AdventureObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureObject)
  // optional int32 X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // optional uint32 ObjectTid = 3;
  if (has_objecttid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->objecttid(), output);
  }

  // optional string ModelName = 4;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modelname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->modelname(), output);
  }

  // optional .pb.PbVector3 Scale = 5;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->scale(), output);
  }

  // optional .pb.AdventureEvent Event = 6;
  if (has_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->event(), output);
  }

  // optional uint32 SortingOrder = 7;
  if (has_sortingorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sortingorder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureObject)
}

::google::protobuf::uint8* AdventureObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureObject)
  // optional int32 X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // optional uint32 ObjectTid = 3;
  if (has_objecttid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->objecttid(), target);
  }

  // optional string ModelName = 4;
  if (has_modelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->modelname().data(), this->modelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "modelname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->modelname(), target);
  }

  // optional .pb.PbVector3 Scale = 5;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->scale(), target);
  }

  // optional .pb.AdventureEvent Event = 6;
  if (has_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->event(), target);
  }

  // optional uint32 SortingOrder = 7;
  if (has_sortingorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sortingorder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureObject)
  return target;
}

int AdventureObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional uint32 ObjectTid = 3;
    if (has_objecttid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objecttid());
    }

    // optional string ModelName = 4;
    if (has_modelname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelname());
    }

    // optional .pb.PbVector3 Scale = 5;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scale());
    }

    // optional .pb.AdventureEvent Event = 6;
    if (has_event()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->event());
    }

    // optional uint32 SortingOrder = 7;
    if (has_sortingorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sortingorder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureObject::MergeFrom(const AdventureObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_objecttid()) {
      set_objecttid(from.objecttid());
    }
    if (from.has_modelname()) {
      set_modelname(from.modelname());
    }
    if (from.has_scale()) {
      mutable_scale()->::pb::PbVector3::MergeFrom(from.scale());
    }
    if (from.has_event()) {
      mutable_event()->::pb::AdventureEvent::MergeFrom(from.event());
    }
    if (from.has_sortingorder()) {
      set_sortingorder(from.sortingorder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureObject::CopyFrom(const AdventureObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureObject::IsInitialized() const {

  if (has_scale()) {
    if (!this->scale().IsInitialized()) return false;
  }
  return true;
}

void AdventureObject::Swap(AdventureObject* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(objecttid_, other->objecttid_);
    std::swap(modelname_, other->modelname_);
    std::swap(scale_, other->scale_);
    std::swap(event_, other->event_);
    std::swap(sortingorder_, other->sortingorder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureObject_descriptor_;
  metadata.reflection = AdventureObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureBridge::kX1FieldNumber;
const int AdventureBridge::kY1FieldNumber;
const int AdventureBridge::kX2FieldNumber;
const int AdventureBridge::kY2FieldNumber;
#endif  // !_MSC_VER

AdventureBridge::AdventureBridge()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureBridge)
}

void AdventureBridge::InitAsDefaultInstance() {
}

AdventureBridge::AdventureBridge(const AdventureBridge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureBridge)
}

void AdventureBridge::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  y1_ = 0;
  x2_ = 0;
  y2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureBridge::~AdventureBridge() {
  // @@protoc_insertion_point(destructor:pb.AdventureBridge)
  SharedDtor();
}

void AdventureBridge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdventureBridge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureBridge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureBridge_descriptor_;
}

const AdventureBridge& AdventureBridge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureBridge* AdventureBridge::default_instance_ = NULL;

AdventureBridge* AdventureBridge::New() const {
  return new AdventureBridge;
}

void AdventureBridge::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdventureBridge*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x1_, y2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureBridge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureBridge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X1 = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y1;
        break;
      }

      // optional int32 Y1 = 2;
      case 2: {
        if (tag == 16) {
         parse_Y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_X2;
        break;
      }

      // optional int32 X2 = 3;
      case 3: {
        if (tag == 24) {
         parse_X2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_Y2;
        break;
      }

      // optional int32 Y2 = 4;
      case 4: {
        if (tag == 32) {
         parse_Y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureBridge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureBridge)
  return false;
#undef DO_
}

void AdventureBridge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureBridge)
  // optional int32 X1 = 1;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x1(), output);
  }

  // optional int32 Y1 = 2;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y1(), output);
  }

  // optional int32 X2 = 3;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x2(), output);
  }

  // optional int32 Y2 = 4;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureBridge)
}

::google::protobuf::uint8* AdventureBridge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureBridge)
  // optional int32 X1 = 1;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x1(), target);
  }

  // optional int32 Y1 = 2;
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y1(), target);
  }

  // optional int32 X2 = 3;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x2(), target);
  }

  // optional int32 Y2 = 4;
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureBridge)
  return target;
}

int AdventureBridge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 X1 = 1;
    if (has_x1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x1());
    }

    // optional int32 Y1 = 2;
    if (has_y1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y1());
    }

    // optional int32 X2 = 3;
    if (has_x2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x2());
    }

    // optional int32 Y2 = 4;
    if (has_y2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureBridge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureBridge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureBridge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureBridge::MergeFrom(const AdventureBridge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureBridge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureBridge::CopyFrom(const AdventureBridge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureBridge::IsInitialized() const {

  return true;
}

void AdventureBridge::Swap(AdventureBridge* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(y1_, other->y1_);
    std::swap(x2_, other->x2_);
    std::swap(y2_, other->y2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureBridge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureBridge_descriptor_;
  metadata.reflection = AdventureBridge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureGimmickDoor::kKeyIndexFieldNumber;
const int AdventureGimmickDoor::kDoorIndexFieldNumber;
#endif  // !_MSC_VER

AdventureGimmickDoor::AdventureGimmickDoor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureGimmickDoor)
}

void AdventureGimmickDoor::InitAsDefaultInstance() {
}

AdventureGimmickDoor::AdventureGimmickDoor(const AdventureGimmickDoor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureGimmickDoor)
}

void AdventureGimmickDoor::SharedCtor() {
  _cached_size_ = 0;
  keyindex_ = 0;
  doorindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureGimmickDoor::~AdventureGimmickDoor() {
  // @@protoc_insertion_point(destructor:pb.AdventureGimmickDoor)
  SharedDtor();
}

void AdventureGimmickDoor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdventureGimmickDoor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureGimmickDoor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureGimmickDoor_descriptor_;
}

const AdventureGimmickDoor& AdventureGimmickDoor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureGimmickDoor* AdventureGimmickDoor::default_instance_ = NULL;

AdventureGimmickDoor* AdventureGimmickDoor::New() const {
  return new AdventureGimmickDoor;
}

void AdventureGimmickDoor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdventureGimmickDoor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(keyindex_, doorindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureGimmickDoor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureGimmickDoor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 KeyIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keyindex_)));
          set_has_keyindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_DoorIndex;
        break;
      }

      // optional int32 DoorIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_DoorIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doorindex_)));
          set_has_doorindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureGimmickDoor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureGimmickDoor)
  return false;
#undef DO_
}

void AdventureGimmickDoor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureGimmickDoor)
  // optional int32 KeyIndex = 1;
  if (has_keyindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->keyindex(), output);
  }

  // optional int32 DoorIndex = 2;
  if (has_doorindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->doorindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureGimmickDoor)
}

::google::protobuf::uint8* AdventureGimmickDoor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureGimmickDoor)
  // optional int32 KeyIndex = 1;
  if (has_keyindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->keyindex(), target);
  }

  // optional int32 DoorIndex = 2;
  if (has_doorindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->doorindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureGimmickDoor)
  return target;
}

int AdventureGimmickDoor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 KeyIndex = 1;
    if (has_keyindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keyindex());
    }

    // optional int32 DoorIndex = 2;
    if (has_doorindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doorindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureGimmickDoor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureGimmickDoor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureGimmickDoor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureGimmickDoor::MergeFrom(const AdventureGimmickDoor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_keyindex()) {
      set_keyindex(from.keyindex());
    }
    if (from.has_doorindex()) {
      set_doorindex(from.doorindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureGimmickDoor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureGimmickDoor::CopyFrom(const AdventureGimmickDoor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureGimmickDoor::IsInitialized() const {

  return true;
}

void AdventureGimmickDoor::Swap(AdventureGimmickDoor* other) {
  if (other != this) {
    std::swap(keyindex_, other->keyindex_);
    std::swap(doorindex_, other->doorindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureGimmickDoor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureGimmickDoor_descriptor_;
  metadata.reflection = AdventureGimmickDoor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureTaskNpc::kNpcIndexFieldNumber;
const int AdventureTaskNpc::kObjIndexArrFieldNumber;
#endif  // !_MSC_VER

AdventureTaskNpc::AdventureTaskNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureTaskNpc)
}

void AdventureTaskNpc::InitAsDefaultInstance() {
}

AdventureTaskNpc::AdventureTaskNpc(const AdventureTaskNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureTaskNpc)
}

void AdventureTaskNpc::SharedCtor() {
  _cached_size_ = 0;
  npcindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureTaskNpc::~AdventureTaskNpc() {
  // @@protoc_insertion_point(destructor:pb.AdventureTaskNpc)
  SharedDtor();
}

void AdventureTaskNpc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdventureTaskNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureTaskNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureTaskNpc_descriptor_;
}

const AdventureTaskNpc& AdventureTaskNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureTaskNpc* AdventureTaskNpc::default_instance_ = NULL;

AdventureTaskNpc* AdventureTaskNpc::New() const {
  return new AdventureTaskNpc;
}

void AdventureTaskNpc::Clear() {
  npcindex_ = 0;
  objindexarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureTaskNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureTaskNpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 NpcIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcindex_)));
          set_has_npcindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ObjIndexArr;
        break;
      }

      // repeated int32 ObjIndexArr = 2;
      case 2: {
        if (tag == 16) {
         parse_ObjIndexArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_objindexarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_objindexarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ObjIndexArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureTaskNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureTaskNpc)
  return false;
#undef DO_
}

void AdventureTaskNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureTaskNpc)
  // optional int32 NpcIndex = 1;
  if (has_npcindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npcindex(), output);
  }

  // repeated int32 ObjIndexArr = 2;
  for (int i = 0; i < this->objindexarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->objindexarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureTaskNpc)
}

::google::protobuf::uint8* AdventureTaskNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureTaskNpc)
  // optional int32 NpcIndex = 1;
  if (has_npcindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npcindex(), target);
  }

  // repeated int32 ObjIndexArr = 2;
  for (int i = 0; i < this->objindexarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->objindexarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureTaskNpc)
  return target;
}

int AdventureTaskNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 NpcIndex = 1;
    if (has_npcindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcindex());
    }

  }
  // repeated int32 ObjIndexArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->objindexarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->objindexarr(i));
    }
    total_size += 1 * this->objindexarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureTaskNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureTaskNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureTaskNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureTaskNpc::MergeFrom(const AdventureTaskNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  objindexarr_.MergeFrom(from.objindexarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcindex()) {
      set_npcindex(from.npcindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureTaskNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureTaskNpc::CopyFrom(const AdventureTaskNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureTaskNpc::IsInitialized() const {

  return true;
}

void AdventureTaskNpc::Swap(AdventureTaskNpc* other) {
  if (other != this) {
    std::swap(npcindex_, other->npcindex_);
    objindexarr_.Swap(&other->objindexarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureTaskNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureTaskNpc_descriptor_;
  metadata.reflection = AdventureTaskNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureMystery::kMysteryDoorIndexFieldNumber;
const int AdventureMystery::kObjIndexArrFieldNumber;
const int AdventureMystery::kTargetObjIndexArrFieldNumber;
const int AdventureMystery::kNonTargetObjIndexArrFieldNumber;
const int AdventureMystery::kMysteryLayerIndexFieldNumber;
const int AdventureMystery::kIsOpenFieldNumber;
const int AdventureMystery::kCipherMonsterIndexFieldNumber;
#endif  // !_MSC_VER

AdventureMystery::AdventureMystery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureMystery)
}

void AdventureMystery::InitAsDefaultInstance() {
}

AdventureMystery::AdventureMystery(const AdventureMystery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureMystery)
}

void AdventureMystery::SharedCtor() {
  _cached_size_ = 0;
  mysterydoorindex_ = 0;
  mysterylayerindex_ = 0u;
  isopen_ = 0u;
  ciphermonsterindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureMystery::~AdventureMystery() {
  // @@protoc_insertion_point(destructor:pb.AdventureMystery)
  SharedDtor();
}

void AdventureMystery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdventureMystery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureMystery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureMystery_descriptor_;
}

const AdventureMystery& AdventureMystery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureMystery* AdventureMystery::default_instance_ = NULL;

AdventureMystery* AdventureMystery::New() const {
  return new AdventureMystery;
}

void AdventureMystery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdventureMystery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(mysterydoorindex_, mysterylayerindex_);
  ZR_(isopen_, ciphermonsterindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  objindexarr_.Clear();
  targetobjindexarr_.Clear();
  nontargetobjindexarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureMystery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureMystery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MysteryDoorIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mysterydoorindex_)));
          set_has_mysterydoorindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ObjIndexArr;
        break;
      }

      // repeated int32 ObjIndexArr = 2;
      case 2: {
        if (tag == 16) {
         parse_ObjIndexArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_objindexarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_objindexarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ObjIndexArr;
        if (input->ExpectTag(24)) goto parse_TargetObjIndexArr;
        break;
      }

      // repeated int32 TargetObjIndexArr = 3;
      case 3: {
        if (tag == 24) {
         parse_TargetObjIndexArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_targetobjindexarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_targetobjindexarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TargetObjIndexArr;
        if (input->ExpectTag(32)) goto parse_NonTargetObjIndexArr;
        break;
      }

      // repeated int32 NonTargetObjIndexArr = 4;
      case 4: {
        if (tag == 32) {
         parse_NonTargetObjIndexArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_nontargetobjindexarr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_nontargetobjindexarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_NonTargetObjIndexArr;
        if (input->ExpectTag(40)) goto parse_MysteryLayerIndex;
        break;
      }

      // optional uint32 MysteryLayerIndex = 5;
      case 5: {
        if (tag == 40) {
         parse_MysteryLayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mysterylayerindex_)));
          set_has_mysterylayerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_IsOpen;
        break;
      }

      // optional uint32 IsOpen = 6;
      case 6: {
        if (tag == 48) {
         parse_IsOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_CipherMonsterIndex;
        break;
      }

      // optional int32 CipherMonsterIndex = 7;
      case 7: {
        if (tag == 56) {
         parse_CipherMonsterIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ciphermonsterindex_)));
          set_has_ciphermonsterindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureMystery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureMystery)
  return false;
#undef DO_
}

void AdventureMystery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureMystery)
  // optional int32 MysteryDoorIndex = 1;
  if (has_mysterydoorindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mysterydoorindex(), output);
  }

  // repeated int32 ObjIndexArr = 2;
  for (int i = 0; i < this->objindexarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->objindexarr(i), output);
  }

  // repeated int32 TargetObjIndexArr = 3;
  for (int i = 0; i < this->targetobjindexarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->targetobjindexarr(i), output);
  }

  // repeated int32 NonTargetObjIndexArr = 4;
  for (int i = 0; i < this->nontargetobjindexarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->nontargetobjindexarr(i), output);
  }

  // optional uint32 MysteryLayerIndex = 5;
  if (has_mysterylayerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mysterylayerindex(), output);
  }

  // optional uint32 IsOpen = 6;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->isopen(), output);
  }

  // optional int32 CipherMonsterIndex = 7;
  if (has_ciphermonsterindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ciphermonsterindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureMystery)
}

::google::protobuf::uint8* AdventureMystery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureMystery)
  // optional int32 MysteryDoorIndex = 1;
  if (has_mysterydoorindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mysterydoorindex(), target);
  }

  // repeated int32 ObjIndexArr = 2;
  for (int i = 0; i < this->objindexarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->objindexarr(i), target);
  }

  // repeated int32 TargetObjIndexArr = 3;
  for (int i = 0; i < this->targetobjindexarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->targetobjindexarr(i), target);
  }

  // repeated int32 NonTargetObjIndexArr = 4;
  for (int i = 0; i < this->nontargetobjindexarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->nontargetobjindexarr(i), target);
  }

  // optional uint32 MysteryLayerIndex = 5;
  if (has_mysterylayerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mysterylayerindex(), target);
  }

  // optional uint32 IsOpen = 6;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->isopen(), target);
  }

  // optional int32 CipherMonsterIndex = 7;
  if (has_ciphermonsterindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ciphermonsterindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureMystery)
  return target;
}

int AdventureMystery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MysteryDoorIndex = 1;
    if (has_mysterydoorindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mysterydoorindex());
    }

    // optional uint32 MysteryLayerIndex = 5;
    if (has_mysterylayerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mysterylayerindex());
    }

    // optional uint32 IsOpen = 6;
    if (has_isopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isopen());
    }

    // optional int32 CipherMonsterIndex = 7;
    if (has_ciphermonsterindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ciphermonsterindex());
    }

  }
  // repeated int32 ObjIndexArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->objindexarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->objindexarr(i));
    }
    total_size += 1 * this->objindexarr_size() + data_size;
  }

  // repeated int32 TargetObjIndexArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetobjindexarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->targetobjindexarr(i));
    }
    total_size += 1 * this->targetobjindexarr_size() + data_size;
  }

  // repeated int32 NonTargetObjIndexArr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->nontargetobjindexarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->nontargetobjindexarr(i));
    }
    total_size += 1 * this->nontargetobjindexarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureMystery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureMystery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureMystery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureMystery::MergeFrom(const AdventureMystery& from) {
  GOOGLE_CHECK_NE(&from, this);
  objindexarr_.MergeFrom(from.objindexarr_);
  targetobjindexarr_.MergeFrom(from.targetobjindexarr_);
  nontargetobjindexarr_.MergeFrom(from.nontargetobjindexarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mysterydoorindex()) {
      set_mysterydoorindex(from.mysterydoorindex());
    }
    if (from.has_mysterylayerindex()) {
      set_mysterylayerindex(from.mysterylayerindex());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_ciphermonsterindex()) {
      set_ciphermonsterindex(from.ciphermonsterindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureMystery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureMystery::CopyFrom(const AdventureMystery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureMystery::IsInitialized() const {

  return true;
}

void AdventureMystery::Swap(AdventureMystery* other) {
  if (other != this) {
    std::swap(mysterydoorindex_, other->mysterydoorindex_);
    objindexarr_.Swap(&other->objindexarr_);
    targetobjindexarr_.Swap(&other->targetobjindexarr_);
    nontargetobjindexarr_.Swap(&other->nontargetobjindexarr_);
    std::swap(mysterylayerindex_, other->mysterylayerindex_);
    std::swap(isopen_, other->isopen_);
    std::swap(ciphermonsterindex_, other->ciphermonsterindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureMystery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureMystery_descriptor_;
  metadata.reflection = AdventureMystery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransferObject::kObjectLayerIndexFieldNumber;
const int TransferObject::kObjectIndexFieldNumber;
const int TransferObject::kTransferLayerIndexFieldNumber;
#endif  // !_MSC_VER

TransferObject::TransferObject()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TransferObject)
}

void TransferObject::InitAsDefaultInstance() {
}

TransferObject::TransferObject(const TransferObject& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TransferObject)
}

void TransferObject::SharedCtor() {
  _cached_size_ = 0;
  objectlayerindex_ = 0u;
  objectindex_ = 0;
  transferlayerindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransferObject::~TransferObject() {
  // @@protoc_insertion_point(destructor:pb.TransferObject)
  SharedDtor();
}

void TransferObject::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransferObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransferObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransferObject_descriptor_;
}

const TransferObject& TransferObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

TransferObject* TransferObject::default_instance_ = NULL;

TransferObject* TransferObject::New() const {
  return new TransferObject;
}

void TransferObject::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TransferObject*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(objectlayerindex_, transferlayerindex_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransferObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TransferObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ObjectLayerIndex = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &objectlayerindex_)));
          set_has_objectlayerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ObjectIndex;
        break;
      }

      // optional int32 ObjectIndex = 2;
      case 2: {
        if (tag == 16) {
         parse_ObjectIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectindex_)));
          set_has_objectindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TransferLayerIndex;
        break;
      }

      // optional uint32 TransferLayerIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_TransferLayerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &transferlayerindex_)));
          set_has_transferlayerindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TransferObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TransferObject)
  return false;
#undef DO_
}

void TransferObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TransferObject)
  // optional uint32 ObjectLayerIndex = 1;
  if (has_objectlayerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->objectlayerindex(), output);
  }

  // optional int32 ObjectIndex = 2;
  if (has_objectindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectindex(), output);
  }

  // optional uint32 TransferLayerIndex = 3;
  if (has_transferlayerindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->transferlayerindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TransferObject)
}

::google::protobuf::uint8* TransferObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TransferObject)
  // optional uint32 ObjectLayerIndex = 1;
  if (has_objectlayerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->objectlayerindex(), target);
  }

  // optional int32 ObjectIndex = 2;
  if (has_objectindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectindex(), target);
  }

  // optional uint32 TransferLayerIndex = 3;
  if (has_transferlayerindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->transferlayerindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TransferObject)
  return target;
}

int TransferObject::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ObjectLayerIndex = 1;
    if (has_objectlayerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->objectlayerindex());
    }

    // optional int32 ObjectIndex = 2;
    if (has_objectindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectindex());
    }

    // optional uint32 TransferLayerIndex = 3;
    if (has_transferlayerindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->transferlayerindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransferObject::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransferObject* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransferObject*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransferObject::MergeFrom(const TransferObject& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objectlayerindex()) {
      set_objectlayerindex(from.objectlayerindex());
    }
    if (from.has_objectindex()) {
      set_objectindex(from.objectindex());
    }
    if (from.has_transferlayerindex()) {
      set_transferlayerindex(from.transferlayerindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransferObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransferObject::CopyFrom(const TransferObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransferObject::IsInitialized() const {

  return true;
}

void TransferObject::Swap(TransferObject* other) {
  if (other != this) {
    std::swap(objectlayerindex_, other->objectlayerindex_);
    std::swap(objectindex_, other->objectindex_);
    std::swap(transferlayerindex_, other->transferlayerindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransferObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransferObject_descriptor_;
  metadata.reflection = TransferObject_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrapResetPoint::kTrapIdFieldNumber;
const int TrapResetPoint::kPosFieldNumber;
#endif  // !_MSC_VER

TrapResetPoint::TrapResetPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TrapResetPoint)
}

void TrapResetPoint::InitAsDefaultInstance() {
  pos_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

TrapResetPoint::TrapResetPoint(const TrapResetPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TrapResetPoint)
}

void TrapResetPoint::SharedCtor() {
  _cached_size_ = 0;
  trapid_ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrapResetPoint::~TrapResetPoint() {
  // @@protoc_insertion_point(destructor:pb.TrapResetPoint)
  SharedDtor();
}

void TrapResetPoint::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void TrapResetPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrapResetPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrapResetPoint_descriptor_;
}

const TrapResetPoint& TrapResetPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

TrapResetPoint* TrapResetPoint::default_instance_ = NULL;

TrapResetPoint* TrapResetPoint::New() const {
  return new TrapResetPoint;
}

void TrapResetPoint::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    trapid_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::pb::PbVector2_Int::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrapResetPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TrapResetPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 TrapId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trapid_)));
          set_has_trapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Pos;
        break;
      }

      // optional .pb.PbVector2_Int Pos = 2;
      case 2: {
        if (tag == 18) {
         parse_Pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TrapResetPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TrapResetPoint)
  return false;
#undef DO_
}

void TrapResetPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TrapResetPoint)
  // optional uint32 TrapId = 1;
  if (has_trapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->trapid(), output);
  }

  // optional .pb.PbVector2_Int Pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TrapResetPoint)
}

::google::protobuf::uint8* TrapResetPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TrapResetPoint)
  // optional uint32 TrapId = 1;
  if (has_trapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->trapid(), target);
  }

  // optional .pb.PbVector2_Int Pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TrapResetPoint)
  return target;
}

int TrapResetPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 TrapId = 1;
    if (has_trapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trapid());
    }

    // optional .pb.PbVector2_Int Pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrapResetPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrapResetPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrapResetPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrapResetPoint::MergeFrom(const TrapResetPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trapid()) {
      set_trapid(from.trapid());
    }
    if (from.has_pos()) {
      mutable_pos()->::pb::PbVector2_Int::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrapResetPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrapResetPoint::CopyFrom(const TrapResetPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrapResetPoint::IsInitialized() const {

  return true;
}

void TrapResetPoint::Swap(TrapResetPoint* other) {
  if (other != this) {
    std::swap(trapid_, other->trapid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrapResetPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrapResetPoint_descriptor_;
  metadata.reflection = TrapResetPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureLayer::kBlockArrFieldNumber;
const int AdventureLayer::kObjectArrFieldNumber;
const int AdventureLayer::kBridgeArrFieldNumber;
const int AdventureLayer::kLayerSizeFieldNumber;
const int AdventureLayer::kDoorArrFieldNumber;
const int AdventureLayer::kTaskNpcFieldNumber;
const int AdventureLayer::kMysteryEntryFieldNumber;
const int AdventureLayer::kRoomPosArrFieldNumber;
const int AdventureLayer::kTrapPosArrFieldNumber;
#endif  // !_MSC_VER

AdventureLayer::AdventureLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureLayer)
}

void AdventureLayer::InitAsDefaultInstance() {
  layersize_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
  tasknpc_ = const_cast< ::pb::AdventureTaskNpc*>(&::pb::AdventureTaskNpc::default_instance());
  mysteryentry_ = const_cast< ::pb::AdventureMystery*>(&::pb::AdventureMystery::default_instance());
}

AdventureLayer::AdventureLayer(const AdventureLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureLayer)
}

void AdventureLayer::SharedCtor() {
  _cached_size_ = 0;
  layersize_ = NULL;
  tasknpc_ = NULL;
  mysteryentry_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureLayer::~AdventureLayer() {
  // @@protoc_insertion_point(destructor:pb.AdventureLayer)
  SharedDtor();
}

void AdventureLayer::SharedDtor() {
  if (this != default_instance_) {
    delete layersize_;
    delete tasknpc_;
    delete mysteryentry_;
  }
}

void AdventureLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureLayer_descriptor_;
}

const AdventureLayer& AdventureLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureLayer* AdventureLayer::default_instance_ = NULL;

AdventureLayer* AdventureLayer::New() const {
  return new AdventureLayer;
}

void AdventureLayer::Clear() {
  if (_has_bits_[0 / 32] & 104) {
    if (has_layersize()) {
      if (layersize_ != NULL) layersize_->::pb::PbVector2_Int::Clear();
    }
    if (has_tasknpc()) {
      if (tasknpc_ != NULL) tasknpc_->::pb::AdventureTaskNpc::Clear();
    }
    if (has_mysteryentry()) {
      if (mysteryentry_ != NULL) mysteryentry_->::pb::AdventureMystery::Clear();
    }
  }
  blockarr_.Clear();
  objectarr_.Clear();
  bridgearr_.Clear();
  doorarr_.Clear();
  roomposarr_.Clear();
  trapposarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.AdventureBlock BlockArr = 1;
      case 1: {
        if (tag == 10) {
         parse_BlockArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blockarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_BlockArr;
        if (input->ExpectTag(18)) goto parse_ObjectArr;
        break;
      }

      // repeated .pb.AdventureObject ObjectArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ObjectArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_objectarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ObjectArr;
        if (input->ExpectTag(26)) goto parse_BridgeArr;
        break;
      }

      // repeated .pb.AdventureBridge BridgeArr = 3;
      case 3: {
        if (tag == 26) {
         parse_BridgeArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bridgearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BridgeArr;
        if (input->ExpectTag(34)) goto parse_LayerSize;
        break;
      }

      // optional .pb.PbVector2_Int LayerSize = 4;
      case 4: {
        if (tag == 34) {
         parse_LayerSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_layersize()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DoorArr;
        break;
      }

      // repeated .pb.AdventureGimmickDoor DoorArr = 5;
      case 5: {
        if (tag == 42) {
         parse_DoorArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doorarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_DoorArr;
        if (input->ExpectTag(50)) goto parse_TaskNpc;
        break;
      }

      // optional .pb.AdventureTaskNpc TaskNpc = 6;
      case 6: {
        if (tag == 50) {
         parse_TaskNpc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tasknpc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_MysteryEntry;
        break;
      }

      // optional .pb.AdventureMystery MysteryEntry = 7;
      case 7: {
        if (tag == 58) {
         parse_MysteryEntry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mysteryentry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_RoomPosArr;
        break;
      }

      // repeated .pb.PbVector2_Int RoomPosArr = 8;
      case 8: {
        if (tag == 66) {
         parse_RoomPosArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomposarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_RoomPosArr;
        if (input->ExpectTag(74)) goto parse_TrapPosArr;
        break;
      }

      // repeated .pb.TrapResetPoint TrapPosArr = 9;
      case 9: {
        if (tag == 74) {
         parse_TrapPosArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trapposarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_TrapPosArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureLayer)
  return false;
#undef DO_
}

void AdventureLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureLayer)
  // repeated .pb.AdventureBlock BlockArr = 1;
  for (int i = 0; i < this->blockarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blockarr(i), output);
  }

  // repeated .pb.AdventureObject ObjectArr = 2;
  for (int i = 0; i < this->objectarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->objectarr(i), output);
  }

  // repeated .pb.AdventureBridge BridgeArr = 3;
  for (int i = 0; i < this->bridgearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bridgearr(i), output);
  }

  // optional .pb.PbVector2_Int LayerSize = 4;
  if (has_layersize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->layersize(), output);
  }

  // repeated .pb.AdventureGimmickDoor DoorArr = 5;
  for (int i = 0; i < this->doorarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->doorarr(i), output);
  }

  // optional .pb.AdventureTaskNpc TaskNpc = 6;
  if (has_tasknpc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->tasknpc(), output);
  }

  // optional .pb.AdventureMystery MysteryEntry = 7;
  if (has_mysteryentry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mysteryentry(), output);
  }

  // repeated .pb.PbVector2_Int RoomPosArr = 8;
  for (int i = 0; i < this->roomposarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->roomposarr(i), output);
  }

  // repeated .pb.TrapResetPoint TrapPosArr = 9;
  for (int i = 0; i < this->trapposarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->trapposarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureLayer)
}

::google::protobuf::uint8* AdventureLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureLayer)
  // repeated .pb.AdventureBlock BlockArr = 1;
  for (int i = 0; i < this->blockarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blockarr(i), target);
  }

  // repeated .pb.AdventureObject ObjectArr = 2;
  for (int i = 0; i < this->objectarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->objectarr(i), target);
  }

  // repeated .pb.AdventureBridge BridgeArr = 3;
  for (int i = 0; i < this->bridgearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bridgearr(i), target);
  }

  // optional .pb.PbVector2_Int LayerSize = 4;
  if (has_layersize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->layersize(), target);
  }

  // repeated .pb.AdventureGimmickDoor DoorArr = 5;
  for (int i = 0; i < this->doorarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->doorarr(i), target);
  }

  // optional .pb.AdventureTaskNpc TaskNpc = 6;
  if (has_tasknpc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->tasknpc(), target);
  }

  // optional .pb.AdventureMystery MysteryEntry = 7;
  if (has_mysteryentry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mysteryentry(), target);
  }

  // repeated .pb.PbVector2_Int RoomPosArr = 8;
  for (int i = 0; i < this->roomposarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->roomposarr(i), target);
  }

  // repeated .pb.TrapResetPoint TrapPosArr = 9;
  for (int i = 0; i < this->trapposarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->trapposarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureLayer)
  return target;
}

int AdventureLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional .pb.PbVector2_Int LayerSize = 4;
    if (has_layersize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layersize());
    }

    // optional .pb.AdventureTaskNpc TaskNpc = 6;
    if (has_tasknpc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasknpc());
    }

    // optional .pb.AdventureMystery MysteryEntry = 7;
    if (has_mysteryentry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mysteryentry());
    }

  }
  // repeated .pb.AdventureBlock BlockArr = 1;
  total_size += 1 * this->blockarr_size();
  for (int i = 0; i < this->blockarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blockarr(i));
  }

  // repeated .pb.AdventureObject ObjectArr = 2;
  total_size += 1 * this->objectarr_size();
  for (int i = 0; i < this->objectarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->objectarr(i));
  }

  // repeated .pb.AdventureBridge BridgeArr = 3;
  total_size += 1 * this->bridgearr_size();
  for (int i = 0; i < this->bridgearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bridgearr(i));
  }

  // repeated .pb.AdventureGimmickDoor DoorArr = 5;
  total_size += 1 * this->doorarr_size();
  for (int i = 0; i < this->doorarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->doorarr(i));
  }

  // repeated .pb.PbVector2_Int RoomPosArr = 8;
  total_size += 1 * this->roomposarr_size();
  for (int i = 0; i < this->roomposarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomposarr(i));
  }

  // repeated .pb.TrapResetPoint TrapPosArr = 9;
  total_size += 1 * this->trapposarr_size();
  for (int i = 0; i < this->trapposarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trapposarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureLayer::MergeFrom(const AdventureLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  blockarr_.MergeFrom(from.blockarr_);
  objectarr_.MergeFrom(from.objectarr_);
  bridgearr_.MergeFrom(from.bridgearr_);
  doorarr_.MergeFrom(from.doorarr_);
  roomposarr_.MergeFrom(from.roomposarr_);
  trapposarr_.MergeFrom(from.trapposarr_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_layersize()) {
      mutable_layersize()->::pb::PbVector2_Int::MergeFrom(from.layersize());
    }
    if (from.has_tasknpc()) {
      mutable_tasknpc()->::pb::AdventureTaskNpc::MergeFrom(from.tasknpc());
    }
    if (from.has_mysteryentry()) {
      mutable_mysteryentry()->::pb::AdventureMystery::MergeFrom(from.mysteryentry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureLayer::CopyFrom(const AdventureLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureLayer::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->objectarr())) return false;
  return true;
}

void AdventureLayer::Swap(AdventureLayer* other) {
  if (other != this) {
    blockarr_.Swap(&other->blockarr_);
    objectarr_.Swap(&other->objectarr_);
    bridgearr_.Swap(&other->bridgearr_);
    std::swap(layersize_, other->layersize_);
    doorarr_.Swap(&other->doorarr_);
    std::swap(tasknpc_, other->tasknpc_);
    std::swap(mysteryentry_, other->mysteryentry_);
    roomposarr_.Swap(&other->roomposarr_);
    trapposarr_.Swap(&other->trapposarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureLayer_descriptor_;
  metadata.reflection = AdventureLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdventureMap::kIdFieldNumber;
const int AdventureMap::kMapTidFieldNumber;
const int AdventureMap::kMapNameFieldNumber;
const int AdventureMap::kStartXFieldNumber;
const int AdventureMap::kStartYFieldNumber;
const int AdventureMap::kDirectXFieldNumber;
const int AdventureMap::kDirectYFieldNumber;
const int AdventureMap::kLayerArrFieldNumber;
const int AdventureMap::kTerrainMapIdFieldNumber;
const int AdventureMap::kEventNumFieldNumber;
const int AdventureMap::kMonsterHpFieldNumber;
const int AdventureMap::kTransferObjArrFieldNumber;
const int AdventureMap::kDoneEventNumFieldNumber;
const int AdventureMap::kMapExpireTimeFieldNumber;
#endif  // !_MSC_VER

AdventureMap::AdventureMap()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.AdventureMap)
}

void AdventureMap::InitAsDefaultInstance() {
}

AdventureMap::AdventureMap(const AdventureMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.AdventureMap)
}

void AdventureMap::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  maptid_ = 0u;
  mapname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  startx_ = 0;
  starty_ = 0;
  directx_ = 0;
  directy_ = 0;
  terrainmapid_ = 0u;
  eventnum_ = 0u;
  monsterhp_ = GOOGLE_ULONGLONG(0);
  doneeventnum_ = 0u;
  mapexpiretime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdventureMap::~AdventureMap() {
  // @@protoc_insertion_point(destructor:pb.AdventureMap)
  SharedDtor();
}

void AdventureMap::SharedDtor() {
  if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mapname_;
  }
  if (this != default_instance_) {
  }
}

void AdventureMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdventureMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdventureMap_descriptor_;
}

const AdventureMap& AdventureMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fAdventureMap_2eproto();
  return *default_instance_;
}

AdventureMap* AdventureMap::default_instance_ = NULL;

AdventureMap* AdventureMap::New() const {
  return new AdventureMap;
}

void AdventureMap::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AdventureMap*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(maptid_, directx_);
    id_ = GOOGLE_ULONGLONG(0);
    if (has_mapname()) {
      if (mapname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mapname_->clear();
      }
    }
    directy_ = 0;
  }
  if (_has_bits_[8 / 32] & 14080) {
    ZR_(terrainmapid_, doneeventnum_);
    mapexpiretime_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  layerarr_.Clear();
  transferobjarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdventureMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.AdventureMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_MapTid;
        break;
      }

      // optional uint32 MapTid = 2;
      case 2: {
        if (tag == 16) {
         parse_MapTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maptid_)));
          set_has_maptid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_MapName;
        break;
      }

      // optional string MapName = 3;
      case 3: {
        if (tag == 26) {
         parse_MapName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mapname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mapname().data(), this->mapname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mapname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_StartX;
        break;
      }

      // optional int32 StartX = 4;
      case 4: {
        if (tag == 32) {
         parse_StartX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startx_)));
          set_has_startx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_StartY;
        break;
      }

      // optional int32 StartY = 5;
      case 5: {
        if (tag == 40) {
         parse_StartY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starty_)));
          set_has_starty();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_DirectX;
        break;
      }

      // optional int32 DirectX = 6;
      case 6: {
        if (tag == 48) {
         parse_DirectX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directx_)));
          set_has_directx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DirectY;
        break;
      }

      // optional int32 DirectY = 7;
      case 7: {
        if (tag == 56) {
         parse_DirectY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &directy_)));
          set_has_directy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_LayerArr;
        break;
      }

      // repeated .pb.AdventureLayer LayerArr = 8;
      case 8: {
        if (tag == 66) {
         parse_LayerArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layerarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_LayerArr;
        if (input->ExpectTag(72)) goto parse_TerrainMapId;
        break;
      }

      // optional uint32 TerrainMapId = 9;
      case 9: {
        if (tag == 72) {
         parse_TerrainMapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &terrainmapid_)));
          set_has_terrainmapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_EventNum;
        break;
      }

      // optional uint32 EventNum = 10;
      case 10: {
        if (tag == 80) {
         parse_EventNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eventnum_)));
          set_has_eventnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_MonsterHp;
        break;
      }

      // optional uint64 MonsterHp = 11;
      case 11: {
        if (tag == 88) {
         parse_MonsterHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &monsterhp_)));
          set_has_monsterhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_TransferObjArr;
        break;
      }

      // repeated .pb.TransferObject TransferObjArr = 12;
      case 12: {
        if (tag == 98) {
         parse_TransferObjArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transferobjarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_TransferObjArr;
        if (input->ExpectTag(104)) goto parse_DoneEventNum;
        break;
      }

      // optional uint32 DoneEventNum = 13;
      case 13: {
        if (tag == 104) {
         parse_DoneEventNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doneeventnum_)));
          set_has_doneeventnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_MapExpireTime;
        break;
      }

      // optional uint64 MapExpireTime = 14;
      case 14: {
        if (tag == 112) {
         parse_MapExpireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapexpiretime_)));
          set_has_mapexpiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.AdventureMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.AdventureMap)
  return false;
#undef DO_
}

void AdventureMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.AdventureMap)
  // optional uint64 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 MapTid = 2;
  if (has_maptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maptid(), output);
  }

  // optional string MapName = 3;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->mapname(), output);
  }

  // optional int32 StartX = 4;
  if (has_startx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->startx(), output);
  }

  // optional int32 StartY = 5;
  if (has_starty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->starty(), output);
  }

  // optional int32 DirectX = 6;
  if (has_directx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->directx(), output);
  }

  // optional int32 DirectY = 7;
  if (has_directy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->directy(), output);
  }

  // repeated .pb.AdventureLayer LayerArr = 8;
  for (int i = 0; i < this->layerarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->layerarr(i), output);
  }

  // optional uint32 TerrainMapId = 9;
  if (has_terrainmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->terrainmapid(), output);
  }

  // optional uint32 EventNum = 10;
  if (has_eventnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->eventnum(), output);
  }

  // optional uint64 MonsterHp = 11;
  if (has_monsterhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->monsterhp(), output);
  }

  // repeated .pb.TransferObject TransferObjArr = 12;
  for (int i = 0; i < this->transferobjarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->transferobjarr(i), output);
  }

  // optional uint32 DoneEventNum = 13;
  if (has_doneeventnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->doneeventnum(), output);
  }

  // optional uint64 MapExpireTime = 14;
  if (has_mapexpiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->mapexpiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.AdventureMap)
}

::google::protobuf::uint8* AdventureMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.AdventureMap)
  // optional uint64 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 MapTid = 2;
  if (has_maptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maptid(), target);
  }

  // optional string MapName = 3;
  if (has_mapname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mapname().data(), this->mapname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mapname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mapname(), target);
  }

  // optional int32 StartX = 4;
  if (has_startx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->startx(), target);
  }

  // optional int32 StartY = 5;
  if (has_starty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->starty(), target);
  }

  // optional int32 DirectX = 6;
  if (has_directx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->directx(), target);
  }

  // optional int32 DirectY = 7;
  if (has_directy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->directy(), target);
  }

  // repeated .pb.AdventureLayer LayerArr = 8;
  for (int i = 0; i < this->layerarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->layerarr(i), target);
  }

  // optional uint32 TerrainMapId = 9;
  if (has_terrainmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->terrainmapid(), target);
  }

  // optional uint32 EventNum = 10;
  if (has_eventnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->eventnum(), target);
  }

  // optional uint64 MonsterHp = 11;
  if (has_monsterhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->monsterhp(), target);
  }

  // repeated .pb.TransferObject TransferObjArr = 12;
  for (int i = 0; i < this->transferobjarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->transferobjarr(i), target);
  }

  // optional uint32 DoneEventNum = 13;
  if (has_doneeventnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->doneeventnum(), target);
  }

  // optional uint64 MapExpireTime = 14;
  if (has_mapexpiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->mapexpiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.AdventureMap)
  return target;
}

int AdventureMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 MapTid = 2;
    if (has_maptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maptid());
    }

    // optional string MapName = 3;
    if (has_mapname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mapname());
    }

    // optional int32 StartX = 4;
    if (has_startx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startx());
    }

    // optional int32 StartY = 5;
    if (has_starty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starty());
    }

    // optional int32 DirectX = 6;
    if (has_directx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->directx());
    }

    // optional int32 DirectY = 7;
    if (has_directy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->directy());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 TerrainMapId = 9;
    if (has_terrainmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->terrainmapid());
    }

    // optional uint32 EventNum = 10;
    if (has_eventnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eventnum());
    }

    // optional uint64 MonsterHp = 11;
    if (has_monsterhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->monsterhp());
    }

    // optional uint32 DoneEventNum = 13;
    if (has_doneeventnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->doneeventnum());
    }

    // optional uint64 MapExpireTime = 14;
    if (has_mapexpiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapexpiretime());
    }

  }
  // repeated .pb.AdventureLayer LayerArr = 8;
  total_size += 1 * this->layerarr_size();
  for (int i = 0; i < this->layerarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layerarr(i));
  }

  // repeated .pb.TransferObject TransferObjArr = 12;
  total_size += 1 * this->transferobjarr_size();
  for (int i = 0; i < this->transferobjarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transferobjarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdventureMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdventureMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdventureMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdventureMap::MergeFrom(const AdventureMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  layerarr_.MergeFrom(from.layerarr_);
  transferobjarr_.MergeFrom(from.transferobjarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_maptid()) {
      set_maptid(from.maptid());
    }
    if (from.has_mapname()) {
      set_mapname(from.mapname());
    }
    if (from.has_startx()) {
      set_startx(from.startx());
    }
    if (from.has_starty()) {
      set_starty(from.starty());
    }
    if (from.has_directx()) {
      set_directx(from.directx());
    }
    if (from.has_directy()) {
      set_directy(from.directy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_terrainmapid()) {
      set_terrainmapid(from.terrainmapid());
    }
    if (from.has_eventnum()) {
      set_eventnum(from.eventnum());
    }
    if (from.has_monsterhp()) {
      set_monsterhp(from.monsterhp());
    }
    if (from.has_doneeventnum()) {
      set_doneeventnum(from.doneeventnum());
    }
    if (from.has_mapexpiretime()) {
      set_mapexpiretime(from.mapexpiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdventureMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdventureMap::CopyFrom(const AdventureMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdventureMap::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->layerarr())) return false;
  return true;
}

void AdventureMap::Swap(AdventureMap* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(maptid_, other->maptid_);
    std::swap(mapname_, other->mapname_);
    std::swap(startx_, other->startx_);
    std::swap(starty_, other->starty_);
    std::swap(directx_, other->directx_);
    std::swap(directy_, other->directy_);
    layerarr_.Swap(&other->layerarr_);
    std::swap(terrainmapid_, other->terrainmapid_);
    std::swap(eventnum_, other->eventnum_);
    std::swap(monsterhp_, other->monsterhp_);
    transferobjarr_.Swap(&other->transferobjarr_);
    std::swap(doneeventnum_, other->doneeventnum_);
    std::swap(mapexpiretime_, other->mapexpiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdventureMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdventureMap_descriptor_;
  metadata.reflection = AdventureMap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
