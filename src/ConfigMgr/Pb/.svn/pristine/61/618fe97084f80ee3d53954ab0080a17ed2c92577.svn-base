// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/SlgScience.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/SlgScience.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TSlgScienceScience_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgScienceScience_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgScienceScienceQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgScienceScienceQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgScienceGetScienceInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgScienceGetScienceInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgScienceUpdateDataNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgScienceUpdateDataNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgScienceScienceLevelUpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgScienceScienceLevelUpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceQueueCDByItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgScienceReduceScienceQueueCDByItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceQueueAllCDByItemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgScienceReduceScienceQueueAllCDByItemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceQueueCDByGoldReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgScienceReduceScienceQueueCDByGoldReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceQueueAllCDByGoldReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgScienceReduceScienceQueueAllCDByGoldReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceCDByGuildHelpReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgScienceReduceScienceCDByGuildHelpReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceCDFreeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TSlgScienceReduceScienceCDFreeReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fSlgScience_2eproto() {
  protobuf_AddDesc_net_2fSlgScience_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/SlgScience.proto");
  GOOGLE_CHECK(file != NULL);
  TSlgScienceScience_descriptor_ = file->message_type(0);
  static const int TSlgScienceScience_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceScience, scienceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceScience, level_),
  };
  TSlgScienceScience_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgScienceScience_descriptor_,
      TSlgScienceScience::default_instance_,
      TSlgScienceScience_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceScience, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceScience, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgScienceScience));
  TSlgScienceScienceQueue_descriptor_ = file->message_type(1);
  static const int TSlgScienceScienceQueue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceScienceQueue, queueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceScienceQueue, endcdtime_),
  };
  TSlgScienceScienceQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgScienceScienceQueue_descriptor_,
      TSlgScienceScienceQueue::default_instance_,
      TSlgScienceScienceQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceScienceQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceScienceQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgScienceScienceQueue));
  TSlgScienceGetScienceInfoRsp_descriptor_ = file->message_type(2);
  static const int TSlgScienceGetScienceInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceGetScienceInfoRsp, sciencearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceGetScienceInfoRsp, queuearr_),
  };
  TSlgScienceGetScienceInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgScienceGetScienceInfoRsp_descriptor_,
      TSlgScienceGetScienceInfoRsp::default_instance_,
      TSlgScienceGetScienceInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceGetScienceInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceGetScienceInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgScienceGetScienceInfoRsp));
  TSlgScienceUpdateDataNotify_descriptor_ = file->message_type(3);
  static const int TSlgScienceUpdateDataNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceUpdateDataNotify, sciencearr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceUpdateDataNotify, queuearr_),
  };
  TSlgScienceUpdateDataNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgScienceUpdateDataNotify_descriptor_,
      TSlgScienceUpdateDataNotify::default_instance_,
      TSlgScienceUpdateDataNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceUpdateDataNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceUpdateDataNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgScienceUpdateDataNotify));
  TSlgScienceScienceLevelUpReq_descriptor_ = file->message_type(4);
  static const int TSlgScienceScienceLevelUpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceScienceLevelUpReq, sciencetid_),
  };
  TSlgScienceScienceLevelUpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgScienceScienceLevelUpReq_descriptor_,
      TSlgScienceScienceLevelUpReq::default_instance_,
      TSlgScienceScienceLevelUpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceScienceLevelUpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceScienceLevelUpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgScienceScienceLevelUpReq));
  TSlgScienceReduceScienceQueueCDByItemReq_descriptor_ = file->message_type(5);
  static const int TSlgScienceReduceScienceQueueCDByItemReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueCDByItemReq, queueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueCDByItemReq, itemarr_),
  };
  TSlgScienceReduceScienceQueueCDByItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgScienceReduceScienceQueueCDByItemReq_descriptor_,
      TSlgScienceReduceScienceQueueCDByItemReq::default_instance_,
      TSlgScienceReduceScienceQueueCDByItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueCDByItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueCDByItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgScienceReduceScienceQueueCDByItemReq));
  TSlgScienceReduceScienceQueueAllCDByItemReq_descriptor_ = file->message_type(6);
  static const int TSlgScienceReduceScienceQueueAllCDByItemReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueAllCDByItemReq, queueid_),
  };
  TSlgScienceReduceScienceQueueAllCDByItemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgScienceReduceScienceQueueAllCDByItemReq_descriptor_,
      TSlgScienceReduceScienceQueueAllCDByItemReq::default_instance_,
      TSlgScienceReduceScienceQueueAllCDByItemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueAllCDByItemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueAllCDByItemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgScienceReduceScienceQueueAllCDByItemReq));
  TSlgScienceReduceScienceQueueCDByGoldReq_descriptor_ = file->message_type(7);
  static const int TSlgScienceReduceScienceQueueCDByGoldReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueCDByGoldReq, queueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueCDByGoldReq, goldnum_),
  };
  TSlgScienceReduceScienceQueueCDByGoldReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgScienceReduceScienceQueueCDByGoldReq_descriptor_,
      TSlgScienceReduceScienceQueueCDByGoldReq::default_instance_,
      TSlgScienceReduceScienceQueueCDByGoldReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueCDByGoldReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueCDByGoldReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgScienceReduceScienceQueueCDByGoldReq));
  TSlgScienceReduceScienceQueueAllCDByGoldReq_descriptor_ = file->message_type(8);
  static const int TSlgScienceReduceScienceQueueAllCDByGoldReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueAllCDByGoldReq, queueid_),
  };
  TSlgScienceReduceScienceQueueAllCDByGoldReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgScienceReduceScienceQueueAllCDByGoldReq_descriptor_,
      TSlgScienceReduceScienceQueueAllCDByGoldReq::default_instance_,
      TSlgScienceReduceScienceQueueAllCDByGoldReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueAllCDByGoldReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceQueueAllCDByGoldReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgScienceReduceScienceQueueAllCDByGoldReq));
  TSlgScienceReduceScienceCDByGuildHelpReq_descriptor_ = file->message_type(9);
  static const int TSlgScienceReduceScienceCDByGuildHelpReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceCDByGuildHelpReq, queueid_),
  };
  TSlgScienceReduceScienceCDByGuildHelpReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgScienceReduceScienceCDByGuildHelpReq_descriptor_,
      TSlgScienceReduceScienceCDByGuildHelpReq::default_instance_,
      TSlgScienceReduceScienceCDByGuildHelpReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceCDByGuildHelpReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceCDByGuildHelpReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgScienceReduceScienceCDByGuildHelpReq));
  TSlgScienceReduceScienceCDFreeReq_descriptor_ = file->message_type(10);
  static const int TSlgScienceReduceScienceCDFreeReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceCDFreeReq, queueid_),
  };
  TSlgScienceReduceScienceCDFreeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TSlgScienceReduceScienceCDFreeReq_descriptor_,
      TSlgScienceReduceScienceCDFreeReq::default_instance_,
      TSlgScienceReduceScienceCDFreeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceCDFreeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TSlgScienceReduceScienceCDFreeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TSlgScienceReduceScienceCDFreeReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fSlgScience_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgScienceScience_descriptor_, &TSlgScienceScience::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgScienceScienceQueue_descriptor_, &TSlgScienceScienceQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgScienceGetScienceInfoRsp_descriptor_, &TSlgScienceGetScienceInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgScienceUpdateDataNotify_descriptor_, &TSlgScienceUpdateDataNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgScienceScienceLevelUpReq_descriptor_, &TSlgScienceScienceLevelUpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgScienceReduceScienceQueueCDByItemReq_descriptor_, &TSlgScienceReduceScienceQueueCDByItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgScienceReduceScienceQueueAllCDByItemReq_descriptor_, &TSlgScienceReduceScienceQueueAllCDByItemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgScienceReduceScienceQueueCDByGoldReq_descriptor_, &TSlgScienceReduceScienceQueueCDByGoldReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgScienceReduceScienceQueueAllCDByGoldReq_descriptor_, &TSlgScienceReduceScienceQueueAllCDByGoldReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgScienceReduceScienceCDByGuildHelpReq_descriptor_, &TSlgScienceReduceScienceCDByGuildHelpReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TSlgScienceReduceScienceCDFreeReq_descriptor_, &TSlgScienceReduceScienceCDFreeReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fSlgScience_2eproto() {
  delete TSlgScienceScience::default_instance_;
  delete TSlgScienceScience_reflection_;
  delete TSlgScienceScienceQueue::default_instance_;
  delete TSlgScienceScienceQueue_reflection_;
  delete TSlgScienceGetScienceInfoRsp::default_instance_;
  delete TSlgScienceGetScienceInfoRsp_reflection_;
  delete TSlgScienceUpdateDataNotify::default_instance_;
  delete TSlgScienceUpdateDataNotify_reflection_;
  delete TSlgScienceScienceLevelUpReq::default_instance_;
  delete TSlgScienceScienceLevelUpReq_reflection_;
  delete TSlgScienceReduceScienceQueueCDByItemReq::default_instance_;
  delete TSlgScienceReduceScienceQueueCDByItemReq_reflection_;
  delete TSlgScienceReduceScienceQueueAllCDByItemReq::default_instance_;
  delete TSlgScienceReduceScienceQueueAllCDByItemReq_reflection_;
  delete TSlgScienceReduceScienceQueueCDByGoldReq::default_instance_;
  delete TSlgScienceReduceScienceQueueCDByGoldReq_reflection_;
  delete TSlgScienceReduceScienceQueueAllCDByGoldReq::default_instance_;
  delete TSlgScienceReduceScienceQueueAllCDByGoldReq_reflection_;
  delete TSlgScienceReduceScienceCDByGuildHelpReq::default_instance_;
  delete TSlgScienceReduceScienceCDByGuildHelpReq_reflection_;
  delete TSlgScienceReduceScienceCDFreeReq::default_instance_;
  delete TSlgScienceReduceScienceCDFreeReq_reflection_;
}

void protobuf_AddDesc_net_2fSlgScience_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024net/SlgScience.proto\022\002pb\032\026net/CommonRe"
    "ward.proto\"6\n\022TSlgScienceScience\022\021\n\tScie"
    "nceId\030\001 \001(\r\022\r\n\005Level\030\002 \001(\r\"=\n\027TSlgScienc"
    "eScienceQueue\022\017\n\007QueueId\030\001 \001(\r\022\021\n\tEndCDT"
    "ime\030\002 \001(\003\"y\n\034TSlgScienceGetScienceInfoRs"
    "p\022*\n\nScienceArr\030\001 \003(\0132\026.pb.TSlgScienceSc"
    "ience\022-\n\010QueueArr\030\002 \003(\0132\033.pb.TSlgScience"
    "ScienceQueue\"x\n\033TSlgScienceUpdateDataNot"
    "ify\022*\n\nScienceArr\030\001 \003(\0132\026.pb.TSlgScience"
    "Science\022-\n\010QueueArr\030\002 \003(\0132\033.pb.TSlgScien"
    "ceScienceQueue\"2\n\034TSlgScienceScienceLeve"
    "lUpReq\022\022\n\nScienceTid\030\001 \001(\r\"_\n(TSlgScienc"
    "eReduceScienceQueueCDByItemReq\022\017\n\007QueueI"
    "d\030\001 \001(\r\022\"\n\007ItemArr\030\002 \003(\0132\021.pb.TCommonRew"
    "ard\">\n+TSlgScienceReduceScienceQueueAllC"
    "DByItemReq\022\017\n\007QueueId\030\001 \001(\r\"L\n(TSlgScien"
    "ceReduceScienceQueueCDByGoldReq\022\017\n\007Queue"
    "Id\030\001 \001(\r\022\017\n\007GoldNum\030\002 \001(\r\">\n+TSlgScience"
    "ReduceScienceQueueAllCDByGoldReq\022\017\n\007Queu"
    "eId\030\001 \001(\r\";\n(TSlgScienceReduceScienceCDB"
    "yGuildHelpReq\022\017\n\007QueueId\030\001 \001(\r\"4\n!TSlgSc"
    "ienceReduceScienceCDFreeReq\022\017\n\007QueueId\030\001"
    " \001(\r", 884);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/SlgScience.proto", &protobuf_RegisterTypes);
  TSlgScienceScience::default_instance_ = new TSlgScienceScience();
  TSlgScienceScienceQueue::default_instance_ = new TSlgScienceScienceQueue();
  TSlgScienceGetScienceInfoRsp::default_instance_ = new TSlgScienceGetScienceInfoRsp();
  TSlgScienceUpdateDataNotify::default_instance_ = new TSlgScienceUpdateDataNotify();
  TSlgScienceScienceLevelUpReq::default_instance_ = new TSlgScienceScienceLevelUpReq();
  TSlgScienceReduceScienceQueueCDByItemReq::default_instance_ = new TSlgScienceReduceScienceQueueCDByItemReq();
  TSlgScienceReduceScienceQueueAllCDByItemReq::default_instance_ = new TSlgScienceReduceScienceQueueAllCDByItemReq();
  TSlgScienceReduceScienceQueueCDByGoldReq::default_instance_ = new TSlgScienceReduceScienceQueueCDByGoldReq();
  TSlgScienceReduceScienceQueueAllCDByGoldReq::default_instance_ = new TSlgScienceReduceScienceQueueAllCDByGoldReq();
  TSlgScienceReduceScienceCDByGuildHelpReq::default_instance_ = new TSlgScienceReduceScienceCDByGuildHelpReq();
  TSlgScienceReduceScienceCDFreeReq::default_instance_ = new TSlgScienceReduceScienceCDFreeReq();
  TSlgScienceScience::default_instance_->InitAsDefaultInstance();
  TSlgScienceScienceQueue::default_instance_->InitAsDefaultInstance();
  TSlgScienceGetScienceInfoRsp::default_instance_->InitAsDefaultInstance();
  TSlgScienceUpdateDataNotify::default_instance_->InitAsDefaultInstance();
  TSlgScienceScienceLevelUpReq::default_instance_->InitAsDefaultInstance();
  TSlgScienceReduceScienceQueueCDByItemReq::default_instance_->InitAsDefaultInstance();
  TSlgScienceReduceScienceQueueAllCDByItemReq::default_instance_->InitAsDefaultInstance();
  TSlgScienceReduceScienceQueueCDByGoldReq::default_instance_->InitAsDefaultInstance();
  TSlgScienceReduceScienceQueueAllCDByGoldReq::default_instance_->InitAsDefaultInstance();
  TSlgScienceReduceScienceCDByGuildHelpReq::default_instance_->InitAsDefaultInstance();
  TSlgScienceReduceScienceCDFreeReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fSlgScience_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fSlgScience_2eproto {
  StaticDescriptorInitializer_net_2fSlgScience_2eproto() {
    protobuf_AddDesc_net_2fSlgScience_2eproto();
  }
} static_descriptor_initializer_net_2fSlgScience_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TSlgScienceScience::kScienceIdFieldNumber;
const int TSlgScienceScience::kLevelFieldNumber;
#endif  // !_MSC_VER

TSlgScienceScience::TSlgScienceScience()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgScienceScience)
}

void TSlgScienceScience::InitAsDefaultInstance() {
}

TSlgScienceScience::TSlgScienceScience(const TSlgScienceScience& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgScienceScience)
}

void TSlgScienceScience::SharedCtor() {
  _cached_size_ = 0;
  scienceid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgScienceScience::~TSlgScienceScience() {
  // @@protoc_insertion_point(destructor:pb.TSlgScienceScience)
  SharedDtor();
}

void TSlgScienceScience::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgScienceScience::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgScienceScience::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgScienceScience_descriptor_;
}

const TSlgScienceScience& TSlgScienceScience::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgScience_2eproto();
  return *default_instance_;
}

TSlgScienceScience* TSlgScienceScience::default_instance_ = NULL;

TSlgScienceScience* TSlgScienceScience::New() const {
  return new TSlgScienceScience;
}

void TSlgScienceScience::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgScienceScience*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(scienceid_, level_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgScienceScience::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgScienceScience)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ScienceId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scienceid_)));
          set_has_scienceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional uint32 Level = 2;
      case 2: {
        if (tag == 16) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgScienceScience)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgScienceScience)
  return false;
#undef DO_
}

void TSlgScienceScience::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgScienceScience)
  // optional uint32 ScienceId = 1;
  if (has_scienceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->scienceid(), output);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgScienceScience)
}

::google::protobuf::uint8* TSlgScienceScience::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgScienceScience)
  // optional uint32 ScienceId = 1;
  if (has_scienceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->scienceid(), target);
  }

  // optional uint32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgScienceScience)
  return target;
}

int TSlgScienceScience::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ScienceId = 1;
    if (has_scienceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scienceid());
    }

    // optional uint32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgScienceScience::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgScienceScience* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgScienceScience*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgScienceScience::MergeFrom(const TSlgScienceScience& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scienceid()) {
      set_scienceid(from.scienceid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgScienceScience::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgScienceScience::CopyFrom(const TSlgScienceScience& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgScienceScience::IsInitialized() const {

  return true;
}

void TSlgScienceScience::Swap(TSlgScienceScience* other) {
  if (other != this) {
    std::swap(scienceid_, other->scienceid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgScienceScience::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgScienceScience_descriptor_;
  metadata.reflection = TSlgScienceScience_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgScienceScienceQueue::kQueueIdFieldNumber;
const int TSlgScienceScienceQueue::kEndCDTimeFieldNumber;
#endif  // !_MSC_VER

TSlgScienceScienceQueue::TSlgScienceScienceQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgScienceScienceQueue)
}

void TSlgScienceScienceQueue::InitAsDefaultInstance() {
}

TSlgScienceScienceQueue::TSlgScienceScienceQueue(const TSlgScienceScienceQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgScienceScienceQueue)
}

void TSlgScienceScienceQueue::SharedCtor() {
  _cached_size_ = 0;
  queueid_ = 0u;
  endcdtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgScienceScienceQueue::~TSlgScienceScienceQueue() {
  // @@protoc_insertion_point(destructor:pb.TSlgScienceScienceQueue)
  SharedDtor();
}

void TSlgScienceScienceQueue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgScienceScienceQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgScienceScienceQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgScienceScienceQueue_descriptor_;
}

const TSlgScienceScienceQueue& TSlgScienceScienceQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgScience_2eproto();
  return *default_instance_;
}

TSlgScienceScienceQueue* TSlgScienceScienceQueue::default_instance_ = NULL;

TSlgScienceScienceQueue* TSlgScienceScienceQueue::New() const {
  return new TSlgScienceScienceQueue;
}

void TSlgScienceScienceQueue::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgScienceScienceQueue*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(endcdtime_, queueid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgScienceScienceQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgScienceScienceQueue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 QueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queueid_)));
          set_has_queueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_EndCDTime;
        break;
      }

      // optional int64 EndCDTime = 2;
      case 2: {
        if (tag == 16) {
         parse_EndCDTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endcdtime_)));
          set_has_endcdtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgScienceScienceQueue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgScienceScienceQueue)
  return false;
#undef DO_
}

void TSlgScienceScienceQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgScienceScienceQueue)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queueid(), output);
  }

  // optional int64 EndCDTime = 2;
  if (has_endcdtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endcdtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgScienceScienceQueue)
}

::google::protobuf::uint8* TSlgScienceScienceQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgScienceScienceQueue)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queueid(), target);
  }

  // optional int64 EndCDTime = 2;
  if (has_endcdtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endcdtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgScienceScienceQueue)
  return target;
}

int TSlgScienceScienceQueue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 QueueId = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queueid());
    }

    // optional int64 EndCDTime = 2;
    if (has_endcdtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endcdtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgScienceScienceQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgScienceScienceQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgScienceScienceQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgScienceScienceQueue::MergeFrom(const TSlgScienceScienceQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
    if (from.has_endcdtime()) {
      set_endcdtime(from.endcdtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgScienceScienceQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgScienceScienceQueue::CopyFrom(const TSlgScienceScienceQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgScienceScienceQueue::IsInitialized() const {

  return true;
}

void TSlgScienceScienceQueue::Swap(TSlgScienceScienceQueue* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(endcdtime_, other->endcdtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgScienceScienceQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgScienceScienceQueue_descriptor_;
  metadata.reflection = TSlgScienceScienceQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgScienceGetScienceInfoRsp::kScienceArrFieldNumber;
const int TSlgScienceGetScienceInfoRsp::kQueueArrFieldNumber;
#endif  // !_MSC_VER

TSlgScienceGetScienceInfoRsp::TSlgScienceGetScienceInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgScienceGetScienceInfoRsp)
}

void TSlgScienceGetScienceInfoRsp::InitAsDefaultInstance() {
}

TSlgScienceGetScienceInfoRsp::TSlgScienceGetScienceInfoRsp(const TSlgScienceGetScienceInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgScienceGetScienceInfoRsp)
}

void TSlgScienceGetScienceInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgScienceGetScienceInfoRsp::~TSlgScienceGetScienceInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TSlgScienceGetScienceInfoRsp)
  SharedDtor();
}

void TSlgScienceGetScienceInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgScienceGetScienceInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgScienceGetScienceInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgScienceGetScienceInfoRsp_descriptor_;
}

const TSlgScienceGetScienceInfoRsp& TSlgScienceGetScienceInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgScience_2eproto();
  return *default_instance_;
}

TSlgScienceGetScienceInfoRsp* TSlgScienceGetScienceInfoRsp::default_instance_ = NULL;

TSlgScienceGetScienceInfoRsp* TSlgScienceGetScienceInfoRsp::New() const {
  return new TSlgScienceGetScienceInfoRsp;
}

void TSlgScienceGetScienceInfoRsp::Clear() {
  sciencearr_.Clear();
  queuearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgScienceGetScienceInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgScienceGetScienceInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSlgScienceScience ScienceArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ScienceArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sciencearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ScienceArr;
        if (input->ExpectTag(18)) goto parse_QueueArr;
        break;
      }

      // repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
      case 2: {
        if (tag == 18) {
         parse_QueueArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queuearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_QueueArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgScienceGetScienceInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgScienceGetScienceInfoRsp)
  return false;
#undef DO_
}

void TSlgScienceGetScienceInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgScienceGetScienceInfoRsp)
  // repeated .pb.TSlgScienceScience ScienceArr = 1;
  for (int i = 0; i < this->sciencearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sciencearr(i), output);
  }

  // repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
  for (int i = 0; i < this->queuearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queuearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgScienceGetScienceInfoRsp)
}

::google::protobuf::uint8* TSlgScienceGetScienceInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgScienceGetScienceInfoRsp)
  // repeated .pb.TSlgScienceScience ScienceArr = 1;
  for (int i = 0; i < this->sciencearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sciencearr(i), target);
  }

  // repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
  for (int i = 0; i < this->queuearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->queuearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgScienceGetScienceInfoRsp)
  return target;
}

int TSlgScienceGetScienceInfoRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TSlgScienceScience ScienceArr = 1;
  total_size += 1 * this->sciencearr_size();
  for (int i = 0; i < this->sciencearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sciencearr(i));
  }

  // repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
  total_size += 1 * this->queuearr_size();
  for (int i = 0; i < this->queuearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queuearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgScienceGetScienceInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgScienceGetScienceInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgScienceGetScienceInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgScienceGetScienceInfoRsp::MergeFrom(const TSlgScienceGetScienceInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  sciencearr_.MergeFrom(from.sciencearr_);
  queuearr_.MergeFrom(from.queuearr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgScienceGetScienceInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgScienceGetScienceInfoRsp::CopyFrom(const TSlgScienceGetScienceInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgScienceGetScienceInfoRsp::IsInitialized() const {

  return true;
}

void TSlgScienceGetScienceInfoRsp::Swap(TSlgScienceGetScienceInfoRsp* other) {
  if (other != this) {
    sciencearr_.Swap(&other->sciencearr_);
    queuearr_.Swap(&other->queuearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgScienceGetScienceInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgScienceGetScienceInfoRsp_descriptor_;
  metadata.reflection = TSlgScienceGetScienceInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgScienceUpdateDataNotify::kScienceArrFieldNumber;
const int TSlgScienceUpdateDataNotify::kQueueArrFieldNumber;
#endif  // !_MSC_VER

TSlgScienceUpdateDataNotify::TSlgScienceUpdateDataNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgScienceUpdateDataNotify)
}

void TSlgScienceUpdateDataNotify::InitAsDefaultInstance() {
}

TSlgScienceUpdateDataNotify::TSlgScienceUpdateDataNotify(const TSlgScienceUpdateDataNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgScienceUpdateDataNotify)
}

void TSlgScienceUpdateDataNotify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgScienceUpdateDataNotify::~TSlgScienceUpdateDataNotify() {
  // @@protoc_insertion_point(destructor:pb.TSlgScienceUpdateDataNotify)
  SharedDtor();
}

void TSlgScienceUpdateDataNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgScienceUpdateDataNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgScienceUpdateDataNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgScienceUpdateDataNotify_descriptor_;
}

const TSlgScienceUpdateDataNotify& TSlgScienceUpdateDataNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgScience_2eproto();
  return *default_instance_;
}

TSlgScienceUpdateDataNotify* TSlgScienceUpdateDataNotify::default_instance_ = NULL;

TSlgScienceUpdateDataNotify* TSlgScienceUpdateDataNotify::New() const {
  return new TSlgScienceUpdateDataNotify;
}

void TSlgScienceUpdateDataNotify::Clear() {
  sciencearr_.Clear();
  queuearr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgScienceUpdateDataNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgScienceUpdateDataNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TSlgScienceScience ScienceArr = 1;
      case 1: {
        if (tag == 10) {
         parse_ScienceArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sciencearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ScienceArr;
        if (input->ExpectTag(18)) goto parse_QueueArr;
        break;
      }

      // repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
      case 2: {
        if (tag == 18) {
         parse_QueueArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_queuearr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_QueueArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgScienceUpdateDataNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgScienceUpdateDataNotify)
  return false;
#undef DO_
}

void TSlgScienceUpdateDataNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgScienceUpdateDataNotify)
  // repeated .pb.TSlgScienceScience ScienceArr = 1;
  for (int i = 0; i < this->sciencearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sciencearr(i), output);
  }

  // repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
  for (int i = 0; i < this->queuearr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->queuearr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgScienceUpdateDataNotify)
}

::google::protobuf::uint8* TSlgScienceUpdateDataNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgScienceUpdateDataNotify)
  // repeated .pb.TSlgScienceScience ScienceArr = 1;
  for (int i = 0; i < this->sciencearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sciencearr(i), target);
  }

  // repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
  for (int i = 0; i < this->queuearr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->queuearr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgScienceUpdateDataNotify)
  return target;
}

int TSlgScienceUpdateDataNotify::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TSlgScienceScience ScienceArr = 1;
  total_size += 1 * this->sciencearr_size();
  for (int i = 0; i < this->sciencearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sciencearr(i));
  }

  // repeated .pb.TSlgScienceScienceQueue QueueArr = 2;
  total_size += 1 * this->queuearr_size();
  for (int i = 0; i < this->queuearr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->queuearr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgScienceUpdateDataNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgScienceUpdateDataNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgScienceUpdateDataNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgScienceUpdateDataNotify::MergeFrom(const TSlgScienceUpdateDataNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  sciencearr_.MergeFrom(from.sciencearr_);
  queuearr_.MergeFrom(from.queuearr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgScienceUpdateDataNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgScienceUpdateDataNotify::CopyFrom(const TSlgScienceUpdateDataNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgScienceUpdateDataNotify::IsInitialized() const {

  return true;
}

void TSlgScienceUpdateDataNotify::Swap(TSlgScienceUpdateDataNotify* other) {
  if (other != this) {
    sciencearr_.Swap(&other->sciencearr_);
    queuearr_.Swap(&other->queuearr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgScienceUpdateDataNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgScienceUpdateDataNotify_descriptor_;
  metadata.reflection = TSlgScienceUpdateDataNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgScienceScienceLevelUpReq::kScienceTidFieldNumber;
#endif  // !_MSC_VER

TSlgScienceScienceLevelUpReq::TSlgScienceScienceLevelUpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgScienceScienceLevelUpReq)
}

void TSlgScienceScienceLevelUpReq::InitAsDefaultInstance() {
}

TSlgScienceScienceLevelUpReq::TSlgScienceScienceLevelUpReq(const TSlgScienceScienceLevelUpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgScienceScienceLevelUpReq)
}

void TSlgScienceScienceLevelUpReq::SharedCtor() {
  _cached_size_ = 0;
  sciencetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgScienceScienceLevelUpReq::~TSlgScienceScienceLevelUpReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgScienceScienceLevelUpReq)
  SharedDtor();
}

void TSlgScienceScienceLevelUpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgScienceScienceLevelUpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgScienceScienceLevelUpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgScienceScienceLevelUpReq_descriptor_;
}

const TSlgScienceScienceLevelUpReq& TSlgScienceScienceLevelUpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgScience_2eproto();
  return *default_instance_;
}

TSlgScienceScienceLevelUpReq* TSlgScienceScienceLevelUpReq::default_instance_ = NULL;

TSlgScienceScienceLevelUpReq* TSlgScienceScienceLevelUpReq::New() const {
  return new TSlgScienceScienceLevelUpReq;
}

void TSlgScienceScienceLevelUpReq::Clear() {
  sciencetid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgScienceScienceLevelUpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgScienceScienceLevelUpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ScienceTid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sciencetid_)));
          set_has_sciencetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgScienceScienceLevelUpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgScienceScienceLevelUpReq)
  return false;
#undef DO_
}

void TSlgScienceScienceLevelUpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgScienceScienceLevelUpReq)
  // optional uint32 ScienceTid = 1;
  if (has_sciencetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sciencetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgScienceScienceLevelUpReq)
}

::google::protobuf::uint8* TSlgScienceScienceLevelUpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgScienceScienceLevelUpReq)
  // optional uint32 ScienceTid = 1;
  if (has_sciencetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sciencetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgScienceScienceLevelUpReq)
  return target;
}

int TSlgScienceScienceLevelUpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ScienceTid = 1;
    if (has_sciencetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sciencetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgScienceScienceLevelUpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgScienceScienceLevelUpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgScienceScienceLevelUpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgScienceScienceLevelUpReq::MergeFrom(const TSlgScienceScienceLevelUpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sciencetid()) {
      set_sciencetid(from.sciencetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgScienceScienceLevelUpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgScienceScienceLevelUpReq::CopyFrom(const TSlgScienceScienceLevelUpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgScienceScienceLevelUpReq::IsInitialized() const {

  return true;
}

void TSlgScienceScienceLevelUpReq::Swap(TSlgScienceScienceLevelUpReq* other) {
  if (other != this) {
    std::swap(sciencetid_, other->sciencetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgScienceScienceLevelUpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgScienceScienceLevelUpReq_descriptor_;
  metadata.reflection = TSlgScienceScienceLevelUpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgScienceReduceScienceQueueCDByItemReq::kQueueIdFieldNumber;
const int TSlgScienceReduceScienceQueueCDByItemReq::kItemArrFieldNumber;
#endif  // !_MSC_VER

TSlgScienceReduceScienceQueueCDByItemReq::TSlgScienceReduceScienceQueueCDByItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgScienceReduceScienceQueueCDByItemReq)
}

void TSlgScienceReduceScienceQueueCDByItemReq::InitAsDefaultInstance() {
}

TSlgScienceReduceScienceQueueCDByItemReq::TSlgScienceReduceScienceQueueCDByItemReq(const TSlgScienceReduceScienceQueueCDByItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgScienceReduceScienceQueueCDByItemReq)
}

void TSlgScienceReduceScienceQueueCDByItemReq::SharedCtor() {
  _cached_size_ = 0;
  queueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgScienceReduceScienceQueueCDByItemReq::~TSlgScienceReduceScienceQueueCDByItemReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgScienceReduceScienceQueueCDByItemReq)
  SharedDtor();
}

void TSlgScienceReduceScienceQueueCDByItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgScienceReduceScienceQueueCDByItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceQueueCDByItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgScienceReduceScienceQueueCDByItemReq_descriptor_;
}

const TSlgScienceReduceScienceQueueCDByItemReq& TSlgScienceReduceScienceQueueCDByItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgScience_2eproto();
  return *default_instance_;
}

TSlgScienceReduceScienceQueueCDByItemReq* TSlgScienceReduceScienceQueueCDByItemReq::default_instance_ = NULL;

TSlgScienceReduceScienceQueueCDByItemReq* TSlgScienceReduceScienceQueueCDByItemReq::New() const {
  return new TSlgScienceReduceScienceQueueCDByItemReq;
}

void TSlgScienceReduceScienceQueueCDByItemReq::Clear() {
  queueid_ = 0u;
  itemarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgScienceReduceScienceQueueCDByItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgScienceReduceScienceQueueCDByItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 QueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queueid_)));
          set_has_queueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ItemArr;
        break;
      }

      // repeated .pb.TCommonReward ItemArr = 2;
      case 2: {
        if (tag == 18) {
         parse_ItemArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ItemArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgScienceReduceScienceQueueCDByItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgScienceReduceScienceQueueCDByItemReq)
  return false;
#undef DO_
}

void TSlgScienceReduceScienceQueueCDByItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgScienceReduceScienceQueueCDByItemReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queueid(), output);
  }

  // repeated .pb.TCommonReward ItemArr = 2;
  for (int i = 0; i < this->itemarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->itemarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgScienceReduceScienceQueueCDByItemReq)
}

::google::protobuf::uint8* TSlgScienceReduceScienceQueueCDByItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgScienceReduceScienceQueueCDByItemReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queueid(), target);
  }

  // repeated .pb.TCommonReward ItemArr = 2;
  for (int i = 0; i < this->itemarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->itemarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgScienceReduceScienceQueueCDByItemReq)
  return target;
}

int TSlgScienceReduceScienceQueueCDByItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 QueueId = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queueid());
    }

  }
  // repeated .pb.TCommonReward ItemArr = 2;
  total_size += 1 * this->itemarr_size();
  for (int i = 0; i < this->itemarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgScienceReduceScienceQueueCDByItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgScienceReduceScienceQueueCDByItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgScienceReduceScienceQueueCDByItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgScienceReduceScienceQueueCDByItemReq::MergeFrom(const TSlgScienceReduceScienceQueueCDByItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemarr_.MergeFrom(from.itemarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgScienceReduceScienceQueueCDByItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgScienceReduceScienceQueueCDByItemReq::CopyFrom(const TSlgScienceReduceScienceQueueCDByItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgScienceReduceScienceQueueCDByItemReq::IsInitialized() const {

  return true;
}

void TSlgScienceReduceScienceQueueCDByItemReq::Swap(TSlgScienceReduceScienceQueueCDByItemReq* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    itemarr_.Swap(&other->itemarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgScienceReduceScienceQueueCDByItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgScienceReduceScienceQueueCDByItemReq_descriptor_;
  metadata.reflection = TSlgScienceReduceScienceQueueCDByItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgScienceReduceScienceQueueAllCDByItemReq::kQueueIdFieldNumber;
#endif  // !_MSC_VER

TSlgScienceReduceScienceQueueAllCDByItemReq::TSlgScienceReduceScienceQueueAllCDByItemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgScienceReduceScienceQueueAllCDByItemReq)
}

void TSlgScienceReduceScienceQueueAllCDByItemReq::InitAsDefaultInstance() {
}

TSlgScienceReduceScienceQueueAllCDByItemReq::TSlgScienceReduceScienceQueueAllCDByItemReq(const TSlgScienceReduceScienceQueueAllCDByItemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgScienceReduceScienceQueueAllCDByItemReq)
}

void TSlgScienceReduceScienceQueueAllCDByItemReq::SharedCtor() {
  _cached_size_ = 0;
  queueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgScienceReduceScienceQueueAllCDByItemReq::~TSlgScienceReduceScienceQueueAllCDByItemReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgScienceReduceScienceQueueAllCDByItemReq)
  SharedDtor();
}

void TSlgScienceReduceScienceQueueAllCDByItemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgScienceReduceScienceQueueAllCDByItemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceQueueAllCDByItemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgScienceReduceScienceQueueAllCDByItemReq_descriptor_;
}

const TSlgScienceReduceScienceQueueAllCDByItemReq& TSlgScienceReduceScienceQueueAllCDByItemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgScience_2eproto();
  return *default_instance_;
}

TSlgScienceReduceScienceQueueAllCDByItemReq* TSlgScienceReduceScienceQueueAllCDByItemReq::default_instance_ = NULL;

TSlgScienceReduceScienceQueueAllCDByItemReq* TSlgScienceReduceScienceQueueAllCDByItemReq::New() const {
  return new TSlgScienceReduceScienceQueueAllCDByItemReq;
}

void TSlgScienceReduceScienceQueueAllCDByItemReq::Clear() {
  queueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgScienceReduceScienceQueueAllCDByItemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgScienceReduceScienceQueueAllCDByItemReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 QueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queueid_)));
          set_has_queueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgScienceReduceScienceQueueAllCDByItemReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgScienceReduceScienceQueueAllCDByItemReq)
  return false;
#undef DO_
}

void TSlgScienceReduceScienceQueueAllCDByItemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgScienceReduceScienceQueueAllCDByItemReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgScienceReduceScienceQueueAllCDByItemReq)
}

::google::protobuf::uint8* TSlgScienceReduceScienceQueueAllCDByItemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgScienceReduceScienceQueueAllCDByItemReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgScienceReduceScienceQueueAllCDByItemReq)
  return target;
}

int TSlgScienceReduceScienceQueueAllCDByItemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 QueueId = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgScienceReduceScienceQueueAllCDByItemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgScienceReduceScienceQueueAllCDByItemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgScienceReduceScienceQueueAllCDByItemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgScienceReduceScienceQueueAllCDByItemReq::MergeFrom(const TSlgScienceReduceScienceQueueAllCDByItemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgScienceReduceScienceQueueAllCDByItemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgScienceReduceScienceQueueAllCDByItemReq::CopyFrom(const TSlgScienceReduceScienceQueueAllCDByItemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgScienceReduceScienceQueueAllCDByItemReq::IsInitialized() const {

  return true;
}

void TSlgScienceReduceScienceQueueAllCDByItemReq::Swap(TSlgScienceReduceScienceQueueAllCDByItemReq* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgScienceReduceScienceQueueAllCDByItemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgScienceReduceScienceQueueAllCDByItemReq_descriptor_;
  metadata.reflection = TSlgScienceReduceScienceQueueAllCDByItemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgScienceReduceScienceQueueCDByGoldReq::kQueueIdFieldNumber;
const int TSlgScienceReduceScienceQueueCDByGoldReq::kGoldNumFieldNumber;
#endif  // !_MSC_VER

TSlgScienceReduceScienceQueueCDByGoldReq::TSlgScienceReduceScienceQueueCDByGoldReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgScienceReduceScienceQueueCDByGoldReq)
}

void TSlgScienceReduceScienceQueueCDByGoldReq::InitAsDefaultInstance() {
}

TSlgScienceReduceScienceQueueCDByGoldReq::TSlgScienceReduceScienceQueueCDByGoldReq(const TSlgScienceReduceScienceQueueCDByGoldReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgScienceReduceScienceQueueCDByGoldReq)
}

void TSlgScienceReduceScienceQueueCDByGoldReq::SharedCtor() {
  _cached_size_ = 0;
  queueid_ = 0u;
  goldnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgScienceReduceScienceQueueCDByGoldReq::~TSlgScienceReduceScienceQueueCDByGoldReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgScienceReduceScienceQueueCDByGoldReq)
  SharedDtor();
}

void TSlgScienceReduceScienceQueueCDByGoldReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgScienceReduceScienceQueueCDByGoldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceQueueCDByGoldReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgScienceReduceScienceQueueCDByGoldReq_descriptor_;
}

const TSlgScienceReduceScienceQueueCDByGoldReq& TSlgScienceReduceScienceQueueCDByGoldReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgScience_2eproto();
  return *default_instance_;
}

TSlgScienceReduceScienceQueueCDByGoldReq* TSlgScienceReduceScienceQueueCDByGoldReq::default_instance_ = NULL;

TSlgScienceReduceScienceQueueCDByGoldReq* TSlgScienceReduceScienceQueueCDByGoldReq::New() const {
  return new TSlgScienceReduceScienceQueueCDByGoldReq;
}

void TSlgScienceReduceScienceQueueCDByGoldReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TSlgScienceReduceScienceQueueCDByGoldReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(queueid_, goldnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgScienceReduceScienceQueueCDByGoldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgScienceReduceScienceQueueCDByGoldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 QueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queueid_)));
          set_has_queueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GoldNum;
        break;
      }

      // optional uint32 GoldNum = 2;
      case 2: {
        if (tag == 16) {
         parse_GoldNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldnum_)));
          set_has_goldnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgScienceReduceScienceQueueCDByGoldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgScienceReduceScienceQueueCDByGoldReq)
  return false;
#undef DO_
}

void TSlgScienceReduceScienceQueueCDByGoldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgScienceReduceScienceQueueCDByGoldReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queueid(), output);
  }

  // optional uint32 GoldNum = 2;
  if (has_goldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goldnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgScienceReduceScienceQueueCDByGoldReq)
}

::google::protobuf::uint8* TSlgScienceReduceScienceQueueCDByGoldReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgScienceReduceScienceQueueCDByGoldReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queueid(), target);
  }

  // optional uint32 GoldNum = 2;
  if (has_goldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goldnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgScienceReduceScienceQueueCDByGoldReq)
  return target;
}

int TSlgScienceReduceScienceQueueCDByGoldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 QueueId = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queueid());
    }

    // optional uint32 GoldNum = 2;
    if (has_goldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgScienceReduceScienceQueueCDByGoldReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgScienceReduceScienceQueueCDByGoldReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgScienceReduceScienceQueueCDByGoldReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgScienceReduceScienceQueueCDByGoldReq::MergeFrom(const TSlgScienceReduceScienceQueueCDByGoldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
    if (from.has_goldnum()) {
      set_goldnum(from.goldnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgScienceReduceScienceQueueCDByGoldReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgScienceReduceScienceQueueCDByGoldReq::CopyFrom(const TSlgScienceReduceScienceQueueCDByGoldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgScienceReduceScienceQueueCDByGoldReq::IsInitialized() const {

  return true;
}

void TSlgScienceReduceScienceQueueCDByGoldReq::Swap(TSlgScienceReduceScienceQueueCDByGoldReq* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(goldnum_, other->goldnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgScienceReduceScienceQueueCDByGoldReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgScienceReduceScienceQueueCDByGoldReq_descriptor_;
  metadata.reflection = TSlgScienceReduceScienceQueueCDByGoldReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgScienceReduceScienceQueueAllCDByGoldReq::kQueueIdFieldNumber;
#endif  // !_MSC_VER

TSlgScienceReduceScienceQueueAllCDByGoldReq::TSlgScienceReduceScienceQueueAllCDByGoldReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq)
}

void TSlgScienceReduceScienceQueueAllCDByGoldReq::InitAsDefaultInstance() {
}

TSlgScienceReduceScienceQueueAllCDByGoldReq::TSlgScienceReduceScienceQueueAllCDByGoldReq(const TSlgScienceReduceScienceQueueAllCDByGoldReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq)
}

void TSlgScienceReduceScienceQueueAllCDByGoldReq::SharedCtor() {
  _cached_size_ = 0;
  queueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgScienceReduceScienceQueueAllCDByGoldReq::~TSlgScienceReduceScienceQueueAllCDByGoldReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq)
  SharedDtor();
}

void TSlgScienceReduceScienceQueueAllCDByGoldReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgScienceReduceScienceQueueAllCDByGoldReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceQueueAllCDByGoldReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgScienceReduceScienceQueueAllCDByGoldReq_descriptor_;
}

const TSlgScienceReduceScienceQueueAllCDByGoldReq& TSlgScienceReduceScienceQueueAllCDByGoldReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgScience_2eproto();
  return *default_instance_;
}

TSlgScienceReduceScienceQueueAllCDByGoldReq* TSlgScienceReduceScienceQueueAllCDByGoldReq::default_instance_ = NULL;

TSlgScienceReduceScienceQueueAllCDByGoldReq* TSlgScienceReduceScienceQueueAllCDByGoldReq::New() const {
  return new TSlgScienceReduceScienceQueueAllCDByGoldReq;
}

void TSlgScienceReduceScienceQueueAllCDByGoldReq::Clear() {
  queueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgScienceReduceScienceQueueAllCDByGoldReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 QueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queueid_)));
          set_has_queueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq)
  return false;
#undef DO_
}

void TSlgScienceReduceScienceQueueAllCDByGoldReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq)
}

::google::protobuf::uint8* TSlgScienceReduceScienceQueueAllCDByGoldReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgScienceReduceScienceQueueAllCDByGoldReq)
  return target;
}

int TSlgScienceReduceScienceQueueAllCDByGoldReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 QueueId = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgScienceReduceScienceQueueAllCDByGoldReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgScienceReduceScienceQueueAllCDByGoldReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgScienceReduceScienceQueueAllCDByGoldReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgScienceReduceScienceQueueAllCDByGoldReq::MergeFrom(const TSlgScienceReduceScienceQueueAllCDByGoldReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgScienceReduceScienceQueueAllCDByGoldReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgScienceReduceScienceQueueAllCDByGoldReq::CopyFrom(const TSlgScienceReduceScienceQueueAllCDByGoldReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgScienceReduceScienceQueueAllCDByGoldReq::IsInitialized() const {

  return true;
}

void TSlgScienceReduceScienceQueueAllCDByGoldReq::Swap(TSlgScienceReduceScienceQueueAllCDByGoldReq* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgScienceReduceScienceQueueAllCDByGoldReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgScienceReduceScienceQueueAllCDByGoldReq_descriptor_;
  metadata.reflection = TSlgScienceReduceScienceQueueAllCDByGoldReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgScienceReduceScienceCDByGuildHelpReq::kQueueIdFieldNumber;
#endif  // !_MSC_VER

TSlgScienceReduceScienceCDByGuildHelpReq::TSlgScienceReduceScienceCDByGuildHelpReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgScienceReduceScienceCDByGuildHelpReq)
}

void TSlgScienceReduceScienceCDByGuildHelpReq::InitAsDefaultInstance() {
}

TSlgScienceReduceScienceCDByGuildHelpReq::TSlgScienceReduceScienceCDByGuildHelpReq(const TSlgScienceReduceScienceCDByGuildHelpReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgScienceReduceScienceCDByGuildHelpReq)
}

void TSlgScienceReduceScienceCDByGuildHelpReq::SharedCtor() {
  _cached_size_ = 0;
  queueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgScienceReduceScienceCDByGuildHelpReq::~TSlgScienceReduceScienceCDByGuildHelpReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgScienceReduceScienceCDByGuildHelpReq)
  SharedDtor();
}

void TSlgScienceReduceScienceCDByGuildHelpReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgScienceReduceScienceCDByGuildHelpReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceCDByGuildHelpReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgScienceReduceScienceCDByGuildHelpReq_descriptor_;
}

const TSlgScienceReduceScienceCDByGuildHelpReq& TSlgScienceReduceScienceCDByGuildHelpReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgScience_2eproto();
  return *default_instance_;
}

TSlgScienceReduceScienceCDByGuildHelpReq* TSlgScienceReduceScienceCDByGuildHelpReq::default_instance_ = NULL;

TSlgScienceReduceScienceCDByGuildHelpReq* TSlgScienceReduceScienceCDByGuildHelpReq::New() const {
  return new TSlgScienceReduceScienceCDByGuildHelpReq;
}

void TSlgScienceReduceScienceCDByGuildHelpReq::Clear() {
  queueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgScienceReduceScienceCDByGuildHelpReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgScienceReduceScienceCDByGuildHelpReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 QueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queueid_)));
          set_has_queueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgScienceReduceScienceCDByGuildHelpReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgScienceReduceScienceCDByGuildHelpReq)
  return false;
#undef DO_
}

void TSlgScienceReduceScienceCDByGuildHelpReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgScienceReduceScienceCDByGuildHelpReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgScienceReduceScienceCDByGuildHelpReq)
}

::google::protobuf::uint8* TSlgScienceReduceScienceCDByGuildHelpReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgScienceReduceScienceCDByGuildHelpReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgScienceReduceScienceCDByGuildHelpReq)
  return target;
}

int TSlgScienceReduceScienceCDByGuildHelpReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 QueueId = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgScienceReduceScienceCDByGuildHelpReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgScienceReduceScienceCDByGuildHelpReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgScienceReduceScienceCDByGuildHelpReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgScienceReduceScienceCDByGuildHelpReq::MergeFrom(const TSlgScienceReduceScienceCDByGuildHelpReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgScienceReduceScienceCDByGuildHelpReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgScienceReduceScienceCDByGuildHelpReq::CopyFrom(const TSlgScienceReduceScienceCDByGuildHelpReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgScienceReduceScienceCDByGuildHelpReq::IsInitialized() const {

  return true;
}

void TSlgScienceReduceScienceCDByGuildHelpReq::Swap(TSlgScienceReduceScienceCDByGuildHelpReq* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgScienceReduceScienceCDByGuildHelpReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgScienceReduceScienceCDByGuildHelpReq_descriptor_;
  metadata.reflection = TSlgScienceReduceScienceCDByGuildHelpReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TSlgScienceReduceScienceCDFreeReq::kQueueIdFieldNumber;
#endif  // !_MSC_VER

TSlgScienceReduceScienceCDFreeReq::TSlgScienceReduceScienceCDFreeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TSlgScienceReduceScienceCDFreeReq)
}

void TSlgScienceReduceScienceCDFreeReq::InitAsDefaultInstance() {
}

TSlgScienceReduceScienceCDFreeReq::TSlgScienceReduceScienceCDFreeReq(const TSlgScienceReduceScienceCDFreeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TSlgScienceReduceScienceCDFreeReq)
}

void TSlgScienceReduceScienceCDFreeReq::SharedCtor() {
  _cached_size_ = 0;
  queueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TSlgScienceReduceScienceCDFreeReq::~TSlgScienceReduceScienceCDFreeReq() {
  // @@protoc_insertion_point(destructor:pb.TSlgScienceReduceScienceCDFreeReq)
  SharedDtor();
}

void TSlgScienceReduceScienceCDFreeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TSlgScienceReduceScienceCDFreeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TSlgScienceReduceScienceCDFreeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TSlgScienceReduceScienceCDFreeReq_descriptor_;
}

const TSlgScienceReduceScienceCDFreeReq& TSlgScienceReduceScienceCDFreeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fSlgScience_2eproto();
  return *default_instance_;
}

TSlgScienceReduceScienceCDFreeReq* TSlgScienceReduceScienceCDFreeReq::default_instance_ = NULL;

TSlgScienceReduceScienceCDFreeReq* TSlgScienceReduceScienceCDFreeReq::New() const {
  return new TSlgScienceReduceScienceCDFreeReq;
}

void TSlgScienceReduceScienceCDFreeReq::Clear() {
  queueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TSlgScienceReduceScienceCDFreeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TSlgScienceReduceScienceCDFreeReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 QueueId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queueid_)));
          set_has_queueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TSlgScienceReduceScienceCDFreeReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TSlgScienceReduceScienceCDFreeReq)
  return false;
#undef DO_
}

void TSlgScienceReduceScienceCDFreeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TSlgScienceReduceScienceCDFreeReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->queueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TSlgScienceReduceScienceCDFreeReq)
}

::google::protobuf::uint8* TSlgScienceReduceScienceCDFreeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TSlgScienceReduceScienceCDFreeReq)
  // optional uint32 QueueId = 1;
  if (has_queueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->queueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TSlgScienceReduceScienceCDFreeReq)
  return target;
}

int TSlgScienceReduceScienceCDFreeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 QueueId = 1;
    if (has_queueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSlgScienceReduceScienceCDFreeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TSlgScienceReduceScienceCDFreeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TSlgScienceReduceScienceCDFreeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TSlgScienceReduceScienceCDFreeReq::MergeFrom(const TSlgScienceReduceScienceCDFreeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queueid()) {
      set_queueid(from.queueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TSlgScienceReduceScienceCDFreeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TSlgScienceReduceScienceCDFreeReq::CopyFrom(const TSlgScienceReduceScienceCDFreeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSlgScienceReduceScienceCDFreeReq::IsInitialized() const {

  return true;
}

void TSlgScienceReduceScienceCDFreeReq::Swap(TSlgScienceReduceScienceCDFreeReq* other) {
  if (other != this) {
    std::swap(queueid_, other->queueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TSlgScienceReduceScienceCDFreeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TSlgScienceReduceScienceCDFreeReq_descriptor_;
  metadata.reflection = TSlgScienceReduceScienceCDFreeReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
