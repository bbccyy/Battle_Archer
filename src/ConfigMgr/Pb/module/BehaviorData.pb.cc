// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/BehaviorData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "module/BehaviorData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* BehaviorPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BehaviorPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* BehaviorKeyValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BehaviorKeyValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* BehaviorTreeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BehaviorTreeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BehaviorRootData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BehaviorRootData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BehaviorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BehaviorData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EBehaviorGroupType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBehaviorDataType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_module_2fBehaviorData_2eproto() {
  protobuf_AddDesc_module_2fBehaviorData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "module/BehaviorData.proto");
  GOOGLE_CHECK(file != NULL);
  BehaviorPosition_descriptor_ = file->message_type(0);
  static const int BehaviorPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorPosition, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorPosition, y_),
  };
  BehaviorPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BehaviorPosition_descriptor_,
      BehaviorPosition::default_instance_,
      BehaviorPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BehaviorPosition));
  BehaviorKeyValue_descriptor_ = file->message_type(1);
  static const int BehaviorKeyValue_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorKeyValue, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorKeyValue, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorKeyValue, type_),
  };
  BehaviorKeyValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BehaviorKeyValue_descriptor_,
      BehaviorKeyValue::default_instance_,
      BehaviorKeyValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorKeyValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorKeyValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BehaviorKeyValue));
  BehaviorTreeData_descriptor_ = file->message_type(2);
  static const int BehaviorTreeData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorTreeData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorTreeData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorTreeData, child_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorTreeData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorTreeData, nodeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorTreeData, prenodeids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorTreeData, prenodetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorTreeData, remark_),
  };
  BehaviorTreeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BehaviorTreeData_descriptor_,
      BehaviorTreeData::default_instance_,
      BehaviorTreeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorTreeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorTreeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BehaviorTreeData));
  BehaviorRootData_descriptor_ = file->message_type(3);
  static const int BehaviorRootData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorRootData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorRootData, trigger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorRootData, child_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorRootData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorRootData, count_),
  };
  BehaviorRootData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BehaviorRootData_descriptor_,
      BehaviorRootData::default_instance_,
      BehaviorRootData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorRootData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorRootData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BehaviorRootData));
  BehaviorData_descriptor_ = file->message_type(4);
  static const int BehaviorData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorData, rootdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorData, treedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorData, notallowskip_),
  };
  BehaviorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BehaviorData_descriptor_,
      BehaviorData::default_instance_,
      BehaviorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BehaviorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BehaviorData));
  EBehaviorGroupType_descriptor_ = file->enum_type(0);
  EBehaviorDataType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_module_2fBehaviorData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BehaviorPosition_descriptor_, &BehaviorPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BehaviorKeyValue_descriptor_, &BehaviorKeyValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BehaviorTreeData_descriptor_, &BehaviorTreeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BehaviorRootData_descriptor_, &BehaviorRootData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BehaviorData_descriptor_, &BehaviorData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_module_2fBehaviorData_2eproto() {
  delete BehaviorPosition::default_instance_;
  delete BehaviorPosition_reflection_;
  delete BehaviorKeyValue::default_instance_;
  delete BehaviorKeyValue_reflection_;
  delete BehaviorTreeData::default_instance_;
  delete BehaviorTreeData_reflection_;
  delete BehaviorRootData::default_instance_;
  delete BehaviorRootData_reflection_;
  delete BehaviorData::default_instance_;
  delete BehaviorData_reflection_;
}

void protobuf_AddDesc_module_2fBehaviorData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031module/BehaviorData.proto\022\002pb\"(\n\020Behav"
    "iorPosition\022\t\n\001X\030\001 \001(\005\022\t\n\001Y\030\002 \001(\005\"S\n\020Beh"
    "aviorKeyValue\022\013\n\003Key\030\001 \001(\t\022\r\n\005Value\030\002 \001("
    "\t\022#\n\004Type\030\003 \001(\0162\025.pb.EBehaviorDataType\"\360"
    "\001\n\020BehaviorTreeData\022\n\n\002ID\030\001 \001(\005\022\"\n\004Data\030"
    "\002 \003(\0132\024.pb.BehaviorKeyValue\022#\n\005Child\030\003 \003"
    "(\0132\024.pb.BehaviorTreeData\022&\n\010Position\030\004 \001"
    "(\0132\024.pb.BehaviorPosition\022\016\n\006NodeID\030\005 \001(\005"
    "\022\022\n\nPreNodeIDs\030\006 \003(\005\022+\n\013PreNodeType\030\007 \001("
    "\0162\026.pb.EBehaviorGroupType\022\016\n\006Remark\030\010 \001("
    "\t\"\273\001\n\020BehaviorRootData\022$\n\004Type\030\001 \001(\0162\026.p"
    "b.EBehaviorGroupType\022%\n\007Trigger\030\002 \003(\0132\024."
    "pb.BehaviorTreeData\022#\n\005Child\030\003 \003(\0132\024.pb."
    "BehaviorTreeData\022&\n\010Position\030\004 \001(\0132\024.pb."
    "BehaviorPosition\022\r\n\005Count\030\005 \001(\005\"\200\001\n\014Beha"
    "viorData\022\n\n\002ID\030\001 \001(\005\022&\n\010RootData\030\002 \003(\0132\024"
    ".pb.BehaviorRootData\022&\n\010TreeData\030\003 \003(\0132\024"
    ".pb.BehaviorTreeData\022\024\n\014notAllowSkip\030\004 \001"
    "(\010*%\n\022EBehaviorGroupType\022\007\n\003AND\020\000\022\006\n\002OR\020"
    "\001*\240\001\n\021EBehaviorDataType\022\013\n\007INVALID\020\000\022\007\n\003"
    "INT\020\001\022\t\n\005FLOAT\020\002\022\n\n\006STRING\020\003\022\r\n\tINT_ARRA"
    "Y\020\004\022\017\n\013FLOAT_ARRAY\020\005\022\020\n\014STRING_ARRAY\020\006\022\010"
    "\n\004BOOL\020\007\022\r\n\tASSETPATH\020\010\022\023\n\017ASSETPATH_ARR"
    "AY\020\t", 924);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "module/BehaviorData.proto", &protobuf_RegisterTypes);
  BehaviorPosition::default_instance_ = new BehaviorPosition();
  BehaviorKeyValue::default_instance_ = new BehaviorKeyValue();
  BehaviorTreeData::default_instance_ = new BehaviorTreeData();
  BehaviorRootData::default_instance_ = new BehaviorRootData();
  BehaviorData::default_instance_ = new BehaviorData();
  BehaviorPosition::default_instance_->InitAsDefaultInstance();
  BehaviorKeyValue::default_instance_->InitAsDefaultInstance();
  BehaviorTreeData::default_instance_->InitAsDefaultInstance();
  BehaviorRootData::default_instance_->InitAsDefaultInstance();
  BehaviorData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_module_2fBehaviorData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_module_2fBehaviorData_2eproto {
  StaticDescriptorInitializer_module_2fBehaviorData_2eproto() {
    protobuf_AddDesc_module_2fBehaviorData_2eproto();
  }
} static_descriptor_initializer_module_2fBehaviorData_2eproto_;
const ::google::protobuf::EnumDescriptor* EBehaviorGroupType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBehaviorGroupType_descriptor_;
}
bool EBehaviorGroupType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBehaviorDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBehaviorDataType_descriptor_;
}
bool EBehaviorDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int BehaviorPosition::kXFieldNumber;
const int BehaviorPosition::kYFieldNumber;
#endif  // !_MSC_VER

BehaviorPosition::BehaviorPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BehaviorPosition)
}

void BehaviorPosition::InitAsDefaultInstance() {
}

BehaviorPosition::BehaviorPosition(const BehaviorPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BehaviorPosition)
}

void BehaviorPosition::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BehaviorPosition::~BehaviorPosition() {
  // @@protoc_insertion_point(destructor:pb.BehaviorPosition)
  SharedDtor();
}

void BehaviorPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BehaviorPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BehaviorPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BehaviorPosition_descriptor_;
}

const BehaviorPosition& BehaviorPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBehaviorData_2eproto();
  return *default_instance_;
}

BehaviorPosition* BehaviorPosition::default_instance_ = NULL;

BehaviorPosition* BehaviorPosition::New() const {
  return new BehaviorPosition;
}

void BehaviorPosition::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BehaviorPosition*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BehaviorPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BehaviorPosition)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 X = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Y;
        break;
      }

      // optional int32 Y = 2;
      case 2: {
        if (tag == 16) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BehaviorPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BehaviorPosition)
  return false;
#undef DO_
}

void BehaviorPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BehaviorPosition)
  // optional int32 X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // optional int32 Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BehaviorPosition)
}

::google::protobuf::uint8* BehaviorPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BehaviorPosition)
  // optional int32 X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // optional int32 Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BehaviorPosition)
  return target;
}

int BehaviorPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 X = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 Y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BehaviorPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BehaviorPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BehaviorPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BehaviorPosition::MergeFrom(const BehaviorPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BehaviorPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorPosition::CopyFrom(const BehaviorPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorPosition::IsInitialized() const {

  return true;
}

void BehaviorPosition::Swap(BehaviorPosition* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BehaviorPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BehaviorPosition_descriptor_;
  metadata.reflection = BehaviorPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BehaviorKeyValue::kKeyFieldNumber;
const int BehaviorKeyValue::kValueFieldNumber;
const int BehaviorKeyValue::kTypeFieldNumber;
#endif  // !_MSC_VER

BehaviorKeyValue::BehaviorKeyValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BehaviorKeyValue)
}

void BehaviorKeyValue::InitAsDefaultInstance() {
}

BehaviorKeyValue::BehaviorKeyValue(const BehaviorKeyValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BehaviorKeyValue)
}

void BehaviorKeyValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BehaviorKeyValue::~BehaviorKeyValue() {
  // @@protoc_insertion_point(destructor:pb.BehaviorKeyValue)
  SharedDtor();
}

void BehaviorKeyValue::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void BehaviorKeyValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BehaviorKeyValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BehaviorKeyValue_descriptor_;
}

const BehaviorKeyValue& BehaviorKeyValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBehaviorData_2eproto();
  return *default_instance_;
}

BehaviorKeyValue* BehaviorKeyValue::default_instance_ = NULL;

BehaviorKeyValue* BehaviorKeyValue::New() const {
  return new BehaviorKeyValue;
}

void BehaviorKeyValue::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BehaviorKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BehaviorKeyValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string Key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Value;
        break;
      }

      // optional string Value = 2;
      case 2: {
        if (tag == 18) {
         parse_Value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_Type;
        break;
      }

      // optional .pb.EBehaviorDataType Type = 3;
      case 3: {
        if (tag == 24) {
         parse_Type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBehaviorDataType_IsValid(value)) {
            set_type(static_cast< ::pb::EBehaviorDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BehaviorKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BehaviorKeyValue)
  return false;
#undef DO_
}

void BehaviorKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BehaviorKeyValue)
  // optional string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // optional string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  // optional .pb.EBehaviorDataType Type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BehaviorKeyValue)
}

::google::protobuf::uint8* BehaviorKeyValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BehaviorKeyValue)
  // optional string Key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  // optional .pb.EBehaviorDataType Type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BehaviorKeyValue)
  return target;
}

int BehaviorKeyValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string Key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

    // optional .pb.EBehaviorDataType Type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BehaviorKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BehaviorKeyValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BehaviorKeyValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BehaviorKeyValue::MergeFrom(const BehaviorKeyValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BehaviorKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorKeyValue::CopyFrom(const BehaviorKeyValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorKeyValue::IsInitialized() const {

  return true;
}

void BehaviorKeyValue::Swap(BehaviorKeyValue* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BehaviorKeyValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BehaviorKeyValue_descriptor_;
  metadata.reflection = BehaviorKeyValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BehaviorTreeData::kIDFieldNumber;
const int BehaviorTreeData::kDataFieldNumber;
const int BehaviorTreeData::kChildFieldNumber;
const int BehaviorTreeData::kPositionFieldNumber;
const int BehaviorTreeData::kNodeIDFieldNumber;
const int BehaviorTreeData::kPreNodeIDsFieldNumber;
const int BehaviorTreeData::kPreNodeTypeFieldNumber;
const int BehaviorTreeData::kRemarkFieldNumber;
#endif  // !_MSC_VER

BehaviorTreeData::BehaviorTreeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BehaviorTreeData)
}

void BehaviorTreeData::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::BehaviorPosition*>(&::pb::BehaviorPosition::default_instance());
}

BehaviorTreeData::BehaviorTreeData(const BehaviorTreeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BehaviorTreeData)
}

void BehaviorTreeData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  position_ = NULL;
  nodeid_ = 0;
  prenodetype_ = 0;
  remark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BehaviorTreeData::~BehaviorTreeData() {
  // @@protoc_insertion_point(destructor:pb.BehaviorTreeData)
  SharedDtor();
}

void BehaviorTreeData::SharedDtor() {
  if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete remark_;
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void BehaviorTreeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BehaviorTreeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BehaviorTreeData_descriptor_;
}

const BehaviorTreeData& BehaviorTreeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBehaviorData_2eproto();
  return *default_instance_;
}

BehaviorTreeData* BehaviorTreeData::default_instance_ = NULL;

BehaviorTreeData* BehaviorTreeData::New() const {
  return new BehaviorTreeData;
}

void BehaviorTreeData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BehaviorTreeData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 217) {
    ZR_(id_, nodeid_);
    if (has_position()) {
      if (position_ != NULL) position_->::pb::BehaviorPosition::Clear();
    }
    prenodetype_ = 0;
    if (has_remark()) {
      if (remark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        remark_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  data_.Clear();
  child_.Clear();
  prenodeids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BehaviorTreeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BehaviorTreeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated .pb.BehaviorKeyValue Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        if (input->ExpectTag(26)) goto parse_Child;
        break;
      }

      // repeated .pb.BehaviorTreeData Child = 3;
      case 3: {
        if (tag == 26) {
         parse_Child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Child;
        if (input->ExpectTag(34)) goto parse_Position;
        break;
      }

      // optional .pb.BehaviorPosition Position = 4;
      case 4: {
        if (tag == 34) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_NodeID;
        break;
      }

      // optional int32 NodeID = 5;
      case 5: {
        if (tag == 40) {
         parse_NodeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nodeid_)));
          set_has_nodeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_PreNodeIDs;
        break;
      }

      // repeated int32 PreNodeIDs = 6;
      case 6: {
        if (tag == 48) {
         parse_PreNodeIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_prenodeids())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_prenodeids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_PreNodeIDs;
        if (input->ExpectTag(56)) goto parse_PreNodeType;
        break;
      }

      // optional .pb.EBehaviorGroupType PreNodeType = 7;
      case 7: {
        if (tag == 56) {
         parse_PreNodeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBehaviorGroupType_IsValid(value)) {
            set_prenodetype(static_cast< ::pb::EBehaviorGroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_Remark;
        break;
      }

      // optional string Remark = 8;
      case 8: {
        if (tag == 66) {
         parse_Remark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remark().data(), this->remark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "remark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BehaviorTreeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BehaviorTreeData)
  return false;
#undef DO_
}

void BehaviorTreeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BehaviorTreeData)
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .pb.BehaviorKeyValue Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // repeated .pb.BehaviorTreeData Child = 3;
  for (int i = 0; i < this->child_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->child(i), output);
  }

  // optional .pb.BehaviorPosition Position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }

  // optional int32 NodeID = 5;
  if (has_nodeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nodeid(), output);
  }

  // repeated int32 PreNodeIDs = 6;
  for (int i = 0; i < this->prenodeids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->prenodeids(i), output);
  }

  // optional .pb.EBehaviorGroupType PreNodeType = 7;
  if (has_prenodetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->prenodetype(), output);
  }

  // optional string Remark = 8;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->remark(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BehaviorTreeData)
}

::google::protobuf::uint8* BehaviorTreeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BehaviorTreeData)
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .pb.BehaviorKeyValue Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // repeated .pb.BehaviorTreeData Child = 3;
  for (int i = 0; i < this->child_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->child(i), target);
  }

  // optional .pb.BehaviorPosition Position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }

  // optional int32 NodeID = 5;
  if (has_nodeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nodeid(), target);
  }

  // repeated int32 PreNodeIDs = 6;
  for (int i = 0; i < this->prenodeids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->prenodeids(i), target);
  }

  // optional .pb.EBehaviorGroupType PreNodeType = 7;
  if (has_prenodetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->prenodetype(), target);
  }

  // optional string Remark = 8;
  if (has_remark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remark().data(), this->remark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "remark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->remark(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BehaviorTreeData)
  return target;
}

int BehaviorTreeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .pb.BehaviorPosition Position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional int32 NodeID = 5;
    if (has_nodeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nodeid());
    }

    // optional .pb.EBehaviorGroupType PreNodeType = 7;
    if (has_prenodetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->prenodetype());
    }

    // optional string Remark = 8;
    if (has_remark()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->remark());
    }

  }
  // repeated .pb.BehaviorKeyValue Data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  // repeated .pb.BehaviorTreeData Child = 3;
  total_size += 1 * this->child_size();
  for (int i = 0; i < this->child_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child(i));
  }

  // repeated int32 PreNodeIDs = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->prenodeids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->prenodeids(i));
    }
    total_size += 1 * this->prenodeids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BehaviorTreeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BehaviorTreeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BehaviorTreeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BehaviorTreeData::MergeFrom(const BehaviorTreeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  child_.MergeFrom(from.child_);
  prenodeids_.MergeFrom(from.prenodeids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::pb::BehaviorPosition::MergeFrom(from.position());
    }
    if (from.has_nodeid()) {
      set_nodeid(from.nodeid());
    }
    if (from.has_prenodetype()) {
      set_prenodetype(from.prenodetype());
    }
    if (from.has_remark()) {
      set_remark(from.remark());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BehaviorTreeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorTreeData::CopyFrom(const BehaviorTreeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorTreeData::IsInitialized() const {

  return true;
}

void BehaviorTreeData::Swap(BehaviorTreeData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    data_.Swap(&other->data_);
    child_.Swap(&other->child_);
    std::swap(position_, other->position_);
    std::swap(nodeid_, other->nodeid_);
    prenodeids_.Swap(&other->prenodeids_);
    std::swap(prenodetype_, other->prenodetype_);
    std::swap(remark_, other->remark_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BehaviorTreeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BehaviorTreeData_descriptor_;
  metadata.reflection = BehaviorTreeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BehaviorRootData::kTypeFieldNumber;
const int BehaviorRootData::kTriggerFieldNumber;
const int BehaviorRootData::kChildFieldNumber;
const int BehaviorRootData::kPositionFieldNumber;
const int BehaviorRootData::kCountFieldNumber;
#endif  // !_MSC_VER

BehaviorRootData::BehaviorRootData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BehaviorRootData)
}

void BehaviorRootData::InitAsDefaultInstance() {
  position_ = const_cast< ::pb::BehaviorPosition*>(&::pb::BehaviorPosition::default_instance());
}

BehaviorRootData::BehaviorRootData(const BehaviorRootData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BehaviorRootData)
}

void BehaviorRootData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  position_ = NULL;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BehaviorRootData::~BehaviorRootData() {
  // @@protoc_insertion_point(destructor:pb.BehaviorRootData)
  SharedDtor();
}

void BehaviorRootData::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void BehaviorRootData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BehaviorRootData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BehaviorRootData_descriptor_;
}

const BehaviorRootData& BehaviorRootData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBehaviorData_2eproto();
  return *default_instance_;
}

BehaviorRootData* BehaviorRootData::default_instance_ = NULL;

BehaviorRootData* BehaviorRootData::New() const {
  return new BehaviorRootData;
}

void BehaviorRootData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BehaviorRootData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 25) {
    ZR_(type_, count_);
    if (has_position()) {
      if (position_ != NULL) position_->::pb::BehaviorPosition::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  trigger_.Clear();
  child_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BehaviorRootData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BehaviorRootData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.EBehaviorGroupType Type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pb::EBehaviorGroupType_IsValid(value)) {
            set_type(static_cast< ::pb::EBehaviorGroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Trigger;
        break;
      }

      // repeated .pb.BehaviorTreeData Trigger = 2;
      case 2: {
        if (tag == 18) {
         parse_Trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trigger()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Trigger;
        if (input->ExpectTag(26)) goto parse_Child;
        break;
      }

      // repeated .pb.BehaviorTreeData Child = 3;
      case 3: {
        if (tag == 26) {
         parse_Child:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_child()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_Child;
        if (input->ExpectTag(34)) goto parse_Position;
        break;
      }

      // optional .pb.BehaviorPosition Position = 4;
      case 4: {
        if (tag == 34) {
         parse_Position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Count;
        break;
      }

      // optional int32 Count = 5;
      case 5: {
        if (tag == 40) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BehaviorRootData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BehaviorRootData)
  return false;
#undef DO_
}

void BehaviorRootData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BehaviorRootData)
  // optional .pb.EBehaviorGroupType Type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated .pb.BehaviorTreeData Trigger = 2;
  for (int i = 0; i < this->trigger_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trigger(i), output);
  }

  // repeated .pb.BehaviorTreeData Child = 3;
  for (int i = 0; i < this->child_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->child(i), output);
  }

  // optional .pb.BehaviorPosition Position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->position(), output);
  }

  // optional int32 Count = 5;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BehaviorRootData)
}

::google::protobuf::uint8* BehaviorRootData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BehaviorRootData)
  // optional .pb.EBehaviorGroupType Type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated .pb.BehaviorTreeData Trigger = 2;
  for (int i = 0; i < this->trigger_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trigger(i), target);
  }

  // repeated .pb.BehaviorTreeData Child = 3;
  for (int i = 0; i < this->child_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->child(i), target);
  }

  // optional .pb.BehaviorPosition Position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->position(), target);
  }

  // optional int32 Count = 5;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BehaviorRootData)
  return target;
}

int BehaviorRootData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.EBehaviorGroupType Type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .pb.BehaviorPosition Position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }

    // optional int32 Count = 5;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .pb.BehaviorTreeData Trigger = 2;
  total_size += 1 * this->trigger_size();
  for (int i = 0; i < this->trigger_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trigger(i));
  }

  // repeated .pb.BehaviorTreeData Child = 3;
  total_size += 1 * this->child_size();
  for (int i = 0; i < this->child_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->child(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BehaviorRootData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BehaviorRootData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BehaviorRootData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BehaviorRootData::MergeFrom(const BehaviorRootData& from) {
  GOOGLE_CHECK_NE(&from, this);
  trigger_.MergeFrom(from.trigger_);
  child_.MergeFrom(from.child_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_position()) {
      mutable_position()->::pb::BehaviorPosition::MergeFrom(from.position());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BehaviorRootData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorRootData::CopyFrom(const BehaviorRootData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorRootData::IsInitialized() const {

  return true;
}

void BehaviorRootData::Swap(BehaviorRootData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    trigger_.Swap(&other->trigger_);
    child_.Swap(&other->child_);
    std::swap(position_, other->position_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BehaviorRootData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BehaviorRootData_descriptor_;
  metadata.reflection = BehaviorRootData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BehaviorData::kIDFieldNumber;
const int BehaviorData::kRootDataFieldNumber;
const int BehaviorData::kTreeDataFieldNumber;
const int BehaviorData::kNotAllowSkipFieldNumber;
#endif  // !_MSC_VER

BehaviorData::BehaviorData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.BehaviorData)
}

void BehaviorData::InitAsDefaultInstance() {
}

BehaviorData::BehaviorData(const BehaviorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.BehaviorData)
}

void BehaviorData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  notallowskip_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BehaviorData::~BehaviorData() {
  // @@protoc_insertion_point(destructor:pb.BehaviorData)
  SharedDtor();
}

void BehaviorData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BehaviorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BehaviorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BehaviorData_descriptor_;
}

const BehaviorData& BehaviorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_module_2fBehaviorData_2eproto();
  return *default_instance_;
}

BehaviorData* BehaviorData::default_instance_ = NULL;

BehaviorData* BehaviorData::New() const {
  return new BehaviorData;
}

void BehaviorData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BehaviorData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, notallowskip_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  rootdata_.Clear();
  treedata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BehaviorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.BehaviorData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RootData;
        break;
      }

      // repeated .pb.BehaviorRootData RootData = 2;
      case 2: {
        if (tag == 18) {
         parse_RootData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rootdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RootData;
        if (input->ExpectTag(26)) goto parse_TreeData;
        break;
      }

      // repeated .pb.BehaviorTreeData TreeData = 3;
      case 3: {
        if (tag == 26) {
         parse_TreeData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_TreeData;
        if (input->ExpectTag(32)) goto parse_notAllowSkip;
        break;
      }

      // optional bool notAllowSkip = 4;
      case 4: {
        if (tag == 32) {
         parse_notAllowSkip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &notallowskip_)));
          set_has_notallowskip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.BehaviorData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.BehaviorData)
  return false;
#undef DO_
}

void BehaviorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.BehaviorData)
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .pb.BehaviorRootData RootData = 2;
  for (int i = 0; i < this->rootdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rootdata(i), output);
  }

  // repeated .pb.BehaviorTreeData TreeData = 3;
  for (int i = 0; i < this->treedata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->treedata(i), output);
  }

  // optional bool notAllowSkip = 4;
  if (has_notallowskip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->notallowskip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.BehaviorData)
}

::google::protobuf::uint8* BehaviorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.BehaviorData)
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .pb.BehaviorRootData RootData = 2;
  for (int i = 0; i < this->rootdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rootdata(i), target);
  }

  // repeated .pb.BehaviorTreeData TreeData = 3;
  for (int i = 0; i < this->treedata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->treedata(i), target);
  }

  // optional bool notAllowSkip = 4;
  if (has_notallowskip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->notallowskip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.BehaviorData)
  return target;
}

int BehaviorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bool notAllowSkip = 4;
    if (has_notallowskip()) {
      total_size += 1 + 1;
    }

  }
  // repeated .pb.BehaviorRootData RootData = 2;
  total_size += 1 * this->rootdata_size();
  for (int i = 0; i < this->rootdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rootdata(i));
  }

  // repeated .pb.BehaviorTreeData TreeData = 3;
  total_size += 1 * this->treedata_size();
  for (int i = 0; i < this->treedata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treedata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BehaviorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BehaviorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BehaviorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BehaviorData::MergeFrom(const BehaviorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rootdata_.MergeFrom(from.rootdata_);
  treedata_.MergeFrom(from.treedata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_notallowskip()) {
      set_notallowskip(from.notallowskip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BehaviorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BehaviorData::CopyFrom(const BehaviorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BehaviorData::IsInitialized() const {

  return true;
}

void BehaviorData::Swap(BehaviorData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    rootdata_.Swap(&other->rootdata_);
    treedata_.Swap(&other->treedata_);
    std::swap(notallowskip_, other->notallowskip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BehaviorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BehaviorData_descriptor_;
  metadata.reflection = BehaviorData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
