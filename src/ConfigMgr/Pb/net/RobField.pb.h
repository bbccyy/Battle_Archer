// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/RobField.proto

#ifndef PROTOBUF_net_2fRobField_2eproto__INCLUDED
#define PROTOBUF_net_2fRobField_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "module/Util.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fRobField_2eproto();
void protobuf_AssignDesc_net_2fRobField_2eproto();
void protobuf_ShutdownFile_net_2fRobField_2eproto();

class TRobFieldUser;
class TRobFieldArmy;
class TRobFieldUserCanTouchBuildingTime;
class TRobFieldUserAutoTouchConfig;
class TRobFieldPriv;
class TRobFieldBuildingAttacker;
class TRobFieldBuildingDefender;
class TRobFieldBuilding;
class TRobFieldEventUserEnter;
class TRobFieldEventUserLeave;
class TRobFieldEventUserMove;
class TRobFieldEventUserFight;
class TRobFieldEventUserTouch;
class TRobFieldEventUserRevive;
class TRobFieldEventUserKillNum;
class TRobFieldEventUserHpChange;
class TRobFieldEventArmyGoalChange;
class TRobFieldEventBuildingOwnerChange;
class TRobFieldEventBuildingProgressChange;
class TRobFieldEventGameOver;
class TRobFieldEventWrapper;
class TRobFieldWhole;
class TRobFieldDelta;
class TRobFieldSettle;

enum ERobType {
  EROB_TYPE_CONQUER = 0,
  EROB_TYPE_ROYAL = 1,
  EROB_TYPE_SIEGEFLAG = 2
};
bool ERobType_IsValid(int value);
const ERobType ERobType_MIN = EROB_TYPE_CONQUER;
const ERobType ERobType_MAX = EROB_TYPE_SIEGEFLAG;
const int ERobType_ARRAYSIZE = ERobType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERobType_descriptor();
inline const ::std::string& ERobType_Name(ERobType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERobType_descriptor(), value);
}
inline bool ERobType_Parse(
    const ::std::string& name, ERobType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERobType>(
    ERobType_descriptor(), name, value);
}
enum ERobFieldEntityType {
  EROB_FIELD_ENTITY_TYPE_USER = 0,
  EROB_FIELD_ENTITY_TYPE_FLAG = 2,
  EROB_FIELD_ENTITY_TYPE_DOOR = 3,
  EROB_FIELD_ENTITY_TYPE_TECH = 4,
  EROB_FIELD_ENTITY_TYPE_HOME = 5
};
bool ERobFieldEntityType_IsValid(int value);
const ERobFieldEntityType ERobFieldEntityType_MIN = EROB_FIELD_ENTITY_TYPE_USER;
const ERobFieldEntityType ERobFieldEntityType_MAX = EROB_FIELD_ENTITY_TYPE_HOME;
const int ERobFieldEntityType_ARRAYSIZE = ERobFieldEntityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERobFieldEntityType_descriptor();
inline const ::std::string& ERobFieldEntityType_Name(ERobFieldEntityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERobFieldEntityType_descriptor(), value);
}
inline bool ERobFieldEntityType_Parse(
    const ::std::string& name, ERobFieldEntityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERobFieldEntityType>(
    ERobFieldEntityType_descriptor(), name, value);
}
enum ERobFieldUserState {
  EROB_FIELD_USER_STATE_STAND = 0,
  EROB_FIELD_USER_STATE_MOVING = 1,
  EROB_FIELD_USER_STATE_DEAD = 2
};
bool ERobFieldUserState_IsValid(int value);
const ERobFieldUserState ERobFieldUserState_MIN = EROB_FIELD_USER_STATE_STAND;
const ERobFieldUserState ERobFieldUserState_MAX = EROB_FIELD_USER_STATE_DEAD;
const int ERobFieldUserState_ARRAYSIZE = ERobFieldUserState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERobFieldUserState_descriptor();
inline const ::std::string& ERobFieldUserState_Name(ERobFieldUserState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERobFieldUserState_descriptor(), value);
}
inline bool ERobFieldUserState_Parse(
    const ::std::string& name, ERobFieldUserState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERobFieldUserState>(
    ERobFieldUserState_descriptor(), name, value);
}
enum ERobFieldEventType {
  EROB_FIELD_EVENT_TYPE_USER_ENTER = 0,
  EROB_FIELD_EVENT_TYPE_USER_LEAVE = 1,
  EROB_FIELD_EVENT_TYPE_USER_MOVE = 2,
  EROB_FIELD_EVENT_TYPE_USER_FIGHT = 3,
  EROB_FIELD_EVENT_TYPE_USER_TOUCH = 4,
  EROB_FIELD_EVENT_TYPE_USER_REVIVE = 5,
  EROB_FIELD_EVENT_TYPE_USER_KILL_NUM = 6,
  EROB_FIELD_EVENT_TYPE_USER_HP_CHANGE = 7,
  EROB_FIELD_EVENT_TYPE_ARMY_GOAL_CHANGE = 8,
  EROB_FIELD_EVENT_TYPE_BUILDING_OWNER_CHANGE = 9,
  EROB_FIELD_EVENT_TYPE_BUILDING_HP_CHANGE = 10,
  EROB_FIELD_EVENT_TYPE_GAMEOVER = 11
};
bool ERobFieldEventType_IsValid(int value);
const ERobFieldEventType ERobFieldEventType_MIN = EROB_FIELD_EVENT_TYPE_USER_ENTER;
const ERobFieldEventType ERobFieldEventType_MAX = EROB_FIELD_EVENT_TYPE_GAMEOVER;
const int ERobFieldEventType_ARRAYSIZE = ERobFieldEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERobFieldEventType_descriptor();
inline const ::std::string& ERobFieldEventType_Name(ERobFieldEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERobFieldEventType_descriptor(), value);
}
inline bool ERobFieldEventType_Parse(
    const ::std::string& name, ERobFieldEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERobFieldEventType>(
    ERobFieldEventType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TRobFieldUser</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldUser : public ::google::protobuf::Message {
 public:
  TRobFieldUser();
  virtual ~TRobFieldUser();

  TRobFieldUser(const TRobFieldUser& from);

  inline TRobFieldUser& operator=(const TRobFieldUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldUser& default_instance();

  void Swap(TRobFieldUser* other);

  // implements Message ----------------------------------------------

  TRobFieldUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldUser& from);
  void MergeFrom(const TRobFieldUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUser</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo UserSimpleInfo = 2;
  inline bool has_usersimpleinfo() const;
  inline void clear_usersimpleinfo();
  static const int kUserSimpleInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUser</name>
  	<Function>
  		<name>usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usersimpleinfo</name>
  		<replaceName>UserSimpleInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& usersimpleinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_usersimpleinfo();
  inline ::pb::TUserSimpleInfo* release_usersimpleinfo();
  inline void set_allocated_usersimpleinfo(::pb::TUserSimpleInfo* usersimpleinfo);

  // optional uint64 ArmyId = 3;
  inline bool has_armyid() const;
  inline void clear_armyid();
  static const int kArmyIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUser</name>
  	<Function>
  		<name>armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 armyid() const;
  inline void set_armyid(::google::protobuf::uint64 value);

  // optional uint32 MaxHp = 4;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUser</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // optional uint32 CurHp = 5;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUser</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curhp() const;
  inline void set_curhp(::google::protobuf::uint32 value);

  // optional .pb.ERobFieldUserState State = 6;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUser</name>
  	<Function>
  		<name>state</name>
  		<replaceName>State</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_state</name>
  		<replaceName>State</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_state</name>
  		<replaceName>State</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ERobFieldUserState state() const;
  inline void set_state(::pb::ERobFieldUserState value);

  // optional uint32 Speed = 7;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUser</name>
  	<Function>
  		<name>speed</name>
  		<replaceName>Speed</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_speed</name>
  		<replaceName>Speed</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_speed</name>
  		<replaceName>Speed</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);

  // optional .pb.PbVector2_Int CurPos = 8;
  inline bool has_curpos() const;
  inline void clear_curpos();
  static const int kCurPosFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUser</name>
  	<Function>
  		<name>curpos</name>
  		<replaceName>CurPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curpos</name>
  		<replaceName>CurPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_curpos</name>
  		<replaceName>CurPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curpos</name>
  		<replaceName>CurPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& curpos() const;
  inline ::pb::PbVector2_Int* mutable_curpos();
  inline ::pb::PbVector2_Int* release_curpos();
  inline void set_allocated_curpos(::pb::PbVector2_Int* curpos);

  // optional .pb.PbVector2_Int EndPos = 9;
  inline bool has_endpos() const;
  inline void clear_endpos();
  static const int kEndPosFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUser</name>
  	<Function>
  		<name>endpos</name>
  		<replaceName>EndPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endpos</name>
  		<replaceName>EndPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_endpos</name>
  		<replaceName>EndPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endpos</name>
  		<replaceName>EndPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& endpos() const;
  inline ::pb::PbVector2_Int* mutable_endpos();
  inline ::pb::PbVector2_Int* release_endpos();
  inline void set_allocated_endpos(::pb::PbVector2_Int* endpos);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldUser)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_usersimpleinfo();
  inline void clear_has_usersimpleinfo();
  inline void set_has_armyid();
  inline void clear_has_armyid();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_curpos();
  inline void clear_has_curpos();
  inline void set_has_endpos();
  inline void clear_has_endpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  ::pb::TUserSimpleInfo* usersimpleinfo_;
  ::google::protobuf::uint64 armyid_;
  ::google::protobuf::uint32 maxhp_;
  ::google::protobuf::uint32 curhp_;
  int state_;
  ::google::protobuf::uint32 speed_;
  ::pb::PbVector2_Int* curpos_;
  ::pb::PbVector2_Int* endpos_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldUser* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldArmy</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldArmy : public ::google::protobuf::Message {
 public:
  TRobFieldArmy();
  virtual ~TRobFieldArmy();

  TRobFieldArmy(const TRobFieldArmy& from);

  inline TRobFieldArmy& operator=(const TRobFieldArmy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldArmy& default_instance();

  void Swap(TRobFieldArmy* other);

  // implements Message ----------------------------------------------

  TRobFieldArmy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldArmy& from);
  void MergeFrom(const TRobFieldArmy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ArmyId = 1;
  inline bool has_armyid() const;
  inline void clear_armyid();
  static const int kArmyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldArmy</name>
  	<Function>
  		<name>armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 armyid() const;
  inline void set_armyid(::google::protobuf::uint64 value);

  // optional string Name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldArmy</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes Extra = 3;
  inline bool has_extra() const;
  inline void clear_extra();
  static const int kExtraFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldArmy</name>
  	<Function>
  		<name>extra</name>
  		<replaceName>Extra</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_extra</name>
  		<replaceName>Extra</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extra</name>
  		<replaceName>Extra</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& extra() const;
  inline void set_extra(const ::std::string& value);
  inline void set_extra(const char* value);
  inline void set_extra(const void* value, size_t size);
  inline ::std::string* mutable_extra();
  inline ::std::string* release_extra();
  inline void set_allocated_extra(::std::string* extra);

  // optional uint32 Goal = 4;
  inline bool has_goal() const;
  inline void clear_goal();
  static const int kGoalFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldArmy</name>
  	<Function>
  		<name>goal</name>
  		<replaceName>Goal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goal</name>
  		<replaceName>Goal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goal</name>
  		<replaceName>Goal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goal() const;
  inline void set_goal(::google::protobuf::uint32 value);

  // repeated uint64 EntityIds = 5;
  inline int entityids_size() const;
  inline void clear_entityids();
  static const int kEntityIdsFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldArmy</name>
  	<Function>
  		<name>entityids</name>
  		<replaceName>EntityIds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_entityids</name>
  		<replaceName>EntityIds</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_entityids</name>
  		<replaceName>EntityIds</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityids</name>
  		<replaceName>EntityIds</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>entityids_size</name>
  		<replaceName>EntityIds</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityids(int index) const;
  inline void set_entityids(int index, ::google::protobuf::uint64 value);
  inline void add_entityids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      entityids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_entityids();

  // @@protoc_insertion_point(class_scope:pb.TRobFieldArmy)
 private:
  inline void set_has_armyid();
  inline void clear_has_armyid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_extra();
  inline void clear_has_extra();
  inline void set_has_goal();
  inline void clear_has_goal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 armyid_;
  ::std::string* name_;
  ::std::string* extra_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > entityids_;
  ::google::protobuf::uint32 goal_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldArmy* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldUserCanTouchBuildingTime</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldUserCanTouchBuildingTime : public ::google::protobuf::Message {
 public:
  TRobFieldUserCanTouchBuildingTime();
  virtual ~TRobFieldUserCanTouchBuildingTime();

  TRobFieldUserCanTouchBuildingTime(const TRobFieldUserCanTouchBuildingTime& from);

  inline TRobFieldUserCanTouchBuildingTime& operator=(const TRobFieldUserCanTouchBuildingTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldUserCanTouchBuildingTime& default_instance();

  void Swap(TRobFieldUserCanTouchBuildingTime* other);

  // implements Message ----------------------------------------------

  TRobFieldUserCanTouchBuildingTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldUserCanTouchBuildingTime& from);
  void MergeFrom(const TRobFieldUserCanTouchBuildingTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUserCanTouchBuildingTime</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional uint64 CanTouchMs = 2;
  inline bool has_cantouchms() const;
  inline void clear_cantouchms();
  static const int kCanTouchMsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUserCanTouchBuildingTime</name>
  	<Function>
  		<name>cantouchms</name>
  		<replaceName>CanTouchMs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cantouchms</name>
  		<replaceName>CanTouchMs</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cantouchms</name>
  		<replaceName>CanTouchMs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 cantouchms() const;
  inline void set_cantouchms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldUserCanTouchBuildingTime)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_cantouchms();
  inline void clear_has_cantouchms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint64 cantouchms_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldUserCanTouchBuildingTime* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldUserAutoTouchConfig</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldUserAutoTouchConfig : public ::google::protobuf::Message {
 public:
  TRobFieldUserAutoTouchConfig();
  virtual ~TRobFieldUserAutoTouchConfig();

  TRobFieldUserAutoTouchConfig(const TRobFieldUserAutoTouchConfig& from);

  inline TRobFieldUserAutoTouchConfig& operator=(const TRobFieldUserAutoTouchConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldUserAutoTouchConfig& default_instance();

  void Swap(TRobFieldUserAutoTouchConfig* other);

  // implements Message ----------------------------------------------

  TRobFieldUserAutoTouchConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldUserAutoTouchConfig& from);
  void MergeFrom(const TRobFieldUserAutoTouchConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUserAutoTouchConfig</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional bool IsAuto = 2;
  inline bool has_isauto() const;
  inline void clear_isauto();
  static const int kIsAutoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldUserAutoTouchConfig</name>
  	<Function>
  		<name>isauto</name>
  		<replaceName>IsAuto</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isauto</name>
  		<replaceName>IsAuto</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isauto</name>
  		<replaceName>IsAuto</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isauto() const;
  inline void set_isauto(bool value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldUserAutoTouchConfig)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_isauto();
  inline void clear_has_isauto();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  bool isauto_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldUserAutoTouchConfig* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldPriv</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldPriv : public ::google::protobuf::Message {
 public:
  TRobFieldPriv();
  virtual ~TRobFieldPriv();

  TRobFieldPriv(const TRobFieldPriv& from);

  inline TRobFieldPriv& operator=(const TRobFieldPriv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldPriv& default_instance();

  void Swap(TRobFieldPriv* other);

  // implements Message ----------------------------------------------

  TRobFieldPriv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldPriv& from);
  void MergeFrom(const TRobFieldPriv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldPriv</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional uint64 CanReviveTimeMs = 2;
  inline bool has_canrevivetimems() const;
  inline void clear_canrevivetimems();
  static const int kCanReviveTimeMsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldPriv</name>
  	<Function>
  		<name>canrevivetimems</name>
  		<replaceName>CanReviveTimeMs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canrevivetimems</name>
  		<replaceName>CanReviveTimeMs</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canrevivetimems</name>
  		<replaceName>CanReviveTimeMs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 canrevivetimems() const;
  inline void set_canrevivetimems(::google::protobuf::uint64 value);

  // optional uint64 CanAtkUserTimeMs = 3;
  inline bool has_canatkusertimems() const;
  inline void clear_canatkusertimems();
  static const int kCanAtkUserTimeMsFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldPriv</name>
  	<Function>
  		<name>canatkusertimems</name>
  		<replaceName>CanAtkUserTimeMs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canatkusertimems</name>
  		<replaceName>CanAtkUserTimeMs</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canatkusertimems</name>
  		<replaceName>CanAtkUserTimeMs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 canatkusertimems() const;
  inline void set_canatkusertimems(::google::protobuf::uint64 value);

  // repeated .pb.TRobFieldUserCanTouchBuildingTime CanTouchBuildingTimes = 4;
  inline int cantouchbuildingtimes_size() const;
  inline void clear_cantouchbuildingtimes();
  static const int kCanTouchBuildingTimesFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldPriv</name>
  	<Function>
  		<name>cantouchbuildingtimes</name>
  		<replaceName>CanTouchBuildingTimes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_cantouchbuildingtimes</name>
  		<replaceName>CanTouchBuildingTimes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_cantouchbuildingtimes</name>
  		<replaceName>CanTouchBuildingTimes</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cantouchbuildingtimes</name>
  		<replaceName>CanTouchBuildingTimes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>cantouchbuildingtimes_size</name>
  		<replaceName>CanTouchBuildingTimes</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldUserCanTouchBuildingTime& cantouchbuildingtimes(int index) const;
  inline ::pb::TRobFieldUserCanTouchBuildingTime* mutable_cantouchbuildingtimes(int index);
  inline ::pb::TRobFieldUserCanTouchBuildingTime* add_cantouchbuildingtimes();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUserCanTouchBuildingTime >&
      cantouchbuildingtimes() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUserCanTouchBuildingTime >*
      mutable_cantouchbuildingtimes();

  // repeated .pb.TRobFieldUserAutoTouchConfig AutoTouchConfigs = 5;
  inline int autotouchconfigs_size() const;
  inline void clear_autotouchconfigs();
  static const int kAutoTouchConfigsFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldPriv</name>
  	<Function>
  		<name>autotouchconfigs</name>
  		<replaceName>AutoTouchConfigs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_autotouchconfigs</name>
  		<replaceName>AutoTouchConfigs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_autotouchconfigs</name>
  		<replaceName>AutoTouchConfigs</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_autotouchconfigs</name>
  		<replaceName>AutoTouchConfigs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>autotouchconfigs_size</name>
  		<replaceName>AutoTouchConfigs</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldUserAutoTouchConfig& autotouchconfigs(int index) const;
  inline ::pb::TRobFieldUserAutoTouchConfig* mutable_autotouchconfigs(int index);
  inline ::pb::TRobFieldUserAutoTouchConfig* add_autotouchconfigs();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUserAutoTouchConfig >&
      autotouchconfigs() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUserAutoTouchConfig >*
      mutable_autotouchconfigs();

  // optional uint32 Score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldPriv</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 KillNum = 7;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldPriv</name>
  	<Function>
  		<name>killnum</name>
  		<replaceName>KillNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_killnum</name>
  		<replaceName>KillNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_killnum</name>
  		<replaceName>KillNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional uint64 CanMoveTimeMs = 8;
  inline bool has_canmovetimems() const;
  inline void clear_canmovetimems();
  static const int kCanMoveTimeMsFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldPriv</name>
  	<Function>
  		<name>canmovetimems</name>
  		<replaceName>CanMoveTimeMs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_canmovetimems</name>
  		<replaceName>CanMoveTimeMs</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_canmovetimems</name>
  		<replaceName>CanMoveTimeMs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 canmovetimems() const;
  inline void set_canmovetimems(::google::protobuf::uint64 value);

  // optional uint32 AttackNum = 9;
  inline bool has_attacknum() const;
  inline void clear_attacknum();
  static const int kAttackNumFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldPriv</name>
  	<Function>
  		<name>attacknum</name>
  		<replaceName>AttackNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attacknum</name>
  		<replaceName>AttackNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attacknum</name>
  		<replaceName>AttackNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attacknum() const;
  inline void set_attacknum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldPriv)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_canrevivetimems();
  inline void clear_has_canrevivetimems();
  inline void set_has_canatkusertimems();
  inline void clear_has_canatkusertimems();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_canmovetimems();
  inline void clear_has_canmovetimems();
  inline void set_has_attacknum();
  inline void clear_has_attacknum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint64 canrevivetimems_;
  ::google::protobuf::uint64 canatkusertimems_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUserCanTouchBuildingTime > cantouchbuildingtimes_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUserAutoTouchConfig > autotouchconfigs_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint64 canmovetimems_;
  ::google::protobuf::uint32 attacknum_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldPriv* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldBuildingAttacker</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldBuildingAttacker : public ::google::protobuf::Message {
 public:
  TRobFieldBuildingAttacker();
  virtual ~TRobFieldBuildingAttacker();

  TRobFieldBuildingAttacker(const TRobFieldBuildingAttacker& from);

  inline TRobFieldBuildingAttacker& operator=(const TRobFieldBuildingAttacker& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldBuildingAttacker& default_instance();

  void Swap(TRobFieldBuildingAttacker* other);

  // implements Message ----------------------------------------------

  TRobFieldBuildingAttacker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldBuildingAttacker& from);
  void MergeFrom(const TRobFieldBuildingAttacker& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ArmyId = 1;
  inline bool has_armyid() const;
  inline void clear_armyid();
  static const int kArmyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuildingAttacker</name>
  	<Function>
  		<name>armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 armyid() const;
  inline void set_armyid(::google::protobuf::uint64 value);

  // optional uint32 Damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuildingAttacker</name>
  	<Function>
  		<name>damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_damage</name>
  		<replaceName>Damage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldBuildingAttacker)
 private:
  inline void set_has_armyid();
  inline void clear_has_armyid();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 armyid_;
  ::google::protobuf::uint32 damage_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldBuildingAttacker* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldBuildingDefender</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldBuildingDefender : public ::google::protobuf::Message {
 public:
  TRobFieldBuildingDefender();
  virtual ~TRobFieldBuildingDefender();

  TRobFieldBuildingDefender(const TRobFieldBuildingDefender& from);

  inline TRobFieldBuildingDefender& operator=(const TRobFieldBuildingDefender& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldBuildingDefender& default_instance();

  void Swap(TRobFieldBuildingDefender* other);

  // implements Message ----------------------------------------------

  TRobFieldBuildingDefender* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldBuildingDefender& from);
  void MergeFrom(const TRobFieldBuildingDefender& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ArmyId = 1;
  inline bool has_armyid() const;
  inline void clear_armyid();
  static const int kArmyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuildingDefender</name>
  	<Function>
  		<name>armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 armyid() const;
  inline void set_armyid(::google::protobuf::uint64 value);

  // optional uint32 Repair = 2;
  inline bool has_repair() const;
  inline void clear_repair();
  static const int kRepairFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuildingDefender</name>
  	<Function>
  		<name>repair</name>
  		<replaceName>Repair</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_repair</name>
  		<replaceName>Repair</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_repair</name>
  		<replaceName>Repair</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 repair() const;
  inline void set_repair(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldBuildingDefender)
 private:
  inline void set_has_armyid();
  inline void clear_has_armyid();
  inline void set_has_repair();
  inline void clear_has_repair();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 armyid_;
  ::google::protobuf::uint32 repair_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldBuildingDefender* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldBuilding</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldBuilding : public ::google::protobuf::Message {
 public:
  TRobFieldBuilding();
  virtual ~TRobFieldBuilding();

  TRobFieldBuilding(const TRobFieldBuilding& from);

  inline TRobFieldBuilding& operator=(const TRobFieldBuilding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldBuilding& default_instance();

  void Swap(TRobFieldBuilding* other);

  // implements Message ----------------------------------------------

  TRobFieldBuilding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldBuilding& from);
  void MergeFrom(const TRobFieldBuilding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuilding</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional uint64 ArmyId = 2;
  inline bool has_armyid() const;
  inline void clear_armyid();
  static const int kArmyIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuilding</name>
  	<Function>
  		<name>armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 armyid() const;
  inline void set_armyid(::google::protobuf::uint64 value);

  // optional uint64 OwnerTime = 3;
  inline bool has_ownertime() const;
  inline void clear_ownertime();
  static const int kOwnerTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuilding</name>
  	<Function>
  		<name>ownertime</name>
  		<replaceName>OwnerTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ownertime</name>
  		<replaceName>OwnerTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ownertime</name>
  		<replaceName>OwnerTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ownertime() const;
  inline void set_ownertime(::google::protobuf::uint64 value);

  // optional uint64 InitArmyId = 4;
  inline bool has_initarmyid() const;
  inline void clear_initarmyid();
  static const int kInitArmyIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuilding</name>
  	<Function>
  		<name>initarmyid</name>
  		<replaceName>InitArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_initarmyid</name>
  		<replaceName>InitArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_initarmyid</name>
  		<replaceName>InitArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 initarmyid() const;
  inline void set_initarmyid(::google::protobuf::uint64 value);

  // optional bool OwnerChanged = 5;
  inline bool has_ownerchanged() const;
  inline void clear_ownerchanged();
  static const int kOwnerChangedFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuilding</name>
  	<Function>
  		<name>ownerchanged</name>
  		<replaceName>OwnerChanged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ownerchanged</name>
  		<replaceName>OwnerChanged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ownerchanged</name>
  		<replaceName>OwnerChanged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ownerchanged() const;
  inline void set_ownerchanged(bool value);

  // optional uint32 MaxHp = 6;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuilding</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // optional uint32 CurHp = 7;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuilding</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curhp() const;
  inline void set_curhp(::google::protobuf::uint32 value);

  // repeated .pb.TRobFieldBuildingAttacker Attackers = 8;
  inline int attackers_size() const;
  inline void clear_attackers();
  static const int kAttackersFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuilding</name>
  	<Function>
  		<name>attackers</name>
  		<replaceName>Attackers</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attackers</name>
  		<replaceName>Attackers</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attackers</name>
  		<replaceName>Attackers</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackers</name>
  		<replaceName>Attackers</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attackers_size</name>
  		<replaceName>Attackers</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldBuildingAttacker& attackers(int index) const;
  inline ::pb::TRobFieldBuildingAttacker* mutable_attackers(int index);
  inline ::pb::TRobFieldBuildingAttacker* add_attackers();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuildingAttacker >&
      attackers() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuildingAttacker >*
      mutable_attackers();

  // optional .pb.TRobFieldBuildingDefender Defender = 9;
  inline bool has_defender() const;
  inline void clear_defender();
  static const int kDefenderFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuilding</name>
  	<Function>
  		<name>defender</name>
  		<replaceName>Defender</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defender</name>
  		<replaceName>Defender</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defender</name>
  		<replaceName>Defender</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defender</name>
  		<replaceName>Defender</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldBuildingDefender& defender() const;
  inline ::pb::TRobFieldBuildingDefender* mutable_defender();
  inline ::pb::TRobFieldBuildingDefender* release_defender();
  inline void set_allocated_defender(::pb::TRobFieldBuildingDefender* defender);

  // optional uint64 LastResumeHpTime = 10;
  inline bool has_lastresumehptime() const;
  inline void clear_lastresumehptime();
  static const int kLastResumeHpTimeFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldBuilding</name>
  	<Function>
  		<name>lastresumehptime</name>
  		<replaceName>LastResumeHpTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastresumehptime</name>
  		<replaceName>LastResumeHpTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastresumehptime</name>
  		<replaceName>LastResumeHpTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastresumehptime() const;
  inline void set_lastresumehptime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldBuilding)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_armyid();
  inline void clear_has_armyid();
  inline void set_has_ownertime();
  inline void clear_has_ownertime();
  inline void set_has_initarmyid();
  inline void clear_has_initarmyid();
  inline void set_has_ownerchanged();
  inline void clear_has_ownerchanged();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_defender();
  inline void clear_has_defender();
  inline void set_has_lastresumehptime();
  inline void clear_has_lastresumehptime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint64 armyid_;
  ::google::protobuf::uint64 ownertime_;
  ::google::protobuf::uint64 initarmyid_;
  bool ownerchanged_;
  ::google::protobuf::uint32 maxhp_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuildingAttacker > attackers_;
  ::pb::TRobFieldBuildingDefender* defender_;
  ::google::protobuf::uint64 lastresumehptime_;
  ::google::protobuf::uint32 curhp_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldBuilding* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventUserEnter</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventUserEnter : public ::google::protobuf::Message {
 public:
  TRobFieldEventUserEnter();
  virtual ~TRobFieldEventUserEnter();

  TRobFieldEventUserEnter(const TRobFieldEventUserEnter& from);

  inline TRobFieldEventUserEnter& operator=(const TRobFieldEventUserEnter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventUserEnter& default_instance();

  void Swap(TRobFieldEventUserEnter* other);

  // implements Message ----------------------------------------------

  TRobFieldEventUserEnter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventUserEnter& from);
  void MergeFrom(const TRobFieldEventUserEnter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserEnter</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional .pb.TRobFieldUser User = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserEnter</name>
  	<Function>
  		<name>user</name>
  		<replaceName>User</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_user</name>
  		<replaceName>User</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_user</name>
  		<replaceName>User</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_user</name>
  		<replaceName>User</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldUser& user() const;
  inline ::pb::TRobFieldUser* mutable_user();
  inline ::pb::TRobFieldUser* release_user();
  inline void set_allocated_user(::pb::TRobFieldUser* user);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventUserEnter)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  ::pb::TRobFieldUser* user_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventUserEnter* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventUserLeave</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventUserLeave : public ::google::protobuf::Message {
 public:
  TRobFieldEventUserLeave();
  virtual ~TRobFieldEventUserLeave();

  TRobFieldEventUserLeave(const TRobFieldEventUserLeave& from);

  inline TRobFieldEventUserLeave& operator=(const TRobFieldEventUserLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventUserLeave& default_instance();

  void Swap(TRobFieldEventUserLeave* other);

  // implements Message ----------------------------------------------

  TRobFieldEventUserLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventUserLeave& from);
  void MergeFrom(const TRobFieldEventUserLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserLeave</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventUserLeave)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventUserLeave* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventUserMove</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventUserMove : public ::google::protobuf::Message {
 public:
  TRobFieldEventUserMove();
  virtual ~TRobFieldEventUserMove();

  TRobFieldEventUserMove(const TRobFieldEventUserMove& from);

  inline TRobFieldEventUserMove& operator=(const TRobFieldEventUserMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventUserMove& default_instance();

  void Swap(TRobFieldEventUserMove* other);

  // implements Message ----------------------------------------------

  TRobFieldEventUserMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventUserMove& from);
  void MergeFrom(const TRobFieldEventUserMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserMove</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional .pb.PbVector2_Int CurPos = 2;
  inline bool has_curpos() const;
  inline void clear_curpos();
  static const int kCurPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserMove</name>
  	<Function>
  		<name>curpos</name>
  		<replaceName>CurPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curpos</name>
  		<replaceName>CurPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_curpos</name>
  		<replaceName>CurPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curpos</name>
  		<replaceName>CurPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& curpos() const;
  inline ::pb::PbVector2_Int* mutable_curpos();
  inline ::pb::PbVector2_Int* release_curpos();
  inline void set_allocated_curpos(::pb::PbVector2_Int* curpos);

  // optional .pb.PbVector2_Int EndPos = 3;
  inline bool has_endpos() const;
  inline void clear_endpos();
  static const int kEndPosFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserMove</name>
  	<Function>
  		<name>endpos</name>
  		<replaceName>EndPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_endpos</name>
  		<replaceName>EndPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_endpos</name>
  		<replaceName>EndPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_endpos</name>
  		<replaceName>EndPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& endpos() const;
  inline ::pb::PbVector2_Int* mutable_endpos();
  inline ::pb::PbVector2_Int* release_endpos();
  inline void set_allocated_endpos(::pb::PbVector2_Int* endpos);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventUserMove)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_curpos();
  inline void clear_has_curpos();
  inline void set_has_endpos();
  inline void clear_has_endpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  ::pb::PbVector2_Int* curpos_;
  ::pb::PbVector2_Int* endpos_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventUserMove* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventUserFight</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventUserFight : public ::google::protobuf::Message {
 public:
  TRobFieldEventUserFight();
  virtual ~TRobFieldEventUserFight();

  TRobFieldEventUserFight(const TRobFieldEventUserFight& from);

  inline TRobFieldEventUserFight& operator=(const TRobFieldEventUserFight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventUserFight& default_instance();

  void Swap(TRobFieldEventUserFight* other);

  // implements Message ----------------------------------------------

  TRobFieldEventUserFight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventUserFight& from);
  void MergeFrom(const TRobFieldEventUserFight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 AtkEntityId = 1;
  inline bool has_atkentityid() const;
  inline void clear_atkentityid();
  static const int kAtkEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserFight</name>
  	<Function>
  		<name>atkentityid</name>
  		<replaceName>AtkEntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkentityid</name>
  		<replaceName>AtkEntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkentityid</name>
  		<replaceName>AtkEntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 atkentityid() const;
  inline void set_atkentityid(::google::protobuf::uint64 value);

  // optional uint32 AtkPostHp = 2;
  inline bool has_atkposthp() const;
  inline void clear_atkposthp();
  static const int kAtkPostHpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserFight</name>
  	<Function>
  		<name>atkposthp</name>
  		<replaceName>AtkPostHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkposthp</name>
  		<replaceName>AtkPostHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkposthp</name>
  		<replaceName>AtkPostHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 atkposthp() const;
  inline void set_atkposthp(::google::protobuf::uint32 value);

  // optional uint64 DefEntityId = 3;
  inline bool has_defentityid() const;
  inline void clear_defentityid();
  static const int kDefEntityIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserFight</name>
  	<Function>
  		<name>defentityid</name>
  		<replaceName>DefEntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defentityid</name>
  		<replaceName>DefEntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defentityid</name>
  		<replaceName>DefEntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 defentityid() const;
  inline void set_defentityid(::google::protobuf::uint64 value);

  // optional uint32 DefPostHp = 4;
  inline bool has_defposthp() const;
  inline void clear_defposthp();
  static const int kDefPostHpFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserFight</name>
  	<Function>
  		<name>defposthp</name>
  		<replaceName>DefPostHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defposthp</name>
  		<replaceName>DefPostHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defposthp</name>
  		<replaceName>DefPostHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 defposthp() const;
  inline void set_defposthp(::google::protobuf::uint32 value);

  // optional bool IsAtkWin = 5;
  inline bool has_isatkwin() const;
  inline void clear_isatkwin();
  static const int kIsAtkWinFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserFight</name>
  	<Function>
  		<name>isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isatkwin() const;
  inline void set_isatkwin(bool value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventUserFight)
 private:
  inline void set_has_atkentityid();
  inline void clear_has_atkentityid();
  inline void set_has_atkposthp();
  inline void clear_has_atkposthp();
  inline void set_has_defentityid();
  inline void clear_has_defentityid();
  inline void set_has_defposthp();
  inline void clear_has_defposthp();
  inline void set_has_isatkwin();
  inline void clear_has_isatkwin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 atkentityid_;
  ::google::protobuf::uint64 defentityid_;
  ::google::protobuf::uint32 atkposthp_;
  ::google::protobuf::uint32 defposthp_;
  bool isatkwin_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventUserFight* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventUserTouch</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventUserTouch : public ::google::protobuf::Message {
 public:
  TRobFieldEventUserTouch();
  virtual ~TRobFieldEventUserTouch();

  TRobFieldEventUserTouch(const TRobFieldEventUserTouch& from);

  inline TRobFieldEventUserTouch& operator=(const TRobFieldEventUserTouch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventUserTouch& default_instance();

  void Swap(TRobFieldEventUserTouch* other);

  // implements Message ----------------------------------------------

  TRobFieldEventUserTouch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventUserTouch& from);
  void MergeFrom(const TRobFieldEventUserTouch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 UserEntityId = 1;
  inline bool has_userentityid() const;
  inline void clear_userentityid();
  static const int kUserEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserTouch</name>
  	<Function>
  		<name>userentityid</name>
  		<replaceName>UserEntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userentityid</name>
  		<replaceName>UserEntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userentityid</name>
  		<replaceName>UserEntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 userentityid() const;
  inline void set_userentityid(::google::protobuf::uint64 value);

  // optional uint32 UserPostHp = 2;
  inline bool has_userposthp() const;
  inline void clear_userposthp();
  static const int kUserPostHpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserTouch</name>
  	<Function>
  		<name>userposthp</name>
  		<replaceName>UserPostHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userposthp</name>
  		<replaceName>UserPostHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userposthp</name>
  		<replaceName>UserPostHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 userposthp() const;
  inline void set_userposthp(::google::protobuf::uint32 value);

  // optional uint64 BuildingEntityId = 3;
  inline bool has_buildingentityid() const;
  inline void clear_buildingentityid();
  static const int kBuildingEntityIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserTouch</name>
  	<Function>
  		<name>buildingentityid</name>
  		<replaceName>BuildingEntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingentityid</name>
  		<replaceName>BuildingEntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingentityid</name>
  		<replaceName>BuildingEntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 buildingentityid() const;
  inline void set_buildingentityid(::google::protobuf::uint64 value);

  // optional uint32 BuildingPostHp = 4;
  inline bool has_buildingposthp() const;
  inline void clear_buildingposthp();
  static const int kBuildingPostHpFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserTouch</name>
  	<Function>
  		<name>buildingposthp</name>
  		<replaceName>BuildingPostHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buildingposthp</name>
  		<replaceName>BuildingPostHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildingposthp</name>
  		<replaceName>BuildingPostHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buildingposthp() const;
  inline void set_buildingposthp(::google::protobuf::uint32 value);

  // optional bool IsDestroy = 5;
  inline bool has_isdestroy() const;
  inline void clear_isdestroy();
  static const int kIsDestroyFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserTouch</name>
  	<Function>
  		<name>isdestroy</name>
  		<replaceName>IsDestroy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isdestroy</name>
  		<replaceName>IsDestroy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isdestroy</name>
  		<replaceName>IsDestroy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isdestroy() const;
  inline void set_isdestroy(bool value);

  // optional uint32 DeltaHp = 6;
  inline bool has_deltahp() const;
  inline void clear_deltahp();
  static const int kDeltaHpFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserTouch</name>
  	<Function>
  		<name>deltahp</name>
  		<replaceName>DeltaHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deltahp</name>
  		<replaceName>DeltaHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deltahp</name>
  		<replaceName>DeltaHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 deltahp() const;
  inline void set_deltahp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventUserTouch)
 private:
  inline void set_has_userentityid();
  inline void clear_has_userentityid();
  inline void set_has_userposthp();
  inline void clear_has_userposthp();
  inline void set_has_buildingentityid();
  inline void clear_has_buildingentityid();
  inline void set_has_buildingposthp();
  inline void clear_has_buildingposthp();
  inline void set_has_isdestroy();
  inline void clear_has_isdestroy();
  inline void set_has_deltahp();
  inline void clear_has_deltahp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 userentityid_;
  ::google::protobuf::uint64 buildingentityid_;
  ::google::protobuf::uint32 userposthp_;
  ::google::protobuf::uint32 buildingposthp_;
  bool isdestroy_;
  ::google::protobuf::uint32 deltahp_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventUserTouch* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventUserRevive</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventUserRevive : public ::google::protobuf::Message {
 public:
  TRobFieldEventUserRevive();
  virtual ~TRobFieldEventUserRevive();

  TRobFieldEventUserRevive(const TRobFieldEventUserRevive& from);

  inline TRobFieldEventUserRevive& operator=(const TRobFieldEventUserRevive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventUserRevive& default_instance();

  void Swap(TRobFieldEventUserRevive* other);

  // implements Message ----------------------------------------------

  TRobFieldEventUserRevive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventUserRevive& from);
  void MergeFrom(const TRobFieldEventUserRevive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserRevive</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional .pb.PbVector2_Int RevivePos = 2;
  inline bool has_revivepos() const;
  inline void clear_revivepos();
  static const int kRevivePosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserRevive</name>
  	<Function>
  		<name>revivepos</name>
  		<replaceName>RevivePos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_revivepos</name>
  		<replaceName>RevivePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_revivepos</name>
  		<replaceName>RevivePos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_revivepos</name>
  		<replaceName>RevivePos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& revivepos() const;
  inline ::pb::PbVector2_Int* mutable_revivepos();
  inline ::pb::PbVector2_Int* release_revivepos();
  inline void set_allocated_revivepos(::pb::PbVector2_Int* revivepos);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventUserRevive)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_revivepos();
  inline void clear_has_revivepos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  ::pb::PbVector2_Int* revivepos_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventUserRevive* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventUserKillNum</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventUserKillNum : public ::google::protobuf::Message {
 public:
  TRobFieldEventUserKillNum();
  virtual ~TRobFieldEventUserKillNum();

  TRobFieldEventUserKillNum(const TRobFieldEventUserKillNum& from);

  inline TRobFieldEventUserKillNum& operator=(const TRobFieldEventUserKillNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventUserKillNum& default_instance();

  void Swap(TRobFieldEventUserKillNum* other);

  // implements Message ----------------------------------------------

  TRobFieldEventUserKillNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventUserKillNum& from);
  void MergeFrom(const TRobFieldEventUserKillNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserKillNum</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional uint32 KillNum = 2;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserKillNum</name>
  	<Function>
  		<name>killnum</name>
  		<replaceName>KillNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_killnum</name>
  		<replaceName>KillNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_killnum</name>
  		<replaceName>KillNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventUserKillNum)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_killnum();
  inline void clear_has_killnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint32 killnum_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventUserKillNum* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventUserHpChange</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventUserHpChange : public ::google::protobuf::Message {
 public:
  TRobFieldEventUserHpChange();
  virtual ~TRobFieldEventUserHpChange();

  TRobFieldEventUserHpChange(const TRobFieldEventUserHpChange& from);

  inline TRobFieldEventUserHpChange& operator=(const TRobFieldEventUserHpChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventUserHpChange& default_instance();

  void Swap(TRobFieldEventUserHpChange* other);

  // implements Message ----------------------------------------------

  TRobFieldEventUserHpChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventUserHpChange& from);
  void MergeFrom(const TRobFieldEventUserHpChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserHpChange</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional uint32 CurHp = 2;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventUserHpChange</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curhp() const;
  inline void set_curhp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventUserHpChange)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_curhp();
  inline void clear_has_curhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint32 curhp_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventUserHpChange* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventArmyGoalChange</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventArmyGoalChange : public ::google::protobuf::Message {
 public:
  TRobFieldEventArmyGoalChange();
  virtual ~TRobFieldEventArmyGoalChange();

  TRobFieldEventArmyGoalChange(const TRobFieldEventArmyGoalChange& from);

  inline TRobFieldEventArmyGoalChange& operator=(const TRobFieldEventArmyGoalChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventArmyGoalChange& default_instance();

  void Swap(TRobFieldEventArmyGoalChange* other);

  // implements Message ----------------------------------------------

  TRobFieldEventArmyGoalChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventArmyGoalChange& from);
  void MergeFrom(const TRobFieldEventArmyGoalChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 ArmyId = 1;
  inline bool has_armyid() const;
  inline void clear_armyid();
  static const int kArmyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventArmyGoalChange</name>
  	<Function>
  		<name>armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 armyid() const;
  inline void set_armyid(::google::protobuf::uint64 value);

  // optional uint32 Goal = 2;
  inline bool has_goal() const;
  inline void clear_goal();
  static const int kGoalFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventArmyGoalChange</name>
  	<Function>
  		<name>goal</name>
  		<replaceName>Goal</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goal</name>
  		<replaceName>Goal</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goal</name>
  		<replaceName>Goal</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goal() const;
  inline void set_goal(::google::protobuf::uint32 value);

  // optional uint64 Changer = 3;
  inline bool has_changer() const;
  inline void clear_changer();
  static const int kChangerFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventArmyGoalChange</name>
  	<Function>
  		<name>changer</name>
  		<replaceName>Changer</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_changer</name>
  		<replaceName>Changer</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_changer</name>
  		<replaceName>Changer</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 changer() const;
  inline void set_changer(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventArmyGoalChange)
 private:
  inline void set_has_armyid();
  inline void clear_has_armyid();
  inline void set_has_goal();
  inline void clear_has_goal();
  inline void set_has_changer();
  inline void clear_has_changer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 armyid_;
  ::google::protobuf::uint64 changer_;
  ::google::protobuf::uint32 goal_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventArmyGoalChange* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventBuildingOwnerChange</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventBuildingOwnerChange : public ::google::protobuf::Message {
 public:
  TRobFieldEventBuildingOwnerChange();
  virtual ~TRobFieldEventBuildingOwnerChange();

  TRobFieldEventBuildingOwnerChange(const TRobFieldEventBuildingOwnerChange& from);

  inline TRobFieldEventBuildingOwnerChange& operator=(const TRobFieldEventBuildingOwnerChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventBuildingOwnerChange& default_instance();

  void Swap(TRobFieldEventBuildingOwnerChange* other);

  // implements Message ----------------------------------------------

  TRobFieldEventBuildingOwnerChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventBuildingOwnerChange& from);
  void MergeFrom(const TRobFieldEventBuildingOwnerChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventBuildingOwnerChange</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional uint64 ArmyId = 2;
  inline bool has_armyid() const;
  inline void clear_armyid();
  static const int kArmyIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventBuildingOwnerChange</name>
  	<Function>
  		<name>armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armyid</name>
  		<replaceName>ArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 armyid() const;
  inline void set_armyid(::google::protobuf::uint64 value);

  // optional uint64 OwnerTime = 3;
  inline bool has_ownertime() const;
  inline void clear_ownertime();
  static const int kOwnerTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventBuildingOwnerChange</name>
  	<Function>
  		<name>ownertime</name>
  		<replaceName>OwnerTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ownertime</name>
  		<replaceName>OwnerTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ownertime</name>
  		<replaceName>OwnerTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 ownertime() const;
  inline void set_ownertime(::google::protobuf::uint64 value);

  // optional uint64 InitArmyId = 4;
  inline bool has_initarmyid() const;
  inline void clear_initarmyid();
  static const int kInitArmyIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventBuildingOwnerChange</name>
  	<Function>
  		<name>initarmyid</name>
  		<replaceName>InitArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_initarmyid</name>
  		<replaceName>InitArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_initarmyid</name>
  		<replaceName>InitArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 initarmyid() const;
  inline void set_initarmyid(::google::protobuf::uint64 value);

  // optional bool OwnerChanged = 5;
  inline bool has_ownerchanged() const;
  inline void clear_ownerchanged();
  static const int kOwnerChangedFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventBuildingOwnerChange</name>
  	<Function>
  		<name>ownerchanged</name>
  		<replaceName>OwnerChanged</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ownerchanged</name>
  		<replaceName>OwnerChanged</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ownerchanged</name>
  		<replaceName>OwnerChanged</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ownerchanged() const;
  inline void set_ownerchanged(bool value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventBuildingOwnerChange)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_armyid();
  inline void clear_has_armyid();
  inline void set_has_ownertime();
  inline void clear_has_ownertime();
  inline void set_has_initarmyid();
  inline void clear_has_initarmyid();
  inline void set_has_ownerchanged();
  inline void clear_has_ownerchanged();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::uint64 armyid_;
  ::google::protobuf::uint64 ownertime_;
  ::google::protobuf::uint64 initarmyid_;
  bool ownerchanged_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventBuildingOwnerChange* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventBuildingProgressChange</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventBuildingProgressChange : public ::google::protobuf::Message {
 public:
  TRobFieldEventBuildingProgressChange();
  virtual ~TRobFieldEventBuildingProgressChange();

  TRobFieldEventBuildingProgressChange(const TRobFieldEventBuildingProgressChange& from);

  inline TRobFieldEventBuildingProgressChange& operator=(const TRobFieldEventBuildingProgressChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventBuildingProgressChange& default_instance();

  void Swap(TRobFieldEventBuildingProgressChange* other);

  // implements Message ----------------------------------------------

  TRobFieldEventBuildingProgressChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventBuildingProgressChange& from);
  void MergeFrom(const TRobFieldEventBuildingProgressChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 EntityId = 1;
  inline bool has_entityid() const;
  inline void clear_entityid();
  static const int kEntityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventBuildingProgressChange</name>
  	<Function>
  		<name>entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_entityid</name>
  		<replaceName>EntityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 entityid() const;
  inline void set_entityid(::google::protobuf::uint64 value);

  // optional uint32 CurHp = 2;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventBuildingProgressChange</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curhp() const;
  inline void set_curhp(::google::protobuf::uint32 value);

  // repeated .pb.TRobFieldBuildingAttacker Attackers = 3;
  inline int attackers_size() const;
  inline void clear_attackers();
  static const int kAttackersFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventBuildingProgressChange</name>
  	<Function>
  		<name>attackers</name>
  		<replaceName>Attackers</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attackers</name>
  		<replaceName>Attackers</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attackers</name>
  		<replaceName>Attackers</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attackers</name>
  		<replaceName>Attackers</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attackers_size</name>
  		<replaceName>Attackers</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldBuildingAttacker& attackers(int index) const;
  inline ::pb::TRobFieldBuildingAttacker* mutable_attackers(int index);
  inline ::pb::TRobFieldBuildingAttacker* add_attackers();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuildingAttacker >&
      attackers() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuildingAttacker >*
      mutable_attackers();

  // optional .pb.TRobFieldBuildingDefender Defender = 4;
  inline bool has_defender() const;
  inline void clear_defender();
  static const int kDefenderFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventBuildingProgressChange</name>
  	<Function>
  		<name>defender</name>
  		<replaceName>Defender</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defender</name>
  		<replaceName>Defender</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defender</name>
  		<replaceName>Defender</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defender</name>
  		<replaceName>Defender</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldBuildingDefender& defender() const;
  inline ::pb::TRobFieldBuildingDefender* mutable_defender();
  inline ::pb::TRobFieldBuildingDefender* release_defender();
  inline void set_allocated_defender(::pb::TRobFieldBuildingDefender* defender);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventBuildingProgressChange)
 private:
  inline void set_has_entityid();
  inline void clear_has_entityid();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_defender();
  inline void clear_has_defender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 entityid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuildingAttacker > attackers_;
  ::pb::TRobFieldBuildingDefender* defender_;
  ::google::protobuf::uint32 curhp_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventBuildingProgressChange* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventGameOver</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventGameOver : public ::google::protobuf::Message {
 public:
  TRobFieldEventGameOver();
  virtual ~TRobFieldEventGameOver();

  TRobFieldEventGameOver(const TRobFieldEventGameOver& from);

  inline TRobFieldEventGameOver& operator=(const TRobFieldEventGameOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventGameOver& default_instance();

  void Swap(TRobFieldEventGameOver* other);

  // implements Message ----------------------------------------------

  TRobFieldEventGameOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventGameOver& from);
  void MergeFrom(const TRobFieldEventGameOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 WinArmyId = 1;
  inline bool has_winarmyid() const;
  inline void clear_winarmyid();
  static const int kWinArmyIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventGameOver</name>
  	<Function>
  		<name>winarmyid</name>
  		<replaceName>WinArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winarmyid</name>
  		<replaceName>WinArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winarmyid</name>
  		<replaceName>WinArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 winarmyid() const;
  inline void set_winarmyid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventGameOver)
 private:
  inline void set_has_winarmyid();
  inline void clear_has_winarmyid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 winarmyid_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventGameOver* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldEventWrapper</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldEventWrapper : public ::google::protobuf::Message {
 public:
  TRobFieldEventWrapper();
  virtual ~TRobFieldEventWrapper();

  TRobFieldEventWrapper(const TRobFieldEventWrapper& from);

  inline TRobFieldEventWrapper& operator=(const TRobFieldEventWrapper& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldEventWrapper& default_instance();

  void Swap(TRobFieldEventWrapper* other);

  // implements Message ----------------------------------------------

  TRobFieldEventWrapper* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldEventWrapper& from);
  void MergeFrom(const TRobFieldEventWrapper& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 OffsetMs = 1;
  inline bool has_offsetms() const;
  inline void clear_offsetms();
  static const int kOffsetMsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventWrapper</name>
  	<Function>
  		<name>offsetms</name>
  		<replaceName>OffsetMs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offsetms</name>
  		<replaceName>OffsetMs</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offsetms</name>
  		<replaceName>OffsetMs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offsetms() const;
  inline void set_offsetms(::google::protobuf::uint32 value);

  // optional .pb.ERobFieldEventType EventType = 2;
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventWrapper</name>
  	<Function>
  		<name>eventtype</name>
  		<replaceName>EventType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventtype</name>
  		<replaceName>EventType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventtype</name>
  		<replaceName>EventType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ERobFieldEventType eventtype() const;
  inline void set_eventtype(::pb::ERobFieldEventType value);

  // optional bytes EventData = 3;
  inline bool has_eventdata() const;
  inline void clear_eventdata();
  static const int kEventDataFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldEventWrapper</name>
  	<Function>
  		<name>eventdata</name>
  		<replaceName>EventData</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eventdata</name>
  		<replaceName>EventData</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eventdata</name>
  		<replaceName>EventData</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& eventdata() const;
  inline void set_eventdata(const ::std::string& value);
  inline void set_eventdata(const char* value);
  inline void set_eventdata(const void* value, size_t size);
  inline ::std::string* mutable_eventdata();
  inline ::std::string* release_eventdata();
  inline void set_allocated_eventdata(::std::string* eventdata);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldEventWrapper)
 private:
  inline void set_has_offsetms();
  inline void clear_has_offsetms();
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_eventdata();
  inline void clear_has_eventdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offsetms_;
  int eventtype_;
  ::std::string* eventdata_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldEventWrapper* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldWhole</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldWhole : public ::google::protobuf::Message {
 public:
  TRobFieldWhole();
  virtual ~TRobFieldWhole();

  TRobFieldWhole(const TRobFieldWhole& from);

  inline TRobFieldWhole& operator=(const TRobFieldWhole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldWhole& default_instance();

  void Swap(TRobFieldWhole* other);

  // implements Message ----------------------------------------------

  TRobFieldWhole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldWhole& from);
  void MergeFrom(const TRobFieldWhole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ERobType RobType = 1;
  inline bool has_robtype() const;
  inline void clear_robtype();
  static const int kRobTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldWhole</name>
  	<Function>
  		<name>robtype</name>
  		<replaceName>RobType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_robtype</name>
  		<replaceName>RobType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_robtype</name>
  		<replaceName>RobType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ERobType robtype() const;
  inline void set_robtype(::pb::ERobType value);

  // optional uint64 FieldId = 2;
  inline bool has_fieldid() const;
  inline void clear_fieldid();
  static const int kFieldIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldWhole</name>
  	<Function>
  		<name>fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldid</name>
  		<replaceName>FieldId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fieldid() const;
  inline void set_fieldid(::google::protobuf::uint64 value);

  // optional uint64 BegTime = 3;
  inline bool has_begtime() const;
  inline void clear_begtime();
  static const int kBegTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldWhole</name>
  	<Function>
  		<name>begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_begtime</name>
  		<replaceName>BegTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 begtime() const;
  inline void set_begtime(::google::protobuf::uint64 value);

  // repeated .pb.TRobFieldArmy Armys = 4;
  inline int armys_size() const;
  inline void clear_armys();
  static const int kArmysFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldWhole</name>
  	<Function>
  		<name>armys</name>
  		<replaceName>Armys</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armys</name>
  		<replaceName>Armys</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armys</name>
  		<replaceName>Armys</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armys</name>
  		<replaceName>Armys</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armys_size</name>
  		<replaceName>Armys</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldArmy& armys(int index) const;
  inline ::pb::TRobFieldArmy* mutable_armys(int index);
  inline ::pb::TRobFieldArmy* add_armys();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldArmy >&
      armys() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldArmy >*
      mutable_armys();

  // repeated .pb.TRobFieldUser Users = 5;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldWhole</name>
  	<Function>
  		<name>users</name>
  		<replaceName>Users</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_users</name>
  		<replaceName>Users</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_users</name>
  		<replaceName>Users</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_users</name>
  		<replaceName>Users</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>users_size</name>
  		<replaceName>Users</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldUser& users(int index) const;
  inline ::pb::TRobFieldUser* mutable_users(int index);
  inline ::pb::TRobFieldUser* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUser >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUser >*
      mutable_users();

  // optional .pb.TRobFieldPriv Priv = 6;
  inline bool has_priv() const;
  inline void clear_priv();
  static const int kPrivFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldWhole</name>
  	<Function>
  		<name>priv</name>
  		<replaceName>Priv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_priv</name>
  		<replaceName>Priv</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_priv</name>
  		<replaceName>Priv</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_priv</name>
  		<replaceName>Priv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldPriv& priv() const;
  inline ::pb::TRobFieldPriv* mutable_priv();
  inline ::pb::TRobFieldPriv* release_priv();
  inline void set_allocated_priv(::pb::TRobFieldPriv* priv);

  // repeated .pb.TRobFieldBuilding Buildings = 7;
  inline int buildings_size() const;
  inline void clear_buildings();
  static const int kBuildingsFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldWhole</name>
  	<Function>
  		<name>buildings</name>
  		<replaceName>Buildings</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_buildings</name>
  		<replaceName>Buildings</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_buildings</name>
  		<replaceName>Buildings</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buildings</name>
  		<replaceName>Buildings</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>buildings_size</name>
  		<replaceName>Buildings</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldBuilding& buildings(int index) const;
  inline ::pb::TRobFieldBuilding* mutable_buildings(int index);
  inline ::pb::TRobFieldBuilding* add_buildings();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuilding >&
      buildings() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuilding >*
      mutable_buildings();

  // @@protoc_insertion_point(class_scope:pb.TRobFieldWhole)
 private:
  inline void set_has_robtype();
  inline void clear_has_robtype();
  inline void set_has_fieldid();
  inline void clear_has_fieldid();
  inline void set_has_begtime();
  inline void clear_has_begtime();
  inline void set_has_priv();
  inline void clear_has_priv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 fieldid_;
  ::google::protobuf::uint64 begtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldArmy > armys_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUser > users_;
  ::pb::TRobFieldPriv* priv_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuilding > buildings_;
  int robtype_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldWhole* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldDelta</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldDelta : public ::google::protobuf::Message {
 public:
  TRobFieldDelta();
  virtual ~TRobFieldDelta();

  TRobFieldDelta(const TRobFieldDelta& from);

  inline TRobFieldDelta& operator=(const TRobFieldDelta& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldDelta& default_instance();

  void Swap(TRobFieldDelta* other);

  // implements Message ----------------------------------------------

  TRobFieldDelta* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldDelta& from);
  void MergeFrom(const TRobFieldDelta& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ERobType RobType = 1;
  inline bool has_robtype() const;
  inline void clear_robtype();
  static const int kRobTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldDelta</name>
  	<Function>
  		<name>robtype</name>
  		<replaceName>RobType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_robtype</name>
  		<replaceName>RobType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_robtype</name>
  		<replaceName>RobType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ERobType robtype() const;
  inline void set_robtype(::pb::ERobType value);

  // repeated .pb.TRobFieldEventWrapper Events = 2;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldDelta</name>
  	<Function>
  		<name>events</name>
  		<replaceName>Events</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_events</name>
  		<replaceName>Events</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_events</name>
  		<replaceName>Events</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_events</name>
  		<replaceName>Events</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>events_size</name>
  		<replaceName>Events</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldEventWrapper& events(int index) const;
  inline ::pb::TRobFieldEventWrapper* mutable_events(int index);
  inline ::pb::TRobFieldEventWrapper* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldEventWrapper >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldEventWrapper >*
      mutable_events();

  // @@protoc_insertion_point(class_scope:pb.TRobFieldDelta)
 private:
  inline void set_has_robtype();
  inline void clear_has_robtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldEventWrapper > events_;
  int robtype_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldDelta* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TRobFieldSettle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/RobField.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TRobFieldSettle : public ::google::protobuf::Message {
 public:
  TRobFieldSettle();
  virtual ~TRobFieldSettle();

  TRobFieldSettle(const TRobFieldSettle& from);

  inline TRobFieldSettle& operator=(const TRobFieldSettle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TRobFieldSettle& default_instance();

  void Swap(TRobFieldSettle* other);

  // implements Message ----------------------------------------------

  TRobFieldSettle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TRobFieldSettle& from);
  void MergeFrom(const TRobFieldSettle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.ERobType RobType = 1;
  inline bool has_robtype() const;
  inline void clear_robtype();
  static const int kRobTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldSettle</name>
  	<Function>
  		<name>robtype</name>
  		<replaceName>RobType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_robtype</name>
  		<replaceName>RobType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_robtype</name>
  		<replaceName>RobType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ERobType robtype() const;
  inline void set_robtype(::pb::ERobType value);

  // optional uint64 WinArmyId = 2;
  inline bool has_winarmyid() const;
  inline void clear_winarmyid();
  static const int kWinArmyIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldSettle</name>
  	<Function>
  		<name>winarmyid</name>
  		<replaceName>WinArmyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_winarmyid</name>
  		<replaceName>WinArmyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_winarmyid</name>
  		<replaceName>WinArmyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 winarmyid() const;
  inline void set_winarmyid(::google::protobuf::uint64 value);

  // repeated .pb.TRobFieldArmy Armys = 3;
  inline int armys_size() const;
  inline void clear_armys();
  static const int kArmysFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldSettle</name>
  	<Function>
  		<name>armys</name>
  		<replaceName>Armys</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_armys</name>
  		<replaceName>Armys</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_armys</name>
  		<replaceName>Armys</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_armys</name>
  		<replaceName>Armys</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>armys_size</name>
  		<replaceName>Armys</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldArmy& armys(int index) const;
  inline ::pb::TRobFieldArmy* mutable_armys(int index);
  inline ::pb::TRobFieldArmy* add_armys();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldArmy >&
      armys() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldArmy >*
      mutable_armys();

  // optional .pb.TRobFieldPriv Priv = 4;
  inline bool has_priv() const;
  inline void clear_priv();
  static const int kPrivFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TRobFieldSettle</name>
  	<Function>
  		<name>priv</name>
  		<replaceName>Priv</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_priv</name>
  		<replaceName>Priv</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_priv</name>
  		<replaceName>Priv</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_priv</name>
  		<replaceName>Priv</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TRobFieldPriv& priv() const;
  inline ::pb::TRobFieldPriv* mutable_priv();
  inline ::pb::TRobFieldPriv* release_priv();
  inline void set_allocated_priv(::pb::TRobFieldPriv* priv);

  // @@protoc_insertion_point(class_scope:pb.TRobFieldSettle)
 private:
  inline void set_has_robtype();
  inline void clear_has_robtype();
  inline void set_has_winarmyid();
  inline void clear_has_winarmyid();
  inline void set_has_priv();
  inline void clear_has_priv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 winarmyid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldArmy > armys_;
  ::pb::TRobFieldPriv* priv_;
  int robtype_;
  friend void  protobuf_AddDesc_net_2fRobField_2eproto();
  friend void protobuf_AssignDesc_net_2fRobField_2eproto();
  friend void protobuf_ShutdownFile_net_2fRobField_2eproto();

  void InitAsDefaultInstance();
  static TRobFieldSettle* default_instance_;
};
// ===================================================================


// ===================================================================

// TRobFieldUser

// optional uint64 EntityId = 1;
inline bool TRobFieldUser::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldUser::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldUser::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldUser::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldUser::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUser.EntityId)
  return entityid_;
}
inline void TRobFieldUser::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldUser.EntityId)
}

// optional .pb.TUserSimpleInfo UserSimpleInfo = 2;
inline bool TRobFieldUser::has_usersimpleinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldUser::set_has_usersimpleinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldUser::clear_has_usersimpleinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldUser::clear_usersimpleinfo() {
  if (usersimpleinfo_ != NULL) usersimpleinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_usersimpleinfo();
}
inline const ::pb::TUserSimpleInfo& TRobFieldUser::usersimpleinfo() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUser.UserSimpleInfo)
  return usersimpleinfo_ != NULL ? *usersimpleinfo_ : *default_instance_->usersimpleinfo_;
}
inline ::pb::TUserSimpleInfo* TRobFieldUser::mutable_usersimpleinfo() {
  set_has_usersimpleinfo();
  if (usersimpleinfo_ == NULL) usersimpleinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldUser.UserSimpleInfo)
  return usersimpleinfo_;
}
inline ::pb::TUserSimpleInfo* TRobFieldUser::release_usersimpleinfo() {
  clear_has_usersimpleinfo();
  ::pb::TUserSimpleInfo* temp = usersimpleinfo_;
  usersimpleinfo_ = NULL;
  return temp;
}
inline void TRobFieldUser::set_allocated_usersimpleinfo(::pb::TUserSimpleInfo* usersimpleinfo) {
  delete usersimpleinfo_;
  usersimpleinfo_ = usersimpleinfo;
  if (usersimpleinfo) {
    set_has_usersimpleinfo();
  } else {
    clear_has_usersimpleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldUser.UserSimpleInfo)
}

// optional uint64 ArmyId = 3;
inline bool TRobFieldUser::has_armyid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRobFieldUser::set_has_armyid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRobFieldUser::clear_has_armyid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRobFieldUser::clear_armyid() {
  armyid_ = GOOGLE_ULONGLONG(0);
  clear_has_armyid();
}
inline ::google::protobuf::uint64 TRobFieldUser::armyid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUser.ArmyId)
  return armyid_;
}
inline void TRobFieldUser::set_armyid(::google::protobuf::uint64 value) {
  set_has_armyid();
  armyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldUser.ArmyId)
}

// optional uint32 MaxHp = 4;
inline bool TRobFieldUser::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRobFieldUser::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRobFieldUser::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRobFieldUser::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 TRobFieldUser::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUser.MaxHp)
  return maxhp_;
}
inline void TRobFieldUser::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldUser.MaxHp)
}

// optional uint32 CurHp = 5;
inline bool TRobFieldUser::has_curhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TRobFieldUser::set_has_curhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TRobFieldUser::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TRobFieldUser::clear_curhp() {
  curhp_ = 0u;
  clear_has_curhp();
}
inline ::google::protobuf::uint32 TRobFieldUser::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUser.CurHp)
  return curhp_;
}
inline void TRobFieldUser::set_curhp(::google::protobuf::uint32 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldUser.CurHp)
}

// optional .pb.ERobFieldUserState State = 6;
inline bool TRobFieldUser::has_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TRobFieldUser::set_has_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TRobFieldUser::clear_has_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TRobFieldUser::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::pb::ERobFieldUserState TRobFieldUser::state() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUser.State)
  return static_cast< ::pb::ERobFieldUserState >(state_);
}
inline void TRobFieldUser::set_state(::pb::ERobFieldUserState value) {
  assert(::pb::ERobFieldUserState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldUser.State)
}

// optional uint32 Speed = 7;
inline bool TRobFieldUser::has_speed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TRobFieldUser::set_has_speed() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TRobFieldUser::clear_has_speed() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TRobFieldUser::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 TRobFieldUser::speed() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUser.Speed)
  return speed_;
}
inline void TRobFieldUser::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldUser.Speed)
}

// optional .pb.PbVector2_Int CurPos = 8;
inline bool TRobFieldUser::has_curpos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TRobFieldUser::set_has_curpos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TRobFieldUser::clear_has_curpos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TRobFieldUser::clear_curpos() {
  if (curpos_ != NULL) curpos_->::pb::PbVector2_Int::Clear();
  clear_has_curpos();
}
inline const ::pb::PbVector2_Int& TRobFieldUser::curpos() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUser.CurPos)
  return curpos_ != NULL ? *curpos_ : *default_instance_->curpos_;
}
inline ::pb::PbVector2_Int* TRobFieldUser::mutable_curpos() {
  set_has_curpos();
  if (curpos_ == NULL) curpos_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldUser.CurPos)
  return curpos_;
}
inline ::pb::PbVector2_Int* TRobFieldUser::release_curpos() {
  clear_has_curpos();
  ::pb::PbVector2_Int* temp = curpos_;
  curpos_ = NULL;
  return temp;
}
inline void TRobFieldUser::set_allocated_curpos(::pb::PbVector2_Int* curpos) {
  delete curpos_;
  curpos_ = curpos;
  if (curpos) {
    set_has_curpos();
  } else {
    clear_has_curpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldUser.CurPos)
}

// optional .pb.PbVector2_Int EndPos = 9;
inline bool TRobFieldUser::has_endpos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TRobFieldUser::set_has_endpos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TRobFieldUser::clear_has_endpos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TRobFieldUser::clear_endpos() {
  if (endpos_ != NULL) endpos_->::pb::PbVector2_Int::Clear();
  clear_has_endpos();
}
inline const ::pb::PbVector2_Int& TRobFieldUser::endpos() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUser.EndPos)
  return endpos_ != NULL ? *endpos_ : *default_instance_->endpos_;
}
inline ::pb::PbVector2_Int* TRobFieldUser::mutable_endpos() {
  set_has_endpos();
  if (endpos_ == NULL) endpos_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldUser.EndPos)
  return endpos_;
}
inline ::pb::PbVector2_Int* TRobFieldUser::release_endpos() {
  clear_has_endpos();
  ::pb::PbVector2_Int* temp = endpos_;
  endpos_ = NULL;
  return temp;
}
inline void TRobFieldUser::set_allocated_endpos(::pb::PbVector2_Int* endpos) {
  delete endpos_;
  endpos_ = endpos;
  if (endpos) {
    set_has_endpos();
  } else {
    clear_has_endpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldUser.EndPos)
}

// -------------------------------------------------------------------

// TRobFieldArmy

// optional uint64 ArmyId = 1;
inline bool TRobFieldArmy::has_armyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldArmy::set_has_armyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldArmy::clear_has_armyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldArmy::clear_armyid() {
  armyid_ = GOOGLE_ULONGLONG(0);
  clear_has_armyid();
}
inline ::google::protobuf::uint64 TRobFieldArmy::armyid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldArmy.ArmyId)
  return armyid_;
}
inline void TRobFieldArmy::set_armyid(::google::protobuf::uint64 value) {
  set_has_armyid();
  armyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldArmy.ArmyId)
}

// optional string Name = 2;
inline bool TRobFieldArmy::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldArmy::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldArmy::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldArmy::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TRobFieldArmy::name() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldArmy.Name)
  return *name_;
}
inline void TRobFieldArmy::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TRobFieldArmy.Name)
}
inline void TRobFieldArmy::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TRobFieldArmy.Name)
}
inline void TRobFieldArmy::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TRobFieldArmy.Name)
}
inline ::std::string* TRobFieldArmy::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldArmy.Name)
  return name_;
}
inline ::std::string* TRobFieldArmy::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TRobFieldArmy::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldArmy.Name)
}

// optional bytes Extra = 3;
inline bool TRobFieldArmy::has_extra() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRobFieldArmy::set_has_extra() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRobFieldArmy::clear_has_extra() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRobFieldArmy::clear_extra() {
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_->clear();
  }
  clear_has_extra();
}
inline const ::std::string& TRobFieldArmy::extra() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldArmy.Extra)
  return *extra_;
}
inline void TRobFieldArmy::set_extra(const ::std::string& value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TRobFieldArmy.Extra)
}
inline void TRobFieldArmy::set_extra(const char* value) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  extra_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TRobFieldArmy.Extra)
}
inline void TRobFieldArmy::set_extra(const void* value, size_t size) {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  extra_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TRobFieldArmy.Extra)
}
inline ::std::string* TRobFieldArmy::mutable_extra() {
  set_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    extra_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldArmy.Extra)
  return extra_;
}
inline ::std::string* TRobFieldArmy::release_extra() {
  clear_has_extra();
  if (extra_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = extra_;
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TRobFieldArmy::set_allocated_extra(::std::string* extra) {
  if (extra_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete extra_;
  }
  if (extra) {
    set_has_extra();
    extra_ = extra;
  } else {
    clear_has_extra();
    extra_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldArmy.Extra)
}

// optional uint32 Goal = 4;
inline bool TRobFieldArmy::has_goal() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRobFieldArmy::set_has_goal() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRobFieldArmy::clear_has_goal() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRobFieldArmy::clear_goal() {
  goal_ = 0u;
  clear_has_goal();
}
inline ::google::protobuf::uint32 TRobFieldArmy::goal() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldArmy.Goal)
  return goal_;
}
inline void TRobFieldArmy::set_goal(::google::protobuf::uint32 value) {
  set_has_goal();
  goal_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldArmy.Goal)
}

// repeated uint64 EntityIds = 5;
inline int TRobFieldArmy::entityids_size() const {
  return entityids_.size();
}
inline void TRobFieldArmy::clear_entityids() {
  entityids_.Clear();
}
inline ::google::protobuf::uint64 TRobFieldArmy::entityids(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldArmy.EntityIds)
  return entityids_.Get(index);
}
inline void TRobFieldArmy::set_entityids(int index, ::google::protobuf::uint64 value) {
  entityids_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TRobFieldArmy.EntityIds)
}
inline void TRobFieldArmy::add_entityids(::google::protobuf::uint64 value) {
  entityids_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TRobFieldArmy.EntityIds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TRobFieldArmy::entityids() const {
  // @@protoc_insertion_point(field_list:pb.TRobFieldArmy.EntityIds)
  return entityids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TRobFieldArmy::mutable_entityids() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRobFieldArmy.EntityIds)
  return &entityids_;
}

// -------------------------------------------------------------------

// TRobFieldUserCanTouchBuildingTime

// optional uint64 EntityId = 1;
inline bool TRobFieldUserCanTouchBuildingTime::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldUserCanTouchBuildingTime::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldUserCanTouchBuildingTime::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldUserCanTouchBuildingTime::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldUserCanTouchBuildingTime::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUserCanTouchBuildingTime.EntityId)
  return entityid_;
}
inline void TRobFieldUserCanTouchBuildingTime::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldUserCanTouchBuildingTime.EntityId)
}

// optional uint64 CanTouchMs = 2;
inline bool TRobFieldUserCanTouchBuildingTime::has_cantouchms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldUserCanTouchBuildingTime::set_has_cantouchms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldUserCanTouchBuildingTime::clear_has_cantouchms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldUserCanTouchBuildingTime::clear_cantouchms() {
  cantouchms_ = GOOGLE_ULONGLONG(0);
  clear_has_cantouchms();
}
inline ::google::protobuf::uint64 TRobFieldUserCanTouchBuildingTime::cantouchms() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUserCanTouchBuildingTime.CanTouchMs)
  return cantouchms_;
}
inline void TRobFieldUserCanTouchBuildingTime::set_cantouchms(::google::protobuf::uint64 value) {
  set_has_cantouchms();
  cantouchms_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldUserCanTouchBuildingTime.CanTouchMs)
}

// -------------------------------------------------------------------

// TRobFieldUserAutoTouchConfig

// optional uint64 EntityId = 1;
inline bool TRobFieldUserAutoTouchConfig::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldUserAutoTouchConfig::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldUserAutoTouchConfig::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldUserAutoTouchConfig::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldUserAutoTouchConfig::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUserAutoTouchConfig.EntityId)
  return entityid_;
}
inline void TRobFieldUserAutoTouchConfig::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldUserAutoTouchConfig.EntityId)
}

// optional bool IsAuto = 2;
inline bool TRobFieldUserAutoTouchConfig::has_isauto() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldUserAutoTouchConfig::set_has_isauto() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldUserAutoTouchConfig::clear_has_isauto() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldUserAutoTouchConfig::clear_isauto() {
  isauto_ = false;
  clear_has_isauto();
}
inline bool TRobFieldUserAutoTouchConfig::isauto() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldUserAutoTouchConfig.IsAuto)
  return isauto_;
}
inline void TRobFieldUserAutoTouchConfig::set_isauto(bool value) {
  set_has_isauto();
  isauto_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldUserAutoTouchConfig.IsAuto)
}

// -------------------------------------------------------------------

// TRobFieldPriv

// optional uint64 EntityId = 1;
inline bool TRobFieldPriv::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldPriv::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldPriv::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldPriv::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldPriv::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldPriv.EntityId)
  return entityid_;
}
inline void TRobFieldPriv::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldPriv.EntityId)
}

// optional uint64 CanReviveTimeMs = 2;
inline bool TRobFieldPriv::has_canrevivetimems() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldPriv::set_has_canrevivetimems() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldPriv::clear_has_canrevivetimems() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldPriv::clear_canrevivetimems() {
  canrevivetimems_ = GOOGLE_ULONGLONG(0);
  clear_has_canrevivetimems();
}
inline ::google::protobuf::uint64 TRobFieldPriv::canrevivetimems() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldPriv.CanReviveTimeMs)
  return canrevivetimems_;
}
inline void TRobFieldPriv::set_canrevivetimems(::google::protobuf::uint64 value) {
  set_has_canrevivetimems();
  canrevivetimems_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldPriv.CanReviveTimeMs)
}

// optional uint64 CanAtkUserTimeMs = 3;
inline bool TRobFieldPriv::has_canatkusertimems() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRobFieldPriv::set_has_canatkusertimems() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRobFieldPriv::clear_has_canatkusertimems() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRobFieldPriv::clear_canatkusertimems() {
  canatkusertimems_ = GOOGLE_ULONGLONG(0);
  clear_has_canatkusertimems();
}
inline ::google::protobuf::uint64 TRobFieldPriv::canatkusertimems() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldPriv.CanAtkUserTimeMs)
  return canatkusertimems_;
}
inline void TRobFieldPriv::set_canatkusertimems(::google::protobuf::uint64 value) {
  set_has_canatkusertimems();
  canatkusertimems_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldPriv.CanAtkUserTimeMs)
}

// repeated .pb.TRobFieldUserCanTouchBuildingTime CanTouchBuildingTimes = 4;
inline int TRobFieldPriv::cantouchbuildingtimes_size() const {
  return cantouchbuildingtimes_.size();
}
inline void TRobFieldPriv::clear_cantouchbuildingtimes() {
  cantouchbuildingtimes_.Clear();
}
inline const ::pb::TRobFieldUserCanTouchBuildingTime& TRobFieldPriv::cantouchbuildingtimes(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldPriv.CanTouchBuildingTimes)
  return cantouchbuildingtimes_.Get(index);
}
inline ::pb::TRobFieldUserCanTouchBuildingTime* TRobFieldPriv::mutable_cantouchbuildingtimes(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldPriv.CanTouchBuildingTimes)
  return cantouchbuildingtimes_.Mutable(index);
}
inline ::pb::TRobFieldUserCanTouchBuildingTime* TRobFieldPriv::add_cantouchbuildingtimes() {
  // @@protoc_insertion_point(field_add:pb.TRobFieldPriv.CanTouchBuildingTimes)
  return cantouchbuildingtimes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUserCanTouchBuildingTime >&
TRobFieldPriv::cantouchbuildingtimes() const {
  // @@protoc_insertion_point(field_list:pb.TRobFieldPriv.CanTouchBuildingTimes)
  return cantouchbuildingtimes_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUserCanTouchBuildingTime >*
TRobFieldPriv::mutable_cantouchbuildingtimes() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRobFieldPriv.CanTouchBuildingTimes)
  return &cantouchbuildingtimes_;
}

// repeated .pb.TRobFieldUserAutoTouchConfig AutoTouchConfigs = 5;
inline int TRobFieldPriv::autotouchconfigs_size() const {
  return autotouchconfigs_.size();
}
inline void TRobFieldPriv::clear_autotouchconfigs() {
  autotouchconfigs_.Clear();
}
inline const ::pb::TRobFieldUserAutoTouchConfig& TRobFieldPriv::autotouchconfigs(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldPriv.AutoTouchConfigs)
  return autotouchconfigs_.Get(index);
}
inline ::pb::TRobFieldUserAutoTouchConfig* TRobFieldPriv::mutable_autotouchconfigs(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldPriv.AutoTouchConfigs)
  return autotouchconfigs_.Mutable(index);
}
inline ::pb::TRobFieldUserAutoTouchConfig* TRobFieldPriv::add_autotouchconfigs() {
  // @@protoc_insertion_point(field_add:pb.TRobFieldPriv.AutoTouchConfigs)
  return autotouchconfigs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUserAutoTouchConfig >&
TRobFieldPriv::autotouchconfigs() const {
  // @@protoc_insertion_point(field_list:pb.TRobFieldPriv.AutoTouchConfigs)
  return autotouchconfigs_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUserAutoTouchConfig >*
TRobFieldPriv::mutable_autotouchconfigs() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRobFieldPriv.AutoTouchConfigs)
  return &autotouchconfigs_;
}

// optional uint32 Score = 6;
inline bool TRobFieldPriv::has_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TRobFieldPriv::set_has_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TRobFieldPriv::clear_has_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TRobFieldPriv::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TRobFieldPriv::score() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldPriv.Score)
  return score_;
}
inline void TRobFieldPriv::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldPriv.Score)
}

// optional uint32 KillNum = 7;
inline bool TRobFieldPriv::has_killnum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TRobFieldPriv::set_has_killnum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TRobFieldPriv::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TRobFieldPriv::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 TRobFieldPriv::killnum() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldPriv.KillNum)
  return killnum_;
}
inline void TRobFieldPriv::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldPriv.KillNum)
}

// optional uint64 CanMoveTimeMs = 8;
inline bool TRobFieldPriv::has_canmovetimems() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TRobFieldPriv::set_has_canmovetimems() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TRobFieldPriv::clear_has_canmovetimems() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TRobFieldPriv::clear_canmovetimems() {
  canmovetimems_ = GOOGLE_ULONGLONG(0);
  clear_has_canmovetimems();
}
inline ::google::protobuf::uint64 TRobFieldPriv::canmovetimems() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldPriv.CanMoveTimeMs)
  return canmovetimems_;
}
inline void TRobFieldPriv::set_canmovetimems(::google::protobuf::uint64 value) {
  set_has_canmovetimems();
  canmovetimems_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldPriv.CanMoveTimeMs)
}

// optional uint32 AttackNum = 9;
inline bool TRobFieldPriv::has_attacknum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TRobFieldPriv::set_has_attacknum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TRobFieldPriv::clear_has_attacknum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TRobFieldPriv::clear_attacknum() {
  attacknum_ = 0u;
  clear_has_attacknum();
}
inline ::google::protobuf::uint32 TRobFieldPriv::attacknum() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldPriv.AttackNum)
  return attacknum_;
}
inline void TRobFieldPriv::set_attacknum(::google::protobuf::uint32 value) {
  set_has_attacknum();
  attacknum_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldPriv.AttackNum)
}

// -------------------------------------------------------------------

// TRobFieldBuildingAttacker

// optional uint64 ArmyId = 1;
inline bool TRobFieldBuildingAttacker::has_armyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldBuildingAttacker::set_has_armyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldBuildingAttacker::clear_has_armyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldBuildingAttacker::clear_armyid() {
  armyid_ = GOOGLE_ULONGLONG(0);
  clear_has_armyid();
}
inline ::google::protobuf::uint64 TRobFieldBuildingAttacker::armyid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuildingAttacker.ArmyId)
  return armyid_;
}
inline void TRobFieldBuildingAttacker::set_armyid(::google::protobuf::uint64 value) {
  set_has_armyid();
  armyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuildingAttacker.ArmyId)
}

// optional uint32 Damage = 2;
inline bool TRobFieldBuildingAttacker::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldBuildingAttacker::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldBuildingAttacker::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldBuildingAttacker::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 TRobFieldBuildingAttacker::damage() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuildingAttacker.Damage)
  return damage_;
}
inline void TRobFieldBuildingAttacker::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuildingAttacker.Damage)
}

// -------------------------------------------------------------------

// TRobFieldBuildingDefender

// optional uint64 ArmyId = 1;
inline bool TRobFieldBuildingDefender::has_armyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldBuildingDefender::set_has_armyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldBuildingDefender::clear_has_armyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldBuildingDefender::clear_armyid() {
  armyid_ = GOOGLE_ULONGLONG(0);
  clear_has_armyid();
}
inline ::google::protobuf::uint64 TRobFieldBuildingDefender::armyid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuildingDefender.ArmyId)
  return armyid_;
}
inline void TRobFieldBuildingDefender::set_armyid(::google::protobuf::uint64 value) {
  set_has_armyid();
  armyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuildingDefender.ArmyId)
}

// optional uint32 Repair = 2;
inline bool TRobFieldBuildingDefender::has_repair() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldBuildingDefender::set_has_repair() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldBuildingDefender::clear_has_repair() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldBuildingDefender::clear_repair() {
  repair_ = 0u;
  clear_has_repair();
}
inline ::google::protobuf::uint32 TRobFieldBuildingDefender::repair() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuildingDefender.Repair)
  return repair_;
}
inline void TRobFieldBuildingDefender::set_repair(::google::protobuf::uint32 value) {
  set_has_repair();
  repair_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuildingDefender.Repair)
}

// -------------------------------------------------------------------

// TRobFieldBuilding

// optional uint64 EntityId = 1;
inline bool TRobFieldBuilding::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldBuilding::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldBuilding::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldBuilding::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldBuilding::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuilding.EntityId)
  return entityid_;
}
inline void TRobFieldBuilding::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuilding.EntityId)
}

// optional uint64 ArmyId = 2;
inline bool TRobFieldBuilding::has_armyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldBuilding::set_has_armyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldBuilding::clear_has_armyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldBuilding::clear_armyid() {
  armyid_ = GOOGLE_ULONGLONG(0);
  clear_has_armyid();
}
inline ::google::protobuf::uint64 TRobFieldBuilding::armyid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuilding.ArmyId)
  return armyid_;
}
inline void TRobFieldBuilding::set_armyid(::google::protobuf::uint64 value) {
  set_has_armyid();
  armyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuilding.ArmyId)
}

// optional uint64 OwnerTime = 3;
inline bool TRobFieldBuilding::has_ownertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRobFieldBuilding::set_has_ownertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRobFieldBuilding::clear_has_ownertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRobFieldBuilding::clear_ownertime() {
  ownertime_ = GOOGLE_ULONGLONG(0);
  clear_has_ownertime();
}
inline ::google::protobuf::uint64 TRobFieldBuilding::ownertime() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuilding.OwnerTime)
  return ownertime_;
}
inline void TRobFieldBuilding::set_ownertime(::google::protobuf::uint64 value) {
  set_has_ownertime();
  ownertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuilding.OwnerTime)
}

// optional uint64 InitArmyId = 4;
inline bool TRobFieldBuilding::has_initarmyid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRobFieldBuilding::set_has_initarmyid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRobFieldBuilding::clear_has_initarmyid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRobFieldBuilding::clear_initarmyid() {
  initarmyid_ = GOOGLE_ULONGLONG(0);
  clear_has_initarmyid();
}
inline ::google::protobuf::uint64 TRobFieldBuilding::initarmyid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuilding.InitArmyId)
  return initarmyid_;
}
inline void TRobFieldBuilding::set_initarmyid(::google::protobuf::uint64 value) {
  set_has_initarmyid();
  initarmyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuilding.InitArmyId)
}

// optional bool OwnerChanged = 5;
inline bool TRobFieldBuilding::has_ownerchanged() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TRobFieldBuilding::set_has_ownerchanged() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TRobFieldBuilding::clear_has_ownerchanged() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TRobFieldBuilding::clear_ownerchanged() {
  ownerchanged_ = false;
  clear_has_ownerchanged();
}
inline bool TRobFieldBuilding::ownerchanged() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuilding.OwnerChanged)
  return ownerchanged_;
}
inline void TRobFieldBuilding::set_ownerchanged(bool value) {
  set_has_ownerchanged();
  ownerchanged_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuilding.OwnerChanged)
}

// optional uint32 MaxHp = 6;
inline bool TRobFieldBuilding::has_maxhp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TRobFieldBuilding::set_has_maxhp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TRobFieldBuilding::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TRobFieldBuilding::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 TRobFieldBuilding::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuilding.MaxHp)
  return maxhp_;
}
inline void TRobFieldBuilding::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuilding.MaxHp)
}

// optional uint32 CurHp = 7;
inline bool TRobFieldBuilding::has_curhp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TRobFieldBuilding::set_has_curhp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TRobFieldBuilding::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TRobFieldBuilding::clear_curhp() {
  curhp_ = 0u;
  clear_has_curhp();
}
inline ::google::protobuf::uint32 TRobFieldBuilding::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuilding.CurHp)
  return curhp_;
}
inline void TRobFieldBuilding::set_curhp(::google::protobuf::uint32 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuilding.CurHp)
}

// repeated .pb.TRobFieldBuildingAttacker Attackers = 8;
inline int TRobFieldBuilding::attackers_size() const {
  return attackers_.size();
}
inline void TRobFieldBuilding::clear_attackers() {
  attackers_.Clear();
}
inline const ::pb::TRobFieldBuildingAttacker& TRobFieldBuilding::attackers(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuilding.Attackers)
  return attackers_.Get(index);
}
inline ::pb::TRobFieldBuildingAttacker* TRobFieldBuilding::mutable_attackers(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldBuilding.Attackers)
  return attackers_.Mutable(index);
}
inline ::pb::TRobFieldBuildingAttacker* TRobFieldBuilding::add_attackers() {
  // @@protoc_insertion_point(field_add:pb.TRobFieldBuilding.Attackers)
  return attackers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuildingAttacker >&
TRobFieldBuilding::attackers() const {
  // @@protoc_insertion_point(field_list:pb.TRobFieldBuilding.Attackers)
  return attackers_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuildingAttacker >*
TRobFieldBuilding::mutable_attackers() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRobFieldBuilding.Attackers)
  return &attackers_;
}

// optional .pb.TRobFieldBuildingDefender Defender = 9;
inline bool TRobFieldBuilding::has_defender() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TRobFieldBuilding::set_has_defender() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TRobFieldBuilding::clear_has_defender() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TRobFieldBuilding::clear_defender() {
  if (defender_ != NULL) defender_->::pb::TRobFieldBuildingDefender::Clear();
  clear_has_defender();
}
inline const ::pb::TRobFieldBuildingDefender& TRobFieldBuilding::defender() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuilding.Defender)
  return defender_ != NULL ? *defender_ : *default_instance_->defender_;
}
inline ::pb::TRobFieldBuildingDefender* TRobFieldBuilding::mutable_defender() {
  set_has_defender();
  if (defender_ == NULL) defender_ = new ::pb::TRobFieldBuildingDefender;
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldBuilding.Defender)
  return defender_;
}
inline ::pb::TRobFieldBuildingDefender* TRobFieldBuilding::release_defender() {
  clear_has_defender();
  ::pb::TRobFieldBuildingDefender* temp = defender_;
  defender_ = NULL;
  return temp;
}
inline void TRobFieldBuilding::set_allocated_defender(::pb::TRobFieldBuildingDefender* defender) {
  delete defender_;
  defender_ = defender;
  if (defender) {
    set_has_defender();
  } else {
    clear_has_defender();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldBuilding.Defender)
}

// optional uint64 LastResumeHpTime = 10;
inline bool TRobFieldBuilding::has_lastresumehptime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TRobFieldBuilding::set_has_lastresumehptime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TRobFieldBuilding::clear_has_lastresumehptime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TRobFieldBuilding::clear_lastresumehptime() {
  lastresumehptime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastresumehptime();
}
inline ::google::protobuf::uint64 TRobFieldBuilding::lastresumehptime() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldBuilding.LastResumeHpTime)
  return lastresumehptime_;
}
inline void TRobFieldBuilding::set_lastresumehptime(::google::protobuf::uint64 value) {
  set_has_lastresumehptime();
  lastresumehptime_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldBuilding.LastResumeHpTime)
}

// -------------------------------------------------------------------

// TRobFieldEventUserEnter

// optional uint64 EntityId = 1;
inline bool TRobFieldEventUserEnter::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventUserEnter::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventUserEnter::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventUserEnter::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldEventUserEnter::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserEnter.EntityId)
  return entityid_;
}
inline void TRobFieldEventUserEnter::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserEnter.EntityId)
}

// optional .pb.TRobFieldUser User = 2;
inline bool TRobFieldEventUserEnter::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldEventUserEnter::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldEventUserEnter::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldEventUserEnter::clear_user() {
  if (user_ != NULL) user_->::pb::TRobFieldUser::Clear();
  clear_has_user();
}
inline const ::pb::TRobFieldUser& TRobFieldEventUserEnter::user() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserEnter.User)
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::pb::TRobFieldUser* TRobFieldEventUserEnter::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::pb::TRobFieldUser;
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldEventUserEnter.User)
  return user_;
}
inline ::pb::TRobFieldUser* TRobFieldEventUserEnter::release_user() {
  clear_has_user();
  ::pb::TRobFieldUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void TRobFieldEventUserEnter::set_allocated_user(::pb::TRobFieldUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldEventUserEnter.User)
}

// -------------------------------------------------------------------

// TRobFieldEventUserLeave

// optional uint64 EntityId = 1;
inline bool TRobFieldEventUserLeave::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventUserLeave::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventUserLeave::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventUserLeave::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldEventUserLeave::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserLeave.EntityId)
  return entityid_;
}
inline void TRobFieldEventUserLeave::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserLeave.EntityId)
}

// -------------------------------------------------------------------

// TRobFieldEventUserMove

// optional uint64 EntityId = 1;
inline bool TRobFieldEventUserMove::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventUserMove::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventUserMove::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventUserMove::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldEventUserMove::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserMove.EntityId)
  return entityid_;
}
inline void TRobFieldEventUserMove::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserMove.EntityId)
}

// optional .pb.PbVector2_Int CurPos = 2;
inline bool TRobFieldEventUserMove::has_curpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldEventUserMove::set_has_curpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldEventUserMove::clear_has_curpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldEventUserMove::clear_curpos() {
  if (curpos_ != NULL) curpos_->::pb::PbVector2_Int::Clear();
  clear_has_curpos();
}
inline const ::pb::PbVector2_Int& TRobFieldEventUserMove::curpos() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserMove.CurPos)
  return curpos_ != NULL ? *curpos_ : *default_instance_->curpos_;
}
inline ::pb::PbVector2_Int* TRobFieldEventUserMove::mutable_curpos() {
  set_has_curpos();
  if (curpos_ == NULL) curpos_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldEventUserMove.CurPos)
  return curpos_;
}
inline ::pb::PbVector2_Int* TRobFieldEventUserMove::release_curpos() {
  clear_has_curpos();
  ::pb::PbVector2_Int* temp = curpos_;
  curpos_ = NULL;
  return temp;
}
inline void TRobFieldEventUserMove::set_allocated_curpos(::pb::PbVector2_Int* curpos) {
  delete curpos_;
  curpos_ = curpos;
  if (curpos) {
    set_has_curpos();
  } else {
    clear_has_curpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldEventUserMove.CurPos)
}

// optional .pb.PbVector2_Int EndPos = 3;
inline bool TRobFieldEventUserMove::has_endpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRobFieldEventUserMove::set_has_endpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRobFieldEventUserMove::clear_has_endpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRobFieldEventUserMove::clear_endpos() {
  if (endpos_ != NULL) endpos_->::pb::PbVector2_Int::Clear();
  clear_has_endpos();
}
inline const ::pb::PbVector2_Int& TRobFieldEventUserMove::endpos() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserMove.EndPos)
  return endpos_ != NULL ? *endpos_ : *default_instance_->endpos_;
}
inline ::pb::PbVector2_Int* TRobFieldEventUserMove::mutable_endpos() {
  set_has_endpos();
  if (endpos_ == NULL) endpos_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldEventUserMove.EndPos)
  return endpos_;
}
inline ::pb::PbVector2_Int* TRobFieldEventUserMove::release_endpos() {
  clear_has_endpos();
  ::pb::PbVector2_Int* temp = endpos_;
  endpos_ = NULL;
  return temp;
}
inline void TRobFieldEventUserMove::set_allocated_endpos(::pb::PbVector2_Int* endpos) {
  delete endpos_;
  endpos_ = endpos;
  if (endpos) {
    set_has_endpos();
  } else {
    clear_has_endpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldEventUserMove.EndPos)
}

// -------------------------------------------------------------------

// TRobFieldEventUserFight

// optional uint64 AtkEntityId = 1;
inline bool TRobFieldEventUserFight::has_atkentityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventUserFight::set_has_atkentityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventUserFight::clear_has_atkentityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventUserFight::clear_atkentityid() {
  atkentityid_ = GOOGLE_ULONGLONG(0);
  clear_has_atkentityid();
}
inline ::google::protobuf::uint64 TRobFieldEventUserFight::atkentityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserFight.AtkEntityId)
  return atkentityid_;
}
inline void TRobFieldEventUserFight::set_atkentityid(::google::protobuf::uint64 value) {
  set_has_atkentityid();
  atkentityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserFight.AtkEntityId)
}

// optional uint32 AtkPostHp = 2;
inline bool TRobFieldEventUserFight::has_atkposthp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldEventUserFight::set_has_atkposthp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldEventUserFight::clear_has_atkposthp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldEventUserFight::clear_atkposthp() {
  atkposthp_ = 0u;
  clear_has_atkposthp();
}
inline ::google::protobuf::uint32 TRobFieldEventUserFight::atkposthp() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserFight.AtkPostHp)
  return atkposthp_;
}
inline void TRobFieldEventUserFight::set_atkposthp(::google::protobuf::uint32 value) {
  set_has_atkposthp();
  atkposthp_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserFight.AtkPostHp)
}

// optional uint64 DefEntityId = 3;
inline bool TRobFieldEventUserFight::has_defentityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRobFieldEventUserFight::set_has_defentityid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRobFieldEventUserFight::clear_has_defentityid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRobFieldEventUserFight::clear_defentityid() {
  defentityid_ = GOOGLE_ULONGLONG(0);
  clear_has_defentityid();
}
inline ::google::protobuf::uint64 TRobFieldEventUserFight::defentityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserFight.DefEntityId)
  return defentityid_;
}
inline void TRobFieldEventUserFight::set_defentityid(::google::protobuf::uint64 value) {
  set_has_defentityid();
  defentityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserFight.DefEntityId)
}

// optional uint32 DefPostHp = 4;
inline bool TRobFieldEventUserFight::has_defposthp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRobFieldEventUserFight::set_has_defposthp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRobFieldEventUserFight::clear_has_defposthp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRobFieldEventUserFight::clear_defposthp() {
  defposthp_ = 0u;
  clear_has_defposthp();
}
inline ::google::protobuf::uint32 TRobFieldEventUserFight::defposthp() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserFight.DefPostHp)
  return defposthp_;
}
inline void TRobFieldEventUserFight::set_defposthp(::google::protobuf::uint32 value) {
  set_has_defposthp();
  defposthp_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserFight.DefPostHp)
}

// optional bool IsAtkWin = 5;
inline bool TRobFieldEventUserFight::has_isatkwin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TRobFieldEventUserFight::set_has_isatkwin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TRobFieldEventUserFight::clear_has_isatkwin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TRobFieldEventUserFight::clear_isatkwin() {
  isatkwin_ = false;
  clear_has_isatkwin();
}
inline bool TRobFieldEventUserFight::isatkwin() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserFight.IsAtkWin)
  return isatkwin_;
}
inline void TRobFieldEventUserFight::set_isatkwin(bool value) {
  set_has_isatkwin();
  isatkwin_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserFight.IsAtkWin)
}

// -------------------------------------------------------------------

// TRobFieldEventUserTouch

// optional uint64 UserEntityId = 1;
inline bool TRobFieldEventUserTouch::has_userentityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventUserTouch::set_has_userentityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventUserTouch::clear_has_userentityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventUserTouch::clear_userentityid() {
  userentityid_ = GOOGLE_ULONGLONG(0);
  clear_has_userentityid();
}
inline ::google::protobuf::uint64 TRobFieldEventUserTouch::userentityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserTouch.UserEntityId)
  return userentityid_;
}
inline void TRobFieldEventUserTouch::set_userentityid(::google::protobuf::uint64 value) {
  set_has_userentityid();
  userentityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserTouch.UserEntityId)
}

// optional uint32 UserPostHp = 2;
inline bool TRobFieldEventUserTouch::has_userposthp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldEventUserTouch::set_has_userposthp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldEventUserTouch::clear_has_userposthp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldEventUserTouch::clear_userposthp() {
  userposthp_ = 0u;
  clear_has_userposthp();
}
inline ::google::protobuf::uint32 TRobFieldEventUserTouch::userposthp() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserTouch.UserPostHp)
  return userposthp_;
}
inline void TRobFieldEventUserTouch::set_userposthp(::google::protobuf::uint32 value) {
  set_has_userposthp();
  userposthp_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserTouch.UserPostHp)
}

// optional uint64 BuildingEntityId = 3;
inline bool TRobFieldEventUserTouch::has_buildingentityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRobFieldEventUserTouch::set_has_buildingentityid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRobFieldEventUserTouch::clear_has_buildingentityid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRobFieldEventUserTouch::clear_buildingentityid() {
  buildingentityid_ = GOOGLE_ULONGLONG(0);
  clear_has_buildingentityid();
}
inline ::google::protobuf::uint64 TRobFieldEventUserTouch::buildingentityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserTouch.BuildingEntityId)
  return buildingentityid_;
}
inline void TRobFieldEventUserTouch::set_buildingentityid(::google::protobuf::uint64 value) {
  set_has_buildingentityid();
  buildingentityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserTouch.BuildingEntityId)
}

// optional uint32 BuildingPostHp = 4;
inline bool TRobFieldEventUserTouch::has_buildingposthp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRobFieldEventUserTouch::set_has_buildingposthp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRobFieldEventUserTouch::clear_has_buildingposthp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRobFieldEventUserTouch::clear_buildingposthp() {
  buildingposthp_ = 0u;
  clear_has_buildingposthp();
}
inline ::google::protobuf::uint32 TRobFieldEventUserTouch::buildingposthp() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserTouch.BuildingPostHp)
  return buildingposthp_;
}
inline void TRobFieldEventUserTouch::set_buildingposthp(::google::protobuf::uint32 value) {
  set_has_buildingposthp();
  buildingposthp_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserTouch.BuildingPostHp)
}

// optional bool IsDestroy = 5;
inline bool TRobFieldEventUserTouch::has_isdestroy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TRobFieldEventUserTouch::set_has_isdestroy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TRobFieldEventUserTouch::clear_has_isdestroy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TRobFieldEventUserTouch::clear_isdestroy() {
  isdestroy_ = false;
  clear_has_isdestroy();
}
inline bool TRobFieldEventUserTouch::isdestroy() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserTouch.IsDestroy)
  return isdestroy_;
}
inline void TRobFieldEventUserTouch::set_isdestroy(bool value) {
  set_has_isdestroy();
  isdestroy_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserTouch.IsDestroy)
}

// optional uint32 DeltaHp = 6;
inline bool TRobFieldEventUserTouch::has_deltahp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TRobFieldEventUserTouch::set_has_deltahp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TRobFieldEventUserTouch::clear_has_deltahp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TRobFieldEventUserTouch::clear_deltahp() {
  deltahp_ = 0u;
  clear_has_deltahp();
}
inline ::google::protobuf::uint32 TRobFieldEventUserTouch::deltahp() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserTouch.DeltaHp)
  return deltahp_;
}
inline void TRobFieldEventUserTouch::set_deltahp(::google::protobuf::uint32 value) {
  set_has_deltahp();
  deltahp_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserTouch.DeltaHp)
}

// -------------------------------------------------------------------

// TRobFieldEventUserRevive

// optional uint64 EntityId = 1;
inline bool TRobFieldEventUserRevive::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventUserRevive::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventUserRevive::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventUserRevive::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldEventUserRevive::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserRevive.EntityId)
  return entityid_;
}
inline void TRobFieldEventUserRevive::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserRevive.EntityId)
}

// optional .pb.PbVector2_Int RevivePos = 2;
inline bool TRobFieldEventUserRevive::has_revivepos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldEventUserRevive::set_has_revivepos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldEventUserRevive::clear_has_revivepos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldEventUserRevive::clear_revivepos() {
  if (revivepos_ != NULL) revivepos_->::pb::PbVector2_Int::Clear();
  clear_has_revivepos();
}
inline const ::pb::PbVector2_Int& TRobFieldEventUserRevive::revivepos() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserRevive.RevivePos)
  return revivepos_ != NULL ? *revivepos_ : *default_instance_->revivepos_;
}
inline ::pb::PbVector2_Int* TRobFieldEventUserRevive::mutable_revivepos() {
  set_has_revivepos();
  if (revivepos_ == NULL) revivepos_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldEventUserRevive.RevivePos)
  return revivepos_;
}
inline ::pb::PbVector2_Int* TRobFieldEventUserRevive::release_revivepos() {
  clear_has_revivepos();
  ::pb::PbVector2_Int* temp = revivepos_;
  revivepos_ = NULL;
  return temp;
}
inline void TRobFieldEventUserRevive::set_allocated_revivepos(::pb::PbVector2_Int* revivepos) {
  delete revivepos_;
  revivepos_ = revivepos;
  if (revivepos) {
    set_has_revivepos();
  } else {
    clear_has_revivepos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldEventUserRevive.RevivePos)
}

// -------------------------------------------------------------------

// TRobFieldEventUserKillNum

// optional uint64 EntityId = 1;
inline bool TRobFieldEventUserKillNum::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventUserKillNum::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventUserKillNum::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventUserKillNum::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldEventUserKillNum::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserKillNum.EntityId)
  return entityid_;
}
inline void TRobFieldEventUserKillNum::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserKillNum.EntityId)
}

// optional uint32 KillNum = 2;
inline bool TRobFieldEventUserKillNum::has_killnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldEventUserKillNum::set_has_killnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldEventUserKillNum::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldEventUserKillNum::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 TRobFieldEventUserKillNum::killnum() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserKillNum.KillNum)
  return killnum_;
}
inline void TRobFieldEventUserKillNum::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserKillNum.KillNum)
}

// -------------------------------------------------------------------

// TRobFieldEventUserHpChange

// optional uint64 EntityId = 1;
inline bool TRobFieldEventUserHpChange::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventUserHpChange::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventUserHpChange::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventUserHpChange::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldEventUserHpChange::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserHpChange.EntityId)
  return entityid_;
}
inline void TRobFieldEventUserHpChange::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserHpChange.EntityId)
}

// optional uint32 CurHp = 2;
inline bool TRobFieldEventUserHpChange::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldEventUserHpChange::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldEventUserHpChange::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldEventUserHpChange::clear_curhp() {
  curhp_ = 0u;
  clear_has_curhp();
}
inline ::google::protobuf::uint32 TRobFieldEventUserHpChange::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventUserHpChange.CurHp)
  return curhp_;
}
inline void TRobFieldEventUserHpChange::set_curhp(::google::protobuf::uint32 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventUserHpChange.CurHp)
}

// -------------------------------------------------------------------

// TRobFieldEventArmyGoalChange

// optional uint64 ArmyId = 1;
inline bool TRobFieldEventArmyGoalChange::has_armyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventArmyGoalChange::set_has_armyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventArmyGoalChange::clear_has_armyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventArmyGoalChange::clear_armyid() {
  armyid_ = GOOGLE_ULONGLONG(0);
  clear_has_armyid();
}
inline ::google::protobuf::uint64 TRobFieldEventArmyGoalChange::armyid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventArmyGoalChange.ArmyId)
  return armyid_;
}
inline void TRobFieldEventArmyGoalChange::set_armyid(::google::protobuf::uint64 value) {
  set_has_armyid();
  armyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventArmyGoalChange.ArmyId)
}

// optional uint32 Goal = 2;
inline bool TRobFieldEventArmyGoalChange::has_goal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldEventArmyGoalChange::set_has_goal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldEventArmyGoalChange::clear_has_goal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldEventArmyGoalChange::clear_goal() {
  goal_ = 0u;
  clear_has_goal();
}
inline ::google::protobuf::uint32 TRobFieldEventArmyGoalChange::goal() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventArmyGoalChange.Goal)
  return goal_;
}
inline void TRobFieldEventArmyGoalChange::set_goal(::google::protobuf::uint32 value) {
  set_has_goal();
  goal_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventArmyGoalChange.Goal)
}

// optional uint64 Changer = 3;
inline bool TRobFieldEventArmyGoalChange::has_changer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRobFieldEventArmyGoalChange::set_has_changer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRobFieldEventArmyGoalChange::clear_has_changer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRobFieldEventArmyGoalChange::clear_changer() {
  changer_ = GOOGLE_ULONGLONG(0);
  clear_has_changer();
}
inline ::google::protobuf::uint64 TRobFieldEventArmyGoalChange::changer() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventArmyGoalChange.Changer)
  return changer_;
}
inline void TRobFieldEventArmyGoalChange::set_changer(::google::protobuf::uint64 value) {
  set_has_changer();
  changer_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventArmyGoalChange.Changer)
}

// -------------------------------------------------------------------

// TRobFieldEventBuildingOwnerChange

// optional uint64 EntityId = 1;
inline bool TRobFieldEventBuildingOwnerChange::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventBuildingOwnerChange::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventBuildingOwnerChange::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventBuildingOwnerChange::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldEventBuildingOwnerChange::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventBuildingOwnerChange.EntityId)
  return entityid_;
}
inline void TRobFieldEventBuildingOwnerChange::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventBuildingOwnerChange.EntityId)
}

// optional uint64 ArmyId = 2;
inline bool TRobFieldEventBuildingOwnerChange::has_armyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldEventBuildingOwnerChange::set_has_armyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldEventBuildingOwnerChange::clear_has_armyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldEventBuildingOwnerChange::clear_armyid() {
  armyid_ = GOOGLE_ULONGLONG(0);
  clear_has_armyid();
}
inline ::google::protobuf::uint64 TRobFieldEventBuildingOwnerChange::armyid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventBuildingOwnerChange.ArmyId)
  return armyid_;
}
inline void TRobFieldEventBuildingOwnerChange::set_armyid(::google::protobuf::uint64 value) {
  set_has_armyid();
  armyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventBuildingOwnerChange.ArmyId)
}

// optional uint64 OwnerTime = 3;
inline bool TRobFieldEventBuildingOwnerChange::has_ownertime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRobFieldEventBuildingOwnerChange::set_has_ownertime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRobFieldEventBuildingOwnerChange::clear_has_ownertime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRobFieldEventBuildingOwnerChange::clear_ownertime() {
  ownertime_ = GOOGLE_ULONGLONG(0);
  clear_has_ownertime();
}
inline ::google::protobuf::uint64 TRobFieldEventBuildingOwnerChange::ownertime() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventBuildingOwnerChange.OwnerTime)
  return ownertime_;
}
inline void TRobFieldEventBuildingOwnerChange::set_ownertime(::google::protobuf::uint64 value) {
  set_has_ownertime();
  ownertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventBuildingOwnerChange.OwnerTime)
}

// optional uint64 InitArmyId = 4;
inline bool TRobFieldEventBuildingOwnerChange::has_initarmyid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRobFieldEventBuildingOwnerChange::set_has_initarmyid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRobFieldEventBuildingOwnerChange::clear_has_initarmyid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRobFieldEventBuildingOwnerChange::clear_initarmyid() {
  initarmyid_ = GOOGLE_ULONGLONG(0);
  clear_has_initarmyid();
}
inline ::google::protobuf::uint64 TRobFieldEventBuildingOwnerChange::initarmyid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventBuildingOwnerChange.InitArmyId)
  return initarmyid_;
}
inline void TRobFieldEventBuildingOwnerChange::set_initarmyid(::google::protobuf::uint64 value) {
  set_has_initarmyid();
  initarmyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventBuildingOwnerChange.InitArmyId)
}

// optional bool OwnerChanged = 5;
inline bool TRobFieldEventBuildingOwnerChange::has_ownerchanged() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TRobFieldEventBuildingOwnerChange::set_has_ownerchanged() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TRobFieldEventBuildingOwnerChange::clear_has_ownerchanged() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TRobFieldEventBuildingOwnerChange::clear_ownerchanged() {
  ownerchanged_ = false;
  clear_has_ownerchanged();
}
inline bool TRobFieldEventBuildingOwnerChange::ownerchanged() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventBuildingOwnerChange.OwnerChanged)
  return ownerchanged_;
}
inline void TRobFieldEventBuildingOwnerChange::set_ownerchanged(bool value) {
  set_has_ownerchanged();
  ownerchanged_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventBuildingOwnerChange.OwnerChanged)
}

// -------------------------------------------------------------------

// TRobFieldEventBuildingProgressChange

// optional uint64 EntityId = 1;
inline bool TRobFieldEventBuildingProgressChange::has_entityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventBuildingProgressChange::set_has_entityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventBuildingProgressChange::clear_has_entityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventBuildingProgressChange::clear_entityid() {
  entityid_ = GOOGLE_ULONGLONG(0);
  clear_has_entityid();
}
inline ::google::protobuf::uint64 TRobFieldEventBuildingProgressChange::entityid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventBuildingProgressChange.EntityId)
  return entityid_;
}
inline void TRobFieldEventBuildingProgressChange::set_entityid(::google::protobuf::uint64 value) {
  set_has_entityid();
  entityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventBuildingProgressChange.EntityId)
}

// optional uint32 CurHp = 2;
inline bool TRobFieldEventBuildingProgressChange::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldEventBuildingProgressChange::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldEventBuildingProgressChange::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldEventBuildingProgressChange::clear_curhp() {
  curhp_ = 0u;
  clear_has_curhp();
}
inline ::google::protobuf::uint32 TRobFieldEventBuildingProgressChange::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventBuildingProgressChange.CurHp)
  return curhp_;
}
inline void TRobFieldEventBuildingProgressChange::set_curhp(::google::protobuf::uint32 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventBuildingProgressChange.CurHp)
}

// repeated .pb.TRobFieldBuildingAttacker Attackers = 3;
inline int TRobFieldEventBuildingProgressChange::attackers_size() const {
  return attackers_.size();
}
inline void TRobFieldEventBuildingProgressChange::clear_attackers() {
  attackers_.Clear();
}
inline const ::pb::TRobFieldBuildingAttacker& TRobFieldEventBuildingProgressChange::attackers(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventBuildingProgressChange.Attackers)
  return attackers_.Get(index);
}
inline ::pb::TRobFieldBuildingAttacker* TRobFieldEventBuildingProgressChange::mutable_attackers(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldEventBuildingProgressChange.Attackers)
  return attackers_.Mutable(index);
}
inline ::pb::TRobFieldBuildingAttacker* TRobFieldEventBuildingProgressChange::add_attackers() {
  // @@protoc_insertion_point(field_add:pb.TRobFieldEventBuildingProgressChange.Attackers)
  return attackers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuildingAttacker >&
TRobFieldEventBuildingProgressChange::attackers() const {
  // @@protoc_insertion_point(field_list:pb.TRobFieldEventBuildingProgressChange.Attackers)
  return attackers_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuildingAttacker >*
TRobFieldEventBuildingProgressChange::mutable_attackers() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRobFieldEventBuildingProgressChange.Attackers)
  return &attackers_;
}

// optional .pb.TRobFieldBuildingDefender Defender = 4;
inline bool TRobFieldEventBuildingProgressChange::has_defender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRobFieldEventBuildingProgressChange::set_has_defender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRobFieldEventBuildingProgressChange::clear_has_defender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRobFieldEventBuildingProgressChange::clear_defender() {
  if (defender_ != NULL) defender_->::pb::TRobFieldBuildingDefender::Clear();
  clear_has_defender();
}
inline const ::pb::TRobFieldBuildingDefender& TRobFieldEventBuildingProgressChange::defender() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventBuildingProgressChange.Defender)
  return defender_ != NULL ? *defender_ : *default_instance_->defender_;
}
inline ::pb::TRobFieldBuildingDefender* TRobFieldEventBuildingProgressChange::mutable_defender() {
  set_has_defender();
  if (defender_ == NULL) defender_ = new ::pb::TRobFieldBuildingDefender;
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldEventBuildingProgressChange.Defender)
  return defender_;
}
inline ::pb::TRobFieldBuildingDefender* TRobFieldEventBuildingProgressChange::release_defender() {
  clear_has_defender();
  ::pb::TRobFieldBuildingDefender* temp = defender_;
  defender_ = NULL;
  return temp;
}
inline void TRobFieldEventBuildingProgressChange::set_allocated_defender(::pb::TRobFieldBuildingDefender* defender) {
  delete defender_;
  defender_ = defender;
  if (defender) {
    set_has_defender();
  } else {
    clear_has_defender();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldEventBuildingProgressChange.Defender)
}

// -------------------------------------------------------------------

// TRobFieldEventGameOver

// optional uint64 WinArmyId = 1;
inline bool TRobFieldEventGameOver::has_winarmyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventGameOver::set_has_winarmyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventGameOver::clear_has_winarmyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventGameOver::clear_winarmyid() {
  winarmyid_ = GOOGLE_ULONGLONG(0);
  clear_has_winarmyid();
}
inline ::google::protobuf::uint64 TRobFieldEventGameOver::winarmyid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventGameOver.WinArmyId)
  return winarmyid_;
}
inline void TRobFieldEventGameOver::set_winarmyid(::google::protobuf::uint64 value) {
  set_has_winarmyid();
  winarmyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventGameOver.WinArmyId)
}

// -------------------------------------------------------------------

// TRobFieldEventWrapper

// optional uint32 OffsetMs = 1;
inline bool TRobFieldEventWrapper::has_offsetms() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldEventWrapper::set_has_offsetms() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldEventWrapper::clear_has_offsetms() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldEventWrapper::clear_offsetms() {
  offsetms_ = 0u;
  clear_has_offsetms();
}
inline ::google::protobuf::uint32 TRobFieldEventWrapper::offsetms() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventWrapper.OffsetMs)
  return offsetms_;
}
inline void TRobFieldEventWrapper::set_offsetms(::google::protobuf::uint32 value) {
  set_has_offsetms();
  offsetms_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventWrapper.OffsetMs)
}

// optional .pb.ERobFieldEventType EventType = 2;
inline bool TRobFieldEventWrapper::has_eventtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldEventWrapper::set_has_eventtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldEventWrapper::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldEventWrapper::clear_eventtype() {
  eventtype_ = 0;
  clear_has_eventtype();
}
inline ::pb::ERobFieldEventType TRobFieldEventWrapper::eventtype() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventWrapper.EventType)
  return static_cast< ::pb::ERobFieldEventType >(eventtype_);
}
inline void TRobFieldEventWrapper::set_eventtype(::pb::ERobFieldEventType value) {
  assert(::pb::ERobFieldEventType_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventWrapper.EventType)
}

// optional bytes EventData = 3;
inline bool TRobFieldEventWrapper::has_eventdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRobFieldEventWrapper::set_has_eventdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRobFieldEventWrapper::clear_has_eventdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRobFieldEventWrapper::clear_eventdata() {
  if (eventdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventdata_->clear();
  }
  clear_has_eventdata();
}
inline const ::std::string& TRobFieldEventWrapper::eventdata() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldEventWrapper.EventData)
  return *eventdata_;
}
inline void TRobFieldEventWrapper::set_eventdata(const ::std::string& value) {
  set_has_eventdata();
  if (eventdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventdata_ = new ::std::string;
  }
  eventdata_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TRobFieldEventWrapper.EventData)
}
inline void TRobFieldEventWrapper::set_eventdata(const char* value) {
  set_has_eventdata();
  if (eventdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventdata_ = new ::std::string;
  }
  eventdata_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TRobFieldEventWrapper.EventData)
}
inline void TRobFieldEventWrapper::set_eventdata(const void* value, size_t size) {
  set_has_eventdata();
  if (eventdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventdata_ = new ::std::string;
  }
  eventdata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TRobFieldEventWrapper.EventData)
}
inline ::std::string* TRobFieldEventWrapper::mutable_eventdata() {
  set_has_eventdata();
  if (eventdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    eventdata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldEventWrapper.EventData)
  return eventdata_;
}
inline ::std::string* TRobFieldEventWrapper::release_eventdata() {
  clear_has_eventdata();
  if (eventdata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = eventdata_;
    eventdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TRobFieldEventWrapper::set_allocated_eventdata(::std::string* eventdata) {
  if (eventdata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eventdata_;
  }
  if (eventdata) {
    set_has_eventdata();
    eventdata_ = eventdata;
  } else {
    clear_has_eventdata();
    eventdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldEventWrapper.EventData)
}

// -------------------------------------------------------------------

// TRobFieldWhole

// optional .pb.ERobType RobType = 1;
inline bool TRobFieldWhole::has_robtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldWhole::set_has_robtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldWhole::clear_has_robtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldWhole::clear_robtype() {
  robtype_ = 0;
  clear_has_robtype();
}
inline ::pb::ERobType TRobFieldWhole::robtype() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldWhole.RobType)
  return static_cast< ::pb::ERobType >(robtype_);
}
inline void TRobFieldWhole::set_robtype(::pb::ERobType value) {
  assert(::pb::ERobType_IsValid(value));
  set_has_robtype();
  robtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldWhole.RobType)
}

// optional uint64 FieldId = 2;
inline bool TRobFieldWhole::has_fieldid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldWhole::set_has_fieldid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldWhole::clear_has_fieldid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldWhole::clear_fieldid() {
  fieldid_ = GOOGLE_ULONGLONG(0);
  clear_has_fieldid();
}
inline ::google::protobuf::uint64 TRobFieldWhole::fieldid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldWhole.FieldId)
  return fieldid_;
}
inline void TRobFieldWhole::set_fieldid(::google::protobuf::uint64 value) {
  set_has_fieldid();
  fieldid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldWhole.FieldId)
}

// optional uint64 BegTime = 3;
inline bool TRobFieldWhole::has_begtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TRobFieldWhole::set_has_begtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TRobFieldWhole::clear_has_begtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TRobFieldWhole::clear_begtime() {
  begtime_ = GOOGLE_ULONGLONG(0);
  clear_has_begtime();
}
inline ::google::protobuf::uint64 TRobFieldWhole::begtime() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldWhole.BegTime)
  return begtime_;
}
inline void TRobFieldWhole::set_begtime(::google::protobuf::uint64 value) {
  set_has_begtime();
  begtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldWhole.BegTime)
}

// repeated .pb.TRobFieldArmy Armys = 4;
inline int TRobFieldWhole::armys_size() const {
  return armys_.size();
}
inline void TRobFieldWhole::clear_armys() {
  armys_.Clear();
}
inline const ::pb::TRobFieldArmy& TRobFieldWhole::armys(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldWhole.Armys)
  return armys_.Get(index);
}
inline ::pb::TRobFieldArmy* TRobFieldWhole::mutable_armys(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldWhole.Armys)
  return armys_.Mutable(index);
}
inline ::pb::TRobFieldArmy* TRobFieldWhole::add_armys() {
  // @@protoc_insertion_point(field_add:pb.TRobFieldWhole.Armys)
  return armys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldArmy >&
TRobFieldWhole::armys() const {
  // @@protoc_insertion_point(field_list:pb.TRobFieldWhole.Armys)
  return armys_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldArmy >*
TRobFieldWhole::mutable_armys() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRobFieldWhole.Armys)
  return &armys_;
}

// repeated .pb.TRobFieldUser Users = 5;
inline int TRobFieldWhole::users_size() const {
  return users_.size();
}
inline void TRobFieldWhole::clear_users() {
  users_.Clear();
}
inline const ::pb::TRobFieldUser& TRobFieldWhole::users(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldWhole.Users)
  return users_.Get(index);
}
inline ::pb::TRobFieldUser* TRobFieldWhole::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldWhole.Users)
  return users_.Mutable(index);
}
inline ::pb::TRobFieldUser* TRobFieldWhole::add_users() {
  // @@protoc_insertion_point(field_add:pb.TRobFieldWhole.Users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUser >&
TRobFieldWhole::users() const {
  // @@protoc_insertion_point(field_list:pb.TRobFieldWhole.Users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldUser >*
TRobFieldWhole::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRobFieldWhole.Users)
  return &users_;
}

// optional .pb.TRobFieldPriv Priv = 6;
inline bool TRobFieldWhole::has_priv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TRobFieldWhole::set_has_priv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TRobFieldWhole::clear_has_priv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TRobFieldWhole::clear_priv() {
  if (priv_ != NULL) priv_->::pb::TRobFieldPriv::Clear();
  clear_has_priv();
}
inline const ::pb::TRobFieldPriv& TRobFieldWhole::priv() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldWhole.Priv)
  return priv_ != NULL ? *priv_ : *default_instance_->priv_;
}
inline ::pb::TRobFieldPriv* TRobFieldWhole::mutable_priv() {
  set_has_priv();
  if (priv_ == NULL) priv_ = new ::pb::TRobFieldPriv;
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldWhole.Priv)
  return priv_;
}
inline ::pb::TRobFieldPriv* TRobFieldWhole::release_priv() {
  clear_has_priv();
  ::pb::TRobFieldPriv* temp = priv_;
  priv_ = NULL;
  return temp;
}
inline void TRobFieldWhole::set_allocated_priv(::pb::TRobFieldPriv* priv) {
  delete priv_;
  priv_ = priv;
  if (priv) {
    set_has_priv();
  } else {
    clear_has_priv();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldWhole.Priv)
}

// repeated .pb.TRobFieldBuilding Buildings = 7;
inline int TRobFieldWhole::buildings_size() const {
  return buildings_.size();
}
inline void TRobFieldWhole::clear_buildings() {
  buildings_.Clear();
}
inline const ::pb::TRobFieldBuilding& TRobFieldWhole::buildings(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldWhole.Buildings)
  return buildings_.Get(index);
}
inline ::pb::TRobFieldBuilding* TRobFieldWhole::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldWhole.Buildings)
  return buildings_.Mutable(index);
}
inline ::pb::TRobFieldBuilding* TRobFieldWhole::add_buildings() {
  // @@protoc_insertion_point(field_add:pb.TRobFieldWhole.Buildings)
  return buildings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuilding >&
TRobFieldWhole::buildings() const {
  // @@protoc_insertion_point(field_list:pb.TRobFieldWhole.Buildings)
  return buildings_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldBuilding >*
TRobFieldWhole::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRobFieldWhole.Buildings)
  return &buildings_;
}

// -------------------------------------------------------------------

// TRobFieldDelta

// optional .pb.ERobType RobType = 1;
inline bool TRobFieldDelta::has_robtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldDelta::set_has_robtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldDelta::clear_has_robtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldDelta::clear_robtype() {
  robtype_ = 0;
  clear_has_robtype();
}
inline ::pb::ERobType TRobFieldDelta::robtype() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldDelta.RobType)
  return static_cast< ::pb::ERobType >(robtype_);
}
inline void TRobFieldDelta::set_robtype(::pb::ERobType value) {
  assert(::pb::ERobType_IsValid(value));
  set_has_robtype();
  robtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldDelta.RobType)
}

// repeated .pb.TRobFieldEventWrapper Events = 2;
inline int TRobFieldDelta::events_size() const {
  return events_.size();
}
inline void TRobFieldDelta::clear_events() {
  events_.Clear();
}
inline const ::pb::TRobFieldEventWrapper& TRobFieldDelta::events(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldDelta.Events)
  return events_.Get(index);
}
inline ::pb::TRobFieldEventWrapper* TRobFieldDelta::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldDelta.Events)
  return events_.Mutable(index);
}
inline ::pb::TRobFieldEventWrapper* TRobFieldDelta::add_events() {
  // @@protoc_insertion_point(field_add:pb.TRobFieldDelta.Events)
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldEventWrapper >&
TRobFieldDelta::events() const {
  // @@protoc_insertion_point(field_list:pb.TRobFieldDelta.Events)
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldEventWrapper >*
TRobFieldDelta::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRobFieldDelta.Events)
  return &events_;
}

// -------------------------------------------------------------------

// TRobFieldSettle

// optional .pb.ERobType RobType = 1;
inline bool TRobFieldSettle::has_robtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TRobFieldSettle::set_has_robtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TRobFieldSettle::clear_has_robtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TRobFieldSettle::clear_robtype() {
  robtype_ = 0;
  clear_has_robtype();
}
inline ::pb::ERobType TRobFieldSettle::robtype() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldSettle.RobType)
  return static_cast< ::pb::ERobType >(robtype_);
}
inline void TRobFieldSettle::set_robtype(::pb::ERobType value) {
  assert(::pb::ERobType_IsValid(value));
  set_has_robtype();
  robtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldSettle.RobType)
}

// optional uint64 WinArmyId = 2;
inline bool TRobFieldSettle::has_winarmyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TRobFieldSettle::set_has_winarmyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TRobFieldSettle::clear_has_winarmyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TRobFieldSettle::clear_winarmyid() {
  winarmyid_ = GOOGLE_ULONGLONG(0);
  clear_has_winarmyid();
}
inline ::google::protobuf::uint64 TRobFieldSettle::winarmyid() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldSettle.WinArmyId)
  return winarmyid_;
}
inline void TRobFieldSettle::set_winarmyid(::google::protobuf::uint64 value) {
  set_has_winarmyid();
  winarmyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TRobFieldSettle.WinArmyId)
}

// repeated .pb.TRobFieldArmy Armys = 3;
inline int TRobFieldSettle::armys_size() const {
  return armys_.size();
}
inline void TRobFieldSettle::clear_armys() {
  armys_.Clear();
}
inline const ::pb::TRobFieldArmy& TRobFieldSettle::armys(int index) const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldSettle.Armys)
  return armys_.Get(index);
}
inline ::pb::TRobFieldArmy* TRobFieldSettle::mutable_armys(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldSettle.Armys)
  return armys_.Mutable(index);
}
inline ::pb::TRobFieldArmy* TRobFieldSettle::add_armys() {
  // @@protoc_insertion_point(field_add:pb.TRobFieldSettle.Armys)
  return armys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldArmy >&
TRobFieldSettle::armys() const {
  // @@protoc_insertion_point(field_list:pb.TRobFieldSettle.Armys)
  return armys_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TRobFieldArmy >*
TRobFieldSettle::mutable_armys() {
  // @@protoc_insertion_point(field_mutable_list:pb.TRobFieldSettle.Armys)
  return &armys_;
}

// optional .pb.TRobFieldPriv Priv = 4;
inline bool TRobFieldSettle::has_priv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TRobFieldSettle::set_has_priv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TRobFieldSettle::clear_has_priv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TRobFieldSettle::clear_priv() {
  if (priv_ != NULL) priv_->::pb::TRobFieldPriv::Clear();
  clear_has_priv();
}
inline const ::pb::TRobFieldPriv& TRobFieldSettle::priv() const {
  // @@protoc_insertion_point(field_get:pb.TRobFieldSettle.Priv)
  return priv_ != NULL ? *priv_ : *default_instance_->priv_;
}
inline ::pb::TRobFieldPriv* TRobFieldSettle::mutable_priv() {
  set_has_priv();
  if (priv_ == NULL) priv_ = new ::pb::TRobFieldPriv;
  // @@protoc_insertion_point(field_mutable:pb.TRobFieldSettle.Priv)
  return priv_;
}
inline ::pb::TRobFieldPriv* TRobFieldSettle::release_priv() {
  clear_has_priv();
  ::pb::TRobFieldPriv* temp = priv_;
  priv_ = NULL;
  return temp;
}
inline void TRobFieldSettle::set_allocated_priv(::pb::TRobFieldPriv* priv) {
  delete priv_;
  priv_ = priv;
  if (priv) {
    set_has_priv();
  } else {
    clear_has_priv();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TRobFieldSettle.Priv)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ERobType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ERobType>() {
  return ::pb::ERobType_descriptor();
}
template <> struct is_proto_enum< ::pb::ERobFieldEntityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ERobFieldEntityType>() {
  return ::pb::ERobFieldEntityType_descriptor();
}
template <> struct is_proto_enum< ::pb::ERobFieldUserState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ERobFieldUserState>() {
  return ::pb::ERobFieldUserState_descriptor();
}
template <> struct is_proto_enum< ::pb::ERobFieldEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ERobFieldEventType>() {
  return ::pb::ERobFieldEventType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fRobField_2eproto__INCLUDED
