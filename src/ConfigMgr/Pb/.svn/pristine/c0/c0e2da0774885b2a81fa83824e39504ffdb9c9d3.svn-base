// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/UgcCommon.proto

#ifndef PROTOBUF_net_2fUgcCommon_2eproto__INCLUDED
#define PROTOBUF_net_2fUgcCommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

class TUgcCommonSingle;
class TUgcCommonCrossSceneInfo;
class TUgcCommonGetHotInfoReq;
class TUgcCommonGetHotInfoRsp;
class TUgcCommonGetCurrentInfoReq;
class TUgcCommonGetCurrentInfoRsp;
class TUgcCommonGetMyUncheckReq;
class TUgcCommonGetMyUncheckRsp;
class TUgcCommonSendMessageReq;
class TUgcCommonSendMessageRsp;
class TUgcCommonDeleteReq;
class TUgcCommonLikeReq;

enum EAppraise {
  None = 0,
  Like = 1,
  DisLike = 2
};
bool EAppraise_IsValid(int value);
const EAppraise EAppraise_MIN = None;
const EAppraise EAppraise_MAX = DisLike;
const int EAppraise_ARRAYSIZE = EAppraise_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAppraise_descriptor();
inline const ::std::string& EAppraise_Name(EAppraise value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAppraise_descriptor(), value);
}
inline bool EAppraise_Parse(
    const ::std::string& name, EAppraise* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAppraise>(
    EAppraise_descriptor(), name, value);
}
enum ECrossFuncType {
  NotCross = 0,
  Challenge = 1,
  Outsmart = 2
};
bool ECrossFuncType_IsValid(int value);
const ECrossFuncType ECrossFuncType_MIN = NotCross;
const ECrossFuncType ECrossFuncType_MAX = Outsmart;
const int ECrossFuncType_ARRAYSIZE = ECrossFuncType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECrossFuncType_descriptor();
inline const ::std::string& ECrossFuncType_Name(ECrossFuncType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECrossFuncType_descriptor(), value);
}
inline bool ECrossFuncType_Parse(
    const ::std::string& name, ECrossFuncType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECrossFuncType>(
    ECrossFuncType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TUgcCommonSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonSingle : public ::google::protobuf::Message {
 public:
  TUgcCommonSingle();
  virtual ~TUgcCommonSingle();

  TUgcCommonSingle(const TUgcCommonSingle& from);

  inline TUgcCommonSingle& operator=(const TUgcCommonSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonSingle& default_instance();

  void Swap(TUgcCommonSingle* other);

  // implements Message ----------------------------------------------

  TUgcCommonSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonSingle& from);
  void MergeFrom(const TUgcCommonSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Mid = 1;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSingle</name>
  	<Function>
  		<name>mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mid() const;
  inline void set_mid(::google::protobuf::uint64 value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSingle</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSingle</name>
  	<Function>
  		<name>content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSingle</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional string ServerId = 5;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSingle</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // optional uint32 AllLikeNum = 6;
  inline bool has_alllikenum() const;
  inline void clear_alllikenum();
  static const int kAllLikeNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSingle</name>
  	<Function>
  		<name>alllikenum</name>
  		<replaceName>AllLikeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_alllikenum</name>
  		<replaceName>AllLikeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alllikenum</name>
  		<replaceName>AllLikeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 alllikenum() const;
  inline void set_alllikenum(::google::protobuf::uint32 value);

  // optional uint32 AllDisLikeNum = 7;
  inline bool has_alldislikenum() const;
  inline void clear_alldislikenum();
  static const int kAllDisLikeNumFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSingle</name>
  	<Function>
  		<name>alldislikenum</name>
  		<replaceName>AllDisLikeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_alldislikenum</name>
  		<replaceName>AllDisLikeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_alldislikenum</name>
  		<replaceName>AllDisLikeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 alldislikenum() const;
  inline void set_alldislikenum(::google::protobuf::uint32 value);

  // optional .pb.EAppraise AppraiseStatus = 8;
  inline bool has_appraisestatus() const;
  inline void clear_appraisestatus();
  static const int kAppraiseStatusFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSingle</name>
  	<Function>
  		<name>appraisestatus</name>
  		<replaceName>AppraiseStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_appraisestatus</name>
  		<replaceName>AppraiseStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_appraisestatus</name>
  		<replaceName>AppraiseStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAppraise appraisestatus() const;
  inline void set_appraisestatus(::pb::EAppraise value);

  // optional uint64 CreateTime = 9;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSingle</name>
  	<Function>
  		<name>createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_createtime</name>
  		<replaceName>CreateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 createtime() const;
  inline void set_createtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonSingle)
 private:
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_alllikenum();
  inline void clear_has_alllikenum();
  inline void set_has_alldislikenum();
  inline void clear_has_alldislikenum();
  inline void set_has_appraisestatus();
  inline void clear_has_appraisestatus();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mid_;
  ::google::protobuf::uint64 uid_;
  ::std::string* content_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 alllikenum_;
  ::google::protobuf::uint32 alldislikenum_;
  ::google::protobuf::uint64 createtime_;
  int appraisestatus_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUgcCommonCrossSceneInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonCrossSceneInfo : public ::google::protobuf::Message {
 public:
  TUgcCommonCrossSceneInfo();
  virtual ~TUgcCommonCrossSceneInfo();

  TUgcCommonCrossSceneInfo(const TUgcCommonCrossSceneInfo& from);

  inline TUgcCommonCrossSceneInfo& operator=(const TUgcCommonCrossSceneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonCrossSceneInfo& default_instance();

  void Swap(TUgcCommonCrossSceneInfo* other);

  // implements Message ----------------------------------------------

  TUgcCommonCrossSceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonCrossSceneInfo& from);
  void MergeFrom(const TUgcCommonCrossSceneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ServerTeamId = 2;
  inline bool has_serverteamid() const;
  inline void clear_serverteamid();
  static const int kServerTeamIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonCrossSceneInfo</name>
  	<Function>
  		<name>serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 serverteamid() const;
  inline void set_serverteamid(::google::protobuf::uint32 value);

  // optional uint64 SeasonBeginTime = 3;
  inline bool has_seasonbegintime() const;
  inline void clear_seasonbegintime();
  static const int kSeasonBeginTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonCrossSceneInfo</name>
  	<Function>
  		<name>seasonbegintime</name>
  		<replaceName>SeasonBeginTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasonbegintime</name>
  		<replaceName>SeasonBeginTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasonbegintime</name>
  		<replaceName>SeasonBeginTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 seasonbegintime() const;
  inline void set_seasonbegintime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonCrossSceneInfo)
 private:
  inline void set_has_serverteamid();
  inline void clear_has_serverteamid();
  inline void set_has_seasonbegintime();
  inline void clear_has_seasonbegintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 seasonbegintime_;
  ::google::protobuf::uint32 serverteamid_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonCrossSceneInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUgcCommonGetHotInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonGetHotInfoReq : public ::google::protobuf::Message {
 public:
  TUgcCommonGetHotInfoReq();
  virtual ~TUgcCommonGetHotInfoReq();

  TUgcCommonGetHotInfoReq(const TUgcCommonGetHotInfoReq& from);

  inline TUgcCommonGetHotInfoReq& operator=(const TUgcCommonGetHotInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonGetHotInfoReq& default_instance();

  void Swap(TUgcCommonGetHotInfoReq* other);

  // implements Message ----------------------------------------------

  TUgcCommonGetHotInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonGetHotInfoReq& from);
  void MergeFrom(const TUgcCommonGetHotInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetHotInfoReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional uint32 Version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetHotInfoReq</name>
  	<Function>
  		<name>version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 PageIdx = 3;
  inline bool has_pageidx() const;
  inline void clear_pageidx();
  static const int kPageIdxFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetHotInfoReq</name>
  	<Function>
  		<name>pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pageidx() const;
  inline void set_pageidx(::google::protobuf::uint32 value);

  // optional uint32 PageSize = 4;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetHotInfoReq</name>
  	<Function>
  		<name>pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pagesize() const;
  inline void set_pagesize(::google::protobuf::uint32 value);

  // optional .pb.ECrossFuncType CrossType = 5;
  inline bool has_crosstype() const;
  inline void clear_crosstype();
  static const int kCrossTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetHotInfoReq</name>
  	<Function>
  		<name>crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossFuncType crosstype() const;
  inline void set_crosstype(::pb::ECrossFuncType value);

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
  inline bool has_crossinfo() const;
  inline void clear_crossinfo();
  static const int kCrossInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetHotInfoReq</name>
  	<Function>
  		<name>crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUgcCommonCrossSceneInfo& crossinfo() const;
  inline ::pb::TUgcCommonCrossSceneInfo* mutable_crossinfo();
  inline ::pb::TUgcCommonCrossSceneInfo* release_crossinfo();
  inline void set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo);

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonGetHotInfoReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_pageidx();
  inline void clear_has_pageidx();
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_crosstype();
  inline void clear_has_crosstype();
  inline void set_has_crossinfo();
  inline void clear_has_crossinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 scenetid_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 pageidx_;
  ::google::protobuf::uint32 pagesize_;
  ::pb::TUgcCommonCrossSceneInfo* crossinfo_;
  int crosstype_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonGetHotInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUgcCommonGetHotInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonGetHotInfoRsp : public ::google::protobuf::Message {
 public:
  TUgcCommonGetHotInfoRsp();
  virtual ~TUgcCommonGetHotInfoRsp();

  TUgcCommonGetHotInfoRsp(const TUgcCommonGetHotInfoRsp& from);

  inline TUgcCommonGetHotInfoRsp& operator=(const TUgcCommonGetHotInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonGetHotInfoRsp& default_instance();

  void Swap(TUgcCommonGetHotInfoRsp* other);

  // implements Message ----------------------------------------------

  TUgcCommonGetHotInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonGetHotInfoRsp& from);
  void MergeFrom(const TUgcCommonGetHotInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUgcCommonSingle HotArr = 1;
  inline int hotarr_size() const;
  inline void clear_hotarr();
  static const int kHotArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetHotInfoRsp</name>
  	<Function>
  		<name>hotarr</name>
  		<replaceName>HotArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hotarr</name>
  		<replaceName>HotArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hotarr</name>
  		<replaceName>HotArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hotarr</name>
  		<replaceName>HotArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hotarr_size</name>
  		<replaceName>HotArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUgcCommonSingle& hotarr(int index) const;
  inline ::pb::TUgcCommonSingle* mutable_hotarr(int index);
  inline ::pb::TUgcCommonSingle* add_hotarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >&
      hotarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >*
      mutable_hotarr();

  // optional uint32 Version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetHotInfoRsp</name>
  	<Function>
  		<name>version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonGetHotInfoRsp)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle > hotarr_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonGetHotInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUgcCommonGetCurrentInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonGetCurrentInfoReq : public ::google::protobuf::Message {
 public:
  TUgcCommonGetCurrentInfoReq();
  virtual ~TUgcCommonGetCurrentInfoReq();

  TUgcCommonGetCurrentInfoReq(const TUgcCommonGetCurrentInfoReq& from);

  inline TUgcCommonGetCurrentInfoReq& operator=(const TUgcCommonGetCurrentInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonGetCurrentInfoReq& default_instance();

  void Swap(TUgcCommonGetCurrentInfoReq* other);

  // implements Message ----------------------------------------------

  TUgcCommonGetCurrentInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonGetCurrentInfoReq& from);
  void MergeFrom(const TUgcCommonGetCurrentInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetCurrentInfoReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional uint32 Version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetCurrentInfoReq</name>
  	<Function>
  		<name>version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 PageIdx = 3;
  inline bool has_pageidx() const;
  inline void clear_pageidx();
  static const int kPageIdxFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetCurrentInfoReq</name>
  	<Function>
  		<name>pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pageidx</name>
  		<replaceName>PageIdx</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pageidx() const;
  inline void set_pageidx(::google::protobuf::uint32 value);

  // optional uint32 PageSize = 4;
  inline bool has_pagesize() const;
  inline void clear_pagesize();
  static const int kPageSizeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetCurrentInfoReq</name>
  	<Function>
  		<name>pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pagesize</name>
  		<replaceName>PageSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pagesize() const;
  inline void set_pagesize(::google::protobuf::uint32 value);

  // optional .pb.ECrossFuncType CrossType = 5;
  inline bool has_crosstype() const;
  inline void clear_crosstype();
  static const int kCrossTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetCurrentInfoReq</name>
  	<Function>
  		<name>crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossFuncType crosstype() const;
  inline void set_crosstype(::pb::ECrossFuncType value);

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
  inline bool has_crossinfo() const;
  inline void clear_crossinfo();
  static const int kCrossInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetCurrentInfoReq</name>
  	<Function>
  		<name>crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUgcCommonCrossSceneInfo& crossinfo() const;
  inline ::pb::TUgcCommonCrossSceneInfo* mutable_crossinfo();
  inline ::pb::TUgcCommonCrossSceneInfo* release_crossinfo();
  inline void set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo);

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonGetCurrentInfoReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_pageidx();
  inline void clear_has_pageidx();
  inline void set_has_pagesize();
  inline void clear_has_pagesize();
  inline void set_has_crosstype();
  inline void clear_has_crosstype();
  inline void set_has_crossinfo();
  inline void clear_has_crossinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 scenetid_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 pageidx_;
  ::google::protobuf::uint32 pagesize_;
  ::pb::TUgcCommonCrossSceneInfo* crossinfo_;
  int crosstype_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonGetCurrentInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUgcCommonGetCurrentInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonGetCurrentInfoRsp : public ::google::protobuf::Message {
 public:
  TUgcCommonGetCurrentInfoRsp();
  virtual ~TUgcCommonGetCurrentInfoRsp();

  TUgcCommonGetCurrentInfoRsp(const TUgcCommonGetCurrentInfoRsp& from);

  inline TUgcCommonGetCurrentInfoRsp& operator=(const TUgcCommonGetCurrentInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonGetCurrentInfoRsp& default_instance();

  void Swap(TUgcCommonGetCurrentInfoRsp* other);

  // implements Message ----------------------------------------------

  TUgcCommonGetCurrentInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonGetCurrentInfoRsp& from);
  void MergeFrom(const TUgcCommonGetCurrentInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUgcCommonSingle CurrentArr = 1;
  inline int currentarr_size() const;
  inline void clear_currentarr();
  static const int kCurrentArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetCurrentInfoRsp</name>
  	<Function>
  		<name>currentarr</name>
  		<replaceName>CurrentArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_currentarr</name>
  		<replaceName>CurrentArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_currentarr</name>
  		<replaceName>CurrentArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currentarr</name>
  		<replaceName>CurrentArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>currentarr_size</name>
  		<replaceName>CurrentArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUgcCommonSingle& currentarr(int index) const;
  inline ::pb::TUgcCommonSingle* mutable_currentarr(int index);
  inline ::pb::TUgcCommonSingle* add_currentarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >&
      currentarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >*
      mutable_currentarr();

  // optional uint32 Version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetCurrentInfoRsp</name>
  	<Function>
  		<name>version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_version</name>
  		<replaceName>Version</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint64 LastSendTime = 3;
  inline bool has_lastsendtime() const;
  inline void clear_lastsendtime();
  static const int kLastSendTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetCurrentInfoRsp</name>
  	<Function>
  		<name>lastsendtime</name>
  		<replaceName>LastSendTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastsendtime</name>
  		<replaceName>LastSendTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastsendtime</name>
  		<replaceName>LastSendTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastsendtime() const;
  inline void set_lastsendtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonGetCurrentInfoRsp)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_lastsendtime();
  inline void clear_has_lastsendtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle > currentarr_;
  ::google::protobuf::uint64 lastsendtime_;
  ::google::protobuf::uint32 version_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonGetCurrentInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUgcCommonGetMyUncheckReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonGetMyUncheckReq : public ::google::protobuf::Message {
 public:
  TUgcCommonGetMyUncheckReq();
  virtual ~TUgcCommonGetMyUncheckReq();

  TUgcCommonGetMyUncheckReq(const TUgcCommonGetMyUncheckReq& from);

  inline TUgcCommonGetMyUncheckReq& operator=(const TUgcCommonGetMyUncheckReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonGetMyUncheckReq& default_instance();

  void Swap(TUgcCommonGetMyUncheckReq* other);

  // implements Message ----------------------------------------------

  TUgcCommonGetMyUncheckReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonGetMyUncheckReq& from);
  void MergeFrom(const TUgcCommonGetMyUncheckReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetMyUncheckReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional .pb.ECrossFuncType CrossType = 2;
  inline bool has_crosstype() const;
  inline void clear_crosstype();
  static const int kCrossTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetMyUncheckReq</name>
  	<Function>
  		<name>crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossFuncType crosstype() const;
  inline void set_crosstype(::pb::ECrossFuncType value);

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 3;
  inline bool has_crossinfo() const;
  inline void clear_crossinfo();
  static const int kCrossInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetMyUncheckReq</name>
  	<Function>
  		<name>crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUgcCommonCrossSceneInfo& crossinfo() const;
  inline ::pb::TUgcCommonCrossSceneInfo* mutable_crossinfo();
  inline ::pb::TUgcCommonCrossSceneInfo* release_crossinfo();
  inline void set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo);

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonGetMyUncheckReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_crosstype();
  inline void clear_has_crosstype();
  inline void set_has_crossinfo();
  inline void clear_has_crossinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 scenetid_;
  int crosstype_;
  ::pb::TUgcCommonCrossSceneInfo* crossinfo_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonGetMyUncheckReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUgcCommonGetMyUncheckRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonGetMyUncheckRsp : public ::google::protobuf::Message {
 public:
  TUgcCommonGetMyUncheckRsp();
  virtual ~TUgcCommonGetMyUncheckRsp();

  TUgcCommonGetMyUncheckRsp(const TUgcCommonGetMyUncheckRsp& from);

  inline TUgcCommonGetMyUncheckRsp& operator=(const TUgcCommonGetMyUncheckRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonGetMyUncheckRsp& default_instance();

  void Swap(TUgcCommonGetMyUncheckRsp* other);

  // implements Message ----------------------------------------------

  TUgcCommonGetMyUncheckRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonGetMyUncheckRsp& from);
  void MergeFrom(const TUgcCommonGetMyUncheckRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUgcCommonSingle UncheckArr = 1;
  inline int uncheckarr_size() const;
  inline void clear_uncheckarr();
  static const int kUncheckArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonGetMyUncheckRsp</name>
  	<Function>
  		<name>uncheckarr</name>
  		<replaceName>UncheckArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_uncheckarr</name>
  		<replaceName>UncheckArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_uncheckarr</name>
  		<replaceName>UncheckArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uncheckarr</name>
  		<replaceName>UncheckArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>uncheckarr_size</name>
  		<replaceName>UncheckArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUgcCommonSingle& uncheckarr(int index) const;
  inline ::pb::TUgcCommonSingle* mutable_uncheckarr(int index);
  inline ::pb::TUgcCommonSingle* add_uncheckarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >&
      uncheckarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >*
      mutable_uncheckarr();

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonGetMyUncheckRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle > uncheckarr_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonGetMyUncheckRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUgcCommonSendMessageReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonSendMessageReq : public ::google::protobuf::Message {
 public:
  TUgcCommonSendMessageReq();
  virtual ~TUgcCommonSendMessageReq();

  TUgcCommonSendMessageReq(const TUgcCommonSendMessageReq& from);

  inline TUgcCommonSendMessageReq& operator=(const TUgcCommonSendMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonSendMessageReq& default_instance();

  void Swap(TUgcCommonSendMessageReq* other);

  // implements Message ----------------------------------------------

  TUgcCommonSendMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonSendMessageReq& from);
  void MergeFrom(const TUgcCommonSendMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSendMessageReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional uint64 Uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSendMessageReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSendMessageReq</name>
  	<Function>
  		<name>content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string Xpid = 4;
  inline bool has_xpid() const;
  inline void clear_xpid();
  static const int kXpidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSendMessageReq</name>
  	<Function>
  		<name>xpid</name>
  		<replaceName>Xpid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_xpid</name>
  		<replaceName>Xpid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_xpid</name>
  		<replaceName>Xpid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& xpid() const;
  inline void set_xpid(const ::std::string& value);
  inline void set_xpid(const char* value);
  inline void set_xpid(const char* value, size_t size);
  inline ::std::string* mutable_xpid();
  inline ::std::string* release_xpid();
  inline void set_allocated_xpid(::std::string* xpid);

  // optional .pb.ECrossFuncType CrossType = 5;
  inline bool has_crosstype() const;
  inline void clear_crosstype();
  static const int kCrossTypeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSendMessageReq</name>
  	<Function>
  		<name>crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossFuncType crosstype() const;
  inline void set_crosstype(::pb::ECrossFuncType value);

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
  inline bool has_crossinfo() const;
  inline void clear_crossinfo();
  static const int kCrossInfoFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSendMessageReq</name>
  	<Function>
  		<name>crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUgcCommonCrossSceneInfo& crossinfo() const;
  inline ::pb::TUgcCommonCrossSceneInfo* mutable_crossinfo();
  inline ::pb::TUgcCommonCrossSceneInfo* release_crossinfo();
  inline void set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo);

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonSendMessageReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_xpid();
  inline void clear_has_xpid();
  inline void set_has_crosstype();
  inline void clear_has_crosstype();
  inline void set_has_crossinfo();
  inline void clear_has_crossinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* content_;
  ::google::protobuf::uint32 scenetid_;
  int crosstype_;
  ::std::string* xpid_;
  ::pb::TUgcCommonCrossSceneInfo* crossinfo_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonSendMessageReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUgcCommonSendMessageRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonSendMessageRsp : public ::google::protobuf::Message {
 public:
  TUgcCommonSendMessageRsp();
  virtual ~TUgcCommonSendMessageRsp();

  TUgcCommonSendMessageRsp(const TUgcCommonSendMessageRsp& from);

  inline TUgcCommonSendMessageRsp& operator=(const TUgcCommonSendMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonSendMessageRsp& default_instance();

  void Swap(TUgcCommonSendMessageRsp* other);

  // implements Message ----------------------------------------------

  TUgcCommonSendMessageRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonSendMessageRsp& from);
  void MergeFrom(const TUgcCommonSendMessageRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUgcCommonSingle MsgInfo = 1;
  inline bool has_msginfo() const;
  inline void clear_msginfo();
  static const int kMsgInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonSendMessageRsp</name>
  	<Function>
  		<name>msginfo</name>
  		<replaceName>MsgInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_msginfo</name>
  		<replaceName>MsgInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_msginfo</name>
  		<replaceName>MsgInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_msginfo</name>
  		<replaceName>MsgInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUgcCommonSingle& msginfo() const;
  inline ::pb::TUgcCommonSingle* mutable_msginfo();
  inline ::pb::TUgcCommonSingle* release_msginfo();
  inline void set_allocated_msginfo(::pb::TUgcCommonSingle* msginfo);

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonSendMessageRsp)
 private:
  inline void set_has_msginfo();
  inline void clear_has_msginfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUgcCommonSingle* msginfo_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonSendMessageRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUgcCommonDeleteReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonDeleteReq : public ::google::protobuf::Message {
 public:
  TUgcCommonDeleteReq();
  virtual ~TUgcCommonDeleteReq();

  TUgcCommonDeleteReq(const TUgcCommonDeleteReq& from);

  inline TUgcCommonDeleteReq& operator=(const TUgcCommonDeleteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonDeleteReq& default_instance();

  void Swap(TUgcCommonDeleteReq* other);

  // implements Message ----------------------------------------------

  TUgcCommonDeleteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonDeleteReq& from);
  void MergeFrom(const TUgcCommonDeleteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonDeleteReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional uint64 Mid = 2;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonDeleteReq</name>
  	<Function>
  		<name>mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mid() const;
  inline void set_mid(::google::protobuf::uint64 value);

  // optional .pb.ECrossFuncType CrossType = 3;
  inline bool has_crosstype() const;
  inline void clear_crosstype();
  static const int kCrossTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonDeleteReq</name>
  	<Function>
  		<name>crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossFuncType crosstype() const;
  inline void set_crosstype(::pb::ECrossFuncType value);

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 4;
  inline bool has_crossinfo() const;
  inline void clear_crossinfo();
  static const int kCrossInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonDeleteReq</name>
  	<Function>
  		<name>crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUgcCommonCrossSceneInfo& crossinfo() const;
  inline ::pb::TUgcCommonCrossSceneInfo* mutable_crossinfo();
  inline ::pb::TUgcCommonCrossSceneInfo* release_crossinfo();
  inline void set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo);

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonDeleteReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_crosstype();
  inline void clear_has_crosstype();
  inline void set_has_crossinfo();
  inline void clear_has_crossinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mid_;
  ::google::protobuf::uint32 scenetid_;
  int crosstype_;
  ::pb::TUgcCommonCrossSceneInfo* crossinfo_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonDeleteReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TUgcCommonLikeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/UgcCommon.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TUgcCommonLikeReq : public ::google::protobuf::Message {
 public:
  TUgcCommonLikeReq();
  virtual ~TUgcCommonLikeReq();

  TUgcCommonLikeReq(const TUgcCommonLikeReq& from);

  inline TUgcCommonLikeReq& operator=(const TUgcCommonLikeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TUgcCommonLikeReq& default_instance();

  void Swap(TUgcCommonLikeReq* other);

  // implements Message ----------------------------------------------

  TUgcCommonLikeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TUgcCommonLikeReq& from);
  void MergeFrom(const TUgcCommonLikeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 SceneTid = 1;
  inline bool has_scenetid() const;
  inline void clear_scenetid();
  static const int kSceneTidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonLikeReq</name>
  	<Function>
  		<name>scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_scenetid</name>
  		<replaceName>SceneTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 scenetid() const;
  inline void set_scenetid(::google::protobuf::uint32 value);

  // optional uint64 Mid = 2;
  inline bool has_mid() const;
  inline void clear_mid();
  static const int kMidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonLikeReq</name>
  	<Function>
  		<name>mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mid</name>
  		<replaceName>Mid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 mid() const;
  inline void set_mid(::google::protobuf::uint64 value);

  // optional .pb.EAppraise AppraiseStatus = 3;
  inline bool has_appraisestatus() const;
  inline void clear_appraisestatus();
  static const int kAppraiseStatusFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonLikeReq</name>
  	<Function>
  		<name>appraisestatus</name>
  		<replaceName>AppraiseStatus</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_appraisestatus</name>
  		<replaceName>AppraiseStatus</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_appraisestatus</name>
  		<replaceName>AppraiseStatus</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EAppraise appraisestatus() const;
  inline void set_appraisestatus(::pb::EAppraise value);

  // optional .pb.ECrossFuncType CrossType = 4;
  inline bool has_crosstype() const;
  inline void clear_crosstype();
  static const int kCrossTypeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonLikeReq</name>
  	<Function>
  		<name>crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crosstype</name>
  		<replaceName>CrossType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossFuncType crosstype() const;
  inline void set_crosstype(::pb::ECrossFuncType value);

  // optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 5;
  inline bool has_crossinfo() const;
  inline void clear_crossinfo();
  static const int kCrossInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TUgcCommonLikeReq</name>
  	<Function>
  		<name>crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_crossinfo</name>
  		<replaceName>CrossInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUgcCommonCrossSceneInfo& crossinfo() const;
  inline ::pb::TUgcCommonCrossSceneInfo* mutable_crossinfo();
  inline ::pb::TUgcCommonCrossSceneInfo* release_crossinfo();
  inline void set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo);

  // @@protoc_insertion_point(class_scope:pb.TUgcCommonLikeReq)
 private:
  inline void set_has_scenetid();
  inline void clear_has_scenetid();
  inline void set_has_mid();
  inline void clear_has_mid();
  inline void set_has_appraisestatus();
  inline void clear_has_appraisestatus();
  inline void set_has_crosstype();
  inline void clear_has_crosstype();
  inline void set_has_crossinfo();
  inline void clear_has_crossinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 mid_;
  ::google::protobuf::uint32 scenetid_;
  int appraisestatus_;
  ::pb::TUgcCommonCrossSceneInfo* crossinfo_;
  int crosstype_;
  friend void  protobuf_AddDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_AssignDesc_net_2fUgcCommon_2eproto();
  friend void protobuf_ShutdownFile_net_2fUgcCommon_2eproto();

  void InitAsDefaultInstance();
  static TUgcCommonLikeReq* default_instance_;
};
// ===================================================================


// ===================================================================

// TUgcCommonSingle

// optional uint64 Mid = 1;
inline bool TUgcCommonSingle::has_mid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUgcCommonSingle::set_has_mid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUgcCommonSingle::clear_has_mid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUgcCommonSingle::clear_mid() {
  mid_ = GOOGLE_ULONGLONG(0);
  clear_has_mid();
}
inline ::google::protobuf::uint64 TUgcCommonSingle::mid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSingle.Mid)
  return mid_;
}
inline void TUgcCommonSingle::set_mid(::google::protobuf::uint64 value) {
  set_has_mid();
  mid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSingle.Mid)
}

// optional uint64 Uid = 2;
inline bool TUgcCommonSingle::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUgcCommonSingle::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUgcCommonSingle::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUgcCommonSingle::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TUgcCommonSingle::uid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSingle.Uid)
  return uid_;
}
inline void TUgcCommonSingle::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSingle.Uid)
}

// optional string Content = 3;
inline bool TUgcCommonSingle::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUgcCommonSingle::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUgcCommonSingle::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUgcCommonSingle::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TUgcCommonSingle::content() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSingle.Content)
  return *content_;
}
inline void TUgcCommonSingle::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSingle.Content)
}
inline void TUgcCommonSingle::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUgcCommonSingle.Content)
}
inline void TUgcCommonSingle::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUgcCommonSingle.Content)
}
inline ::std::string* TUgcCommonSingle::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonSingle.Content)
  return content_;
}
inline ::std::string* TUgcCommonSingle::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUgcCommonSingle::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonSingle.Content)
}

// optional .pb.TUserSimpleInfo UserInfo = 4;
inline bool TUgcCommonSingle::has_userinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUgcCommonSingle::set_has_userinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUgcCommonSingle::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUgcCommonSingle::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TUgcCommonSingle::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSingle.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TUgcCommonSingle::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonSingle.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TUgcCommonSingle::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TUgcCommonSingle::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonSingle.UserInfo)
}

// optional string ServerId = 5;
inline bool TUgcCommonSingle::has_serverid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUgcCommonSingle::set_has_serverid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUgcCommonSingle::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUgcCommonSingle::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TUgcCommonSingle::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSingle.ServerId)
  return *serverid_;
}
inline void TUgcCommonSingle::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSingle.ServerId)
}
inline void TUgcCommonSingle::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUgcCommonSingle.ServerId)
}
inline void TUgcCommonSingle::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUgcCommonSingle.ServerId)
}
inline ::std::string* TUgcCommonSingle::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonSingle.ServerId)
  return serverid_;
}
inline ::std::string* TUgcCommonSingle::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUgcCommonSingle::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonSingle.ServerId)
}

// optional uint32 AllLikeNum = 6;
inline bool TUgcCommonSingle::has_alllikenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUgcCommonSingle::set_has_alllikenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUgcCommonSingle::clear_has_alllikenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUgcCommonSingle::clear_alllikenum() {
  alllikenum_ = 0u;
  clear_has_alllikenum();
}
inline ::google::protobuf::uint32 TUgcCommonSingle::alllikenum() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSingle.AllLikeNum)
  return alllikenum_;
}
inline void TUgcCommonSingle::set_alllikenum(::google::protobuf::uint32 value) {
  set_has_alllikenum();
  alllikenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSingle.AllLikeNum)
}

// optional uint32 AllDisLikeNum = 7;
inline bool TUgcCommonSingle::has_alldislikenum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TUgcCommonSingle::set_has_alldislikenum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TUgcCommonSingle::clear_has_alldislikenum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TUgcCommonSingle::clear_alldislikenum() {
  alldislikenum_ = 0u;
  clear_has_alldislikenum();
}
inline ::google::protobuf::uint32 TUgcCommonSingle::alldislikenum() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSingle.AllDisLikeNum)
  return alldislikenum_;
}
inline void TUgcCommonSingle::set_alldislikenum(::google::protobuf::uint32 value) {
  set_has_alldislikenum();
  alldislikenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSingle.AllDisLikeNum)
}

// optional .pb.EAppraise AppraiseStatus = 8;
inline bool TUgcCommonSingle::has_appraisestatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TUgcCommonSingle::set_has_appraisestatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TUgcCommonSingle::clear_has_appraisestatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TUgcCommonSingle::clear_appraisestatus() {
  appraisestatus_ = 0;
  clear_has_appraisestatus();
}
inline ::pb::EAppraise TUgcCommonSingle::appraisestatus() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSingle.AppraiseStatus)
  return static_cast< ::pb::EAppraise >(appraisestatus_);
}
inline void TUgcCommonSingle::set_appraisestatus(::pb::EAppraise value) {
  assert(::pb::EAppraise_IsValid(value));
  set_has_appraisestatus();
  appraisestatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSingle.AppraiseStatus)
}

// optional uint64 CreateTime = 9;
inline bool TUgcCommonSingle::has_createtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TUgcCommonSingle::set_has_createtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TUgcCommonSingle::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TUgcCommonSingle::clear_createtime() {
  createtime_ = GOOGLE_ULONGLONG(0);
  clear_has_createtime();
}
inline ::google::protobuf::uint64 TUgcCommonSingle::createtime() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSingle.CreateTime)
  return createtime_;
}
inline void TUgcCommonSingle::set_createtime(::google::protobuf::uint64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSingle.CreateTime)
}

// -------------------------------------------------------------------

// TUgcCommonCrossSceneInfo

// optional uint32 ServerTeamId = 2;
inline bool TUgcCommonCrossSceneInfo::has_serverteamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUgcCommonCrossSceneInfo::set_has_serverteamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUgcCommonCrossSceneInfo::clear_has_serverteamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUgcCommonCrossSceneInfo::clear_serverteamid() {
  serverteamid_ = 0u;
  clear_has_serverteamid();
}
inline ::google::protobuf::uint32 TUgcCommonCrossSceneInfo::serverteamid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonCrossSceneInfo.ServerTeamId)
  return serverteamid_;
}
inline void TUgcCommonCrossSceneInfo::set_serverteamid(::google::protobuf::uint32 value) {
  set_has_serverteamid();
  serverteamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonCrossSceneInfo.ServerTeamId)
}

// optional uint64 SeasonBeginTime = 3;
inline bool TUgcCommonCrossSceneInfo::has_seasonbegintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUgcCommonCrossSceneInfo::set_has_seasonbegintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUgcCommonCrossSceneInfo::clear_has_seasonbegintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUgcCommonCrossSceneInfo::clear_seasonbegintime() {
  seasonbegintime_ = GOOGLE_ULONGLONG(0);
  clear_has_seasonbegintime();
}
inline ::google::protobuf::uint64 TUgcCommonCrossSceneInfo::seasonbegintime() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonCrossSceneInfo.SeasonBeginTime)
  return seasonbegintime_;
}
inline void TUgcCommonCrossSceneInfo::set_seasonbegintime(::google::protobuf::uint64 value) {
  set_has_seasonbegintime();
  seasonbegintime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonCrossSceneInfo.SeasonBeginTime)
}

// -------------------------------------------------------------------

// TUgcCommonGetHotInfoReq

// optional uint32 SceneTid = 1;
inline bool TUgcCommonGetHotInfoReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUgcCommonGetHotInfoReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUgcCommonGetHotInfoReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUgcCommonGetHotInfoReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TUgcCommonGetHotInfoReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetHotInfoReq.SceneTid)
  return scenetid_;
}
inline void TUgcCommonGetHotInfoReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetHotInfoReq.SceneTid)
}

// optional uint32 Version = 2;
inline bool TUgcCommonGetHotInfoReq::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUgcCommonGetHotInfoReq::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUgcCommonGetHotInfoReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUgcCommonGetHotInfoReq::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TUgcCommonGetHotInfoReq::version() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetHotInfoReq.Version)
  return version_;
}
inline void TUgcCommonGetHotInfoReq::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetHotInfoReq.Version)
}

// optional uint32 PageIdx = 3;
inline bool TUgcCommonGetHotInfoReq::has_pageidx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUgcCommonGetHotInfoReq::set_has_pageidx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUgcCommonGetHotInfoReq::clear_has_pageidx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUgcCommonGetHotInfoReq::clear_pageidx() {
  pageidx_ = 0u;
  clear_has_pageidx();
}
inline ::google::protobuf::uint32 TUgcCommonGetHotInfoReq::pageidx() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetHotInfoReq.PageIdx)
  return pageidx_;
}
inline void TUgcCommonGetHotInfoReq::set_pageidx(::google::protobuf::uint32 value) {
  set_has_pageidx();
  pageidx_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetHotInfoReq.PageIdx)
}

// optional uint32 PageSize = 4;
inline bool TUgcCommonGetHotInfoReq::has_pagesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUgcCommonGetHotInfoReq::set_has_pagesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUgcCommonGetHotInfoReq::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUgcCommonGetHotInfoReq::clear_pagesize() {
  pagesize_ = 0u;
  clear_has_pagesize();
}
inline ::google::protobuf::uint32 TUgcCommonGetHotInfoReq::pagesize() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetHotInfoReq.PageSize)
  return pagesize_;
}
inline void TUgcCommonGetHotInfoReq::set_pagesize(::google::protobuf::uint32 value) {
  set_has_pagesize();
  pagesize_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetHotInfoReq.PageSize)
}

// optional .pb.ECrossFuncType CrossType = 5;
inline bool TUgcCommonGetHotInfoReq::has_crosstype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUgcCommonGetHotInfoReq::set_has_crosstype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUgcCommonGetHotInfoReq::clear_has_crosstype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUgcCommonGetHotInfoReq::clear_crosstype() {
  crosstype_ = 0;
  clear_has_crosstype();
}
inline ::pb::ECrossFuncType TUgcCommonGetHotInfoReq::crosstype() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetHotInfoReq.CrossType)
  return static_cast< ::pb::ECrossFuncType >(crosstype_);
}
inline void TUgcCommonGetHotInfoReq::set_crosstype(::pb::ECrossFuncType value) {
  assert(::pb::ECrossFuncType_IsValid(value));
  set_has_crosstype();
  crosstype_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetHotInfoReq.CrossType)
}

// optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
inline bool TUgcCommonGetHotInfoReq::has_crossinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUgcCommonGetHotInfoReq::set_has_crossinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUgcCommonGetHotInfoReq::clear_has_crossinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUgcCommonGetHotInfoReq::clear_crossinfo() {
  if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
  clear_has_crossinfo();
}
inline const ::pb::TUgcCommonCrossSceneInfo& TUgcCommonGetHotInfoReq::crossinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetHotInfoReq.CrossInfo)
  return crossinfo_ != NULL ? *crossinfo_ : *default_instance_->crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonGetHotInfoReq::mutable_crossinfo() {
  set_has_crossinfo();
  if (crossinfo_ == NULL) crossinfo_ = new ::pb::TUgcCommonCrossSceneInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonGetHotInfoReq.CrossInfo)
  return crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonGetHotInfoReq::release_crossinfo() {
  clear_has_crossinfo();
  ::pb::TUgcCommonCrossSceneInfo* temp = crossinfo_;
  crossinfo_ = NULL;
  return temp;
}
inline void TUgcCommonGetHotInfoReq::set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo) {
  delete crossinfo_;
  crossinfo_ = crossinfo;
  if (crossinfo) {
    set_has_crossinfo();
  } else {
    clear_has_crossinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonGetHotInfoReq.CrossInfo)
}

// -------------------------------------------------------------------

// TUgcCommonGetHotInfoRsp

// repeated .pb.TUgcCommonSingle HotArr = 1;
inline int TUgcCommonGetHotInfoRsp::hotarr_size() const {
  return hotarr_.size();
}
inline void TUgcCommonGetHotInfoRsp::clear_hotarr() {
  hotarr_.Clear();
}
inline const ::pb::TUgcCommonSingle& TUgcCommonGetHotInfoRsp::hotarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetHotInfoRsp.HotArr)
  return hotarr_.Get(index);
}
inline ::pb::TUgcCommonSingle* TUgcCommonGetHotInfoRsp::mutable_hotarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonGetHotInfoRsp.HotArr)
  return hotarr_.Mutable(index);
}
inline ::pb::TUgcCommonSingle* TUgcCommonGetHotInfoRsp::add_hotarr() {
  // @@protoc_insertion_point(field_add:pb.TUgcCommonGetHotInfoRsp.HotArr)
  return hotarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >&
TUgcCommonGetHotInfoRsp::hotarr() const {
  // @@protoc_insertion_point(field_list:pb.TUgcCommonGetHotInfoRsp.HotArr)
  return hotarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >*
TUgcCommonGetHotInfoRsp::mutable_hotarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUgcCommonGetHotInfoRsp.HotArr)
  return &hotarr_;
}

// optional uint32 Version = 2;
inline bool TUgcCommonGetHotInfoRsp::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUgcCommonGetHotInfoRsp::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUgcCommonGetHotInfoRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUgcCommonGetHotInfoRsp::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TUgcCommonGetHotInfoRsp::version() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetHotInfoRsp.Version)
  return version_;
}
inline void TUgcCommonGetHotInfoRsp::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetHotInfoRsp.Version)
}

// -------------------------------------------------------------------

// TUgcCommonGetCurrentInfoReq

// optional uint32 SceneTid = 1;
inline bool TUgcCommonGetCurrentInfoReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUgcCommonGetCurrentInfoReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TUgcCommonGetCurrentInfoReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetCurrentInfoReq.SceneTid)
  return scenetid_;
}
inline void TUgcCommonGetCurrentInfoReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetCurrentInfoReq.SceneTid)
}

// optional uint32 Version = 2;
inline bool TUgcCommonGetCurrentInfoReq::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUgcCommonGetCurrentInfoReq::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TUgcCommonGetCurrentInfoReq::version() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetCurrentInfoReq.Version)
  return version_;
}
inline void TUgcCommonGetCurrentInfoReq::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetCurrentInfoReq.Version)
}

// optional uint32 PageIdx = 3;
inline bool TUgcCommonGetCurrentInfoReq::has_pageidx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUgcCommonGetCurrentInfoReq::set_has_pageidx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_has_pageidx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_pageidx() {
  pageidx_ = 0u;
  clear_has_pageidx();
}
inline ::google::protobuf::uint32 TUgcCommonGetCurrentInfoReq::pageidx() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetCurrentInfoReq.PageIdx)
  return pageidx_;
}
inline void TUgcCommonGetCurrentInfoReq::set_pageidx(::google::protobuf::uint32 value) {
  set_has_pageidx();
  pageidx_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetCurrentInfoReq.PageIdx)
}

// optional uint32 PageSize = 4;
inline bool TUgcCommonGetCurrentInfoReq::has_pagesize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUgcCommonGetCurrentInfoReq::set_has_pagesize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_has_pagesize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_pagesize() {
  pagesize_ = 0u;
  clear_has_pagesize();
}
inline ::google::protobuf::uint32 TUgcCommonGetCurrentInfoReq::pagesize() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetCurrentInfoReq.PageSize)
  return pagesize_;
}
inline void TUgcCommonGetCurrentInfoReq::set_pagesize(::google::protobuf::uint32 value) {
  set_has_pagesize();
  pagesize_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetCurrentInfoReq.PageSize)
}

// optional .pb.ECrossFuncType CrossType = 5;
inline bool TUgcCommonGetCurrentInfoReq::has_crosstype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUgcCommonGetCurrentInfoReq::set_has_crosstype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_has_crosstype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_crosstype() {
  crosstype_ = 0;
  clear_has_crosstype();
}
inline ::pb::ECrossFuncType TUgcCommonGetCurrentInfoReq::crosstype() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetCurrentInfoReq.CrossType)
  return static_cast< ::pb::ECrossFuncType >(crosstype_);
}
inline void TUgcCommonGetCurrentInfoReq::set_crosstype(::pb::ECrossFuncType value) {
  assert(::pb::ECrossFuncType_IsValid(value));
  set_has_crosstype();
  crosstype_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetCurrentInfoReq.CrossType)
}

// optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
inline bool TUgcCommonGetCurrentInfoReq::has_crossinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUgcCommonGetCurrentInfoReq::set_has_crossinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_has_crossinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUgcCommonGetCurrentInfoReq::clear_crossinfo() {
  if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
  clear_has_crossinfo();
}
inline const ::pb::TUgcCommonCrossSceneInfo& TUgcCommonGetCurrentInfoReq::crossinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetCurrentInfoReq.CrossInfo)
  return crossinfo_ != NULL ? *crossinfo_ : *default_instance_->crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonGetCurrentInfoReq::mutable_crossinfo() {
  set_has_crossinfo();
  if (crossinfo_ == NULL) crossinfo_ = new ::pb::TUgcCommonCrossSceneInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonGetCurrentInfoReq.CrossInfo)
  return crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonGetCurrentInfoReq::release_crossinfo() {
  clear_has_crossinfo();
  ::pb::TUgcCommonCrossSceneInfo* temp = crossinfo_;
  crossinfo_ = NULL;
  return temp;
}
inline void TUgcCommonGetCurrentInfoReq::set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo) {
  delete crossinfo_;
  crossinfo_ = crossinfo;
  if (crossinfo) {
    set_has_crossinfo();
  } else {
    clear_has_crossinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonGetCurrentInfoReq.CrossInfo)
}

// -------------------------------------------------------------------

// TUgcCommonGetCurrentInfoRsp

// repeated .pb.TUgcCommonSingle CurrentArr = 1;
inline int TUgcCommonGetCurrentInfoRsp::currentarr_size() const {
  return currentarr_.size();
}
inline void TUgcCommonGetCurrentInfoRsp::clear_currentarr() {
  currentarr_.Clear();
}
inline const ::pb::TUgcCommonSingle& TUgcCommonGetCurrentInfoRsp::currentarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetCurrentInfoRsp.CurrentArr)
  return currentarr_.Get(index);
}
inline ::pb::TUgcCommonSingle* TUgcCommonGetCurrentInfoRsp::mutable_currentarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonGetCurrentInfoRsp.CurrentArr)
  return currentarr_.Mutable(index);
}
inline ::pb::TUgcCommonSingle* TUgcCommonGetCurrentInfoRsp::add_currentarr() {
  // @@protoc_insertion_point(field_add:pb.TUgcCommonGetCurrentInfoRsp.CurrentArr)
  return currentarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >&
TUgcCommonGetCurrentInfoRsp::currentarr() const {
  // @@protoc_insertion_point(field_list:pb.TUgcCommonGetCurrentInfoRsp.CurrentArr)
  return currentarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >*
TUgcCommonGetCurrentInfoRsp::mutable_currentarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUgcCommonGetCurrentInfoRsp.CurrentArr)
  return &currentarr_;
}

// optional uint32 Version = 2;
inline bool TUgcCommonGetCurrentInfoRsp::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUgcCommonGetCurrentInfoRsp::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUgcCommonGetCurrentInfoRsp::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUgcCommonGetCurrentInfoRsp::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 TUgcCommonGetCurrentInfoRsp::version() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetCurrentInfoRsp.Version)
  return version_;
}
inline void TUgcCommonGetCurrentInfoRsp::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetCurrentInfoRsp.Version)
}

// optional uint64 LastSendTime = 3;
inline bool TUgcCommonGetCurrentInfoRsp::has_lastsendtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUgcCommonGetCurrentInfoRsp::set_has_lastsendtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUgcCommonGetCurrentInfoRsp::clear_has_lastsendtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUgcCommonGetCurrentInfoRsp::clear_lastsendtime() {
  lastsendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastsendtime();
}
inline ::google::protobuf::uint64 TUgcCommonGetCurrentInfoRsp::lastsendtime() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetCurrentInfoRsp.LastSendTime)
  return lastsendtime_;
}
inline void TUgcCommonGetCurrentInfoRsp::set_lastsendtime(::google::protobuf::uint64 value) {
  set_has_lastsendtime();
  lastsendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetCurrentInfoRsp.LastSendTime)
}

// -------------------------------------------------------------------

// TUgcCommonGetMyUncheckReq

// optional uint32 SceneTid = 1;
inline bool TUgcCommonGetMyUncheckReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUgcCommonGetMyUncheckReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUgcCommonGetMyUncheckReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUgcCommonGetMyUncheckReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TUgcCommonGetMyUncheckReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetMyUncheckReq.SceneTid)
  return scenetid_;
}
inline void TUgcCommonGetMyUncheckReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetMyUncheckReq.SceneTid)
}

// optional .pb.ECrossFuncType CrossType = 2;
inline bool TUgcCommonGetMyUncheckReq::has_crosstype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUgcCommonGetMyUncheckReq::set_has_crosstype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUgcCommonGetMyUncheckReq::clear_has_crosstype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUgcCommonGetMyUncheckReq::clear_crosstype() {
  crosstype_ = 0;
  clear_has_crosstype();
}
inline ::pb::ECrossFuncType TUgcCommonGetMyUncheckReq::crosstype() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetMyUncheckReq.CrossType)
  return static_cast< ::pb::ECrossFuncType >(crosstype_);
}
inline void TUgcCommonGetMyUncheckReq::set_crosstype(::pb::ECrossFuncType value) {
  assert(::pb::ECrossFuncType_IsValid(value));
  set_has_crosstype();
  crosstype_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonGetMyUncheckReq.CrossType)
}

// optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 3;
inline bool TUgcCommonGetMyUncheckReq::has_crossinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUgcCommonGetMyUncheckReq::set_has_crossinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUgcCommonGetMyUncheckReq::clear_has_crossinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUgcCommonGetMyUncheckReq::clear_crossinfo() {
  if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
  clear_has_crossinfo();
}
inline const ::pb::TUgcCommonCrossSceneInfo& TUgcCommonGetMyUncheckReq::crossinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetMyUncheckReq.CrossInfo)
  return crossinfo_ != NULL ? *crossinfo_ : *default_instance_->crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonGetMyUncheckReq::mutable_crossinfo() {
  set_has_crossinfo();
  if (crossinfo_ == NULL) crossinfo_ = new ::pb::TUgcCommonCrossSceneInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonGetMyUncheckReq.CrossInfo)
  return crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonGetMyUncheckReq::release_crossinfo() {
  clear_has_crossinfo();
  ::pb::TUgcCommonCrossSceneInfo* temp = crossinfo_;
  crossinfo_ = NULL;
  return temp;
}
inline void TUgcCommonGetMyUncheckReq::set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo) {
  delete crossinfo_;
  crossinfo_ = crossinfo;
  if (crossinfo) {
    set_has_crossinfo();
  } else {
    clear_has_crossinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonGetMyUncheckReq.CrossInfo)
}

// -------------------------------------------------------------------

// TUgcCommonGetMyUncheckRsp

// repeated .pb.TUgcCommonSingle UncheckArr = 1;
inline int TUgcCommonGetMyUncheckRsp::uncheckarr_size() const {
  return uncheckarr_.size();
}
inline void TUgcCommonGetMyUncheckRsp::clear_uncheckarr() {
  uncheckarr_.Clear();
}
inline const ::pb::TUgcCommonSingle& TUgcCommonGetMyUncheckRsp::uncheckarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonGetMyUncheckRsp.UncheckArr)
  return uncheckarr_.Get(index);
}
inline ::pb::TUgcCommonSingle* TUgcCommonGetMyUncheckRsp::mutable_uncheckarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonGetMyUncheckRsp.UncheckArr)
  return uncheckarr_.Mutable(index);
}
inline ::pb::TUgcCommonSingle* TUgcCommonGetMyUncheckRsp::add_uncheckarr() {
  // @@protoc_insertion_point(field_add:pb.TUgcCommonGetMyUncheckRsp.UncheckArr)
  return uncheckarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >&
TUgcCommonGetMyUncheckRsp::uncheckarr() const {
  // @@protoc_insertion_point(field_list:pb.TUgcCommonGetMyUncheckRsp.UncheckArr)
  return uncheckarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUgcCommonSingle >*
TUgcCommonGetMyUncheckRsp::mutable_uncheckarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TUgcCommonGetMyUncheckRsp.UncheckArr)
  return &uncheckarr_;
}

// -------------------------------------------------------------------

// TUgcCommonSendMessageReq

// optional uint32 SceneTid = 1;
inline bool TUgcCommonSendMessageReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUgcCommonSendMessageReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUgcCommonSendMessageReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUgcCommonSendMessageReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TUgcCommonSendMessageReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSendMessageReq.SceneTid)
  return scenetid_;
}
inline void TUgcCommonSendMessageReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSendMessageReq.SceneTid)
}

// optional uint64 Uid = 2;
inline bool TUgcCommonSendMessageReq::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUgcCommonSendMessageReq::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUgcCommonSendMessageReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUgcCommonSendMessageReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TUgcCommonSendMessageReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSendMessageReq.Uid)
  return uid_;
}
inline void TUgcCommonSendMessageReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSendMessageReq.Uid)
}

// optional string Content = 3;
inline bool TUgcCommonSendMessageReq::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUgcCommonSendMessageReq::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUgcCommonSendMessageReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUgcCommonSendMessageReq::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TUgcCommonSendMessageReq::content() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSendMessageReq.Content)
  return *content_;
}
inline void TUgcCommonSendMessageReq::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSendMessageReq.Content)
}
inline void TUgcCommonSendMessageReq::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUgcCommonSendMessageReq.Content)
}
inline void TUgcCommonSendMessageReq::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUgcCommonSendMessageReq.Content)
}
inline ::std::string* TUgcCommonSendMessageReq::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonSendMessageReq.Content)
  return content_;
}
inline ::std::string* TUgcCommonSendMessageReq::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUgcCommonSendMessageReq::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonSendMessageReq.Content)
}

// optional string Xpid = 4;
inline bool TUgcCommonSendMessageReq::has_xpid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUgcCommonSendMessageReq::set_has_xpid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUgcCommonSendMessageReq::clear_has_xpid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUgcCommonSendMessageReq::clear_xpid() {
  if (xpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_->clear();
  }
  clear_has_xpid();
}
inline const ::std::string& TUgcCommonSendMessageReq::xpid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSendMessageReq.Xpid)
  return *xpid_;
}
inline void TUgcCommonSendMessageReq::set_xpid(const ::std::string& value) {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  xpid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSendMessageReq.Xpid)
}
inline void TUgcCommonSendMessageReq::set_xpid(const char* value) {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  xpid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TUgcCommonSendMessageReq.Xpid)
}
inline void TUgcCommonSendMessageReq::set_xpid(const char* value, size_t size) {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  xpid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TUgcCommonSendMessageReq.Xpid)
}
inline ::std::string* TUgcCommonSendMessageReq::mutable_xpid() {
  set_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    xpid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonSendMessageReq.Xpid)
  return xpid_;
}
inline ::std::string* TUgcCommonSendMessageReq::release_xpid() {
  clear_has_xpid();
  if (xpid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = xpid_;
    xpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TUgcCommonSendMessageReq::set_allocated_xpid(::std::string* xpid) {
  if (xpid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete xpid_;
  }
  if (xpid) {
    set_has_xpid();
    xpid_ = xpid;
  } else {
    clear_has_xpid();
    xpid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonSendMessageReq.Xpid)
}

// optional .pb.ECrossFuncType CrossType = 5;
inline bool TUgcCommonSendMessageReq::has_crosstype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUgcCommonSendMessageReq::set_has_crosstype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUgcCommonSendMessageReq::clear_has_crosstype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUgcCommonSendMessageReq::clear_crosstype() {
  crosstype_ = 0;
  clear_has_crosstype();
}
inline ::pb::ECrossFuncType TUgcCommonSendMessageReq::crosstype() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSendMessageReq.CrossType)
  return static_cast< ::pb::ECrossFuncType >(crosstype_);
}
inline void TUgcCommonSendMessageReq::set_crosstype(::pb::ECrossFuncType value) {
  assert(::pb::ECrossFuncType_IsValid(value));
  set_has_crosstype();
  crosstype_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonSendMessageReq.CrossType)
}

// optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 6;
inline bool TUgcCommonSendMessageReq::has_crossinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TUgcCommonSendMessageReq::set_has_crossinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TUgcCommonSendMessageReq::clear_has_crossinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TUgcCommonSendMessageReq::clear_crossinfo() {
  if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
  clear_has_crossinfo();
}
inline const ::pb::TUgcCommonCrossSceneInfo& TUgcCommonSendMessageReq::crossinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSendMessageReq.CrossInfo)
  return crossinfo_ != NULL ? *crossinfo_ : *default_instance_->crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonSendMessageReq::mutable_crossinfo() {
  set_has_crossinfo();
  if (crossinfo_ == NULL) crossinfo_ = new ::pb::TUgcCommonCrossSceneInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonSendMessageReq.CrossInfo)
  return crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonSendMessageReq::release_crossinfo() {
  clear_has_crossinfo();
  ::pb::TUgcCommonCrossSceneInfo* temp = crossinfo_;
  crossinfo_ = NULL;
  return temp;
}
inline void TUgcCommonSendMessageReq::set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo) {
  delete crossinfo_;
  crossinfo_ = crossinfo;
  if (crossinfo) {
    set_has_crossinfo();
  } else {
    clear_has_crossinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonSendMessageReq.CrossInfo)
}

// -------------------------------------------------------------------

// TUgcCommonSendMessageRsp

// optional .pb.TUgcCommonSingle MsgInfo = 1;
inline bool TUgcCommonSendMessageRsp::has_msginfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUgcCommonSendMessageRsp::set_has_msginfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUgcCommonSendMessageRsp::clear_has_msginfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUgcCommonSendMessageRsp::clear_msginfo() {
  if (msginfo_ != NULL) msginfo_->::pb::TUgcCommonSingle::Clear();
  clear_has_msginfo();
}
inline const ::pb::TUgcCommonSingle& TUgcCommonSendMessageRsp::msginfo() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonSendMessageRsp.MsgInfo)
  return msginfo_ != NULL ? *msginfo_ : *default_instance_->msginfo_;
}
inline ::pb::TUgcCommonSingle* TUgcCommonSendMessageRsp::mutable_msginfo() {
  set_has_msginfo();
  if (msginfo_ == NULL) msginfo_ = new ::pb::TUgcCommonSingle;
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonSendMessageRsp.MsgInfo)
  return msginfo_;
}
inline ::pb::TUgcCommonSingle* TUgcCommonSendMessageRsp::release_msginfo() {
  clear_has_msginfo();
  ::pb::TUgcCommonSingle* temp = msginfo_;
  msginfo_ = NULL;
  return temp;
}
inline void TUgcCommonSendMessageRsp::set_allocated_msginfo(::pb::TUgcCommonSingle* msginfo) {
  delete msginfo_;
  msginfo_ = msginfo;
  if (msginfo) {
    set_has_msginfo();
  } else {
    clear_has_msginfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonSendMessageRsp.MsgInfo)
}

// -------------------------------------------------------------------

// TUgcCommonDeleteReq

// optional uint32 SceneTid = 1;
inline bool TUgcCommonDeleteReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUgcCommonDeleteReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUgcCommonDeleteReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUgcCommonDeleteReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TUgcCommonDeleteReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonDeleteReq.SceneTid)
  return scenetid_;
}
inline void TUgcCommonDeleteReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonDeleteReq.SceneTid)
}

// optional uint64 Mid = 2;
inline bool TUgcCommonDeleteReq::has_mid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUgcCommonDeleteReq::set_has_mid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUgcCommonDeleteReq::clear_has_mid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUgcCommonDeleteReq::clear_mid() {
  mid_ = GOOGLE_ULONGLONG(0);
  clear_has_mid();
}
inline ::google::protobuf::uint64 TUgcCommonDeleteReq::mid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonDeleteReq.Mid)
  return mid_;
}
inline void TUgcCommonDeleteReq::set_mid(::google::protobuf::uint64 value) {
  set_has_mid();
  mid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonDeleteReq.Mid)
}

// optional .pb.ECrossFuncType CrossType = 3;
inline bool TUgcCommonDeleteReq::has_crosstype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUgcCommonDeleteReq::set_has_crosstype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUgcCommonDeleteReq::clear_has_crosstype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUgcCommonDeleteReq::clear_crosstype() {
  crosstype_ = 0;
  clear_has_crosstype();
}
inline ::pb::ECrossFuncType TUgcCommonDeleteReq::crosstype() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonDeleteReq.CrossType)
  return static_cast< ::pb::ECrossFuncType >(crosstype_);
}
inline void TUgcCommonDeleteReq::set_crosstype(::pb::ECrossFuncType value) {
  assert(::pb::ECrossFuncType_IsValid(value));
  set_has_crosstype();
  crosstype_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonDeleteReq.CrossType)
}

// optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 4;
inline bool TUgcCommonDeleteReq::has_crossinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUgcCommonDeleteReq::set_has_crossinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUgcCommonDeleteReq::clear_has_crossinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUgcCommonDeleteReq::clear_crossinfo() {
  if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
  clear_has_crossinfo();
}
inline const ::pb::TUgcCommonCrossSceneInfo& TUgcCommonDeleteReq::crossinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonDeleteReq.CrossInfo)
  return crossinfo_ != NULL ? *crossinfo_ : *default_instance_->crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonDeleteReq::mutable_crossinfo() {
  set_has_crossinfo();
  if (crossinfo_ == NULL) crossinfo_ = new ::pb::TUgcCommonCrossSceneInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonDeleteReq.CrossInfo)
  return crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonDeleteReq::release_crossinfo() {
  clear_has_crossinfo();
  ::pb::TUgcCommonCrossSceneInfo* temp = crossinfo_;
  crossinfo_ = NULL;
  return temp;
}
inline void TUgcCommonDeleteReq::set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo) {
  delete crossinfo_;
  crossinfo_ = crossinfo;
  if (crossinfo) {
    set_has_crossinfo();
  } else {
    clear_has_crossinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonDeleteReq.CrossInfo)
}

// -------------------------------------------------------------------

// TUgcCommonLikeReq

// optional uint32 SceneTid = 1;
inline bool TUgcCommonLikeReq::has_scenetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TUgcCommonLikeReq::set_has_scenetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TUgcCommonLikeReq::clear_has_scenetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TUgcCommonLikeReq::clear_scenetid() {
  scenetid_ = 0u;
  clear_has_scenetid();
}
inline ::google::protobuf::uint32 TUgcCommonLikeReq::scenetid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonLikeReq.SceneTid)
  return scenetid_;
}
inline void TUgcCommonLikeReq::set_scenetid(::google::protobuf::uint32 value) {
  set_has_scenetid();
  scenetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonLikeReq.SceneTid)
}

// optional uint64 Mid = 2;
inline bool TUgcCommonLikeReq::has_mid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TUgcCommonLikeReq::set_has_mid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TUgcCommonLikeReq::clear_has_mid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TUgcCommonLikeReq::clear_mid() {
  mid_ = GOOGLE_ULONGLONG(0);
  clear_has_mid();
}
inline ::google::protobuf::uint64 TUgcCommonLikeReq::mid() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonLikeReq.Mid)
  return mid_;
}
inline void TUgcCommonLikeReq::set_mid(::google::protobuf::uint64 value) {
  set_has_mid();
  mid_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonLikeReq.Mid)
}

// optional .pb.EAppraise AppraiseStatus = 3;
inline bool TUgcCommonLikeReq::has_appraisestatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TUgcCommonLikeReq::set_has_appraisestatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TUgcCommonLikeReq::clear_has_appraisestatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TUgcCommonLikeReq::clear_appraisestatus() {
  appraisestatus_ = 0;
  clear_has_appraisestatus();
}
inline ::pb::EAppraise TUgcCommonLikeReq::appraisestatus() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonLikeReq.AppraiseStatus)
  return static_cast< ::pb::EAppraise >(appraisestatus_);
}
inline void TUgcCommonLikeReq::set_appraisestatus(::pb::EAppraise value) {
  assert(::pb::EAppraise_IsValid(value));
  set_has_appraisestatus();
  appraisestatus_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonLikeReq.AppraiseStatus)
}

// optional .pb.ECrossFuncType CrossType = 4;
inline bool TUgcCommonLikeReq::has_crosstype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TUgcCommonLikeReq::set_has_crosstype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TUgcCommonLikeReq::clear_has_crosstype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TUgcCommonLikeReq::clear_crosstype() {
  crosstype_ = 0;
  clear_has_crosstype();
}
inline ::pb::ECrossFuncType TUgcCommonLikeReq::crosstype() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonLikeReq.CrossType)
  return static_cast< ::pb::ECrossFuncType >(crosstype_);
}
inline void TUgcCommonLikeReq::set_crosstype(::pb::ECrossFuncType value) {
  assert(::pb::ECrossFuncType_IsValid(value));
  set_has_crosstype();
  crosstype_ = value;
  // @@protoc_insertion_point(field_set:pb.TUgcCommonLikeReq.CrossType)
}

// optional .pb.TUgcCommonCrossSceneInfo CrossInfo = 5;
inline bool TUgcCommonLikeReq::has_crossinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TUgcCommonLikeReq::set_has_crossinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TUgcCommonLikeReq::clear_has_crossinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TUgcCommonLikeReq::clear_crossinfo() {
  if (crossinfo_ != NULL) crossinfo_->::pb::TUgcCommonCrossSceneInfo::Clear();
  clear_has_crossinfo();
}
inline const ::pb::TUgcCommonCrossSceneInfo& TUgcCommonLikeReq::crossinfo() const {
  // @@protoc_insertion_point(field_get:pb.TUgcCommonLikeReq.CrossInfo)
  return crossinfo_ != NULL ? *crossinfo_ : *default_instance_->crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonLikeReq::mutable_crossinfo() {
  set_has_crossinfo();
  if (crossinfo_ == NULL) crossinfo_ = new ::pb::TUgcCommonCrossSceneInfo;
  // @@protoc_insertion_point(field_mutable:pb.TUgcCommonLikeReq.CrossInfo)
  return crossinfo_;
}
inline ::pb::TUgcCommonCrossSceneInfo* TUgcCommonLikeReq::release_crossinfo() {
  clear_has_crossinfo();
  ::pb::TUgcCommonCrossSceneInfo* temp = crossinfo_;
  crossinfo_ = NULL;
  return temp;
}
inline void TUgcCommonLikeReq::set_allocated_crossinfo(::pb::TUgcCommonCrossSceneInfo* crossinfo) {
  delete crossinfo_;
  crossinfo_ = crossinfo;
  if (crossinfo) {
    set_has_crossinfo();
  } else {
    clear_has_crossinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TUgcCommonLikeReq.CrossInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EAppraise> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EAppraise>() {
  return ::pb::EAppraise_descriptor();
}
template <> struct is_proto_enum< ::pb::ECrossFuncType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ECrossFuncType>() {
  return ::pb::ECrossFuncType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fUgcCommon_2eproto__INCLUDED
