// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossLevy.proto

#ifndef PROTOBUF_net_2fCrossLevy_2eproto__INCLUDED
#define PROTOBUF_net_2fCrossLevy_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/User.pb.h"
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
#include "net/ArenaHighOrder.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

class TCrossLevyCityInfo;
class TCrossLevyUserRecordViewInfo;
class TCrossLevySelfRecordInfo;
class TCrossLevyRecordInfo;
class TCrossLevyBossInfo;
class TCrossLevyMyCampInfo;
class TCrossLevyCampInfo;
class TCrossLevyMonsterHpInfo;
class TCrossLevyMonsterArmyHpInfo;
class TCrossLevyMonsterInfo;
class TCrossLevyHidPosInfo;
class TCrossLevyFormationInfo;
class TCrossLevyEnemyFormation;
class TCrossLevyGuildUserInfo;
class TCrossLevyEnemyInfo;
class TCrossLevyEnemyCampInfo;
class TCrossLevyGetServerTeamInfoRsp;
class TCrossLevyEnterRsp;
class TCrossLevyGetUserInfoRsp;
class TCrossLevyGetCityInfoReq;
class TCrossLevyGetCityInfoRsp;
class TCrossLevyMoveToEmptyCampReq;
class TCrossLevySetDefFormationReq;
class TCrossLevySetAtkFormationReq;
class TCrossLevyGetEnemyFormationReq;
class TCrossLevyGetEnemyFormationRsp;
class TCrossLevyForceCollectReq;
class TCrossLevyForceCollectRsp;
class TCrossLevyPlunderReq;
class TCrossLevyPlunderRsp;
class TCrossLevyExpelReq;
class TCrossLevyExpelRsp;
class TCrossLevyForceMoveReq;
class TCrossLevyForceMoveRsp;
class TCrossLevyGetBattleArgsReq;
class TCrossLevyGetBattleArgsRsp;
class TCrossLevyReportBattleBossReq;
class TCrossLevyReportBattleBossRsp;
class TCrossLevyReportBattleMonsterReq;
class TCrossLevyReportBattleMonsterRsp;
class TCrossLevyGetSelfRecordInfoRsp;
class TCrossLevyGetRecordResultInfoReq;
class TCrossLevyGetRecordResultInfoRsp;
class TCrossLevyReceiveScoreRewardReq;
class TCrossLevyReceiveScoreRewardRsp;
class TCrossLevyGetGuildUserListRsp;
class TCrossLevyReceiveSettleRewardReq;
class TCrossLevyReceiveSettleRewardRsp;
class TCrossLevyBuyChallengeNumReq;
class TCrossLevyGetEnemyListRsp;
class TCrossLevyRemoveEnemyReq;
class TCrossLevyGetEnemyCampListReq;
class TCrossLevyGetEnemyCampListRsp;
class TCrossLevyUserBeMovedNotify;
class TCrossLevyCityUserNumInfo;
class TCrossLevyCityUserNumNotify;
class TCrossLevyCityCampNumInfo;
class TCrossLevyCityCampNumNotify;
class TCrossLevyBossBeKilledNotify;
class TCrossLevyRecordNotify;

enum ECrossLevyRecordType {
  CROSS_LEVY_PLUNDER = 101,
  CROSS_LEVY_FORCE_MOVE = 102,
  CROSS_LEVY_EXPEL = 103
};
bool ECrossLevyRecordType_IsValid(int value);
const ECrossLevyRecordType ECrossLevyRecordType_MIN = CROSS_LEVY_PLUNDER;
const ECrossLevyRecordType ECrossLevyRecordType_MAX = CROSS_LEVY_EXPEL;
const int ECrossLevyRecordType_ARRAYSIZE = ECrossLevyRecordType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ECrossLevyRecordType_descriptor();
inline const ::std::string& ECrossLevyRecordType_Name(ECrossLevyRecordType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ECrossLevyRecordType_descriptor(), value);
}
inline bool ECrossLevyRecordType_Parse(
    const ::std::string& name, ECrossLevyRecordType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ECrossLevyRecordType>(
    ECrossLevyRecordType_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TCrossLevyCityInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyCityInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyCityInfo();
  virtual ~TCrossLevyCityInfo();

  TCrossLevyCityInfo(const TCrossLevyCityInfo& from);

  inline TCrossLevyCityInfo& operator=(const TCrossLevyCityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyCityInfo& default_instance();

  void Swap(TCrossLevyCityInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyCityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyCityInfo& from);
  void MergeFrom(const TCrossLevyCityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCityInfo</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampNum = 2;
  inline bool has_campnum() const;
  inline void clear_campnum();
  static const int kCampNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCityInfo</name>
  	<Function>
  		<name>campnum</name>
  		<replaceName>CampNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campnum</name>
  		<replaceName>CampNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campnum</name>
  		<replaceName>CampNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campnum() const;
  inline void set_campnum(::google::protobuf::uint32 value);

  // optional uint32 UserNum = 3;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUserNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCityInfo</name>
  	<Function>
  		<name>usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usernum() const;
  inline void set_usernum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyCityInfo)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campnum();
  inline void clear_has_campnum();
  inline void set_has_usernum();
  inline void clear_has_usernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campnum_;
  ::google::protobuf::uint32 usernum_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyCityInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyUserRecordViewInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyUserRecordViewInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyUserRecordViewInfo();
  virtual ~TCrossLevyUserRecordViewInfo();

  TCrossLevyUserRecordViewInfo(const TCrossLevyUserRecordViewInfo& from);

  inline TCrossLevyUserRecordViewInfo& operator=(const TCrossLevyUserRecordViewInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyUserRecordViewInfo& default_instance();

  void Swap(TCrossLevyUserRecordViewInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyUserRecordViewInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyUserRecordViewInfo& from);
  void MergeFrom(const TCrossLevyUserRecordViewInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 RecordId = 1;
  inline bool has_recordid() const;
  inline void clear_recordid();
  static const int kRecordIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyUserRecordViewInfo</name>
  	<Function>
  		<name>recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordid</name>
  		<replaceName>RecordId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordid() const;
  inline void set_recordid(::google::protobuf::uint64 value);

  // optional bool IsAtkWin = 2;
  inline bool has_isatkwin() const;
  inline void clear_isatkwin();
  static const int kIsAtkWinFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyUserRecordViewInfo</name>
  	<Function>
  		<name>isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isatkwin() const;
  inline void set_isatkwin(bool value);

  // repeated .pb.TArmyViewInfo AtkArmyArr = 3;
  inline int atkarmyarr_size() const;
  inline void clear_atkarmyarr();
  static const int kAtkArmyArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyUserRecordViewInfo</name>
  	<Function>
  		<name>atkarmyarr</name>
  		<replaceName>AtkArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_atkarmyarr</name>
  		<replaceName>AtkArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_atkarmyarr</name>
  		<replaceName>AtkArmyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkarmyarr</name>
  		<replaceName>AtkArmyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>atkarmyarr_size</name>
  		<replaceName>AtkArmyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyViewInfo& atkarmyarr(int index) const;
  inline ::pb::TArmyViewInfo* mutable_atkarmyarr(int index);
  inline ::pb::TArmyViewInfo* add_atkarmyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >&
      atkarmyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >*
      mutable_atkarmyarr();

  // repeated .pb.TArmyViewInfo DefArmyArr = 4;
  inline int defarmyarr_size() const;
  inline void clear_defarmyarr();
  static const int kDefArmyArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyUserRecordViewInfo</name>
  	<Function>
  		<name>defarmyarr</name>
  		<replaceName>DefArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_defarmyarr</name>
  		<replaceName>DefArmyArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_defarmyarr</name>
  		<replaceName>DefArmyArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defarmyarr</name>
  		<replaceName>DefArmyArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>defarmyarr_size</name>
  		<replaceName>DefArmyArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TArmyViewInfo& defarmyarr(int index) const;
  inline ::pb::TArmyViewInfo* mutable_defarmyarr(int index);
  inline ::pb::TArmyViewInfo* add_defarmyarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >&
      defarmyarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >*
      mutable_defarmyarr();

  // optional uint64 AtkFightForce = 5;
  inline bool has_atkfightforce() const;
  inline void clear_atkfightforce();
  static const int kAtkFightForceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyUserRecordViewInfo</name>
  	<Function>
  		<name>atkfightforce</name>
  		<replaceName>AtkFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkfightforce</name>
  		<replaceName>AtkFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkfightforce</name>
  		<replaceName>AtkFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 atkfightforce() const;
  inline void set_atkfightforce(::google::protobuf::uint64 value);

  // optional uint64 DefFightForce = 6;
  inline bool has_deffightforce() const;
  inline void clear_deffightforce();
  static const int kDefFightForceFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyUserRecordViewInfo</name>
  	<Function>
  		<name>deffightforce</name>
  		<replaceName>DefFightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deffightforce</name>
  		<replaceName>DefFightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deffightforce</name>
  		<replaceName>DefFightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 deffightforce() const;
  inline void set_deffightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyUserRecordViewInfo)
 private:
  inline void set_has_recordid();
  inline void clear_has_recordid();
  inline void set_has_isatkwin();
  inline void clear_has_isatkwin();
  inline void set_has_atkfightforce();
  inline void clear_has_atkfightforce();
  inline void set_has_deffightforce();
  inline void clear_has_deffightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 recordid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo > atkarmyarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo > defarmyarr_;
  ::google::protobuf::uint64 atkfightforce_;
  ::google::protobuf::uint64 deffightforce_;
  bool isatkwin_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyUserRecordViewInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevySelfRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevySelfRecordInfo : public ::google::protobuf::Message {
 public:
  TCrossLevySelfRecordInfo();
  virtual ~TCrossLevySelfRecordInfo();

  TCrossLevySelfRecordInfo(const TCrossLevySelfRecordInfo& from);

  inline TCrossLevySelfRecordInfo& operator=(const TCrossLevySelfRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevySelfRecordInfo& default_instance();

  void Swap(TCrossLevySelfRecordInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevySelfRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevySelfRecordInfo& from);
  void MergeFrom(const TCrossLevySelfRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RecordResultId = 1;
  inline bool has_recordresultid() const;
  inline void clear_recordresultid();
  static const int kRecordResultIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySelfRecordInfo</name>
  	<Function>
  		<name>recordresultid</name>
  		<replaceName>RecordResultId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordresultid</name>
  		<replaceName>RecordResultId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordresultid</name>
  		<replaceName>RecordResultId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 recordresultid() const;
  inline void set_recordresultid(::google::protobuf::uint32 value);

  // optional .pb.ECrossLevyRecordType RecordType = 2;
  inline bool has_recordtype() const;
  inline void clear_recordtype();
  static const int kRecordTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySelfRecordInfo</name>
  	<Function>
  		<name>recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossLevyRecordType recordtype() const;
  inline void set_recordtype(::pb::ECrossLevyRecordType value);

  // optional uint64 RecordTime = 3;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySelfRecordInfo</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySelfRecordInfo</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo);

  // optional .pb.TUserSimpleInfo DefUserInfo = 5;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySelfRecordInfo</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defuserinfo();
  inline ::pb::TUserSimpleInfo* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo);

  // optional bool IsAtkWin = 6;
  inline bool has_isatkwin() const;
  inline void clear_isatkwin();
  static const int kIsAtkWinFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySelfRecordInfo</name>
  	<Function>
  		<name>isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isatkwin() const;
  inline void set_isatkwin(bool value);

  // optional uint32 CityId = 7;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySelfRecordInfo</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 8;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySelfRecordInfo</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint32 TargetCityId = 9;
  inline bool has_targetcityid() const;
  inline void clear_targetcityid();
  static const int kTargetCityIdFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySelfRecordInfo</name>
  	<Function>
  		<name>targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetcityid() const;
  inline void set_targetcityid(::google::protobuf::uint32 value);

  // optional uint32 TargetCampId = 10;
  inline bool has_targetcampid() const;
  inline void clear_targetcampid();
  static const int kTargetCampIdFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySelfRecordInfo</name>
  	<Function>
  		<name>targetcampid</name>
  		<replaceName>TargetCampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetcampid</name>
  		<replaceName>TargetCampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetcampid</name>
  		<replaceName>TargetCampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetcampid() const;
  inline void set_targetcampid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevySelfRecordInfo)
 private:
  inline void set_has_recordresultid();
  inline void clear_has_recordresultid();
  inline void set_has_recordtype();
  inline void clear_has_recordtype();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();
  inline void set_has_isatkwin();
  inline void clear_has_isatkwin();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_targetcityid();
  inline void clear_has_targetcityid();
  inline void set_has_targetcampid();
  inline void clear_has_targetcampid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 recordresultid_;
  int recordtype_;
  ::google::protobuf::uint64 recordtime_;
  ::pb::TUserSimpleInfo* atkuserinfo_;
  ::pb::TUserSimpleInfo* defuserinfo_;
  bool isatkwin_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 targetcityid_;
  ::google::protobuf::uint32 targetcampid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevySelfRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyRecordInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyRecordInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyRecordInfo();
  virtual ~TCrossLevyRecordInfo();

  TCrossLevyRecordInfo(const TCrossLevyRecordInfo& from);

  inline TCrossLevyRecordInfo& operator=(const TCrossLevyRecordInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyRecordInfo& default_instance();

  void Swap(TCrossLevyRecordInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyRecordInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyRecordInfo& from);
  void MergeFrom(const TCrossLevyRecordInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RecordResultId = 1;
  inline bool has_recordresultid() const;
  inline void clear_recordresultid();
  static const int kRecordResultIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyRecordInfo</name>
  	<Function>
  		<name>recordresultid</name>
  		<replaceName>RecordResultId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordresultid</name>
  		<replaceName>RecordResultId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordresultid</name>
  		<replaceName>RecordResultId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 recordresultid() const;
  inline void set_recordresultid(::google::protobuf::uint32 value);

  // optional .pb.ECrossLevyRecordType RecordType = 2;
  inline bool has_recordtype() const;
  inline void clear_recordtype();
  static const int kRecordTypeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyRecordInfo</name>
  	<Function>
  		<name>recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtype</name>
  		<replaceName>RecordType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::ECrossLevyRecordType recordtype() const;
  inline void set_recordtype(::pb::ECrossLevyRecordType value);

  // optional uint64 RecordTime = 3;
  inline bool has_recordtime() const;
  inline void clear_recordtime();
  static const int kRecordTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyRecordInfo</name>
  	<Function>
  		<name>recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordtime</name>
  		<replaceName>RecordTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 recordtime() const;
  inline void set_recordtime(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo AtkUserInfo = 4;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyRecordInfo</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo);

  // optional .pb.TUserSimpleInfo DefUserInfo = 5;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyRecordInfo</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defuserinfo();
  inline ::pb::TUserSimpleInfo* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo);

  // repeated .pb.TCommonReward RewardArr = 6;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyRecordInfo</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional bool IsAtkWin = 7;
  inline bool has_isatkwin() const;
  inline void clear_isatkwin();
  static const int kIsAtkWinFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyRecordInfo</name>
  	<Function>
  		<name>isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isatkwin() const;
  inline void set_isatkwin(bool value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyRecordInfo)
 private:
  inline void set_has_recordresultid();
  inline void clear_has_recordresultid();
  inline void set_has_recordtype();
  inline void clear_has_recordtype();
  inline void set_has_recordtime();
  inline void clear_has_recordtime();
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();
  inline void set_has_isatkwin();
  inline void clear_has_isatkwin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 recordresultid_;
  int recordtype_;
  ::google::protobuf::uint64 recordtime_;
  ::pb::TUserSimpleInfo* atkuserinfo_;
  ::pb::TUserSimpleInfo* defuserinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  bool isatkwin_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyRecordInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyBossInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyBossInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyBossInfo();
  virtual ~TCrossLevyBossInfo();

  TCrossLevyBossInfo(const TCrossLevyBossInfo& from);

  inline TCrossLevyBossInfo& operator=(const TCrossLevyBossInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyBossInfo& default_instance();

  void Swap(TCrossLevyBossInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyBossInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyBossInfo& from);
  void MergeFrom(const TCrossLevyBossInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossInfo</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 2;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossInfo</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // optional uint64 Hp = 3;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossInfo</name>
  	<Function>
  		<name>hp</name>
  		<replaceName>Hp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hp</name>
  		<replaceName>Hp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hp</name>
  		<replaceName>Hp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 hp() const;
  inline void set_hp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 4;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossInfo</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // optional uint64 FightForce = 5;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossInfo</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // optional uint32 Pos = 6;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyBossInfo)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::uint64 hp_;
  ::google::protobuf::uint32 bossid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint64 fightforce_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyBossInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyMyCampInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyMyCampInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyMyCampInfo();
  virtual ~TCrossLevyMyCampInfo();

  TCrossLevyMyCampInfo(const TCrossLevyMyCampInfo& from);

  inline TCrossLevyMyCampInfo& operator=(const TCrossLevyMyCampInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyMyCampInfo& default_instance();

  void Swap(TCrossLevyMyCampInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyMyCampInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyMyCampInfo& from);
  void MergeFrom(const TCrossLevyMyCampInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMyCampInfo</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMyCampInfo</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint64 SettleTime = 3;
  inline bool has_settletime() const;
  inline void clear_settletime();
  static const int kSettleTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMyCampInfo</name>
  	<Function>
  		<name>settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settletime</name>
  		<replaceName>SettleTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 settletime() const;
  inline void set_settletime(::google::protobuf::uint64 value);

  // optional uint32 SettleNum = 4;
  inline bool has_settlenum() const;
  inline void clear_settlenum();
  static const int kSettleNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMyCampInfo</name>
  	<Function>
  		<name>settlenum</name>
  		<replaceName>SettleNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settlenum</name>
  		<replaceName>SettleNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settlenum</name>
  		<replaceName>SettleNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 settlenum() const;
  inline void set_settlenum(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 5;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMyCampInfo</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // repeated .pb.TCommonReward ExtraRewardArr = 6;
  inline int extrarewardarr_size() const;
  inline void clear_extrarewardarr();
  static const int kExtraRewardArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMyCampInfo</name>
  	<Function>
  		<name>extrarewardarr</name>
  		<replaceName>ExtraRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_extrarewardarr</name>
  		<replaceName>ExtraRewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_extrarewardarr</name>
  		<replaceName>ExtraRewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_extrarewardarr</name>
  		<replaceName>ExtraRewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>extrarewardarr_size</name>
  		<replaceName>ExtraRewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& extrarewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_extrarewardarr(int index);
  inline ::pb::TCommonReward* add_extrarewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      extrarewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_extrarewardarr();

  // optional uint32 BePlunderedNum = 7;
  inline bool has_beplunderednum() const;
  inline void clear_beplunderednum();
  static const int kBePlunderedNumFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMyCampInfo</name>
  	<Function>
  		<name>beplunderednum</name>
  		<replaceName>BePlunderedNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beplunderednum</name>
  		<replaceName>BePlunderedNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beplunderednum</name>
  		<replaceName>BePlunderedNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beplunderednum() const;
  inline void set_beplunderednum(::google::protobuf::uint32 value);

  // optional uint32 SettleScore = 8;
  inline bool has_settlescore() const;
  inline void clear_settlescore();
  static const int kSettleScoreFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMyCampInfo</name>
  	<Function>
  		<name>settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 settlescore() const;
  inline void set_settlescore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyMyCampInfo)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_settletime();
  inline void clear_has_settletime();
  inline void set_has_settlenum();
  inline void clear_has_settlenum();
  inline void set_has_beplunderednum();
  inline void clear_has_beplunderednum();
  inline void set_has_settlescore();
  inline void clear_has_settlescore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint64 settletime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 settlenum_;
  ::google::protobuf::uint32 beplunderednum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > extrarewardarr_;
  ::google::protobuf::uint32 settlescore_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyMyCampInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyCampInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyCampInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyCampInfo();
  virtual ~TCrossLevyCampInfo();

  TCrossLevyCampInfo(const TCrossLevyCampInfo& from);

  inline TCrossLevyCampInfo& operator=(const TCrossLevyCampInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyCampInfo& default_instance();

  void Swap(TCrossLevyCampInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyCampInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyCampInfo& from);
  void MergeFrom(const TCrossLevyCampInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCampInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 CityId = 2;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCampInfo</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 3;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCampInfo</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 4;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCampInfo</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 BePlunderedNum = 5;
  inline bool has_beplunderednum() const;
  inline void clear_beplunderednum();
  static const int kBePlunderedNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCampInfo</name>
  	<Function>
  		<name>beplunderednum</name>
  		<replaceName>BePlunderedNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_beplunderednum</name>
  		<replaceName>BePlunderedNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_beplunderednum</name>
  		<replaceName>BePlunderedNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 beplunderednum() const;
  inline void set_beplunderednum(::google::protobuf::uint32 value);

  // optional uint32 SettleNum = 6;
  inline bool has_settlenum() const;
  inline void clear_settlenum();
  static const int kSettleNumFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCampInfo</name>
  	<Function>
  		<name>settlenum</name>
  		<replaceName>SettleNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settlenum</name>
  		<replaceName>SettleNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settlenum</name>
  		<replaceName>SettleNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 settlenum() const;
  inline void set_settlenum(::google::protobuf::uint32 value);

  // optional uint64 LastBeAttackedTime = 7;
  inline bool has_lastbeattackedtime() const;
  inline void clear_lastbeattackedtime();
  static const int kLastBeAttackedTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCampInfo</name>
  	<Function>
  		<name>lastbeattackedtime</name>
  		<replaceName>LastBeAttackedTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastbeattackedtime</name>
  		<replaceName>LastBeAttackedTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastbeattackedtime</name>
  		<replaceName>LastBeAttackedTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastbeattackedtime() const;
  inline void set_lastbeattackedtime(::google::protobuf::uint64 value);

  // optional uint64 LastBePlunderedTime = 8;
  inline bool has_lastbeplunderedtime() const;
  inline void clear_lastbeplunderedtime();
  static const int kLastBePlunderedTimeFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCampInfo</name>
  	<Function>
  		<name>lastbeplunderedtime</name>
  		<replaceName>LastBePlunderedTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastbeplunderedtime</name>
  		<replaceName>LastBePlunderedTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastbeplunderedtime</name>
  		<replaceName>LastBePlunderedTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastbeplunderedtime() const;
  inline void set_lastbeplunderedtime(::google::protobuf::uint64 value);

  // optional bool IsEnemy = 9;
  inline bool has_isenemy() const;
  inline void clear_isenemy();
  static const int kIsEnemyFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCampInfo</name>
  	<Function>
  		<name>isenemy</name>
  		<replaceName>IsEnemy</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isenemy</name>
  		<replaceName>IsEnemy</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isenemy</name>
  		<replaceName>IsEnemy</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isenemy() const;
  inline void set_isenemy(bool value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyCampInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_beplunderednum();
  inline void clear_has_beplunderednum();
  inline void set_has_settlenum();
  inline void clear_has_settlenum();
  inline void set_has_lastbeattackedtime();
  inline void clear_has_lastbeattackedtime();
  inline void set_has_lastbeplunderedtime();
  inline void clear_has_lastbeplunderedtime();
  inline void set_has_isenemy();
  inline void clear_has_isenemy();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 beplunderednum_;
  ::google::protobuf::uint32 settlenum_;
  ::google::protobuf::uint64 lastbeattackedtime_;
  ::google::protobuf::uint64 lastbeplunderedtime_;
  bool isenemy_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyCampInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyMonsterHpInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyMonsterHpInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyMonsterHpInfo();
  virtual ~TCrossLevyMonsterHpInfo();

  TCrossLevyMonsterHpInfo(const TCrossLevyMonsterHpInfo& from);

  inline TCrossLevyMonsterHpInfo& operator=(const TCrossLevyMonsterHpInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyMonsterHpInfo& default_instance();

  void Swap(TCrossLevyMonsterHpInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyMonsterHpInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyMonsterHpInfo& from);
  void MergeFrom(const TCrossLevyMonsterHpInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMonsterHpInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 2;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMonsterHpInfo</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // optional uint64 MaxHp = 3;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHpFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMonsterHpInfo</name>
  	<Function>
  		<name>maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxhp</name>
  		<replaceName>MaxHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyMonsterHpInfo)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 curhp_;
  ::google::protobuf::uint64 maxhp_;
  ::google::protobuf::uint32 hid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyMonsterHpInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyMonsterArmyHpInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyMonsterArmyHpInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyMonsterArmyHpInfo();
  virtual ~TCrossLevyMonsterArmyHpInfo();

  TCrossLevyMonsterArmyHpInfo(const TCrossLevyMonsterArmyHpInfo& from);

  inline TCrossLevyMonsterArmyHpInfo& operator=(const TCrossLevyMonsterArmyHpInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyMonsterArmyHpInfo& default_instance();

  void Swap(TCrossLevyMonsterArmyHpInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyMonsterArmyHpInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyMonsterArmyHpInfo& from);
  void MergeFrom(const TCrossLevyMonsterArmyHpInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMonsterArmyHpInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .pb.TCrossLevyMonsterHpInfo MonsterHpInfoArr = 2;
  inline int monsterhpinfoarr_size() const;
  inline void clear_monsterhpinfoarr();
  static const int kMonsterHpInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMonsterArmyHpInfo</name>
  	<Function>
  		<name>monsterhpinfoarr</name>
  		<replaceName>MonsterHpInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterhpinfoarr</name>
  		<replaceName>MonsterHpInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterhpinfoarr</name>
  		<replaceName>MonsterHpInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterhpinfoarr</name>
  		<replaceName>MonsterHpInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterhpinfoarr_size</name>
  		<replaceName>MonsterHpInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyMonsterHpInfo& monsterhpinfoarr(int index) const;
  inline ::pb::TCrossLevyMonsterHpInfo* mutable_monsterhpinfoarr(int index);
  inline ::pb::TCrossLevyMonsterHpInfo* add_monsterhpinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterHpInfo >&
      monsterhpinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterHpInfo >*
      mutable_monsterhpinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyMonsterArmyHpInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterHpInfo > monsterhpinfoarr_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyMonsterArmyHpInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyMonsterInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyMonsterInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyMonsterInfo();
  virtual ~TCrossLevyMonsterInfo();

  TCrossLevyMonsterInfo(const TCrossLevyMonsterInfo& from);

  inline TCrossLevyMonsterInfo& operator=(const TCrossLevyMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyMonsterInfo& default_instance();

  void Swap(TCrossLevyMonsterInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyMonsterInfo& from);
  void MergeFrom(const TCrossLevyMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMonsterInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMonsterInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
  inline int monsterarmyhpinfoarr_size() const;
  inline void clear_monsterarmyhpinfoarr();
  static const int kMonsterArmyHpInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMonsterInfo</name>
  	<Function>
  		<name>monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterarmyhpinfoarr_size</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyMonsterArmyHpInfo& monsterarmyhpinfoarr(int index) const;
  inline ::pb::TCrossLevyMonsterArmyHpInfo* mutable_monsterarmyhpinfoarr(int index);
  inline ::pb::TCrossLevyMonsterArmyHpInfo* add_monsterarmyhpinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >&
      monsterarmyhpinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >*
      mutable_monsterarmyhpinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyMonsterInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo > monsterarmyhpinfoarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyMonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyHidPosInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyHidPosInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyHidPosInfo();
  virtual ~TCrossLevyHidPosInfo();

  TCrossLevyHidPosInfo(const TCrossLevyHidPosInfo& from);

  inline TCrossLevyHidPosInfo& operator=(const TCrossLevyHidPosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyHidPosInfo& default_instance();

  void Swap(TCrossLevyHidPosInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyHidPosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyHidPosInfo& from);
  void MergeFrom(const TCrossLevyHidPosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Hid = 1;
  inline bool has_hid() const;
  inline void clear_hid();
  static const int kHidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyHidPosInfo</name>
  	<Function>
  		<name>hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hid</name>
  		<replaceName>Hid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hid() const;
  inline void set_hid(::google::protobuf::uint32 value);

  // optional uint32 Pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyHidPosInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyHidPosInfo)
 private:
  inline void set_has_hid();
  inline void clear_has_hid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 hid_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyHidPosInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyFormationInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyFormationInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyFormationInfo();
  virtual ~TCrossLevyFormationInfo();

  TCrossLevyFormationInfo(const TCrossLevyFormationInfo& from);

  inline TCrossLevyFormationInfo& operator=(const TCrossLevyFormationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyFormationInfo& default_instance();

  void Swap(TCrossLevyFormationInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyFormationInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyFormationInfo& from);
  void MergeFrom(const TCrossLevyFormationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyFormationInfo</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TCrossLevyHidPosInfo HidPosArr = 2;
  inline int hidposarr_size() const;
  inline void clear_hidposarr();
  static const int kHidPosArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyFormationInfo</name>
  	<Function>
  		<name>hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hidposarr</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>hidposarr_size</name>
  		<replaceName>HidPosArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyHidPosInfo& hidposarr(int index) const;
  inline ::pb::TCrossLevyHidPosInfo* mutable_hidposarr(int index);
  inline ::pb::TCrossLevyHidPosInfo* add_hidposarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyHidPosInfo >&
      hidposarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyHidPosInfo >*
      mutable_hidposarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyFormationInfo)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyHidPosInfo > hidposarr_;
  ::google::protobuf::uint32 formationid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyFormationInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyEnemyFormation</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyEnemyFormation : public ::google::protobuf::Message {
 public:
  TCrossLevyEnemyFormation();
  virtual ~TCrossLevyEnemyFormation();

  TCrossLevyEnemyFormation(const TCrossLevyEnemyFormation& from);

  inline TCrossLevyEnemyFormation& operator=(const TCrossLevyEnemyFormation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyEnemyFormation& default_instance();

  void Swap(TCrossLevyEnemyFormation* other);

  // implements Message ----------------------------------------------

  TCrossLevyEnemyFormation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyEnemyFormation& from);
  void MergeFrom(const TCrossLevyEnemyFormation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 FormationId = 1;
  inline bool has_formationid() const;
  inline void clear_formationid();
  static const int kFormationIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnemyFormation</name>
  	<Function>
  		<name>formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationid</name>
  		<replaceName>FormationId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 formationid() const;
  inline void set_formationid(::google::protobuf::uint32 value);

  // repeated .pb.TUnitInfo UnitArr = 2;
  inline int unitarr_size() const;
  inline void clear_unitarr();
  static const int kUnitArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnemyFormation</name>
  	<Function>
  		<name>unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unitarr</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unitarr_size</name>
  		<replaceName>UnitArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitInfo& unitarr(int index) const;
  inline ::pb::TUnitInfo* mutable_unitarr(int index);
  inline ::pb::TUnitInfo* add_unitarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
      unitarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
      mutable_unitarr();

  // optional uint64 FightForce = 3;
  inline bool has_fightforce() const;
  inline void clear_fightforce();
  static const int kFightForceFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnemyFormation</name>
  	<Function>
  		<name>fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fightforce</name>
  		<replaceName>FightForce</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 fightforce() const;
  inline void set_fightforce(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyEnemyFormation)
 private:
  inline void set_has_formationid();
  inline void clear_has_formationid();
  inline void set_has_fightforce();
  inline void clear_has_fightforce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo > unitarr_;
  ::google::protobuf::uint64 fightforce_;
  ::google::protobuf::uint32 formationid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyEnemyFormation* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGuildUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGuildUserInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyGuildUserInfo();
  virtual ~TCrossLevyGuildUserInfo();

  TCrossLevyGuildUserInfo(const TCrossLevyGuildUserInfo& from);

  inline TCrossLevyGuildUserInfo& operator=(const TCrossLevyGuildUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGuildUserInfo& default_instance();

  void Swap(TCrossLevyGuildUserInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyGuildUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGuildUserInfo& from);
  void MergeFrom(const TCrossLevyGuildUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGuildUserInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGuildUserInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 CityId = 3;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGuildUserInfo</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 4;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGuildUserInfo</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint32 ConnectNum = 5;
  inline bool has_connectnum() const;
  inline void clear_connectnum();
  static const int kConnectNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGuildUserInfo</name>
  	<Function>
  		<name>connectnum</name>
  		<replaceName>ConnectNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_connectnum</name>
  		<replaceName>ConnectNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_connectnum</name>
  		<replaceName>ConnectNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 connectnum() const;
  inline void set_connectnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGuildUserInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_connectnum();
  inline void clear_has_connectnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 connectnum_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGuildUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyEnemyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyEnemyInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyEnemyInfo();
  virtual ~TCrossLevyEnemyInfo();

  TCrossLevyEnemyInfo(const TCrossLevyEnemyInfo& from);

  inline TCrossLevyEnemyInfo& operator=(const TCrossLevyEnemyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyEnemyInfo& default_instance();

  void Swap(TCrossLevyEnemyInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyEnemyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyEnemyInfo& from);
  void MergeFrom(const TCrossLevyEnemyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnemyInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 HateNum = 2;
  inline bool has_hatenum() const;
  inline void clear_hatenum();
  static const int kHateNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnemyInfo</name>
  	<Function>
  		<name>hatenum</name>
  		<replaceName>HateNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_hatenum</name>
  		<replaceName>HateNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_hatenum</name>
  		<replaceName>HateNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 hatenum() const;
  inline void set_hatenum(::google::protobuf::uint32 value);

  // optional uint64 Time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnemyInfo</name>
  	<Function>
  		<name>time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_time</name>
  		<replaceName>Time</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional .pb.TUserSimpleInfo UserInfo = 4;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnemyInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyEnemyInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_hatenum();
  inline void clear_has_hatenum();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint64 time_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint32 hatenum_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyEnemyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyEnemyCampInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyEnemyCampInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyEnemyCampInfo();
  virtual ~TCrossLevyEnemyCampInfo();

  TCrossLevyEnemyCampInfo(const TCrossLevyEnemyCampInfo& from);

  inline TCrossLevyEnemyCampInfo& operator=(const TCrossLevyEnemyCampInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyEnemyCampInfo& default_instance();

  void Swap(TCrossLevyEnemyCampInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyEnemyCampInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyEnemyCampInfo& from);
  void MergeFrom(const TCrossLevyEnemyCampInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnemyCampInfo</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnemyCampInfo</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyEnemyCampInfo)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyEnemyCampInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetServerTeamInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetServerTeamInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetServerTeamInfoRsp();
  virtual ~TCrossLevyGetServerTeamInfoRsp();

  TCrossLevyGetServerTeamInfoRsp(const TCrossLevyGetServerTeamInfoRsp& from);

  inline TCrossLevyGetServerTeamInfoRsp& operator=(const TCrossLevyGetServerTeamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetServerTeamInfoRsp& default_instance();

  void Swap(TCrossLevyGetServerTeamInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetServerTeamInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetServerTeamInfoRsp& from);
  void MergeFrom(const TCrossLevyGetServerTeamInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TeamId = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetServerTeamInfoRsp</name>
  	<Function>
  		<name>teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_teamid</name>
  		<replaceName>TeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional string ServerId = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetServerTeamInfoRsp</name>
  	<Function>
  		<name>serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverid</name>
  		<replaceName>ServerId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& serverid() const;
  inline void set_serverid(const ::std::string& value);
  inline void set_serverid(const char* value);
  inline void set_serverid(const char* value, size_t size);
  inline ::std::string* mutable_serverid();
  inline ::std::string* release_serverid();
  inline void set_allocated_serverid(::std::string* serverid);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetServerTeamInfoRsp)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* serverid_;
  ::google::protobuf::uint32 teamid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetServerTeamInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyEnterRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyEnterRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyEnterRsp();
  virtual ~TCrossLevyEnterRsp();

  TCrossLevyEnterRsp(const TCrossLevyEnterRsp& from);

  inline TCrossLevyEnterRsp& operator=(const TCrossLevyEnterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyEnterRsp& default_instance();

  void Swap(TCrossLevyEnterRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyEnterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyEnterRsp& from);
  void MergeFrom(const TCrossLevyEnterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevyCityInfo CityInfoArr = 1;
  inline int cityinfoarr_size() const;
  inline void clear_cityinfoarr();
  static const int kCityInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnterRsp</name>
  	<Function>
  		<name>cityinfoarr</name>
  		<replaceName>CityInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_cityinfoarr</name>
  		<replaceName>CityInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_cityinfoarr</name>
  		<replaceName>CityInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityinfoarr</name>
  		<replaceName>CityInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>cityinfoarr_size</name>
  		<replaceName>CityInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyCityInfo& cityinfoarr(int index) const;
  inline ::pb::TCrossLevyCityInfo* mutable_cityinfoarr(int index);
  inline ::pb::TCrossLevyCityInfo* add_cityinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityInfo >&
      cityinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityInfo >*
      mutable_cityinfoarr();

  // repeated .pb.TCrossLevySelfRecordInfo RecordInfoArr = 2;
  inline int recordinfoarr_size() const;
  inline void clear_recordinfoarr();
  static const int kRecordInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnterRsp</name>
  	<Function>
  		<name>recordinfoarr</name>
  		<replaceName>RecordInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordinfoarr</name>
  		<replaceName>RecordInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordinfoarr</name>
  		<replaceName>RecordInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordinfoarr</name>
  		<replaceName>RecordInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordinfoarr_size</name>
  		<replaceName>RecordInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevySelfRecordInfo& recordinfoarr(int index) const;
  inline ::pb::TCrossLevySelfRecordInfo* mutable_recordinfoarr(int index);
  inline ::pb::TCrossLevySelfRecordInfo* add_recordinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevySelfRecordInfo >&
      recordinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevySelfRecordInfo >*
      mutable_recordinfoarr();

  // repeated .pb.TCrossLevyBossInfo BossInfoArr = 3;
  inline int bossinfoarr_size() const;
  inline void clear_bossinfoarr();
  static const int kBossInfoArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnterRsp</name>
  	<Function>
  		<name>bossinfoarr</name>
  		<replaceName>BossInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_bossinfoarr</name>
  		<replaceName>BossInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_bossinfoarr</name>
  		<replaceName>BossInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossinfoarr</name>
  		<replaceName>BossInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>bossinfoarr_size</name>
  		<replaceName>BossInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyBossInfo& bossinfoarr(int index) const;
  inline ::pb::TCrossLevyBossInfo* mutable_bossinfoarr(int index);
  inline ::pb::TCrossLevyBossInfo* add_bossinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyBossInfo >&
      bossinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyBossInfo >*
      mutable_bossinfoarr();

  // repeated .pb.TCrossLevyRecordInfo RecordArr = 4;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnterRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyRecordInfo& recordarr(int index) const;
  inline ::pb::TCrossLevyRecordInfo* mutable_recordarr(int index);
  inline ::pb::TCrossLevyRecordInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyRecordInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyRecordInfo >*
      mutable_recordarr();

  // optional string SceneId = 5;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnterRsp</name>
  	<Function>
  		<name>sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_sceneid</name>
  		<replaceName>SceneId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& sceneid() const;
  inline void set_sceneid(const ::std::string& value);
  inline void set_sceneid(const char* value);
  inline void set_sceneid(const char* value, size_t size);
  inline ::std::string* mutable_sceneid();
  inline ::std::string* release_sceneid();
  inline void set_allocated_sceneid(::std::string* sceneid);

  // optional uint32 RewardId = 6;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyEnterRsp</name>
  	<Function>
  		<name>rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardid</name>
  		<replaceName>RewardId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardid() const;
  inline void set_rewardid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyEnterRsp)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityInfo > cityinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevySelfRecordInfo > recordinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyBossInfo > bossinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyRecordInfo > recordarr_;
  ::std::string* sceneid_;
  ::google::protobuf::uint32 rewardid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyEnterRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetUserInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetUserInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetUserInfoRsp();
  virtual ~TCrossLevyGetUserInfoRsp();

  TCrossLevyGetUserInfoRsp(const TCrossLevyGetUserInfoRsp& from);

  inline TCrossLevyGetUserInfoRsp& operator=(const TCrossLevyGetUserInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetUserInfoRsp& default_instance();

  void Swap(TCrossLevyGetUserInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetUserInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetUserInfoRsp& from);
  void MergeFrom(const TCrossLevyGetUserInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 LeftChallengeNum = 1;
  inline bool has_leftchallengenum() const;
  inline void clear_leftchallengenum();
  static const int kLeftChallengeNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_leftchallengenum</name>
  		<replaceName>LeftChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 leftchallengenum() const;
  inline void set_leftchallengenum(::google::protobuf::uint32 value);

  // optional uint32 BuyChallengeNum = 2;
  inline bool has_buychallengenum() const;
  inline void clear_buychallengenum();
  static const int kBuyChallengeNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buychallengenum</name>
  		<replaceName>BuyChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buychallengenum() const;
  inline void set_buychallengenum(::google::protobuf::uint32 value);

  // optional uint32 ForceNum = 3;
  inline bool has_forcenum() const;
  inline void clear_forcenum();
  static const int kForceNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>forcenum</name>
  		<replaceName>ForceNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_forcenum</name>
  		<replaceName>ForceNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_forcenum</name>
  		<replaceName>ForceNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 forcenum() const;
  inline void set_forcenum(::google::protobuf::uint32 value);

  // optional uint32 AtkBossNum = 4;
  inline bool has_atkbossnum() const;
  inline void clear_atkbossnum();
  static const int kAtkBossNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>atkbossnum</name>
  		<replaceName>AtkBossNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkbossnum</name>
  		<replaceName>AtkBossNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkbossnum</name>
  		<replaceName>AtkBossNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 atkbossnum() const;
  inline void set_atkbossnum(::google::protobuf::uint32 value);

  // optional uint32 PlunderNum = 5;
  inline bool has_plundernum() const;
  inline void clear_plundernum();
  static const int kPlunderNumFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>plundernum</name>
  		<replaceName>PlunderNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_plundernum</name>
  		<replaceName>PlunderNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_plundernum</name>
  		<replaceName>PlunderNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 plundernum() const;
  inline void set_plundernum(::google::protobuf::uint32 value);

  // repeated .pb.TCrossLevyMyCampInfo MyCampInfoArr = 6;
  inline int mycampinfoarr_size() const;
  inline void clear_mycampinfoarr();
  static const int kMyCampInfoArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>mycampinfoarr</name>
  		<replaceName>MyCampInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_mycampinfoarr</name>
  		<replaceName>MyCampInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_mycampinfoarr</name>
  		<replaceName>MyCampInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mycampinfoarr</name>
  		<replaceName>MyCampInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mycampinfoarr_size</name>
  		<replaceName>MyCampInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyMyCampInfo& mycampinfoarr(int index) const;
  inline ::pb::TCrossLevyMyCampInfo* mutable_mycampinfoarr(int index);
  inline ::pb::TCrossLevyMyCampInfo* add_mycampinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMyCampInfo >&
      mycampinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMyCampInfo >*
      mutable_mycampinfoarr();

  // optional uint64 MonsterRfrTime = 7;
  inline bool has_monsterrfrtime() const;
  inline void clear_monsterrfrtime();
  static const int kMonsterRfrTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>monsterrfrtime</name>
  		<replaceName>MonsterRfrTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterrfrtime</name>
  		<replaceName>MonsterRfrTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterrfrtime</name>
  		<replaceName>MonsterRfrTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 monsterrfrtime() const;
  inline void set_monsterrfrtime(::google::protobuf::uint64 value);

  // repeated .pb.TCrossLevyMonsterInfo MonsterInfoArr = 8;
  inline int monsterinfoarr_size() const;
  inline void clear_monsterinfoarr();
  static const int kMonsterInfoArrFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterinfoarr</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterinfoarr_size</name>
  		<replaceName>MonsterInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyMonsterInfo& monsterinfoarr(int index) const;
  inline ::pb::TCrossLevyMonsterInfo* mutable_monsterinfoarr(int index);
  inline ::pb::TCrossLevyMonsterInfo* add_monsterinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterInfo >&
      monsterinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterInfo >*
      mutable_monsterinfoarr();

  // optional uint32 Score = 9;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // repeated uint32 RewardIdArr = 10;
  inline int rewardidarr_size() const;
  inline void clear_rewardidarr();
  static const int kRewardIdArrFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardidarr_size</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardidarr(int index) const;
  inline void set_rewardidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rewardidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardidarr();

  // repeated .pb.TCrossLevyFormationInfo AtkFmtArr = 11;
  inline int atkfmtarr_size() const;
  inline void clear_atkfmtarr();
  static const int kAtkFmtArrFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>atkfmtarr</name>
  		<replaceName>AtkFmtArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_atkfmtarr</name>
  		<replaceName>AtkFmtArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_atkfmtarr</name>
  		<replaceName>AtkFmtArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkfmtarr</name>
  		<replaceName>AtkFmtArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>atkfmtarr_size</name>
  		<replaceName>AtkFmtArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyFormationInfo& atkfmtarr(int index) const;
  inline ::pb::TCrossLevyFormationInfo* mutable_atkfmtarr(int index);
  inline ::pb::TCrossLevyFormationInfo* add_atkfmtarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >&
      atkfmtarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >*
      mutable_atkfmtarr();

  // repeated .pb.TCrossLevyFormationInfo DefFmtArr = 12;
  inline int deffmtarr_size() const;
  inline void clear_deffmtarr();
  static const int kDefFmtArrFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>deffmtarr</name>
  		<replaceName>DefFmtArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_deffmtarr</name>
  		<replaceName>DefFmtArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_deffmtarr</name>
  		<replaceName>DefFmtArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deffmtarr</name>
  		<replaceName>DefFmtArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>deffmtarr_size</name>
  		<replaceName>DefFmtArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyFormationInfo& deffmtarr(int index) const;
  inline ::pb::TCrossLevyFormationInfo* mutable_deffmtarr(int index);
  inline ::pb::TCrossLevyFormationInfo* add_deffmtarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >&
      deffmtarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >*
      mutable_deffmtarr();

  // optional uint32 PlunderBenefitNum = 13;
  inline bool has_plunderbenefitnum() const;
  inline void clear_plunderbenefitnum();
  static const int kPlunderBenefitNumFieldNumber = 13;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>plunderbenefitnum</name>
  		<replaceName>PlunderBenefitNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_plunderbenefitnum</name>
  		<replaceName>PlunderBenefitNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_plunderbenefitnum</name>
  		<replaceName>PlunderBenefitNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 plunderbenefitnum() const;
  inline void set_plunderbenefitnum(::google::protobuf::uint32 value);

  // optional uint32 ExpelBenefitNum = 14;
  inline bool has_expelbenefitnum() const;
  inline void clear_expelbenefitnum();
  static const int kExpelBenefitNumFieldNumber = 14;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>expelbenefitnum</name>
  		<replaceName>ExpelBenefitNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_expelbenefitnum</name>
  		<replaceName>ExpelBenefitNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_expelbenefitnum</name>
  		<replaceName>ExpelBenefitNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 expelbenefitnum() const;
  inline void set_expelbenefitnum(::google::protobuf::uint32 value);

  // optional uint64 LastRecoverTime = 15;
  inline bool has_lastrecovertime() const;
  inline void clear_lastrecovertime();
  static const int kLastRecoverTimeFieldNumber = 15;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>lastrecovertime</name>
  		<replaceName>LastRecoverTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastrecovertime</name>
  		<replaceName>LastRecoverTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastrecovertime</name>
  		<replaceName>LastRecoverTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastrecovertime() const;
  inline void set_lastrecovertime(::google::protobuf::uint64 value);

  // optional uint64 LastAtkBossTime = 16;
  inline bool has_lastatkbosstime() const;
  inline void clear_lastatkbosstime();
  static const int kLastAtkBossTimeFieldNumber = 16;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetUserInfoRsp</name>
  	<Function>
  		<name>lastatkbosstime</name>
  		<replaceName>LastAtkBossTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastatkbosstime</name>
  		<replaceName>LastAtkBossTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastatkbosstime</name>
  		<replaceName>LastAtkBossTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastatkbosstime() const;
  inline void set_lastatkbosstime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetUserInfoRsp)
 private:
  inline void set_has_leftchallengenum();
  inline void clear_has_leftchallengenum();
  inline void set_has_buychallengenum();
  inline void clear_has_buychallengenum();
  inline void set_has_forcenum();
  inline void clear_has_forcenum();
  inline void set_has_atkbossnum();
  inline void clear_has_atkbossnum();
  inline void set_has_plundernum();
  inline void clear_has_plundernum();
  inline void set_has_monsterrfrtime();
  inline void clear_has_monsterrfrtime();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_plunderbenefitnum();
  inline void clear_has_plunderbenefitnum();
  inline void set_has_expelbenefitnum();
  inline void clear_has_expelbenefitnum();
  inline void set_has_lastrecovertime();
  inline void clear_has_lastrecovertime();
  inline void set_has_lastatkbosstime();
  inline void clear_has_lastatkbosstime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 leftchallengenum_;
  ::google::protobuf::uint32 buychallengenum_;
  ::google::protobuf::uint32 forcenum_;
  ::google::protobuf::uint32 atkbossnum_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMyCampInfo > mycampinfoarr_;
  ::google::protobuf::uint64 monsterrfrtime_;
  ::google::protobuf::uint32 plundernum_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterInfo > monsterinfoarr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardidarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo > atkfmtarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo > deffmtarr_;
  ::google::protobuf::uint32 plunderbenefitnum_;
  ::google::protobuf::uint32 expelbenefitnum_;
  ::google::protobuf::uint64 lastrecovertime_;
  ::google::protobuf::uint64 lastatkbosstime_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetUserInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetCityInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetCityInfoReq : public ::google::protobuf::Message {
 public:
  TCrossLevyGetCityInfoReq();
  virtual ~TCrossLevyGetCityInfoReq();

  TCrossLevyGetCityInfoReq(const TCrossLevyGetCityInfoReq& from);

  inline TCrossLevyGetCityInfoReq& operator=(const TCrossLevyGetCityInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetCityInfoReq& default_instance();

  void Swap(TCrossLevyGetCityInfoReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetCityInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetCityInfoReq& from);
  void MergeFrom(const TCrossLevyGetCityInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetCityInfoReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CityIndex = 2;
  inline bool has_cityindex() const;
  inline void clear_cityindex();
  static const int kCityIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetCityInfoReq</name>
  	<Function>
  		<name>cityindex</name>
  		<replaceName>CityIndex</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityindex</name>
  		<replaceName>CityIndex</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityindex</name>
  		<replaceName>CityIndex</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityindex() const;
  inline void set_cityindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetCityInfoReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_cityindex();
  inline void clear_has_cityindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 cityindex_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetCityInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetCityInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetCityInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetCityInfoRsp();
  virtual ~TCrossLevyGetCityInfoRsp();

  TCrossLevyGetCityInfoRsp(const TCrossLevyGetCityInfoRsp& from);

  inline TCrossLevyGetCityInfoRsp& operator=(const TCrossLevyGetCityInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetCityInfoRsp& default_instance();

  void Swap(TCrossLevyGetCityInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetCityInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetCityInfoRsp& from);
  void MergeFrom(const TCrossLevyGetCityInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevyCampInfo CampInfoArr = 1;
  inline int campinfoarr_size() const;
  inline void clear_campinfoarr();
  static const int kCampInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetCityInfoRsp</name>
  	<Function>
  		<name>campinfoarr</name>
  		<replaceName>CampInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_campinfoarr</name>
  		<replaceName>CampInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_campinfoarr</name>
  		<replaceName>CampInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campinfoarr</name>
  		<replaceName>CampInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>campinfoarr_size</name>
  		<replaceName>CampInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyCampInfo& campinfoarr(int index) const;
  inline ::pb::TCrossLevyCampInfo* mutable_campinfoarr(int index);
  inline ::pb::TCrossLevyCampInfo* add_campinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCampInfo >&
      campinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCampInfo >*
      mutable_campinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetCityInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCampInfo > campinfoarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetCityInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyMoveToEmptyCampReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyMoveToEmptyCampReq : public ::google::protobuf::Message {
 public:
  TCrossLevyMoveToEmptyCampReq();
  virtual ~TCrossLevyMoveToEmptyCampReq();

  TCrossLevyMoveToEmptyCampReq(const TCrossLevyMoveToEmptyCampReq& from);

  inline TCrossLevyMoveToEmptyCampReq& operator=(const TCrossLevyMoveToEmptyCampReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyMoveToEmptyCampReq& default_instance();

  void Swap(TCrossLevyMoveToEmptyCampReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyMoveToEmptyCampReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyMoveToEmptyCampReq& from);
  void MergeFrom(const TCrossLevyMoveToEmptyCampReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMoveToEmptyCampReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMoveToEmptyCampReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint32 OriCityId = 3;
  inline bool has_oricityid() const;
  inline void clear_oricityid();
  static const int kOriCityIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMoveToEmptyCampReq</name>
  	<Function>
  		<name>oricityid</name>
  		<replaceName>OriCityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_oricityid</name>
  		<replaceName>OriCityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_oricityid</name>
  		<replaceName>OriCityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 oricityid() const;
  inline void set_oricityid(::google::protobuf::uint32 value);

  // optional uint32 OriCampId = 4;
  inline bool has_oricampid() const;
  inline void clear_oricampid();
  static const int kOriCampIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyMoveToEmptyCampReq</name>
  	<Function>
  		<name>oricampid</name>
  		<replaceName>OriCampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_oricampid</name>
  		<replaceName>OriCampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_oricampid</name>
  		<replaceName>OriCampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 oricampid() const;
  inline void set_oricampid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyMoveToEmptyCampReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_oricityid();
  inline void clear_has_oricityid();
  inline void set_has_oricampid();
  inline void clear_has_oricampid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 oricityid_;
  ::google::protobuf::uint32 oricampid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyMoveToEmptyCampReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevySetDefFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevySetDefFormationReq : public ::google::protobuf::Message {
 public:
  TCrossLevySetDefFormationReq();
  virtual ~TCrossLevySetDefFormationReq();

  TCrossLevySetDefFormationReq(const TCrossLevySetDefFormationReq& from);

  inline TCrossLevySetDefFormationReq& operator=(const TCrossLevySetDefFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevySetDefFormationReq& default_instance();

  void Swap(TCrossLevySetDefFormationReq* other);

  // implements Message ----------------------------------------------

  TCrossLevySetDefFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevySetDefFormationReq& from);
  void MergeFrom(const TCrossLevySetDefFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySetDefFormationReq</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyFormationInfo& formationarr(int index) const;
  inline ::pb::TCrossLevyFormationInfo* mutable_formationarr(int index);
  inline ::pb::TCrossLevyFormationInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevySetDefFormationReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevySetDefFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevySetAtkFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevySetAtkFormationReq : public ::google::protobuf::Message {
 public:
  TCrossLevySetAtkFormationReq();
  virtual ~TCrossLevySetAtkFormationReq();

  TCrossLevySetAtkFormationReq(const TCrossLevySetAtkFormationReq& from);

  inline TCrossLevySetAtkFormationReq& operator=(const TCrossLevySetAtkFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevySetAtkFormationReq& default_instance();

  void Swap(TCrossLevySetAtkFormationReq* other);

  // implements Message ----------------------------------------------

  TCrossLevySetAtkFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevySetAtkFormationReq& from);
  void MergeFrom(const TCrossLevySetAtkFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
  inline int formationarr_size() const;
  inline void clear_formationarr();
  static const int kFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevySetAtkFormationReq</name>
  	<Function>
  		<name>formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_formationarr</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>formationarr_size</name>
  		<replaceName>FormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyFormationInfo& formationarr(int index) const;
  inline ::pb::TCrossLevyFormationInfo* mutable_formationarr(int index);
  inline ::pb::TCrossLevyFormationInfo* add_formationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >&
      formationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >*
      mutable_formationarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevySetAtkFormationReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo > formationarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevySetAtkFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetEnemyFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetEnemyFormationReq : public ::google::protobuf::Message {
 public:
  TCrossLevyGetEnemyFormationReq();
  virtual ~TCrossLevyGetEnemyFormationReq();

  TCrossLevyGetEnemyFormationReq(const TCrossLevyGetEnemyFormationReq& from);

  inline TCrossLevyGetEnemyFormationReq& operator=(const TCrossLevyGetEnemyFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetEnemyFormationReq& default_instance();

  void Swap(TCrossLevyGetEnemyFormationReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetEnemyFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetEnemyFormationReq& from);
  void MergeFrom(const TCrossLevyGetEnemyFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetEnemyFormationReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetEnemyFormationReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint64 EnemyUid = 3;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetEnemyFormationReq</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetEnemyFormationReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint64 enemyuid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetEnemyFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetEnemyFormationRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetEnemyFormationRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetEnemyFormationRsp();
  virtual ~TCrossLevyGetEnemyFormationRsp();

  TCrossLevyGetEnemyFormationRsp(const TCrossLevyGetEnemyFormationRsp& from);

  inline TCrossLevyGetEnemyFormationRsp& operator=(const TCrossLevyGetEnemyFormationRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetEnemyFormationRsp& default_instance();

  void Swap(TCrossLevyGetEnemyFormationRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetEnemyFormationRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetEnemyFormationRsp& from);
  void MergeFrom(const TCrossLevyGetEnemyFormationRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevyEnemyFormation EnemyFormationArr = 1;
  inline int enemyformationarr_size() const;
  inline void clear_enemyformationarr();
  static const int kEnemyFormationArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetEnemyFormationRsp</name>
  	<Function>
  		<name>enemyformationarr</name>
  		<replaceName>EnemyFormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemyformationarr</name>
  		<replaceName>EnemyFormationArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemyformationarr</name>
  		<replaceName>EnemyFormationArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyformationarr</name>
  		<replaceName>EnemyFormationArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemyformationarr_size</name>
  		<replaceName>EnemyFormationArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyEnemyFormation& enemyformationarr(int index) const;
  inline ::pb::TCrossLevyEnemyFormation* mutable_enemyformationarr(int index);
  inline ::pb::TCrossLevyEnemyFormation* add_enemyformationarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyFormation >&
      enemyformationarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyFormation >*
      mutable_enemyformationarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetEnemyFormationRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyFormation > enemyformationarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetEnemyFormationRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyForceCollectReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyForceCollectReq : public ::google::protobuf::Message {
 public:
  TCrossLevyForceCollectReq();
  virtual ~TCrossLevyForceCollectReq();

  TCrossLevyForceCollectReq(const TCrossLevyForceCollectReq& from);

  inline TCrossLevyForceCollectReq& operator=(const TCrossLevyForceCollectReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyForceCollectReq& default_instance();

  void Swap(TCrossLevyForceCollectReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyForceCollectReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyForceCollectReq& from);
  void MergeFrom(const TCrossLevyForceCollectReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceCollectReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceCollectReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyForceCollectReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyForceCollectReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyForceCollectRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyForceCollectRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyForceCollectRsp();
  virtual ~TCrossLevyForceCollectRsp();

  TCrossLevyForceCollectRsp(const TCrossLevyForceCollectRsp& from);

  inline TCrossLevyForceCollectRsp& operator=(const TCrossLevyForceCollectRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyForceCollectRsp& default_instance();

  void Swap(TCrossLevyForceCollectRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyForceCollectRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyForceCollectRsp& from);
  void MergeFrom(const TCrossLevyForceCollectRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceCollectRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 SettleScore = 2;
  inline bool has_settlescore() const;
  inline void clear_settlescore();
  static const int kSettleScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceCollectRsp</name>
  	<Function>
  		<name>settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 settlescore() const;
  inline void set_settlescore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyForceCollectRsp)
 private:
  inline void set_has_settlescore();
  inline void clear_has_settlescore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 settlescore_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyForceCollectRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyPlunderReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyPlunderReq : public ::google::protobuf::Message {
 public:
  TCrossLevyPlunderReq();
  virtual ~TCrossLevyPlunderReq();

  TCrossLevyPlunderReq(const TCrossLevyPlunderReq& from);

  inline TCrossLevyPlunderReq& operator=(const TCrossLevyPlunderReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyPlunderReq& default_instance();

  void Swap(TCrossLevyPlunderReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyPlunderReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyPlunderReq& from);
  void MergeFrom(const TCrossLevyPlunderReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint64 EnemyUid = 3;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderReq</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyPlunderReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint64 enemyuid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyPlunderReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyPlunderRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyPlunderRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyPlunderRsp();
  virtual ~TCrossLevyPlunderRsp();

  TCrossLevyPlunderRsp(const TCrossLevyPlunderRsp& from);

  inline TCrossLevyPlunderRsp& operator=(const TCrossLevyPlunderRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyPlunderRsp& default_instance();

  void Swap(TCrossLevyPlunderRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyPlunderRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyPlunderRsp& from);
  void MergeFrom(const TCrossLevyPlunderRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsAtkWin = 1;
  inline bool has_isatkwin() const;
  inline void clear_isatkwin();
  static const int kIsAtkWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderRsp</name>
  	<Function>
  		<name>isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isatkwin() const;
  inline void set_isatkwin(bool value);

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderRsp</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo);

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderRsp</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defuserinfo();
  inline ::pb::TUserSimpleInfo* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo);

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyUserRecordViewInfo& recordarr(int index) const;
  inline ::pb::TCrossLevyUserRecordViewInfo* mutable_recordarr(int index);
  inline ::pb::TCrossLevyUserRecordViewInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >*
      mutable_recordarr();

  // repeated .pb.TCommonReward RewardArr = 5;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 RewardScore = 6;
  inline bool has_rewardscore() const;
  inline void clear_rewardscore();
  static const int kRewardScoreFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyPlunderRsp</name>
  	<Function>
  		<name>rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardscore() const;
  inline void set_rewardscore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyPlunderRsp)
 private:
  inline void set_has_isatkwin();
  inline void clear_has_isatkwin();
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();
  inline void set_has_rewardscore();
  inline void clear_has_rewardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* atkuserinfo_;
  ::pb::TUserSimpleInfo* defuserinfo_;
  bool isatkwin_;
  ::google::protobuf::uint32 rewardscore_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo > recordarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyPlunderRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyExpelReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyExpelReq : public ::google::protobuf::Message {
 public:
  TCrossLevyExpelReq();
  virtual ~TCrossLevyExpelReq();

  TCrossLevyExpelReq(const TCrossLevyExpelReq& from);

  inline TCrossLevyExpelReq& operator=(const TCrossLevyExpelReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyExpelReq& default_instance();

  void Swap(TCrossLevyExpelReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyExpelReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyExpelReq& from);
  void MergeFrom(const TCrossLevyExpelReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint64 EnemyUid = 3;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelReq</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyExpelReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint64 enemyuid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyExpelReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyExpelRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyExpelRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyExpelRsp();
  virtual ~TCrossLevyExpelRsp();

  TCrossLevyExpelRsp(const TCrossLevyExpelRsp& from);

  inline TCrossLevyExpelRsp& operator=(const TCrossLevyExpelRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyExpelRsp& default_instance();

  void Swap(TCrossLevyExpelRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyExpelRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyExpelRsp& from);
  void MergeFrom(const TCrossLevyExpelRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsAtkWin = 1;
  inline bool has_isatkwin() const;
  inline void clear_isatkwin();
  static const int kIsAtkWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelRsp</name>
  	<Function>
  		<name>isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isatkwin() const;
  inline void set_isatkwin(bool value);

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelRsp</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo);

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelRsp</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defuserinfo();
  inline ::pb::TUserSimpleInfo* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo);

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyUserRecordViewInfo& recordarr(int index) const;
  inline ::pb::TCrossLevyUserRecordViewInfo* mutable_recordarr(int index);
  inline ::pb::TCrossLevyUserRecordViewInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >*
      mutable_recordarr();

  // repeated .pb.TCommonReward RewardArr = 5;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 RewardScore = 6;
  inline bool has_rewardscore() const;
  inline void clear_rewardscore();
  static const int kRewardScoreFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyExpelRsp</name>
  	<Function>
  		<name>rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardscore() const;
  inline void set_rewardscore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyExpelRsp)
 private:
  inline void set_has_isatkwin();
  inline void clear_has_isatkwin();
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();
  inline void set_has_rewardscore();
  inline void clear_has_rewardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* atkuserinfo_;
  ::pb::TUserSimpleInfo* defuserinfo_;
  bool isatkwin_;
  ::google::protobuf::uint32 rewardscore_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo > recordarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyExpelRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyForceMoveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyForceMoveReq : public ::google::protobuf::Message {
 public:
  TCrossLevyForceMoveReq();
  virtual ~TCrossLevyForceMoveReq();

  TCrossLevyForceMoveReq(const TCrossLevyForceMoveReq& from);

  inline TCrossLevyForceMoveReq& operator=(const TCrossLevyForceMoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyForceMoveReq& default_instance();

  void Swap(TCrossLevyForceMoveReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyForceMoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyForceMoveReq& from);
  void MergeFrom(const TCrossLevyForceMoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceMoveReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceMoveReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint64 EnemyUid = 3;
  inline bool has_enemyuid() const;
  inline void clear_enemyuid();
  static const int kEnemyUidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceMoveReq</name>
  	<Function>
  		<name>enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemyuid</name>
  		<replaceName>EnemyUid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 enemyuid() const;
  inline void set_enemyuid(::google::protobuf::uint64 value);

  // optional uint32 OriCityId = 4;
  inline bool has_oricityid() const;
  inline void clear_oricityid();
  static const int kOriCityIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceMoveReq</name>
  	<Function>
  		<name>oricityid</name>
  		<replaceName>OriCityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_oricityid</name>
  		<replaceName>OriCityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_oricityid</name>
  		<replaceName>OriCityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 oricityid() const;
  inline void set_oricityid(::google::protobuf::uint32 value);

  // optional uint32 OriCampId = 5;
  inline bool has_oricampid() const;
  inline void clear_oricampid();
  static const int kOriCampIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceMoveReq</name>
  	<Function>
  		<name>oricampid</name>
  		<replaceName>OriCampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_oricampid</name>
  		<replaceName>OriCampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_oricampid</name>
  		<replaceName>OriCampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 oricampid() const;
  inline void set_oricampid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyForceMoveReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_enemyuid();
  inline void clear_has_enemyuid();
  inline void set_has_oricityid();
  inline void clear_has_oricityid();
  inline void set_has_oricampid();
  inline void clear_has_oricampid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint64 enemyuid_;
  ::google::protobuf::uint32 oricityid_;
  ::google::protobuf::uint32 oricampid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyForceMoveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyForceMoveRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyForceMoveRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyForceMoveRsp();
  virtual ~TCrossLevyForceMoveRsp();

  TCrossLevyForceMoveRsp(const TCrossLevyForceMoveRsp& from);

  inline TCrossLevyForceMoveRsp& operator=(const TCrossLevyForceMoveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyForceMoveRsp& default_instance();

  void Swap(TCrossLevyForceMoveRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyForceMoveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyForceMoveRsp& from);
  void MergeFrom(const TCrossLevyForceMoveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsAtkWin = 1;
  inline bool has_isatkwin() const;
  inline void clear_isatkwin();
  static const int kIsAtkWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceMoveRsp</name>
  	<Function>
  		<name>isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isatkwin() const;
  inline void set_isatkwin(bool value);

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceMoveRsp</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo);

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceMoveRsp</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defuserinfo();
  inline ::pb::TUserSimpleInfo* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo);

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceMoveRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyUserRecordViewInfo& recordarr(int index) const;
  inline ::pb::TCrossLevyUserRecordViewInfo* mutable_recordarr(int index);
  inline ::pb::TCrossLevyUserRecordViewInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >*
      mutable_recordarr();

  // optional uint32 RewardScore = 5;
  inline bool has_rewardscore() const;
  inline void clear_rewardscore();
  static const int kRewardScoreFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyForceMoveRsp</name>
  	<Function>
  		<name>rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardscore() const;
  inline void set_rewardscore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyForceMoveRsp)
 private:
  inline void set_has_isatkwin();
  inline void clear_has_isatkwin();
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();
  inline void set_has_rewardscore();
  inline void clear_has_rewardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* atkuserinfo_;
  ::pb::TUserSimpleInfo* defuserinfo_;
  bool isatkwin_;
  ::google::protobuf::uint32 rewardscore_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo > recordarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyForceMoveRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetBattleArgsReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetBattleArgsReq : public ::google::protobuf::Message {
 public:
  TCrossLevyGetBattleArgsReq();
  virtual ~TCrossLevyGetBattleArgsReq();

  TCrossLevyGetBattleArgsReq(const TCrossLevyGetBattleArgsReq& from);

  inline TCrossLevyGetBattleArgsReq& operator=(const TCrossLevyGetBattleArgsReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetBattleArgsReq& default_instance();

  void Swap(TCrossLevyGetBattleArgsReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetBattleArgsReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetBattleArgsReq& from);
  void MergeFrom(const TCrossLevyGetBattleArgsReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetBattleArgsReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetBattleArgsReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // optional uint64 RefreshTime = 3;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetBattleArgsReq</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetBattleArgsReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetBattleArgsReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetBattleArgsRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetBattleArgsRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetBattleArgsRsp();
  virtual ~TCrossLevyGetBattleArgsRsp();

  TCrossLevyGetBattleArgsRsp(const TCrossLevyGetBattleArgsRsp& from);

  inline TCrossLevyGetBattleArgsRsp& operator=(const TCrossLevyGetBattleArgsRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetBattleArgsRsp& default_instance();

  void Swap(TCrossLevyGetBattleArgsRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetBattleArgsRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetBattleArgsRsp& from);
  void MergeFrom(const TCrossLevyGetBattleArgsRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleArgs BattleArgs = 1;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetBattleArgsRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetBattleArgsRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleArgs* battleargs_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetBattleArgsRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReportBattleBossReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReportBattleBossReq : public ::google::protobuf::Message {
 public:
  TCrossLevyReportBattleBossReq();
  virtual ~TCrossLevyReportBattleBossReq();

  TCrossLevyReportBattleBossReq(const TCrossLevyReportBattleBossReq& from);

  inline TCrossLevyReportBattleBossReq& operator=(const TCrossLevyReportBattleBossReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReportBattleBossReq& default_instance();

  void Swap(TCrossLevyReportBattleBossReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyReportBattleBossReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReportBattleBossReq& from);
  void MergeFrom(const TCrossLevyReportBattleBossReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleBossReq</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 2;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleBossReq</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // optional bytes BattleRet = 3;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleBossReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleret() const;
  inline void set_battleret(const ::std::string& value);
  inline void set_battleret(const char* value);
  inline void set_battleret(const void* value, size_t size);
  inline ::std::string* mutable_battleret();
  inline ::std::string* release_battleret();
  inline void set_allocated_battleret(::std::string* battleret);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReportBattleBossReq)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 refreshtime_;
  ::std::string* battleret_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReportBattleBossReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReportBattleBossRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReportBattleBossRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyReportBattleBossRsp();
  virtual ~TCrossLevyReportBattleBossRsp();

  TCrossLevyReportBattleBossRsp(const TCrossLevyReportBattleBossRsp& from);

  inline TCrossLevyReportBattleBossRsp& operator=(const TCrossLevyReportBattleBossRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReportBattleBossRsp& default_instance();

  void Swap(TCrossLevyReportBattleBossRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyReportBattleBossRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReportBattleBossRsp& from);
  void MergeFrom(const TCrossLevyReportBattleBossRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 isFinalStrike = 1;
  inline bool has_isfinalstrike() const;
  inline void clear_isfinalstrike();
  static const int kIsFinalStrikeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleBossRsp</name>
  	<Function>
  		<name>isfinalstrike</name>
  		<replaceName>isFinalStrike</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isfinalstrike</name>
  		<replaceName>isFinalStrike</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isfinalstrike</name>
  		<replaceName>isFinalStrike</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 isfinalstrike() const;
  inline void set_isfinalstrike(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleBossRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint64 LastAtkBossTime = 3;
  inline bool has_lastatkbosstime() const;
  inline void clear_lastatkbosstime();
  static const int kLastAtkBossTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleBossRsp</name>
  	<Function>
  		<name>lastatkbosstime</name>
  		<replaceName>LastAtkBossTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lastatkbosstime</name>
  		<replaceName>LastAtkBossTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lastatkbosstime</name>
  		<replaceName>LastAtkBossTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 lastatkbosstime() const;
  inline void set_lastatkbosstime(::google::protobuf::uint64 value);

  // optional uint32 RewardScore = 4;
  inline bool has_rewardscore() const;
  inline void clear_rewardscore();
  static const int kRewardScoreFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleBossRsp</name>
  	<Function>
  		<name>rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardscore() const;
  inline void set_rewardscore(::google::protobuf::uint32 value);

  // optional uint64 CurHp = 5;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHpFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleBossRsp</name>
  	<Function>
  		<name>curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curhp</name>
  		<replaceName>CurHp</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 curhp() const;
  inline void set_curhp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReportBattleBossRsp)
 private:
  inline void set_has_isfinalstrike();
  inline void clear_has_isfinalstrike();
  inline void set_has_lastatkbosstime();
  inline void clear_has_lastatkbosstime();
  inline void set_has_rewardscore();
  inline void clear_has_rewardscore();
  inline void set_has_curhp();
  inline void clear_has_curhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 isfinalstrike_;
  ::google::protobuf::uint32 rewardscore_;
  ::google::protobuf::uint64 lastatkbosstime_;
  ::google::protobuf::uint64 curhp_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReportBattleBossRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReportBattleMonsterReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReportBattleMonsterReq : public ::google::protobuf::Message {
 public:
  TCrossLevyReportBattleMonsterReq();
  virtual ~TCrossLevyReportBattleMonsterReq();

  TCrossLevyReportBattleMonsterReq(const TCrossLevyReportBattleMonsterReq& from);

  inline TCrossLevyReportBattleMonsterReq& operator=(const TCrossLevyReportBattleMonsterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReportBattleMonsterReq& default_instance();

  void Swap(TCrossLevyReportBattleMonsterReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyReportBattleMonsterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReportBattleMonsterReq& from);
  void MergeFrom(const TCrossLevyReportBattleMonsterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MonsterId = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleMonsterReq</name>
  	<Function>
  		<name>monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterid</name>
  		<replaceName>MonsterId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional uint64 MonsterRfrTime = 2;
  inline bool has_monsterrfrtime() const;
  inline void clear_monsterrfrtime();
  static const int kMonsterRfrTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleMonsterReq</name>
  	<Function>
  		<name>monsterrfrtime</name>
  		<replaceName>MonsterRfrTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_monsterrfrtime</name>
  		<replaceName>MonsterRfrTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterrfrtime</name>
  		<replaceName>MonsterRfrTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 monsterrfrtime() const;
  inline void set_monsterrfrtime(::google::protobuf::uint64 value);

  // optional bytes BattleRet = 3;
  inline bool has_battleret() const;
  inline void clear_battleret();
  static const int kBattleRetFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleMonsterReq</name>
  	<Function>
  		<name>battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleret</name>
  		<replaceName>BattleRet</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleret() const;
  inline void set_battleret(const ::std::string& value);
  inline void set_battleret(const char* value);
  inline void set_battleret(const void* value, size_t size);
  inline ::std::string* mutable_battleret();
  inline ::std::string* release_battleret();
  inline void set_allocated_battleret(::std::string* battleret);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReportBattleMonsterReq)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_monsterrfrtime();
  inline void clear_has_monsterrfrtime();
  inline void set_has_battleret();
  inline void clear_has_battleret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 monsterrfrtime_;
  ::std::string* battleret_;
  ::google::protobuf::uint32 monsterid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReportBattleMonsterReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReportBattleMonsterRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReportBattleMonsterRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyReportBattleMonsterRsp();
  virtual ~TCrossLevyReportBattleMonsterRsp();

  TCrossLevyReportBattleMonsterRsp(const TCrossLevyReportBattleMonsterRsp& from);

  inline TCrossLevyReportBattleMonsterRsp& operator=(const TCrossLevyReportBattleMonsterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReportBattleMonsterRsp& default_instance();

  void Swap(TCrossLevyReportBattleMonsterRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyReportBattleMonsterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReportBattleMonsterRsp& from);
  void MergeFrom(const TCrossLevyReportBattleMonsterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardScore = 1;
  inline bool has_rewardscore() const;
  inline void clear_rewardscore();
  static const int kRewardScoreFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleMonsterRsp</name>
  	<Function>
  		<name>rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardscore</name>
  		<replaceName>RewardScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardscore() const;
  inline void set_rewardscore(::google::protobuf::uint32 value);

  // repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 2;
  inline int monsterarmyhpinfoarr_size() const;
  inline void clear_monsterarmyhpinfoarr();
  static const int kMonsterArmyHpInfoArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleMonsterRsp</name>
  	<Function>
  		<name>monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_monsterarmyhpinfoarr</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>monsterarmyhpinfoarr_size</name>
  		<replaceName>MonsterArmyHpInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyMonsterArmyHpInfo& monsterarmyhpinfoarr(int index) const;
  inline ::pb::TCrossLevyMonsterArmyHpInfo* mutable_monsterarmyhpinfoarr(int index);
  inline ::pb::TCrossLevyMonsterArmyHpInfo* add_monsterarmyhpinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >&
      monsterarmyhpinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >*
      mutable_monsterarmyhpinfoarr();

  // repeated .pb.TCommonReward RewardArr = 3;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReportBattleMonsterRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReportBattleMonsterRsp)
 private:
  inline void set_has_rewardscore();
  inline void clear_has_rewardscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo > monsterarmyhpinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 rewardscore_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReportBattleMonsterRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetSelfRecordInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetSelfRecordInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetSelfRecordInfoRsp();
  virtual ~TCrossLevyGetSelfRecordInfoRsp();

  TCrossLevyGetSelfRecordInfoRsp(const TCrossLevyGetSelfRecordInfoRsp& from);

  inline TCrossLevyGetSelfRecordInfoRsp& operator=(const TCrossLevyGetSelfRecordInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetSelfRecordInfoRsp& default_instance();

  void Swap(TCrossLevyGetSelfRecordInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetSelfRecordInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetSelfRecordInfoRsp& from);
  void MergeFrom(const TCrossLevyGetSelfRecordInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevySelfRecordInfo RecordArr = 1;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetSelfRecordInfoRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevySelfRecordInfo& recordarr(int index) const;
  inline ::pb::TCrossLevySelfRecordInfo* mutable_recordarr(int index);
  inline ::pb::TCrossLevySelfRecordInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevySelfRecordInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevySelfRecordInfo >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetSelfRecordInfoRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevySelfRecordInfo > recordarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetSelfRecordInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetRecordResultInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetRecordResultInfoReq : public ::google::protobuf::Message {
 public:
  TCrossLevyGetRecordResultInfoReq();
  virtual ~TCrossLevyGetRecordResultInfoReq();

  TCrossLevyGetRecordResultInfoReq(const TCrossLevyGetRecordResultInfoReq& from);

  inline TCrossLevyGetRecordResultInfoReq& operator=(const TCrossLevyGetRecordResultInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetRecordResultInfoReq& default_instance();

  void Swap(TCrossLevyGetRecordResultInfoReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetRecordResultInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetRecordResultInfoReq& from);
  void MergeFrom(const TCrossLevyGetRecordResultInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RecordResultId = 1;
  inline bool has_recordresultid() const;
  inline void clear_recordresultid();
  static const int kRecordResultIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetRecordResultInfoReq</name>
  	<Function>
  		<name>recordresultid</name>
  		<replaceName>RecordResultId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordresultid</name>
  		<replaceName>RecordResultId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordresultid</name>
  		<replaceName>RecordResultId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 recordresultid() const;
  inline void set_recordresultid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetRecordResultInfoReq)
 private:
  inline void set_has_recordresultid();
  inline void clear_has_recordresultid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 recordresultid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetRecordResultInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetRecordResultInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetRecordResultInfoRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetRecordResultInfoRsp();
  virtual ~TCrossLevyGetRecordResultInfoRsp();

  TCrossLevyGetRecordResultInfoRsp(const TCrossLevyGetRecordResultInfoRsp& from);

  inline TCrossLevyGetRecordResultInfoRsp& operator=(const TCrossLevyGetRecordResultInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetRecordResultInfoRsp& default_instance();

  void Swap(TCrossLevyGetRecordResultInfoRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetRecordResultInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetRecordResultInfoRsp& from);
  void MergeFrom(const TCrossLevyGetRecordResultInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool IsAtkWin = 1;
  inline bool has_isatkwin() const;
  inline void clear_isatkwin();
  static const int kIsAtkWinFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetRecordResultInfoRsp</name>
  	<Function>
  		<name>isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_isatkwin</name>
  		<replaceName>IsAtkWin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool isatkwin() const;
  inline void set_isatkwin(bool value);

  // optional .pb.TUserSimpleInfo AtkUserInfo = 2;
  inline bool has_atkuserinfo() const;
  inline void clear_atkuserinfo();
  static const int kAtkUserInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetRecordResultInfoRsp</name>
  	<Function>
  		<name>atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkuserinfo</name>
  		<replaceName>AtkUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& atkuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_atkuserinfo();
  inline ::pb::TUserSimpleInfo* release_atkuserinfo();
  inline void set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo);

  // optional .pb.TUserSimpleInfo DefUserInfo = 3;
  inline bool has_defuserinfo() const;
  inline void clear_defuserinfo();
  static const int kDefUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetRecordResultInfoRsp</name>
  	<Function>
  		<name>defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defuserinfo</name>
  		<replaceName>DefUserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& defuserinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_defuserinfo();
  inline ::pb::TUserSimpleInfo* release_defuserinfo();
  inline void set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo);

  // repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetRecordResultInfoRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyUserRecordViewInfo& recordarr(int index) const;
  inline ::pb::TCrossLevyUserRecordViewInfo* mutable_recordarr(int index);
  inline ::pb::TCrossLevyUserRecordViewInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetRecordResultInfoRsp)
 private:
  inline void set_has_isatkwin();
  inline void clear_has_isatkwin();
  inline void set_has_atkuserinfo();
  inline void clear_has_atkuserinfo();
  inline void set_has_defuserinfo();
  inline void clear_has_defuserinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* atkuserinfo_;
  ::pb::TUserSimpleInfo* defuserinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo > recordarr_;
  bool isatkwin_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetRecordResultInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReceiveScoreRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReceiveScoreRewardReq : public ::google::protobuf::Message {
 public:
  TCrossLevyReceiveScoreRewardReq();
  virtual ~TCrossLevyReceiveScoreRewardReq();

  TCrossLevyReceiveScoreRewardReq(const TCrossLevyReceiveScoreRewardReq& from);

  inline TCrossLevyReceiveScoreRewardReq& operator=(const TCrossLevyReceiveScoreRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReceiveScoreRewardReq& default_instance();

  void Swap(TCrossLevyReceiveScoreRewardReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyReceiveScoreRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReceiveScoreRewardReq& from);
  void MergeFrom(const TCrossLevyReceiveScoreRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReceiveScoreRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReceiveScoreRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReceiveScoreRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReceiveScoreRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReceiveScoreRewardRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyReceiveScoreRewardRsp();
  virtual ~TCrossLevyReceiveScoreRewardRsp();

  TCrossLevyReceiveScoreRewardRsp(const TCrossLevyReceiveScoreRewardRsp& from);

  inline TCrossLevyReceiveScoreRewardRsp& operator=(const TCrossLevyReceiveScoreRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReceiveScoreRewardRsp& default_instance();

  void Swap(TCrossLevyReceiveScoreRewardRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyReceiveScoreRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReceiveScoreRewardRsp& from);
  void MergeFrom(const TCrossLevyReceiveScoreRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReceiveScoreRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReceiveScoreRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReceiveScoreRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetGuildUserListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetGuildUserListRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetGuildUserListRsp();
  virtual ~TCrossLevyGetGuildUserListRsp();

  TCrossLevyGetGuildUserListRsp(const TCrossLevyGetGuildUserListRsp& from);

  inline TCrossLevyGetGuildUserListRsp& operator=(const TCrossLevyGetGuildUserListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetGuildUserListRsp& default_instance();

  void Swap(TCrossLevyGetGuildUserListRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetGuildUserListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetGuildUserListRsp& from);
  void MergeFrom(const TCrossLevyGetGuildUserListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevyGuildUserInfo GuildUserArr = 1;
  inline int guilduserarr_size() const;
  inline void clear_guilduserarr();
  static const int kGuildUserArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetGuildUserListRsp</name>
  	<Function>
  		<name>guilduserarr</name>
  		<replaceName>GuildUserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_guilduserarr</name>
  		<replaceName>GuildUserArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_guilduserarr</name>
  		<replaceName>GuildUserArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guilduserarr</name>
  		<replaceName>GuildUserArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>guilduserarr_size</name>
  		<replaceName>GuildUserArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyGuildUserInfo& guilduserarr(int index) const;
  inline ::pb::TCrossLevyGuildUserInfo* mutable_guilduserarr(int index);
  inline ::pb::TCrossLevyGuildUserInfo* add_guilduserarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyGuildUserInfo >&
      guilduserarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyGuildUserInfo >*
      mutable_guilduserarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetGuildUserListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyGuildUserInfo > guilduserarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetGuildUserListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReceiveSettleRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReceiveSettleRewardReq : public ::google::protobuf::Message {
 public:
  TCrossLevyReceiveSettleRewardReq();
  virtual ~TCrossLevyReceiveSettleRewardReq();

  TCrossLevyReceiveSettleRewardReq(const TCrossLevyReceiveSettleRewardReq& from);

  inline TCrossLevyReceiveSettleRewardReq& operator=(const TCrossLevyReceiveSettleRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReceiveSettleRewardReq& default_instance();

  void Swap(TCrossLevyReceiveSettleRewardReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyReceiveSettleRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReceiveSettleRewardReq& from);
  void MergeFrom(const TCrossLevyReceiveSettleRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReceiveSettleRewardReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampId = 2;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReceiveSettleRewardReq</name>
  	<Function>
  		<name>campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campid</name>
  		<replaceName>CampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReceiveSettleRewardReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campid();
  inline void clear_has_campid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReceiveSettleRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyReceiveSettleRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyReceiveSettleRewardRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyReceiveSettleRewardRsp();
  virtual ~TCrossLevyReceiveSettleRewardRsp();

  TCrossLevyReceiveSettleRewardRsp(const TCrossLevyReceiveSettleRewardRsp& from);

  inline TCrossLevyReceiveSettleRewardRsp& operator=(const TCrossLevyReceiveSettleRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyReceiveSettleRewardRsp& default_instance();

  void Swap(TCrossLevyReceiveSettleRewardRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyReceiveSettleRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyReceiveSettleRewardRsp& from);
  void MergeFrom(const TCrossLevyReceiveSettleRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward RewardArr = 1;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReceiveSettleRewardRsp</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // optional uint32 SettleScore = 2;
  inline bool has_settlescore() const;
  inline void clear_settlescore();
  static const int kSettleScoreFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReceiveSettleRewardRsp</name>
  	<Function>
  		<name>settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_settlescore</name>
  		<replaceName>SettleScore</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 settlescore() const;
  inline void set_settlescore(::google::protobuf::uint32 value);

  // repeated .pb.TCrossLevyRecordInfo RecordArr = 3;
  inline int recordarr_size() const;
  inline void clear_recordarr();
  static const int kRecordArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyReceiveSettleRewardRsp</name>
  	<Function>
  		<name>recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordarr</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>recordarr_size</name>
  		<replaceName>RecordArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyRecordInfo& recordarr(int index) const;
  inline ::pb::TCrossLevyRecordInfo* mutable_recordarr(int index);
  inline ::pb::TCrossLevyRecordInfo* add_recordarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyRecordInfo >&
      recordarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyRecordInfo >*
      mutable_recordarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyReceiveSettleRewardRsp)
 private:
  inline void set_has_settlescore();
  inline void clear_has_settlescore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyRecordInfo > recordarr_;
  ::google::protobuf::uint32 settlescore_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyReceiveSettleRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyBuyChallengeNumReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyBuyChallengeNumReq : public ::google::protobuf::Message {
 public:
  TCrossLevyBuyChallengeNumReq();
  virtual ~TCrossLevyBuyChallengeNumReq();

  TCrossLevyBuyChallengeNumReq(const TCrossLevyBuyChallengeNumReq& from);

  inline TCrossLevyBuyChallengeNumReq& operator=(const TCrossLevyBuyChallengeNumReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyBuyChallengeNumReq& default_instance();

  void Swap(TCrossLevyBuyChallengeNumReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyBuyChallengeNumReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyBuyChallengeNumReq& from);
  void MergeFrom(const TCrossLevyBuyChallengeNumReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBuyChallengeNumReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyBuyChallengeNumReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyBuyChallengeNumReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetEnemyListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetEnemyListRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetEnemyListRsp();
  virtual ~TCrossLevyGetEnemyListRsp();

  TCrossLevyGetEnemyListRsp(const TCrossLevyGetEnemyListRsp& from);

  inline TCrossLevyGetEnemyListRsp& operator=(const TCrossLevyGetEnemyListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetEnemyListRsp& default_instance();

  void Swap(TCrossLevyGetEnemyListRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetEnemyListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetEnemyListRsp& from);
  void MergeFrom(const TCrossLevyGetEnemyListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevyEnemyInfo EnemyList = 1;
  inline int enemylist_size() const;
  inline void clear_enemylist();
  static const int kEnemyListFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetEnemyListRsp</name>
  	<Function>
  		<name>enemylist</name>
  		<replaceName>EnemyList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemylist</name>
  		<replaceName>EnemyList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemylist</name>
  		<replaceName>EnemyList</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemylist</name>
  		<replaceName>EnemyList</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemylist_size</name>
  		<replaceName>EnemyList</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyEnemyInfo& enemylist(int index) const;
  inline ::pb::TCrossLevyEnemyInfo* mutable_enemylist(int index);
  inline ::pb::TCrossLevyEnemyInfo* add_enemylist();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyInfo >&
      enemylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyInfo >*
      mutable_enemylist();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetEnemyListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyInfo > enemylist_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetEnemyListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyRemoveEnemyReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyRemoveEnemyReq : public ::google::protobuf::Message {
 public:
  TCrossLevyRemoveEnemyReq();
  virtual ~TCrossLevyRemoveEnemyReq();

  TCrossLevyRemoveEnemyReq(const TCrossLevyRemoveEnemyReq& from);

  inline TCrossLevyRemoveEnemyReq& operator=(const TCrossLevyRemoveEnemyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyRemoveEnemyReq& default_instance();

  void Swap(TCrossLevyRemoveEnemyReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyRemoveEnemyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyRemoveEnemyReq& from);
  void MergeFrom(const TCrossLevyRemoveEnemyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyRemoveEnemyReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyRemoveEnemyReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyRemoveEnemyReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetEnemyCampListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetEnemyCampListReq : public ::google::protobuf::Message {
 public:
  TCrossLevyGetEnemyCampListReq();
  virtual ~TCrossLevyGetEnemyCampListReq();

  TCrossLevyGetEnemyCampListReq(const TCrossLevyGetEnemyCampListReq& from);

  inline TCrossLevyGetEnemyCampListReq& operator=(const TCrossLevyGetEnemyCampListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetEnemyCampListReq& default_instance();

  void Swap(TCrossLevyGetEnemyCampListReq* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetEnemyCampListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetEnemyCampListReq& from);
  void MergeFrom(const TCrossLevyGetEnemyCampListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetEnemyCampListReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetEnemyCampListReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetEnemyCampListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyGetEnemyCampListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyGetEnemyCampListRsp : public ::google::protobuf::Message {
 public:
  TCrossLevyGetEnemyCampListRsp();
  virtual ~TCrossLevyGetEnemyCampListRsp();

  TCrossLevyGetEnemyCampListRsp(const TCrossLevyGetEnemyCampListRsp& from);

  inline TCrossLevyGetEnemyCampListRsp& operator=(const TCrossLevyGetEnemyCampListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyGetEnemyCampListRsp& default_instance();

  void Swap(TCrossLevyGetEnemyCampListRsp* other);

  // implements Message ----------------------------------------------

  TCrossLevyGetEnemyCampListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyGetEnemyCampListRsp& from);
  void MergeFrom(const TCrossLevyGetEnemyCampListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevyEnemyCampInfo EnemyCampList = 1;
  inline int enemycamplist_size() const;
  inline void clear_enemycamplist();
  static const int kEnemyCampListFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyGetEnemyCampListRsp</name>
  	<Function>
  		<name>enemycamplist</name>
  		<replaceName>EnemyCampList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_enemycamplist</name>
  		<replaceName>EnemyCampList</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_enemycamplist</name>
  		<replaceName>EnemyCampList</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_enemycamplist</name>
  		<replaceName>EnemyCampList</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>enemycamplist_size</name>
  		<replaceName>EnemyCampList</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyEnemyCampInfo& enemycamplist(int index) const;
  inline ::pb::TCrossLevyEnemyCampInfo* mutable_enemycamplist(int index);
  inline ::pb::TCrossLevyEnemyCampInfo* add_enemycamplist();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyCampInfo >&
      enemycamplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyCampInfo >*
      mutable_enemycamplist();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyGetEnemyCampListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyCampInfo > enemycamplist_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyGetEnemyCampListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyUserBeMovedNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyUserBeMovedNotify : public ::google::protobuf::Message {
 public:
  TCrossLevyUserBeMovedNotify();
  virtual ~TCrossLevyUserBeMovedNotify();

  TCrossLevyUserBeMovedNotify(const TCrossLevyUserBeMovedNotify& from);

  inline TCrossLevyUserBeMovedNotify& operator=(const TCrossLevyUserBeMovedNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyUserBeMovedNotify& default_instance();

  void Swap(TCrossLevyUserBeMovedNotify* other);

  // implements Message ----------------------------------------------

  TCrossLevyUserBeMovedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyUserBeMovedNotify& from);
  void MergeFrom(const TCrossLevyUserBeMovedNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 OriCityId = 1;
  inline bool has_oricityid() const;
  inline void clear_oricityid();
  static const int kOriCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyUserBeMovedNotify</name>
  	<Function>
  		<name>oricityid</name>
  		<replaceName>OriCityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_oricityid</name>
  		<replaceName>OriCityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_oricityid</name>
  		<replaceName>OriCityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 oricityid() const;
  inline void set_oricityid(::google::protobuf::uint32 value);

  // optional uint32 OriCampId = 2;
  inline bool has_oricampid() const;
  inline void clear_oricampid();
  static const int kOriCampIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyUserBeMovedNotify</name>
  	<Function>
  		<name>oricampid</name>
  		<replaceName>OriCampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_oricampid</name>
  		<replaceName>OriCampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_oricampid</name>
  		<replaceName>OriCampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 oricampid() const;
  inline void set_oricampid(::google::protobuf::uint32 value);

  // optional uint32 CurCityId = 3;
  inline bool has_curcityid() const;
  inline void clear_curcityid();
  static const int kCurCityIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyUserBeMovedNotify</name>
  	<Function>
  		<name>curcityid</name>
  		<replaceName>CurCityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curcityid</name>
  		<replaceName>CurCityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curcityid</name>
  		<replaceName>CurCityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curcityid() const;
  inline void set_curcityid(::google::protobuf::uint32 value);

  // optional uint32 CurCampId = 4;
  inline bool has_curcampid() const;
  inline void clear_curcampid();
  static const int kCurCampIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyUserBeMovedNotify</name>
  	<Function>
  		<name>curcampid</name>
  		<replaceName>CurCampId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curcampid</name>
  		<replaceName>CurCampId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curcampid</name>
  		<replaceName>CurCampId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curcampid() const;
  inline void set_curcampid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyUserBeMovedNotify)
 private:
  inline void set_has_oricityid();
  inline void clear_has_oricityid();
  inline void set_has_oricampid();
  inline void clear_has_oricampid();
  inline void set_has_curcityid();
  inline void clear_has_curcityid();
  inline void set_has_curcampid();
  inline void clear_has_curcampid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 oricityid_;
  ::google::protobuf::uint32 oricampid_;
  ::google::protobuf::uint32 curcityid_;
  ::google::protobuf::uint32 curcampid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyUserBeMovedNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyCityUserNumInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyCityUserNumInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyCityUserNumInfo();
  virtual ~TCrossLevyCityUserNumInfo();

  TCrossLevyCityUserNumInfo(const TCrossLevyCityUserNumInfo& from);

  inline TCrossLevyCityUserNumInfo& operator=(const TCrossLevyCityUserNumInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyCityUserNumInfo& default_instance();

  void Swap(TCrossLevyCityUserNumInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyCityUserNumInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyCityUserNumInfo& from);
  void MergeFrom(const TCrossLevyCityUserNumInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCityUserNumInfo</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 UserNum = 2;
  inline bool has_usernum() const;
  inline void clear_usernum();
  static const int kUserNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCityUserNumInfo</name>
  	<Function>
  		<name>usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usernum</name>
  		<replaceName>UserNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usernum() const;
  inline void set_usernum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyCityUserNumInfo)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_usernum();
  inline void clear_has_usernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 usernum_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyCityUserNumInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyCityUserNumNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyCityUserNumNotify : public ::google::protobuf::Message {
 public:
  TCrossLevyCityUserNumNotify();
  virtual ~TCrossLevyCityUserNumNotify();

  TCrossLevyCityUserNumNotify(const TCrossLevyCityUserNumNotify& from);

  inline TCrossLevyCityUserNumNotify& operator=(const TCrossLevyCityUserNumNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyCityUserNumNotify& default_instance();

  void Swap(TCrossLevyCityUserNumNotify* other);

  // implements Message ----------------------------------------------

  TCrossLevyCityUserNumNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyCityUserNumNotify& from);
  void MergeFrom(const TCrossLevyCityUserNumNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevyCityUserNumInfo CityUserNumInfoArr = 1;
  inline int cityusernuminfoarr_size() const;
  inline void clear_cityusernuminfoarr();
  static const int kCityUserNumInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCityUserNumNotify</name>
  	<Function>
  		<name>cityusernuminfoarr</name>
  		<replaceName>CityUserNumInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_cityusernuminfoarr</name>
  		<replaceName>CityUserNumInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_cityusernuminfoarr</name>
  		<replaceName>CityUserNumInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityusernuminfoarr</name>
  		<replaceName>CityUserNumInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>cityusernuminfoarr_size</name>
  		<replaceName>CityUserNumInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyCityUserNumInfo& cityusernuminfoarr(int index) const;
  inline ::pb::TCrossLevyCityUserNumInfo* mutable_cityusernuminfoarr(int index);
  inline ::pb::TCrossLevyCityUserNumInfo* add_cityusernuminfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityUserNumInfo >&
      cityusernuminfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityUserNumInfo >*
      mutable_cityusernuminfoarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyCityUserNumNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityUserNumInfo > cityusernuminfoarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyCityUserNumNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyCityCampNumInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyCityCampNumInfo : public ::google::protobuf::Message {
 public:
  TCrossLevyCityCampNumInfo();
  virtual ~TCrossLevyCityCampNumInfo();

  TCrossLevyCityCampNumInfo(const TCrossLevyCityCampNumInfo& from);

  inline TCrossLevyCityCampNumInfo& operator=(const TCrossLevyCityCampNumInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyCityCampNumInfo& default_instance();

  void Swap(TCrossLevyCityCampNumInfo* other);

  // implements Message ----------------------------------------------

  TCrossLevyCityCampNumInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyCityCampNumInfo& from);
  void MergeFrom(const TCrossLevyCityCampNumInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCityCampNumInfo</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint32 CampNum = 2;
  inline bool has_campnum() const;
  inline void clear_campnum();
  static const int kCampNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCityCampNumInfo</name>
  	<Function>
  		<name>campnum</name>
  		<replaceName>CampNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_campnum</name>
  		<replaceName>CampNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_campnum</name>
  		<replaceName>CampNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 campnum() const;
  inline void set_campnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyCityCampNumInfo)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_campnum();
  inline void clear_has_campnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 campnum_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyCityCampNumInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyCityCampNumNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyCityCampNumNotify : public ::google::protobuf::Message {
 public:
  TCrossLevyCityCampNumNotify();
  virtual ~TCrossLevyCityCampNumNotify();

  TCrossLevyCityCampNumNotify(const TCrossLevyCityCampNumNotify& from);

  inline TCrossLevyCityCampNumNotify& operator=(const TCrossLevyCityCampNumNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyCityCampNumNotify& default_instance();

  void Swap(TCrossLevyCityCampNumNotify* other);

  // implements Message ----------------------------------------------

  TCrossLevyCityCampNumNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyCityCampNumNotify& from);
  void MergeFrom(const TCrossLevyCityCampNumNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCrossLevyCityCampNumInfo CityCampNumInfoArr = 1;
  inline int citycampnuminfoarr_size() const;
  inline void clear_citycampnuminfoarr();
  static const int kCityCampNumInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyCityCampNumNotify</name>
  	<Function>
  		<name>citycampnuminfoarr</name>
  		<replaceName>CityCampNumInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_citycampnuminfoarr</name>
  		<replaceName>CityCampNumInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_citycampnuminfoarr</name>
  		<replaceName>CityCampNumInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_citycampnuminfoarr</name>
  		<replaceName>CityCampNumInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>citycampnuminfoarr_size</name>
  		<replaceName>CityCampNumInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyCityCampNumInfo& citycampnuminfoarr(int index) const;
  inline ::pb::TCrossLevyCityCampNumInfo* mutable_citycampnuminfoarr(int index);
  inline ::pb::TCrossLevyCityCampNumInfo* add_citycampnuminfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityCampNumInfo >&
      citycampnuminfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityCampNumInfo >*
      mutable_citycampnuminfoarr();

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyCityCampNumNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityCampNumInfo > citycampnuminfoarr_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyCityCampNumNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyBossBeKilledNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyBossBeKilledNotify : public ::google::protobuf::Message {
 public:
  TCrossLevyBossBeKilledNotify();
  virtual ~TCrossLevyBossBeKilledNotify();

  TCrossLevyBossBeKilledNotify(const TCrossLevyBossBeKilledNotify& from);

  inline TCrossLevyBossBeKilledNotify& operator=(const TCrossLevyBossBeKilledNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyBossBeKilledNotify& default_instance();

  void Swap(TCrossLevyBossBeKilledNotify* other);

  // implements Message ----------------------------------------------

  TCrossLevyBossBeKilledNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyBossBeKilledNotify& from);
  void MergeFrom(const TCrossLevyBossBeKilledNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 BossId = 1;
  inline bool has_bossid() const;
  inline void clear_bossid();
  static const int kBossIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossBeKilledNotify</name>
  	<Function>
  		<name>bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_bossid</name>
  		<replaceName>BossId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 bossid() const;
  inline void set_bossid(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 2;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyBossBeKilledNotify</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyBossBeKilledNotify)
 private:
  inline void set_has_bossid();
  inline void clear_has_bossid();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::uint32 bossid_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyBossBeKilledNotify* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TCrossLevyRecordNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossLevy.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TCrossLevyRecordNotify : public ::google::protobuf::Message {
 public:
  TCrossLevyRecordNotify();
  virtual ~TCrossLevyRecordNotify();

  TCrossLevyRecordNotify(const TCrossLevyRecordNotify& from);

  inline TCrossLevyRecordNotify& operator=(const TCrossLevyRecordNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TCrossLevyRecordNotify& default_instance();

  void Swap(TCrossLevyRecordNotify* other);

  // implements Message ----------------------------------------------

  TCrossLevyRecordNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TCrossLevyRecordNotify& from);
  void MergeFrom(const TCrossLevyRecordNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TCrossLevyRecordInfo RecordInfo = 1;
  inline bool has_recordinfo() const;
  inline void clear_recordinfo();
  static const int kRecordInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TCrossLevyRecordNotify</name>
  	<Function>
  		<name>recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_recordinfo</name>
  		<replaceName>RecordInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCrossLevyRecordInfo& recordinfo() const;
  inline ::pb::TCrossLevyRecordInfo* mutable_recordinfo();
  inline ::pb::TCrossLevyRecordInfo* release_recordinfo();
  inline void set_allocated_recordinfo(::pb::TCrossLevyRecordInfo* recordinfo);

  // @@protoc_insertion_point(class_scope:pb.TCrossLevyRecordNotify)
 private:
  inline void set_has_recordinfo();
  inline void clear_has_recordinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TCrossLevyRecordInfo* recordinfo_;
  friend void  protobuf_AddDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossLevy_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossLevy_2eproto();

  void InitAsDefaultInstance();
  static TCrossLevyRecordNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TCrossLevyCityInfo

// optional uint32 CityId = 1;
inline bool TCrossLevyCityInfo::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyCityInfo::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyCityInfo::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyCityInfo::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyCityInfo::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCityInfo.CityId)
  return cityid_;
}
inline void TCrossLevyCityInfo::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCityInfo.CityId)
}

// optional uint32 CampNum = 2;
inline bool TCrossLevyCityInfo::has_campnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyCityInfo::set_has_campnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyCityInfo::clear_has_campnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyCityInfo::clear_campnum() {
  campnum_ = 0u;
  clear_has_campnum();
}
inline ::google::protobuf::uint32 TCrossLevyCityInfo::campnum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCityInfo.CampNum)
  return campnum_;
}
inline void TCrossLevyCityInfo::set_campnum(::google::protobuf::uint32 value) {
  set_has_campnum();
  campnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCityInfo.CampNum)
}

// optional uint32 UserNum = 3;
inline bool TCrossLevyCityInfo::has_usernum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyCityInfo::set_has_usernum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyCityInfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyCityInfo::clear_usernum() {
  usernum_ = 0u;
  clear_has_usernum();
}
inline ::google::protobuf::uint32 TCrossLevyCityInfo::usernum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCityInfo.UserNum)
  return usernum_;
}
inline void TCrossLevyCityInfo::set_usernum(::google::protobuf::uint32 value) {
  set_has_usernum();
  usernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCityInfo.UserNum)
}

// -------------------------------------------------------------------

// TCrossLevyUserRecordViewInfo

// optional uint64 RecordId = 1;
inline bool TCrossLevyUserRecordViewInfo::has_recordid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyUserRecordViewInfo::set_has_recordid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyUserRecordViewInfo::clear_has_recordid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyUserRecordViewInfo::clear_recordid() {
  recordid_ = GOOGLE_ULONGLONG(0);
  clear_has_recordid();
}
inline ::google::protobuf::uint64 TCrossLevyUserRecordViewInfo::recordid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyUserRecordViewInfo.RecordId)
  return recordid_;
}
inline void TCrossLevyUserRecordViewInfo::set_recordid(::google::protobuf::uint64 value) {
  set_has_recordid();
  recordid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyUserRecordViewInfo.RecordId)
}

// optional bool IsAtkWin = 2;
inline bool TCrossLevyUserRecordViewInfo::has_isatkwin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyUserRecordViewInfo::set_has_isatkwin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyUserRecordViewInfo::clear_has_isatkwin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyUserRecordViewInfo::clear_isatkwin() {
  isatkwin_ = false;
  clear_has_isatkwin();
}
inline bool TCrossLevyUserRecordViewInfo::isatkwin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyUserRecordViewInfo.IsAtkWin)
  return isatkwin_;
}
inline void TCrossLevyUserRecordViewInfo::set_isatkwin(bool value) {
  set_has_isatkwin();
  isatkwin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyUserRecordViewInfo.IsAtkWin)
}

// repeated .pb.TArmyViewInfo AtkArmyArr = 3;
inline int TCrossLevyUserRecordViewInfo::atkarmyarr_size() const {
  return atkarmyarr_.size();
}
inline void TCrossLevyUserRecordViewInfo::clear_atkarmyarr() {
  atkarmyarr_.Clear();
}
inline const ::pb::TArmyViewInfo& TCrossLevyUserRecordViewInfo::atkarmyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyUserRecordViewInfo.AtkArmyArr)
  return atkarmyarr_.Get(index);
}
inline ::pb::TArmyViewInfo* TCrossLevyUserRecordViewInfo::mutable_atkarmyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyUserRecordViewInfo.AtkArmyArr)
  return atkarmyarr_.Mutable(index);
}
inline ::pb::TArmyViewInfo* TCrossLevyUserRecordViewInfo::add_atkarmyarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyUserRecordViewInfo.AtkArmyArr)
  return atkarmyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >&
TCrossLevyUserRecordViewInfo::atkarmyarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyUserRecordViewInfo.AtkArmyArr)
  return atkarmyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >*
TCrossLevyUserRecordViewInfo::mutable_atkarmyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyUserRecordViewInfo.AtkArmyArr)
  return &atkarmyarr_;
}

// repeated .pb.TArmyViewInfo DefArmyArr = 4;
inline int TCrossLevyUserRecordViewInfo::defarmyarr_size() const {
  return defarmyarr_.size();
}
inline void TCrossLevyUserRecordViewInfo::clear_defarmyarr() {
  defarmyarr_.Clear();
}
inline const ::pb::TArmyViewInfo& TCrossLevyUserRecordViewInfo::defarmyarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyUserRecordViewInfo.DefArmyArr)
  return defarmyarr_.Get(index);
}
inline ::pb::TArmyViewInfo* TCrossLevyUserRecordViewInfo::mutable_defarmyarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyUserRecordViewInfo.DefArmyArr)
  return defarmyarr_.Mutable(index);
}
inline ::pb::TArmyViewInfo* TCrossLevyUserRecordViewInfo::add_defarmyarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyUserRecordViewInfo.DefArmyArr)
  return defarmyarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >&
TCrossLevyUserRecordViewInfo::defarmyarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyUserRecordViewInfo.DefArmyArr)
  return defarmyarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TArmyViewInfo >*
TCrossLevyUserRecordViewInfo::mutable_defarmyarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyUserRecordViewInfo.DefArmyArr)
  return &defarmyarr_;
}

// optional uint64 AtkFightForce = 5;
inline bool TCrossLevyUserRecordViewInfo::has_atkfightforce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyUserRecordViewInfo::set_has_atkfightforce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyUserRecordViewInfo::clear_has_atkfightforce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyUserRecordViewInfo::clear_atkfightforce() {
  atkfightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_atkfightforce();
}
inline ::google::protobuf::uint64 TCrossLevyUserRecordViewInfo::atkfightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyUserRecordViewInfo.AtkFightForce)
  return atkfightforce_;
}
inline void TCrossLevyUserRecordViewInfo::set_atkfightforce(::google::protobuf::uint64 value) {
  set_has_atkfightforce();
  atkfightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyUserRecordViewInfo.AtkFightForce)
}

// optional uint64 DefFightForce = 6;
inline bool TCrossLevyUserRecordViewInfo::has_deffightforce() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossLevyUserRecordViewInfo::set_has_deffightforce() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossLevyUserRecordViewInfo::clear_has_deffightforce() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossLevyUserRecordViewInfo::clear_deffightforce() {
  deffightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_deffightforce();
}
inline ::google::protobuf::uint64 TCrossLevyUserRecordViewInfo::deffightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyUserRecordViewInfo.DefFightForce)
  return deffightforce_;
}
inline void TCrossLevyUserRecordViewInfo::set_deffightforce(::google::protobuf::uint64 value) {
  set_has_deffightforce();
  deffightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyUserRecordViewInfo.DefFightForce)
}

// -------------------------------------------------------------------

// TCrossLevySelfRecordInfo

// optional uint32 RecordResultId = 1;
inline bool TCrossLevySelfRecordInfo::has_recordresultid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevySelfRecordInfo::set_has_recordresultid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevySelfRecordInfo::clear_has_recordresultid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevySelfRecordInfo::clear_recordresultid() {
  recordresultid_ = 0u;
  clear_has_recordresultid();
}
inline ::google::protobuf::uint32 TCrossLevySelfRecordInfo::recordresultid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySelfRecordInfo.RecordResultId)
  return recordresultid_;
}
inline void TCrossLevySelfRecordInfo::set_recordresultid(::google::protobuf::uint32 value) {
  set_has_recordresultid();
  recordresultid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevySelfRecordInfo.RecordResultId)
}

// optional .pb.ECrossLevyRecordType RecordType = 2;
inline bool TCrossLevySelfRecordInfo::has_recordtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevySelfRecordInfo::set_has_recordtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevySelfRecordInfo::clear_has_recordtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevySelfRecordInfo::clear_recordtype() {
  recordtype_ = 101;
  clear_has_recordtype();
}
inline ::pb::ECrossLevyRecordType TCrossLevySelfRecordInfo::recordtype() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySelfRecordInfo.RecordType)
  return static_cast< ::pb::ECrossLevyRecordType >(recordtype_);
}
inline void TCrossLevySelfRecordInfo::set_recordtype(::pb::ECrossLevyRecordType value) {
  assert(::pb::ECrossLevyRecordType_IsValid(value));
  set_has_recordtype();
  recordtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevySelfRecordInfo.RecordType)
}

// optional uint64 RecordTime = 3;
inline bool TCrossLevySelfRecordInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevySelfRecordInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevySelfRecordInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevySelfRecordInfo::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TCrossLevySelfRecordInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySelfRecordInfo.RecordTime)
  return recordtime_;
}
inline void TCrossLevySelfRecordInfo::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevySelfRecordInfo.RecordTime)
}

// optional .pb.TUserSimpleInfo AtkUserInfo = 4;
inline bool TCrossLevySelfRecordInfo::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevySelfRecordInfo::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevySelfRecordInfo::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevySelfRecordInfo::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevySelfRecordInfo::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySelfRecordInfo.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevySelfRecordInfo::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevySelfRecordInfo.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevySelfRecordInfo::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevySelfRecordInfo::set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevySelfRecordInfo.AtkUserInfo)
}

// optional .pb.TUserSimpleInfo DefUserInfo = 5;
inline bool TCrossLevySelfRecordInfo::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevySelfRecordInfo::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevySelfRecordInfo::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevySelfRecordInfo::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevySelfRecordInfo::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySelfRecordInfo.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevySelfRecordInfo::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevySelfRecordInfo.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevySelfRecordInfo::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TUserSimpleInfo* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevySelfRecordInfo::set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevySelfRecordInfo.DefUserInfo)
}

// optional bool IsAtkWin = 6;
inline bool TCrossLevySelfRecordInfo::has_isatkwin() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossLevySelfRecordInfo::set_has_isatkwin() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossLevySelfRecordInfo::clear_has_isatkwin() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossLevySelfRecordInfo::clear_isatkwin() {
  isatkwin_ = false;
  clear_has_isatkwin();
}
inline bool TCrossLevySelfRecordInfo::isatkwin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySelfRecordInfo.IsAtkWin)
  return isatkwin_;
}
inline void TCrossLevySelfRecordInfo::set_isatkwin(bool value) {
  set_has_isatkwin();
  isatkwin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevySelfRecordInfo.IsAtkWin)
}

// optional uint32 CityId = 7;
inline bool TCrossLevySelfRecordInfo::has_cityid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossLevySelfRecordInfo::set_has_cityid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossLevySelfRecordInfo::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossLevySelfRecordInfo::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevySelfRecordInfo::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySelfRecordInfo.CityId)
  return cityid_;
}
inline void TCrossLevySelfRecordInfo::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevySelfRecordInfo.CityId)
}

// optional uint32 CampId = 8;
inline bool TCrossLevySelfRecordInfo::has_campid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCrossLevySelfRecordInfo::set_has_campid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCrossLevySelfRecordInfo::clear_has_campid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCrossLevySelfRecordInfo::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevySelfRecordInfo::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySelfRecordInfo.CampId)
  return campid_;
}
inline void TCrossLevySelfRecordInfo::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevySelfRecordInfo.CampId)
}

// optional uint32 TargetCityId = 9;
inline bool TCrossLevySelfRecordInfo::has_targetcityid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TCrossLevySelfRecordInfo::set_has_targetcityid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TCrossLevySelfRecordInfo::clear_has_targetcityid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TCrossLevySelfRecordInfo::clear_targetcityid() {
  targetcityid_ = 0u;
  clear_has_targetcityid();
}
inline ::google::protobuf::uint32 TCrossLevySelfRecordInfo::targetcityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySelfRecordInfo.TargetCityId)
  return targetcityid_;
}
inline void TCrossLevySelfRecordInfo::set_targetcityid(::google::protobuf::uint32 value) {
  set_has_targetcityid();
  targetcityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevySelfRecordInfo.TargetCityId)
}

// optional uint32 TargetCampId = 10;
inline bool TCrossLevySelfRecordInfo::has_targetcampid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TCrossLevySelfRecordInfo::set_has_targetcampid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TCrossLevySelfRecordInfo::clear_has_targetcampid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TCrossLevySelfRecordInfo::clear_targetcampid() {
  targetcampid_ = 0u;
  clear_has_targetcampid();
}
inline ::google::protobuf::uint32 TCrossLevySelfRecordInfo::targetcampid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySelfRecordInfo.TargetCampId)
  return targetcampid_;
}
inline void TCrossLevySelfRecordInfo::set_targetcampid(::google::protobuf::uint32 value) {
  set_has_targetcampid();
  targetcampid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevySelfRecordInfo.TargetCampId)
}

// -------------------------------------------------------------------

// TCrossLevyRecordInfo

// optional uint32 RecordResultId = 1;
inline bool TCrossLevyRecordInfo::has_recordresultid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyRecordInfo::set_has_recordresultid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyRecordInfo::clear_has_recordresultid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyRecordInfo::clear_recordresultid() {
  recordresultid_ = 0u;
  clear_has_recordresultid();
}
inline ::google::protobuf::uint32 TCrossLevyRecordInfo::recordresultid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyRecordInfo.RecordResultId)
  return recordresultid_;
}
inline void TCrossLevyRecordInfo::set_recordresultid(::google::protobuf::uint32 value) {
  set_has_recordresultid();
  recordresultid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyRecordInfo.RecordResultId)
}

// optional .pb.ECrossLevyRecordType RecordType = 2;
inline bool TCrossLevyRecordInfo::has_recordtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyRecordInfo::set_has_recordtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyRecordInfo::clear_has_recordtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyRecordInfo::clear_recordtype() {
  recordtype_ = 101;
  clear_has_recordtype();
}
inline ::pb::ECrossLevyRecordType TCrossLevyRecordInfo::recordtype() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyRecordInfo.RecordType)
  return static_cast< ::pb::ECrossLevyRecordType >(recordtype_);
}
inline void TCrossLevyRecordInfo::set_recordtype(::pb::ECrossLevyRecordType value) {
  assert(::pb::ECrossLevyRecordType_IsValid(value));
  set_has_recordtype();
  recordtype_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyRecordInfo.RecordType)
}

// optional uint64 RecordTime = 3;
inline bool TCrossLevyRecordInfo::has_recordtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyRecordInfo::set_has_recordtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyRecordInfo::clear_has_recordtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyRecordInfo::clear_recordtime() {
  recordtime_ = GOOGLE_ULONGLONG(0);
  clear_has_recordtime();
}
inline ::google::protobuf::uint64 TCrossLevyRecordInfo::recordtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyRecordInfo.RecordTime)
  return recordtime_;
}
inline void TCrossLevyRecordInfo::set_recordtime(::google::protobuf::uint64 value) {
  set_has_recordtime();
  recordtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyRecordInfo.RecordTime)
}

// optional .pb.TUserSimpleInfo AtkUserInfo = 4;
inline bool TCrossLevyRecordInfo::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyRecordInfo::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyRecordInfo::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyRecordInfo::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyRecordInfo::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyRecordInfo.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyRecordInfo::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyRecordInfo.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyRecordInfo::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevyRecordInfo::set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyRecordInfo.AtkUserInfo)
}

// optional .pb.TUserSimpleInfo DefUserInfo = 5;
inline bool TCrossLevyRecordInfo::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyRecordInfo::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyRecordInfo::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyRecordInfo::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyRecordInfo::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyRecordInfo.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyRecordInfo::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyRecordInfo.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyRecordInfo::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TUserSimpleInfo* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevyRecordInfo::set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyRecordInfo.DefUserInfo)
}

// repeated .pb.TCommonReward RewardArr = 6;
inline int TCrossLevyRecordInfo::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyRecordInfo::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyRecordInfo::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyRecordInfo.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyRecordInfo::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyRecordInfo.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyRecordInfo::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyRecordInfo.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyRecordInfo::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyRecordInfo.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyRecordInfo::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyRecordInfo.RewardArr)
  return &rewardarr_;
}

// optional bool IsAtkWin = 7;
inline bool TCrossLevyRecordInfo::has_isatkwin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossLevyRecordInfo::set_has_isatkwin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossLevyRecordInfo::clear_has_isatkwin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossLevyRecordInfo::clear_isatkwin() {
  isatkwin_ = false;
  clear_has_isatkwin();
}
inline bool TCrossLevyRecordInfo::isatkwin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyRecordInfo.IsAtkWin)
  return isatkwin_;
}
inline void TCrossLevyRecordInfo::set_isatkwin(bool value) {
  set_has_isatkwin();
  isatkwin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyRecordInfo.IsAtkWin)
}

// -------------------------------------------------------------------

// TCrossLevyBossInfo

// optional uint32 BossId = 1;
inline bool TCrossLevyBossInfo::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyBossInfo::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyBossInfo::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyBossInfo::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TCrossLevyBossInfo::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossInfo.BossId)
  return bossid_;
}
inline void TCrossLevyBossInfo::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossInfo.BossId)
}

// optional uint64 RefreshTime = 2;
inline bool TCrossLevyBossInfo::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyBossInfo::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyBossInfo::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyBossInfo::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TCrossLevyBossInfo::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossInfo.RefreshTime)
  return refreshtime_;
}
inline void TCrossLevyBossInfo::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossInfo.RefreshTime)
}

// optional uint64 Hp = 3;
inline bool TCrossLevyBossInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyBossInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyBossInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyBossInfo::clear_hp() {
  hp_ = GOOGLE_ULONGLONG(0);
  clear_has_hp();
}
inline ::google::protobuf::uint64 TCrossLevyBossInfo::hp() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossInfo.Hp)
  return hp_;
}
inline void TCrossLevyBossInfo::set_hp(::google::protobuf::uint64 value) {
  set_has_hp();
  hp_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossInfo.Hp)
}

// optional uint64 MaxHp = 4;
inline bool TCrossLevyBossInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyBossInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyBossInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyBossInfo::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TCrossLevyBossInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossInfo.MaxHp)
  return maxhp_;
}
inline void TCrossLevyBossInfo::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossInfo.MaxHp)
}

// optional uint64 FightForce = 5;
inline bool TCrossLevyBossInfo::has_fightforce() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyBossInfo::set_has_fightforce() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyBossInfo::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyBossInfo::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TCrossLevyBossInfo::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossInfo.FightForce)
  return fightforce_;
}
inline void TCrossLevyBossInfo::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossInfo.FightForce)
}

// optional uint32 Pos = 6;
inline bool TCrossLevyBossInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossLevyBossInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossLevyBossInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossLevyBossInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TCrossLevyBossInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossInfo.Pos)
  return pos_;
}
inline void TCrossLevyBossInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossInfo.Pos)
}

// -------------------------------------------------------------------

// TCrossLevyMyCampInfo

// optional uint32 CityId = 1;
inline bool TCrossLevyMyCampInfo::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyMyCampInfo::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyMyCampInfo::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyMyCampInfo::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyMyCampInfo::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMyCampInfo.CityId)
  return cityid_;
}
inline void TCrossLevyMyCampInfo::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMyCampInfo.CityId)
}

// optional uint32 CampId = 2;
inline bool TCrossLevyMyCampInfo::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyMyCampInfo::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyMyCampInfo::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyMyCampInfo::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyMyCampInfo::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMyCampInfo.CampId)
  return campid_;
}
inline void TCrossLevyMyCampInfo::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMyCampInfo.CampId)
}

// optional uint64 SettleTime = 3;
inline bool TCrossLevyMyCampInfo::has_settletime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyMyCampInfo::set_has_settletime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyMyCampInfo::clear_has_settletime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyMyCampInfo::clear_settletime() {
  settletime_ = GOOGLE_ULONGLONG(0);
  clear_has_settletime();
}
inline ::google::protobuf::uint64 TCrossLevyMyCampInfo::settletime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMyCampInfo.SettleTime)
  return settletime_;
}
inline void TCrossLevyMyCampInfo::set_settletime(::google::protobuf::uint64 value) {
  set_has_settletime();
  settletime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMyCampInfo.SettleTime)
}

// optional uint32 SettleNum = 4;
inline bool TCrossLevyMyCampInfo::has_settlenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyMyCampInfo::set_has_settlenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyMyCampInfo::clear_has_settlenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyMyCampInfo::clear_settlenum() {
  settlenum_ = 0u;
  clear_has_settlenum();
}
inline ::google::protobuf::uint32 TCrossLevyMyCampInfo::settlenum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMyCampInfo.SettleNum)
  return settlenum_;
}
inline void TCrossLevyMyCampInfo::set_settlenum(::google::protobuf::uint32 value) {
  set_has_settlenum();
  settlenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMyCampInfo.SettleNum)
}

// repeated .pb.TCommonReward RewardArr = 5;
inline int TCrossLevyMyCampInfo::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyMyCampInfo::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyMyCampInfo::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMyCampInfo.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyMyCampInfo::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyMyCampInfo.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyMyCampInfo::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyMyCampInfo.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyMyCampInfo::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyMyCampInfo.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyMyCampInfo::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyMyCampInfo.RewardArr)
  return &rewardarr_;
}

// repeated .pb.TCommonReward ExtraRewardArr = 6;
inline int TCrossLevyMyCampInfo::extrarewardarr_size() const {
  return extrarewardarr_.size();
}
inline void TCrossLevyMyCampInfo::clear_extrarewardarr() {
  extrarewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyMyCampInfo::extrarewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMyCampInfo.ExtraRewardArr)
  return extrarewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyMyCampInfo::mutable_extrarewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyMyCampInfo.ExtraRewardArr)
  return extrarewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyMyCampInfo::add_extrarewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyMyCampInfo.ExtraRewardArr)
  return extrarewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyMyCampInfo::extrarewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyMyCampInfo.ExtraRewardArr)
  return extrarewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyMyCampInfo::mutable_extrarewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyMyCampInfo.ExtraRewardArr)
  return &extrarewardarr_;
}

// optional uint32 BePlunderedNum = 7;
inline bool TCrossLevyMyCampInfo::has_beplunderednum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossLevyMyCampInfo::set_has_beplunderednum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossLevyMyCampInfo::clear_has_beplunderednum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossLevyMyCampInfo::clear_beplunderednum() {
  beplunderednum_ = 0u;
  clear_has_beplunderednum();
}
inline ::google::protobuf::uint32 TCrossLevyMyCampInfo::beplunderednum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMyCampInfo.BePlunderedNum)
  return beplunderednum_;
}
inline void TCrossLevyMyCampInfo::set_beplunderednum(::google::protobuf::uint32 value) {
  set_has_beplunderednum();
  beplunderednum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMyCampInfo.BePlunderedNum)
}

// optional uint32 SettleScore = 8;
inline bool TCrossLevyMyCampInfo::has_settlescore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCrossLevyMyCampInfo::set_has_settlescore() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCrossLevyMyCampInfo::clear_has_settlescore() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCrossLevyMyCampInfo::clear_settlescore() {
  settlescore_ = 0u;
  clear_has_settlescore();
}
inline ::google::protobuf::uint32 TCrossLevyMyCampInfo::settlescore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMyCampInfo.SettleScore)
  return settlescore_;
}
inline void TCrossLevyMyCampInfo::set_settlescore(::google::protobuf::uint32 value) {
  set_has_settlescore();
  settlescore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMyCampInfo.SettleScore)
}

// -------------------------------------------------------------------

// TCrossLevyCampInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TCrossLevyCampInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyCampInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyCampInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyCampInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyCampInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCampInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyCampInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyCampInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyCampInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCrossLevyCampInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyCampInfo.UserInfo)
}

// optional uint32 CityId = 2;
inline bool TCrossLevyCampInfo::has_cityid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyCampInfo::set_has_cityid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyCampInfo::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyCampInfo::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyCampInfo::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCampInfo.CityId)
  return cityid_;
}
inline void TCrossLevyCampInfo::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCampInfo.CityId)
}

// optional uint32 CampId = 3;
inline bool TCrossLevyCampInfo::has_campid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyCampInfo::set_has_campid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyCampInfo::clear_has_campid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyCampInfo::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyCampInfo::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCampInfo.CampId)
  return campid_;
}
inline void TCrossLevyCampInfo::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCampInfo.CampId)
}

// repeated .pb.TCommonReward RewardArr = 4;
inline int TCrossLevyCampInfo::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyCampInfo::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyCampInfo::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCampInfo.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyCampInfo::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyCampInfo.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyCampInfo::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyCampInfo.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyCampInfo::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyCampInfo.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyCampInfo::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyCampInfo.RewardArr)
  return &rewardarr_;
}

// optional uint32 BePlunderedNum = 5;
inline bool TCrossLevyCampInfo::has_beplunderednum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyCampInfo::set_has_beplunderednum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyCampInfo::clear_has_beplunderednum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyCampInfo::clear_beplunderednum() {
  beplunderednum_ = 0u;
  clear_has_beplunderednum();
}
inline ::google::protobuf::uint32 TCrossLevyCampInfo::beplunderednum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCampInfo.BePlunderedNum)
  return beplunderednum_;
}
inline void TCrossLevyCampInfo::set_beplunderednum(::google::protobuf::uint32 value) {
  set_has_beplunderednum();
  beplunderednum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCampInfo.BePlunderedNum)
}

// optional uint32 SettleNum = 6;
inline bool TCrossLevyCampInfo::has_settlenum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossLevyCampInfo::set_has_settlenum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossLevyCampInfo::clear_has_settlenum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossLevyCampInfo::clear_settlenum() {
  settlenum_ = 0u;
  clear_has_settlenum();
}
inline ::google::protobuf::uint32 TCrossLevyCampInfo::settlenum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCampInfo.SettleNum)
  return settlenum_;
}
inline void TCrossLevyCampInfo::set_settlenum(::google::protobuf::uint32 value) {
  set_has_settlenum();
  settlenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCampInfo.SettleNum)
}

// optional uint64 LastBeAttackedTime = 7;
inline bool TCrossLevyCampInfo::has_lastbeattackedtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossLevyCampInfo::set_has_lastbeattackedtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossLevyCampInfo::clear_has_lastbeattackedtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossLevyCampInfo::clear_lastbeattackedtime() {
  lastbeattackedtime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastbeattackedtime();
}
inline ::google::protobuf::uint64 TCrossLevyCampInfo::lastbeattackedtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCampInfo.LastBeAttackedTime)
  return lastbeattackedtime_;
}
inline void TCrossLevyCampInfo::set_lastbeattackedtime(::google::protobuf::uint64 value) {
  set_has_lastbeattackedtime();
  lastbeattackedtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCampInfo.LastBeAttackedTime)
}

// optional uint64 LastBePlunderedTime = 8;
inline bool TCrossLevyCampInfo::has_lastbeplunderedtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TCrossLevyCampInfo::set_has_lastbeplunderedtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TCrossLevyCampInfo::clear_has_lastbeplunderedtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TCrossLevyCampInfo::clear_lastbeplunderedtime() {
  lastbeplunderedtime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastbeplunderedtime();
}
inline ::google::protobuf::uint64 TCrossLevyCampInfo::lastbeplunderedtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCampInfo.LastBePlunderedTime)
  return lastbeplunderedtime_;
}
inline void TCrossLevyCampInfo::set_lastbeplunderedtime(::google::protobuf::uint64 value) {
  set_has_lastbeplunderedtime();
  lastbeplunderedtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCampInfo.LastBePlunderedTime)
}

// optional bool IsEnemy = 9;
inline bool TCrossLevyCampInfo::has_isenemy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TCrossLevyCampInfo::set_has_isenemy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TCrossLevyCampInfo::clear_has_isenemy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TCrossLevyCampInfo::clear_isenemy() {
  isenemy_ = false;
  clear_has_isenemy();
}
inline bool TCrossLevyCampInfo::isenemy() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCampInfo.IsEnemy)
  return isenemy_;
}
inline void TCrossLevyCampInfo::set_isenemy(bool value) {
  set_has_isenemy();
  isenemy_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCampInfo.IsEnemy)
}

// -------------------------------------------------------------------

// TCrossLevyMonsterHpInfo

// optional uint32 Hid = 1;
inline bool TCrossLevyMonsterHpInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyMonsterHpInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyMonsterHpInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyMonsterHpInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TCrossLevyMonsterHpInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMonsterHpInfo.Hid)
  return hid_;
}
inline void TCrossLevyMonsterHpInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMonsterHpInfo.Hid)
}

// optional uint64 CurHp = 2;
inline bool TCrossLevyMonsterHpInfo::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyMonsterHpInfo::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyMonsterHpInfo::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyMonsterHpInfo::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TCrossLevyMonsterHpInfo::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMonsterHpInfo.CurHp)
  return curhp_;
}
inline void TCrossLevyMonsterHpInfo::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMonsterHpInfo.CurHp)
}

// optional uint64 MaxHp = 3;
inline bool TCrossLevyMonsterHpInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyMonsterHpInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyMonsterHpInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyMonsterHpInfo::clear_maxhp() {
  maxhp_ = GOOGLE_ULONGLONG(0);
  clear_has_maxhp();
}
inline ::google::protobuf::uint64 TCrossLevyMonsterHpInfo::maxhp() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMonsterHpInfo.MaxHp)
  return maxhp_;
}
inline void TCrossLevyMonsterHpInfo::set_maxhp(::google::protobuf::uint64 value) {
  set_has_maxhp();
  maxhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMonsterHpInfo.MaxHp)
}

// -------------------------------------------------------------------

// TCrossLevyMonsterArmyHpInfo

// optional uint32 Id = 1;
inline bool TCrossLevyMonsterArmyHpInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyMonsterArmyHpInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyMonsterArmyHpInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyMonsterArmyHpInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TCrossLevyMonsterArmyHpInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMonsterArmyHpInfo.Id)
  return id_;
}
inline void TCrossLevyMonsterArmyHpInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMonsterArmyHpInfo.Id)
}

// repeated .pb.TCrossLevyMonsterHpInfo MonsterHpInfoArr = 2;
inline int TCrossLevyMonsterArmyHpInfo::monsterhpinfoarr_size() const {
  return monsterhpinfoarr_.size();
}
inline void TCrossLevyMonsterArmyHpInfo::clear_monsterhpinfoarr() {
  monsterhpinfoarr_.Clear();
}
inline const ::pb::TCrossLevyMonsterHpInfo& TCrossLevyMonsterArmyHpInfo::monsterhpinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMonsterArmyHpInfo.MonsterHpInfoArr)
  return monsterhpinfoarr_.Get(index);
}
inline ::pb::TCrossLevyMonsterHpInfo* TCrossLevyMonsterArmyHpInfo::mutable_monsterhpinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyMonsterArmyHpInfo.MonsterHpInfoArr)
  return monsterhpinfoarr_.Mutable(index);
}
inline ::pb::TCrossLevyMonsterHpInfo* TCrossLevyMonsterArmyHpInfo::add_monsterhpinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyMonsterArmyHpInfo.MonsterHpInfoArr)
  return monsterhpinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterHpInfo >&
TCrossLevyMonsterArmyHpInfo::monsterhpinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyMonsterArmyHpInfo.MonsterHpInfoArr)
  return monsterhpinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterHpInfo >*
TCrossLevyMonsterArmyHpInfo::mutable_monsterhpinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyMonsterArmyHpInfo.MonsterHpInfoArr)
  return &monsterhpinfoarr_;
}

// -------------------------------------------------------------------

// TCrossLevyMonsterInfo

// optional uint32 Id = 1;
inline bool TCrossLevyMonsterInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyMonsterInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyMonsterInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyMonsterInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TCrossLevyMonsterInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMonsterInfo.Id)
  return id_;
}
inline void TCrossLevyMonsterInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMonsterInfo.Id)
}

// optional uint32 Pos = 2;
inline bool TCrossLevyMonsterInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyMonsterInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyMonsterInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyMonsterInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TCrossLevyMonsterInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMonsterInfo.Pos)
  return pos_;
}
inline void TCrossLevyMonsterInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMonsterInfo.Pos)
}

// repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 3;
inline int TCrossLevyMonsterInfo::monsterarmyhpinfoarr_size() const {
  return monsterarmyhpinfoarr_.size();
}
inline void TCrossLevyMonsterInfo::clear_monsterarmyhpinfoarr() {
  monsterarmyhpinfoarr_.Clear();
}
inline const ::pb::TCrossLevyMonsterArmyHpInfo& TCrossLevyMonsterInfo::monsterarmyhpinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMonsterInfo.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_.Get(index);
}
inline ::pb::TCrossLevyMonsterArmyHpInfo* TCrossLevyMonsterInfo::mutable_monsterarmyhpinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyMonsterInfo.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_.Mutable(index);
}
inline ::pb::TCrossLevyMonsterArmyHpInfo* TCrossLevyMonsterInfo::add_monsterarmyhpinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyMonsterInfo.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >&
TCrossLevyMonsterInfo::monsterarmyhpinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyMonsterInfo.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >*
TCrossLevyMonsterInfo::mutable_monsterarmyhpinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyMonsterInfo.MonsterArmyHpInfoArr)
  return &monsterarmyhpinfoarr_;
}

// -------------------------------------------------------------------

// TCrossLevyHidPosInfo

// optional uint32 Hid = 1;
inline bool TCrossLevyHidPosInfo::has_hid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyHidPosInfo::set_has_hid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyHidPosInfo::clear_has_hid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyHidPosInfo::clear_hid() {
  hid_ = 0u;
  clear_has_hid();
}
inline ::google::protobuf::uint32 TCrossLevyHidPosInfo::hid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyHidPosInfo.Hid)
  return hid_;
}
inline void TCrossLevyHidPosInfo::set_hid(::google::protobuf::uint32 value) {
  set_has_hid();
  hid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyHidPosInfo.Hid)
}

// optional uint32 Pos = 2;
inline bool TCrossLevyHidPosInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyHidPosInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyHidPosInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyHidPosInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TCrossLevyHidPosInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyHidPosInfo.Pos)
  return pos_;
}
inline void TCrossLevyHidPosInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyHidPosInfo.Pos)
}

// -------------------------------------------------------------------

// TCrossLevyFormationInfo

// optional uint32 FormationId = 1;
inline bool TCrossLevyFormationInfo::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyFormationInfo::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyFormationInfo::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyFormationInfo::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TCrossLevyFormationInfo::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyFormationInfo.FormationId)
  return formationid_;
}
inline void TCrossLevyFormationInfo::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyFormationInfo.FormationId)
}

// repeated .pb.TCrossLevyHidPosInfo HidPosArr = 2;
inline int TCrossLevyFormationInfo::hidposarr_size() const {
  return hidposarr_.size();
}
inline void TCrossLevyFormationInfo::clear_hidposarr() {
  hidposarr_.Clear();
}
inline const ::pb::TCrossLevyHidPosInfo& TCrossLevyFormationInfo::hidposarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyFormationInfo.HidPosArr)
  return hidposarr_.Get(index);
}
inline ::pb::TCrossLevyHidPosInfo* TCrossLevyFormationInfo::mutable_hidposarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyFormationInfo.HidPosArr)
  return hidposarr_.Mutable(index);
}
inline ::pb::TCrossLevyHidPosInfo* TCrossLevyFormationInfo::add_hidposarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyFormationInfo.HidPosArr)
  return hidposarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyHidPosInfo >&
TCrossLevyFormationInfo::hidposarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyFormationInfo.HidPosArr)
  return hidposarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyHidPosInfo >*
TCrossLevyFormationInfo::mutable_hidposarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyFormationInfo.HidPosArr)
  return &hidposarr_;
}

// -------------------------------------------------------------------

// TCrossLevyEnemyFormation

// optional uint32 FormationId = 1;
inline bool TCrossLevyEnemyFormation::has_formationid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyEnemyFormation::set_has_formationid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyEnemyFormation::clear_has_formationid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyEnemyFormation::clear_formationid() {
  formationid_ = 0u;
  clear_has_formationid();
}
inline ::google::protobuf::uint32 TCrossLevyEnemyFormation::formationid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnemyFormation.FormationId)
  return formationid_;
}
inline void TCrossLevyEnemyFormation::set_formationid(::google::protobuf::uint32 value) {
  set_has_formationid();
  formationid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyEnemyFormation.FormationId)
}

// repeated .pb.TUnitInfo UnitArr = 2;
inline int TCrossLevyEnemyFormation::unitarr_size() const {
  return unitarr_.size();
}
inline void TCrossLevyEnemyFormation::clear_unitarr() {
  unitarr_.Clear();
}
inline const ::pb::TUnitInfo& TCrossLevyEnemyFormation::unitarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnemyFormation.UnitArr)
  return unitarr_.Get(index);
}
inline ::pb::TUnitInfo* TCrossLevyEnemyFormation::mutable_unitarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyEnemyFormation.UnitArr)
  return unitarr_.Mutable(index);
}
inline ::pb::TUnitInfo* TCrossLevyEnemyFormation::add_unitarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyEnemyFormation.UnitArr)
  return unitarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >&
TCrossLevyEnemyFormation::unitarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyEnemyFormation.UnitArr)
  return unitarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitInfo >*
TCrossLevyEnemyFormation::mutable_unitarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyEnemyFormation.UnitArr)
  return &unitarr_;
}

// optional uint64 FightForce = 3;
inline bool TCrossLevyEnemyFormation::has_fightforce() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyEnemyFormation::set_has_fightforce() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyEnemyFormation::clear_has_fightforce() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyEnemyFormation::clear_fightforce() {
  fightforce_ = GOOGLE_ULONGLONG(0);
  clear_has_fightforce();
}
inline ::google::protobuf::uint64 TCrossLevyEnemyFormation::fightforce() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnemyFormation.FightForce)
  return fightforce_;
}
inline void TCrossLevyEnemyFormation::set_fightforce(::google::protobuf::uint64 value) {
  set_has_fightforce();
  fightforce_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyEnemyFormation.FightForce)
}

// -------------------------------------------------------------------

// TCrossLevyGuildUserInfo

// optional uint64 Uid = 1;
inline bool TCrossLevyGuildUserInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGuildUserInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGuildUserInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGuildUserInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossLevyGuildUserInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGuildUserInfo.Uid)
  return uid_;
}
inline void TCrossLevyGuildUserInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGuildUserInfo.Uid)
}

// optional string Uname = 2;
inline bool TCrossLevyGuildUserInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyGuildUserInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyGuildUserInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyGuildUserInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TCrossLevyGuildUserInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGuildUserInfo.Uname)
  return *uname_;
}
inline void TCrossLevyGuildUserInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGuildUserInfo.Uname)
}
inline void TCrossLevyGuildUserInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossLevyGuildUserInfo.Uname)
}
inline void TCrossLevyGuildUserInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossLevyGuildUserInfo.Uname)
}
inline ::std::string* TCrossLevyGuildUserInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGuildUserInfo.Uname)
  return uname_;
}
inline ::std::string* TCrossLevyGuildUserInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossLevyGuildUserInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGuildUserInfo.Uname)
}

// optional uint32 CityId = 3;
inline bool TCrossLevyGuildUserInfo::has_cityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyGuildUserInfo::set_has_cityid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyGuildUserInfo::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyGuildUserInfo::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyGuildUserInfo::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGuildUserInfo.CityId)
  return cityid_;
}
inline void TCrossLevyGuildUserInfo::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGuildUserInfo.CityId)
}

// optional uint32 CampId = 4;
inline bool TCrossLevyGuildUserInfo::has_campid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyGuildUserInfo::set_has_campid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyGuildUserInfo::clear_has_campid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyGuildUserInfo::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyGuildUserInfo::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGuildUserInfo.CampId)
  return campid_;
}
inline void TCrossLevyGuildUserInfo::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGuildUserInfo.CampId)
}

// optional uint32 ConnectNum = 5;
inline bool TCrossLevyGuildUserInfo::has_connectnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyGuildUserInfo::set_has_connectnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyGuildUserInfo::clear_has_connectnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyGuildUserInfo::clear_connectnum() {
  connectnum_ = 0u;
  clear_has_connectnum();
}
inline ::google::protobuf::uint32 TCrossLevyGuildUserInfo::connectnum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGuildUserInfo.ConnectNum)
  return connectnum_;
}
inline void TCrossLevyGuildUserInfo::set_connectnum(::google::protobuf::uint32 value) {
  set_has_connectnum();
  connectnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGuildUserInfo.ConnectNum)
}

// -------------------------------------------------------------------

// TCrossLevyEnemyInfo

// optional uint64 Uid = 1;
inline bool TCrossLevyEnemyInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyEnemyInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyEnemyInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyEnemyInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossLevyEnemyInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnemyInfo.Uid)
  return uid_;
}
inline void TCrossLevyEnemyInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyEnemyInfo.Uid)
}

// optional uint32 HateNum = 2;
inline bool TCrossLevyEnemyInfo::has_hatenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyEnemyInfo::set_has_hatenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyEnemyInfo::clear_has_hatenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyEnemyInfo::clear_hatenum() {
  hatenum_ = 0u;
  clear_has_hatenum();
}
inline ::google::protobuf::uint32 TCrossLevyEnemyInfo::hatenum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnemyInfo.HateNum)
  return hatenum_;
}
inline void TCrossLevyEnemyInfo::set_hatenum(::google::protobuf::uint32 value) {
  set_has_hatenum();
  hatenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyEnemyInfo.HateNum)
}

// optional uint64 Time = 3;
inline bool TCrossLevyEnemyInfo::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyEnemyInfo::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyEnemyInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyEnemyInfo::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 TCrossLevyEnemyInfo::time() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnemyInfo.Time)
  return time_;
}
inline void TCrossLevyEnemyInfo::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyEnemyInfo.Time)
}

// optional .pb.TUserSimpleInfo UserInfo = 4;
inline bool TCrossLevyEnemyInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyEnemyInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyEnemyInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyEnemyInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyEnemyInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnemyInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyEnemyInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyEnemyInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyEnemyInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TCrossLevyEnemyInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyEnemyInfo.UserInfo)
}

// -------------------------------------------------------------------

// TCrossLevyEnemyCampInfo

// optional uint32 CityId = 1;
inline bool TCrossLevyEnemyCampInfo::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyEnemyCampInfo::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyEnemyCampInfo::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyEnemyCampInfo::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyEnemyCampInfo::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnemyCampInfo.CityId)
  return cityid_;
}
inline void TCrossLevyEnemyCampInfo::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyEnemyCampInfo.CityId)
}

// optional uint32 CampId = 2;
inline bool TCrossLevyEnemyCampInfo::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyEnemyCampInfo::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyEnemyCampInfo::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyEnemyCampInfo::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyEnemyCampInfo::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnemyCampInfo.CampId)
  return campid_;
}
inline void TCrossLevyEnemyCampInfo::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyEnemyCampInfo.CampId)
}

// -------------------------------------------------------------------

// TCrossLevyGetServerTeamInfoRsp

// optional uint32 TeamId = 1;
inline bool TCrossLevyGetServerTeamInfoRsp::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetServerTeamInfoRsp::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetServerTeamInfoRsp::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetServerTeamInfoRsp::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 TCrossLevyGetServerTeamInfoRsp::teamid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetServerTeamInfoRsp.TeamId)
  return teamid_;
}
inline void TCrossLevyGetServerTeamInfoRsp::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetServerTeamInfoRsp.TeamId)
}

// optional string ServerId = 2;
inline bool TCrossLevyGetServerTeamInfoRsp::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyGetServerTeamInfoRsp::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyGetServerTeamInfoRsp::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyGetServerTeamInfoRsp::clear_serverid() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_->clear();
  }
  clear_has_serverid();
}
inline const ::std::string& TCrossLevyGetServerTeamInfoRsp::serverid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetServerTeamInfoRsp.ServerId)
  return *serverid_;
}
inline void TCrossLevyGetServerTeamInfoRsp::set_serverid(const ::std::string& value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetServerTeamInfoRsp.ServerId)
}
inline void TCrossLevyGetServerTeamInfoRsp::set_serverid(const char* value) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossLevyGetServerTeamInfoRsp.ServerId)
}
inline void TCrossLevyGetServerTeamInfoRsp::set_serverid(const char* value, size_t size) {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  serverid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossLevyGetServerTeamInfoRsp.ServerId)
}
inline ::std::string* TCrossLevyGetServerTeamInfoRsp::mutable_serverid() {
  set_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    serverid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetServerTeamInfoRsp.ServerId)
  return serverid_;
}
inline ::std::string* TCrossLevyGetServerTeamInfoRsp::release_serverid() {
  clear_has_serverid();
  if (serverid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = serverid_;
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossLevyGetServerTeamInfoRsp::set_allocated_serverid(::std::string* serverid) {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (serverid) {
    set_has_serverid();
    serverid_ = serverid;
  } else {
    clear_has_serverid();
    serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGetServerTeamInfoRsp.ServerId)
}

// -------------------------------------------------------------------

// TCrossLevyEnterRsp

// repeated .pb.TCrossLevyCityInfo CityInfoArr = 1;
inline int TCrossLevyEnterRsp::cityinfoarr_size() const {
  return cityinfoarr_.size();
}
inline void TCrossLevyEnterRsp::clear_cityinfoarr() {
  cityinfoarr_.Clear();
}
inline const ::pb::TCrossLevyCityInfo& TCrossLevyEnterRsp::cityinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnterRsp.CityInfoArr)
  return cityinfoarr_.Get(index);
}
inline ::pb::TCrossLevyCityInfo* TCrossLevyEnterRsp::mutable_cityinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyEnterRsp.CityInfoArr)
  return cityinfoarr_.Mutable(index);
}
inline ::pb::TCrossLevyCityInfo* TCrossLevyEnterRsp::add_cityinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyEnterRsp.CityInfoArr)
  return cityinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityInfo >&
TCrossLevyEnterRsp::cityinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyEnterRsp.CityInfoArr)
  return cityinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityInfo >*
TCrossLevyEnterRsp::mutable_cityinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyEnterRsp.CityInfoArr)
  return &cityinfoarr_;
}

// repeated .pb.TCrossLevySelfRecordInfo RecordInfoArr = 2;
inline int TCrossLevyEnterRsp::recordinfoarr_size() const {
  return recordinfoarr_.size();
}
inline void TCrossLevyEnterRsp::clear_recordinfoarr() {
  recordinfoarr_.Clear();
}
inline const ::pb::TCrossLevySelfRecordInfo& TCrossLevyEnterRsp::recordinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnterRsp.RecordInfoArr)
  return recordinfoarr_.Get(index);
}
inline ::pb::TCrossLevySelfRecordInfo* TCrossLevyEnterRsp::mutable_recordinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyEnterRsp.RecordInfoArr)
  return recordinfoarr_.Mutable(index);
}
inline ::pb::TCrossLevySelfRecordInfo* TCrossLevyEnterRsp::add_recordinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyEnterRsp.RecordInfoArr)
  return recordinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevySelfRecordInfo >&
TCrossLevyEnterRsp::recordinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyEnterRsp.RecordInfoArr)
  return recordinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevySelfRecordInfo >*
TCrossLevyEnterRsp::mutable_recordinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyEnterRsp.RecordInfoArr)
  return &recordinfoarr_;
}

// repeated .pb.TCrossLevyBossInfo BossInfoArr = 3;
inline int TCrossLevyEnterRsp::bossinfoarr_size() const {
  return bossinfoarr_.size();
}
inline void TCrossLevyEnterRsp::clear_bossinfoarr() {
  bossinfoarr_.Clear();
}
inline const ::pb::TCrossLevyBossInfo& TCrossLevyEnterRsp::bossinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnterRsp.BossInfoArr)
  return bossinfoarr_.Get(index);
}
inline ::pb::TCrossLevyBossInfo* TCrossLevyEnterRsp::mutable_bossinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyEnterRsp.BossInfoArr)
  return bossinfoarr_.Mutable(index);
}
inline ::pb::TCrossLevyBossInfo* TCrossLevyEnterRsp::add_bossinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyEnterRsp.BossInfoArr)
  return bossinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyBossInfo >&
TCrossLevyEnterRsp::bossinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyEnterRsp.BossInfoArr)
  return bossinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyBossInfo >*
TCrossLevyEnterRsp::mutable_bossinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyEnterRsp.BossInfoArr)
  return &bossinfoarr_;
}

// repeated .pb.TCrossLevyRecordInfo RecordArr = 4;
inline int TCrossLevyEnterRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TCrossLevyEnterRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TCrossLevyRecordInfo& TCrossLevyEnterRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnterRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TCrossLevyRecordInfo* TCrossLevyEnterRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyEnterRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TCrossLevyRecordInfo* TCrossLevyEnterRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyEnterRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyRecordInfo >&
TCrossLevyEnterRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyEnterRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyRecordInfo >*
TCrossLevyEnterRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyEnterRsp.RecordArr)
  return &recordarr_;
}

// optional string SceneId = 5;
inline bool TCrossLevyEnterRsp::has_sceneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyEnterRsp::set_has_sceneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyEnterRsp::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyEnterRsp::clear_sceneid() {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_->clear();
  }
  clear_has_sceneid();
}
inline const ::std::string& TCrossLevyEnterRsp::sceneid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnterRsp.SceneId)
  return *sceneid_;
}
inline void TCrossLevyEnterRsp::set_sceneid(const ::std::string& value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyEnterRsp.SceneId)
}
inline void TCrossLevyEnterRsp::set_sceneid(const char* value) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossLevyEnterRsp.SceneId)
}
inline void TCrossLevyEnterRsp::set_sceneid(const char* value, size_t size) {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  sceneid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossLevyEnterRsp.SceneId)
}
inline ::std::string* TCrossLevyEnterRsp::mutable_sceneid() {
  set_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sceneid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyEnterRsp.SceneId)
  return sceneid_;
}
inline ::std::string* TCrossLevyEnterRsp::release_sceneid() {
  clear_has_sceneid();
  if (sceneid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sceneid_;
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossLevyEnterRsp::set_allocated_sceneid(::std::string* sceneid) {
  if (sceneid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sceneid_;
  }
  if (sceneid) {
    set_has_sceneid();
    sceneid_ = sceneid;
  } else {
    clear_has_sceneid();
    sceneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyEnterRsp.SceneId)
}

// optional uint32 RewardId = 6;
inline bool TCrossLevyEnterRsp::has_rewardid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossLevyEnterRsp::set_has_rewardid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossLevyEnterRsp::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossLevyEnterRsp::clear_rewardid() {
  rewardid_ = 0u;
  clear_has_rewardid();
}
inline ::google::protobuf::uint32 TCrossLevyEnterRsp::rewardid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyEnterRsp.RewardId)
  return rewardid_;
}
inline void TCrossLevyEnterRsp::set_rewardid(::google::protobuf::uint32 value) {
  set_has_rewardid();
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyEnterRsp.RewardId)
}

// -------------------------------------------------------------------

// TCrossLevyGetUserInfoRsp

// optional uint32 LeftChallengeNum = 1;
inline bool TCrossLevyGetUserInfoRsp::has_leftchallengenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetUserInfoRsp::set_has_leftchallengenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetUserInfoRsp::clear_has_leftchallengenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetUserInfoRsp::clear_leftchallengenum() {
  leftchallengenum_ = 0u;
  clear_has_leftchallengenum();
}
inline ::google::protobuf::uint32 TCrossLevyGetUserInfoRsp::leftchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.LeftChallengeNum)
  return leftchallengenum_;
}
inline void TCrossLevyGetUserInfoRsp::set_leftchallengenum(::google::protobuf::uint32 value) {
  set_has_leftchallengenum();
  leftchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.LeftChallengeNum)
}

// optional uint32 BuyChallengeNum = 2;
inline bool TCrossLevyGetUserInfoRsp::has_buychallengenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyGetUserInfoRsp::set_has_buychallengenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyGetUserInfoRsp::clear_has_buychallengenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyGetUserInfoRsp::clear_buychallengenum() {
  buychallengenum_ = 0u;
  clear_has_buychallengenum();
}
inline ::google::protobuf::uint32 TCrossLevyGetUserInfoRsp::buychallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.BuyChallengeNum)
  return buychallengenum_;
}
inline void TCrossLevyGetUserInfoRsp::set_buychallengenum(::google::protobuf::uint32 value) {
  set_has_buychallengenum();
  buychallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.BuyChallengeNum)
}

// optional uint32 ForceNum = 3;
inline bool TCrossLevyGetUserInfoRsp::has_forcenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyGetUserInfoRsp::set_has_forcenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyGetUserInfoRsp::clear_has_forcenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyGetUserInfoRsp::clear_forcenum() {
  forcenum_ = 0u;
  clear_has_forcenum();
}
inline ::google::protobuf::uint32 TCrossLevyGetUserInfoRsp::forcenum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.ForceNum)
  return forcenum_;
}
inline void TCrossLevyGetUserInfoRsp::set_forcenum(::google::protobuf::uint32 value) {
  set_has_forcenum();
  forcenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.ForceNum)
}

// optional uint32 AtkBossNum = 4;
inline bool TCrossLevyGetUserInfoRsp::has_atkbossnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyGetUserInfoRsp::set_has_atkbossnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyGetUserInfoRsp::clear_has_atkbossnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyGetUserInfoRsp::clear_atkbossnum() {
  atkbossnum_ = 0u;
  clear_has_atkbossnum();
}
inline ::google::protobuf::uint32 TCrossLevyGetUserInfoRsp::atkbossnum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.AtkBossNum)
  return atkbossnum_;
}
inline void TCrossLevyGetUserInfoRsp::set_atkbossnum(::google::protobuf::uint32 value) {
  set_has_atkbossnum();
  atkbossnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.AtkBossNum)
}

// optional uint32 PlunderNum = 5;
inline bool TCrossLevyGetUserInfoRsp::has_plundernum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyGetUserInfoRsp::set_has_plundernum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyGetUserInfoRsp::clear_has_plundernum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyGetUserInfoRsp::clear_plundernum() {
  plundernum_ = 0u;
  clear_has_plundernum();
}
inline ::google::protobuf::uint32 TCrossLevyGetUserInfoRsp::plundernum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.PlunderNum)
  return plundernum_;
}
inline void TCrossLevyGetUserInfoRsp::set_plundernum(::google::protobuf::uint32 value) {
  set_has_plundernum();
  plundernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.PlunderNum)
}

// repeated .pb.TCrossLevyMyCampInfo MyCampInfoArr = 6;
inline int TCrossLevyGetUserInfoRsp::mycampinfoarr_size() const {
  return mycampinfoarr_.size();
}
inline void TCrossLevyGetUserInfoRsp::clear_mycampinfoarr() {
  mycampinfoarr_.Clear();
}
inline const ::pb::TCrossLevyMyCampInfo& TCrossLevyGetUserInfoRsp::mycampinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.MyCampInfoArr)
  return mycampinfoarr_.Get(index);
}
inline ::pb::TCrossLevyMyCampInfo* TCrossLevyGetUserInfoRsp::mutable_mycampinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetUserInfoRsp.MyCampInfoArr)
  return mycampinfoarr_.Mutable(index);
}
inline ::pb::TCrossLevyMyCampInfo* TCrossLevyGetUserInfoRsp::add_mycampinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetUserInfoRsp.MyCampInfoArr)
  return mycampinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMyCampInfo >&
TCrossLevyGetUserInfoRsp::mycampinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetUserInfoRsp.MyCampInfoArr)
  return mycampinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMyCampInfo >*
TCrossLevyGetUserInfoRsp::mutable_mycampinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetUserInfoRsp.MyCampInfoArr)
  return &mycampinfoarr_;
}

// optional uint64 MonsterRfrTime = 7;
inline bool TCrossLevyGetUserInfoRsp::has_monsterrfrtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TCrossLevyGetUserInfoRsp::set_has_monsterrfrtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TCrossLevyGetUserInfoRsp::clear_has_monsterrfrtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TCrossLevyGetUserInfoRsp::clear_monsterrfrtime() {
  monsterrfrtime_ = GOOGLE_ULONGLONG(0);
  clear_has_monsterrfrtime();
}
inline ::google::protobuf::uint64 TCrossLevyGetUserInfoRsp::monsterrfrtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.MonsterRfrTime)
  return monsterrfrtime_;
}
inline void TCrossLevyGetUserInfoRsp::set_monsterrfrtime(::google::protobuf::uint64 value) {
  set_has_monsterrfrtime();
  monsterrfrtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.MonsterRfrTime)
}

// repeated .pb.TCrossLevyMonsterInfo MonsterInfoArr = 8;
inline int TCrossLevyGetUserInfoRsp::monsterinfoarr_size() const {
  return monsterinfoarr_.size();
}
inline void TCrossLevyGetUserInfoRsp::clear_monsterinfoarr() {
  monsterinfoarr_.Clear();
}
inline const ::pb::TCrossLevyMonsterInfo& TCrossLevyGetUserInfoRsp::monsterinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.MonsterInfoArr)
  return monsterinfoarr_.Get(index);
}
inline ::pb::TCrossLevyMonsterInfo* TCrossLevyGetUserInfoRsp::mutable_monsterinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetUserInfoRsp.MonsterInfoArr)
  return monsterinfoarr_.Mutable(index);
}
inline ::pb::TCrossLevyMonsterInfo* TCrossLevyGetUserInfoRsp::add_monsterinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetUserInfoRsp.MonsterInfoArr)
  return monsterinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterInfo >&
TCrossLevyGetUserInfoRsp::monsterinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetUserInfoRsp.MonsterInfoArr)
  return monsterinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterInfo >*
TCrossLevyGetUserInfoRsp::mutable_monsterinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetUserInfoRsp.MonsterInfoArr)
  return &monsterinfoarr_;
}

// optional uint32 Score = 9;
inline bool TCrossLevyGetUserInfoRsp::has_score() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TCrossLevyGetUserInfoRsp::set_has_score() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TCrossLevyGetUserInfoRsp::clear_has_score() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TCrossLevyGetUserInfoRsp::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TCrossLevyGetUserInfoRsp::score() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.Score)
  return score_;
}
inline void TCrossLevyGetUserInfoRsp::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.Score)
}

// repeated uint32 RewardIdArr = 10;
inline int TCrossLevyGetUserInfoRsp::rewardidarr_size() const {
  return rewardidarr_.size();
}
inline void TCrossLevyGetUserInfoRsp::clear_rewardidarr() {
  rewardidarr_.Clear();
}
inline ::google::protobuf::uint32 TCrossLevyGetUserInfoRsp::rewardidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.RewardIdArr)
  return rewardidarr_.Get(index);
}
inline void TCrossLevyGetUserInfoRsp::set_rewardidarr(int index, ::google::protobuf::uint32 value) {
  rewardidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.RewardIdArr)
}
inline void TCrossLevyGetUserInfoRsp::add_rewardidarr(::google::protobuf::uint32 value) {
  rewardidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetUserInfoRsp.RewardIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TCrossLevyGetUserInfoRsp::rewardidarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetUserInfoRsp.RewardIdArr)
  return rewardidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TCrossLevyGetUserInfoRsp::mutable_rewardidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetUserInfoRsp.RewardIdArr)
  return &rewardidarr_;
}

// repeated .pb.TCrossLevyFormationInfo AtkFmtArr = 11;
inline int TCrossLevyGetUserInfoRsp::atkfmtarr_size() const {
  return atkfmtarr_.size();
}
inline void TCrossLevyGetUserInfoRsp::clear_atkfmtarr() {
  atkfmtarr_.Clear();
}
inline const ::pb::TCrossLevyFormationInfo& TCrossLevyGetUserInfoRsp::atkfmtarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.AtkFmtArr)
  return atkfmtarr_.Get(index);
}
inline ::pb::TCrossLevyFormationInfo* TCrossLevyGetUserInfoRsp::mutable_atkfmtarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetUserInfoRsp.AtkFmtArr)
  return atkfmtarr_.Mutable(index);
}
inline ::pb::TCrossLevyFormationInfo* TCrossLevyGetUserInfoRsp::add_atkfmtarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetUserInfoRsp.AtkFmtArr)
  return atkfmtarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >&
TCrossLevyGetUserInfoRsp::atkfmtarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetUserInfoRsp.AtkFmtArr)
  return atkfmtarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >*
TCrossLevyGetUserInfoRsp::mutable_atkfmtarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetUserInfoRsp.AtkFmtArr)
  return &atkfmtarr_;
}

// repeated .pb.TCrossLevyFormationInfo DefFmtArr = 12;
inline int TCrossLevyGetUserInfoRsp::deffmtarr_size() const {
  return deffmtarr_.size();
}
inline void TCrossLevyGetUserInfoRsp::clear_deffmtarr() {
  deffmtarr_.Clear();
}
inline const ::pb::TCrossLevyFormationInfo& TCrossLevyGetUserInfoRsp::deffmtarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.DefFmtArr)
  return deffmtarr_.Get(index);
}
inline ::pb::TCrossLevyFormationInfo* TCrossLevyGetUserInfoRsp::mutable_deffmtarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetUserInfoRsp.DefFmtArr)
  return deffmtarr_.Mutable(index);
}
inline ::pb::TCrossLevyFormationInfo* TCrossLevyGetUserInfoRsp::add_deffmtarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetUserInfoRsp.DefFmtArr)
  return deffmtarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >&
TCrossLevyGetUserInfoRsp::deffmtarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetUserInfoRsp.DefFmtArr)
  return deffmtarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >*
TCrossLevyGetUserInfoRsp::mutable_deffmtarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetUserInfoRsp.DefFmtArr)
  return &deffmtarr_;
}

// optional uint32 PlunderBenefitNum = 13;
inline bool TCrossLevyGetUserInfoRsp::has_plunderbenefitnum() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TCrossLevyGetUserInfoRsp::set_has_plunderbenefitnum() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TCrossLevyGetUserInfoRsp::clear_has_plunderbenefitnum() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TCrossLevyGetUserInfoRsp::clear_plunderbenefitnum() {
  plunderbenefitnum_ = 0u;
  clear_has_plunderbenefitnum();
}
inline ::google::protobuf::uint32 TCrossLevyGetUserInfoRsp::plunderbenefitnum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.PlunderBenefitNum)
  return plunderbenefitnum_;
}
inline void TCrossLevyGetUserInfoRsp::set_plunderbenefitnum(::google::protobuf::uint32 value) {
  set_has_plunderbenefitnum();
  plunderbenefitnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.PlunderBenefitNum)
}

// optional uint32 ExpelBenefitNum = 14;
inline bool TCrossLevyGetUserInfoRsp::has_expelbenefitnum() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TCrossLevyGetUserInfoRsp::set_has_expelbenefitnum() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TCrossLevyGetUserInfoRsp::clear_has_expelbenefitnum() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TCrossLevyGetUserInfoRsp::clear_expelbenefitnum() {
  expelbenefitnum_ = 0u;
  clear_has_expelbenefitnum();
}
inline ::google::protobuf::uint32 TCrossLevyGetUserInfoRsp::expelbenefitnum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.ExpelBenefitNum)
  return expelbenefitnum_;
}
inline void TCrossLevyGetUserInfoRsp::set_expelbenefitnum(::google::protobuf::uint32 value) {
  set_has_expelbenefitnum();
  expelbenefitnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.ExpelBenefitNum)
}

// optional uint64 LastRecoverTime = 15;
inline bool TCrossLevyGetUserInfoRsp::has_lastrecovertime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TCrossLevyGetUserInfoRsp::set_has_lastrecovertime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TCrossLevyGetUserInfoRsp::clear_has_lastrecovertime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TCrossLevyGetUserInfoRsp::clear_lastrecovertime() {
  lastrecovertime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastrecovertime();
}
inline ::google::protobuf::uint64 TCrossLevyGetUserInfoRsp::lastrecovertime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.LastRecoverTime)
  return lastrecovertime_;
}
inline void TCrossLevyGetUserInfoRsp::set_lastrecovertime(::google::protobuf::uint64 value) {
  set_has_lastrecovertime();
  lastrecovertime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.LastRecoverTime)
}

// optional uint64 LastAtkBossTime = 16;
inline bool TCrossLevyGetUserInfoRsp::has_lastatkbosstime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TCrossLevyGetUserInfoRsp::set_has_lastatkbosstime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TCrossLevyGetUserInfoRsp::clear_has_lastatkbosstime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TCrossLevyGetUserInfoRsp::clear_lastatkbosstime() {
  lastatkbosstime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastatkbosstime();
}
inline ::google::protobuf::uint64 TCrossLevyGetUserInfoRsp::lastatkbosstime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetUserInfoRsp.LastAtkBossTime)
  return lastatkbosstime_;
}
inline void TCrossLevyGetUserInfoRsp::set_lastatkbosstime(::google::protobuf::uint64 value) {
  set_has_lastatkbosstime();
  lastatkbosstime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetUserInfoRsp.LastAtkBossTime)
}

// -------------------------------------------------------------------

// TCrossLevyGetCityInfoReq

// optional uint32 CityId = 1;
inline bool TCrossLevyGetCityInfoReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetCityInfoReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetCityInfoReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetCityInfoReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyGetCityInfoReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetCityInfoReq.CityId)
  return cityid_;
}
inline void TCrossLevyGetCityInfoReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetCityInfoReq.CityId)
}

// optional uint32 CityIndex = 2;
inline bool TCrossLevyGetCityInfoReq::has_cityindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyGetCityInfoReq::set_has_cityindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyGetCityInfoReq::clear_has_cityindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyGetCityInfoReq::clear_cityindex() {
  cityindex_ = 0u;
  clear_has_cityindex();
}
inline ::google::protobuf::uint32 TCrossLevyGetCityInfoReq::cityindex() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetCityInfoReq.CityIndex)
  return cityindex_;
}
inline void TCrossLevyGetCityInfoReq::set_cityindex(::google::protobuf::uint32 value) {
  set_has_cityindex();
  cityindex_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetCityInfoReq.CityIndex)
}

// -------------------------------------------------------------------

// TCrossLevyGetCityInfoRsp

// repeated .pb.TCrossLevyCampInfo CampInfoArr = 1;
inline int TCrossLevyGetCityInfoRsp::campinfoarr_size() const {
  return campinfoarr_.size();
}
inline void TCrossLevyGetCityInfoRsp::clear_campinfoarr() {
  campinfoarr_.Clear();
}
inline const ::pb::TCrossLevyCampInfo& TCrossLevyGetCityInfoRsp::campinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetCityInfoRsp.CampInfoArr)
  return campinfoarr_.Get(index);
}
inline ::pb::TCrossLevyCampInfo* TCrossLevyGetCityInfoRsp::mutable_campinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetCityInfoRsp.CampInfoArr)
  return campinfoarr_.Mutable(index);
}
inline ::pb::TCrossLevyCampInfo* TCrossLevyGetCityInfoRsp::add_campinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetCityInfoRsp.CampInfoArr)
  return campinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCampInfo >&
TCrossLevyGetCityInfoRsp::campinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetCityInfoRsp.CampInfoArr)
  return campinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCampInfo >*
TCrossLevyGetCityInfoRsp::mutable_campinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetCityInfoRsp.CampInfoArr)
  return &campinfoarr_;
}

// -------------------------------------------------------------------

// TCrossLevyMoveToEmptyCampReq

// optional uint32 CityId = 1;
inline bool TCrossLevyMoveToEmptyCampReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyMoveToEmptyCampReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyMoveToEmptyCampReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyMoveToEmptyCampReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyMoveToEmptyCampReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMoveToEmptyCampReq.CityId)
  return cityid_;
}
inline void TCrossLevyMoveToEmptyCampReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMoveToEmptyCampReq.CityId)
}

// optional uint32 CampId = 2;
inline bool TCrossLevyMoveToEmptyCampReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyMoveToEmptyCampReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyMoveToEmptyCampReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyMoveToEmptyCampReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyMoveToEmptyCampReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMoveToEmptyCampReq.CampId)
  return campid_;
}
inline void TCrossLevyMoveToEmptyCampReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMoveToEmptyCampReq.CampId)
}

// optional uint32 OriCityId = 3;
inline bool TCrossLevyMoveToEmptyCampReq::has_oricityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyMoveToEmptyCampReq::set_has_oricityid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyMoveToEmptyCampReq::clear_has_oricityid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyMoveToEmptyCampReq::clear_oricityid() {
  oricityid_ = 0u;
  clear_has_oricityid();
}
inline ::google::protobuf::uint32 TCrossLevyMoveToEmptyCampReq::oricityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMoveToEmptyCampReq.OriCityId)
  return oricityid_;
}
inline void TCrossLevyMoveToEmptyCampReq::set_oricityid(::google::protobuf::uint32 value) {
  set_has_oricityid();
  oricityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMoveToEmptyCampReq.OriCityId)
}

// optional uint32 OriCampId = 4;
inline bool TCrossLevyMoveToEmptyCampReq::has_oricampid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyMoveToEmptyCampReq::set_has_oricampid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyMoveToEmptyCampReq::clear_has_oricampid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyMoveToEmptyCampReq::clear_oricampid() {
  oricampid_ = 0u;
  clear_has_oricampid();
}
inline ::google::protobuf::uint32 TCrossLevyMoveToEmptyCampReq::oricampid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyMoveToEmptyCampReq.OriCampId)
  return oricampid_;
}
inline void TCrossLevyMoveToEmptyCampReq::set_oricampid(::google::protobuf::uint32 value) {
  set_has_oricampid();
  oricampid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyMoveToEmptyCampReq.OriCampId)
}

// -------------------------------------------------------------------

// TCrossLevySetDefFormationReq

// repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
inline int TCrossLevySetDefFormationReq::formationarr_size() const {
  return formationarr_.size();
}
inline void TCrossLevySetDefFormationReq::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TCrossLevyFormationInfo& TCrossLevySetDefFormationReq::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySetDefFormationReq.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TCrossLevyFormationInfo* TCrossLevySetDefFormationReq::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevySetDefFormationReq.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TCrossLevyFormationInfo* TCrossLevySetDefFormationReq::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevySetDefFormationReq.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >&
TCrossLevySetDefFormationReq::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevySetDefFormationReq.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >*
TCrossLevySetDefFormationReq::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevySetDefFormationReq.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TCrossLevySetAtkFormationReq

// repeated .pb.TCrossLevyFormationInfo FormationArr = 1;
inline int TCrossLevySetAtkFormationReq::formationarr_size() const {
  return formationarr_.size();
}
inline void TCrossLevySetAtkFormationReq::clear_formationarr() {
  formationarr_.Clear();
}
inline const ::pb::TCrossLevyFormationInfo& TCrossLevySetAtkFormationReq::formationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevySetAtkFormationReq.FormationArr)
  return formationarr_.Get(index);
}
inline ::pb::TCrossLevyFormationInfo* TCrossLevySetAtkFormationReq::mutable_formationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevySetAtkFormationReq.FormationArr)
  return formationarr_.Mutable(index);
}
inline ::pb::TCrossLevyFormationInfo* TCrossLevySetAtkFormationReq::add_formationarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevySetAtkFormationReq.FormationArr)
  return formationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >&
TCrossLevySetAtkFormationReq::formationarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevySetAtkFormationReq.FormationArr)
  return formationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyFormationInfo >*
TCrossLevySetAtkFormationReq::mutable_formationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevySetAtkFormationReq.FormationArr)
  return &formationarr_;
}

// -------------------------------------------------------------------

// TCrossLevyGetEnemyFormationReq

// optional uint32 CityId = 1;
inline bool TCrossLevyGetEnemyFormationReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetEnemyFormationReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetEnemyFormationReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetEnemyFormationReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyGetEnemyFormationReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetEnemyFormationReq.CityId)
  return cityid_;
}
inline void TCrossLevyGetEnemyFormationReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetEnemyFormationReq.CityId)
}

// optional uint32 CampId = 2;
inline bool TCrossLevyGetEnemyFormationReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyGetEnemyFormationReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyGetEnemyFormationReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyGetEnemyFormationReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyGetEnemyFormationReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetEnemyFormationReq.CampId)
  return campid_;
}
inline void TCrossLevyGetEnemyFormationReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetEnemyFormationReq.CampId)
}

// optional uint64 EnemyUid = 3;
inline bool TCrossLevyGetEnemyFormationReq::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyGetEnemyFormationReq::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyGetEnemyFormationReq::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyGetEnemyFormationReq::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TCrossLevyGetEnemyFormationReq::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetEnemyFormationReq.EnemyUid)
  return enemyuid_;
}
inline void TCrossLevyGetEnemyFormationReq::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetEnemyFormationReq.EnemyUid)
}

// -------------------------------------------------------------------

// TCrossLevyGetEnemyFormationRsp

// repeated .pb.TCrossLevyEnemyFormation EnemyFormationArr = 1;
inline int TCrossLevyGetEnemyFormationRsp::enemyformationarr_size() const {
  return enemyformationarr_.size();
}
inline void TCrossLevyGetEnemyFormationRsp::clear_enemyformationarr() {
  enemyformationarr_.Clear();
}
inline const ::pb::TCrossLevyEnemyFormation& TCrossLevyGetEnemyFormationRsp::enemyformationarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetEnemyFormationRsp.EnemyFormationArr)
  return enemyformationarr_.Get(index);
}
inline ::pb::TCrossLevyEnemyFormation* TCrossLevyGetEnemyFormationRsp::mutable_enemyformationarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetEnemyFormationRsp.EnemyFormationArr)
  return enemyformationarr_.Mutable(index);
}
inline ::pb::TCrossLevyEnemyFormation* TCrossLevyGetEnemyFormationRsp::add_enemyformationarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetEnemyFormationRsp.EnemyFormationArr)
  return enemyformationarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyFormation >&
TCrossLevyGetEnemyFormationRsp::enemyformationarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetEnemyFormationRsp.EnemyFormationArr)
  return enemyformationarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyFormation >*
TCrossLevyGetEnemyFormationRsp::mutable_enemyformationarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetEnemyFormationRsp.EnemyFormationArr)
  return &enemyformationarr_;
}

// -------------------------------------------------------------------

// TCrossLevyForceCollectReq

// optional uint32 CityId = 1;
inline bool TCrossLevyForceCollectReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyForceCollectReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyForceCollectReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyForceCollectReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyForceCollectReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceCollectReq.CityId)
  return cityid_;
}
inline void TCrossLevyForceCollectReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyForceCollectReq.CityId)
}

// optional uint32 CampId = 2;
inline bool TCrossLevyForceCollectReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyForceCollectReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyForceCollectReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyForceCollectReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyForceCollectReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceCollectReq.CampId)
  return campid_;
}
inline void TCrossLevyForceCollectReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyForceCollectReq.CampId)
}

// -------------------------------------------------------------------

// TCrossLevyForceCollectRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TCrossLevyForceCollectRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyForceCollectRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyForceCollectRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceCollectRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyForceCollectRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyForceCollectRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyForceCollectRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyForceCollectRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyForceCollectRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyForceCollectRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyForceCollectRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyForceCollectRsp.RewardArr)
  return &rewardarr_;
}

// optional uint32 SettleScore = 2;
inline bool TCrossLevyForceCollectRsp::has_settlescore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyForceCollectRsp::set_has_settlescore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyForceCollectRsp::clear_has_settlescore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyForceCollectRsp::clear_settlescore() {
  settlescore_ = 0u;
  clear_has_settlescore();
}
inline ::google::protobuf::uint32 TCrossLevyForceCollectRsp::settlescore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceCollectRsp.SettleScore)
  return settlescore_;
}
inline void TCrossLevyForceCollectRsp::set_settlescore(::google::protobuf::uint32 value) {
  set_has_settlescore();
  settlescore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyForceCollectRsp.SettleScore)
}

// -------------------------------------------------------------------

// TCrossLevyPlunderReq

// optional uint32 CityId = 1;
inline bool TCrossLevyPlunderReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyPlunderReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyPlunderReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyPlunderReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyPlunderReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderReq.CityId)
  return cityid_;
}
inline void TCrossLevyPlunderReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyPlunderReq.CityId)
}

// optional uint32 CampId = 2;
inline bool TCrossLevyPlunderReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyPlunderReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyPlunderReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyPlunderReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyPlunderReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderReq.CampId)
  return campid_;
}
inline void TCrossLevyPlunderReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyPlunderReq.CampId)
}

// optional uint64 EnemyUid = 3;
inline bool TCrossLevyPlunderReq::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyPlunderReq::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyPlunderReq::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyPlunderReq::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TCrossLevyPlunderReq::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderReq.EnemyUid)
  return enemyuid_;
}
inline void TCrossLevyPlunderReq::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyPlunderReq.EnemyUid)
}

// -------------------------------------------------------------------

// TCrossLevyPlunderRsp

// optional bool IsAtkWin = 1;
inline bool TCrossLevyPlunderRsp::has_isatkwin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyPlunderRsp::set_has_isatkwin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyPlunderRsp::clear_has_isatkwin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyPlunderRsp::clear_isatkwin() {
  isatkwin_ = false;
  clear_has_isatkwin();
}
inline bool TCrossLevyPlunderRsp::isatkwin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderRsp.IsAtkWin)
  return isatkwin_;
}
inline void TCrossLevyPlunderRsp::set_isatkwin(bool value) {
  set_has_isatkwin();
  isatkwin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyPlunderRsp.IsAtkWin)
}

// optional .pb.TUserSimpleInfo AtkUserInfo = 2;
inline bool TCrossLevyPlunderRsp::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyPlunderRsp::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyPlunderRsp::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyPlunderRsp::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyPlunderRsp::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderRsp.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyPlunderRsp::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyPlunderRsp.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyPlunderRsp::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevyPlunderRsp::set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyPlunderRsp.AtkUserInfo)
}

// optional .pb.TUserSimpleInfo DefUserInfo = 3;
inline bool TCrossLevyPlunderRsp::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyPlunderRsp::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyPlunderRsp::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyPlunderRsp::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyPlunderRsp::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderRsp.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyPlunderRsp::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyPlunderRsp.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyPlunderRsp::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TUserSimpleInfo* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevyPlunderRsp::set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyPlunderRsp.DefUserInfo)
}

// repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
inline int TCrossLevyPlunderRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TCrossLevyPlunderRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TCrossLevyUserRecordViewInfo& TCrossLevyPlunderRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TCrossLevyUserRecordViewInfo* TCrossLevyPlunderRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyPlunderRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TCrossLevyUserRecordViewInfo* TCrossLevyPlunderRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyPlunderRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >&
TCrossLevyPlunderRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyPlunderRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >*
TCrossLevyPlunderRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyPlunderRsp.RecordArr)
  return &recordarr_;
}

// repeated .pb.TCommonReward RewardArr = 5;
inline int TCrossLevyPlunderRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyPlunderRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyPlunderRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyPlunderRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyPlunderRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyPlunderRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyPlunderRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyPlunderRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyPlunderRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyPlunderRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyPlunderRsp.RewardArr)
  return &rewardarr_;
}

// optional uint32 RewardScore = 6;
inline bool TCrossLevyPlunderRsp::has_rewardscore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossLevyPlunderRsp::set_has_rewardscore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossLevyPlunderRsp::clear_has_rewardscore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossLevyPlunderRsp::clear_rewardscore() {
  rewardscore_ = 0u;
  clear_has_rewardscore();
}
inline ::google::protobuf::uint32 TCrossLevyPlunderRsp::rewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyPlunderRsp.RewardScore)
  return rewardscore_;
}
inline void TCrossLevyPlunderRsp::set_rewardscore(::google::protobuf::uint32 value) {
  set_has_rewardscore();
  rewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyPlunderRsp.RewardScore)
}

// -------------------------------------------------------------------

// TCrossLevyExpelReq

// optional uint32 CityId = 1;
inline bool TCrossLevyExpelReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyExpelReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyExpelReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyExpelReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyExpelReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelReq.CityId)
  return cityid_;
}
inline void TCrossLevyExpelReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyExpelReq.CityId)
}

// optional uint32 CampId = 2;
inline bool TCrossLevyExpelReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyExpelReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyExpelReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyExpelReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyExpelReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelReq.CampId)
  return campid_;
}
inline void TCrossLevyExpelReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyExpelReq.CampId)
}

// optional uint64 EnemyUid = 3;
inline bool TCrossLevyExpelReq::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyExpelReq::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyExpelReq::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyExpelReq::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TCrossLevyExpelReq::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelReq.EnemyUid)
  return enemyuid_;
}
inline void TCrossLevyExpelReq::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyExpelReq.EnemyUid)
}

// -------------------------------------------------------------------

// TCrossLevyExpelRsp

// optional bool IsAtkWin = 1;
inline bool TCrossLevyExpelRsp::has_isatkwin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyExpelRsp::set_has_isatkwin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyExpelRsp::clear_has_isatkwin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyExpelRsp::clear_isatkwin() {
  isatkwin_ = false;
  clear_has_isatkwin();
}
inline bool TCrossLevyExpelRsp::isatkwin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelRsp.IsAtkWin)
  return isatkwin_;
}
inline void TCrossLevyExpelRsp::set_isatkwin(bool value) {
  set_has_isatkwin();
  isatkwin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyExpelRsp.IsAtkWin)
}

// optional .pb.TUserSimpleInfo AtkUserInfo = 2;
inline bool TCrossLevyExpelRsp::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyExpelRsp::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyExpelRsp::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyExpelRsp::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyExpelRsp::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelRsp.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyExpelRsp::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyExpelRsp.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyExpelRsp::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevyExpelRsp::set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyExpelRsp.AtkUserInfo)
}

// optional .pb.TUserSimpleInfo DefUserInfo = 3;
inline bool TCrossLevyExpelRsp::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyExpelRsp::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyExpelRsp::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyExpelRsp::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyExpelRsp::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelRsp.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyExpelRsp::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyExpelRsp.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyExpelRsp::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TUserSimpleInfo* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevyExpelRsp::set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyExpelRsp.DefUserInfo)
}

// repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
inline int TCrossLevyExpelRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TCrossLevyExpelRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TCrossLevyUserRecordViewInfo& TCrossLevyExpelRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TCrossLevyUserRecordViewInfo* TCrossLevyExpelRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyExpelRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TCrossLevyUserRecordViewInfo* TCrossLevyExpelRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyExpelRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >&
TCrossLevyExpelRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyExpelRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >*
TCrossLevyExpelRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyExpelRsp.RecordArr)
  return &recordarr_;
}

// repeated .pb.TCommonReward RewardArr = 5;
inline int TCrossLevyExpelRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyExpelRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyExpelRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyExpelRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyExpelRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyExpelRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyExpelRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyExpelRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyExpelRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyExpelRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyExpelRsp.RewardArr)
  return &rewardarr_;
}

// optional uint32 RewardScore = 6;
inline bool TCrossLevyExpelRsp::has_rewardscore() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TCrossLevyExpelRsp::set_has_rewardscore() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TCrossLevyExpelRsp::clear_has_rewardscore() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TCrossLevyExpelRsp::clear_rewardscore() {
  rewardscore_ = 0u;
  clear_has_rewardscore();
}
inline ::google::protobuf::uint32 TCrossLevyExpelRsp::rewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyExpelRsp.RewardScore)
  return rewardscore_;
}
inline void TCrossLevyExpelRsp::set_rewardscore(::google::protobuf::uint32 value) {
  set_has_rewardscore();
  rewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyExpelRsp.RewardScore)
}

// -------------------------------------------------------------------

// TCrossLevyForceMoveReq

// optional uint32 CityId = 1;
inline bool TCrossLevyForceMoveReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyForceMoveReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyForceMoveReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyForceMoveReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyForceMoveReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceMoveReq.CityId)
  return cityid_;
}
inline void TCrossLevyForceMoveReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyForceMoveReq.CityId)
}

// optional uint32 CampId = 2;
inline bool TCrossLevyForceMoveReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyForceMoveReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyForceMoveReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyForceMoveReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyForceMoveReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceMoveReq.CampId)
  return campid_;
}
inline void TCrossLevyForceMoveReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyForceMoveReq.CampId)
}

// optional uint64 EnemyUid = 3;
inline bool TCrossLevyForceMoveReq::has_enemyuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyForceMoveReq::set_has_enemyuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyForceMoveReq::clear_has_enemyuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyForceMoveReq::clear_enemyuid() {
  enemyuid_ = GOOGLE_ULONGLONG(0);
  clear_has_enemyuid();
}
inline ::google::protobuf::uint64 TCrossLevyForceMoveReq::enemyuid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceMoveReq.EnemyUid)
  return enemyuid_;
}
inline void TCrossLevyForceMoveReq::set_enemyuid(::google::protobuf::uint64 value) {
  set_has_enemyuid();
  enemyuid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyForceMoveReq.EnemyUid)
}

// optional uint32 OriCityId = 4;
inline bool TCrossLevyForceMoveReq::has_oricityid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyForceMoveReq::set_has_oricityid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyForceMoveReq::clear_has_oricityid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyForceMoveReq::clear_oricityid() {
  oricityid_ = 0u;
  clear_has_oricityid();
}
inline ::google::protobuf::uint32 TCrossLevyForceMoveReq::oricityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceMoveReq.OriCityId)
  return oricityid_;
}
inline void TCrossLevyForceMoveReq::set_oricityid(::google::protobuf::uint32 value) {
  set_has_oricityid();
  oricityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyForceMoveReq.OriCityId)
}

// optional uint32 OriCampId = 5;
inline bool TCrossLevyForceMoveReq::has_oricampid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyForceMoveReq::set_has_oricampid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyForceMoveReq::clear_has_oricampid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyForceMoveReq::clear_oricampid() {
  oricampid_ = 0u;
  clear_has_oricampid();
}
inline ::google::protobuf::uint32 TCrossLevyForceMoveReq::oricampid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceMoveReq.OriCampId)
  return oricampid_;
}
inline void TCrossLevyForceMoveReq::set_oricampid(::google::protobuf::uint32 value) {
  set_has_oricampid();
  oricampid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyForceMoveReq.OriCampId)
}

// -------------------------------------------------------------------

// TCrossLevyForceMoveRsp

// optional bool IsAtkWin = 1;
inline bool TCrossLevyForceMoveRsp::has_isatkwin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyForceMoveRsp::set_has_isatkwin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyForceMoveRsp::clear_has_isatkwin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyForceMoveRsp::clear_isatkwin() {
  isatkwin_ = false;
  clear_has_isatkwin();
}
inline bool TCrossLevyForceMoveRsp::isatkwin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceMoveRsp.IsAtkWin)
  return isatkwin_;
}
inline void TCrossLevyForceMoveRsp::set_isatkwin(bool value) {
  set_has_isatkwin();
  isatkwin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyForceMoveRsp.IsAtkWin)
}

// optional .pb.TUserSimpleInfo AtkUserInfo = 2;
inline bool TCrossLevyForceMoveRsp::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyForceMoveRsp::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyForceMoveRsp::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyForceMoveRsp::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyForceMoveRsp::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceMoveRsp.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyForceMoveRsp::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyForceMoveRsp.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyForceMoveRsp::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevyForceMoveRsp::set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyForceMoveRsp.AtkUserInfo)
}

// optional .pb.TUserSimpleInfo DefUserInfo = 3;
inline bool TCrossLevyForceMoveRsp::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyForceMoveRsp::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyForceMoveRsp::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyForceMoveRsp::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyForceMoveRsp::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceMoveRsp.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyForceMoveRsp::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyForceMoveRsp.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyForceMoveRsp::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TUserSimpleInfo* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevyForceMoveRsp::set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyForceMoveRsp.DefUserInfo)
}

// repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
inline int TCrossLevyForceMoveRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TCrossLevyForceMoveRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TCrossLevyUserRecordViewInfo& TCrossLevyForceMoveRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceMoveRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TCrossLevyUserRecordViewInfo* TCrossLevyForceMoveRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyForceMoveRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TCrossLevyUserRecordViewInfo* TCrossLevyForceMoveRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyForceMoveRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >&
TCrossLevyForceMoveRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyForceMoveRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >*
TCrossLevyForceMoveRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyForceMoveRsp.RecordArr)
  return &recordarr_;
}

// optional uint32 RewardScore = 5;
inline bool TCrossLevyForceMoveRsp::has_rewardscore() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyForceMoveRsp::set_has_rewardscore() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyForceMoveRsp::clear_has_rewardscore() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyForceMoveRsp::clear_rewardscore() {
  rewardscore_ = 0u;
  clear_has_rewardscore();
}
inline ::google::protobuf::uint32 TCrossLevyForceMoveRsp::rewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyForceMoveRsp.RewardScore)
  return rewardscore_;
}
inline void TCrossLevyForceMoveRsp::set_rewardscore(::google::protobuf::uint32 value) {
  set_has_rewardscore();
  rewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyForceMoveRsp.RewardScore)
}

// -------------------------------------------------------------------

// TCrossLevyGetBattleArgsReq

// optional uint32 Id = 1;
inline bool TCrossLevyGetBattleArgsReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetBattleArgsReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetBattleArgsReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetBattleArgsReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TCrossLevyGetBattleArgsReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetBattleArgsReq.Id)
  return id_;
}
inline void TCrossLevyGetBattleArgsReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetBattleArgsReq.Id)
}

// optional .pb.TBattleCheckParam BattleCheckParam = 2;
inline bool TCrossLevyGetBattleArgsReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyGetBattleArgsReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyGetBattleArgsReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyGetBattleArgsReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TCrossLevyGetBattleArgsReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetBattleArgsReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TCrossLevyGetBattleArgsReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetBattleArgsReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TCrossLevyGetBattleArgsReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TCrossLevyGetBattleArgsReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGetBattleArgsReq.BattleCheckParam)
}

// optional uint64 RefreshTime = 3;
inline bool TCrossLevyGetBattleArgsReq::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyGetBattleArgsReq::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyGetBattleArgsReq::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyGetBattleArgsReq::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TCrossLevyGetBattleArgsReq::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetBattleArgsReq.RefreshTime)
  return refreshtime_;
}
inline void TCrossLevyGetBattleArgsReq::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetBattleArgsReq.RefreshTime)
}

// -------------------------------------------------------------------

// TCrossLevyGetBattleArgsRsp

// optional .pb.TBattleArgs BattleArgs = 1;
inline bool TCrossLevyGetBattleArgsRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetBattleArgsRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetBattleArgsRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetBattleArgsRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TCrossLevyGetBattleArgsRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetBattleArgsRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TCrossLevyGetBattleArgsRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetBattleArgsRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TCrossLevyGetBattleArgsRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TCrossLevyGetBattleArgsRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGetBattleArgsRsp.BattleArgs)
}

// -------------------------------------------------------------------

// TCrossLevyReportBattleBossReq

// optional uint32 BossId = 1;
inline bool TCrossLevyReportBattleBossReq::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyReportBattleBossReq::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyReportBattleBossReq::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyReportBattleBossReq::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TCrossLevyReportBattleBossReq::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleBossReq.BossId)
  return bossid_;
}
inline void TCrossLevyReportBattleBossReq::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportBattleBossReq.BossId)
}

// optional uint64 RefreshTime = 2;
inline bool TCrossLevyReportBattleBossReq::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyReportBattleBossReq::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyReportBattleBossReq::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyReportBattleBossReq::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TCrossLevyReportBattleBossReq::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleBossReq.RefreshTime)
  return refreshtime_;
}
inline void TCrossLevyReportBattleBossReq::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportBattleBossReq.RefreshTime)
}

// optional bytes BattleRet = 3;
inline bool TCrossLevyReportBattleBossReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyReportBattleBossReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyReportBattleBossReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyReportBattleBossReq::clear_battleret() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_->clear();
  }
  clear_has_battleret();
}
inline const ::std::string& TCrossLevyReportBattleBossReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleBossReq.BattleRet)
  return *battleret_;
}
inline void TCrossLevyReportBattleBossReq::set_battleret(const ::std::string& value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportBattleBossReq.BattleRet)
}
inline void TCrossLevyReportBattleBossReq::set_battleret(const char* value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossLevyReportBattleBossReq.BattleRet)
}
inline void TCrossLevyReportBattleBossReq::set_battleret(const void* value, size_t size) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossLevyReportBattleBossReq.BattleRet)
}
inline ::std::string* TCrossLevyReportBattleBossReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReportBattleBossReq.BattleRet)
  return battleret_;
}
inline ::std::string* TCrossLevyReportBattleBossReq::release_battleret() {
  clear_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleret_;
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossLevyReportBattleBossReq::set_allocated_battleret(::std::string* battleret) {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (battleret) {
    set_has_battleret();
    battleret_ = battleret;
  } else {
    clear_has_battleret();
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyReportBattleBossReq.BattleRet)
}

// -------------------------------------------------------------------

// TCrossLevyReportBattleBossRsp

// optional uint32 isFinalStrike = 1;
inline bool TCrossLevyReportBattleBossRsp::has_isfinalstrike() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyReportBattleBossRsp::set_has_isfinalstrike() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyReportBattleBossRsp::clear_has_isfinalstrike() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyReportBattleBossRsp::clear_isfinalstrike() {
  isfinalstrike_ = 0u;
  clear_has_isfinalstrike();
}
inline ::google::protobuf::uint32 TCrossLevyReportBattleBossRsp::isfinalstrike() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleBossRsp.isFinalStrike)
  return isfinalstrike_;
}
inline void TCrossLevyReportBattleBossRsp::set_isfinalstrike(::google::protobuf::uint32 value) {
  set_has_isfinalstrike();
  isfinalstrike_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportBattleBossRsp.isFinalStrike)
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TCrossLevyReportBattleBossRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyReportBattleBossRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyReportBattleBossRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleBossRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyReportBattleBossRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReportBattleBossRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyReportBattleBossRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyReportBattleBossRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyReportBattleBossRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyReportBattleBossRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyReportBattleBossRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyReportBattleBossRsp.RewardArr)
  return &rewardarr_;
}

// optional uint64 LastAtkBossTime = 3;
inline bool TCrossLevyReportBattleBossRsp::has_lastatkbosstime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyReportBattleBossRsp::set_has_lastatkbosstime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyReportBattleBossRsp::clear_has_lastatkbosstime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyReportBattleBossRsp::clear_lastatkbosstime() {
  lastatkbosstime_ = GOOGLE_ULONGLONG(0);
  clear_has_lastatkbosstime();
}
inline ::google::protobuf::uint64 TCrossLevyReportBattleBossRsp::lastatkbosstime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleBossRsp.LastAtkBossTime)
  return lastatkbosstime_;
}
inline void TCrossLevyReportBattleBossRsp::set_lastatkbosstime(::google::protobuf::uint64 value) {
  set_has_lastatkbosstime();
  lastatkbosstime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportBattleBossRsp.LastAtkBossTime)
}

// optional uint32 RewardScore = 4;
inline bool TCrossLevyReportBattleBossRsp::has_rewardscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyReportBattleBossRsp::set_has_rewardscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyReportBattleBossRsp::clear_has_rewardscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyReportBattleBossRsp::clear_rewardscore() {
  rewardscore_ = 0u;
  clear_has_rewardscore();
}
inline ::google::protobuf::uint32 TCrossLevyReportBattleBossRsp::rewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleBossRsp.RewardScore)
  return rewardscore_;
}
inline void TCrossLevyReportBattleBossRsp::set_rewardscore(::google::protobuf::uint32 value) {
  set_has_rewardscore();
  rewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportBattleBossRsp.RewardScore)
}

// optional uint64 CurHp = 5;
inline bool TCrossLevyReportBattleBossRsp::has_curhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TCrossLevyReportBattleBossRsp::set_has_curhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TCrossLevyReportBattleBossRsp::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TCrossLevyReportBattleBossRsp::clear_curhp() {
  curhp_ = GOOGLE_ULONGLONG(0);
  clear_has_curhp();
}
inline ::google::protobuf::uint64 TCrossLevyReportBattleBossRsp::curhp() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleBossRsp.CurHp)
  return curhp_;
}
inline void TCrossLevyReportBattleBossRsp::set_curhp(::google::protobuf::uint64 value) {
  set_has_curhp();
  curhp_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportBattleBossRsp.CurHp)
}

// -------------------------------------------------------------------

// TCrossLevyReportBattleMonsterReq

// optional uint32 MonsterId = 1;
inline bool TCrossLevyReportBattleMonsterReq::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyReportBattleMonsterReq::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyReportBattleMonsterReq::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyReportBattleMonsterReq::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 TCrossLevyReportBattleMonsterReq::monsterid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleMonsterReq.MonsterId)
  return monsterid_;
}
inline void TCrossLevyReportBattleMonsterReq::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportBattleMonsterReq.MonsterId)
}

// optional uint64 MonsterRfrTime = 2;
inline bool TCrossLevyReportBattleMonsterReq::has_monsterrfrtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyReportBattleMonsterReq::set_has_monsterrfrtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyReportBattleMonsterReq::clear_has_monsterrfrtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyReportBattleMonsterReq::clear_monsterrfrtime() {
  monsterrfrtime_ = GOOGLE_ULONGLONG(0);
  clear_has_monsterrfrtime();
}
inline ::google::protobuf::uint64 TCrossLevyReportBattleMonsterReq::monsterrfrtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleMonsterReq.MonsterRfrTime)
  return monsterrfrtime_;
}
inline void TCrossLevyReportBattleMonsterReq::set_monsterrfrtime(::google::protobuf::uint64 value) {
  set_has_monsterrfrtime();
  monsterrfrtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportBattleMonsterReq.MonsterRfrTime)
}

// optional bytes BattleRet = 3;
inline bool TCrossLevyReportBattleMonsterReq::has_battleret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyReportBattleMonsterReq::set_has_battleret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyReportBattleMonsterReq::clear_has_battleret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyReportBattleMonsterReq::clear_battleret() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_->clear();
  }
  clear_has_battleret();
}
inline const ::std::string& TCrossLevyReportBattleMonsterReq::battleret() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleMonsterReq.BattleRet)
  return *battleret_;
}
inline void TCrossLevyReportBattleMonsterReq::set_battleret(const ::std::string& value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportBattleMonsterReq.BattleRet)
}
inline void TCrossLevyReportBattleMonsterReq::set_battleret(const char* value) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TCrossLevyReportBattleMonsterReq.BattleRet)
}
inline void TCrossLevyReportBattleMonsterReq::set_battleret(const void* value, size_t size) {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  battleret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TCrossLevyReportBattleMonsterReq.BattleRet)
}
inline ::std::string* TCrossLevyReportBattleMonsterReq::mutable_battleret() {
  set_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReportBattleMonsterReq.BattleRet)
  return battleret_;
}
inline ::std::string* TCrossLevyReportBattleMonsterReq::release_battleret() {
  clear_has_battleret();
  if (battleret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleret_;
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TCrossLevyReportBattleMonsterReq::set_allocated_battleret(::std::string* battleret) {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (battleret) {
    set_has_battleret();
    battleret_ = battleret;
  } else {
    clear_has_battleret();
    battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyReportBattleMonsterReq.BattleRet)
}

// -------------------------------------------------------------------

// TCrossLevyReportBattleMonsterRsp

// optional uint32 RewardScore = 1;
inline bool TCrossLevyReportBattleMonsterRsp::has_rewardscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyReportBattleMonsterRsp::set_has_rewardscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyReportBattleMonsterRsp::clear_has_rewardscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyReportBattleMonsterRsp::clear_rewardscore() {
  rewardscore_ = 0u;
  clear_has_rewardscore();
}
inline ::google::protobuf::uint32 TCrossLevyReportBattleMonsterRsp::rewardscore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleMonsterRsp.RewardScore)
  return rewardscore_;
}
inline void TCrossLevyReportBattleMonsterRsp::set_rewardscore(::google::protobuf::uint32 value) {
  set_has_rewardscore();
  rewardscore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReportBattleMonsterRsp.RewardScore)
}

// repeated .pb.TCrossLevyMonsterArmyHpInfo MonsterArmyHpInfoArr = 2;
inline int TCrossLevyReportBattleMonsterRsp::monsterarmyhpinfoarr_size() const {
  return monsterarmyhpinfoarr_.size();
}
inline void TCrossLevyReportBattleMonsterRsp::clear_monsterarmyhpinfoarr() {
  monsterarmyhpinfoarr_.Clear();
}
inline const ::pb::TCrossLevyMonsterArmyHpInfo& TCrossLevyReportBattleMonsterRsp::monsterarmyhpinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleMonsterRsp.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_.Get(index);
}
inline ::pb::TCrossLevyMonsterArmyHpInfo* TCrossLevyReportBattleMonsterRsp::mutable_monsterarmyhpinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReportBattleMonsterRsp.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_.Mutable(index);
}
inline ::pb::TCrossLevyMonsterArmyHpInfo* TCrossLevyReportBattleMonsterRsp::add_monsterarmyhpinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyReportBattleMonsterRsp.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >&
TCrossLevyReportBattleMonsterRsp::monsterarmyhpinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyReportBattleMonsterRsp.MonsterArmyHpInfoArr)
  return monsterarmyhpinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyMonsterArmyHpInfo >*
TCrossLevyReportBattleMonsterRsp::mutable_monsterarmyhpinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyReportBattleMonsterRsp.MonsterArmyHpInfoArr)
  return &monsterarmyhpinfoarr_;
}

// repeated .pb.TCommonReward RewardArr = 3;
inline int TCrossLevyReportBattleMonsterRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyReportBattleMonsterRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyReportBattleMonsterRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReportBattleMonsterRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyReportBattleMonsterRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReportBattleMonsterRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyReportBattleMonsterRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyReportBattleMonsterRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyReportBattleMonsterRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyReportBattleMonsterRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyReportBattleMonsterRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyReportBattleMonsterRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TCrossLevyGetSelfRecordInfoRsp

// repeated .pb.TCrossLevySelfRecordInfo RecordArr = 1;
inline int TCrossLevyGetSelfRecordInfoRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TCrossLevyGetSelfRecordInfoRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TCrossLevySelfRecordInfo& TCrossLevyGetSelfRecordInfoRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetSelfRecordInfoRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TCrossLevySelfRecordInfo* TCrossLevyGetSelfRecordInfoRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetSelfRecordInfoRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TCrossLevySelfRecordInfo* TCrossLevyGetSelfRecordInfoRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetSelfRecordInfoRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevySelfRecordInfo >&
TCrossLevyGetSelfRecordInfoRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetSelfRecordInfoRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevySelfRecordInfo >*
TCrossLevyGetSelfRecordInfoRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetSelfRecordInfoRsp.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TCrossLevyGetRecordResultInfoReq

// optional uint32 RecordResultId = 1;
inline bool TCrossLevyGetRecordResultInfoReq::has_recordresultid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetRecordResultInfoReq::set_has_recordresultid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetRecordResultInfoReq::clear_has_recordresultid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetRecordResultInfoReq::clear_recordresultid() {
  recordresultid_ = 0u;
  clear_has_recordresultid();
}
inline ::google::protobuf::uint32 TCrossLevyGetRecordResultInfoReq::recordresultid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetRecordResultInfoReq.RecordResultId)
  return recordresultid_;
}
inline void TCrossLevyGetRecordResultInfoReq::set_recordresultid(::google::protobuf::uint32 value) {
  set_has_recordresultid();
  recordresultid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetRecordResultInfoReq.RecordResultId)
}

// -------------------------------------------------------------------

// TCrossLevyGetRecordResultInfoRsp

// optional bool IsAtkWin = 1;
inline bool TCrossLevyGetRecordResultInfoRsp::has_isatkwin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetRecordResultInfoRsp::set_has_isatkwin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetRecordResultInfoRsp::clear_has_isatkwin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetRecordResultInfoRsp::clear_isatkwin() {
  isatkwin_ = false;
  clear_has_isatkwin();
}
inline bool TCrossLevyGetRecordResultInfoRsp::isatkwin() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetRecordResultInfoRsp.IsAtkWin)
  return isatkwin_;
}
inline void TCrossLevyGetRecordResultInfoRsp::set_isatkwin(bool value) {
  set_has_isatkwin();
  isatkwin_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetRecordResultInfoRsp.IsAtkWin)
}

// optional .pb.TUserSimpleInfo AtkUserInfo = 2;
inline bool TCrossLevyGetRecordResultInfoRsp::has_atkuserinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyGetRecordResultInfoRsp::set_has_atkuserinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyGetRecordResultInfoRsp::clear_has_atkuserinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyGetRecordResultInfoRsp::clear_atkuserinfo() {
  if (atkuserinfo_ != NULL) atkuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_atkuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyGetRecordResultInfoRsp::atkuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetRecordResultInfoRsp.AtkUserInfo)
  return atkuserinfo_ != NULL ? *atkuserinfo_ : *default_instance_->atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyGetRecordResultInfoRsp::mutable_atkuserinfo() {
  set_has_atkuserinfo();
  if (atkuserinfo_ == NULL) atkuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetRecordResultInfoRsp.AtkUserInfo)
  return atkuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyGetRecordResultInfoRsp::release_atkuserinfo() {
  clear_has_atkuserinfo();
  ::pb::TUserSimpleInfo* temp = atkuserinfo_;
  atkuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevyGetRecordResultInfoRsp::set_allocated_atkuserinfo(::pb::TUserSimpleInfo* atkuserinfo) {
  delete atkuserinfo_;
  atkuserinfo_ = atkuserinfo;
  if (atkuserinfo) {
    set_has_atkuserinfo();
  } else {
    clear_has_atkuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGetRecordResultInfoRsp.AtkUserInfo)
}

// optional .pb.TUserSimpleInfo DefUserInfo = 3;
inline bool TCrossLevyGetRecordResultInfoRsp::has_defuserinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyGetRecordResultInfoRsp::set_has_defuserinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyGetRecordResultInfoRsp::clear_has_defuserinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyGetRecordResultInfoRsp::clear_defuserinfo() {
  if (defuserinfo_ != NULL) defuserinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_defuserinfo();
}
inline const ::pb::TUserSimpleInfo& TCrossLevyGetRecordResultInfoRsp::defuserinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetRecordResultInfoRsp.DefUserInfo)
  return defuserinfo_ != NULL ? *defuserinfo_ : *default_instance_->defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyGetRecordResultInfoRsp::mutable_defuserinfo() {
  set_has_defuserinfo();
  if (defuserinfo_ == NULL) defuserinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetRecordResultInfoRsp.DefUserInfo)
  return defuserinfo_;
}
inline ::pb::TUserSimpleInfo* TCrossLevyGetRecordResultInfoRsp::release_defuserinfo() {
  clear_has_defuserinfo();
  ::pb::TUserSimpleInfo* temp = defuserinfo_;
  defuserinfo_ = NULL;
  return temp;
}
inline void TCrossLevyGetRecordResultInfoRsp::set_allocated_defuserinfo(::pb::TUserSimpleInfo* defuserinfo) {
  delete defuserinfo_;
  defuserinfo_ = defuserinfo;
  if (defuserinfo) {
    set_has_defuserinfo();
  } else {
    clear_has_defuserinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyGetRecordResultInfoRsp.DefUserInfo)
}

// repeated .pb.TCrossLevyUserRecordViewInfo RecordArr = 4;
inline int TCrossLevyGetRecordResultInfoRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TCrossLevyGetRecordResultInfoRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TCrossLevyUserRecordViewInfo& TCrossLevyGetRecordResultInfoRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetRecordResultInfoRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TCrossLevyUserRecordViewInfo* TCrossLevyGetRecordResultInfoRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetRecordResultInfoRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TCrossLevyUserRecordViewInfo* TCrossLevyGetRecordResultInfoRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetRecordResultInfoRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >&
TCrossLevyGetRecordResultInfoRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetRecordResultInfoRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyUserRecordViewInfo >*
TCrossLevyGetRecordResultInfoRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetRecordResultInfoRsp.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TCrossLevyReceiveScoreRewardReq

// optional uint32 Id = 1;
inline bool TCrossLevyReceiveScoreRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyReceiveScoreRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyReceiveScoreRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyReceiveScoreRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TCrossLevyReceiveScoreRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReceiveScoreRewardReq.Id)
  return id_;
}
inline void TCrossLevyReceiveScoreRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReceiveScoreRewardReq.Id)
}

// -------------------------------------------------------------------

// TCrossLevyReceiveScoreRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TCrossLevyReceiveScoreRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyReceiveScoreRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyReceiveScoreRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReceiveScoreRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyReceiveScoreRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReceiveScoreRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyReceiveScoreRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyReceiveScoreRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyReceiveScoreRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyReceiveScoreRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyReceiveScoreRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyReceiveScoreRewardRsp.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TCrossLevyGetGuildUserListRsp

// repeated .pb.TCrossLevyGuildUserInfo GuildUserArr = 1;
inline int TCrossLevyGetGuildUserListRsp::guilduserarr_size() const {
  return guilduserarr_.size();
}
inline void TCrossLevyGetGuildUserListRsp::clear_guilduserarr() {
  guilduserarr_.Clear();
}
inline const ::pb::TCrossLevyGuildUserInfo& TCrossLevyGetGuildUserListRsp::guilduserarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetGuildUserListRsp.GuildUserArr)
  return guilduserarr_.Get(index);
}
inline ::pb::TCrossLevyGuildUserInfo* TCrossLevyGetGuildUserListRsp::mutable_guilduserarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetGuildUserListRsp.GuildUserArr)
  return guilduserarr_.Mutable(index);
}
inline ::pb::TCrossLevyGuildUserInfo* TCrossLevyGetGuildUserListRsp::add_guilduserarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetGuildUserListRsp.GuildUserArr)
  return guilduserarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyGuildUserInfo >&
TCrossLevyGetGuildUserListRsp::guilduserarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetGuildUserListRsp.GuildUserArr)
  return guilduserarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyGuildUserInfo >*
TCrossLevyGetGuildUserListRsp::mutable_guilduserarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetGuildUserListRsp.GuildUserArr)
  return &guilduserarr_;
}

// -------------------------------------------------------------------

// TCrossLevyReceiveSettleRewardReq

// optional uint32 CityId = 1;
inline bool TCrossLevyReceiveSettleRewardReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyReceiveSettleRewardReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyReceiveSettleRewardReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyReceiveSettleRewardReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyReceiveSettleRewardReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReceiveSettleRewardReq.CityId)
  return cityid_;
}
inline void TCrossLevyReceiveSettleRewardReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReceiveSettleRewardReq.CityId)
}

// optional uint32 CampId = 2;
inline bool TCrossLevyReceiveSettleRewardReq::has_campid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyReceiveSettleRewardReq::set_has_campid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyReceiveSettleRewardReq::clear_has_campid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyReceiveSettleRewardReq::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 TCrossLevyReceiveSettleRewardReq::campid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReceiveSettleRewardReq.CampId)
  return campid_;
}
inline void TCrossLevyReceiveSettleRewardReq::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReceiveSettleRewardReq.CampId)
}

// -------------------------------------------------------------------

// TCrossLevyReceiveSettleRewardRsp

// repeated .pb.TCommonReward RewardArr = 1;
inline int TCrossLevyReceiveSettleRewardRsp::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TCrossLevyReceiveSettleRewardRsp::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TCrossLevyReceiveSettleRewardRsp::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReceiveSettleRewardRsp.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TCrossLevyReceiveSettleRewardRsp::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReceiveSettleRewardRsp.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TCrossLevyReceiveSettleRewardRsp::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyReceiveSettleRewardRsp.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TCrossLevyReceiveSettleRewardRsp::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyReceiveSettleRewardRsp.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TCrossLevyReceiveSettleRewardRsp::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyReceiveSettleRewardRsp.RewardArr)
  return &rewardarr_;
}

// optional uint32 SettleScore = 2;
inline bool TCrossLevyReceiveSettleRewardRsp::has_settlescore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyReceiveSettleRewardRsp::set_has_settlescore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyReceiveSettleRewardRsp::clear_has_settlescore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyReceiveSettleRewardRsp::clear_settlescore() {
  settlescore_ = 0u;
  clear_has_settlescore();
}
inline ::google::protobuf::uint32 TCrossLevyReceiveSettleRewardRsp::settlescore() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReceiveSettleRewardRsp.SettleScore)
  return settlescore_;
}
inline void TCrossLevyReceiveSettleRewardRsp::set_settlescore(::google::protobuf::uint32 value) {
  set_has_settlescore();
  settlescore_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyReceiveSettleRewardRsp.SettleScore)
}

// repeated .pb.TCrossLevyRecordInfo RecordArr = 3;
inline int TCrossLevyReceiveSettleRewardRsp::recordarr_size() const {
  return recordarr_.size();
}
inline void TCrossLevyReceiveSettleRewardRsp::clear_recordarr() {
  recordarr_.Clear();
}
inline const ::pb::TCrossLevyRecordInfo& TCrossLevyReceiveSettleRewardRsp::recordarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyReceiveSettleRewardRsp.RecordArr)
  return recordarr_.Get(index);
}
inline ::pb::TCrossLevyRecordInfo* TCrossLevyReceiveSettleRewardRsp::mutable_recordarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyReceiveSettleRewardRsp.RecordArr)
  return recordarr_.Mutable(index);
}
inline ::pb::TCrossLevyRecordInfo* TCrossLevyReceiveSettleRewardRsp::add_recordarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyReceiveSettleRewardRsp.RecordArr)
  return recordarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyRecordInfo >&
TCrossLevyReceiveSettleRewardRsp::recordarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyReceiveSettleRewardRsp.RecordArr)
  return recordarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyRecordInfo >*
TCrossLevyReceiveSettleRewardRsp::mutable_recordarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyReceiveSettleRewardRsp.RecordArr)
  return &recordarr_;
}

// -------------------------------------------------------------------

// TCrossLevyBuyChallengeNumReq

// optional uint32 Num = 1;
inline bool TCrossLevyBuyChallengeNumReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyBuyChallengeNumReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyBuyChallengeNumReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyBuyChallengeNumReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TCrossLevyBuyChallengeNumReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBuyChallengeNumReq.Num)
  return num_;
}
inline void TCrossLevyBuyChallengeNumReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBuyChallengeNumReq.Num)
}

// -------------------------------------------------------------------

// TCrossLevyGetEnemyListRsp

// repeated .pb.TCrossLevyEnemyInfo EnemyList = 1;
inline int TCrossLevyGetEnemyListRsp::enemylist_size() const {
  return enemylist_.size();
}
inline void TCrossLevyGetEnemyListRsp::clear_enemylist() {
  enemylist_.Clear();
}
inline const ::pb::TCrossLevyEnemyInfo& TCrossLevyGetEnemyListRsp::enemylist(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetEnemyListRsp.EnemyList)
  return enemylist_.Get(index);
}
inline ::pb::TCrossLevyEnemyInfo* TCrossLevyGetEnemyListRsp::mutable_enemylist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetEnemyListRsp.EnemyList)
  return enemylist_.Mutable(index);
}
inline ::pb::TCrossLevyEnemyInfo* TCrossLevyGetEnemyListRsp::add_enemylist() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetEnemyListRsp.EnemyList)
  return enemylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyInfo >&
TCrossLevyGetEnemyListRsp::enemylist() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetEnemyListRsp.EnemyList)
  return enemylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyInfo >*
TCrossLevyGetEnemyListRsp::mutable_enemylist() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetEnemyListRsp.EnemyList)
  return &enemylist_;
}

// -------------------------------------------------------------------

// TCrossLevyRemoveEnemyReq

// optional uint64 Uid = 1;
inline bool TCrossLevyRemoveEnemyReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyRemoveEnemyReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyRemoveEnemyReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyRemoveEnemyReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossLevyRemoveEnemyReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyRemoveEnemyReq.Uid)
  return uid_;
}
inline void TCrossLevyRemoveEnemyReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyRemoveEnemyReq.Uid)
}

// -------------------------------------------------------------------

// TCrossLevyGetEnemyCampListReq

// optional uint64 Uid = 1;
inline bool TCrossLevyGetEnemyCampListReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyGetEnemyCampListReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyGetEnemyCampListReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyGetEnemyCampListReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TCrossLevyGetEnemyCampListReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetEnemyCampListReq.Uid)
  return uid_;
}
inline void TCrossLevyGetEnemyCampListReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyGetEnemyCampListReq.Uid)
}

// -------------------------------------------------------------------

// TCrossLevyGetEnemyCampListRsp

// repeated .pb.TCrossLevyEnemyCampInfo EnemyCampList = 1;
inline int TCrossLevyGetEnemyCampListRsp::enemycamplist_size() const {
  return enemycamplist_.size();
}
inline void TCrossLevyGetEnemyCampListRsp::clear_enemycamplist() {
  enemycamplist_.Clear();
}
inline const ::pb::TCrossLevyEnemyCampInfo& TCrossLevyGetEnemyCampListRsp::enemycamplist(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyGetEnemyCampListRsp.EnemyCampList)
  return enemycamplist_.Get(index);
}
inline ::pb::TCrossLevyEnemyCampInfo* TCrossLevyGetEnemyCampListRsp::mutable_enemycamplist(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyGetEnemyCampListRsp.EnemyCampList)
  return enemycamplist_.Mutable(index);
}
inline ::pb::TCrossLevyEnemyCampInfo* TCrossLevyGetEnemyCampListRsp::add_enemycamplist() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyGetEnemyCampListRsp.EnemyCampList)
  return enemycamplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyCampInfo >&
TCrossLevyGetEnemyCampListRsp::enemycamplist() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyGetEnemyCampListRsp.EnemyCampList)
  return enemycamplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyEnemyCampInfo >*
TCrossLevyGetEnemyCampListRsp::mutable_enemycamplist() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyGetEnemyCampListRsp.EnemyCampList)
  return &enemycamplist_;
}

// -------------------------------------------------------------------

// TCrossLevyUserBeMovedNotify

// optional uint32 OriCityId = 1;
inline bool TCrossLevyUserBeMovedNotify::has_oricityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyUserBeMovedNotify::set_has_oricityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyUserBeMovedNotify::clear_has_oricityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyUserBeMovedNotify::clear_oricityid() {
  oricityid_ = 0u;
  clear_has_oricityid();
}
inline ::google::protobuf::uint32 TCrossLevyUserBeMovedNotify::oricityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyUserBeMovedNotify.OriCityId)
  return oricityid_;
}
inline void TCrossLevyUserBeMovedNotify::set_oricityid(::google::protobuf::uint32 value) {
  set_has_oricityid();
  oricityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyUserBeMovedNotify.OriCityId)
}

// optional uint32 OriCampId = 2;
inline bool TCrossLevyUserBeMovedNotify::has_oricampid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyUserBeMovedNotify::set_has_oricampid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyUserBeMovedNotify::clear_has_oricampid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyUserBeMovedNotify::clear_oricampid() {
  oricampid_ = 0u;
  clear_has_oricampid();
}
inline ::google::protobuf::uint32 TCrossLevyUserBeMovedNotify::oricampid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyUserBeMovedNotify.OriCampId)
  return oricampid_;
}
inline void TCrossLevyUserBeMovedNotify::set_oricampid(::google::protobuf::uint32 value) {
  set_has_oricampid();
  oricampid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyUserBeMovedNotify.OriCampId)
}

// optional uint32 CurCityId = 3;
inline bool TCrossLevyUserBeMovedNotify::has_curcityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TCrossLevyUserBeMovedNotify::set_has_curcityid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TCrossLevyUserBeMovedNotify::clear_has_curcityid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TCrossLevyUserBeMovedNotify::clear_curcityid() {
  curcityid_ = 0u;
  clear_has_curcityid();
}
inline ::google::protobuf::uint32 TCrossLevyUserBeMovedNotify::curcityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyUserBeMovedNotify.CurCityId)
  return curcityid_;
}
inline void TCrossLevyUserBeMovedNotify::set_curcityid(::google::protobuf::uint32 value) {
  set_has_curcityid();
  curcityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyUserBeMovedNotify.CurCityId)
}

// optional uint32 CurCampId = 4;
inline bool TCrossLevyUserBeMovedNotify::has_curcampid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TCrossLevyUserBeMovedNotify::set_has_curcampid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TCrossLevyUserBeMovedNotify::clear_has_curcampid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TCrossLevyUserBeMovedNotify::clear_curcampid() {
  curcampid_ = 0u;
  clear_has_curcampid();
}
inline ::google::protobuf::uint32 TCrossLevyUserBeMovedNotify::curcampid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyUserBeMovedNotify.CurCampId)
  return curcampid_;
}
inline void TCrossLevyUserBeMovedNotify::set_curcampid(::google::protobuf::uint32 value) {
  set_has_curcampid();
  curcampid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyUserBeMovedNotify.CurCampId)
}

// -------------------------------------------------------------------

// TCrossLevyCityUserNumInfo

// optional uint32 CityId = 1;
inline bool TCrossLevyCityUserNumInfo::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyCityUserNumInfo::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyCityUserNumInfo::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyCityUserNumInfo::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyCityUserNumInfo::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCityUserNumInfo.CityId)
  return cityid_;
}
inline void TCrossLevyCityUserNumInfo::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCityUserNumInfo.CityId)
}

// optional uint32 UserNum = 2;
inline bool TCrossLevyCityUserNumInfo::has_usernum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyCityUserNumInfo::set_has_usernum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyCityUserNumInfo::clear_has_usernum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyCityUserNumInfo::clear_usernum() {
  usernum_ = 0u;
  clear_has_usernum();
}
inline ::google::protobuf::uint32 TCrossLevyCityUserNumInfo::usernum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCityUserNumInfo.UserNum)
  return usernum_;
}
inline void TCrossLevyCityUserNumInfo::set_usernum(::google::protobuf::uint32 value) {
  set_has_usernum();
  usernum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCityUserNumInfo.UserNum)
}

// -------------------------------------------------------------------

// TCrossLevyCityUserNumNotify

// repeated .pb.TCrossLevyCityUserNumInfo CityUserNumInfoArr = 1;
inline int TCrossLevyCityUserNumNotify::cityusernuminfoarr_size() const {
  return cityusernuminfoarr_.size();
}
inline void TCrossLevyCityUserNumNotify::clear_cityusernuminfoarr() {
  cityusernuminfoarr_.Clear();
}
inline const ::pb::TCrossLevyCityUserNumInfo& TCrossLevyCityUserNumNotify::cityusernuminfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCityUserNumNotify.CityUserNumInfoArr)
  return cityusernuminfoarr_.Get(index);
}
inline ::pb::TCrossLevyCityUserNumInfo* TCrossLevyCityUserNumNotify::mutable_cityusernuminfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyCityUserNumNotify.CityUserNumInfoArr)
  return cityusernuminfoarr_.Mutable(index);
}
inline ::pb::TCrossLevyCityUserNumInfo* TCrossLevyCityUserNumNotify::add_cityusernuminfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyCityUserNumNotify.CityUserNumInfoArr)
  return cityusernuminfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityUserNumInfo >&
TCrossLevyCityUserNumNotify::cityusernuminfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyCityUserNumNotify.CityUserNumInfoArr)
  return cityusernuminfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityUserNumInfo >*
TCrossLevyCityUserNumNotify::mutable_cityusernuminfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyCityUserNumNotify.CityUserNumInfoArr)
  return &cityusernuminfoarr_;
}

// -------------------------------------------------------------------

// TCrossLevyCityCampNumInfo

// optional uint32 CityId = 1;
inline bool TCrossLevyCityCampNumInfo::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyCityCampNumInfo::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyCityCampNumInfo::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyCityCampNumInfo::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TCrossLevyCityCampNumInfo::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCityCampNumInfo.CityId)
  return cityid_;
}
inline void TCrossLevyCityCampNumInfo::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCityCampNumInfo.CityId)
}

// optional uint32 CampNum = 2;
inline bool TCrossLevyCityCampNumInfo::has_campnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyCityCampNumInfo::set_has_campnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyCityCampNumInfo::clear_has_campnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyCityCampNumInfo::clear_campnum() {
  campnum_ = 0u;
  clear_has_campnum();
}
inline ::google::protobuf::uint32 TCrossLevyCityCampNumInfo::campnum() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCityCampNumInfo.CampNum)
  return campnum_;
}
inline void TCrossLevyCityCampNumInfo::set_campnum(::google::protobuf::uint32 value) {
  set_has_campnum();
  campnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyCityCampNumInfo.CampNum)
}

// -------------------------------------------------------------------

// TCrossLevyCityCampNumNotify

// repeated .pb.TCrossLevyCityCampNumInfo CityCampNumInfoArr = 1;
inline int TCrossLevyCityCampNumNotify::citycampnuminfoarr_size() const {
  return citycampnuminfoarr_.size();
}
inline void TCrossLevyCityCampNumNotify::clear_citycampnuminfoarr() {
  citycampnuminfoarr_.Clear();
}
inline const ::pb::TCrossLevyCityCampNumInfo& TCrossLevyCityCampNumNotify::citycampnuminfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyCityCampNumNotify.CityCampNumInfoArr)
  return citycampnuminfoarr_.Get(index);
}
inline ::pb::TCrossLevyCityCampNumInfo* TCrossLevyCityCampNumNotify::mutable_citycampnuminfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyCityCampNumNotify.CityCampNumInfoArr)
  return citycampnuminfoarr_.Mutable(index);
}
inline ::pb::TCrossLevyCityCampNumInfo* TCrossLevyCityCampNumNotify::add_citycampnuminfoarr() {
  // @@protoc_insertion_point(field_add:pb.TCrossLevyCityCampNumNotify.CityCampNumInfoArr)
  return citycampnuminfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityCampNumInfo >&
TCrossLevyCityCampNumNotify::citycampnuminfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TCrossLevyCityCampNumNotify.CityCampNumInfoArr)
  return citycampnuminfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCrossLevyCityCampNumInfo >*
TCrossLevyCityCampNumNotify::mutable_citycampnuminfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TCrossLevyCityCampNumNotify.CityCampNumInfoArr)
  return &citycampnuminfoarr_;
}

// -------------------------------------------------------------------

// TCrossLevyBossBeKilledNotify

// optional uint32 BossId = 1;
inline bool TCrossLevyBossBeKilledNotify::has_bossid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyBossBeKilledNotify::set_has_bossid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyBossBeKilledNotify::clear_has_bossid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyBossBeKilledNotify::clear_bossid() {
  bossid_ = 0u;
  clear_has_bossid();
}
inline ::google::protobuf::uint32 TCrossLevyBossBeKilledNotify::bossid() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossBeKilledNotify.BossId)
  return bossid_;
}
inline void TCrossLevyBossBeKilledNotify::set_bossid(::google::protobuf::uint32 value) {
  set_has_bossid();
  bossid_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossBeKilledNotify.BossId)
}

// optional uint64 RefreshTime = 2;
inline bool TCrossLevyBossBeKilledNotify::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TCrossLevyBossBeKilledNotify::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TCrossLevyBossBeKilledNotify::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TCrossLevyBossBeKilledNotify::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TCrossLevyBossBeKilledNotify::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyBossBeKilledNotify.RefreshTime)
  return refreshtime_;
}
inline void TCrossLevyBossBeKilledNotify::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TCrossLevyBossBeKilledNotify.RefreshTime)
}

// -------------------------------------------------------------------

// TCrossLevyRecordNotify

// optional .pb.TCrossLevyRecordInfo RecordInfo = 1;
inline bool TCrossLevyRecordNotify::has_recordinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TCrossLevyRecordNotify::set_has_recordinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TCrossLevyRecordNotify::clear_has_recordinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TCrossLevyRecordNotify::clear_recordinfo() {
  if (recordinfo_ != NULL) recordinfo_->::pb::TCrossLevyRecordInfo::Clear();
  clear_has_recordinfo();
}
inline const ::pb::TCrossLevyRecordInfo& TCrossLevyRecordNotify::recordinfo() const {
  // @@protoc_insertion_point(field_get:pb.TCrossLevyRecordNotify.RecordInfo)
  return recordinfo_ != NULL ? *recordinfo_ : *default_instance_->recordinfo_;
}
inline ::pb::TCrossLevyRecordInfo* TCrossLevyRecordNotify::mutable_recordinfo() {
  set_has_recordinfo();
  if (recordinfo_ == NULL) recordinfo_ = new ::pb::TCrossLevyRecordInfo;
  // @@protoc_insertion_point(field_mutable:pb.TCrossLevyRecordNotify.RecordInfo)
  return recordinfo_;
}
inline ::pb::TCrossLevyRecordInfo* TCrossLevyRecordNotify::release_recordinfo() {
  clear_has_recordinfo();
  ::pb::TCrossLevyRecordInfo* temp = recordinfo_;
  recordinfo_ = NULL;
  return temp;
}
inline void TCrossLevyRecordNotify::set_allocated_recordinfo(::pb::TCrossLevyRecordInfo* recordinfo) {
  delete recordinfo_;
  recordinfo_ = recordinfo;
  if (recordinfo) {
    set_has_recordinfo();
  } else {
    clear_has_recordinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TCrossLevyRecordNotify.RecordInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::ECrossLevyRecordType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::ECrossLevyRecordType>() {
  return ::pb::ECrossLevyRecordType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCrossLevy_2eproto__INCLUDED
