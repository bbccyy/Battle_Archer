// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActRotaryDraw.proto

#ifndef PROTOBUF_net_2fActRotaryDraw_2eproto__INCLUDED
#define PROTOBUF_net_2fActRotaryDraw_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
void protobuf_AssignDesc_net_2fActRotaryDraw_2eproto();
void protobuf_ShutdownFile_net_2fActRotaryDraw_2eproto();

class TActRotaryDrawGiftBagPurchaseInfo;
class TActRotaryDrawInfoRsp;
class TActRotaryDrawLuckyDrawReq;
class TActRotaryDrawLuckyDrawRsp;
class TActRotaryDrawLuckyDrawInfo;
class TActRotaryDrawGetGiftReq;
class TActRotaryDrawNotify;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TActRotaryDrawGiftBagPurchaseInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRotaryDraw.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRotaryDrawGiftBagPurchaseInfo : public ::google::protobuf::Message {
 public:
  TActRotaryDrawGiftBagPurchaseInfo();
  virtual ~TActRotaryDrawGiftBagPurchaseInfo();

  TActRotaryDrawGiftBagPurchaseInfo(const TActRotaryDrawGiftBagPurchaseInfo& from);

  inline TActRotaryDrawGiftBagPurchaseInfo& operator=(const TActRotaryDrawGiftBagPurchaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRotaryDrawGiftBagPurchaseInfo& default_instance();

  void Swap(TActRotaryDrawGiftBagPurchaseInfo* other);

  // implements Message ----------------------------------------------

  TActRotaryDrawGiftBagPurchaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRotaryDrawGiftBagPurchaseInfo& from);
  void MergeFrom(const TActRotaryDrawGiftBagPurchaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawGiftBagPurchaseInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 BuyNum = 2;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawGiftBagPurchaseInfo</name>
  	<Function>
  		<name>buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_buynum</name>
  		<replaceName>BuyNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActRotaryDrawGiftBagPurchaseInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 buynum_;
  friend void  protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_AssignDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRotaryDraw_2eproto();

  void InitAsDefaultInstance();
  static TActRotaryDrawGiftBagPurchaseInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRotaryDrawInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRotaryDraw.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRotaryDrawInfoRsp : public ::google::protobuf::Message {
 public:
  TActRotaryDrawInfoRsp();
  virtual ~TActRotaryDrawInfoRsp();

  TActRotaryDrawInfoRsp(const TActRotaryDrawInfoRsp& from);

  inline TActRotaryDrawInfoRsp& operator=(const TActRotaryDrawInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRotaryDrawInfoRsp& default_instance();

  void Swap(TActRotaryDrawInfoRsp* other);

  // implements Message ----------------------------------------------

  TActRotaryDrawInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRotaryDrawInfoRsp& from);
  void MergeFrom(const TActRotaryDrawInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 DailyDrawNum = 1;
  inline bool has_dailydrawnum() const;
  inline void clear_dailydrawnum();
  static const int kDailyDrawNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawInfoRsp</name>
  	<Function>
  		<name>dailydrawnum</name>
  		<replaceName>DailyDrawNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_dailydrawnum</name>
  		<replaceName>DailyDrawNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_dailydrawnum</name>
  		<replaceName>DailyDrawNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 dailydrawnum() const;
  inline void set_dailydrawnum(::google::protobuf::uint32 value);

  // optional uint32 TotalDrawNum = 2;
  inline bool has_totaldrawnum() const;
  inline void clear_totaldrawnum();
  static const int kTotalDrawNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawInfoRsp</name>
  	<Function>
  		<name>totaldrawnum</name>
  		<replaceName>TotalDrawNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_totaldrawnum</name>
  		<replaceName>TotalDrawNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_totaldrawnum</name>
  		<replaceName>TotalDrawNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 totaldrawnum() const;
  inline void set_totaldrawnum(::google::protobuf::uint32 value);

  // repeated uint32 RewardIdArr = 3;
  inline int rewardidarr_size() const;
  inline void clear_rewardidarr();
  static const int kRewardIdArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawInfoRsp</name>
  	<Function>
  		<name>rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardidarr</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardidarr_size</name>
  		<replaceName>RewardIdArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rewardidarr(int index) const;
  inline void set_rewardidarr(int index, ::google::protobuf::uint32 value);
  inline void add_rewardidarr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardidarr();

  // optional uint32 UsedFreeNum = 4;
  inline bool has_usedfreenum() const;
  inline void clear_usedfreenum();
  static const int kUsedFreeNumFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawInfoRsp</name>
  	<Function>
  		<name>usedfreenum</name>
  		<replaceName>UsedFreeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_usedfreenum</name>
  		<replaceName>UsedFreeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_usedfreenum</name>
  		<replaceName>UsedFreeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 usedfreenum() const;
  inline void set_usedfreenum(::google::protobuf::uint32 value);

  // repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 5;
  inline int giftbagpurchaseinfoarr_size() const;
  inline void clear_giftbagpurchaseinfoarr();
  static const int kGiftBagPurchaseInfoArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawInfoRsp</name>
  	<Function>
  		<name>giftbagpurchaseinfoarr</name>
  		<replaceName>GiftBagPurchaseInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_giftbagpurchaseinfoarr</name>
  		<replaceName>GiftBagPurchaseInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_giftbagpurchaseinfoarr</name>
  		<replaceName>GiftBagPurchaseInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_giftbagpurchaseinfoarr</name>
  		<replaceName>GiftBagPurchaseInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>giftbagpurchaseinfoarr_size</name>
  		<replaceName>GiftBagPurchaseInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActRotaryDrawGiftBagPurchaseInfo& giftbagpurchaseinfoarr(int index) const;
  inline ::pb::TActRotaryDrawGiftBagPurchaseInfo* mutable_giftbagpurchaseinfoarr(int index);
  inline ::pb::TActRotaryDrawGiftBagPurchaseInfo* add_giftbagpurchaseinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawGiftBagPurchaseInfo >&
      giftbagpurchaseinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawGiftBagPurchaseInfo >*
      mutable_giftbagpurchaseinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TActRotaryDrawInfoRsp)
 private:
  inline void set_has_dailydrawnum();
  inline void clear_has_dailydrawnum();
  inline void set_has_totaldrawnum();
  inline void clear_has_totaldrawnum();
  inline void set_has_usedfreenum();
  inline void clear_has_usedfreenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 dailydrawnum_;
  ::google::protobuf::uint32 totaldrawnum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardidarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawGiftBagPurchaseInfo > giftbagpurchaseinfoarr_;
  ::google::protobuf::uint32 usedfreenum_;
  friend void  protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_AssignDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRotaryDraw_2eproto();

  void InitAsDefaultInstance();
  static TActRotaryDrawInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRotaryDrawLuckyDrawReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRotaryDraw.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRotaryDrawLuckyDrawReq : public ::google::protobuf::Message {
 public:
  TActRotaryDrawLuckyDrawReq();
  virtual ~TActRotaryDrawLuckyDrawReq();

  TActRotaryDrawLuckyDrawReq(const TActRotaryDrawLuckyDrawReq& from);

  inline TActRotaryDrawLuckyDrawReq& operator=(const TActRotaryDrawLuckyDrawReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRotaryDrawLuckyDrawReq& default_instance();

  void Swap(TActRotaryDrawLuckyDrawReq* other);

  // implements Message ----------------------------------------------

  TActRotaryDrawLuckyDrawReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRotaryDrawLuckyDrawReq& from);
  void MergeFrom(const TActRotaryDrawLuckyDrawReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawLuckyDrawReq</name>
  	<Function>
  		<name>num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>Num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActRotaryDrawLuckyDrawReq)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 num_;
  friend void  protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_AssignDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRotaryDraw_2eproto();

  void InitAsDefaultInstance();
  static TActRotaryDrawLuckyDrawReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRotaryDrawLuckyDrawRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRotaryDraw.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRotaryDrawLuckyDrawRsp : public ::google::protobuf::Message {
 public:
  TActRotaryDrawLuckyDrawRsp();
  virtual ~TActRotaryDrawLuckyDrawRsp();

  TActRotaryDrawLuckyDrawRsp(const TActRotaryDrawLuckyDrawRsp& from);

  inline TActRotaryDrawLuckyDrawRsp& operator=(const TActRotaryDrawLuckyDrawRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRotaryDrawLuckyDrawRsp& default_instance();

  void Swap(TActRotaryDrawLuckyDrawRsp* other);

  // implements Message ----------------------------------------------

  TActRotaryDrawLuckyDrawRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRotaryDrawLuckyDrawRsp& from);
  void MergeFrom(const TActRotaryDrawLuckyDrawRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActRotaryDrawLuckyDrawInfo InfoArr = 1;
  inline int infoarr_size() const;
  inline void clear_infoarr();
  static const int kInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawLuckyDrawRsp</name>
  	<Function>
  		<name>infoarr</name>
  		<replaceName>InfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_infoarr</name>
  		<replaceName>InfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_infoarr</name>
  		<replaceName>InfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_infoarr</name>
  		<replaceName>InfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>infoarr_size</name>
  		<replaceName>InfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActRotaryDrawLuckyDrawInfo& infoarr(int index) const;
  inline ::pb::TActRotaryDrawLuckyDrawInfo* mutable_infoarr(int index);
  inline ::pb::TActRotaryDrawLuckyDrawInfo* add_infoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawLuckyDrawInfo >&
      infoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawLuckyDrawInfo >*
      mutable_infoarr();

  // @@protoc_insertion_point(class_scope:pb.TActRotaryDrawLuckyDrawRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawLuckyDrawInfo > infoarr_;
  friend void  protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_AssignDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRotaryDraw_2eproto();

  void InitAsDefaultInstance();
  static TActRotaryDrawLuckyDrawRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRotaryDrawLuckyDrawInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRotaryDraw.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRotaryDrawLuckyDrawInfo : public ::google::protobuf::Message {
 public:
  TActRotaryDrawLuckyDrawInfo();
  virtual ~TActRotaryDrawLuckyDrawInfo();

  TActRotaryDrawLuckyDrawInfo(const TActRotaryDrawLuckyDrawInfo& from);

  inline TActRotaryDrawLuckyDrawInfo& operator=(const TActRotaryDrawLuckyDrawInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRotaryDrawLuckyDrawInfo& default_instance();

  void Swap(TActRotaryDrawLuckyDrawInfo* other);

  // implements Message ----------------------------------------------

  TActRotaryDrawLuckyDrawInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRotaryDrawLuckyDrawInfo& from);
  void MergeFrom(const TActRotaryDrawLuckyDrawInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawLuckyDrawInfo</name>
  	<Function>
  		<name>pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_pos</name>
  		<replaceName>Pos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward RewardArr = 2;
  inline int rewardarr_size() const;
  inline void clear_rewardarr();
  static const int kRewardArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawLuckyDrawInfo</name>
  	<Function>
  		<name>rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardarr</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rewardarr_size</name>
  		<replaceName>RewardArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& rewardarr(int index) const;
  inline ::pb::TCommonReward* mutable_rewardarr(int index);
  inline ::pb::TCommonReward* add_rewardarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      rewardarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_rewardarr();

  // @@protoc_insertion_point(class_scope:pb.TActRotaryDrawLuckyDrawInfo)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > rewardarr_;
  ::google::protobuf::uint32 pos_;
  friend void  protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_AssignDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRotaryDraw_2eproto();

  void InitAsDefaultInstance();
  static TActRotaryDrawLuckyDrawInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRotaryDrawGetGiftReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRotaryDraw.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRotaryDrawGetGiftReq : public ::google::protobuf::Message {
 public:
  TActRotaryDrawGetGiftReq();
  virtual ~TActRotaryDrawGetGiftReq();

  TActRotaryDrawGetGiftReq(const TActRotaryDrawGetGiftReq& from);

  inline TActRotaryDrawGetGiftReq& operator=(const TActRotaryDrawGetGiftReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRotaryDrawGetGiftReq& default_instance();

  void Swap(TActRotaryDrawGetGiftReq* other);

  // implements Message ----------------------------------------------

  TActRotaryDrawGetGiftReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRotaryDrawGetGiftReq& from);
  void MergeFrom(const TActRotaryDrawGetGiftReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawGetGiftReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TActRotaryDrawGetGiftReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_AssignDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRotaryDraw_2eproto();

  void InitAsDefaultInstance();
  static TActRotaryDrawGetGiftReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TActRotaryDrawNotify</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/ActRotaryDraw.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TActRotaryDrawNotify : public ::google::protobuf::Message {
 public:
  TActRotaryDrawNotify();
  virtual ~TActRotaryDrawNotify();

  TActRotaryDrawNotify(const TActRotaryDrawNotify& from);

  inline TActRotaryDrawNotify& operator=(const TActRotaryDrawNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TActRotaryDrawNotify& default_instance();

  void Swap(TActRotaryDrawNotify* other);

  // implements Message ----------------------------------------------

  TActRotaryDrawNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TActRotaryDrawNotify& from);
  void MergeFrom(const TActRotaryDrawNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 1;
  inline int giftbagpurchaseinfoarr_size() const;
  inline void clear_giftbagpurchaseinfoarr();
  static const int kGiftBagPurchaseInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TActRotaryDrawNotify</name>
  	<Function>
  		<name>giftbagpurchaseinfoarr</name>
  		<replaceName>GiftBagPurchaseInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_giftbagpurchaseinfoarr</name>
  		<replaceName>GiftBagPurchaseInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_giftbagpurchaseinfoarr</name>
  		<replaceName>GiftBagPurchaseInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_giftbagpurchaseinfoarr</name>
  		<replaceName>GiftBagPurchaseInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>giftbagpurchaseinfoarr_size</name>
  		<replaceName>GiftBagPurchaseInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TActRotaryDrawGiftBagPurchaseInfo& giftbagpurchaseinfoarr(int index) const;
  inline ::pb::TActRotaryDrawGiftBagPurchaseInfo* mutable_giftbagpurchaseinfoarr(int index);
  inline ::pb::TActRotaryDrawGiftBagPurchaseInfo* add_giftbagpurchaseinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawGiftBagPurchaseInfo >&
      giftbagpurchaseinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawGiftBagPurchaseInfo >*
      mutable_giftbagpurchaseinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TActRotaryDrawNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawGiftBagPurchaseInfo > giftbagpurchaseinfoarr_;
  friend void  protobuf_AddDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_AssignDesc_net_2fActRotaryDraw_2eproto();
  friend void protobuf_ShutdownFile_net_2fActRotaryDraw_2eproto();

  void InitAsDefaultInstance();
  static TActRotaryDrawNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// TActRotaryDrawGiftBagPurchaseInfo

// optional uint32 Id = 1;
inline bool TActRotaryDrawGiftBagPurchaseInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRotaryDrawGiftBagPurchaseInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRotaryDrawGiftBagPurchaseInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRotaryDrawGiftBagPurchaseInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActRotaryDrawGiftBagPurchaseInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawGiftBagPurchaseInfo.Id)
  return id_;
}
inline void TActRotaryDrawGiftBagPurchaseInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRotaryDrawGiftBagPurchaseInfo.Id)
}

// optional uint32 BuyNum = 2;
inline bool TActRotaryDrawGiftBagPurchaseInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActRotaryDrawGiftBagPurchaseInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActRotaryDrawGiftBagPurchaseInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActRotaryDrawGiftBagPurchaseInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 TActRotaryDrawGiftBagPurchaseInfo::buynum() const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawGiftBagPurchaseInfo.BuyNum)
  return buynum_;
}
inline void TActRotaryDrawGiftBagPurchaseInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRotaryDrawGiftBagPurchaseInfo.BuyNum)
}

// -------------------------------------------------------------------

// TActRotaryDrawInfoRsp

// optional uint32 DailyDrawNum = 1;
inline bool TActRotaryDrawInfoRsp::has_dailydrawnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRotaryDrawInfoRsp::set_has_dailydrawnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRotaryDrawInfoRsp::clear_has_dailydrawnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRotaryDrawInfoRsp::clear_dailydrawnum() {
  dailydrawnum_ = 0u;
  clear_has_dailydrawnum();
}
inline ::google::protobuf::uint32 TActRotaryDrawInfoRsp::dailydrawnum() const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawInfoRsp.DailyDrawNum)
  return dailydrawnum_;
}
inline void TActRotaryDrawInfoRsp::set_dailydrawnum(::google::protobuf::uint32 value) {
  set_has_dailydrawnum();
  dailydrawnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRotaryDrawInfoRsp.DailyDrawNum)
}

// optional uint32 TotalDrawNum = 2;
inline bool TActRotaryDrawInfoRsp::has_totaldrawnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TActRotaryDrawInfoRsp::set_has_totaldrawnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TActRotaryDrawInfoRsp::clear_has_totaldrawnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TActRotaryDrawInfoRsp::clear_totaldrawnum() {
  totaldrawnum_ = 0u;
  clear_has_totaldrawnum();
}
inline ::google::protobuf::uint32 TActRotaryDrawInfoRsp::totaldrawnum() const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawInfoRsp.TotalDrawNum)
  return totaldrawnum_;
}
inline void TActRotaryDrawInfoRsp::set_totaldrawnum(::google::protobuf::uint32 value) {
  set_has_totaldrawnum();
  totaldrawnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRotaryDrawInfoRsp.TotalDrawNum)
}

// repeated uint32 RewardIdArr = 3;
inline int TActRotaryDrawInfoRsp::rewardidarr_size() const {
  return rewardidarr_.size();
}
inline void TActRotaryDrawInfoRsp::clear_rewardidarr() {
  rewardidarr_.Clear();
}
inline ::google::protobuf::uint32 TActRotaryDrawInfoRsp::rewardidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawInfoRsp.RewardIdArr)
  return rewardidarr_.Get(index);
}
inline void TActRotaryDrawInfoRsp::set_rewardidarr(int index, ::google::protobuf::uint32 value) {
  rewardidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TActRotaryDrawInfoRsp.RewardIdArr)
}
inline void TActRotaryDrawInfoRsp::add_rewardidarr(::google::protobuf::uint32 value) {
  rewardidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TActRotaryDrawInfoRsp.RewardIdArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TActRotaryDrawInfoRsp::rewardidarr() const {
  // @@protoc_insertion_point(field_list:pb.TActRotaryDrawInfoRsp.RewardIdArr)
  return rewardidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TActRotaryDrawInfoRsp::mutable_rewardidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRotaryDrawInfoRsp.RewardIdArr)
  return &rewardidarr_;
}

// optional uint32 UsedFreeNum = 4;
inline bool TActRotaryDrawInfoRsp::has_usedfreenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TActRotaryDrawInfoRsp::set_has_usedfreenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TActRotaryDrawInfoRsp::clear_has_usedfreenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TActRotaryDrawInfoRsp::clear_usedfreenum() {
  usedfreenum_ = 0u;
  clear_has_usedfreenum();
}
inline ::google::protobuf::uint32 TActRotaryDrawInfoRsp::usedfreenum() const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawInfoRsp.UsedFreeNum)
  return usedfreenum_;
}
inline void TActRotaryDrawInfoRsp::set_usedfreenum(::google::protobuf::uint32 value) {
  set_has_usedfreenum();
  usedfreenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRotaryDrawInfoRsp.UsedFreeNum)
}

// repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 5;
inline int TActRotaryDrawInfoRsp::giftbagpurchaseinfoarr_size() const {
  return giftbagpurchaseinfoarr_.size();
}
inline void TActRotaryDrawInfoRsp::clear_giftbagpurchaseinfoarr() {
  giftbagpurchaseinfoarr_.Clear();
}
inline const ::pb::TActRotaryDrawGiftBagPurchaseInfo& TActRotaryDrawInfoRsp::giftbagpurchaseinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawInfoRsp.GiftBagPurchaseInfoArr)
  return giftbagpurchaseinfoarr_.Get(index);
}
inline ::pb::TActRotaryDrawGiftBagPurchaseInfo* TActRotaryDrawInfoRsp::mutable_giftbagpurchaseinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActRotaryDrawInfoRsp.GiftBagPurchaseInfoArr)
  return giftbagpurchaseinfoarr_.Mutable(index);
}
inline ::pb::TActRotaryDrawGiftBagPurchaseInfo* TActRotaryDrawInfoRsp::add_giftbagpurchaseinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TActRotaryDrawInfoRsp.GiftBagPurchaseInfoArr)
  return giftbagpurchaseinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawGiftBagPurchaseInfo >&
TActRotaryDrawInfoRsp::giftbagpurchaseinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TActRotaryDrawInfoRsp.GiftBagPurchaseInfoArr)
  return giftbagpurchaseinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawGiftBagPurchaseInfo >*
TActRotaryDrawInfoRsp::mutable_giftbagpurchaseinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRotaryDrawInfoRsp.GiftBagPurchaseInfoArr)
  return &giftbagpurchaseinfoarr_;
}

// -------------------------------------------------------------------

// TActRotaryDrawLuckyDrawReq

// optional uint32 Num = 1;
inline bool TActRotaryDrawLuckyDrawReq::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRotaryDrawLuckyDrawReq::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRotaryDrawLuckyDrawReq::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRotaryDrawLuckyDrawReq::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TActRotaryDrawLuckyDrawReq::num() const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawLuckyDrawReq.Num)
  return num_;
}
inline void TActRotaryDrawLuckyDrawReq::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRotaryDrawLuckyDrawReq.Num)
}

// -------------------------------------------------------------------

// TActRotaryDrawLuckyDrawRsp

// repeated .pb.TActRotaryDrawLuckyDrawInfo InfoArr = 1;
inline int TActRotaryDrawLuckyDrawRsp::infoarr_size() const {
  return infoarr_.size();
}
inline void TActRotaryDrawLuckyDrawRsp::clear_infoarr() {
  infoarr_.Clear();
}
inline const ::pb::TActRotaryDrawLuckyDrawInfo& TActRotaryDrawLuckyDrawRsp::infoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawLuckyDrawRsp.InfoArr)
  return infoarr_.Get(index);
}
inline ::pb::TActRotaryDrawLuckyDrawInfo* TActRotaryDrawLuckyDrawRsp::mutable_infoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActRotaryDrawLuckyDrawRsp.InfoArr)
  return infoarr_.Mutable(index);
}
inline ::pb::TActRotaryDrawLuckyDrawInfo* TActRotaryDrawLuckyDrawRsp::add_infoarr() {
  // @@protoc_insertion_point(field_add:pb.TActRotaryDrawLuckyDrawRsp.InfoArr)
  return infoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawLuckyDrawInfo >&
TActRotaryDrawLuckyDrawRsp::infoarr() const {
  // @@protoc_insertion_point(field_list:pb.TActRotaryDrawLuckyDrawRsp.InfoArr)
  return infoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawLuckyDrawInfo >*
TActRotaryDrawLuckyDrawRsp::mutable_infoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRotaryDrawLuckyDrawRsp.InfoArr)
  return &infoarr_;
}

// -------------------------------------------------------------------

// TActRotaryDrawLuckyDrawInfo

// optional uint32 Pos = 1;
inline bool TActRotaryDrawLuckyDrawInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRotaryDrawLuckyDrawInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRotaryDrawLuckyDrawInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRotaryDrawLuckyDrawInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 TActRotaryDrawLuckyDrawInfo::pos() const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawLuckyDrawInfo.Pos)
  return pos_;
}
inline void TActRotaryDrawLuckyDrawInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRotaryDrawLuckyDrawInfo.Pos)
}

// repeated .pb.TCommonReward RewardArr = 2;
inline int TActRotaryDrawLuckyDrawInfo::rewardarr_size() const {
  return rewardarr_.size();
}
inline void TActRotaryDrawLuckyDrawInfo::clear_rewardarr() {
  rewardarr_.Clear();
}
inline const ::pb::TCommonReward& TActRotaryDrawLuckyDrawInfo::rewardarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawLuckyDrawInfo.RewardArr)
  return rewardarr_.Get(index);
}
inline ::pb::TCommonReward* TActRotaryDrawLuckyDrawInfo::mutable_rewardarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActRotaryDrawLuckyDrawInfo.RewardArr)
  return rewardarr_.Mutable(index);
}
inline ::pb::TCommonReward* TActRotaryDrawLuckyDrawInfo::add_rewardarr() {
  // @@protoc_insertion_point(field_add:pb.TActRotaryDrawLuckyDrawInfo.RewardArr)
  return rewardarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TActRotaryDrawLuckyDrawInfo::rewardarr() const {
  // @@protoc_insertion_point(field_list:pb.TActRotaryDrawLuckyDrawInfo.RewardArr)
  return rewardarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TActRotaryDrawLuckyDrawInfo::mutable_rewardarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRotaryDrawLuckyDrawInfo.RewardArr)
  return &rewardarr_;
}

// -------------------------------------------------------------------

// TActRotaryDrawGetGiftReq

// optional uint32 Id = 1;
inline bool TActRotaryDrawGetGiftReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TActRotaryDrawGetGiftReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TActRotaryDrawGetGiftReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TActRotaryDrawGetGiftReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TActRotaryDrawGetGiftReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawGetGiftReq.Id)
  return id_;
}
inline void TActRotaryDrawGetGiftReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TActRotaryDrawGetGiftReq.Id)
}

// -------------------------------------------------------------------

// TActRotaryDrawNotify

// repeated .pb.TActRotaryDrawGiftBagPurchaseInfo GiftBagPurchaseInfoArr = 1;
inline int TActRotaryDrawNotify::giftbagpurchaseinfoarr_size() const {
  return giftbagpurchaseinfoarr_.size();
}
inline void TActRotaryDrawNotify::clear_giftbagpurchaseinfoarr() {
  giftbagpurchaseinfoarr_.Clear();
}
inline const ::pb::TActRotaryDrawGiftBagPurchaseInfo& TActRotaryDrawNotify::giftbagpurchaseinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TActRotaryDrawNotify.GiftBagPurchaseInfoArr)
  return giftbagpurchaseinfoarr_.Get(index);
}
inline ::pb::TActRotaryDrawGiftBagPurchaseInfo* TActRotaryDrawNotify::mutable_giftbagpurchaseinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TActRotaryDrawNotify.GiftBagPurchaseInfoArr)
  return giftbagpurchaseinfoarr_.Mutable(index);
}
inline ::pb::TActRotaryDrawGiftBagPurchaseInfo* TActRotaryDrawNotify::add_giftbagpurchaseinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TActRotaryDrawNotify.GiftBagPurchaseInfoArr)
  return giftbagpurchaseinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawGiftBagPurchaseInfo >&
TActRotaryDrawNotify::giftbagpurchaseinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TActRotaryDrawNotify.GiftBagPurchaseInfoArr)
  return giftbagpurchaseinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TActRotaryDrawGiftBagPurchaseInfo >*
TActRotaryDrawNotify::mutable_giftbagpurchaseinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TActRotaryDrawNotify.GiftBagPurchaseInfoArr)
  return &giftbagpurchaseinfoarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fActRotaryDraw_2eproto__INCLUDED
