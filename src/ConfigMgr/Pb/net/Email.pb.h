// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/Email.proto

#ifndef PROTOBUF_net_2fEmail_2eproto__INCLUDED
#define PROTOBUF_net_2fEmail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/CommonReward.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fEmail_2eproto();
void protobuf_AssignDesc_net_2fEmail_2eproto();
void protobuf_ShutdownFile_net_2fEmail_2eproto();

class TEmailSingle;
class TEmailUnopen;
class TEmailTypeInfo;
class TEmailTypeMap;
class TEmailGetUnreadRsp;
class TEmailGetInfoByTypeReq;
class TEmailGetInfoByTypeRsp;
class TEmailPushRsp;
class TEmailReadReq;
class TEmailBatchReadReq;
class TEmailReceiveAttachmentReq;
class TEmailBatchReceiveAttachmentReq;
class TEmailBatchReceiveAttachmentRsp;
class TEmailCancelCollectReq;
class TEmailBatchDelReq;
class TEmailCollectionReq;
class TEmailGetCollectionEmailReq;
class TEmailGetCollectionEmailRsp;
class TEmailSendGuildEmailReq;
class TEmailGetEmailContentReq;
class TEmailGetEmailContentRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TEmailSingle</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailSingle : public ::google::protobuf::Message {
 public:
  TEmailSingle();
  virtual ~TEmailSingle();

  TEmailSingle(const TEmailSingle& from);

  inline TEmailSingle& operator=(const TEmailSingle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailSingle& default_instance();

  void Swap(TEmailSingle* other);

  // implements Message ----------------------------------------------

  TEmailSingle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailSingle& from);
  void MergeFrom(const TEmailSingle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eid = 1;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailSingle</name>
  	<Function>
  		<name>eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eid() const;
  inline void set_eid(::google::protobuf::uint32 value);

  // optional uint32 tid = 2;
  inline bool has_tid() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailSingle</name>
  	<Function>
  		<name>tid</name>
  		<replaceName>tid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_tid</name>
  		<replaceName>tid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_tid</name>
  		<replaceName>tid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 tid() const;
  inline void set_tid(::google::protobuf::uint32 value);

  // optional string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TEmailSingle</name>
  	<Function>
  		<name>content</name>
  		<replaceName>content</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_content</name>
  		<replaceName>content</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_content</name>
  		<replaceName>content</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated .pb.TCommonReward attachment = 4;
  inline int attachment_size() const;
  inline void clear_attachment();
  static const int kAttachmentFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TEmailSingle</name>
  	<Function>
  		<name>attachment</name>
  		<replaceName>attachment</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attachment</name>
  		<replaceName>attachment</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attachment</name>
  		<replaceName>attachment</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attachment</name>
  		<replaceName>attachment</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attachment_size</name>
  		<replaceName>attachment</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& attachment(int index) const;
  inline ::pb::TCommonReward* mutable_attachment(int index);
  inline ::pb::TCommonReward* add_attachment();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      attachment() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_attachment();

  // optional int64 receivedTime = 5;
  inline bool has_receivedtime() const;
  inline void clear_receivedtime();
  static const int kReceivedTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TEmailSingle</name>
  	<Function>
  		<name>receivedtime</name>
  		<replaceName>receivedTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_receivedtime</name>
  		<replaceName>receivedTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_receivedtime</name>
  		<replaceName>receivedTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 receivedtime() const;
  inline void set_receivedtime(::google::protobuf::int64 value);

  // optional int64 readTime = 6;
  inline bool has_readtime() const;
  inline void clear_readtime();
  static const int kReadTimeFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TEmailSingle</name>
  	<Function>
  		<name>readtime</name>
  		<replaceName>readTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_readtime</name>
  		<replaceName>readTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_readtime</name>
  		<replaceName>readTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 readtime() const;
  inline void set_readtime(::google::protobuf::int64 value);

  // optional int64 gotAttachTime = 7;
  inline bool has_gotattachtime() const;
  inline void clear_gotattachtime();
  static const int kGotAttachTimeFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TEmailSingle</name>
  	<Function>
  		<name>gotattachtime</name>
  		<replaceName>gotAttachTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gotattachtime</name>
  		<replaceName>gotAttachTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gotattachtime</name>
  		<replaceName>gotAttachTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 gotattachtime() const;
  inline void set_gotattachtime(::google::protobuf::int64 value);

  // optional bool isCollect = 8;
  inline bool has_iscollect() const;
  inline void clear_iscollect();
  static const int kIsCollectFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TEmailSingle</name>
  	<Function>
  		<name>iscollect</name>
  		<replaceName>isCollect</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_iscollect</name>
  		<replaceName>isCollect</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_iscollect</name>
  		<replaceName>isCollect</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool iscollect() const;
  inline void set_iscollect(bool value);

  // optional string titleContent = 9;
  inline bool has_titlecontent() const;
  inline void clear_titlecontent();
  static const int kTitleContentFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TEmailSingle</name>
  	<Function>
  		<name>titlecontent</name>
  		<replaceName>titleContent</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_titlecontent</name>
  		<replaceName>titleContent</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_titlecontent</name>
  		<replaceName>titleContent</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& titlecontent() const;
  inline void set_titlecontent(const ::std::string& value);
  inline void set_titlecontent(const char* value);
  inline void set_titlecontent(const char* value, size_t size);
  inline ::std::string* mutable_titlecontent();
  inline ::std::string* release_titlecontent();
  inline void set_allocated_titlecontent(::std::string* titlecontent);

  // @@protoc_insertion_point(class_scope:pb.TEmailSingle)
 private:
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_tid();
  inline void clear_has_tid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_receivedtime();
  inline void clear_has_receivedtime();
  inline void set_has_readtime();
  inline void clear_has_readtime();
  inline void set_has_gotattachtime();
  inline void clear_has_gotattachtime();
  inline void set_has_iscollect();
  inline void clear_has_iscollect();
  inline void set_has_titlecontent();
  inline void clear_has_titlecontent();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eid_;
  ::google::protobuf::uint32 tid_;
  ::std::string* content_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > attachment_;
  ::google::protobuf::int64 receivedtime_;
  ::google::protobuf::int64 readtime_;
  ::google::protobuf::int64 gotattachtime_;
  ::std::string* titlecontent_;
  bool iscollect_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailSingle* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailUnopen</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailUnopen : public ::google::protobuf::Message {
 public:
  TEmailUnopen();
  virtual ~TEmailUnopen();

  TEmailUnopen(const TEmailUnopen& from);

  inline TEmailUnopen& operator=(const TEmailUnopen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailUnopen& default_instance();

  void Swap(TEmailUnopen* other);

  // implements Message ----------------------------------------------

  TEmailUnopen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailUnopen& from);
  void MergeFrom(const TEmailUnopen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailUnopen</name>
  	<Function>
  		<name>type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailUnopen</name>
  	<Function>
  		<name>num</name>
  		<replaceName>num</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_num</name>
  		<replaceName>num</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_num</name>
  		<replaceName>num</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 attachNum = 3;
  inline bool has_attachnum() const;
  inline void clear_attachnum();
  static const int kAttachNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TEmailUnopen</name>
  	<Function>
  		<name>attachnum</name>
  		<replaceName>attachNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_attachnum</name>
  		<replaceName>attachNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attachnum</name>
  		<replaceName>attachNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 attachnum() const;
  inline void set_attachnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEmailUnopen)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_attachnum();
  inline void clear_has_attachnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 attachnum_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailUnopen* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailTypeInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailTypeInfo : public ::google::protobuf::Message {
 public:
  TEmailTypeInfo();
  virtual ~TEmailTypeInfo();

  TEmailTypeInfo(const TEmailTypeInfo& from);

  inline TEmailTypeInfo& operator=(const TEmailTypeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailTypeInfo& default_instance();

  void Swap(TEmailTypeInfo* other);

  // implements Message ----------------------------------------------

  TEmailTypeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailTypeInfo& from);
  void MergeFrom(const TEmailTypeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailTypeInfo</name>
  	<Function>
  		<name>type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .pb.TEmailSingle emailArr = 2;
  inline int emailarr_size() const;
  inline void clear_emailarr();
  static const int kEmailArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailTypeInfo</name>
  	<Function>
  		<name>emailarr</name>
  		<replaceName>emailArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_emailarr</name>
  		<replaceName>emailArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_emailarr</name>
  		<replaceName>emailArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_emailarr</name>
  		<replaceName>emailArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>emailarr_size</name>
  		<replaceName>emailArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEmailSingle& emailarr(int index) const;
  inline ::pb::TEmailSingle* mutable_emailarr(int index);
  inline ::pb::TEmailSingle* add_emailarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >&
      emailarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >*
      mutable_emailarr();

  // @@protoc_insertion_point(class_scope:pb.TEmailTypeInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle > emailarr_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailTypeInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailTypeMap</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailTypeMap : public ::google::protobuf::Message {
 public:
  TEmailTypeMap();
  virtual ~TEmailTypeMap();

  TEmailTypeMap(const TEmailTypeMap& from);

  inline TEmailTypeMap& operator=(const TEmailTypeMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailTypeMap& default_instance();

  void Swap(TEmailTypeMap* other);

  // implements Message ----------------------------------------------

  TEmailTypeMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailTypeMap& from);
  void MergeFrom(const TEmailTypeMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailTypeMap</name>
  	<Function>
  		<name>type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // repeated .pb.TEmailSingle emailArr = 2;
  inline int emailarr_size() const;
  inline void clear_emailarr();
  static const int kEmailArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailTypeMap</name>
  	<Function>
  		<name>emailarr</name>
  		<replaceName>emailArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_emailarr</name>
  		<replaceName>emailArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_emailarr</name>
  		<replaceName>emailArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_emailarr</name>
  		<replaceName>emailArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>emailarr_size</name>
  		<replaceName>emailArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEmailSingle& emailarr(int index) const;
  inline ::pb::TEmailSingle* mutable_emailarr(int index);
  inline ::pb::TEmailSingle* add_emailarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >&
      emailarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >*
      mutable_emailarr();

  // @@protoc_insertion_point(class_scope:pb.TEmailTypeMap)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle > emailarr_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailTypeMap* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailGetUnreadRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailGetUnreadRsp : public ::google::protobuf::Message {
 public:
  TEmailGetUnreadRsp();
  virtual ~TEmailGetUnreadRsp();

  TEmailGetUnreadRsp(const TEmailGetUnreadRsp& from);

  inline TEmailGetUnreadRsp& operator=(const TEmailGetUnreadRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailGetUnreadRsp& default_instance();

  void Swap(TEmailGetUnreadRsp* other);

  // implements Message ----------------------------------------------

  TEmailGetUnreadRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailGetUnreadRsp& from);
  void MergeFrom(const TEmailGetUnreadRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TEmailUnopen unreads = 1;
  inline int unreads_size() const;
  inline void clear_unreads();
  static const int kUnreadsFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailGetUnreadRsp</name>
  	<Function>
  		<name>unreads</name>
  		<replaceName>unreads</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unreads</name>
  		<replaceName>unreads</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unreads</name>
  		<replaceName>unreads</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unreads</name>
  		<replaceName>unreads</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unreads_size</name>
  		<replaceName>unreads</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEmailUnopen& unreads(int index) const;
  inline ::pb::TEmailUnopen* mutable_unreads(int index);
  inline ::pb::TEmailUnopen* add_unreads();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailUnopen >&
      unreads() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailUnopen >*
      mutable_unreads();

  // @@protoc_insertion_point(class_scope:pb.TEmailGetUnreadRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TEmailUnopen > unreads_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailGetUnreadRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailGetInfoByTypeReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailGetInfoByTypeReq : public ::google::protobuf::Message {
 public:
  TEmailGetInfoByTypeReq();
  virtual ~TEmailGetInfoByTypeReq();

  TEmailGetInfoByTypeReq(const TEmailGetInfoByTypeReq& from);

  inline TEmailGetInfoByTypeReq& operator=(const TEmailGetInfoByTypeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailGetInfoByTypeReq& default_instance();

  void Swap(TEmailGetInfoByTypeReq* other);

  // implements Message ----------------------------------------------

  TEmailGetInfoByTypeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailGetInfoByTypeReq& from);
  void MergeFrom(const TEmailGetInfoByTypeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailGetInfoByTypeReq</name>
  	<Function>
  		<name>type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_type</name>
  		<replaceName>type</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 eid = 2;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailGetInfoByTypeReq</name>
  	<Function>
  		<name>eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eid() const;
  inline void set_eid(::google::protobuf::uint32 value);

  // optional uint32 offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TEmailGetInfoByTypeReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEmailGetInfoByTypeReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 eid_;
  ::google::protobuf::uint32 offset_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailGetInfoByTypeReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailGetInfoByTypeRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailGetInfoByTypeRsp : public ::google::protobuf::Message {
 public:
  TEmailGetInfoByTypeRsp();
  virtual ~TEmailGetInfoByTypeRsp();

  TEmailGetInfoByTypeRsp(const TEmailGetInfoByTypeRsp& from);

  inline TEmailGetInfoByTypeRsp& operator=(const TEmailGetInfoByTypeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailGetInfoByTypeRsp& default_instance();

  void Swap(TEmailGetInfoByTypeRsp* other);

  // implements Message ----------------------------------------------

  TEmailGetInfoByTypeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailGetInfoByTypeRsp& from);
  void MergeFrom(const TEmailGetInfoByTypeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TEmailTypeMap emailTypMap = 1;
  inline bool has_emailtypmap() const;
  inline void clear_emailtypmap();
  static const int kEmailTypMapFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailGetInfoByTypeRsp</name>
  	<Function>
  		<name>emailtypmap</name>
  		<replaceName>emailTypMap</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_emailtypmap</name>
  		<replaceName>emailTypMap</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_emailtypmap</name>
  		<replaceName>emailTypMap</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_emailtypmap</name>
  		<replaceName>emailTypMap</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEmailTypeMap& emailtypmap() const;
  inline ::pb::TEmailTypeMap* mutable_emailtypmap();
  inline ::pb::TEmailTypeMap* release_emailtypmap();
  inline void set_allocated_emailtypmap(::pb::TEmailTypeMap* emailtypmap);

  // @@protoc_insertion_point(class_scope:pb.TEmailGetInfoByTypeRsp)
 private:
  inline void set_has_emailtypmap();
  inline void clear_has_emailtypmap();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TEmailTypeMap* emailtypmap_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailGetInfoByTypeRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailPushRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailPushRsp : public ::google::protobuf::Message {
 public:
  TEmailPushRsp();
  virtual ~TEmailPushRsp();

  TEmailPushRsp(const TEmailPushRsp& from);

  inline TEmailPushRsp& operator=(const TEmailPushRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailPushRsp& default_instance();

  void Swap(TEmailPushRsp* other);

  // implements Message ----------------------------------------------

  TEmailPushRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailPushRsp& from);
  void MergeFrom(const TEmailPushRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TEmailUnopen UnopenEmailInfoArr = 1;
  inline int unopenemailinfoarr_size() const;
  inline void clear_unopenemailinfoarr();
  static const int kUnopenEmailInfoArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailPushRsp</name>
  	<Function>
  		<name>unopenemailinfoarr</name>
  		<replaceName>UnopenEmailInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_unopenemailinfoarr</name>
  		<replaceName>UnopenEmailInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_unopenemailinfoarr</name>
  		<replaceName>UnopenEmailInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_unopenemailinfoarr</name>
  		<replaceName>UnopenEmailInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>unopenemailinfoarr_size</name>
  		<replaceName>UnopenEmailInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEmailUnopen& unopenemailinfoarr(int index) const;
  inline ::pb::TEmailUnopen* mutable_unopenemailinfoarr(int index);
  inline ::pb::TEmailUnopen* add_unopenemailinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailUnopen >&
      unopenemailinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailUnopen >*
      mutable_unopenemailinfoarr();

  // @@protoc_insertion_point(class_scope:pb.TEmailPushRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TEmailUnopen > unopenemailinfoarr_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailPushRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailReadReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailReadReq : public ::google::protobuf::Message {
 public:
  TEmailReadReq();
  virtual ~TEmailReadReq();

  TEmailReadReq(const TEmailReadReq& from);

  inline TEmailReadReq& operator=(const TEmailReadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailReadReq& default_instance();

  void Swap(TEmailReadReq* other);

  // implements Message ----------------------------------------------

  TEmailReadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailReadReq& from);
  void MergeFrom(const TEmailReadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 typ = 1;
  inline bool has_typ() const;
  inline void clear_typ();
  static const int kTypFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailReadReq</name>
  	<Function>
  		<name>typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 typ() const;
  inline void set_typ(::google::protobuf::uint32 value);

  // optional uint32 eid = 2;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailReadReq</name>
  	<Function>
  		<name>eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eid() const;
  inline void set_eid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEmailReadReq)
 private:
  inline void set_has_typ();
  inline void clear_has_typ();
  inline void set_has_eid();
  inline void clear_has_eid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 typ_;
  ::google::protobuf::uint32 eid_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailReadReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailBatchReadReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailBatchReadReq : public ::google::protobuf::Message {
 public:
  TEmailBatchReadReq();
  virtual ~TEmailBatchReadReq();

  TEmailBatchReadReq(const TEmailBatchReadReq& from);

  inline TEmailBatchReadReq& operator=(const TEmailBatchReadReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailBatchReadReq& default_instance();

  void Swap(TEmailBatchReadReq* other);

  // implements Message ----------------------------------------------

  TEmailBatchReadReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailBatchReadReq& from);
  void MergeFrom(const TEmailBatchReadReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 typ = 1;
  inline bool has_typ() const;
  inline void clear_typ();
  static const int kTypFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailBatchReadReq</name>
  	<Function>
  		<name>typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 typ() const;
  inline void set_typ(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEmailBatchReadReq)
 private:
  inline void set_has_typ();
  inline void clear_has_typ();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 typ_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailBatchReadReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailReceiveAttachmentReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailReceiveAttachmentReq : public ::google::protobuf::Message {
 public:
  TEmailReceiveAttachmentReq();
  virtual ~TEmailReceiveAttachmentReq();

  TEmailReceiveAttachmentReq(const TEmailReceiveAttachmentReq& from);

  inline TEmailReceiveAttachmentReq& operator=(const TEmailReceiveAttachmentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailReceiveAttachmentReq& default_instance();

  void Swap(TEmailReceiveAttachmentReq* other);

  // implements Message ----------------------------------------------

  TEmailReceiveAttachmentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailReceiveAttachmentReq& from);
  void MergeFrom(const TEmailReceiveAttachmentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 typ = 1;
  inline bool has_typ() const;
  inline void clear_typ();
  static const int kTypFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailReceiveAttachmentReq</name>
  	<Function>
  		<name>typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 typ() const;
  inline void set_typ(::google::protobuf::uint32 value);

  // optional uint32 eid = 2;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailReceiveAttachmentReq</name>
  	<Function>
  		<name>eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eid() const;
  inline void set_eid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEmailReceiveAttachmentReq)
 private:
  inline void set_has_typ();
  inline void clear_has_typ();
  inline void set_has_eid();
  inline void clear_has_eid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 typ_;
  ::google::protobuf::uint32 eid_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailReceiveAttachmentReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailBatchReceiveAttachmentReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailBatchReceiveAttachmentReq : public ::google::protobuf::Message {
 public:
  TEmailBatchReceiveAttachmentReq();
  virtual ~TEmailBatchReceiveAttachmentReq();

  TEmailBatchReceiveAttachmentReq(const TEmailBatchReceiveAttachmentReq& from);

  inline TEmailBatchReceiveAttachmentReq& operator=(const TEmailBatchReceiveAttachmentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailBatchReceiveAttachmentReq& default_instance();

  void Swap(TEmailBatchReceiveAttachmentReq* other);

  // implements Message ----------------------------------------------

  TEmailBatchReceiveAttachmentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailBatchReceiveAttachmentReq& from);
  void MergeFrom(const TEmailBatchReceiveAttachmentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 typ = 1;
  inline bool has_typ() const;
  inline void clear_typ();
  static const int kTypFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailBatchReceiveAttachmentReq</name>
  	<Function>
  		<name>typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 typ() const;
  inline void set_typ(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEmailBatchReceiveAttachmentReq)
 private:
  inline void set_has_typ();
  inline void clear_has_typ();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 typ_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailBatchReceiveAttachmentReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailBatchReceiveAttachmentRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailBatchReceiveAttachmentRsp : public ::google::protobuf::Message {
 public:
  TEmailBatchReceiveAttachmentRsp();
  virtual ~TEmailBatchReceiveAttachmentRsp();

  TEmailBatchReceiveAttachmentRsp(const TEmailBatchReceiveAttachmentRsp& from);

  inline TEmailBatchReceiveAttachmentRsp& operator=(const TEmailBatchReceiveAttachmentRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailBatchReceiveAttachmentRsp& default_instance();

  void Swap(TEmailBatchReceiveAttachmentRsp* other);

  // implements Message ----------------------------------------------

  TEmailBatchReceiveAttachmentRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailBatchReceiveAttachmentRsp& from);
  void MergeFrom(const TEmailBatchReceiveAttachmentRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TEmailSingle mailArr = 1;
  inline int mailarr_size() const;
  inline void clear_mailarr();
  static const int kMailArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailBatchReceiveAttachmentRsp</name>
  	<Function>
  		<name>mailarr</name>
  		<replaceName>mailArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_mailarr</name>
  		<replaceName>mailArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_mailarr</name>
  		<replaceName>mailArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mailarr</name>
  		<replaceName>mailArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mailarr_size</name>
  		<replaceName>mailArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEmailSingle& mailarr(int index) const;
  inline ::pb::TEmailSingle* mutable_mailarr(int index);
  inline ::pb::TEmailSingle* add_mailarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >&
      mailarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >*
      mutable_mailarr();

  // repeated .pb.TCommonReward attachArr = 2;
  inline int attacharr_size() const;
  inline void clear_attacharr();
  static const int kAttachArrFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailBatchReceiveAttachmentRsp</name>
  	<Function>
  		<name>attacharr</name>
  		<replaceName>attachArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_attacharr</name>
  		<replaceName>attachArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_attacharr</name>
  		<replaceName>attachArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_attacharr</name>
  		<replaceName>attachArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>attacharr_size</name>
  		<replaceName>attachArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& attacharr(int index) const;
  inline ::pb::TCommonReward* mutable_attacharr(int index);
  inline ::pb::TCommonReward* add_attacharr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      attacharr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_attacharr();

  // @@protoc_insertion_point(class_scope:pb.TEmailBatchReceiveAttachmentRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle > mailarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > attacharr_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailBatchReceiveAttachmentRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailCancelCollectReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailCancelCollectReq : public ::google::protobuf::Message {
 public:
  TEmailCancelCollectReq();
  virtual ~TEmailCancelCollectReq();

  TEmailCancelCollectReq(const TEmailCancelCollectReq& from);

  inline TEmailCancelCollectReq& operator=(const TEmailCancelCollectReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailCancelCollectReq& default_instance();

  void Swap(TEmailCancelCollectReq* other);

  // implements Message ----------------------------------------------

  TEmailCancelCollectReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailCancelCollectReq& from);
  void MergeFrom(const TEmailCancelCollectReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 typ = 1;
  inline bool has_typ() const;
  inline void clear_typ();
  static const int kTypFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailCancelCollectReq</name>
  	<Function>
  		<name>typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 typ() const;
  inline void set_typ(::google::protobuf::uint32 value);

  // optional uint32 eid = 2;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailCancelCollectReq</name>
  	<Function>
  		<name>eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eid() const;
  inline void set_eid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEmailCancelCollectReq)
 private:
  inline void set_has_typ();
  inline void clear_has_typ();
  inline void set_has_eid();
  inline void clear_has_eid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 typ_;
  ::google::protobuf::uint32 eid_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailCancelCollectReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailBatchDelReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailBatchDelReq : public ::google::protobuf::Message {
 public:
  TEmailBatchDelReq();
  virtual ~TEmailBatchDelReq();

  TEmailBatchDelReq(const TEmailBatchDelReq& from);

  inline TEmailBatchDelReq& operator=(const TEmailBatchDelReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailBatchDelReq& default_instance();

  void Swap(TEmailBatchDelReq* other);

  // implements Message ----------------------------------------------

  TEmailBatchDelReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailBatchDelReq& from);
  void MergeFrom(const TEmailBatchDelReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 typ = 1;
  inline bool has_typ() const;
  inline void clear_typ();
  static const int kTypFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailBatchDelReq</name>
  	<Function>
  		<name>typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 typ() const;
  inline void set_typ(::google::protobuf::uint32 value);

  // repeated uint32 eid = 2;
  inline int eid_size() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailBatchDelReq</name>
  	<Function>
  		<name>eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>eid_size</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eid(int index) const;
  inline void set_eid(int index, ::google::protobuf::uint32 value);
  inline void add_eid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      eid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_eid();

  // @@protoc_insertion_point(class_scope:pb.TEmailBatchDelReq)
 private:
  inline void set_has_typ();
  inline void clear_has_typ();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > eid_;
  ::google::protobuf::uint32 typ_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailBatchDelReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailCollectionReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailCollectionReq : public ::google::protobuf::Message {
 public:
  TEmailCollectionReq();
  virtual ~TEmailCollectionReq();

  TEmailCollectionReq(const TEmailCollectionReq& from);

  inline TEmailCollectionReq& operator=(const TEmailCollectionReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailCollectionReq& default_instance();

  void Swap(TEmailCollectionReq* other);

  // implements Message ----------------------------------------------

  TEmailCollectionReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailCollectionReq& from);
  void MergeFrom(const TEmailCollectionReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 typ = 1;
  inline bool has_typ() const;
  inline void clear_typ();
  static const int kTypFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailCollectionReq</name>
  	<Function>
  		<name>typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_typ</name>
  		<replaceName>typ</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 typ() const;
  inline void set_typ(::google::protobuf::uint32 value);

  // optional uint32 eid = 2;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailCollectionReq</name>
  	<Function>
  		<name>eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eid() const;
  inline void set_eid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEmailCollectionReq)
 private:
  inline void set_has_typ();
  inline void clear_has_typ();
  inline void set_has_eid();
  inline void clear_has_eid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 typ_;
  ::google::protobuf::uint32 eid_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailCollectionReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailGetCollectionEmailReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailGetCollectionEmailReq : public ::google::protobuf::Message {
 public:
  TEmailGetCollectionEmailReq();
  virtual ~TEmailGetCollectionEmailReq();

  TEmailGetCollectionEmailReq(const TEmailGetCollectionEmailReq& from);

  inline TEmailGetCollectionEmailReq& operator=(const TEmailGetCollectionEmailReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailGetCollectionEmailReq& default_instance();

  void Swap(TEmailGetCollectionEmailReq* other);

  // implements Message ----------------------------------------------

  TEmailGetCollectionEmailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailGetCollectionEmailReq& from);
  void MergeFrom(const TEmailGetCollectionEmailReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 eid = 1;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailGetCollectionEmailReq</name>
  	<Function>
  		<name>eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eid</name>
  		<replaceName>eid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eid() const;
  inline void set_eid(::google::protobuf::uint32 value);

  // optional uint32 offset = 2;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailGetCollectionEmailReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEmailGetCollectionEmailReq)
 private:
  inline void set_has_eid();
  inline void clear_has_eid();
  inline void set_has_offset();
  inline void clear_has_offset();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 eid_;
  ::google::protobuf::uint32 offset_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailGetCollectionEmailReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailGetCollectionEmailRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailGetCollectionEmailRsp : public ::google::protobuf::Message {
 public:
  TEmailGetCollectionEmailRsp();
  virtual ~TEmailGetCollectionEmailRsp();

  TEmailGetCollectionEmailRsp(const TEmailGetCollectionEmailRsp& from);

  inline TEmailGetCollectionEmailRsp& operator=(const TEmailGetCollectionEmailRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailGetCollectionEmailRsp& default_instance();

  void Swap(TEmailGetCollectionEmailRsp* other);

  // implements Message ----------------------------------------------

  TEmailGetCollectionEmailRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailGetCollectionEmailRsp& from);
  void MergeFrom(const TEmailGetCollectionEmailRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TEmailSingle collectArr = 1;
  inline int collectarr_size() const;
  inline void clear_collectarr();
  static const int kCollectArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailGetCollectionEmailRsp</name>
  	<Function>
  		<name>collectarr</name>
  		<replaceName>collectArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_collectarr</name>
  		<replaceName>collectArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_collectarr</name>
  		<replaceName>collectArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_collectarr</name>
  		<replaceName>collectArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>collectarr_size</name>
  		<replaceName>collectArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TEmailSingle& collectarr(int index) const;
  inline ::pb::TEmailSingle* mutable_collectarr(int index);
  inline ::pb::TEmailSingle* add_collectarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >&
      collectarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >*
      mutable_collectarr();

  // @@protoc_insertion_point(class_scope:pb.TEmailGetCollectionEmailRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle > collectarr_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailGetCollectionEmailRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailSendGuildEmailReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailSendGuildEmailReq : public ::google::protobuf::Message {
 public:
  TEmailSendGuildEmailReq();
  virtual ~TEmailSendGuildEmailReq();

  TEmailSendGuildEmailReq(const TEmailSendGuildEmailReq& from);

  inline TEmailSendGuildEmailReq& operator=(const TEmailSendGuildEmailReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailSendGuildEmailReq& default_instance();

  void Swap(TEmailSendGuildEmailReq* other);

  // implements Message ----------------------------------------------

  TEmailSendGuildEmailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailSendGuildEmailReq& from);
  void MergeFrom(const TEmailSendGuildEmailReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailSendGuildEmailReq</name>
  	<Function>
  		<name>title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string Content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailSendGuildEmailReq</name>
  	<Function>
  		<name>content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated uint64 UidArr = 3;
  inline int uidarr_size() const;
  inline void clear_uidarr();
  static const int kUidArrFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TEmailSendGuildEmailReq</name>
  	<Function>
  		<name>uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uidarr</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>uidarr_size</name>
  		<replaceName>UidArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uidarr(int index) const;
  inline void set_uidarr(int index, ::google::protobuf::uint64 value);
  inline void add_uidarr(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      uidarr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_uidarr();

  // @@protoc_insertion_point(class_scope:pb.TEmailSendGuildEmailReq)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* title_;
  ::std::string* content_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > uidarr_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailSendGuildEmailReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailGetEmailContentReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailGetEmailContentReq : public ::google::protobuf::Message {
 public:
  TEmailGetEmailContentReq();
  virtual ~TEmailGetEmailContentReq();

  TEmailGetEmailContentReq(const TEmailGetEmailContentReq& from);

  inline TEmailGetEmailContentReq& operator=(const TEmailGetEmailContentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailGetEmailContentReq& default_instance();

  void Swap(TEmailGetEmailContentReq* other);

  // implements Message ----------------------------------------------

  TEmailGetEmailContentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailGetEmailContentReq& from);
  void MergeFrom(const TEmailGetEmailContentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailGetEmailContentReq</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional uint32 Eid = 2;
  inline bool has_eid() const;
  inline void clear_eid();
  static const int kEidFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TEmailGetEmailContentReq</name>
  	<Function>
  		<name>eid</name>
  		<replaceName>Eid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_eid</name>
  		<replaceName>Eid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_eid</name>
  		<replaceName>Eid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 eid() const;
  inline void set_eid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TEmailGetEmailContentReq)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_eid();
  inline void clear_has_eid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::google::protobuf::uint32 eid_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailGetEmailContentReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TEmailGetEmailContentRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/Email.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TEmailGetEmailContentRsp : public ::google::protobuf::Message {
 public:
  TEmailGetEmailContentRsp();
  virtual ~TEmailGetEmailContentRsp();

  TEmailGetEmailContentRsp(const TEmailGetEmailContentRsp& from);

  inline TEmailGetEmailContentRsp& operator=(const TEmailGetEmailContentRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TEmailGetEmailContentRsp& default_instance();

  void Swap(TEmailGetEmailContentRsp* other);

  // implements Message ----------------------------------------------

  TEmailGetEmailContentRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TEmailGetEmailContentRsp& from);
  void MergeFrom(const TEmailGetEmailContentRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TEmailGetEmailContentRsp</name>
  	<Function>
  		<name>content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_content</name>
  		<replaceName>Content</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:pb.TEmailGetEmailContentRsp)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  friend void  protobuf_AddDesc_net_2fEmail_2eproto();
  friend void protobuf_AssignDesc_net_2fEmail_2eproto();
  friend void protobuf_ShutdownFile_net_2fEmail_2eproto();

  void InitAsDefaultInstance();
  static TEmailGetEmailContentRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TEmailSingle

// optional uint32 eid = 1;
inline bool TEmailSingle::has_eid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailSingle::set_has_eid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailSingle::clear_has_eid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailSingle::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
inline ::google::protobuf::uint32 TEmailSingle::eid() const {
  // @@protoc_insertion_point(field_get:pb.TEmailSingle.eid)
  return eid_;
}
inline void TEmailSingle::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailSingle.eid)
}

// optional uint32 tid = 2;
inline bool TEmailSingle::has_tid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEmailSingle::set_has_tid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEmailSingle::clear_has_tid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEmailSingle::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TEmailSingle::tid() const {
  // @@protoc_insertion_point(field_get:pb.TEmailSingle.tid)
  return tid_;
}
inline void TEmailSingle::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailSingle.tid)
}

// optional string content = 3;
inline bool TEmailSingle::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TEmailSingle::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TEmailSingle::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TEmailSingle::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TEmailSingle::content() const {
  // @@protoc_insertion_point(field_get:pb.TEmailSingle.content)
  return *content_;
}
inline void TEmailSingle::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TEmailSingle.content)
}
inline void TEmailSingle::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TEmailSingle.content)
}
inline void TEmailSingle::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TEmailSingle.content)
}
inline ::std::string* TEmailSingle::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TEmailSingle.content)
  return content_;
}
inline ::std::string* TEmailSingle::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TEmailSingle::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEmailSingle.content)
}

// repeated .pb.TCommonReward attachment = 4;
inline int TEmailSingle::attachment_size() const {
  return attachment_.size();
}
inline void TEmailSingle::clear_attachment() {
  attachment_.Clear();
}
inline const ::pb::TCommonReward& TEmailSingle::attachment(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEmailSingle.attachment)
  return attachment_.Get(index);
}
inline ::pb::TCommonReward* TEmailSingle::mutable_attachment(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEmailSingle.attachment)
  return attachment_.Mutable(index);
}
inline ::pb::TCommonReward* TEmailSingle::add_attachment() {
  // @@protoc_insertion_point(field_add:pb.TEmailSingle.attachment)
  return attachment_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TEmailSingle::attachment() const {
  // @@protoc_insertion_point(field_list:pb.TEmailSingle.attachment)
  return attachment_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TEmailSingle::mutable_attachment() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEmailSingle.attachment)
  return &attachment_;
}

// optional int64 receivedTime = 5;
inline bool TEmailSingle::has_receivedtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TEmailSingle::set_has_receivedtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TEmailSingle::clear_has_receivedtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TEmailSingle::clear_receivedtime() {
  receivedtime_ = GOOGLE_LONGLONG(0);
  clear_has_receivedtime();
}
inline ::google::protobuf::int64 TEmailSingle::receivedtime() const {
  // @@protoc_insertion_point(field_get:pb.TEmailSingle.receivedTime)
  return receivedtime_;
}
inline void TEmailSingle::set_receivedtime(::google::protobuf::int64 value) {
  set_has_receivedtime();
  receivedtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailSingle.receivedTime)
}

// optional int64 readTime = 6;
inline bool TEmailSingle::has_readtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TEmailSingle::set_has_readtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TEmailSingle::clear_has_readtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TEmailSingle::clear_readtime() {
  readtime_ = GOOGLE_LONGLONG(0);
  clear_has_readtime();
}
inline ::google::protobuf::int64 TEmailSingle::readtime() const {
  // @@protoc_insertion_point(field_get:pb.TEmailSingle.readTime)
  return readtime_;
}
inline void TEmailSingle::set_readtime(::google::protobuf::int64 value) {
  set_has_readtime();
  readtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailSingle.readTime)
}

// optional int64 gotAttachTime = 7;
inline bool TEmailSingle::has_gotattachtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TEmailSingle::set_has_gotattachtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TEmailSingle::clear_has_gotattachtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TEmailSingle::clear_gotattachtime() {
  gotattachtime_ = GOOGLE_LONGLONG(0);
  clear_has_gotattachtime();
}
inline ::google::protobuf::int64 TEmailSingle::gotattachtime() const {
  // @@protoc_insertion_point(field_get:pb.TEmailSingle.gotAttachTime)
  return gotattachtime_;
}
inline void TEmailSingle::set_gotattachtime(::google::protobuf::int64 value) {
  set_has_gotattachtime();
  gotattachtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailSingle.gotAttachTime)
}

// optional bool isCollect = 8;
inline bool TEmailSingle::has_iscollect() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TEmailSingle::set_has_iscollect() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TEmailSingle::clear_has_iscollect() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TEmailSingle::clear_iscollect() {
  iscollect_ = false;
  clear_has_iscollect();
}
inline bool TEmailSingle::iscollect() const {
  // @@protoc_insertion_point(field_get:pb.TEmailSingle.isCollect)
  return iscollect_;
}
inline void TEmailSingle::set_iscollect(bool value) {
  set_has_iscollect();
  iscollect_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailSingle.isCollect)
}

// optional string titleContent = 9;
inline bool TEmailSingle::has_titlecontent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TEmailSingle::set_has_titlecontent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TEmailSingle::clear_has_titlecontent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TEmailSingle::clear_titlecontent() {
  if (titlecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    titlecontent_->clear();
  }
  clear_has_titlecontent();
}
inline const ::std::string& TEmailSingle::titlecontent() const {
  // @@protoc_insertion_point(field_get:pb.TEmailSingle.titleContent)
  return *titlecontent_;
}
inline void TEmailSingle::set_titlecontent(const ::std::string& value) {
  set_has_titlecontent();
  if (titlecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    titlecontent_ = new ::std::string;
  }
  titlecontent_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TEmailSingle.titleContent)
}
inline void TEmailSingle::set_titlecontent(const char* value) {
  set_has_titlecontent();
  if (titlecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    titlecontent_ = new ::std::string;
  }
  titlecontent_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TEmailSingle.titleContent)
}
inline void TEmailSingle::set_titlecontent(const char* value, size_t size) {
  set_has_titlecontent();
  if (titlecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    titlecontent_ = new ::std::string;
  }
  titlecontent_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TEmailSingle.titleContent)
}
inline ::std::string* TEmailSingle::mutable_titlecontent() {
  set_has_titlecontent();
  if (titlecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    titlecontent_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TEmailSingle.titleContent)
  return titlecontent_;
}
inline ::std::string* TEmailSingle::release_titlecontent() {
  clear_has_titlecontent();
  if (titlecontent_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = titlecontent_;
    titlecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TEmailSingle::set_allocated_titlecontent(::std::string* titlecontent) {
  if (titlecontent_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete titlecontent_;
  }
  if (titlecontent) {
    set_has_titlecontent();
    titlecontent_ = titlecontent;
  } else {
    clear_has_titlecontent();
    titlecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEmailSingle.titleContent)
}

// -------------------------------------------------------------------

// TEmailUnopen

// optional uint32 type = 1;
inline bool TEmailUnopen::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailUnopen::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailUnopen::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailUnopen::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TEmailUnopen::type() const {
  // @@protoc_insertion_point(field_get:pb.TEmailUnopen.type)
  return type_;
}
inline void TEmailUnopen::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailUnopen.type)
}

// optional uint32 num = 2;
inline bool TEmailUnopen::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEmailUnopen::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEmailUnopen::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEmailUnopen::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 TEmailUnopen::num() const {
  // @@protoc_insertion_point(field_get:pb.TEmailUnopen.num)
  return num_;
}
inline void TEmailUnopen::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailUnopen.num)
}

// optional uint32 attachNum = 3;
inline bool TEmailUnopen::has_attachnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TEmailUnopen::set_has_attachnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TEmailUnopen::clear_has_attachnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TEmailUnopen::clear_attachnum() {
  attachnum_ = 0u;
  clear_has_attachnum();
}
inline ::google::protobuf::uint32 TEmailUnopen::attachnum() const {
  // @@protoc_insertion_point(field_get:pb.TEmailUnopen.attachNum)
  return attachnum_;
}
inline void TEmailUnopen::set_attachnum(::google::protobuf::uint32 value) {
  set_has_attachnum();
  attachnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailUnopen.attachNum)
}

// -------------------------------------------------------------------

// TEmailTypeInfo

// optional uint32 type = 1;
inline bool TEmailTypeInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailTypeInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailTypeInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailTypeInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TEmailTypeInfo::type() const {
  // @@protoc_insertion_point(field_get:pb.TEmailTypeInfo.type)
  return type_;
}
inline void TEmailTypeInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailTypeInfo.type)
}

// repeated .pb.TEmailSingle emailArr = 2;
inline int TEmailTypeInfo::emailarr_size() const {
  return emailarr_.size();
}
inline void TEmailTypeInfo::clear_emailarr() {
  emailarr_.Clear();
}
inline const ::pb::TEmailSingle& TEmailTypeInfo::emailarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEmailTypeInfo.emailArr)
  return emailarr_.Get(index);
}
inline ::pb::TEmailSingle* TEmailTypeInfo::mutable_emailarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEmailTypeInfo.emailArr)
  return emailarr_.Mutable(index);
}
inline ::pb::TEmailSingle* TEmailTypeInfo::add_emailarr() {
  // @@protoc_insertion_point(field_add:pb.TEmailTypeInfo.emailArr)
  return emailarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >&
TEmailTypeInfo::emailarr() const {
  // @@protoc_insertion_point(field_list:pb.TEmailTypeInfo.emailArr)
  return emailarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >*
TEmailTypeInfo::mutable_emailarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEmailTypeInfo.emailArr)
  return &emailarr_;
}

// -------------------------------------------------------------------

// TEmailTypeMap

// optional uint32 type = 1;
inline bool TEmailTypeMap::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailTypeMap::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailTypeMap::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailTypeMap::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TEmailTypeMap::type() const {
  // @@protoc_insertion_point(field_get:pb.TEmailTypeMap.type)
  return type_;
}
inline void TEmailTypeMap::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailTypeMap.type)
}

// repeated .pb.TEmailSingle emailArr = 2;
inline int TEmailTypeMap::emailarr_size() const {
  return emailarr_.size();
}
inline void TEmailTypeMap::clear_emailarr() {
  emailarr_.Clear();
}
inline const ::pb::TEmailSingle& TEmailTypeMap::emailarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEmailTypeMap.emailArr)
  return emailarr_.Get(index);
}
inline ::pb::TEmailSingle* TEmailTypeMap::mutable_emailarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEmailTypeMap.emailArr)
  return emailarr_.Mutable(index);
}
inline ::pb::TEmailSingle* TEmailTypeMap::add_emailarr() {
  // @@protoc_insertion_point(field_add:pb.TEmailTypeMap.emailArr)
  return emailarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >&
TEmailTypeMap::emailarr() const {
  // @@protoc_insertion_point(field_list:pb.TEmailTypeMap.emailArr)
  return emailarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >*
TEmailTypeMap::mutable_emailarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEmailTypeMap.emailArr)
  return &emailarr_;
}

// -------------------------------------------------------------------

// TEmailGetUnreadRsp

// repeated .pb.TEmailUnopen unreads = 1;
inline int TEmailGetUnreadRsp::unreads_size() const {
  return unreads_.size();
}
inline void TEmailGetUnreadRsp::clear_unreads() {
  unreads_.Clear();
}
inline const ::pb::TEmailUnopen& TEmailGetUnreadRsp::unreads(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEmailGetUnreadRsp.unreads)
  return unreads_.Get(index);
}
inline ::pb::TEmailUnopen* TEmailGetUnreadRsp::mutable_unreads(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEmailGetUnreadRsp.unreads)
  return unreads_.Mutable(index);
}
inline ::pb::TEmailUnopen* TEmailGetUnreadRsp::add_unreads() {
  // @@protoc_insertion_point(field_add:pb.TEmailGetUnreadRsp.unreads)
  return unreads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailUnopen >&
TEmailGetUnreadRsp::unreads() const {
  // @@protoc_insertion_point(field_list:pb.TEmailGetUnreadRsp.unreads)
  return unreads_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailUnopen >*
TEmailGetUnreadRsp::mutable_unreads() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEmailGetUnreadRsp.unreads)
  return &unreads_;
}

// -------------------------------------------------------------------

// TEmailGetInfoByTypeReq

// optional uint32 type = 1;
inline bool TEmailGetInfoByTypeReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailGetInfoByTypeReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailGetInfoByTypeReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailGetInfoByTypeReq::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TEmailGetInfoByTypeReq::type() const {
  // @@protoc_insertion_point(field_get:pb.TEmailGetInfoByTypeReq.type)
  return type_;
}
inline void TEmailGetInfoByTypeReq::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailGetInfoByTypeReq.type)
}

// optional uint32 eid = 2;
inline bool TEmailGetInfoByTypeReq::has_eid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEmailGetInfoByTypeReq::set_has_eid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEmailGetInfoByTypeReq::clear_has_eid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEmailGetInfoByTypeReq::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
inline ::google::protobuf::uint32 TEmailGetInfoByTypeReq::eid() const {
  // @@protoc_insertion_point(field_get:pb.TEmailGetInfoByTypeReq.eid)
  return eid_;
}
inline void TEmailGetInfoByTypeReq::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailGetInfoByTypeReq.eid)
}

// optional uint32 offset = 3;
inline bool TEmailGetInfoByTypeReq::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TEmailGetInfoByTypeReq::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TEmailGetInfoByTypeReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TEmailGetInfoByTypeReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TEmailGetInfoByTypeReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TEmailGetInfoByTypeReq.offset)
  return offset_;
}
inline void TEmailGetInfoByTypeReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailGetInfoByTypeReq.offset)
}

// -------------------------------------------------------------------

// TEmailGetInfoByTypeRsp

// optional .pb.TEmailTypeMap emailTypMap = 1;
inline bool TEmailGetInfoByTypeRsp::has_emailtypmap() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailGetInfoByTypeRsp::set_has_emailtypmap() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailGetInfoByTypeRsp::clear_has_emailtypmap() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailGetInfoByTypeRsp::clear_emailtypmap() {
  if (emailtypmap_ != NULL) emailtypmap_->::pb::TEmailTypeMap::Clear();
  clear_has_emailtypmap();
}
inline const ::pb::TEmailTypeMap& TEmailGetInfoByTypeRsp::emailtypmap() const {
  // @@protoc_insertion_point(field_get:pb.TEmailGetInfoByTypeRsp.emailTypMap)
  return emailtypmap_ != NULL ? *emailtypmap_ : *default_instance_->emailtypmap_;
}
inline ::pb::TEmailTypeMap* TEmailGetInfoByTypeRsp::mutable_emailtypmap() {
  set_has_emailtypmap();
  if (emailtypmap_ == NULL) emailtypmap_ = new ::pb::TEmailTypeMap;
  // @@protoc_insertion_point(field_mutable:pb.TEmailGetInfoByTypeRsp.emailTypMap)
  return emailtypmap_;
}
inline ::pb::TEmailTypeMap* TEmailGetInfoByTypeRsp::release_emailtypmap() {
  clear_has_emailtypmap();
  ::pb::TEmailTypeMap* temp = emailtypmap_;
  emailtypmap_ = NULL;
  return temp;
}
inline void TEmailGetInfoByTypeRsp::set_allocated_emailtypmap(::pb::TEmailTypeMap* emailtypmap) {
  delete emailtypmap_;
  emailtypmap_ = emailtypmap;
  if (emailtypmap) {
    set_has_emailtypmap();
  } else {
    clear_has_emailtypmap();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEmailGetInfoByTypeRsp.emailTypMap)
}

// -------------------------------------------------------------------

// TEmailPushRsp

// repeated .pb.TEmailUnopen UnopenEmailInfoArr = 1;
inline int TEmailPushRsp::unopenemailinfoarr_size() const {
  return unopenemailinfoarr_.size();
}
inline void TEmailPushRsp::clear_unopenemailinfoarr() {
  unopenemailinfoarr_.Clear();
}
inline const ::pb::TEmailUnopen& TEmailPushRsp::unopenemailinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEmailPushRsp.UnopenEmailInfoArr)
  return unopenemailinfoarr_.Get(index);
}
inline ::pb::TEmailUnopen* TEmailPushRsp::mutable_unopenemailinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEmailPushRsp.UnopenEmailInfoArr)
  return unopenemailinfoarr_.Mutable(index);
}
inline ::pb::TEmailUnopen* TEmailPushRsp::add_unopenemailinfoarr() {
  // @@protoc_insertion_point(field_add:pb.TEmailPushRsp.UnopenEmailInfoArr)
  return unopenemailinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailUnopen >&
TEmailPushRsp::unopenemailinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.TEmailPushRsp.UnopenEmailInfoArr)
  return unopenemailinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailUnopen >*
TEmailPushRsp::mutable_unopenemailinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEmailPushRsp.UnopenEmailInfoArr)
  return &unopenemailinfoarr_;
}

// -------------------------------------------------------------------

// TEmailReadReq

// optional uint32 typ = 1;
inline bool TEmailReadReq::has_typ() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailReadReq::set_has_typ() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailReadReq::clear_has_typ() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailReadReq::clear_typ() {
  typ_ = 0u;
  clear_has_typ();
}
inline ::google::protobuf::uint32 TEmailReadReq::typ() const {
  // @@protoc_insertion_point(field_get:pb.TEmailReadReq.typ)
  return typ_;
}
inline void TEmailReadReq::set_typ(::google::protobuf::uint32 value) {
  set_has_typ();
  typ_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailReadReq.typ)
}

// optional uint32 eid = 2;
inline bool TEmailReadReq::has_eid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEmailReadReq::set_has_eid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEmailReadReq::clear_has_eid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEmailReadReq::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
inline ::google::protobuf::uint32 TEmailReadReq::eid() const {
  // @@protoc_insertion_point(field_get:pb.TEmailReadReq.eid)
  return eid_;
}
inline void TEmailReadReq::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailReadReq.eid)
}

// -------------------------------------------------------------------

// TEmailBatchReadReq

// optional uint32 typ = 1;
inline bool TEmailBatchReadReq::has_typ() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailBatchReadReq::set_has_typ() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailBatchReadReq::clear_has_typ() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailBatchReadReq::clear_typ() {
  typ_ = 0u;
  clear_has_typ();
}
inline ::google::protobuf::uint32 TEmailBatchReadReq::typ() const {
  // @@protoc_insertion_point(field_get:pb.TEmailBatchReadReq.typ)
  return typ_;
}
inline void TEmailBatchReadReq::set_typ(::google::protobuf::uint32 value) {
  set_has_typ();
  typ_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailBatchReadReq.typ)
}

// -------------------------------------------------------------------

// TEmailReceiveAttachmentReq

// optional uint32 typ = 1;
inline bool TEmailReceiveAttachmentReq::has_typ() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailReceiveAttachmentReq::set_has_typ() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailReceiveAttachmentReq::clear_has_typ() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailReceiveAttachmentReq::clear_typ() {
  typ_ = 0u;
  clear_has_typ();
}
inline ::google::protobuf::uint32 TEmailReceiveAttachmentReq::typ() const {
  // @@protoc_insertion_point(field_get:pb.TEmailReceiveAttachmentReq.typ)
  return typ_;
}
inline void TEmailReceiveAttachmentReq::set_typ(::google::protobuf::uint32 value) {
  set_has_typ();
  typ_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailReceiveAttachmentReq.typ)
}

// optional uint32 eid = 2;
inline bool TEmailReceiveAttachmentReq::has_eid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEmailReceiveAttachmentReq::set_has_eid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEmailReceiveAttachmentReq::clear_has_eid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEmailReceiveAttachmentReq::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
inline ::google::protobuf::uint32 TEmailReceiveAttachmentReq::eid() const {
  // @@protoc_insertion_point(field_get:pb.TEmailReceiveAttachmentReq.eid)
  return eid_;
}
inline void TEmailReceiveAttachmentReq::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailReceiveAttachmentReq.eid)
}

// -------------------------------------------------------------------

// TEmailBatchReceiveAttachmentReq

// optional uint32 typ = 1;
inline bool TEmailBatchReceiveAttachmentReq::has_typ() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailBatchReceiveAttachmentReq::set_has_typ() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailBatchReceiveAttachmentReq::clear_has_typ() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailBatchReceiveAttachmentReq::clear_typ() {
  typ_ = 0u;
  clear_has_typ();
}
inline ::google::protobuf::uint32 TEmailBatchReceiveAttachmentReq::typ() const {
  // @@protoc_insertion_point(field_get:pb.TEmailBatchReceiveAttachmentReq.typ)
  return typ_;
}
inline void TEmailBatchReceiveAttachmentReq::set_typ(::google::protobuf::uint32 value) {
  set_has_typ();
  typ_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailBatchReceiveAttachmentReq.typ)
}

// -------------------------------------------------------------------

// TEmailBatchReceiveAttachmentRsp

// repeated .pb.TEmailSingle mailArr = 1;
inline int TEmailBatchReceiveAttachmentRsp::mailarr_size() const {
  return mailarr_.size();
}
inline void TEmailBatchReceiveAttachmentRsp::clear_mailarr() {
  mailarr_.Clear();
}
inline const ::pb::TEmailSingle& TEmailBatchReceiveAttachmentRsp::mailarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEmailBatchReceiveAttachmentRsp.mailArr)
  return mailarr_.Get(index);
}
inline ::pb::TEmailSingle* TEmailBatchReceiveAttachmentRsp::mutable_mailarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEmailBatchReceiveAttachmentRsp.mailArr)
  return mailarr_.Mutable(index);
}
inline ::pb::TEmailSingle* TEmailBatchReceiveAttachmentRsp::add_mailarr() {
  // @@protoc_insertion_point(field_add:pb.TEmailBatchReceiveAttachmentRsp.mailArr)
  return mailarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >&
TEmailBatchReceiveAttachmentRsp::mailarr() const {
  // @@protoc_insertion_point(field_list:pb.TEmailBatchReceiveAttachmentRsp.mailArr)
  return mailarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >*
TEmailBatchReceiveAttachmentRsp::mutable_mailarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEmailBatchReceiveAttachmentRsp.mailArr)
  return &mailarr_;
}

// repeated .pb.TCommonReward attachArr = 2;
inline int TEmailBatchReceiveAttachmentRsp::attacharr_size() const {
  return attacharr_.size();
}
inline void TEmailBatchReceiveAttachmentRsp::clear_attacharr() {
  attacharr_.Clear();
}
inline const ::pb::TCommonReward& TEmailBatchReceiveAttachmentRsp::attacharr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEmailBatchReceiveAttachmentRsp.attachArr)
  return attacharr_.Get(index);
}
inline ::pb::TCommonReward* TEmailBatchReceiveAttachmentRsp::mutable_attacharr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEmailBatchReceiveAttachmentRsp.attachArr)
  return attacharr_.Mutable(index);
}
inline ::pb::TCommonReward* TEmailBatchReceiveAttachmentRsp::add_attacharr() {
  // @@protoc_insertion_point(field_add:pb.TEmailBatchReceiveAttachmentRsp.attachArr)
  return attacharr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TEmailBatchReceiveAttachmentRsp::attacharr() const {
  // @@protoc_insertion_point(field_list:pb.TEmailBatchReceiveAttachmentRsp.attachArr)
  return attacharr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TEmailBatchReceiveAttachmentRsp::mutable_attacharr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEmailBatchReceiveAttachmentRsp.attachArr)
  return &attacharr_;
}

// -------------------------------------------------------------------

// TEmailCancelCollectReq

// optional uint32 typ = 1;
inline bool TEmailCancelCollectReq::has_typ() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailCancelCollectReq::set_has_typ() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailCancelCollectReq::clear_has_typ() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailCancelCollectReq::clear_typ() {
  typ_ = 0u;
  clear_has_typ();
}
inline ::google::protobuf::uint32 TEmailCancelCollectReq::typ() const {
  // @@protoc_insertion_point(field_get:pb.TEmailCancelCollectReq.typ)
  return typ_;
}
inline void TEmailCancelCollectReq::set_typ(::google::protobuf::uint32 value) {
  set_has_typ();
  typ_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailCancelCollectReq.typ)
}

// optional uint32 eid = 2;
inline bool TEmailCancelCollectReq::has_eid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEmailCancelCollectReq::set_has_eid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEmailCancelCollectReq::clear_has_eid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEmailCancelCollectReq::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
inline ::google::protobuf::uint32 TEmailCancelCollectReq::eid() const {
  // @@protoc_insertion_point(field_get:pb.TEmailCancelCollectReq.eid)
  return eid_;
}
inline void TEmailCancelCollectReq::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailCancelCollectReq.eid)
}

// -------------------------------------------------------------------

// TEmailBatchDelReq

// optional uint32 typ = 1;
inline bool TEmailBatchDelReq::has_typ() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailBatchDelReq::set_has_typ() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailBatchDelReq::clear_has_typ() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailBatchDelReq::clear_typ() {
  typ_ = 0u;
  clear_has_typ();
}
inline ::google::protobuf::uint32 TEmailBatchDelReq::typ() const {
  // @@protoc_insertion_point(field_get:pb.TEmailBatchDelReq.typ)
  return typ_;
}
inline void TEmailBatchDelReq::set_typ(::google::protobuf::uint32 value) {
  set_has_typ();
  typ_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailBatchDelReq.typ)
}

// repeated uint32 eid = 2;
inline int TEmailBatchDelReq::eid_size() const {
  return eid_.size();
}
inline void TEmailBatchDelReq::clear_eid() {
  eid_.Clear();
}
inline ::google::protobuf::uint32 TEmailBatchDelReq::eid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEmailBatchDelReq.eid)
  return eid_.Get(index);
}
inline void TEmailBatchDelReq::set_eid(int index, ::google::protobuf::uint32 value) {
  eid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TEmailBatchDelReq.eid)
}
inline void TEmailBatchDelReq::add_eid(::google::protobuf::uint32 value) {
  eid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TEmailBatchDelReq.eid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TEmailBatchDelReq::eid() const {
  // @@protoc_insertion_point(field_list:pb.TEmailBatchDelReq.eid)
  return eid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TEmailBatchDelReq::mutable_eid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEmailBatchDelReq.eid)
  return &eid_;
}

// -------------------------------------------------------------------

// TEmailCollectionReq

// optional uint32 typ = 1;
inline bool TEmailCollectionReq::has_typ() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailCollectionReq::set_has_typ() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailCollectionReq::clear_has_typ() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailCollectionReq::clear_typ() {
  typ_ = 0u;
  clear_has_typ();
}
inline ::google::protobuf::uint32 TEmailCollectionReq::typ() const {
  // @@protoc_insertion_point(field_get:pb.TEmailCollectionReq.typ)
  return typ_;
}
inline void TEmailCollectionReq::set_typ(::google::protobuf::uint32 value) {
  set_has_typ();
  typ_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailCollectionReq.typ)
}

// optional uint32 eid = 2;
inline bool TEmailCollectionReq::has_eid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEmailCollectionReq::set_has_eid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEmailCollectionReq::clear_has_eid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEmailCollectionReq::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
inline ::google::protobuf::uint32 TEmailCollectionReq::eid() const {
  // @@protoc_insertion_point(field_get:pb.TEmailCollectionReq.eid)
  return eid_;
}
inline void TEmailCollectionReq::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailCollectionReq.eid)
}

// -------------------------------------------------------------------

// TEmailGetCollectionEmailReq

// optional uint32 eid = 1;
inline bool TEmailGetCollectionEmailReq::has_eid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailGetCollectionEmailReq::set_has_eid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailGetCollectionEmailReq::clear_has_eid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailGetCollectionEmailReq::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
inline ::google::protobuf::uint32 TEmailGetCollectionEmailReq::eid() const {
  // @@protoc_insertion_point(field_get:pb.TEmailGetCollectionEmailReq.eid)
  return eid_;
}
inline void TEmailGetCollectionEmailReq::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailGetCollectionEmailReq.eid)
}

// optional uint32 offset = 2;
inline bool TEmailGetCollectionEmailReq::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEmailGetCollectionEmailReq::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEmailGetCollectionEmailReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEmailGetCollectionEmailReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TEmailGetCollectionEmailReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TEmailGetCollectionEmailReq.offset)
  return offset_;
}
inline void TEmailGetCollectionEmailReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailGetCollectionEmailReq.offset)
}

// -------------------------------------------------------------------

// TEmailGetCollectionEmailRsp

// repeated .pb.TEmailSingle collectArr = 1;
inline int TEmailGetCollectionEmailRsp::collectarr_size() const {
  return collectarr_.size();
}
inline void TEmailGetCollectionEmailRsp::clear_collectarr() {
  collectarr_.Clear();
}
inline const ::pb::TEmailSingle& TEmailGetCollectionEmailRsp::collectarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEmailGetCollectionEmailRsp.collectArr)
  return collectarr_.Get(index);
}
inline ::pb::TEmailSingle* TEmailGetCollectionEmailRsp::mutable_collectarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TEmailGetCollectionEmailRsp.collectArr)
  return collectarr_.Mutable(index);
}
inline ::pb::TEmailSingle* TEmailGetCollectionEmailRsp::add_collectarr() {
  // @@protoc_insertion_point(field_add:pb.TEmailGetCollectionEmailRsp.collectArr)
  return collectarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >&
TEmailGetCollectionEmailRsp::collectarr() const {
  // @@protoc_insertion_point(field_list:pb.TEmailGetCollectionEmailRsp.collectArr)
  return collectarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TEmailSingle >*
TEmailGetCollectionEmailRsp::mutable_collectarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEmailGetCollectionEmailRsp.collectArr)
  return &collectarr_;
}

// -------------------------------------------------------------------

// TEmailSendGuildEmailReq

// optional string Title = 1;
inline bool TEmailSendGuildEmailReq::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailSendGuildEmailReq::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailSendGuildEmailReq::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailSendGuildEmailReq::clear_title() {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& TEmailSendGuildEmailReq::title() const {
  // @@protoc_insertion_point(field_get:pb.TEmailSendGuildEmailReq.Title)
  return *title_;
}
inline void TEmailSendGuildEmailReq::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TEmailSendGuildEmailReq.Title)
}
inline void TEmailSendGuildEmailReq::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TEmailSendGuildEmailReq.Title)
}
inline void TEmailSendGuildEmailReq::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TEmailSendGuildEmailReq.Title)
}
inline ::std::string* TEmailSendGuildEmailReq::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TEmailSendGuildEmailReq.Title)
  return title_;
}
inline ::std::string* TEmailSendGuildEmailReq::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TEmailSendGuildEmailReq::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEmailSendGuildEmailReq.Title)
}

// optional string Content = 2;
inline bool TEmailSendGuildEmailReq::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEmailSendGuildEmailReq::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEmailSendGuildEmailReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEmailSendGuildEmailReq::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TEmailSendGuildEmailReq::content() const {
  // @@protoc_insertion_point(field_get:pb.TEmailSendGuildEmailReq.Content)
  return *content_;
}
inline void TEmailSendGuildEmailReq::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TEmailSendGuildEmailReq.Content)
}
inline void TEmailSendGuildEmailReq::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TEmailSendGuildEmailReq.Content)
}
inline void TEmailSendGuildEmailReq::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TEmailSendGuildEmailReq.Content)
}
inline ::std::string* TEmailSendGuildEmailReq::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TEmailSendGuildEmailReq.Content)
  return content_;
}
inline ::std::string* TEmailSendGuildEmailReq::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TEmailSendGuildEmailReq::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEmailSendGuildEmailReq.Content)
}

// repeated uint64 UidArr = 3;
inline int TEmailSendGuildEmailReq::uidarr_size() const {
  return uidarr_.size();
}
inline void TEmailSendGuildEmailReq::clear_uidarr() {
  uidarr_.Clear();
}
inline ::google::protobuf::uint64 TEmailSendGuildEmailReq::uidarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TEmailSendGuildEmailReq.UidArr)
  return uidarr_.Get(index);
}
inline void TEmailSendGuildEmailReq::set_uidarr(int index, ::google::protobuf::uint64 value) {
  uidarr_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TEmailSendGuildEmailReq.UidArr)
}
inline void TEmailSendGuildEmailReq::add_uidarr(::google::protobuf::uint64 value) {
  uidarr_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TEmailSendGuildEmailReq.UidArr)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TEmailSendGuildEmailReq::uidarr() const {
  // @@protoc_insertion_point(field_list:pb.TEmailSendGuildEmailReq.UidArr)
  return uidarr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TEmailSendGuildEmailReq::mutable_uidarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TEmailSendGuildEmailReq.UidArr)
  return &uidarr_;
}

// -------------------------------------------------------------------

// TEmailGetEmailContentReq

// optional uint64 Uid = 1;
inline bool TEmailGetEmailContentReq::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailGetEmailContentReq::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailGetEmailContentReq::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailGetEmailContentReq::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TEmailGetEmailContentReq::uid() const {
  // @@protoc_insertion_point(field_get:pb.TEmailGetEmailContentReq.Uid)
  return uid_;
}
inline void TEmailGetEmailContentReq::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailGetEmailContentReq.Uid)
}

// optional uint32 Eid = 2;
inline bool TEmailGetEmailContentReq::has_eid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TEmailGetEmailContentReq::set_has_eid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TEmailGetEmailContentReq::clear_has_eid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TEmailGetEmailContentReq::clear_eid() {
  eid_ = 0u;
  clear_has_eid();
}
inline ::google::protobuf::uint32 TEmailGetEmailContentReq::eid() const {
  // @@protoc_insertion_point(field_get:pb.TEmailGetEmailContentReq.Eid)
  return eid_;
}
inline void TEmailGetEmailContentReq::set_eid(::google::protobuf::uint32 value) {
  set_has_eid();
  eid_ = value;
  // @@protoc_insertion_point(field_set:pb.TEmailGetEmailContentReq.Eid)
}

// -------------------------------------------------------------------

// TEmailGetEmailContentRsp

// optional string Content = 1;
inline bool TEmailGetEmailContentRsp::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TEmailGetEmailContentRsp::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TEmailGetEmailContentRsp::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TEmailGetEmailContentRsp::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TEmailGetEmailContentRsp::content() const {
  // @@protoc_insertion_point(field_get:pb.TEmailGetEmailContentRsp.Content)
  return *content_;
}
inline void TEmailGetEmailContentRsp::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TEmailGetEmailContentRsp.Content)
}
inline void TEmailGetEmailContentRsp::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TEmailGetEmailContentRsp.Content)
}
inline void TEmailGetEmailContentRsp::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TEmailGetEmailContentRsp.Content)
}
inline ::std::string* TEmailGetEmailContentRsp::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TEmailGetEmailContentRsp.Content)
  return content_;
}
inline ::std::string* TEmailGetEmailContentRsp::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TEmailGetEmailContentRsp::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TEmailGetEmailContentRsp.Content)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fEmail_2eproto__INCLUDED
