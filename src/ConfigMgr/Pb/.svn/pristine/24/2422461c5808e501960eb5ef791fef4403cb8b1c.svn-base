// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/ActNewYearSign.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/ActNewYearSign.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActNewYearSignGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActNewYearSignGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActNewYearSignGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActNewYearSignGetRewardReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fActNewYearSign_2eproto() {
  protobuf_AddDesc_net_2fActNewYearSign_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/ActNewYearSign.proto");
  GOOGLE_CHECK(file != NULL);
  TActNewYearSignGetInfoRsp_descriptor_ = file->message_type(0);
  static const int TActNewYearSignGetInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearSignGetInfoRsp, acculoginnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearSignGetInfoRsp, arrrewardinfo_),
  };
  TActNewYearSignGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActNewYearSignGetInfoRsp_descriptor_,
      TActNewYearSignGetInfoRsp::default_instance_,
      TActNewYearSignGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearSignGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearSignGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActNewYearSignGetInfoRsp));
  TActNewYearSignGetRewardReq_descriptor_ = file->message_type(1);
  static const int TActNewYearSignGetRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearSignGetRewardReq, id_),
  };
  TActNewYearSignGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActNewYearSignGetRewardReq_descriptor_,
      TActNewYearSignGetRewardReq::default_instance_,
      TActNewYearSignGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearSignGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActNewYearSignGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActNewYearSignGetRewardReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fActNewYearSign_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActNewYearSignGetInfoRsp_descriptor_, &TActNewYearSignGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActNewYearSignGetRewardReq_descriptor_, &TActNewYearSignGetRewardReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fActNewYearSign_2eproto() {
  delete TActNewYearSignGetInfoRsp::default_instance_;
  delete TActNewYearSignGetInfoRsp_reflection_;
  delete TActNewYearSignGetRewardReq::default_instance_;
  delete TActNewYearSignGetRewardReq_reflection_;
}

void protobuf_AddDesc_net_2fActNewYearSign_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fOpenActivity_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/ActNewYearSign.proto\022\002pb\032\026net/Open"
    "Activity.proto\032\026net/CommonReward.proto\"a"
    "\n\031TActNewYearSignGetInfoRsp\022\024\n\014AccuLogin"
    "Num\030\001 \001(\r\022.\n\rArrRewardInfo\030\002 \003(\0132\027.pb.TA"
    "ctivityRewardInfo\")\n\033TActNewYearSignGetR"
    "ewardReq\022\n\n\002Id\030\001 \001(\r", 220);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/ActNewYearSign.proto", &protobuf_RegisterTypes);
  TActNewYearSignGetInfoRsp::default_instance_ = new TActNewYearSignGetInfoRsp();
  TActNewYearSignGetRewardReq::default_instance_ = new TActNewYearSignGetRewardReq();
  TActNewYearSignGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TActNewYearSignGetRewardReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fActNewYearSign_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fActNewYearSign_2eproto {
  StaticDescriptorInitializer_net_2fActNewYearSign_2eproto() {
    protobuf_AddDesc_net_2fActNewYearSign_2eproto();
  }
} static_descriptor_initializer_net_2fActNewYearSign_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActNewYearSignGetInfoRsp::kAccuLoginNumFieldNumber;
const int TActNewYearSignGetInfoRsp::kArrRewardInfoFieldNumber;
#endif  // !_MSC_VER

TActNewYearSignGetInfoRsp::TActNewYearSignGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActNewYearSignGetInfoRsp)
}

void TActNewYearSignGetInfoRsp::InitAsDefaultInstance() {
}

TActNewYearSignGetInfoRsp::TActNewYearSignGetInfoRsp(const TActNewYearSignGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActNewYearSignGetInfoRsp)
}

void TActNewYearSignGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  acculoginnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActNewYearSignGetInfoRsp::~TActNewYearSignGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActNewYearSignGetInfoRsp)
  SharedDtor();
}

void TActNewYearSignGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActNewYearSignGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActNewYearSignGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActNewYearSignGetInfoRsp_descriptor_;
}

const TActNewYearSignGetInfoRsp& TActNewYearSignGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActNewYearSign_2eproto();
  return *default_instance_;
}

TActNewYearSignGetInfoRsp* TActNewYearSignGetInfoRsp::default_instance_ = NULL;

TActNewYearSignGetInfoRsp* TActNewYearSignGetInfoRsp::New() const {
  return new TActNewYearSignGetInfoRsp;
}

void TActNewYearSignGetInfoRsp::Clear() {
  acculoginnum_ = 0u;
  arrrewardinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActNewYearSignGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActNewYearSignGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AccuLoginNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &acculoginnum_)));
          set_has_acculoginnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrRewardInfo;
        break;
      }

      // repeated .pb.TActivityRewardInfo ArrRewardInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_ArrRewardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrrewardinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ArrRewardInfo;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActNewYearSignGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActNewYearSignGetInfoRsp)
  return false;
#undef DO_
}

void TActNewYearSignGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActNewYearSignGetInfoRsp)
  // optional uint32 AccuLoginNum = 1;
  if (has_acculoginnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->acculoginnum(), output);
  }

  // repeated .pb.TActivityRewardInfo ArrRewardInfo = 2;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->arrrewardinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActNewYearSignGetInfoRsp)
}

::google::protobuf::uint8* TActNewYearSignGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActNewYearSignGetInfoRsp)
  // optional uint32 AccuLoginNum = 1;
  if (has_acculoginnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->acculoginnum(), target);
  }

  // repeated .pb.TActivityRewardInfo ArrRewardInfo = 2;
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->arrrewardinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActNewYearSignGetInfoRsp)
  return target;
}

int TActNewYearSignGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AccuLoginNum = 1;
    if (has_acculoginnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->acculoginnum());
    }

  }
  // repeated .pb.TActivityRewardInfo ArrRewardInfo = 2;
  total_size += 1 * this->arrrewardinfo_size();
  for (int i = 0; i < this->arrrewardinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrrewardinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActNewYearSignGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActNewYearSignGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActNewYearSignGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActNewYearSignGetInfoRsp::MergeFrom(const TActNewYearSignGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrrewardinfo_.MergeFrom(from.arrrewardinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_acculoginnum()) {
      set_acculoginnum(from.acculoginnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActNewYearSignGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActNewYearSignGetInfoRsp::CopyFrom(const TActNewYearSignGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActNewYearSignGetInfoRsp::IsInitialized() const {

  return true;
}

void TActNewYearSignGetInfoRsp::Swap(TActNewYearSignGetInfoRsp* other) {
  if (other != this) {
    std::swap(acculoginnum_, other->acculoginnum_);
    arrrewardinfo_.Swap(&other->arrrewardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActNewYearSignGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActNewYearSignGetInfoRsp_descriptor_;
  metadata.reflection = TActNewYearSignGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActNewYearSignGetRewardReq::kIdFieldNumber;
#endif  // !_MSC_VER

TActNewYearSignGetRewardReq::TActNewYearSignGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActNewYearSignGetRewardReq)
}

void TActNewYearSignGetRewardReq::InitAsDefaultInstance() {
}

TActNewYearSignGetRewardReq::TActNewYearSignGetRewardReq(const TActNewYearSignGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActNewYearSignGetRewardReq)
}

void TActNewYearSignGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActNewYearSignGetRewardReq::~TActNewYearSignGetRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TActNewYearSignGetRewardReq)
  SharedDtor();
}

void TActNewYearSignGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActNewYearSignGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActNewYearSignGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActNewYearSignGetRewardReq_descriptor_;
}

const TActNewYearSignGetRewardReq& TActNewYearSignGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fActNewYearSign_2eproto();
  return *default_instance_;
}

TActNewYearSignGetRewardReq* TActNewYearSignGetRewardReq::default_instance_ = NULL;

TActNewYearSignGetRewardReq* TActNewYearSignGetRewardReq::New() const {
  return new TActNewYearSignGetRewardReq;
}

void TActNewYearSignGetRewardReq::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActNewYearSignGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActNewYearSignGetRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActNewYearSignGetRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActNewYearSignGetRewardReq)
  return false;
#undef DO_
}

void TActNewYearSignGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActNewYearSignGetRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActNewYearSignGetRewardReq)
}

::google::protobuf::uint8* TActNewYearSignGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActNewYearSignGetRewardReq)
  // optional uint32 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActNewYearSignGetRewardReq)
  return target;
}

int TActNewYearSignGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActNewYearSignGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActNewYearSignGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActNewYearSignGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActNewYearSignGetRewardReq::MergeFrom(const TActNewYearSignGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActNewYearSignGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActNewYearSignGetRewardReq::CopyFrom(const TActNewYearSignGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActNewYearSignGetRewardReq::IsInitialized() const {

  return true;
}

void TActNewYearSignGetRewardReq::Swap(TActNewYearSignGetRewardReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActNewYearSignGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActNewYearSignGetRewardReq_descriptor_;
  metadata.reflection = TActNewYearSignGetRewardReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
