// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossConquer.proto

#ifndef PROTOBUF_net_2fCrossConquer_2eproto__INCLUDED
#define PROTOBUF_net_2fCrossConquer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/Util.pb.h"
#include "net/Alliance.pb.h"
#include "net/Shop.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

class TConquerCityInfo;
class TConquerMapInfo;
class TConquerStageInfo;
class TConquerAllyInfo;
class TConquerUserInfo;
class TConquerGetServerTeamInfoRsp;
class TConquerGetBaseInfoRsp;
class TConquerSetTargetCityReq;
class TConquerSetTargetCityRsp;
class TConquerGetAllyInfoReq;
class TConquerGetAllyInfoRsp;
class TConquerMoveReq;
class TConquerAttackReq;
class TConquerTouchReq;
class TConquerSetUserOptReq;
class TConquerSetArmyOptReq;
class TConquerRankInfo;
class TConquerGetRankListReq;
class TConquerGetRankListRsp;
class TConquerLevelInfo;
class TConquerShopInfoRsp;
class TConquerBaseInfoRsp;

enum EConquerStage {
  ECONQUER_STAGE_INVALID = 0,
  ECONQUER_STAGE_WAIT = 1,
  ECONQUER_STAGE_LOCK = 2,
  ECONQUER_STAGE_WAR = 3
};
bool EConquerStage_IsValid(int value);
const EConquerStage EConquerStage_MIN = ECONQUER_STAGE_INVALID;
const EConquerStage EConquerStage_MAX = ECONQUER_STAGE_WAR;
const int EConquerStage_ARRAYSIZE = EConquerStage_MAX + 1;

const ::google::protobuf::EnumDescriptor* EConquerStage_descriptor();
inline const ::std::string& EConquerStage_Name(EConquerStage value) {
  return ::google::protobuf::internal::NameOfEnum(
    EConquerStage_descriptor(), value);
}
inline bool EConquerStage_Parse(
    const ::std::string& name, EConquerStage* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EConquerStage>(
    EConquerStage_descriptor(), name, value);
}
enum EConquerAdjust {
  NoChange = 0,
  Another = 1,
  Disqualify = 2,
  AutoDefend = 3
};
bool EConquerAdjust_IsValid(int value);
const EConquerAdjust EConquerAdjust_MIN = NoChange;
const EConquerAdjust EConquerAdjust_MAX = AutoDefend;
const int EConquerAdjust_ARRAYSIZE = EConquerAdjust_MAX + 1;

const ::google::protobuf::EnumDescriptor* EConquerAdjust_descriptor();
inline const ::std::string& EConquerAdjust_Name(EConquerAdjust value) {
  return ::google::protobuf::internal::NameOfEnum(
    EConquerAdjust_descriptor(), value);
}
inline bool EConquerAdjust_Parse(
    const ::std::string& name, EConquerAdjust* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EConquerAdjust>(
    EConquerAdjust_descriptor(), name, value);
}
// ===================================================================

/*FOR2LUA
<Record>
	<name>TConquerCityInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerCityInfo : public ::google::protobuf::Message {
 public:
  TConquerCityInfo();
  virtual ~TConquerCityInfo();

  TConquerCityInfo(const TConquerCityInfo& from);

  inline TConquerCityInfo& operator=(const TConquerCityInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerCityInfo& default_instance();

  void Swap(TConquerCityInfo* other);

  // implements Message ----------------------------------------------

  TConquerCityInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerCityInfo& from);
  void MergeFrom(const TConquerCityInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerCityInfo</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional uint64 ConquerAllyId = 2;
  inline bool has_conquerallyid() const;
  inline void clear_conquerallyid();
  static const int kConquerAllyIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerCityInfo</name>
  	<Function>
  		<name>conquerallyid</name>
  		<replaceName>ConquerAllyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_conquerallyid</name>
  		<replaceName>ConquerAllyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_conquerallyid</name>
  		<replaceName>ConquerAllyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 conquerallyid() const;
  inline void set_conquerallyid(::google::protobuf::uint64 value);

  // optional string ConquerAllyName = 3;
  inline bool has_conquerallyname() const;
  inline void clear_conquerallyname();
  static const int kConquerAllyNameFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TConquerCityInfo</name>
  	<Function>
  		<name>conquerallyname</name>
  		<replaceName>ConquerAllyName</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_conquerallyname</name>
  		<replaceName>ConquerAllyName</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_conquerallyname</name>
  		<replaceName>ConquerAllyName</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& conquerallyname() const;
  inline void set_conquerallyname(const ::std::string& value);
  inline void set_conquerallyname(const char* value);
  inline void set_conquerallyname(const char* value, size_t size);
  inline ::std::string* mutable_conquerallyname();
  inline ::std::string* release_conquerallyname();
  inline void set_allocated_conquerallyname(::std::string* conquerallyname);

  // optional uint64 DefAllyId = 4;
  inline bool has_defallyid() const;
  inline void clear_defallyid();
  static const int kDefAllyIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TConquerCityInfo</name>
  	<Function>
  		<name>defallyid</name>
  		<replaceName>DefAllyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defallyid</name>
  		<replaceName>DefAllyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defallyid</name>
  		<replaceName>DefAllyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 defallyid() const;
  inline void set_defallyid(::google::protobuf::uint64 value);

  // optional uint32 AtkAllyCnt = 5;
  inline bool has_atkallycnt() const;
  inline void clear_atkallycnt();
  static const int kAtkAllyCntFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TConquerCityInfo</name>
  	<Function>
  		<name>atkallycnt</name>
  		<replaceName>AtkAllyCnt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_atkallycnt</name>
  		<replaceName>AtkAllyCnt</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_atkallycnt</name>
  		<replaceName>AtkAllyCnt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 atkallycnt() const;
  inline void set_atkallycnt(::google::protobuf::uint32 value);

  // optional uint32 FieldStageID = 7;
  inline bool has_fieldstageid() const;
  inline void clear_fieldstageid();
  static const int kFieldStageIDFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TConquerCityInfo</name>
  	<Function>
  		<name>fieldstageid</name>
  		<replaceName>FieldStageID</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_fieldstageid</name>
  		<replaceName>FieldStageID</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_fieldstageid</name>
  		<replaceName>FieldStageID</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 fieldstageid() const;
  inline void set_fieldstageid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerCityInfo)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_conquerallyid();
  inline void clear_has_conquerallyid();
  inline void set_has_conquerallyname();
  inline void clear_has_conquerallyname();
  inline void set_has_defallyid();
  inline void clear_has_defallyid();
  inline void set_has_atkallycnt();
  inline void clear_has_atkallycnt();
  inline void set_has_fieldstageid();
  inline void clear_has_fieldstageid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 conquerallyid_;
  ::std::string* conquerallyname_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 atkallycnt_;
  ::google::protobuf::uint64 defallyid_;
  ::google::protobuf::uint32 fieldstageid_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerCityInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerMapInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerMapInfo : public ::google::protobuf::Message {
 public:
  TConquerMapInfo();
  virtual ~TConquerMapInfo();

  TConquerMapInfo(const TConquerMapInfo& from);

  inline TConquerMapInfo& operator=(const TConquerMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerMapInfo& default_instance();

  void Swap(TConquerMapInfo* other);

  // implements Message ----------------------------------------------

  TConquerMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerMapInfo& from);
  void MergeFrom(const TConquerMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MapSeqId = 1;
  inline bool has_mapseqid() const;
  inline void clear_mapseqid();
  static const int kMapSeqIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerMapInfo</name>
  	<Function>
  		<name>mapseqid</name>
  		<replaceName>MapSeqId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapseqid</name>
  		<replaceName>MapSeqId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapseqid</name>
  		<replaceName>MapSeqId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 mapseqid() const;
  inline void set_mapseqid(::google::protobuf::uint32 value);

  // repeated .pb.TConquerCityInfo ArrCityInfo = 2;
  inline int arrcityinfo_size() const;
  inline void clear_arrcityinfo();
  static const int kArrCityInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerMapInfo</name>
  	<Function>
  		<name>arrcityinfo</name>
  		<replaceName>ArrCityInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrcityinfo</name>
  		<replaceName>ArrCityInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrcityinfo</name>
  		<replaceName>ArrCityInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrcityinfo</name>
  		<replaceName>ArrCityInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrcityinfo_size</name>
  		<replaceName>ArrCityInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TConquerCityInfo& arrcityinfo(int index) const;
  inline ::pb::TConquerCityInfo* mutable_arrcityinfo(int index);
  inline ::pb::TConquerCityInfo* add_arrcityinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TConquerCityInfo >&
      arrcityinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TConquerCityInfo >*
      mutable_arrcityinfo();

  // @@protoc_insertion_point(class_scope:pb.TConquerMapInfo)
 private:
  inline void set_has_mapseqid();
  inline void clear_has_mapseqid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TConquerCityInfo > arrcityinfo_;
  ::google::protobuf::uint32 mapseqid_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerMapInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerStageInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerStageInfo : public ::google::protobuf::Message {
 public:
  TConquerStageInfo();
  virtual ~TConquerStageInfo();

  TConquerStageInfo(const TConquerStageInfo& from);

  inline TConquerStageInfo& operator=(const TConquerStageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerStageInfo& default_instance();

  void Swap(TConquerStageInfo* other);

  // implements Message ----------------------------------------------

  TConquerStageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerStageInfo& from);
  void MergeFrom(const TConquerStageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.EConquerStage CurStage = 2;
  inline bool has_curstage() const;
  inline void clear_curstage();
  static const int kCurStageFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerStageInfo</name>
  	<Function>
  		<name>curstage</name>
  		<replaceName>CurStage</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curstage</name>
  		<replaceName>CurStage</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curstage</name>
  		<replaceName>CurStage</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EConquerStage curstage() const;
  inline void set_curstage(::pb::EConquerStage value);

  // optional int64 LockStageTime = 3;
  inline bool has_lockstagetime() const;
  inline void clear_lockstagetime();
  static const int kLockStageTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TConquerStageInfo</name>
  	<Function>
  		<name>lockstagetime</name>
  		<replaceName>LockStageTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_lockstagetime</name>
  		<replaceName>LockStageTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_lockstagetime</name>
  		<replaceName>LockStageTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 lockstagetime() const;
  inline void set_lockstagetime(::google::protobuf::int64 value);

  // optional int64 WarStageTime = 4;
  inline bool has_warstagetime() const;
  inline void clear_warstagetime();
  static const int kWarStageTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TConquerStageInfo</name>
  	<Function>
  		<name>warstagetime</name>
  		<replaceName>WarStageTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_warstagetime</name>
  		<replaceName>WarStageTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warstagetime</name>
  		<replaceName>WarStageTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int64 warstagetime() const;
  inline void set_warstagetime(::google::protobuf::int64 value);

  // optional int32 WarDuration = 5;
  inline bool has_warduration() const;
  inline void clear_warduration();
  static const int kWarDurationFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TConquerStageInfo</name>
  	<Function>
  		<name>warduration</name>
  		<replaceName>WarDuration</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_warduration</name>
  		<replaceName>WarDuration</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_warduration</name>
  		<replaceName>WarDuration</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 warduration() const;
  inline void set_warduration(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerStageInfo)
 private:
  inline void set_has_curstage();
  inline void clear_has_curstage();
  inline void set_has_lockstagetime();
  inline void clear_has_lockstagetime();
  inline void set_has_warstagetime();
  inline void clear_has_warstagetime();
  inline void set_has_warduration();
  inline void clear_has_warduration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 lockstagetime_;
  int curstage_;
  ::google::protobuf::int32 warduration_;
  ::google::protobuf::int64 warstagetime_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerStageInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerAllyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerAllyInfo : public ::google::protobuf::Message {
 public:
  TConquerAllyInfo();
  virtual ~TConquerAllyInfo();

  TConquerAllyInfo(const TConquerAllyInfo& from);

  inline TConquerAllyInfo& operator=(const TConquerAllyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerAllyInfo& default_instance();

  void Swap(TConquerAllyInfo* other);

  // implements Message ----------------------------------------------

  TConquerAllyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerAllyInfo& from);
  void MergeFrom(const TConquerAllyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ConquerLevel = 1;
  inline bool has_conquerlevel() const;
  inline void clear_conquerlevel();
  static const int kConquerLevelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerAllyInfo</name>
  	<Function>
  		<name>conquerlevel</name>
  		<replaceName>ConquerLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_conquerlevel</name>
  		<replaceName>ConquerLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_conquerlevel</name>
  		<replaceName>ConquerLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 conquerlevel() const;
  inline void set_conquerlevel(::google::protobuf::uint32 value);

  // optional uint64 AllyId = 2;
  inline bool has_allyid() const;
  inline void clear_allyid();
  static const int kAllyIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerAllyInfo</name>
  	<Function>
  		<name>allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allyid</name>
  		<replaceName>AllyId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 allyid() const;
  inline void set_allyid(::google::protobuf::uint64 value);

  // optional uint32 ConquerCityId = 3;
  inline bool has_conquercityid() const;
  inline void clear_conquercityid();
  static const int kConquerCityIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TConquerAllyInfo</name>
  	<Function>
  		<name>conquercityid</name>
  		<replaceName>ConquerCityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_conquercityid</name>
  		<replaceName>ConquerCityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_conquercityid</name>
  		<replaceName>ConquerCityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 conquercityid() const;
  inline void set_conquercityid(::google::protobuf::uint32 value);

  // optional uint32 TargetCityId = 4;
  inline bool has_targetcityid() const;
  inline void clear_targetcityid();
  static const int kTargetCityIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TConquerAllyInfo</name>
  	<Function>
  		<name>targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetcityid() const;
  inline void set_targetcityid(::google::protobuf::uint32 value);

  // optional uint32 CurrentFieldId = 5;
  inline bool has_currentfieldid() const;
  inline void clear_currentfieldid();
  static const int kCurrentFieldIdFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TConquerAllyInfo</name>
  	<Function>
  		<name>currentfieldid</name>
  		<replaceName>CurrentFieldId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_currentfieldid</name>
  		<replaceName>CurrentFieldId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_currentfieldid</name>
  		<replaceName>CurrentFieldId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 currentfieldid() const;
  inline void set_currentfieldid(::google::protobuf::uint32 value);

  // optional .pb.EConquerAdjust AdjustResult = 6;
  inline bool has_adjustresult() const;
  inline void clear_adjustresult();
  static const int kAdjustResultFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TConquerAllyInfo</name>
  	<Function>
  		<name>adjustresult</name>
  		<replaceName>AdjustResult</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_adjustresult</name>
  		<replaceName>AdjustResult</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_adjustresult</name>
  		<replaceName>AdjustResult</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::pb::EConquerAdjust adjustresult() const;
  inline void set_adjustresult(::pb::EConquerAdjust value);

  // @@protoc_insertion_point(class_scope:pb.TConquerAllyInfo)
 private:
  inline void set_has_conquerlevel();
  inline void clear_has_conquerlevel();
  inline void set_has_allyid();
  inline void clear_has_allyid();
  inline void set_has_conquercityid();
  inline void clear_has_conquercityid();
  inline void set_has_targetcityid();
  inline void clear_has_targetcityid();
  inline void set_has_currentfieldid();
  inline void clear_has_currentfieldid();
  inline void set_has_adjustresult();
  inline void clear_has_adjustresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 allyid_;
  ::google::protobuf::uint32 conquerlevel_;
  ::google::protobuf::uint32 conquercityid_;
  ::google::protobuf::uint32 targetcityid_;
  ::google::protobuf::uint32 currentfieldid_;
  int adjustresult_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerAllyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerUserInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerUserInfo : public ::google::protobuf::Message {
 public:
  TConquerUserInfo();
  virtual ~TConquerUserInfo();

  TConquerUserInfo(const TConquerUserInfo& from);

  inline TConquerUserInfo& operator=(const TConquerUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerUserInfo& default_instance();

  void Swap(TConquerUserInfo* other);

  // implements Message ----------------------------------------------

  TConquerUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerUserInfo& from);
  void MergeFrom(const TConquerUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 UserId = 2;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUserIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerUserInfo</name>
  	<Function>
  		<name>userid</name>
  		<replaceName>UserId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userid</name>
  		<replaceName>UserId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userid</name>
  		<replaceName>UserId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional uint32 Score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TConquerUserInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerUserInfo)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 score_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerUserInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerGetServerTeamInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerGetServerTeamInfoRsp : public ::google::protobuf::Message {
 public:
  TConquerGetServerTeamInfoRsp();
  virtual ~TConquerGetServerTeamInfoRsp();

  TConquerGetServerTeamInfoRsp(const TConquerGetServerTeamInfoRsp& from);

  inline TConquerGetServerTeamInfoRsp& operator=(const TConquerGetServerTeamInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerGetServerTeamInfoRsp& default_instance();

  void Swap(TConquerGetServerTeamInfoRsp* other);

  // implements Message ----------------------------------------------

  TConquerGetServerTeamInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerGetServerTeamInfoRsp& from);
  void MergeFrom(const TConquerGetServerTeamInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ServerTeamId = 1;
  inline bool has_serverteamid() const;
  inline void clear_serverteamid();
  static const int kServerTeamIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetServerTeamInfoRsp</name>
  	<Function>
  		<name>serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_serverteamid</name>
  		<replaceName>ServerTeamId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 serverteamid() const;
  inline void set_serverteamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerGetServerTeamInfoRsp)
 private:
  inline void set_has_serverteamid();
  inline void clear_has_serverteamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 serverteamid_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerGetServerTeamInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerGetBaseInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerGetBaseInfoRsp : public ::google::protobuf::Message {
 public:
  TConquerGetBaseInfoRsp();
  virtual ~TConquerGetBaseInfoRsp();

  TConquerGetBaseInfoRsp(const TConquerGetBaseInfoRsp& from);

  inline TConquerGetBaseInfoRsp& operator=(const TConquerGetBaseInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerGetBaseInfoRsp& default_instance();

  void Swap(TConquerGetBaseInfoRsp* other);

  // implements Message ----------------------------------------------

  TConquerGetBaseInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerGetBaseInfoRsp& from);
  void MergeFrom(const TConquerGetBaseInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool Open = 1;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetBaseInfoRsp</name>
  	<Function>
  		<name>open</name>
  		<replaceName>Open</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_open</name>
  		<replaceName>Open</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_open</name>
  		<replaceName>Open</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool open() const;
  inline void set_open(bool value);

  // optional .pb.TConquerAllyInfo AllyInfo = 2;
  inline bool has_allyinfo() const;
  inline void clear_allyinfo();
  static const int kAllyInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetBaseInfoRsp</name>
  	<Function>
  		<name>allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_allyinfo</name>
  		<replaceName>AllyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TConquerAllyInfo& allyinfo() const;
  inline ::pb::TConquerAllyInfo* mutable_allyinfo();
  inline ::pb::TConquerAllyInfo* release_allyinfo();
  inline void set_allocated_allyinfo(::pb::TConquerAllyInfo* allyinfo);

  // optional .pb.TConquerUserInfo UserInfo = 3;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetBaseInfoRsp</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TConquerUserInfo& userinfo() const;
  inline ::pb::TConquerUserInfo* mutable_userinfo();
  inline ::pb::TConquerUserInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TConquerUserInfo* userinfo);

  // @@protoc_insertion_point(class_scope:pb.TConquerGetBaseInfoRsp)
 private:
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_allyinfo();
  inline void clear_has_allyinfo();
  inline void set_has_userinfo();
  inline void clear_has_userinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TConquerAllyInfo* allyinfo_;
  ::pb::TConquerUserInfo* userinfo_;
  bool open_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerGetBaseInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerSetTargetCityReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerSetTargetCityReq : public ::google::protobuf::Message {
 public:
  TConquerSetTargetCityReq();
  virtual ~TConquerSetTargetCityReq();

  TConquerSetTargetCityReq(const TConquerSetTargetCityReq& from);

  inline TConquerSetTargetCityReq& operator=(const TConquerSetTargetCityReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerSetTargetCityReq& default_instance();

  void Swap(TConquerSetTargetCityReq* other);

  // implements Message ----------------------------------------------

  TConquerSetTargetCityReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerSetTargetCityReq& from);
  void MergeFrom(const TConquerSetTargetCityReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TargetCityId = 1;
  inline bool has_targetcityid() const;
  inline void clear_targetcityid();
  static const int kTargetCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerSetTargetCityReq</name>
  	<Function>
  		<name>targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetcityid() const;
  inline void set_targetcityid(::google::protobuf::uint32 value);

  // optional uint64 GuildId = 2;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerSetTargetCityReq</name>
  	<Function>
  		<name>guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildid</name>
  		<replaceName>GuildId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional uint32 GuildPost = 3;
  inline bool has_guildpost() const;
  inline void clear_guildpost();
  static const int kGuildPostFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TConquerSetTargetCityReq</name>
  	<Function>
  		<name>guildpost</name>
  		<replaceName>GuildPost</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_guildpost</name>
  		<replaceName>GuildPost</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_guildpost</name>
  		<replaceName>GuildPost</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 guildpost() const;
  inline void set_guildpost(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerSetTargetCityReq)
 private:
  inline void set_has_targetcityid();
  inline void clear_has_targetcityid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_guildpost();
  inline void clear_has_guildpost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::uint32 targetcityid_;
  ::google::protobuf::uint32 guildpost_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerSetTargetCityReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerSetTargetCityRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerSetTargetCityRsp : public ::google::protobuf::Message {
 public:
  TConquerSetTargetCityRsp();
  virtual ~TConquerSetTargetCityRsp();

  TConquerSetTargetCityRsp(const TConquerSetTargetCityRsp& from);

  inline TConquerSetTargetCityRsp& operator=(const TConquerSetTargetCityRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerSetTargetCityRsp& default_instance();

  void Swap(TConquerSetTargetCityRsp* other);

  // implements Message ----------------------------------------------

  TConquerSetTargetCityRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerSetTargetCityRsp& from);
  void MergeFrom(const TConquerSetTargetCityRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 TargetCityId = 1;
  inline bool has_targetcityid() const;
  inline void clear_targetcityid();
  static const int kTargetCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerSetTargetCityRsp</name>
  	<Function>
  		<name>targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetcityid</name>
  		<replaceName>TargetCityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 targetcityid() const;
  inline void set_targetcityid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerSetTargetCityRsp)
 private:
  inline void set_has_targetcityid();
  inline void clear_has_targetcityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 targetcityid_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerSetTargetCityRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerGetAllyInfoReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerGetAllyInfoReq : public ::google::protobuf::Message {
 public:
  TConquerGetAllyInfoReq();
  virtual ~TConquerGetAllyInfoReq();

  TConquerGetAllyInfoReq(const TConquerGetAllyInfoReq& from);

  inline TConquerGetAllyInfoReq& operator=(const TConquerGetAllyInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerGetAllyInfoReq& default_instance();

  void Swap(TConquerGetAllyInfoReq* other);

  // implements Message ----------------------------------------------

  TConquerGetAllyInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerGetAllyInfoReq& from);
  void MergeFrom(const TConquerGetAllyInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetAllyInfoReq</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerGetAllyInfoReq)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 cityid_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerGetAllyInfoReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerGetAllyInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerGetAllyInfoRsp : public ::google::protobuf::Message {
 public:
  TConquerGetAllyInfoRsp();
  virtual ~TConquerGetAllyInfoRsp();

  TConquerGetAllyInfoRsp(const TConquerGetAllyInfoRsp& from);

  inline TConquerGetAllyInfoRsp& operator=(const TConquerGetAllyInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerGetAllyInfoRsp& default_instance();

  void Swap(TConquerGetAllyInfoRsp* other);

  // implements Message ----------------------------------------------

  TConquerGetAllyInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerGetAllyInfoRsp& from);
  void MergeFrom(const TConquerGetAllyInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 CityId = 1;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetAllyInfoRsp</name>
  	<Function>
  		<name>cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_cityid</name>
  		<replaceName>CityId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);

  // optional .pb.TAllianceSimpleInfo DefAllyInfo = 2;
  inline bool has_defallyinfo() const;
  inline void clear_defallyinfo();
  static const int kDefAllyInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetAllyInfoRsp</name>
  	<Function>
  		<name>defallyinfo</name>
  		<replaceName>DefAllyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_defallyinfo</name>
  		<replaceName>DefAllyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_defallyinfo</name>
  		<replaceName>DefAllyInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_defallyinfo</name>
  		<replaceName>DefAllyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceSimpleInfo& defallyinfo() const;
  inline ::pb::TAllianceSimpleInfo* mutable_defallyinfo();
  inline ::pb::TAllianceSimpleInfo* release_defallyinfo();
  inline void set_allocated_defallyinfo(::pb::TAllianceSimpleInfo* defallyinfo);

  // repeated .pb.TAllianceSimpleInfo ArrAtkAllyInfo = 3;
  inline int arratkallyinfo_size() const;
  inline void clear_arratkallyinfo();
  static const int kArrAtkAllyInfoFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetAllyInfoRsp</name>
  	<Function>
  		<name>arratkallyinfo</name>
  		<replaceName>ArrAtkAllyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arratkallyinfo</name>
  		<replaceName>ArrAtkAllyInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arratkallyinfo</name>
  		<replaceName>ArrAtkAllyInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arratkallyinfo</name>
  		<replaceName>ArrAtkAllyInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arratkallyinfo_size</name>
  		<replaceName>ArrAtkAllyInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TAllianceSimpleInfo& arratkallyinfo(int index) const;
  inline ::pb::TAllianceSimpleInfo* mutable_arratkallyinfo(int index);
  inline ::pb::TAllianceSimpleInfo* add_arratkallyinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfo >&
      arratkallyinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfo >*
      mutable_arratkallyinfo();

  // @@protoc_insertion_point(class_scope:pb.TConquerGetAllyInfoRsp)
 private:
  inline void set_has_cityid();
  inline void clear_has_cityid();
  inline void set_has_defallyinfo();
  inline void clear_has_defallyinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TAllianceSimpleInfo* defallyinfo_;
  ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfo > arratkallyinfo_;
  ::google::protobuf::uint32 cityid_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerGetAllyInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerMoveReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerMoveReq : public ::google::protobuf::Message {
 public:
  TConquerMoveReq();
  virtual ~TConquerMoveReq();

  TConquerMoveReq(const TConquerMoveReq& from);

  inline TConquerMoveReq& operator=(const TConquerMoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerMoveReq& default_instance();

  void Swap(TConquerMoveReq* other);

  // implements Message ----------------------------------------------

  TConquerMoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerMoveReq& from);
  void MergeFrom(const TConquerMoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PbVector2_Int TargetPos = 1;
  inline bool has_targetpos() const;
  inline void clear_targetpos();
  static const int kTargetPosFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerMoveReq</name>
  	<Function>
  		<name>targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetpos</name>
  		<replaceName>TargetPos</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& targetpos() const;
  inline ::pb::PbVector2_Int* mutable_targetpos();
  inline ::pb::PbVector2_Int* release_targetpos();
  inline void set_allocated_targetpos(::pb::PbVector2_Int* targetpos);

  // @@protoc_insertion_point(class_scope:pb.TConquerMoveReq)
 private:
  inline void set_has_targetpos();
  inline void clear_has_targetpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::PbVector2_Int* targetpos_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerMoveReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerAttackReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerAttackReq : public ::google::protobuf::Message {
 public:
  TConquerAttackReq();
  virtual ~TConquerAttackReq();

  TConquerAttackReq(const TConquerAttackReq& from);

  inline TConquerAttackReq& operator=(const TConquerAttackReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerAttackReq& default_instance();

  void Swap(TConquerAttackReq* other);

  // implements Message ----------------------------------------------

  TConquerAttackReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerAttackReq& from);
  void MergeFrom(const TConquerAttackReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TargetId = 1;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerAttackReq</name>
  	<Function>
  		<name>targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerAttackReq)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetid_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerAttackReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerTouchReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerTouchReq : public ::google::protobuf::Message {
 public:
  TConquerTouchReq();
  virtual ~TConquerTouchReq();

  TConquerTouchReq(const TConquerTouchReq& from);

  inline TConquerTouchReq& operator=(const TConquerTouchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerTouchReq& default_instance();

  void Swap(TConquerTouchReq* other);

  // implements Message ----------------------------------------------

  TConquerTouchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerTouchReq& from);
  void MergeFrom(const TConquerTouchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TargetBid = 1;
  inline bool has_targetbid() const;
  inline void clear_targetbid();
  static const int kTargetBidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerTouchReq</name>
  	<Function>
  		<name>targetbid</name>
  		<replaceName>TargetBid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetbid</name>
  		<replaceName>TargetBid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetbid</name>
  		<replaceName>TargetBid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetbid() const;
  inline void set_targetbid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerTouchReq)
 private:
  inline void set_has_targetbid();
  inline void clear_has_targetbid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetbid_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerTouchReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerSetUserOptReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerSetUserOptReq : public ::google::protobuf::Message {
 public:
  TConquerSetUserOptReq();
  virtual ~TConquerSetUserOptReq();

  TConquerSetUserOptReq(const TConquerSetUserOptReq& from);

  inline TConquerSetUserOptReq& operator=(const TConquerSetUserOptReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerSetUserOptReq& default_instance();

  void Swap(TConquerSetUserOptReq* other);

  // implements Message ----------------------------------------------

  TConquerSetUserOptReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerSetUserOptReq& from);
  void MergeFrom(const TConquerSetUserOptReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 TargetId = 1;
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerSetUserOptReq</name>
  	<Function>
  		<name>targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_targetid</name>
  		<replaceName>TargetId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // optional bool AutoAttack = 2;
  inline bool has_autoattack() const;
  inline void clear_autoattack();
  static const int kAutoAttackFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerSetUserOptReq</name>
  	<Function>
  		<name>autoattack</name>
  		<replaceName>AutoAttack</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_autoattack</name>
  		<replaceName>AutoAttack</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_autoattack</name>
  		<replaceName>AutoAttack</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool autoattack() const;
  inline void set_autoattack(bool value);

  // @@protoc_insertion_point(class_scope:pb.TConquerSetUserOptReq)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_autoattack();
  inline void clear_has_autoattack();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetid_;
  bool autoattack_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerSetUserOptReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerSetArmyOptReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerSetArmyOptReq : public ::google::protobuf::Message {
 public:
  TConquerSetArmyOptReq();
  virtual ~TConquerSetArmyOptReq();

  TConquerSetArmyOptReq(const TConquerSetArmyOptReq& from);

  inline TConquerSetArmyOptReq& operator=(const TConquerSetArmyOptReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerSetArmyOptReq& default_instance();

  void Swap(TConquerSetArmyOptReq* other);

  // implements Message ----------------------------------------------

  TConquerSetArmyOptReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerSetArmyOptReq& from);
  void MergeFrom(const TConquerSetArmyOptReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 GoalId = 1;
  inline bool has_goalid() const;
  inline void clear_goalid();
  static const int kGoalIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerSetArmyOptReq</name>
  	<Function>
  		<name>goalid</name>
  		<replaceName>GoalId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_goalid</name>
  		<replaceName>GoalId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_goalid</name>
  		<replaceName>GoalId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 goalid() const;
  inline void set_goalid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerSetArmyOptReq)
 private:
  inline void set_has_goalid();
  inline void clear_has_goalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 goalid_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerSetArmyOptReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerRankInfo : public ::google::protobuf::Message {
 public:
  TConquerRankInfo();
  virtual ~TConquerRankInfo();

  TConquerRankInfo(const TConquerRankInfo& from);

  inline TConquerRankInfo& operator=(const TConquerRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerRankInfo& default_instance();

  void Swap(TConquerRankInfo* other);

  // implements Message ----------------------------------------------

  TConquerRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerRankInfo& from);
  void MergeFrom(const TConquerRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 Uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerRankInfo</name>
  	<Function>
  		<name>uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uid</name>
  		<replaceName>Uid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 uid() const;
  inline void set_uid(::google::protobuf::uint64 value);

  // optional string Uname = 2;
  inline bool has_uname() const;
  inline void clear_uname();
  static const int kUnameFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerRankInfo</name>
  	<Function>
  		<name>uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_uname</name>
  		<replaceName>Uname</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& uname() const;
  inline void set_uname(const ::std::string& value);
  inline void set_uname(const char* value);
  inline void set_uname(const char* value, size_t size);
  inline ::std::string* mutable_uname();
  inline ::std::string* release_uname();
  inline void set_allocated_uname(::std::string* uname);

  // optional uint32 ImageHtid = 3;
  inline bool has_imagehtid() const;
  inline void clear_imagehtid();
  static const int kImageHtidFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TConquerRankInfo</name>
  	<Function>
  		<name>imagehtid</name>
  		<replaceName>ImageHtid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_imagehtid</name>
  		<replaceName>ImageHtid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_imagehtid</name>
  		<replaceName>ImageHtid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 imagehtid() const;
  inline void set_imagehtid(::google::protobuf::uint32 value);

  // optional uint32 ImageFrameTid = 4;
  inline bool has_imageframetid() const;
  inline void clear_imageframetid();
  static const int kImageFrameTidFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TConquerRankInfo</name>
  	<Function>
  		<name>imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_imageframetid</name>
  		<replaceName>ImageFrameTid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 imageframetid() const;
  inline void set_imageframetid(::google::protobuf::uint32 value);

  // optional uint32 Title = 5;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TConquerRankInfo</name>
  	<Function>
  		<name>title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_title</name>
  		<replaceName>Title</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 title() const;
  inline void set_title(::google::protobuf::uint32 value);

  // optional uint32 Rank = 10;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TConquerRankInfo</name>
  	<Function>
  		<name>rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rank</name>
  		<replaceName>Rank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 Score = 11;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TConquerRankInfo</name>
  	<Function>
  		<name>score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_score</name>
  		<replaceName>Score</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 KillCnt = 12;
  inline bool has_killcnt() const;
  inline void clear_killcnt();
  static const int kKillCntFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TConquerRankInfo</name>
  	<Function>
  		<name>killcnt</name>
  		<replaceName>KillCnt</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_killcnt</name>
  		<replaceName>KillCnt</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_killcnt</name>
  		<replaceName>KillCnt</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 killcnt() const;
  inline void set_killcnt(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerRankInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_uname();
  inline void clear_has_uname();
  inline void set_has_imagehtid();
  inline void clear_has_imagehtid();
  inline void set_has_imageframetid();
  inline void clear_has_imageframetid();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_killcnt();
  inline void clear_has_killcnt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 uid_;
  ::std::string* uname_;
  ::google::protobuf::uint32 imagehtid_;
  ::google::protobuf::uint32 imageframetid_;
  ::google::protobuf::uint32 title_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 killcnt_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerGetRankListReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerGetRankListReq : public ::google::protobuf::Message {
 public:
  TConquerGetRankListReq();
  virtual ~TConquerGetRankListReq();

  TConquerGetRankListReq(const TConquerGetRankListReq& from);

  inline TConquerGetRankListReq& operator=(const TConquerGetRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerGetRankListReq& default_instance();

  void Swap(TConquerGetRankListReq* other);

  // implements Message ----------------------------------------------

  TConquerGetRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerGetRankListReq& from);
  void MergeFrom(const TConquerGetRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetRankListReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetRankListReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerGetRankListReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerGetRankListReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerGetRankListRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerGetRankListRsp : public ::google::protobuf::Message {
 public:
  TConquerGetRankListRsp();
  virtual ~TConquerGetRankListRsp();

  TConquerGetRankListRsp(const TConquerGetRankListRsp& from);

  inline TConquerGetRankListRsp& operator=(const TConquerGetRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerGetRankListRsp& default_instance();

  void Swap(TConquerGetRankListRsp* other);

  // implements Message ----------------------------------------------

  TConquerGetRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerGetRankListRsp& from);
  void MergeFrom(const TConquerGetRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TConquerRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetRankListRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TConquerRankInfo& rankarr(int index) const;
  inline ::pb::TConquerRankInfo* mutable_rankarr(int index);
  inline ::pb::TConquerRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TConquerRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TConquerRankInfo >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerGetRankListRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerGetRankListRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TConquerRankInfo > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerGetRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerLevelInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerLevelInfo : public ::google::protobuf::Message {
 public:
  TConquerLevelInfo();
  virtual ~TConquerLevelInfo();

  TConquerLevelInfo(const TConquerLevelInfo& from);

  inline TConquerLevelInfo& operator=(const TConquerLevelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerLevelInfo& default_instance();

  void Swap(TConquerLevelInfo* other);

  // implements Message ----------------------------------------------

  TConquerLevelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerLevelInfo& from);
  void MergeFrom(const TConquerLevelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 ConquerLevel = 1;
  inline bool has_conquerlevel() const;
  inline void clear_conquerlevel();
  static const int kConquerLevelFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerLevelInfo</name>
  	<Function>
  		<name>conquerlevel</name>
  		<replaceName>ConquerLevel</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_conquerlevel</name>
  		<replaceName>ConquerLevel</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_conquerlevel</name>
  		<replaceName>ConquerLevel</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 conquerlevel() const;
  inline void set_conquerlevel(::google::protobuf::uint32 value);

  // optional uint64 Deadline = 2;
  inline bool has_deadline() const;
  inline void clear_deadline();
  static const int kDeadlineFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerLevelInfo</name>
  	<Function>
  		<name>deadline</name>
  		<replaceName>Deadline</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_deadline</name>
  		<replaceName>Deadline</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_deadline</name>
  		<replaceName>Deadline</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 deadline() const;
  inline void set_deadline(::google::protobuf::uint64 value);

  // optional uint64 SeasonTime = 3;
  inline bool has_seasontime() const;
  inline void clear_seasontime();
  static const int kSeasonTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TConquerLevelInfo</name>
  	<Function>
  		<name>seasontime</name>
  		<replaceName>SeasonTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_seasontime</name>
  		<replaceName>SeasonTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_seasontime</name>
  		<replaceName>SeasonTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 seasontime() const;
  inline void set_seasontime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TConquerLevelInfo)
 private:
  inline void set_has_conquerlevel();
  inline void clear_has_conquerlevel();
  inline void set_has_deadline();
  inline void clear_has_deadline();
  inline void set_has_seasontime();
  inline void clear_has_seasontime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 deadline_;
  ::google::protobuf::uint64 seasontime_;
  ::google::protobuf::uint32 conquerlevel_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerLevelInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerShopInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerShopInfoRsp : public ::google::protobuf::Message {
 public:
  TConquerShopInfoRsp();
  virtual ~TConquerShopInfoRsp();

  TConquerShopInfoRsp(const TConquerShopInfoRsp& from);

  inline TConquerShopInfoRsp& operator=(const TConquerShopInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerShopInfoRsp& default_instance();

  void Swap(TConquerShopInfoRsp* other);

  // implements Message ----------------------------------------------

  TConquerShopInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerShopInfoRsp& from);
  void MergeFrom(const TConquerShopInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TShopSingleShopInfo SingleShopArray = 1;
  inline int singleshoparray_size() const;
  inline void clear_singleshoparray();
  static const int kSingleShopArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerShopInfoRsp</name>
  	<Function>
  		<name>singleshoparray</name>
  		<replaceName>SingleShopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_singleshoparray</name>
  		<replaceName>SingleShopArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_singleshoparray</name>
  		<replaceName>SingleShopArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_singleshoparray</name>
  		<replaceName>SingleShopArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>singleshoparray_size</name>
  		<replaceName>SingleShopArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TShopSingleShopInfo& singleshoparray(int index) const;
  inline ::pb::TShopSingleShopInfo* mutable_singleshoparray(int index);
  inline ::pb::TShopSingleShopInfo* add_singleshoparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TShopSingleShopInfo >&
      singleshoparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TShopSingleShopInfo >*
      mutable_singleshoparray();

  // optional .pb.TConquerLevelInfo ConquerLevelInfo = 2;
  inline bool has_conquerlevelinfo() const;
  inline void clear_conquerlevelinfo();
  static const int kConquerLevelInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerShopInfoRsp</name>
  	<Function>
  		<name>conquerlevelinfo</name>
  		<replaceName>ConquerLevelInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_conquerlevelinfo</name>
  		<replaceName>ConquerLevelInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_conquerlevelinfo</name>
  		<replaceName>ConquerLevelInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_conquerlevelinfo</name>
  		<replaceName>ConquerLevelInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TConquerLevelInfo& conquerlevelinfo() const;
  inline ::pb::TConquerLevelInfo* mutable_conquerlevelinfo();
  inline ::pb::TConquerLevelInfo* release_conquerlevelinfo();
  inline void set_allocated_conquerlevelinfo(::pb::TConquerLevelInfo* conquerlevelinfo);

  // @@protoc_insertion_point(class_scope:pb.TConquerShopInfoRsp)
 private:
  inline void set_has_conquerlevelinfo();
  inline void clear_has_conquerlevelinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TShopSingleShopInfo > singleshoparray_;
  ::pb::TConquerLevelInfo* conquerlevelinfo_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerShopInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TConquerBaseInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/CrossConquer.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TConquerBaseInfoRsp : public ::google::protobuf::Message {
 public:
  TConquerBaseInfoRsp();
  virtual ~TConquerBaseInfoRsp();

  TConquerBaseInfoRsp(const TConquerBaseInfoRsp& from);

  inline TConquerBaseInfoRsp& operator=(const TConquerBaseInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TConquerBaseInfoRsp& default_instance();

  void Swap(TConquerBaseInfoRsp* other);

  // implements Message ----------------------------------------------

  TConquerBaseInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TConquerBaseInfoRsp& from);
  void MergeFrom(const TConquerBaseInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TConquerStageInfo StageInfo = 1;
  inline bool has_stageinfo() const;
  inline void clear_stageinfo();
  static const int kStageInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TConquerBaseInfoRsp</name>
  	<Function>
  		<name>stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_stageinfo</name>
  		<replaceName>StageInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TConquerStageInfo& stageinfo() const;
  inline ::pb::TConquerStageInfo* mutable_stageinfo();
  inline ::pb::TConquerStageInfo* release_stageinfo();
  inline void set_allocated_stageinfo(::pb::TConquerStageInfo* stageinfo);

  // optional .pb.TConquerMapInfo MapInfo = 2;
  inline bool has_mapinfo() const;
  inline void clear_mapinfo();
  static const int kMapInfoFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TConquerBaseInfoRsp</name>
  	<Function>
  		<name>mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mapinfo</name>
  		<replaceName>MapInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TConquerMapInfo& mapinfo() const;
  inline ::pb::TConquerMapInfo* mutable_mapinfo();
  inline ::pb::TConquerMapInfo* release_mapinfo();
  inline void set_allocated_mapinfo(::pb::TConquerMapInfo* mapinfo);

  // @@protoc_insertion_point(class_scope:pb.TConquerBaseInfoRsp)
 private:
  inline void set_has_stageinfo();
  inline void clear_has_stageinfo();
  inline void set_has_mapinfo();
  inline void clear_has_mapinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TConquerStageInfo* stageinfo_;
  ::pb::TConquerMapInfo* mapinfo_;
  friend void  protobuf_AddDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_AssignDesc_net_2fCrossConquer_2eproto();
  friend void protobuf_ShutdownFile_net_2fCrossConquer_2eproto();

  void InitAsDefaultInstance();
  static TConquerBaseInfoRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TConquerCityInfo

// optional uint32 CityId = 1;
inline bool TConquerCityInfo::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerCityInfo::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerCityInfo::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerCityInfo::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TConquerCityInfo::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerCityInfo.CityId)
  return cityid_;
}
inline void TConquerCityInfo::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerCityInfo.CityId)
}

// optional uint64 ConquerAllyId = 2;
inline bool TConquerCityInfo::has_conquerallyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerCityInfo::set_has_conquerallyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerCityInfo::clear_has_conquerallyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerCityInfo::clear_conquerallyid() {
  conquerallyid_ = GOOGLE_ULONGLONG(0);
  clear_has_conquerallyid();
}
inline ::google::protobuf::uint64 TConquerCityInfo::conquerallyid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerCityInfo.ConquerAllyId)
  return conquerallyid_;
}
inline void TConquerCityInfo::set_conquerallyid(::google::protobuf::uint64 value) {
  set_has_conquerallyid();
  conquerallyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerCityInfo.ConquerAllyId)
}

// optional string ConquerAllyName = 3;
inline bool TConquerCityInfo::has_conquerallyname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TConquerCityInfo::set_has_conquerallyname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TConquerCityInfo::clear_has_conquerallyname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TConquerCityInfo::clear_conquerallyname() {
  if (conquerallyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conquerallyname_->clear();
  }
  clear_has_conquerallyname();
}
inline const ::std::string& TConquerCityInfo::conquerallyname() const {
  // @@protoc_insertion_point(field_get:pb.TConquerCityInfo.ConquerAllyName)
  return *conquerallyname_;
}
inline void TConquerCityInfo::set_conquerallyname(const ::std::string& value) {
  set_has_conquerallyname();
  if (conquerallyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conquerallyname_ = new ::std::string;
  }
  conquerallyname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TConquerCityInfo.ConquerAllyName)
}
inline void TConquerCityInfo::set_conquerallyname(const char* value) {
  set_has_conquerallyname();
  if (conquerallyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conquerallyname_ = new ::std::string;
  }
  conquerallyname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TConquerCityInfo.ConquerAllyName)
}
inline void TConquerCityInfo::set_conquerallyname(const char* value, size_t size) {
  set_has_conquerallyname();
  if (conquerallyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conquerallyname_ = new ::std::string;
  }
  conquerallyname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TConquerCityInfo.ConquerAllyName)
}
inline ::std::string* TConquerCityInfo::mutable_conquerallyname() {
  set_has_conquerallyname();
  if (conquerallyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    conquerallyname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TConquerCityInfo.ConquerAllyName)
  return conquerallyname_;
}
inline ::std::string* TConquerCityInfo::release_conquerallyname() {
  clear_has_conquerallyname();
  if (conquerallyname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = conquerallyname_;
    conquerallyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TConquerCityInfo::set_allocated_conquerallyname(::std::string* conquerallyname) {
  if (conquerallyname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete conquerallyname_;
  }
  if (conquerallyname) {
    set_has_conquerallyname();
    conquerallyname_ = conquerallyname;
  } else {
    clear_has_conquerallyname();
    conquerallyname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TConquerCityInfo.ConquerAllyName)
}

// optional uint64 DefAllyId = 4;
inline bool TConquerCityInfo::has_defallyid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TConquerCityInfo::set_has_defallyid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TConquerCityInfo::clear_has_defallyid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TConquerCityInfo::clear_defallyid() {
  defallyid_ = GOOGLE_ULONGLONG(0);
  clear_has_defallyid();
}
inline ::google::protobuf::uint64 TConquerCityInfo::defallyid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerCityInfo.DefAllyId)
  return defallyid_;
}
inline void TConquerCityInfo::set_defallyid(::google::protobuf::uint64 value) {
  set_has_defallyid();
  defallyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerCityInfo.DefAllyId)
}

// optional uint32 AtkAllyCnt = 5;
inline bool TConquerCityInfo::has_atkallycnt() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TConquerCityInfo::set_has_atkallycnt() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TConquerCityInfo::clear_has_atkallycnt() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TConquerCityInfo::clear_atkallycnt() {
  atkallycnt_ = 0u;
  clear_has_atkallycnt();
}
inline ::google::protobuf::uint32 TConquerCityInfo::atkallycnt() const {
  // @@protoc_insertion_point(field_get:pb.TConquerCityInfo.AtkAllyCnt)
  return atkallycnt_;
}
inline void TConquerCityInfo::set_atkallycnt(::google::protobuf::uint32 value) {
  set_has_atkallycnt();
  atkallycnt_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerCityInfo.AtkAllyCnt)
}

// optional uint32 FieldStageID = 7;
inline bool TConquerCityInfo::has_fieldstageid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TConquerCityInfo::set_has_fieldstageid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TConquerCityInfo::clear_has_fieldstageid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TConquerCityInfo::clear_fieldstageid() {
  fieldstageid_ = 0u;
  clear_has_fieldstageid();
}
inline ::google::protobuf::uint32 TConquerCityInfo::fieldstageid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerCityInfo.FieldStageID)
  return fieldstageid_;
}
inline void TConquerCityInfo::set_fieldstageid(::google::protobuf::uint32 value) {
  set_has_fieldstageid();
  fieldstageid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerCityInfo.FieldStageID)
}

// -------------------------------------------------------------------

// TConquerMapInfo

// optional uint32 MapSeqId = 1;
inline bool TConquerMapInfo::has_mapseqid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerMapInfo::set_has_mapseqid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerMapInfo::clear_has_mapseqid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerMapInfo::clear_mapseqid() {
  mapseqid_ = 0u;
  clear_has_mapseqid();
}
inline ::google::protobuf::uint32 TConquerMapInfo::mapseqid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerMapInfo.MapSeqId)
  return mapseqid_;
}
inline void TConquerMapInfo::set_mapseqid(::google::protobuf::uint32 value) {
  set_has_mapseqid();
  mapseqid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerMapInfo.MapSeqId)
}

// repeated .pb.TConquerCityInfo ArrCityInfo = 2;
inline int TConquerMapInfo::arrcityinfo_size() const {
  return arrcityinfo_.size();
}
inline void TConquerMapInfo::clear_arrcityinfo() {
  arrcityinfo_.Clear();
}
inline const ::pb::TConquerCityInfo& TConquerMapInfo::arrcityinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TConquerMapInfo.ArrCityInfo)
  return arrcityinfo_.Get(index);
}
inline ::pb::TConquerCityInfo* TConquerMapInfo::mutable_arrcityinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TConquerMapInfo.ArrCityInfo)
  return arrcityinfo_.Mutable(index);
}
inline ::pb::TConquerCityInfo* TConquerMapInfo::add_arrcityinfo() {
  // @@protoc_insertion_point(field_add:pb.TConquerMapInfo.ArrCityInfo)
  return arrcityinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TConquerCityInfo >&
TConquerMapInfo::arrcityinfo() const {
  // @@protoc_insertion_point(field_list:pb.TConquerMapInfo.ArrCityInfo)
  return arrcityinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TConquerCityInfo >*
TConquerMapInfo::mutable_arrcityinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TConquerMapInfo.ArrCityInfo)
  return &arrcityinfo_;
}

// -------------------------------------------------------------------

// TConquerStageInfo

// optional .pb.EConquerStage CurStage = 2;
inline bool TConquerStageInfo::has_curstage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerStageInfo::set_has_curstage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerStageInfo::clear_has_curstage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerStageInfo::clear_curstage() {
  curstage_ = 0;
  clear_has_curstage();
}
inline ::pb::EConquerStage TConquerStageInfo::curstage() const {
  // @@protoc_insertion_point(field_get:pb.TConquerStageInfo.CurStage)
  return static_cast< ::pb::EConquerStage >(curstage_);
}
inline void TConquerStageInfo::set_curstage(::pb::EConquerStage value) {
  assert(::pb::EConquerStage_IsValid(value));
  set_has_curstage();
  curstage_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerStageInfo.CurStage)
}

// optional int64 LockStageTime = 3;
inline bool TConquerStageInfo::has_lockstagetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerStageInfo::set_has_lockstagetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerStageInfo::clear_has_lockstagetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerStageInfo::clear_lockstagetime() {
  lockstagetime_ = GOOGLE_LONGLONG(0);
  clear_has_lockstagetime();
}
inline ::google::protobuf::int64 TConquerStageInfo::lockstagetime() const {
  // @@protoc_insertion_point(field_get:pb.TConquerStageInfo.LockStageTime)
  return lockstagetime_;
}
inline void TConquerStageInfo::set_lockstagetime(::google::protobuf::int64 value) {
  set_has_lockstagetime();
  lockstagetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerStageInfo.LockStageTime)
}

// optional int64 WarStageTime = 4;
inline bool TConquerStageInfo::has_warstagetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TConquerStageInfo::set_has_warstagetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TConquerStageInfo::clear_has_warstagetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TConquerStageInfo::clear_warstagetime() {
  warstagetime_ = GOOGLE_LONGLONG(0);
  clear_has_warstagetime();
}
inline ::google::protobuf::int64 TConquerStageInfo::warstagetime() const {
  // @@protoc_insertion_point(field_get:pb.TConquerStageInfo.WarStageTime)
  return warstagetime_;
}
inline void TConquerStageInfo::set_warstagetime(::google::protobuf::int64 value) {
  set_has_warstagetime();
  warstagetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerStageInfo.WarStageTime)
}

// optional int32 WarDuration = 5;
inline bool TConquerStageInfo::has_warduration() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TConquerStageInfo::set_has_warduration() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TConquerStageInfo::clear_has_warduration() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TConquerStageInfo::clear_warduration() {
  warduration_ = 0;
  clear_has_warduration();
}
inline ::google::protobuf::int32 TConquerStageInfo::warduration() const {
  // @@protoc_insertion_point(field_get:pb.TConquerStageInfo.WarDuration)
  return warduration_;
}
inline void TConquerStageInfo::set_warduration(::google::protobuf::int32 value) {
  set_has_warduration();
  warduration_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerStageInfo.WarDuration)
}

// -------------------------------------------------------------------

// TConquerAllyInfo

// optional uint32 ConquerLevel = 1;
inline bool TConquerAllyInfo::has_conquerlevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerAllyInfo::set_has_conquerlevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerAllyInfo::clear_has_conquerlevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerAllyInfo::clear_conquerlevel() {
  conquerlevel_ = 0u;
  clear_has_conquerlevel();
}
inline ::google::protobuf::uint32 TConquerAllyInfo::conquerlevel() const {
  // @@protoc_insertion_point(field_get:pb.TConquerAllyInfo.ConquerLevel)
  return conquerlevel_;
}
inline void TConquerAllyInfo::set_conquerlevel(::google::protobuf::uint32 value) {
  set_has_conquerlevel();
  conquerlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerAllyInfo.ConquerLevel)
}

// optional uint64 AllyId = 2;
inline bool TConquerAllyInfo::has_allyid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerAllyInfo::set_has_allyid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerAllyInfo::clear_has_allyid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerAllyInfo::clear_allyid() {
  allyid_ = GOOGLE_ULONGLONG(0);
  clear_has_allyid();
}
inline ::google::protobuf::uint64 TConquerAllyInfo::allyid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerAllyInfo.AllyId)
  return allyid_;
}
inline void TConquerAllyInfo::set_allyid(::google::protobuf::uint64 value) {
  set_has_allyid();
  allyid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerAllyInfo.AllyId)
}

// optional uint32 ConquerCityId = 3;
inline bool TConquerAllyInfo::has_conquercityid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TConquerAllyInfo::set_has_conquercityid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TConquerAllyInfo::clear_has_conquercityid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TConquerAllyInfo::clear_conquercityid() {
  conquercityid_ = 0u;
  clear_has_conquercityid();
}
inline ::google::protobuf::uint32 TConquerAllyInfo::conquercityid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerAllyInfo.ConquerCityId)
  return conquercityid_;
}
inline void TConquerAllyInfo::set_conquercityid(::google::protobuf::uint32 value) {
  set_has_conquercityid();
  conquercityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerAllyInfo.ConquerCityId)
}

// optional uint32 TargetCityId = 4;
inline bool TConquerAllyInfo::has_targetcityid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TConquerAllyInfo::set_has_targetcityid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TConquerAllyInfo::clear_has_targetcityid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TConquerAllyInfo::clear_targetcityid() {
  targetcityid_ = 0u;
  clear_has_targetcityid();
}
inline ::google::protobuf::uint32 TConquerAllyInfo::targetcityid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerAllyInfo.TargetCityId)
  return targetcityid_;
}
inline void TConquerAllyInfo::set_targetcityid(::google::protobuf::uint32 value) {
  set_has_targetcityid();
  targetcityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerAllyInfo.TargetCityId)
}

// optional uint32 CurrentFieldId = 5;
inline bool TConquerAllyInfo::has_currentfieldid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TConquerAllyInfo::set_has_currentfieldid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TConquerAllyInfo::clear_has_currentfieldid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TConquerAllyInfo::clear_currentfieldid() {
  currentfieldid_ = 0u;
  clear_has_currentfieldid();
}
inline ::google::protobuf::uint32 TConquerAllyInfo::currentfieldid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerAllyInfo.CurrentFieldId)
  return currentfieldid_;
}
inline void TConquerAllyInfo::set_currentfieldid(::google::protobuf::uint32 value) {
  set_has_currentfieldid();
  currentfieldid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerAllyInfo.CurrentFieldId)
}

// optional .pb.EConquerAdjust AdjustResult = 6;
inline bool TConquerAllyInfo::has_adjustresult() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TConquerAllyInfo::set_has_adjustresult() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TConquerAllyInfo::clear_has_adjustresult() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TConquerAllyInfo::clear_adjustresult() {
  adjustresult_ = 0;
  clear_has_adjustresult();
}
inline ::pb::EConquerAdjust TConquerAllyInfo::adjustresult() const {
  // @@protoc_insertion_point(field_get:pb.TConquerAllyInfo.AdjustResult)
  return static_cast< ::pb::EConquerAdjust >(adjustresult_);
}
inline void TConquerAllyInfo::set_adjustresult(::pb::EConquerAdjust value) {
  assert(::pb::EConquerAdjust_IsValid(value));
  set_has_adjustresult();
  adjustresult_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerAllyInfo.AdjustResult)
}

// -------------------------------------------------------------------

// TConquerUserInfo

// optional uint64 UserId = 2;
inline bool TConquerUserInfo::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerUserInfo::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerUserInfo::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerUserInfo::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 TConquerUserInfo::userid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerUserInfo.UserId)
  return userid_;
}
inline void TConquerUserInfo::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerUserInfo.UserId)
}

// optional uint32 Score = 3;
inline bool TConquerUserInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerUserInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerUserInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerUserInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TConquerUserInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TConquerUserInfo.Score)
  return score_;
}
inline void TConquerUserInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerUserInfo.Score)
}

// -------------------------------------------------------------------

// TConquerGetServerTeamInfoRsp

// optional uint32 ServerTeamId = 1;
inline bool TConquerGetServerTeamInfoRsp::has_serverteamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerGetServerTeamInfoRsp::set_has_serverteamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerGetServerTeamInfoRsp::clear_has_serverteamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerGetServerTeamInfoRsp::clear_serverteamid() {
  serverteamid_ = 0u;
  clear_has_serverteamid();
}
inline ::google::protobuf::uint32 TConquerGetServerTeamInfoRsp::serverteamid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetServerTeamInfoRsp.ServerTeamId)
  return serverteamid_;
}
inline void TConquerGetServerTeamInfoRsp::set_serverteamid(::google::protobuf::uint32 value) {
  set_has_serverteamid();
  serverteamid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerGetServerTeamInfoRsp.ServerTeamId)
}

// -------------------------------------------------------------------

// TConquerGetBaseInfoRsp

// optional bool Open = 1;
inline bool TConquerGetBaseInfoRsp::has_open() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerGetBaseInfoRsp::set_has_open() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerGetBaseInfoRsp::clear_has_open() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerGetBaseInfoRsp::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool TConquerGetBaseInfoRsp::open() const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetBaseInfoRsp.Open)
  return open_;
}
inline void TConquerGetBaseInfoRsp::set_open(bool value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerGetBaseInfoRsp.Open)
}

// optional .pb.TConquerAllyInfo AllyInfo = 2;
inline bool TConquerGetBaseInfoRsp::has_allyinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerGetBaseInfoRsp::set_has_allyinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerGetBaseInfoRsp::clear_has_allyinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerGetBaseInfoRsp::clear_allyinfo() {
  if (allyinfo_ != NULL) allyinfo_->::pb::TConquerAllyInfo::Clear();
  clear_has_allyinfo();
}
inline const ::pb::TConquerAllyInfo& TConquerGetBaseInfoRsp::allyinfo() const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetBaseInfoRsp.AllyInfo)
  return allyinfo_ != NULL ? *allyinfo_ : *default_instance_->allyinfo_;
}
inline ::pb::TConquerAllyInfo* TConquerGetBaseInfoRsp::mutable_allyinfo() {
  set_has_allyinfo();
  if (allyinfo_ == NULL) allyinfo_ = new ::pb::TConquerAllyInfo;
  // @@protoc_insertion_point(field_mutable:pb.TConquerGetBaseInfoRsp.AllyInfo)
  return allyinfo_;
}
inline ::pb::TConquerAllyInfo* TConquerGetBaseInfoRsp::release_allyinfo() {
  clear_has_allyinfo();
  ::pb::TConquerAllyInfo* temp = allyinfo_;
  allyinfo_ = NULL;
  return temp;
}
inline void TConquerGetBaseInfoRsp::set_allocated_allyinfo(::pb::TConquerAllyInfo* allyinfo) {
  delete allyinfo_;
  allyinfo_ = allyinfo;
  if (allyinfo) {
    set_has_allyinfo();
  } else {
    clear_has_allyinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TConquerGetBaseInfoRsp.AllyInfo)
}

// optional .pb.TConquerUserInfo UserInfo = 3;
inline bool TConquerGetBaseInfoRsp::has_userinfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TConquerGetBaseInfoRsp::set_has_userinfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TConquerGetBaseInfoRsp::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TConquerGetBaseInfoRsp::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TConquerUserInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TConquerUserInfo& TConquerGetBaseInfoRsp::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetBaseInfoRsp.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TConquerUserInfo* TConquerGetBaseInfoRsp::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TConquerUserInfo;
  // @@protoc_insertion_point(field_mutable:pb.TConquerGetBaseInfoRsp.UserInfo)
  return userinfo_;
}
inline ::pb::TConquerUserInfo* TConquerGetBaseInfoRsp::release_userinfo() {
  clear_has_userinfo();
  ::pb::TConquerUserInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TConquerGetBaseInfoRsp::set_allocated_userinfo(::pb::TConquerUserInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TConquerGetBaseInfoRsp.UserInfo)
}

// -------------------------------------------------------------------

// TConquerSetTargetCityReq

// optional uint32 TargetCityId = 1;
inline bool TConquerSetTargetCityReq::has_targetcityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerSetTargetCityReq::set_has_targetcityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerSetTargetCityReq::clear_has_targetcityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerSetTargetCityReq::clear_targetcityid() {
  targetcityid_ = 0u;
  clear_has_targetcityid();
}
inline ::google::protobuf::uint32 TConquerSetTargetCityReq::targetcityid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerSetTargetCityReq.TargetCityId)
  return targetcityid_;
}
inline void TConquerSetTargetCityReq::set_targetcityid(::google::protobuf::uint32 value) {
  set_has_targetcityid();
  targetcityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerSetTargetCityReq.TargetCityId)
}

// optional uint64 GuildId = 2;
inline bool TConquerSetTargetCityReq::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerSetTargetCityReq::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerSetTargetCityReq::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerSetTargetCityReq::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 TConquerSetTargetCityReq::guildid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerSetTargetCityReq.GuildId)
  return guildid_;
}
inline void TConquerSetTargetCityReq::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerSetTargetCityReq.GuildId)
}

// optional uint32 GuildPost = 3;
inline bool TConquerSetTargetCityReq::has_guildpost() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TConquerSetTargetCityReq::set_has_guildpost() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TConquerSetTargetCityReq::clear_has_guildpost() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TConquerSetTargetCityReq::clear_guildpost() {
  guildpost_ = 0u;
  clear_has_guildpost();
}
inline ::google::protobuf::uint32 TConquerSetTargetCityReq::guildpost() const {
  // @@protoc_insertion_point(field_get:pb.TConquerSetTargetCityReq.GuildPost)
  return guildpost_;
}
inline void TConquerSetTargetCityReq::set_guildpost(::google::protobuf::uint32 value) {
  set_has_guildpost();
  guildpost_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerSetTargetCityReq.GuildPost)
}

// -------------------------------------------------------------------

// TConquerSetTargetCityRsp

// optional uint32 TargetCityId = 1;
inline bool TConquerSetTargetCityRsp::has_targetcityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerSetTargetCityRsp::set_has_targetcityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerSetTargetCityRsp::clear_has_targetcityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerSetTargetCityRsp::clear_targetcityid() {
  targetcityid_ = 0u;
  clear_has_targetcityid();
}
inline ::google::protobuf::uint32 TConquerSetTargetCityRsp::targetcityid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerSetTargetCityRsp.TargetCityId)
  return targetcityid_;
}
inline void TConquerSetTargetCityRsp::set_targetcityid(::google::protobuf::uint32 value) {
  set_has_targetcityid();
  targetcityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerSetTargetCityRsp.TargetCityId)
}

// -------------------------------------------------------------------

// TConquerGetAllyInfoReq

// optional uint32 CityId = 1;
inline bool TConquerGetAllyInfoReq::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerGetAllyInfoReq::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerGetAllyInfoReq::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerGetAllyInfoReq::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TConquerGetAllyInfoReq::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetAllyInfoReq.CityId)
  return cityid_;
}
inline void TConquerGetAllyInfoReq::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerGetAllyInfoReq.CityId)
}

// -------------------------------------------------------------------

// TConquerGetAllyInfoRsp

// optional uint32 CityId = 1;
inline bool TConquerGetAllyInfoRsp::has_cityid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerGetAllyInfoRsp::set_has_cityid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerGetAllyInfoRsp::clear_has_cityid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerGetAllyInfoRsp::clear_cityid() {
  cityid_ = 0u;
  clear_has_cityid();
}
inline ::google::protobuf::uint32 TConquerGetAllyInfoRsp::cityid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetAllyInfoRsp.CityId)
  return cityid_;
}
inline void TConquerGetAllyInfoRsp::set_cityid(::google::protobuf::uint32 value) {
  set_has_cityid();
  cityid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerGetAllyInfoRsp.CityId)
}

// optional .pb.TAllianceSimpleInfo DefAllyInfo = 2;
inline bool TConquerGetAllyInfoRsp::has_defallyinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerGetAllyInfoRsp::set_has_defallyinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerGetAllyInfoRsp::clear_has_defallyinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerGetAllyInfoRsp::clear_defallyinfo() {
  if (defallyinfo_ != NULL) defallyinfo_->::pb::TAllianceSimpleInfo::Clear();
  clear_has_defallyinfo();
}
inline const ::pb::TAllianceSimpleInfo& TConquerGetAllyInfoRsp::defallyinfo() const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetAllyInfoRsp.DefAllyInfo)
  return defallyinfo_ != NULL ? *defallyinfo_ : *default_instance_->defallyinfo_;
}
inline ::pb::TAllianceSimpleInfo* TConquerGetAllyInfoRsp::mutable_defallyinfo() {
  set_has_defallyinfo();
  if (defallyinfo_ == NULL) defallyinfo_ = new ::pb::TAllianceSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TConquerGetAllyInfoRsp.DefAllyInfo)
  return defallyinfo_;
}
inline ::pb::TAllianceSimpleInfo* TConquerGetAllyInfoRsp::release_defallyinfo() {
  clear_has_defallyinfo();
  ::pb::TAllianceSimpleInfo* temp = defallyinfo_;
  defallyinfo_ = NULL;
  return temp;
}
inline void TConquerGetAllyInfoRsp::set_allocated_defallyinfo(::pb::TAllianceSimpleInfo* defallyinfo) {
  delete defallyinfo_;
  defallyinfo_ = defallyinfo;
  if (defallyinfo) {
    set_has_defallyinfo();
  } else {
    clear_has_defallyinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TConquerGetAllyInfoRsp.DefAllyInfo)
}

// repeated .pb.TAllianceSimpleInfo ArrAtkAllyInfo = 3;
inline int TConquerGetAllyInfoRsp::arratkallyinfo_size() const {
  return arratkallyinfo_.size();
}
inline void TConquerGetAllyInfoRsp::clear_arratkallyinfo() {
  arratkallyinfo_.Clear();
}
inline const ::pb::TAllianceSimpleInfo& TConquerGetAllyInfoRsp::arratkallyinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetAllyInfoRsp.ArrAtkAllyInfo)
  return arratkallyinfo_.Get(index);
}
inline ::pb::TAllianceSimpleInfo* TConquerGetAllyInfoRsp::mutable_arratkallyinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TConquerGetAllyInfoRsp.ArrAtkAllyInfo)
  return arratkallyinfo_.Mutable(index);
}
inline ::pb::TAllianceSimpleInfo* TConquerGetAllyInfoRsp::add_arratkallyinfo() {
  // @@protoc_insertion_point(field_add:pb.TConquerGetAllyInfoRsp.ArrAtkAllyInfo)
  return arratkallyinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfo >&
TConquerGetAllyInfoRsp::arratkallyinfo() const {
  // @@protoc_insertion_point(field_list:pb.TConquerGetAllyInfoRsp.ArrAtkAllyInfo)
  return arratkallyinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TAllianceSimpleInfo >*
TConquerGetAllyInfoRsp::mutable_arratkallyinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TConquerGetAllyInfoRsp.ArrAtkAllyInfo)
  return &arratkallyinfo_;
}

// -------------------------------------------------------------------

// TConquerMoveReq

// optional .pb.PbVector2_Int TargetPos = 1;
inline bool TConquerMoveReq::has_targetpos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerMoveReq::set_has_targetpos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerMoveReq::clear_has_targetpos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerMoveReq::clear_targetpos() {
  if (targetpos_ != NULL) targetpos_->::pb::PbVector2_Int::Clear();
  clear_has_targetpos();
}
inline const ::pb::PbVector2_Int& TConquerMoveReq::targetpos() const {
  // @@protoc_insertion_point(field_get:pb.TConquerMoveReq.TargetPos)
  return targetpos_ != NULL ? *targetpos_ : *default_instance_->targetpos_;
}
inline ::pb::PbVector2_Int* TConquerMoveReq::mutable_targetpos() {
  set_has_targetpos();
  if (targetpos_ == NULL) targetpos_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.TConquerMoveReq.TargetPos)
  return targetpos_;
}
inline ::pb::PbVector2_Int* TConquerMoveReq::release_targetpos() {
  clear_has_targetpos();
  ::pb::PbVector2_Int* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline void TConquerMoveReq::set_allocated_targetpos(::pb::PbVector2_Int* targetpos) {
  delete targetpos_;
  targetpos_ = targetpos;
  if (targetpos) {
    set_has_targetpos();
  } else {
    clear_has_targetpos();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TConquerMoveReq.TargetPos)
}

// -------------------------------------------------------------------

// TConquerAttackReq

// optional uint64 TargetId = 1;
inline bool TConquerAttackReq::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerAttackReq::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerAttackReq::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerAttackReq::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 TConquerAttackReq::targetid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerAttackReq.TargetId)
  return targetid_;
}
inline void TConquerAttackReq::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerAttackReq.TargetId)
}

// -------------------------------------------------------------------

// TConquerTouchReq

// optional uint64 TargetBid = 1;
inline bool TConquerTouchReq::has_targetbid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerTouchReq::set_has_targetbid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerTouchReq::clear_has_targetbid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerTouchReq::clear_targetbid() {
  targetbid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetbid();
}
inline ::google::protobuf::uint64 TConquerTouchReq::targetbid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerTouchReq.TargetBid)
  return targetbid_;
}
inline void TConquerTouchReq::set_targetbid(::google::protobuf::uint64 value) {
  set_has_targetbid();
  targetbid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerTouchReq.TargetBid)
}

// -------------------------------------------------------------------

// TConquerSetUserOptReq

// optional uint64 TargetId = 1;
inline bool TConquerSetUserOptReq::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerSetUserOptReq::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerSetUserOptReq::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerSetUserOptReq::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 TConquerSetUserOptReq::targetid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerSetUserOptReq.TargetId)
  return targetid_;
}
inline void TConquerSetUserOptReq::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerSetUserOptReq.TargetId)
}

// optional bool AutoAttack = 2;
inline bool TConquerSetUserOptReq::has_autoattack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerSetUserOptReq::set_has_autoattack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerSetUserOptReq::clear_has_autoattack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerSetUserOptReq::clear_autoattack() {
  autoattack_ = false;
  clear_has_autoattack();
}
inline bool TConquerSetUserOptReq::autoattack() const {
  // @@protoc_insertion_point(field_get:pb.TConquerSetUserOptReq.AutoAttack)
  return autoattack_;
}
inline void TConquerSetUserOptReq::set_autoattack(bool value) {
  set_has_autoattack();
  autoattack_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerSetUserOptReq.AutoAttack)
}

// -------------------------------------------------------------------

// TConquerSetArmyOptReq

// optional uint32 GoalId = 1;
inline bool TConquerSetArmyOptReq::has_goalid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerSetArmyOptReq::set_has_goalid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerSetArmyOptReq::clear_has_goalid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerSetArmyOptReq::clear_goalid() {
  goalid_ = 0u;
  clear_has_goalid();
}
inline ::google::protobuf::uint32 TConquerSetArmyOptReq::goalid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerSetArmyOptReq.GoalId)
  return goalid_;
}
inline void TConquerSetArmyOptReq::set_goalid(::google::protobuf::uint32 value) {
  set_has_goalid();
  goalid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerSetArmyOptReq.GoalId)
}

// -------------------------------------------------------------------

// TConquerRankInfo

// optional uint64 Uid = 1;
inline bool TConquerRankInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerRankInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerRankInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerRankInfo::clear_uid() {
  uid_ = GOOGLE_ULONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::uint64 TConquerRankInfo::uid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerRankInfo.Uid)
  return uid_;
}
inline void TConquerRankInfo::set_uid(::google::protobuf::uint64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerRankInfo.Uid)
}

// optional string Uname = 2;
inline bool TConquerRankInfo::has_uname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerRankInfo::set_has_uname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerRankInfo::clear_has_uname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerRankInfo::clear_uname() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_->clear();
  }
  clear_has_uname();
}
inline const ::std::string& TConquerRankInfo::uname() const {
  // @@protoc_insertion_point(field_get:pb.TConquerRankInfo.Uname)
  return *uname_;
}
inline void TConquerRankInfo::set_uname(const ::std::string& value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TConquerRankInfo.Uname)
}
inline void TConquerRankInfo::set_uname(const char* value) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TConquerRankInfo.Uname)
}
inline void TConquerRankInfo::set_uname(const char* value, size_t size) {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  uname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TConquerRankInfo.Uname)
}
inline ::std::string* TConquerRankInfo::mutable_uname() {
  set_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TConquerRankInfo.Uname)
  return uname_;
}
inline ::std::string* TConquerRankInfo::release_uname() {
  clear_has_uname();
  if (uname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uname_;
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TConquerRankInfo::set_allocated_uname(::std::string* uname) {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (uname) {
    set_has_uname();
    uname_ = uname;
  } else {
    clear_has_uname();
    uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TConquerRankInfo.Uname)
}

// optional uint32 ImageHtid = 3;
inline bool TConquerRankInfo::has_imagehtid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TConquerRankInfo::set_has_imagehtid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TConquerRankInfo::clear_has_imagehtid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TConquerRankInfo::clear_imagehtid() {
  imagehtid_ = 0u;
  clear_has_imagehtid();
}
inline ::google::protobuf::uint32 TConquerRankInfo::imagehtid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerRankInfo.ImageHtid)
  return imagehtid_;
}
inline void TConquerRankInfo::set_imagehtid(::google::protobuf::uint32 value) {
  set_has_imagehtid();
  imagehtid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerRankInfo.ImageHtid)
}

// optional uint32 ImageFrameTid = 4;
inline bool TConquerRankInfo::has_imageframetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TConquerRankInfo::set_has_imageframetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TConquerRankInfo::clear_has_imageframetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TConquerRankInfo::clear_imageframetid() {
  imageframetid_ = 0u;
  clear_has_imageframetid();
}
inline ::google::protobuf::uint32 TConquerRankInfo::imageframetid() const {
  // @@protoc_insertion_point(field_get:pb.TConquerRankInfo.ImageFrameTid)
  return imageframetid_;
}
inline void TConquerRankInfo::set_imageframetid(::google::protobuf::uint32 value) {
  set_has_imageframetid();
  imageframetid_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerRankInfo.ImageFrameTid)
}

// optional uint32 Title = 5;
inline bool TConquerRankInfo::has_title() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TConquerRankInfo::set_has_title() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TConquerRankInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TConquerRankInfo::clear_title() {
  title_ = 0u;
  clear_has_title();
}
inline ::google::protobuf::uint32 TConquerRankInfo::title() const {
  // @@protoc_insertion_point(field_get:pb.TConquerRankInfo.Title)
  return title_;
}
inline void TConquerRankInfo::set_title(::google::protobuf::uint32 value) {
  set_has_title();
  title_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerRankInfo.Title)
}

// optional uint32 Rank = 10;
inline bool TConquerRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TConquerRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TConquerRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TConquerRankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TConquerRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:pb.TConquerRankInfo.Rank)
  return rank_;
}
inline void TConquerRankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerRankInfo.Rank)
}

// optional uint32 Score = 11;
inline bool TConquerRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TConquerRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TConquerRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TConquerRankInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TConquerRankInfo::score() const {
  // @@protoc_insertion_point(field_get:pb.TConquerRankInfo.Score)
  return score_;
}
inline void TConquerRankInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerRankInfo.Score)
}

// optional uint32 KillCnt = 12;
inline bool TConquerRankInfo::has_killcnt() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TConquerRankInfo::set_has_killcnt() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TConquerRankInfo::clear_has_killcnt() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TConquerRankInfo::clear_killcnt() {
  killcnt_ = 0u;
  clear_has_killcnt();
}
inline ::google::protobuf::uint32 TConquerRankInfo::killcnt() const {
  // @@protoc_insertion_point(field_get:pb.TConquerRankInfo.KillCnt)
  return killcnt_;
}
inline void TConquerRankInfo::set_killcnt(::google::protobuf::uint32 value) {
  set_has_killcnt();
  killcnt_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerRankInfo.KillCnt)
}

// -------------------------------------------------------------------

// TConquerGetRankListReq

// optional uint32 Offset = 1;
inline bool TConquerGetRankListReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerGetRankListReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerGetRankListReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerGetRankListReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TConquerGetRankListReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetRankListReq.Offset)
  return offset_;
}
inline void TConquerGetRankListReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerGetRankListReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TConquerGetRankListReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerGetRankListReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerGetRankListReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerGetRankListReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TConquerGetRankListReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetRankListReq.Limit)
  return limit_;
}
inline void TConquerGetRankListReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerGetRankListReq.Limit)
}

// -------------------------------------------------------------------

// TConquerGetRankListRsp

// repeated .pb.TConquerRankInfo RankArr = 1;
inline int TConquerGetRankListRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TConquerGetRankListRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TConquerRankInfo& TConquerGetRankListRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetRankListRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TConquerRankInfo* TConquerGetRankListRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TConquerGetRankListRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TConquerRankInfo* TConquerGetRankListRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TConquerGetRankListRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TConquerRankInfo >&
TConquerGetRankListRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TConquerGetRankListRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TConquerRankInfo >*
TConquerGetRankListRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TConquerGetRankListRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TConquerGetRankListRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerGetRankListRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerGetRankListRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerGetRankListRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TConquerGetRankListRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TConquerGetRankListRsp.MyRank)
  return myrank_;
}
inline void TConquerGetRankListRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerGetRankListRsp.MyRank)
}

// -------------------------------------------------------------------

// TConquerLevelInfo

// optional uint32 ConquerLevel = 1;
inline bool TConquerLevelInfo::has_conquerlevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerLevelInfo::set_has_conquerlevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerLevelInfo::clear_has_conquerlevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerLevelInfo::clear_conquerlevel() {
  conquerlevel_ = 0u;
  clear_has_conquerlevel();
}
inline ::google::protobuf::uint32 TConquerLevelInfo::conquerlevel() const {
  // @@protoc_insertion_point(field_get:pb.TConquerLevelInfo.ConquerLevel)
  return conquerlevel_;
}
inline void TConquerLevelInfo::set_conquerlevel(::google::protobuf::uint32 value) {
  set_has_conquerlevel();
  conquerlevel_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerLevelInfo.ConquerLevel)
}

// optional uint64 Deadline = 2;
inline bool TConquerLevelInfo::has_deadline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerLevelInfo::set_has_deadline() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerLevelInfo::clear_has_deadline() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerLevelInfo::clear_deadline() {
  deadline_ = GOOGLE_ULONGLONG(0);
  clear_has_deadline();
}
inline ::google::protobuf::uint64 TConquerLevelInfo::deadline() const {
  // @@protoc_insertion_point(field_get:pb.TConquerLevelInfo.Deadline)
  return deadline_;
}
inline void TConquerLevelInfo::set_deadline(::google::protobuf::uint64 value) {
  set_has_deadline();
  deadline_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerLevelInfo.Deadline)
}

// optional uint64 SeasonTime = 3;
inline bool TConquerLevelInfo::has_seasontime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TConquerLevelInfo::set_has_seasontime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TConquerLevelInfo::clear_has_seasontime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TConquerLevelInfo::clear_seasontime() {
  seasontime_ = GOOGLE_ULONGLONG(0);
  clear_has_seasontime();
}
inline ::google::protobuf::uint64 TConquerLevelInfo::seasontime() const {
  // @@protoc_insertion_point(field_get:pb.TConquerLevelInfo.SeasonTime)
  return seasontime_;
}
inline void TConquerLevelInfo::set_seasontime(::google::protobuf::uint64 value) {
  set_has_seasontime();
  seasontime_ = value;
  // @@protoc_insertion_point(field_set:pb.TConquerLevelInfo.SeasonTime)
}

// -------------------------------------------------------------------

// TConquerShopInfoRsp

// repeated .pb.TShopSingleShopInfo SingleShopArray = 1;
inline int TConquerShopInfoRsp::singleshoparray_size() const {
  return singleshoparray_.size();
}
inline void TConquerShopInfoRsp::clear_singleshoparray() {
  singleshoparray_.Clear();
}
inline const ::pb::TShopSingleShopInfo& TConquerShopInfoRsp::singleshoparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TConquerShopInfoRsp.SingleShopArray)
  return singleshoparray_.Get(index);
}
inline ::pb::TShopSingleShopInfo* TConquerShopInfoRsp::mutable_singleshoparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TConquerShopInfoRsp.SingleShopArray)
  return singleshoparray_.Mutable(index);
}
inline ::pb::TShopSingleShopInfo* TConquerShopInfoRsp::add_singleshoparray() {
  // @@protoc_insertion_point(field_add:pb.TConquerShopInfoRsp.SingleShopArray)
  return singleshoparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TShopSingleShopInfo >&
TConquerShopInfoRsp::singleshoparray() const {
  // @@protoc_insertion_point(field_list:pb.TConquerShopInfoRsp.SingleShopArray)
  return singleshoparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TShopSingleShopInfo >*
TConquerShopInfoRsp::mutable_singleshoparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TConquerShopInfoRsp.SingleShopArray)
  return &singleshoparray_;
}

// optional .pb.TConquerLevelInfo ConquerLevelInfo = 2;
inline bool TConquerShopInfoRsp::has_conquerlevelinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerShopInfoRsp::set_has_conquerlevelinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerShopInfoRsp::clear_has_conquerlevelinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerShopInfoRsp::clear_conquerlevelinfo() {
  if (conquerlevelinfo_ != NULL) conquerlevelinfo_->::pb::TConquerLevelInfo::Clear();
  clear_has_conquerlevelinfo();
}
inline const ::pb::TConquerLevelInfo& TConquerShopInfoRsp::conquerlevelinfo() const {
  // @@protoc_insertion_point(field_get:pb.TConquerShopInfoRsp.ConquerLevelInfo)
  return conquerlevelinfo_ != NULL ? *conquerlevelinfo_ : *default_instance_->conquerlevelinfo_;
}
inline ::pb::TConquerLevelInfo* TConquerShopInfoRsp::mutable_conquerlevelinfo() {
  set_has_conquerlevelinfo();
  if (conquerlevelinfo_ == NULL) conquerlevelinfo_ = new ::pb::TConquerLevelInfo;
  // @@protoc_insertion_point(field_mutable:pb.TConquerShopInfoRsp.ConquerLevelInfo)
  return conquerlevelinfo_;
}
inline ::pb::TConquerLevelInfo* TConquerShopInfoRsp::release_conquerlevelinfo() {
  clear_has_conquerlevelinfo();
  ::pb::TConquerLevelInfo* temp = conquerlevelinfo_;
  conquerlevelinfo_ = NULL;
  return temp;
}
inline void TConquerShopInfoRsp::set_allocated_conquerlevelinfo(::pb::TConquerLevelInfo* conquerlevelinfo) {
  delete conquerlevelinfo_;
  conquerlevelinfo_ = conquerlevelinfo;
  if (conquerlevelinfo) {
    set_has_conquerlevelinfo();
  } else {
    clear_has_conquerlevelinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TConquerShopInfoRsp.ConquerLevelInfo)
}

// -------------------------------------------------------------------

// TConquerBaseInfoRsp

// optional .pb.TConquerStageInfo StageInfo = 1;
inline bool TConquerBaseInfoRsp::has_stageinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TConquerBaseInfoRsp::set_has_stageinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TConquerBaseInfoRsp::clear_has_stageinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TConquerBaseInfoRsp::clear_stageinfo() {
  if (stageinfo_ != NULL) stageinfo_->::pb::TConquerStageInfo::Clear();
  clear_has_stageinfo();
}
inline const ::pb::TConquerStageInfo& TConquerBaseInfoRsp::stageinfo() const {
  // @@protoc_insertion_point(field_get:pb.TConquerBaseInfoRsp.StageInfo)
  return stageinfo_ != NULL ? *stageinfo_ : *default_instance_->stageinfo_;
}
inline ::pb::TConquerStageInfo* TConquerBaseInfoRsp::mutable_stageinfo() {
  set_has_stageinfo();
  if (stageinfo_ == NULL) stageinfo_ = new ::pb::TConquerStageInfo;
  // @@protoc_insertion_point(field_mutable:pb.TConquerBaseInfoRsp.StageInfo)
  return stageinfo_;
}
inline ::pb::TConquerStageInfo* TConquerBaseInfoRsp::release_stageinfo() {
  clear_has_stageinfo();
  ::pb::TConquerStageInfo* temp = stageinfo_;
  stageinfo_ = NULL;
  return temp;
}
inline void TConquerBaseInfoRsp::set_allocated_stageinfo(::pb::TConquerStageInfo* stageinfo) {
  delete stageinfo_;
  stageinfo_ = stageinfo;
  if (stageinfo) {
    set_has_stageinfo();
  } else {
    clear_has_stageinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TConquerBaseInfoRsp.StageInfo)
}

// optional .pb.TConquerMapInfo MapInfo = 2;
inline bool TConquerBaseInfoRsp::has_mapinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TConquerBaseInfoRsp::set_has_mapinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TConquerBaseInfoRsp::clear_has_mapinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TConquerBaseInfoRsp::clear_mapinfo() {
  if (mapinfo_ != NULL) mapinfo_->::pb::TConquerMapInfo::Clear();
  clear_has_mapinfo();
}
inline const ::pb::TConquerMapInfo& TConquerBaseInfoRsp::mapinfo() const {
  // @@protoc_insertion_point(field_get:pb.TConquerBaseInfoRsp.MapInfo)
  return mapinfo_ != NULL ? *mapinfo_ : *default_instance_->mapinfo_;
}
inline ::pb::TConquerMapInfo* TConquerBaseInfoRsp::mutable_mapinfo() {
  set_has_mapinfo();
  if (mapinfo_ == NULL) mapinfo_ = new ::pb::TConquerMapInfo;
  // @@protoc_insertion_point(field_mutable:pb.TConquerBaseInfoRsp.MapInfo)
  return mapinfo_;
}
inline ::pb::TConquerMapInfo* TConquerBaseInfoRsp::release_mapinfo() {
  clear_has_mapinfo();
  ::pb::TConquerMapInfo* temp = mapinfo_;
  mapinfo_ = NULL;
  return temp;
}
inline void TConquerBaseInfoRsp::set_allocated_mapinfo(::pb::TConquerMapInfo* mapinfo) {
  delete mapinfo_;
  mapinfo_ = mapinfo;
  if (mapinfo) {
    set_has_mapinfo();
  } else {
    clear_has_mapinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TConquerBaseInfoRsp.MapInfo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::pb::EConquerStage> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EConquerStage>() {
  return ::pb::EConquerStage_descriptor();
}
template <> struct is_proto_enum< ::pb::EConquerAdjust> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pb::EConquerAdjust>() {
  return ::pb::EConquerAdjust_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fCrossConquer_2eproto__INCLUDED
