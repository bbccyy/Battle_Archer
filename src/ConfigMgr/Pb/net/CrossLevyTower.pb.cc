// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossLevyTower.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CrossLevyTower.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TCrossLevyGetTowerInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetTowerInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyEnterTowerBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyEnterTowerBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyEnterTowerBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyEnterTowerBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReportTowerBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReportTowerBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReportTowerBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReportTowerBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyTowerAverageAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyTowerAverageAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetTowerAverageAttrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetTowerAverageAttrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetTowerAverageAttrRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetTowerAverageAttrRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyTowerBattleSquadInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyTowerBattleSquadInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyTowerFightAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyTowerFightAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetTowerBattleArgsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetTowerBattleArgsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyGetTowerBattleArgsRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyGetTowerBattleArgsRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReportTowerBattleResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReportTowerBattleResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TCrossLevyReportTowerBattleResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TCrossLevyReportTowerBattleResultRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCrossLevyTower_2eproto() {
  protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CrossLevyTower.proto");
  GOOGLE_CHECK(file != NULL);
  TCrossLevyGetTowerInfoRsp_descriptor_ = file->message_type(0);
  static const int TCrossLevyGetTowerInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerInfoRsp, passlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerInfoRsp, attacklayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerInfoRsp, attackmonsteridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerInfoRsp, losenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerInfoRsp, battleargs_),
  };
  TCrossLevyGetTowerInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetTowerInfoRsp_descriptor_,
      TCrossLevyGetTowerInfoRsp::default_instance_,
      TCrossLevyGetTowerInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetTowerInfoRsp));
  TCrossLevyEnterTowerBattleReq_descriptor_ = file->message_type(1);
  static const int TCrossLevyEnterTowerBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterTowerBattleReq, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterTowerBattleReq, battlecheckparam_),
  };
  TCrossLevyEnterTowerBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyEnterTowerBattleReq_descriptor_,
      TCrossLevyEnterTowerBattleReq::default_instance_,
      TCrossLevyEnterTowerBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterTowerBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterTowerBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyEnterTowerBattleReq));
  TCrossLevyEnterTowerBattleRsp_descriptor_ = file->message_type(2);
  static const int TCrossLevyEnterTowerBattleRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterTowerBattleRsp, leftchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterTowerBattleRsp, battleargs_),
  };
  TCrossLevyEnterTowerBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyEnterTowerBattleRsp_descriptor_,
      TCrossLevyEnterTowerBattleRsp::default_instance_,
      TCrossLevyEnterTowerBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterTowerBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyEnterTowerBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyEnterTowerBattleRsp));
  TCrossLevyReportTowerBattleReq_descriptor_ = file->message_type(3);
  static const int TCrossLevyReportTowerBattleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleReq, layerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleReq, battleret_),
  };
  TCrossLevyReportTowerBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReportTowerBattleReq_descriptor_,
      TCrossLevyReportTowerBattleReq::default_instance_,
      TCrossLevyReportTowerBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReportTowerBattleReq));
  TCrossLevyReportTowerBattleRsp_descriptor_ = file->message_type(4);
  static const int TCrossLevyReportTowerBattleRsp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, passlayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, attacklayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, attackmonsteridarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, losenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, nextbattleargs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, leftchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, levyscores_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, rewardarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, rewardchallengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, rewardlevyscores_),
  };
  TCrossLevyReportTowerBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReportTowerBattleRsp_descriptor_,
      TCrossLevyReportTowerBattleRsp::default_instance_,
      TCrossLevyReportTowerBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReportTowerBattleRsp));
  TCrossLevyTowerAverageAttr_descriptor_ = file->message_type(5);
  static const int TCrossLevyTowerAverageAttr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerAverageAttr, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerAverageAttr, value_),
  };
  TCrossLevyTowerAverageAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyTowerAverageAttr_descriptor_,
      TCrossLevyTowerAverageAttr::default_instance_,
      TCrossLevyTowerAverageAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerAverageAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerAverageAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyTowerAverageAttr));
  TCrossLevyGetTowerAverageAttrReq_descriptor_ = file->message_type(6);
  static const int TCrossLevyGetTowerAverageAttrReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerAverageAttrReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerAverageAttrReq, expectattridarr_),
  };
  TCrossLevyGetTowerAverageAttrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetTowerAverageAttrReq_descriptor_,
      TCrossLevyGetTowerAverageAttrReq::default_instance_,
      TCrossLevyGetTowerAverageAttrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerAverageAttrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerAverageAttrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetTowerAverageAttrReq));
  TCrossLevyGetTowerAverageAttrRsp_descriptor_ = file->message_type(7);
  static const int TCrossLevyGetTowerAverageAttrRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerAverageAttrRsp, averageattrarr_),
  };
  TCrossLevyGetTowerAverageAttrRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetTowerAverageAttrRsp_descriptor_,
      TCrossLevyGetTowerAverageAttrRsp::default_instance_,
      TCrossLevyGetTowerAverageAttrRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerAverageAttrRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerAverageAttrRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetTowerAverageAttrRsp));
  TCrossLevyTowerBattleSquadInfo_descriptor_ = file->message_type(8);
  static const int TCrossLevyTowerBattleSquadInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerBattleSquadInfo, squad_),
  };
  TCrossLevyTowerBattleSquadInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyTowerBattleSquadInfo_descriptor_,
      TCrossLevyTowerBattleSquadInfo::default_instance_,
      TCrossLevyTowerBattleSquadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerBattleSquadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerBattleSquadInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyTowerBattleSquadInfo));
  TCrossLevyTowerFightAttr_descriptor_ = file->message_type(9);
  static const int TCrossLevyTowerFightAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerFightAttr, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerFightAttr, percentval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerFightAttr, extraval_),
  };
  TCrossLevyTowerFightAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyTowerFightAttr_descriptor_,
      TCrossLevyTowerFightAttr::default_instance_,
      TCrossLevyTowerFightAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerFightAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyTowerFightAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyTowerFightAttr));
  TCrossLevyGetTowerBattleArgsReq_descriptor_ = file->message_type(10);
  static const int TCrossLevyGetTowerBattleArgsReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsReq, isenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsReq, squadarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsReq, battleinfoidarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsReq, monsteradjustconfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsReq, averageattrarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsReq, battlecheckparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsReq, fightattrarr_),
  };
  TCrossLevyGetTowerBattleArgsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetTowerBattleArgsReq_descriptor_,
      TCrossLevyGetTowerBattleArgsReq::default_instance_,
      TCrossLevyGetTowerBattleArgsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetTowerBattleArgsReq));
  TCrossLevyGetTowerBattleArgsRsp_descriptor_ = file->message_type(11);
  static const int TCrossLevyGetTowerBattleArgsRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsRsp, battleargs_),
  };
  TCrossLevyGetTowerBattleArgsRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyGetTowerBattleArgsRsp_descriptor_,
      TCrossLevyGetTowerBattleArgsRsp::default_instance_,
      TCrossLevyGetTowerBattleArgsRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyGetTowerBattleArgsRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyGetTowerBattleArgsRsp));
  TCrossLevyReportTowerBattleResultReq_descriptor_ = file->message_type(12);
  static const int TCrossLevyReportTowerBattleResultReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleResultReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleResultReq, battlecheckparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleResultReq, battleret_),
  };
  TCrossLevyReportTowerBattleResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReportTowerBattleResultReq_descriptor_,
      TCrossLevyReportTowerBattleResultReq::default_instance_,
      TCrossLevyReportTowerBattleResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReportTowerBattleResultReq));
  TCrossLevyReportTowerBattleResultRsp_descriptor_ = file->message_type(13);
  static const int TCrossLevyReportTowerBattleResultRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleResultRsp, iswin_),
  };
  TCrossLevyReportTowerBattleResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TCrossLevyReportTowerBattleResultRsp_descriptor_,
      TCrossLevyReportTowerBattleResultRsp::default_instance_,
      TCrossLevyReportTowerBattleResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TCrossLevyReportTowerBattleResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TCrossLevyReportTowerBattleResultRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCrossLevyTower_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetTowerInfoRsp_descriptor_, &TCrossLevyGetTowerInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyEnterTowerBattleReq_descriptor_, &TCrossLevyEnterTowerBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyEnterTowerBattleRsp_descriptor_, &TCrossLevyEnterTowerBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReportTowerBattleReq_descriptor_, &TCrossLevyReportTowerBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReportTowerBattleRsp_descriptor_, &TCrossLevyReportTowerBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyTowerAverageAttr_descriptor_, &TCrossLevyTowerAverageAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetTowerAverageAttrReq_descriptor_, &TCrossLevyGetTowerAverageAttrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetTowerAverageAttrRsp_descriptor_, &TCrossLevyGetTowerAverageAttrRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyTowerBattleSquadInfo_descriptor_, &TCrossLevyTowerBattleSquadInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyTowerFightAttr_descriptor_, &TCrossLevyTowerFightAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetTowerBattleArgsReq_descriptor_, &TCrossLevyGetTowerBattleArgsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyGetTowerBattleArgsRsp_descriptor_, &TCrossLevyGetTowerBattleArgsRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReportTowerBattleResultReq_descriptor_, &TCrossLevyReportTowerBattleResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TCrossLevyReportTowerBattleResultRsp_descriptor_, &TCrossLevyReportTowerBattleResultRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto() {
  delete TCrossLevyGetTowerInfoRsp::default_instance_;
  delete TCrossLevyGetTowerInfoRsp_reflection_;
  delete TCrossLevyEnterTowerBattleReq::default_instance_;
  delete TCrossLevyEnterTowerBattleReq_reflection_;
  delete TCrossLevyEnterTowerBattleRsp::default_instance_;
  delete TCrossLevyEnterTowerBattleRsp_reflection_;
  delete TCrossLevyReportTowerBattleReq::default_instance_;
  delete TCrossLevyReportTowerBattleReq_reflection_;
  delete TCrossLevyReportTowerBattleRsp::default_instance_;
  delete TCrossLevyReportTowerBattleRsp_reflection_;
  delete TCrossLevyTowerAverageAttr::default_instance_;
  delete TCrossLevyTowerAverageAttr_reflection_;
  delete TCrossLevyGetTowerAverageAttrReq::default_instance_;
  delete TCrossLevyGetTowerAverageAttrReq_reflection_;
  delete TCrossLevyGetTowerAverageAttrRsp::default_instance_;
  delete TCrossLevyGetTowerAverageAttrRsp_reflection_;
  delete TCrossLevyTowerBattleSquadInfo::default_instance_;
  delete TCrossLevyTowerBattleSquadInfo_reflection_;
  delete TCrossLevyTowerFightAttr::default_instance_;
  delete TCrossLevyTowerFightAttr_reflection_;
  delete TCrossLevyGetTowerBattleArgsReq::default_instance_;
  delete TCrossLevyGetTowerBattleArgsReq_reflection_;
  delete TCrossLevyGetTowerBattleArgsRsp::default_instance_;
  delete TCrossLevyGetTowerBattleArgsRsp_reflection_;
  delete TCrossLevyReportTowerBattleResultReq::default_instance_;
  delete TCrossLevyReportTowerBattleResultReq_reflection_;
  delete TCrossLevyReportTowerBattleResultRsp::default_instance_;
  delete TCrossLevyReportTowerBattleResultRsp_reflection_;
}

void protobuf_AddDesc_net_2fCrossLevyTower_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030net/CrossLevyTower.proto\022\002pb\032\020net/Batt"
    "le.proto\032\026net/CommonReward.proto\"\235\001\n\031TCr"
    "ossLevyGetTowerInfoRsp\022\023\n\013PassLayerId\030\001 "
    "\001(\r\022\025\n\rAttackLayerId\030\002 \001(\r\022\032\n\022AttackMons"
    "terIdArr\030\003 \003(\r\022\017\n\007LoseNum\030\004 \001(\r\022\'\n\nBattl"
    "eArgs\030\005 \001(\0132\023.pb.TGroupMatchArgs\"a\n\035TCro"
    "ssLevyEnterTowerBattleReq\022\017\n\007LayerId\030\001 \001"
    "(\r\022/\n\020BattleCheckParam\030\002 \001(\0132\025.pb.TBattl"
    "eCheckParam\"b\n\035TCrossLevyEnterTowerBattl"
    "eRsp\022\030\n\020LeftChallengeNum\030\001 \001(\r\022\'\n\nBattle"
    "Args\030\002 \001(\0132\023.pb.TGroupMatchArgs\"D\n\036TCros"
    "sLevyReportTowerBattleReq\022\017\n\007LayerId\030\001 \001"
    "(\r\022\021\n\tBattleRet\030\002 \001(\014\"\277\002\n\036TCrossLevyRepo"
    "rtTowerBattleRsp\022\r\n\005IsWin\030\001 \001(\010\022\023\n\013PassL"
    "ayerId\030\002 \001(\r\022\025\n\rAttackLayerId\030\003 \001(\r\022\032\n\022A"
    "ttackMonsterIdArr\030\004 \003(\r\022\017\n\007LoseNum\030\005 \001(\r"
    "\022+\n\016NextBattleArgs\030\006 \001(\0132\023.pb.TGroupMatc"
    "hArgs\022\030\n\020LeftChallengeNum\030\007 \001(\r\022\022\n\nLevyS"
    "cores\030\010 \001(\r\022$\n\tRewardArr\030\t \003(\0132\021.pb.TCom"
    "monReward\022\032\n\022RewardChallengeNum\030\n \001(\r\022\030\n"
    "\020RewardLevyScores\030\013 \001(\r\";\n\032TCrossLevyTow"
    "erAverageAttr\022\016\n\006AttrId\030\001 \001(\r\022\r\n\005Value\030\002"
    " \001(\004\"H\n TCrossLevyGetTowerAverageAttrReq"
    "\022\013\n\003Uid\030\001 \001(\004\022\027\n\017ExpectAttrIdArr\030\002 \003(\r\"Z"
    "\n TCrossLevyGetTowerAverageAttrRsp\0226\n\016Av"
    "erageAttrArr\030\001 \003(\0132\036.pb.TCrossLevyTowerA"
    "verageAttr\"/\n\036TCrossLevyTowerBattleSquad"
    "Info\022\r\n\005Squad\030\001 \003(\r\"P\n\030TCrossLevyTowerFi"
    "ghtAttr\022\016\n\006AttrId\030\001 \001(\r\022\022\n\nPercentVal\030\002 "
    "\001(\005\022\020\n\010ExtraVal\030\003 \001(\004\"\310\002\n\037TCrossLevyGetT"
    "owerBattleArgsReq\022\013\n\003Uid\030\001 \001(\004\022\017\n\007IsEnte"
    "r\030\002 \001(\010\0224\n\010SquadArr\030\003 \003(\0132\".pb.TCrossLev"
    "yTowerBattleSquadInfo\022\027\n\017BattleInfoIdArr"
    "\030\004 \003(\r\022\033\n\023MonsterAdjustConfId\030\005 \001(\r\0226\n\016A"
    "verageAttrArr\030\006 \003(\0132\036.pb.TCrossLevyTower"
    "AverageAttr\022/\n\020BattleCheckParam\030\007 \001(\0132\025."
    "pb.TBattleCheckParam\0222\n\014FightAttrArr\030\010 \003"
    "(\0132\034.pb.TCrossLevyTowerFightAttr\"J\n\037TCro"
    "ssLevyGetTowerBattleArgsRsp\022\'\n\nBattleArg"
    "s\030\001 \001(\0132\023.pb.TGroupMatchArgs\"\216\001\n$TCrossL"
    "evyReportTowerBattleResultReq\022\013\n\003Uid\030\001 \001"
    "(\004\022/\n\020BattleCheckParam\030\002 \001(\0132\025.pb.TBattl"
    "eCheckParam\022(\n\tBattleRet\030\003 \001(\0132\025.pb.TGro"
    "upMatchResult\"5\n$TCrossLevyReportTowerBa"
    "ttleResultRsp\022\r\n\005IsWin\030\001 \001(\010", 1788);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CrossLevyTower.proto", &protobuf_RegisterTypes);
  TCrossLevyGetTowerInfoRsp::default_instance_ = new TCrossLevyGetTowerInfoRsp();
  TCrossLevyEnterTowerBattleReq::default_instance_ = new TCrossLevyEnterTowerBattleReq();
  TCrossLevyEnterTowerBattleRsp::default_instance_ = new TCrossLevyEnterTowerBattleRsp();
  TCrossLevyReportTowerBattleReq::default_instance_ = new TCrossLevyReportTowerBattleReq();
  TCrossLevyReportTowerBattleRsp::default_instance_ = new TCrossLevyReportTowerBattleRsp();
  TCrossLevyTowerAverageAttr::default_instance_ = new TCrossLevyTowerAverageAttr();
  TCrossLevyGetTowerAverageAttrReq::default_instance_ = new TCrossLevyGetTowerAverageAttrReq();
  TCrossLevyGetTowerAverageAttrRsp::default_instance_ = new TCrossLevyGetTowerAverageAttrRsp();
  TCrossLevyTowerBattleSquadInfo::default_instance_ = new TCrossLevyTowerBattleSquadInfo();
  TCrossLevyTowerFightAttr::default_instance_ = new TCrossLevyTowerFightAttr();
  TCrossLevyGetTowerBattleArgsReq::default_instance_ = new TCrossLevyGetTowerBattleArgsReq();
  TCrossLevyGetTowerBattleArgsRsp::default_instance_ = new TCrossLevyGetTowerBattleArgsRsp();
  TCrossLevyReportTowerBattleResultReq::default_instance_ = new TCrossLevyReportTowerBattleResultReq();
  TCrossLevyReportTowerBattleResultRsp::default_instance_ = new TCrossLevyReportTowerBattleResultRsp();
  TCrossLevyGetTowerInfoRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyEnterTowerBattleReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyEnterTowerBattleRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyReportTowerBattleReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyReportTowerBattleRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyTowerAverageAttr::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetTowerAverageAttrReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetTowerAverageAttrRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyTowerBattleSquadInfo::default_instance_->InitAsDefaultInstance();
  TCrossLevyTowerFightAttr::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetTowerBattleArgsReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyGetTowerBattleArgsRsp::default_instance_->InitAsDefaultInstance();
  TCrossLevyReportTowerBattleResultReq::default_instance_->InitAsDefaultInstance();
  TCrossLevyReportTowerBattleResultRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCrossLevyTower_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCrossLevyTower_2eproto {
  StaticDescriptorInitializer_net_2fCrossLevyTower_2eproto() {
    protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  }
} static_descriptor_initializer_net_2fCrossLevyTower_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetTowerInfoRsp::kPassLayerIdFieldNumber;
const int TCrossLevyGetTowerInfoRsp::kAttackLayerIdFieldNumber;
const int TCrossLevyGetTowerInfoRsp::kAttackMonsterIdArrFieldNumber;
const int TCrossLevyGetTowerInfoRsp::kLoseNumFieldNumber;
const int TCrossLevyGetTowerInfoRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetTowerInfoRsp::TCrossLevyGetTowerInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetTowerInfoRsp)
}

void TCrossLevyGetTowerInfoRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TGroupMatchArgs*>(&::pb::TGroupMatchArgs::default_instance());
}

TCrossLevyGetTowerInfoRsp::TCrossLevyGetTowerInfoRsp(const TCrossLevyGetTowerInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetTowerInfoRsp)
}

void TCrossLevyGetTowerInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  passlayerid_ = 0u;
  attacklayerid_ = 0u;
  losenum_ = 0u;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetTowerInfoRsp::~TCrossLevyGetTowerInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetTowerInfoRsp)
  SharedDtor();
}

void TCrossLevyGetTowerInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TCrossLevyGetTowerInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetTowerInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetTowerInfoRsp_descriptor_;
}

const TCrossLevyGetTowerInfoRsp& TCrossLevyGetTowerInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyGetTowerInfoRsp* TCrossLevyGetTowerInfoRsp::default_instance_ = NULL;

TCrossLevyGetTowerInfoRsp* TCrossLevyGetTowerInfoRsp::New() const {
  return new TCrossLevyGetTowerInfoRsp;
}

void TCrossLevyGetTowerInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyGetTowerInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(passlayerid_, attacklayerid_);
    losenum_ = 0u;
    if (has_battleargs()) {
      if (battleargs_ != NULL) battleargs_->::pb::TGroupMatchArgs::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  attackmonsteridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetTowerInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetTowerInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 PassLayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passlayerid_)));
          set_has_passlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AttackLayerId;
        break;
      }

      // optional uint32 AttackLayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_AttackLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacklayerid_)));
          set_has_attacklayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AttackMonsterIdArr;
        break;
      }

      // repeated uint32 AttackMonsterIdArr = 3;
      case 3: {
        if (tag == 24) {
         parse_AttackMonsterIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_attackmonsteridarr())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attackmonsteridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AttackMonsterIdArr;
        if (input->ExpectTag(32)) goto parse_LoseNum;
        break;
      }

      // optional uint32 LoseNum = 4;
      case 4: {
        if (tag == 32) {
         parse_LoseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losenum_)));
          set_has_losenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_BattleArgs;
        break;
      }

      // optional .pb.TGroupMatchArgs BattleArgs = 5;
      case 5: {
        if (tag == 42) {
         parse_BattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetTowerInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetTowerInfoRsp)
  return false;
#undef DO_
}

void TCrossLevyGetTowerInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetTowerInfoRsp)
  // optional uint32 PassLayerId = 1;
  if (has_passlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->passlayerid(), output);
  }

  // optional uint32 AttackLayerId = 2;
  if (has_attacklayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->attacklayerid(), output);
  }

  // repeated uint32 AttackMonsterIdArr = 3;
  for (int i = 0; i < this->attackmonsteridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->attackmonsteridarr(i), output);
  }

  // optional uint32 LoseNum = 4;
  if (has_losenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->losenum(), output);
  }

  // optional .pb.TGroupMatchArgs BattleArgs = 5;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetTowerInfoRsp)
}

::google::protobuf::uint8* TCrossLevyGetTowerInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetTowerInfoRsp)
  // optional uint32 PassLayerId = 1;
  if (has_passlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->passlayerid(), target);
  }

  // optional uint32 AttackLayerId = 2;
  if (has_attacklayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->attacklayerid(), target);
  }

  // repeated uint32 AttackMonsterIdArr = 3;
  for (int i = 0; i < this->attackmonsteridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->attackmonsteridarr(i), target);
  }

  // optional uint32 LoseNum = 4;
  if (has_losenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->losenum(), target);
  }

  // optional .pb.TGroupMatchArgs BattleArgs = 5;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetTowerInfoRsp)
  return target;
}

int TCrossLevyGetTowerInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 PassLayerId = 1;
    if (has_passlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passlayerid());
    }

    // optional uint32 AttackLayerId = 2;
    if (has_attacklayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacklayerid());
    }

    // optional uint32 LoseNum = 4;
    if (has_losenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losenum());
    }

    // optional .pb.TGroupMatchArgs BattleArgs = 5;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  // repeated uint32 AttackMonsterIdArr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->attackmonsteridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attackmonsteridarr(i));
    }
    total_size += 1 * this->attackmonsteridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetTowerInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetTowerInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetTowerInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetTowerInfoRsp::MergeFrom(const TCrossLevyGetTowerInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackmonsteridarr_.MergeFrom(from.attackmonsteridarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_passlayerid()) {
      set_passlayerid(from.passlayerid());
    }
    if (from.has_attacklayerid()) {
      set_attacklayerid(from.attacklayerid());
    }
    if (from.has_losenum()) {
      set_losenum(from.losenum());
    }
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TGroupMatchArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetTowerInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetTowerInfoRsp::CopyFrom(const TCrossLevyGetTowerInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetTowerInfoRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TCrossLevyGetTowerInfoRsp::Swap(TCrossLevyGetTowerInfoRsp* other) {
  if (other != this) {
    std::swap(passlayerid_, other->passlayerid_);
    std::swap(attacklayerid_, other->attacklayerid_);
    attackmonsteridarr_.Swap(&other->attackmonsteridarr_);
    std::swap(losenum_, other->losenum_);
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetTowerInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetTowerInfoRsp_descriptor_;
  metadata.reflection = TCrossLevyGetTowerInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyEnterTowerBattleReq::kLayerIdFieldNumber;
const int TCrossLevyEnterTowerBattleReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TCrossLevyEnterTowerBattleReq::TCrossLevyEnterTowerBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyEnterTowerBattleReq)
}

void TCrossLevyEnterTowerBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TCrossLevyEnterTowerBattleReq::TCrossLevyEnterTowerBattleReq(const TCrossLevyEnterTowerBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyEnterTowerBattleReq)
}

void TCrossLevyEnterTowerBattleReq::SharedCtor() {
  _cached_size_ = 0;
  layerid_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyEnterTowerBattleReq::~TCrossLevyEnterTowerBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyEnterTowerBattleReq)
  SharedDtor();
}

void TCrossLevyEnterTowerBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TCrossLevyEnterTowerBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyEnterTowerBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyEnterTowerBattleReq_descriptor_;
}

const TCrossLevyEnterTowerBattleReq& TCrossLevyEnterTowerBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyEnterTowerBattleReq* TCrossLevyEnterTowerBattleReq::default_instance_ = NULL;

TCrossLevyEnterTowerBattleReq* TCrossLevyEnterTowerBattleReq::New() const {
  return new TCrossLevyEnterTowerBattleReq;
}

void TCrossLevyEnterTowerBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    layerid_ = 0u;
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyEnterTowerBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyEnterTowerBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyEnterTowerBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyEnterTowerBattleReq)
  return false;
#undef DO_
}

void TCrossLevyEnterTowerBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyEnterTowerBattleReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerid(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyEnterTowerBattleReq)
}

::google::protobuf::uint8* TCrossLevyEnterTowerBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyEnterTowerBattleReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerid(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyEnterTowerBattleReq)
  return target;
}

int TCrossLevyEnterTowerBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerId = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyEnterTowerBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyEnterTowerBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyEnterTowerBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyEnterTowerBattleReq::MergeFrom(const TCrossLevyEnterTowerBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyEnterTowerBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyEnterTowerBattleReq::CopyFrom(const TCrossLevyEnterTowerBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyEnterTowerBattleReq::IsInitialized() const {

  return true;
}

void TCrossLevyEnterTowerBattleReq::Swap(TCrossLevyEnterTowerBattleReq* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyEnterTowerBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyEnterTowerBattleReq_descriptor_;
  metadata.reflection = TCrossLevyEnterTowerBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyEnterTowerBattleRsp::kLeftChallengeNumFieldNumber;
const int TCrossLevyEnterTowerBattleRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TCrossLevyEnterTowerBattleRsp::TCrossLevyEnterTowerBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyEnterTowerBattleRsp)
}

void TCrossLevyEnterTowerBattleRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TGroupMatchArgs*>(&::pb::TGroupMatchArgs::default_instance());
}

TCrossLevyEnterTowerBattleRsp::TCrossLevyEnterTowerBattleRsp(const TCrossLevyEnterTowerBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyEnterTowerBattleRsp)
}

void TCrossLevyEnterTowerBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  leftchallengenum_ = 0u;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyEnterTowerBattleRsp::~TCrossLevyEnterTowerBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyEnterTowerBattleRsp)
  SharedDtor();
}

void TCrossLevyEnterTowerBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TCrossLevyEnterTowerBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyEnterTowerBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyEnterTowerBattleRsp_descriptor_;
}

const TCrossLevyEnterTowerBattleRsp& TCrossLevyEnterTowerBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyEnterTowerBattleRsp* TCrossLevyEnterTowerBattleRsp::default_instance_ = NULL;

TCrossLevyEnterTowerBattleRsp* TCrossLevyEnterTowerBattleRsp::New() const {
  return new TCrossLevyEnterTowerBattleRsp;
}

void TCrossLevyEnterTowerBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    leftchallengenum_ = 0u;
    if (has_battleargs()) {
      if (battleargs_ != NULL) battleargs_->::pb::TGroupMatchArgs::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyEnterTowerBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyEnterTowerBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LeftChallengeNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftchallengenum_)));
          set_has_leftchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleArgs;
        break;
      }

      // optional .pb.TGroupMatchArgs BattleArgs = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyEnterTowerBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyEnterTowerBattleRsp)
  return false;
#undef DO_
}

void TCrossLevyEnterTowerBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyEnterTowerBattleRsp)
  // optional uint32 LeftChallengeNum = 1;
  if (has_leftchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->leftchallengenum(), output);
  }

  // optional .pb.TGroupMatchArgs BattleArgs = 2;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyEnterTowerBattleRsp)
}

::google::protobuf::uint8* TCrossLevyEnterTowerBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyEnterTowerBattleRsp)
  // optional uint32 LeftChallengeNum = 1;
  if (has_leftchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->leftchallengenum(), target);
  }

  // optional .pb.TGroupMatchArgs BattleArgs = 2;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyEnterTowerBattleRsp)
  return target;
}

int TCrossLevyEnterTowerBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LeftChallengeNum = 1;
    if (has_leftchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftchallengenum());
    }

    // optional .pb.TGroupMatchArgs BattleArgs = 2;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyEnterTowerBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyEnterTowerBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyEnterTowerBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyEnterTowerBattleRsp::MergeFrom(const TCrossLevyEnterTowerBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_leftchallengenum()) {
      set_leftchallengenum(from.leftchallengenum());
    }
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TGroupMatchArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyEnterTowerBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyEnterTowerBattleRsp::CopyFrom(const TCrossLevyEnterTowerBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyEnterTowerBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TCrossLevyEnterTowerBattleRsp::Swap(TCrossLevyEnterTowerBattleRsp* other) {
  if (other != this) {
    std::swap(leftchallengenum_, other->leftchallengenum_);
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyEnterTowerBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyEnterTowerBattleRsp_descriptor_;
  metadata.reflection = TCrossLevyEnterTowerBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReportTowerBattleReq::kLayerIdFieldNumber;
const int TCrossLevyReportTowerBattleReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReportTowerBattleReq::TCrossLevyReportTowerBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReportTowerBattleReq)
}

void TCrossLevyReportTowerBattleReq::InitAsDefaultInstance() {
}

TCrossLevyReportTowerBattleReq::TCrossLevyReportTowerBattleReq(const TCrossLevyReportTowerBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReportTowerBattleReq)
}

void TCrossLevyReportTowerBattleReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  layerid_ = 0u;
  battleret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReportTowerBattleReq::~TCrossLevyReportTowerBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReportTowerBattleReq)
  SharedDtor();
}

void TCrossLevyReportTowerBattleReq::SharedDtor() {
  if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleret_;
  }
  if (this != default_instance_) {
  }
}

void TCrossLevyReportTowerBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReportTowerBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReportTowerBattleReq_descriptor_;
}

const TCrossLevyReportTowerBattleReq& TCrossLevyReportTowerBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyReportTowerBattleReq* TCrossLevyReportTowerBattleReq::default_instance_ = NULL;

TCrossLevyReportTowerBattleReq* TCrossLevyReportTowerBattleReq::New() const {
  return new TCrossLevyReportTowerBattleReq;
}

void TCrossLevyReportTowerBattleReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    layerid_ = 0u;
    if (has_battleret()) {
      if (battleret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleret_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReportTowerBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReportTowerBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LayerId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layerid_)));
          set_has_layerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleRet;
        break;
      }

      // optional bytes BattleRet = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReportTowerBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReportTowerBattleReq)
  return false;
#undef DO_
}

void TCrossLevyReportTowerBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReportTowerBattleReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layerid(), output);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReportTowerBattleReq)
}

::google::protobuf::uint8* TCrossLevyReportTowerBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReportTowerBattleReq)
  // optional uint32 LayerId = 1;
  if (has_layerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layerid(), target);
  }

  // optional bytes BattleRet = 2;
  if (has_battleret()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReportTowerBattleReq)
  return target;
}

int TCrossLevyReportTowerBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LayerId = 1;
    if (has_layerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layerid());
    }

    // optional bytes BattleRet = 2;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReportTowerBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReportTowerBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReportTowerBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReportTowerBattleReq::MergeFrom(const TCrossLevyReportTowerBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layerid()) {
      set_layerid(from.layerid());
    }
    if (from.has_battleret()) {
      set_battleret(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReportTowerBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReportTowerBattleReq::CopyFrom(const TCrossLevyReportTowerBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReportTowerBattleReq::IsInitialized() const {

  return true;
}

void TCrossLevyReportTowerBattleReq::Swap(TCrossLevyReportTowerBattleReq* other) {
  if (other != this) {
    std::swap(layerid_, other->layerid_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReportTowerBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReportTowerBattleReq_descriptor_;
  metadata.reflection = TCrossLevyReportTowerBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReportTowerBattleRsp::kIsWinFieldNumber;
const int TCrossLevyReportTowerBattleRsp::kPassLayerIdFieldNumber;
const int TCrossLevyReportTowerBattleRsp::kAttackLayerIdFieldNumber;
const int TCrossLevyReportTowerBattleRsp::kAttackMonsterIdArrFieldNumber;
const int TCrossLevyReportTowerBattleRsp::kLoseNumFieldNumber;
const int TCrossLevyReportTowerBattleRsp::kNextBattleArgsFieldNumber;
const int TCrossLevyReportTowerBattleRsp::kLeftChallengeNumFieldNumber;
const int TCrossLevyReportTowerBattleRsp::kLevyScoresFieldNumber;
const int TCrossLevyReportTowerBattleRsp::kRewardArrFieldNumber;
const int TCrossLevyReportTowerBattleRsp::kRewardChallengeNumFieldNumber;
const int TCrossLevyReportTowerBattleRsp::kRewardLevyScoresFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReportTowerBattleRsp::TCrossLevyReportTowerBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReportTowerBattleRsp)
}

void TCrossLevyReportTowerBattleRsp::InitAsDefaultInstance() {
  nextbattleargs_ = const_cast< ::pb::TGroupMatchArgs*>(&::pb::TGroupMatchArgs::default_instance());
}

TCrossLevyReportTowerBattleRsp::TCrossLevyReportTowerBattleRsp(const TCrossLevyReportTowerBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReportTowerBattleRsp)
}

void TCrossLevyReportTowerBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  iswin_ = false;
  passlayerid_ = 0u;
  attacklayerid_ = 0u;
  losenum_ = 0u;
  nextbattleargs_ = NULL;
  leftchallengenum_ = 0u;
  levyscores_ = 0u;
  rewardchallengenum_ = 0u;
  rewardlevyscores_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReportTowerBattleRsp::~TCrossLevyReportTowerBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReportTowerBattleRsp)
  SharedDtor();
}

void TCrossLevyReportTowerBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete nextbattleargs_;
  }
}

void TCrossLevyReportTowerBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReportTowerBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReportTowerBattleRsp_descriptor_;
}

const TCrossLevyReportTowerBattleRsp& TCrossLevyReportTowerBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyReportTowerBattleRsp* TCrossLevyReportTowerBattleRsp::default_instance_ = NULL;

TCrossLevyReportTowerBattleRsp* TCrossLevyReportTowerBattleRsp::New() const {
  return new TCrossLevyReportTowerBattleRsp;
}

void TCrossLevyReportTowerBattleRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyReportTowerBattleRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 247) {
    ZR_(iswin_, passlayerid_);
    ZR_(attacklayerid_, losenum_);
    ZR_(leftchallengenum_, levyscores_);
    if (has_nextbattleargs()) {
      if (nextbattleargs_ != NULL) nextbattleargs_->::pb::TGroupMatchArgs::Clear();
    }
  }
  ZR_(rewardchallengenum_, rewardlevyscores_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  attackmonsteridarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReportTowerBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReportTowerBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PassLayerId;
        break;
      }

      // optional uint32 PassLayerId = 2;
      case 2: {
        if (tag == 16) {
         parse_PassLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passlayerid_)));
          set_has_passlayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_AttackLayerId;
        break;
      }

      // optional uint32 AttackLayerId = 3;
      case 3: {
        if (tag == 24) {
         parse_AttackLayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacklayerid_)));
          set_has_attacklayerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AttackMonsterIdArr;
        break;
      }

      // repeated uint32 AttackMonsterIdArr = 4;
      case 4: {
        if (tag == 32) {
         parse_AttackMonsterIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_attackmonsteridarr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_attackmonsteridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_AttackMonsterIdArr;
        if (input->ExpectTag(40)) goto parse_LoseNum;
        break;
      }

      // optional uint32 LoseNum = 5;
      case 5: {
        if (tag == 40) {
         parse_LoseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losenum_)));
          set_has_losenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_NextBattleArgs;
        break;
      }

      // optional .pb.TGroupMatchArgs NextBattleArgs = 6;
      case 6: {
        if (tag == 50) {
         parse_NextBattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nextbattleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_LeftChallengeNum;
        break;
      }

      // optional uint32 LeftChallengeNum = 7;
      case 7: {
        if (tag == 56) {
         parse_LeftChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftchallengenum_)));
          set_has_leftchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_LevyScores;
        break;
      }

      // optional uint32 LevyScores = 8;
      case 8: {
        if (tag == 64) {
         parse_LevyScores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levyscores_)));
          set_has_levyscores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 9;
      case 9: {
        if (tag == 74) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_RewardArr;
        if (input->ExpectTag(80)) goto parse_RewardChallengeNum;
        break;
      }

      // optional uint32 RewardChallengeNum = 10;
      case 10: {
        if (tag == 80) {
         parse_RewardChallengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardchallengenum_)));
          set_has_rewardchallengenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_RewardLevyScores;
        break;
      }

      // optional uint32 RewardLevyScores = 11;
      case 11: {
        if (tag == 88) {
         parse_RewardLevyScores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardlevyscores_)));
          set_has_rewardlevyscores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReportTowerBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReportTowerBattleRsp)
  return false;
#undef DO_
}

void TCrossLevyReportTowerBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReportTowerBattleRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswin(), output);
  }

  // optional uint32 PassLayerId = 2;
  if (has_passlayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->passlayerid(), output);
  }

  // optional uint32 AttackLayerId = 3;
  if (has_attacklayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attacklayerid(), output);
  }

  // repeated uint32 AttackMonsterIdArr = 4;
  for (int i = 0; i < this->attackmonsteridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->attackmonsteridarr(i), output);
  }

  // optional uint32 LoseNum = 5;
  if (has_losenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->losenum(), output);
  }

  // optional .pb.TGroupMatchArgs NextBattleArgs = 6;
  if (has_nextbattleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->nextbattleargs(), output);
  }

  // optional uint32 LeftChallengeNum = 7;
  if (has_leftchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->leftchallengenum(), output);
  }

  // optional uint32 LevyScores = 8;
  if (has_levyscores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->levyscores(), output);
  }

  // repeated .pb.TCommonReward RewardArr = 9;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rewardarr(i), output);
  }

  // optional uint32 RewardChallengeNum = 10;
  if (has_rewardchallengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rewardchallengenum(), output);
  }

  // optional uint32 RewardLevyScores = 11;
  if (has_rewardlevyscores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->rewardlevyscores(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReportTowerBattleRsp)
}

::google::protobuf::uint8* TCrossLevyReportTowerBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReportTowerBattleRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iswin(), target);
  }

  // optional uint32 PassLayerId = 2;
  if (has_passlayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->passlayerid(), target);
  }

  // optional uint32 AttackLayerId = 3;
  if (has_attacklayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attacklayerid(), target);
  }

  // repeated uint32 AttackMonsterIdArr = 4;
  for (int i = 0; i < this->attackmonsteridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->attackmonsteridarr(i), target);
  }

  // optional uint32 LoseNum = 5;
  if (has_losenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->losenum(), target);
  }

  // optional .pb.TGroupMatchArgs NextBattleArgs = 6;
  if (has_nextbattleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->nextbattleargs(), target);
  }

  // optional uint32 LeftChallengeNum = 7;
  if (has_leftchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->leftchallengenum(), target);
  }

  // optional uint32 LevyScores = 8;
  if (has_levyscores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->levyscores(), target);
  }

  // repeated .pb.TCommonReward RewardArr = 9;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rewardarr(i), target);
  }

  // optional uint32 RewardChallengeNum = 10;
  if (has_rewardchallengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rewardchallengenum(), target);
  }

  // optional uint32 RewardLevyScores = 11;
  if (has_rewardlevyscores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->rewardlevyscores(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReportTowerBattleRsp)
  return target;
}

int TCrossLevyReportTowerBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsWin = 1;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

    // optional uint32 PassLayerId = 2;
    if (has_passlayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passlayerid());
    }

    // optional uint32 AttackLayerId = 3;
    if (has_attacklayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacklayerid());
    }

    // optional uint32 LoseNum = 5;
    if (has_losenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losenum());
    }

    // optional .pb.TGroupMatchArgs NextBattleArgs = 6;
    if (has_nextbattleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nextbattleargs());
    }

    // optional uint32 LeftChallengeNum = 7;
    if (has_leftchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftchallengenum());
    }

    // optional uint32 LevyScores = 8;
    if (has_levyscores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levyscores());
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional uint32 RewardChallengeNum = 10;
    if (has_rewardchallengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardchallengenum());
    }

    // optional uint32 RewardLevyScores = 11;
    if (has_rewardlevyscores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardlevyscores());
    }

  }
  // repeated uint32 AttackMonsterIdArr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->attackmonsteridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->attackmonsteridarr(i));
    }
    total_size += 1 * this->attackmonsteridarr_size() + data_size;
  }

  // repeated .pb.TCommonReward RewardArr = 9;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReportTowerBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReportTowerBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReportTowerBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReportTowerBattleRsp::MergeFrom(const TCrossLevyReportTowerBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackmonsteridarr_.MergeFrom(from.attackmonsteridarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_passlayerid()) {
      set_passlayerid(from.passlayerid());
    }
    if (from.has_attacklayerid()) {
      set_attacklayerid(from.attacklayerid());
    }
    if (from.has_losenum()) {
      set_losenum(from.losenum());
    }
    if (from.has_nextbattleargs()) {
      mutable_nextbattleargs()->::pb::TGroupMatchArgs::MergeFrom(from.nextbattleargs());
    }
    if (from.has_leftchallengenum()) {
      set_leftchallengenum(from.leftchallengenum());
    }
    if (from.has_levyscores()) {
      set_levyscores(from.levyscores());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_rewardchallengenum()) {
      set_rewardchallengenum(from.rewardchallengenum());
    }
    if (from.has_rewardlevyscores()) {
      set_rewardlevyscores(from.rewardlevyscores());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReportTowerBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReportTowerBattleRsp::CopyFrom(const TCrossLevyReportTowerBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReportTowerBattleRsp::IsInitialized() const {

  if (has_nextbattleargs()) {
    if (!this->nextbattleargs().IsInitialized()) return false;
  }
  return true;
}

void TCrossLevyReportTowerBattleRsp::Swap(TCrossLevyReportTowerBattleRsp* other) {
  if (other != this) {
    std::swap(iswin_, other->iswin_);
    std::swap(passlayerid_, other->passlayerid_);
    std::swap(attacklayerid_, other->attacklayerid_);
    attackmonsteridarr_.Swap(&other->attackmonsteridarr_);
    std::swap(losenum_, other->losenum_);
    std::swap(nextbattleargs_, other->nextbattleargs_);
    std::swap(leftchallengenum_, other->leftchallengenum_);
    std::swap(levyscores_, other->levyscores_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(rewardchallengenum_, other->rewardchallengenum_);
    std::swap(rewardlevyscores_, other->rewardlevyscores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReportTowerBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReportTowerBattleRsp_descriptor_;
  metadata.reflection = TCrossLevyReportTowerBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyTowerAverageAttr::kAttrIdFieldNumber;
const int TCrossLevyTowerAverageAttr::kValueFieldNumber;
#endif  // !_MSC_VER

TCrossLevyTowerAverageAttr::TCrossLevyTowerAverageAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyTowerAverageAttr)
}

void TCrossLevyTowerAverageAttr::InitAsDefaultInstance() {
}

TCrossLevyTowerAverageAttr::TCrossLevyTowerAverageAttr(const TCrossLevyTowerAverageAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyTowerAverageAttr)
}

void TCrossLevyTowerAverageAttr::SharedCtor() {
  _cached_size_ = 0;
  attrid_ = 0u;
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyTowerAverageAttr::~TCrossLevyTowerAverageAttr() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyTowerAverageAttr)
  SharedDtor();
}

void TCrossLevyTowerAverageAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyTowerAverageAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyTowerAverageAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyTowerAverageAttr_descriptor_;
}

const TCrossLevyTowerAverageAttr& TCrossLevyTowerAverageAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyTowerAverageAttr* TCrossLevyTowerAverageAttr::default_instance_ = NULL;

TCrossLevyTowerAverageAttr* TCrossLevyTowerAverageAttr::New() const {
  return new TCrossLevyTowerAverageAttr;
}

void TCrossLevyTowerAverageAttr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyTowerAverageAttr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(value_, attrid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyTowerAverageAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyTowerAverageAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AttrId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Value;
        break;
      }

      // optional uint64 Value = 2;
      case 2: {
        if (tag == 16) {
         parse_Value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyTowerAverageAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyTowerAverageAttr)
  return false;
#undef DO_
}

void TCrossLevyTowerAverageAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyTowerAverageAttr)
  // optional uint32 AttrId = 1;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrid(), output);
  }

  // optional uint64 Value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyTowerAverageAttr)
}

::google::protobuf::uint8* TCrossLevyTowerAverageAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyTowerAverageAttr)
  // optional uint32 AttrId = 1;
  if (has_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attrid(), target);
  }

  // optional uint64 Value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyTowerAverageAttr)
  return target;
}

int TCrossLevyTowerAverageAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AttrId = 1;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrid());
    }

    // optional uint64 Value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyTowerAverageAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyTowerAverageAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyTowerAverageAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyTowerAverageAttr::MergeFrom(const TCrossLevyTowerAverageAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyTowerAverageAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyTowerAverageAttr::CopyFrom(const TCrossLevyTowerAverageAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyTowerAverageAttr::IsInitialized() const {

  return true;
}

void TCrossLevyTowerAverageAttr::Swap(TCrossLevyTowerAverageAttr* other) {
  if (other != this) {
    std::swap(attrid_, other->attrid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyTowerAverageAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyTowerAverageAttr_descriptor_;
  metadata.reflection = TCrossLevyTowerAverageAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetTowerAverageAttrReq::kUidFieldNumber;
const int TCrossLevyGetTowerAverageAttrReq::kExpectAttrIdArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetTowerAverageAttrReq::TCrossLevyGetTowerAverageAttrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetTowerAverageAttrReq)
}

void TCrossLevyGetTowerAverageAttrReq::InitAsDefaultInstance() {
}

TCrossLevyGetTowerAverageAttrReq::TCrossLevyGetTowerAverageAttrReq(const TCrossLevyGetTowerAverageAttrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetTowerAverageAttrReq)
}

void TCrossLevyGetTowerAverageAttrReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetTowerAverageAttrReq::~TCrossLevyGetTowerAverageAttrReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetTowerAverageAttrReq)
  SharedDtor();
}

void TCrossLevyGetTowerAverageAttrReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetTowerAverageAttrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetTowerAverageAttrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetTowerAverageAttrReq_descriptor_;
}

const TCrossLevyGetTowerAverageAttrReq& TCrossLevyGetTowerAverageAttrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyGetTowerAverageAttrReq* TCrossLevyGetTowerAverageAttrReq::default_instance_ = NULL;

TCrossLevyGetTowerAverageAttrReq* TCrossLevyGetTowerAverageAttrReq::New() const {
  return new TCrossLevyGetTowerAverageAttrReq;
}

void TCrossLevyGetTowerAverageAttrReq::Clear() {
  uid_ = GOOGLE_ULONGLONG(0);
  expectattridarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetTowerAverageAttrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetTowerAverageAttrReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ExpectAttrIdArr;
        break;
      }

      // repeated uint32 ExpectAttrIdArr = 2;
      case 2: {
        if (tag == 16) {
         parse_ExpectAttrIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_expectattridarr())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_expectattridarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ExpectAttrIdArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetTowerAverageAttrReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetTowerAverageAttrReq)
  return false;
#undef DO_
}

void TCrossLevyGetTowerAverageAttrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetTowerAverageAttrReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // repeated uint32 ExpectAttrIdArr = 2;
  for (int i = 0; i < this->expectattridarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->expectattridarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetTowerAverageAttrReq)
}

::google::protobuf::uint8* TCrossLevyGetTowerAverageAttrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetTowerAverageAttrReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // repeated uint32 ExpectAttrIdArr = 2;
  for (int i = 0; i < this->expectattridarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->expectattridarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetTowerAverageAttrReq)
  return target;
}

int TCrossLevyGetTowerAverageAttrReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

  }
  // repeated uint32 ExpectAttrIdArr = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->expectattridarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->expectattridarr(i));
    }
    total_size += 1 * this->expectattridarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetTowerAverageAttrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetTowerAverageAttrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetTowerAverageAttrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetTowerAverageAttrReq::MergeFrom(const TCrossLevyGetTowerAverageAttrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  expectattridarr_.MergeFrom(from.expectattridarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetTowerAverageAttrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetTowerAverageAttrReq::CopyFrom(const TCrossLevyGetTowerAverageAttrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetTowerAverageAttrReq::IsInitialized() const {

  return true;
}

void TCrossLevyGetTowerAverageAttrReq::Swap(TCrossLevyGetTowerAverageAttrReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    expectattridarr_.Swap(&other->expectattridarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetTowerAverageAttrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetTowerAverageAttrReq_descriptor_;
  metadata.reflection = TCrossLevyGetTowerAverageAttrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetTowerAverageAttrRsp::kAverageAttrArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetTowerAverageAttrRsp::TCrossLevyGetTowerAverageAttrRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetTowerAverageAttrRsp)
}

void TCrossLevyGetTowerAverageAttrRsp::InitAsDefaultInstance() {
}

TCrossLevyGetTowerAverageAttrRsp::TCrossLevyGetTowerAverageAttrRsp(const TCrossLevyGetTowerAverageAttrRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetTowerAverageAttrRsp)
}

void TCrossLevyGetTowerAverageAttrRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetTowerAverageAttrRsp::~TCrossLevyGetTowerAverageAttrRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetTowerAverageAttrRsp)
  SharedDtor();
}

void TCrossLevyGetTowerAverageAttrRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyGetTowerAverageAttrRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetTowerAverageAttrRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetTowerAverageAttrRsp_descriptor_;
}

const TCrossLevyGetTowerAverageAttrRsp& TCrossLevyGetTowerAverageAttrRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyGetTowerAverageAttrRsp* TCrossLevyGetTowerAverageAttrRsp::default_instance_ = NULL;

TCrossLevyGetTowerAverageAttrRsp* TCrossLevyGetTowerAverageAttrRsp::New() const {
  return new TCrossLevyGetTowerAverageAttrRsp;
}

void TCrossLevyGetTowerAverageAttrRsp::Clear() {
  averageattrarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetTowerAverageAttrRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetTowerAverageAttrRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 1;
      case 1: {
        if (tag == 10) {
         parse_AverageAttrArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_averageattrarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_AverageAttrArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetTowerAverageAttrRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetTowerAverageAttrRsp)
  return false;
#undef DO_
}

void TCrossLevyGetTowerAverageAttrRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetTowerAverageAttrRsp)
  // repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 1;
  for (int i = 0; i < this->averageattrarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->averageattrarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetTowerAverageAttrRsp)
}

::google::protobuf::uint8* TCrossLevyGetTowerAverageAttrRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetTowerAverageAttrRsp)
  // repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 1;
  for (int i = 0; i < this->averageattrarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->averageattrarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetTowerAverageAttrRsp)
  return target;
}

int TCrossLevyGetTowerAverageAttrRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 1;
  total_size += 1 * this->averageattrarr_size();
  for (int i = 0; i < this->averageattrarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->averageattrarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetTowerAverageAttrRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetTowerAverageAttrRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetTowerAverageAttrRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetTowerAverageAttrRsp::MergeFrom(const TCrossLevyGetTowerAverageAttrRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  averageattrarr_.MergeFrom(from.averageattrarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetTowerAverageAttrRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetTowerAverageAttrRsp::CopyFrom(const TCrossLevyGetTowerAverageAttrRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetTowerAverageAttrRsp::IsInitialized() const {

  return true;
}

void TCrossLevyGetTowerAverageAttrRsp::Swap(TCrossLevyGetTowerAverageAttrRsp* other) {
  if (other != this) {
    averageattrarr_.Swap(&other->averageattrarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetTowerAverageAttrRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetTowerAverageAttrRsp_descriptor_;
  metadata.reflection = TCrossLevyGetTowerAverageAttrRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyTowerBattleSquadInfo::kSquadFieldNumber;
#endif  // !_MSC_VER

TCrossLevyTowerBattleSquadInfo::TCrossLevyTowerBattleSquadInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyTowerBattleSquadInfo)
}

void TCrossLevyTowerBattleSquadInfo::InitAsDefaultInstance() {
}

TCrossLevyTowerBattleSquadInfo::TCrossLevyTowerBattleSquadInfo(const TCrossLevyTowerBattleSquadInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyTowerBattleSquadInfo)
}

void TCrossLevyTowerBattleSquadInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyTowerBattleSquadInfo::~TCrossLevyTowerBattleSquadInfo() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyTowerBattleSquadInfo)
  SharedDtor();
}

void TCrossLevyTowerBattleSquadInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyTowerBattleSquadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyTowerBattleSquadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyTowerBattleSquadInfo_descriptor_;
}

const TCrossLevyTowerBattleSquadInfo& TCrossLevyTowerBattleSquadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyTowerBattleSquadInfo* TCrossLevyTowerBattleSquadInfo::default_instance_ = NULL;

TCrossLevyTowerBattleSquadInfo* TCrossLevyTowerBattleSquadInfo::New() const {
  return new TCrossLevyTowerBattleSquadInfo;
}

void TCrossLevyTowerBattleSquadInfo::Clear() {
  squad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyTowerBattleSquadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyTowerBattleSquadInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 Squad = 1;
      case 1: {
        if (tag == 8) {
         parse_Squad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_squad())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_squad())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_Squad;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyTowerBattleSquadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyTowerBattleSquadInfo)
  return false;
#undef DO_
}

void TCrossLevyTowerBattleSquadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyTowerBattleSquadInfo)
  // repeated uint32 Squad = 1;
  for (int i = 0; i < this->squad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->squad(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyTowerBattleSquadInfo)
}

::google::protobuf::uint8* TCrossLevyTowerBattleSquadInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyTowerBattleSquadInfo)
  // repeated uint32 Squad = 1;
  for (int i = 0; i < this->squad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->squad(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyTowerBattleSquadInfo)
  return target;
}

int TCrossLevyTowerBattleSquadInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint32 Squad = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->squad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->squad(i));
    }
    total_size += 1 * this->squad_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyTowerBattleSquadInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyTowerBattleSquadInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyTowerBattleSquadInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyTowerBattleSquadInfo::MergeFrom(const TCrossLevyTowerBattleSquadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  squad_.MergeFrom(from.squad_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyTowerBattleSquadInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyTowerBattleSquadInfo::CopyFrom(const TCrossLevyTowerBattleSquadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyTowerBattleSquadInfo::IsInitialized() const {

  return true;
}

void TCrossLevyTowerBattleSquadInfo::Swap(TCrossLevyTowerBattleSquadInfo* other) {
  if (other != this) {
    squad_.Swap(&other->squad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyTowerBattleSquadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyTowerBattleSquadInfo_descriptor_;
  metadata.reflection = TCrossLevyTowerBattleSquadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyTowerFightAttr::kAttrIdFieldNumber;
const int TCrossLevyTowerFightAttr::kPercentValFieldNumber;
const int TCrossLevyTowerFightAttr::kExtraValFieldNumber;
#endif  // !_MSC_VER

TCrossLevyTowerFightAttr::TCrossLevyTowerFightAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyTowerFightAttr)
}

void TCrossLevyTowerFightAttr::InitAsDefaultInstance() {
}

TCrossLevyTowerFightAttr::TCrossLevyTowerFightAttr(const TCrossLevyTowerFightAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyTowerFightAttr)
}

void TCrossLevyTowerFightAttr::SharedCtor() {
  _cached_size_ = 0;
  attrid_ = 0u;
  percentval_ = 0;
  extraval_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyTowerFightAttr::~TCrossLevyTowerFightAttr() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyTowerFightAttr)
  SharedDtor();
}

void TCrossLevyTowerFightAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyTowerFightAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyTowerFightAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyTowerFightAttr_descriptor_;
}

const TCrossLevyTowerFightAttr& TCrossLevyTowerFightAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyTowerFightAttr* TCrossLevyTowerFightAttr::default_instance_ = NULL;

TCrossLevyTowerFightAttr* TCrossLevyTowerFightAttr::New() const {
  return new TCrossLevyTowerFightAttr;
}

void TCrossLevyTowerFightAttr::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyTowerFightAttr*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(attrid_, extraval_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyTowerFightAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyTowerFightAttr)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 AttrId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PercentVal;
        break;
      }

      // optional int32 PercentVal = 2;
      case 2: {
        if (tag == 16) {
         parse_PercentVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &percentval_)));
          set_has_percentval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ExtraVal;
        break;
      }

      // optional uint64 ExtraVal = 3;
      case 3: {
        if (tag == 24) {
         parse_ExtraVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &extraval_)));
          set_has_extraval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyTowerFightAttr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyTowerFightAttr)
  return false;
#undef DO_
}

void TCrossLevyTowerFightAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyTowerFightAttr)
  // optional uint32 AttrId = 1;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attrid(), output);
  }

  // optional int32 PercentVal = 2;
  if (has_percentval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->percentval(), output);
  }

  // optional uint64 ExtraVal = 3;
  if (has_extraval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->extraval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyTowerFightAttr)
}

::google::protobuf::uint8* TCrossLevyTowerFightAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyTowerFightAttr)
  // optional uint32 AttrId = 1;
  if (has_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attrid(), target);
  }

  // optional int32 PercentVal = 2;
  if (has_percentval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->percentval(), target);
  }

  // optional uint64 ExtraVal = 3;
  if (has_extraval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->extraval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyTowerFightAttr)
  return target;
}

int TCrossLevyTowerFightAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 AttrId = 1;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attrid());
    }

    // optional int32 PercentVal = 2;
    if (has_percentval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->percentval());
    }

    // optional uint64 ExtraVal = 3;
    if (has_extraval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->extraval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyTowerFightAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyTowerFightAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyTowerFightAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyTowerFightAttr::MergeFrom(const TCrossLevyTowerFightAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_percentval()) {
      set_percentval(from.percentval());
    }
    if (from.has_extraval()) {
      set_extraval(from.extraval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyTowerFightAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyTowerFightAttr::CopyFrom(const TCrossLevyTowerFightAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyTowerFightAttr::IsInitialized() const {

  return true;
}

void TCrossLevyTowerFightAttr::Swap(TCrossLevyTowerFightAttr* other) {
  if (other != this) {
    std::swap(attrid_, other->attrid_);
    std::swap(percentval_, other->percentval_);
    std::swap(extraval_, other->extraval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyTowerFightAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyTowerFightAttr_descriptor_;
  metadata.reflection = TCrossLevyTowerFightAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetTowerBattleArgsReq::kUidFieldNumber;
const int TCrossLevyGetTowerBattleArgsReq::kIsEnterFieldNumber;
const int TCrossLevyGetTowerBattleArgsReq::kSquadArrFieldNumber;
const int TCrossLevyGetTowerBattleArgsReq::kBattleInfoIdArrFieldNumber;
const int TCrossLevyGetTowerBattleArgsReq::kMonsterAdjustConfIdFieldNumber;
const int TCrossLevyGetTowerBattleArgsReq::kAverageAttrArrFieldNumber;
const int TCrossLevyGetTowerBattleArgsReq::kBattleCheckParamFieldNumber;
const int TCrossLevyGetTowerBattleArgsReq::kFightAttrArrFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetTowerBattleArgsReq::TCrossLevyGetTowerBattleArgsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetTowerBattleArgsReq)
}

void TCrossLevyGetTowerBattleArgsReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TCrossLevyGetTowerBattleArgsReq::TCrossLevyGetTowerBattleArgsReq(const TCrossLevyGetTowerBattleArgsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetTowerBattleArgsReq)
}

void TCrossLevyGetTowerBattleArgsReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  isenter_ = false;
  monsteradjustconfid_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetTowerBattleArgsReq::~TCrossLevyGetTowerBattleArgsReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetTowerBattleArgsReq)
  SharedDtor();
}

void TCrossLevyGetTowerBattleArgsReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TCrossLevyGetTowerBattleArgsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetTowerBattleArgsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetTowerBattleArgsReq_descriptor_;
}

const TCrossLevyGetTowerBattleArgsReq& TCrossLevyGetTowerBattleArgsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyGetTowerBattleArgsReq* TCrossLevyGetTowerBattleArgsReq::default_instance_ = NULL;

TCrossLevyGetTowerBattleArgsReq* TCrossLevyGetTowerBattleArgsReq::New() const {
  return new TCrossLevyGetTowerBattleArgsReq;
}

void TCrossLevyGetTowerBattleArgsReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TCrossLevyGetTowerBattleArgsReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 83) {
    ZR_(isenter_, monsteradjustconfid_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  squadarr_.Clear();
  battleinfoidarr_.Clear();
  averageattrarr_.Clear();
  fightattrarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetTowerBattleArgsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetTowerBattleArgsReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_IsEnter;
        break;
      }

      // optional bool IsEnter = 2;
      case 2: {
        if (tag == 16) {
         parse_IsEnter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isenter_)));
          set_has_isenter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SquadArr;
        break;
      }

      // repeated .pb.TCrossLevyTowerBattleSquadInfo SquadArr = 3;
      case 3: {
        if (tag == 26) {
         parse_SquadArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_squadarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_SquadArr;
        if (input->ExpectTag(32)) goto parse_BattleInfoIdArr;
        break;
      }

      // repeated uint32 BattleInfoIdArr = 4;
      case 4: {
        if (tag == 32) {
         parse_BattleInfoIdArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_battleinfoidarr())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_battleinfoidarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BattleInfoIdArr;
        if (input->ExpectTag(40)) goto parse_MonsterAdjustConfId;
        break;
      }

      // optional uint32 MonsterAdjustConfId = 5;
      case 5: {
        if (tag == 40) {
         parse_MonsterAdjustConfId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsteradjustconfid_)));
          set_has_monsteradjustconfid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AverageAttrArr;
        break;
      }

      // repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 6;
      case 6: {
        if (tag == 50) {
         parse_AverageAttrArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_averageattrarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_AverageAttrArr;
        if (input->ExpectTag(58)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 7;
      case 7: {
        if (tag == 58) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_FightAttrArr;
        break;
      }

      // repeated .pb.TCrossLevyTowerFightAttr FightAttrArr = 8;
      case 8: {
        if (tag == 66) {
         parse_FightAttrArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fightattrarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_FightAttrArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetTowerBattleArgsReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetTowerBattleArgsReq)
  return false;
#undef DO_
}

void TCrossLevyGetTowerBattleArgsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetTowerBattleArgsReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional bool IsEnter = 2;
  if (has_isenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isenter(), output);
  }

  // repeated .pb.TCrossLevyTowerBattleSquadInfo SquadArr = 3;
  for (int i = 0; i < this->squadarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->squadarr(i), output);
  }

  // repeated uint32 BattleInfoIdArr = 4;
  for (int i = 0; i < this->battleinfoidarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->battleinfoidarr(i), output);
  }

  // optional uint32 MonsterAdjustConfId = 5;
  if (has_monsteradjustconfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->monsteradjustconfid(), output);
  }

  // repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 6;
  for (int i = 0; i < this->averageattrarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->averageattrarr(i), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 7;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->battlecheckparam(), output);
  }

  // repeated .pb.TCrossLevyTowerFightAttr FightAttrArr = 8;
  for (int i = 0; i < this->fightattrarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fightattrarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetTowerBattleArgsReq)
}

::google::protobuf::uint8* TCrossLevyGetTowerBattleArgsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetTowerBattleArgsReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional bool IsEnter = 2;
  if (has_isenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isenter(), target);
  }

  // repeated .pb.TCrossLevyTowerBattleSquadInfo SquadArr = 3;
  for (int i = 0; i < this->squadarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->squadarr(i), target);
  }

  // repeated uint32 BattleInfoIdArr = 4;
  for (int i = 0; i < this->battleinfoidarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->battleinfoidarr(i), target);
  }

  // optional uint32 MonsterAdjustConfId = 5;
  if (has_monsteradjustconfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->monsteradjustconfid(), target);
  }

  // repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 6;
  for (int i = 0; i < this->averageattrarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->averageattrarr(i), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 7;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->battlecheckparam(), target);
  }

  // repeated .pb.TCrossLevyTowerFightAttr FightAttrArr = 8;
  for (int i = 0; i < this->fightattrarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fightattrarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetTowerBattleArgsReq)
  return target;
}

int TCrossLevyGetTowerBattleArgsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional bool IsEnter = 2;
    if (has_isenter()) {
      total_size += 1 + 1;
    }

    // optional uint32 MonsterAdjustConfId = 5;
    if (has_monsteradjustconfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsteradjustconfid());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 7;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  // repeated .pb.TCrossLevyTowerBattleSquadInfo SquadArr = 3;
  total_size += 1 * this->squadarr_size();
  for (int i = 0; i < this->squadarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->squadarr(i));
  }

  // repeated uint32 BattleInfoIdArr = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->battleinfoidarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->battleinfoidarr(i));
    }
    total_size += 1 * this->battleinfoidarr_size() + data_size;
  }

  // repeated .pb.TCrossLevyTowerAverageAttr AverageAttrArr = 6;
  total_size += 1 * this->averageattrarr_size();
  for (int i = 0; i < this->averageattrarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->averageattrarr(i));
  }

  // repeated .pb.TCrossLevyTowerFightAttr FightAttrArr = 8;
  total_size += 1 * this->fightattrarr_size();
  for (int i = 0; i < this->fightattrarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fightattrarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetTowerBattleArgsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetTowerBattleArgsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetTowerBattleArgsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetTowerBattleArgsReq::MergeFrom(const TCrossLevyGetTowerBattleArgsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  squadarr_.MergeFrom(from.squadarr_);
  battleinfoidarr_.MergeFrom(from.battleinfoidarr_);
  averageattrarr_.MergeFrom(from.averageattrarr_);
  fightattrarr_.MergeFrom(from.fightattrarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_isenter()) {
      set_isenter(from.isenter());
    }
    if (from.has_monsteradjustconfid()) {
      set_monsteradjustconfid(from.monsteradjustconfid());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetTowerBattleArgsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetTowerBattleArgsReq::CopyFrom(const TCrossLevyGetTowerBattleArgsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetTowerBattleArgsReq::IsInitialized() const {

  return true;
}

void TCrossLevyGetTowerBattleArgsReq::Swap(TCrossLevyGetTowerBattleArgsReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(isenter_, other->isenter_);
    squadarr_.Swap(&other->squadarr_);
    battleinfoidarr_.Swap(&other->battleinfoidarr_);
    std::swap(monsteradjustconfid_, other->monsteradjustconfid_);
    averageattrarr_.Swap(&other->averageattrarr_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    fightattrarr_.Swap(&other->fightattrarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetTowerBattleArgsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetTowerBattleArgsReq_descriptor_;
  metadata.reflection = TCrossLevyGetTowerBattleArgsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyGetTowerBattleArgsRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TCrossLevyGetTowerBattleArgsRsp::TCrossLevyGetTowerBattleArgsRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyGetTowerBattleArgsRsp)
}

void TCrossLevyGetTowerBattleArgsRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TGroupMatchArgs*>(&::pb::TGroupMatchArgs::default_instance());
}

TCrossLevyGetTowerBattleArgsRsp::TCrossLevyGetTowerBattleArgsRsp(const TCrossLevyGetTowerBattleArgsRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyGetTowerBattleArgsRsp)
}

void TCrossLevyGetTowerBattleArgsRsp::SharedCtor() {
  _cached_size_ = 0;
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyGetTowerBattleArgsRsp::~TCrossLevyGetTowerBattleArgsRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyGetTowerBattleArgsRsp)
  SharedDtor();
}

void TCrossLevyGetTowerBattleArgsRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TCrossLevyGetTowerBattleArgsRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyGetTowerBattleArgsRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyGetTowerBattleArgsRsp_descriptor_;
}

const TCrossLevyGetTowerBattleArgsRsp& TCrossLevyGetTowerBattleArgsRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyGetTowerBattleArgsRsp* TCrossLevyGetTowerBattleArgsRsp::default_instance_ = NULL;

TCrossLevyGetTowerBattleArgsRsp* TCrossLevyGetTowerBattleArgsRsp::New() const {
  return new TCrossLevyGetTowerBattleArgsRsp;
}

void TCrossLevyGetTowerBattleArgsRsp::Clear() {
  if (has_battleargs()) {
    if (battleargs_ != NULL) battleargs_->::pb::TGroupMatchArgs::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyGetTowerBattleArgsRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyGetTowerBattleArgsRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.TGroupMatchArgs BattleArgs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyGetTowerBattleArgsRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyGetTowerBattleArgsRsp)
  return false;
#undef DO_
}

void TCrossLevyGetTowerBattleArgsRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyGetTowerBattleArgsRsp)
  // optional .pb.TGroupMatchArgs BattleArgs = 1;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyGetTowerBattleArgsRsp)
}

::google::protobuf::uint8* TCrossLevyGetTowerBattleArgsRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyGetTowerBattleArgsRsp)
  // optional .pb.TGroupMatchArgs BattleArgs = 1;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyGetTowerBattleArgsRsp)
  return target;
}

int TCrossLevyGetTowerBattleArgsRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.TGroupMatchArgs BattleArgs = 1;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyGetTowerBattleArgsRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyGetTowerBattleArgsRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyGetTowerBattleArgsRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyGetTowerBattleArgsRsp::MergeFrom(const TCrossLevyGetTowerBattleArgsRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TGroupMatchArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyGetTowerBattleArgsRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyGetTowerBattleArgsRsp::CopyFrom(const TCrossLevyGetTowerBattleArgsRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyGetTowerBattleArgsRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TCrossLevyGetTowerBattleArgsRsp::Swap(TCrossLevyGetTowerBattleArgsRsp* other) {
  if (other != this) {
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyGetTowerBattleArgsRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyGetTowerBattleArgsRsp_descriptor_;
  metadata.reflection = TCrossLevyGetTowerBattleArgsRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReportTowerBattleResultReq::kUidFieldNumber;
const int TCrossLevyReportTowerBattleResultReq::kBattleCheckParamFieldNumber;
const int TCrossLevyReportTowerBattleResultReq::kBattleRetFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReportTowerBattleResultReq::TCrossLevyReportTowerBattleResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReportTowerBattleResultReq)
}

void TCrossLevyReportTowerBattleResultReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
  battleret_ = const_cast< ::pb::TGroupMatchResult*>(&::pb::TGroupMatchResult::default_instance());
}

TCrossLevyReportTowerBattleResultReq::TCrossLevyReportTowerBattleResultReq(const TCrossLevyReportTowerBattleResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReportTowerBattleResultReq)
}

void TCrossLevyReportTowerBattleResultReq::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  battlecheckparam_ = NULL;
  battleret_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReportTowerBattleResultReq::~TCrossLevyReportTowerBattleResultReq() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReportTowerBattleResultReq)
  SharedDtor();
}

void TCrossLevyReportTowerBattleResultReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
    delete battleret_;
  }
}

void TCrossLevyReportTowerBattleResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReportTowerBattleResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReportTowerBattleResultReq_descriptor_;
}

const TCrossLevyReportTowerBattleResultReq& TCrossLevyReportTowerBattleResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyReportTowerBattleResultReq* TCrossLevyReportTowerBattleResultReq::default_instance_ = NULL;

TCrossLevyReportTowerBattleResultReq* TCrossLevyReportTowerBattleResultReq::New() const {
  return new TCrossLevyReportTowerBattleResultReq;
}

void TCrossLevyReportTowerBattleResultReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
    if (has_battleret()) {
      if (battleret_ != NULL) battleret_->::pb::TGroupMatchResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReportTowerBattleResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReportTowerBattleResultReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 2;
      case 2: {
        if (tag == 18) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleRet;
        break;
      }

      // optional .pb.TGroupMatchResult BattleRet = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReportTowerBattleResultReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReportTowerBattleResultReq)
  return false;
#undef DO_
}

void TCrossLevyReportTowerBattleResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReportTowerBattleResultReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->battlecheckparam(), output);
  }

  // optional .pb.TGroupMatchResult BattleRet = 3;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battleret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReportTowerBattleResultReq)
}

::google::protobuf::uint8* TCrossLevyReportTowerBattleResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReportTowerBattleResultReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 2;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->battlecheckparam(), target);
  }

  // optional .pb.TGroupMatchResult BattleRet = 3;
  if (has_battleret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battleret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReportTowerBattleResultReq)
  return target;
}

int TCrossLevyReportTowerBattleResultReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 2;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

    // optional .pb.TGroupMatchResult BattleRet = 3;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReportTowerBattleResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReportTowerBattleResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReportTowerBattleResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReportTowerBattleResultReq::MergeFrom(const TCrossLevyReportTowerBattleResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
    if (from.has_battleret()) {
      mutable_battleret()->::pb::TGroupMatchResult::MergeFrom(from.battleret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReportTowerBattleResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReportTowerBattleResultReq::CopyFrom(const TCrossLevyReportTowerBattleResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReportTowerBattleResultReq::IsInitialized() const {

  if (has_battleret()) {
    if (!this->battleret().IsInitialized()) return false;
  }
  return true;
}

void TCrossLevyReportTowerBattleResultReq::Swap(TCrossLevyReportTowerBattleResultReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(battleret_, other->battleret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReportTowerBattleResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReportTowerBattleResultReq_descriptor_;
  metadata.reflection = TCrossLevyReportTowerBattleResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TCrossLevyReportTowerBattleResultRsp::kIsWinFieldNumber;
#endif  // !_MSC_VER

TCrossLevyReportTowerBattleResultRsp::TCrossLevyReportTowerBattleResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TCrossLevyReportTowerBattleResultRsp)
}

void TCrossLevyReportTowerBattleResultRsp::InitAsDefaultInstance() {
}

TCrossLevyReportTowerBattleResultRsp::TCrossLevyReportTowerBattleResultRsp(const TCrossLevyReportTowerBattleResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TCrossLevyReportTowerBattleResultRsp)
}

void TCrossLevyReportTowerBattleResultRsp::SharedCtor() {
  _cached_size_ = 0;
  iswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TCrossLevyReportTowerBattleResultRsp::~TCrossLevyReportTowerBattleResultRsp() {
  // @@protoc_insertion_point(destructor:pb.TCrossLevyReportTowerBattleResultRsp)
  SharedDtor();
}

void TCrossLevyReportTowerBattleResultRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TCrossLevyReportTowerBattleResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TCrossLevyReportTowerBattleResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TCrossLevyReportTowerBattleResultRsp_descriptor_;
}

const TCrossLevyReportTowerBattleResultRsp& TCrossLevyReportTowerBattleResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossLevyTower_2eproto();
  return *default_instance_;
}

TCrossLevyReportTowerBattleResultRsp* TCrossLevyReportTowerBattleResultRsp::default_instance_ = NULL;

TCrossLevyReportTowerBattleResultRsp* TCrossLevyReportTowerBattleResultRsp::New() const {
  return new TCrossLevyReportTowerBattleResultRsp;
}

void TCrossLevyReportTowerBattleResultRsp::Clear() {
  iswin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TCrossLevyReportTowerBattleResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TCrossLevyReportTowerBattleResultRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsWin = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TCrossLevyReportTowerBattleResultRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TCrossLevyReportTowerBattleResultRsp)
  return false;
#undef DO_
}

void TCrossLevyReportTowerBattleResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TCrossLevyReportTowerBattleResultRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TCrossLevyReportTowerBattleResultRsp)
}

::google::protobuf::uint8* TCrossLevyReportTowerBattleResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TCrossLevyReportTowerBattleResultRsp)
  // optional bool IsWin = 1;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iswin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TCrossLevyReportTowerBattleResultRsp)
  return target;
}

int TCrossLevyReportTowerBattleResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsWin = 1;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TCrossLevyReportTowerBattleResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TCrossLevyReportTowerBattleResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TCrossLevyReportTowerBattleResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TCrossLevyReportTowerBattleResultRsp::MergeFrom(const TCrossLevyReportTowerBattleResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TCrossLevyReportTowerBattleResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TCrossLevyReportTowerBattleResultRsp::CopyFrom(const TCrossLevyReportTowerBattleResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TCrossLevyReportTowerBattleResultRsp::IsInitialized() const {

  return true;
}

void TCrossLevyReportTowerBattleResultRsp::Swap(TCrossLevyReportTowerBattleResultRsp* other) {
  if (other != this) {
    std::swap(iswin_, other->iswin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TCrossLevyReportTowerBattleResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TCrossLevyReportTowerBattleResultRsp_descriptor_;
  metadata.reflection = TCrossLevyReportTowerBattleResultRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
