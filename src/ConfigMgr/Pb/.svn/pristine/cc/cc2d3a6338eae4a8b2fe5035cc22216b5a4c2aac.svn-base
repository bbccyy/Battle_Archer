// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TreasureToken.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/TreasureToken.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TTreasureTokenSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTreasureTokenSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTreasureTokenGetInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTreasureTokenGetInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTreasureTokenGetRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTreasureTokenGetRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTreasureTokenGetTotalRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTreasureTokenGetTotalRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTreasureTokenPush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTreasureTokenPush_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTreasureTokenGetGoldRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTreasureTokenGetGoldRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TTreasureTokenGetGoldRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TTreasureTokenGetGoldRewardRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fTreasureToken_2eproto() {
  protobuf_AddDesc_net_2fTreasureToken_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/TreasureToken.proto");
  GOOGLE_CHECK(file != NULL);
  TTreasureTokenSingle_descriptor_ = file->message_type(0);
  static const int TTreasureTokenSingle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenSingle, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenSingle, generalreceivetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenSingle, highorderreceivetime_),
  };
  TTreasureTokenSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTreasureTokenSingle_descriptor_,
      TTreasureTokenSingle::default_instance_,
      TTreasureTokenSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTreasureTokenSingle));
  TTreasureTokenGetInfoRsp_descriptor_ = file->message_type(1);
  static const int TTreasureTokenGetInfoRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetInfoRsp, listid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetInfoRsp, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetInfoRsp, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetInfoRsp, paytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetInfoRsp, tokenarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetInfoRsp, isopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetInfoRsp, scores_),
  };
  TTreasureTokenGetInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTreasureTokenGetInfoRsp_descriptor_,
      TTreasureTokenGetInfoRsp::default_instance_,
      TTreasureTokenGetInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTreasureTokenGetInfoRsp));
  TTreasureTokenGetRewardReq_descriptor_ = file->message_type(2);
  static const int TTreasureTokenGetRewardReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetRewardReq, listid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetRewardReq, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetRewardReq, ishighorderrewarded_),
  };
  TTreasureTokenGetRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTreasureTokenGetRewardReq_descriptor_,
      TTreasureTokenGetRewardReq::default_instance_,
      TTreasureTokenGetRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTreasureTokenGetRewardReq));
  TTreasureTokenGetTotalRewardRsp_descriptor_ = file->message_type(3);
  static const int TTreasureTokenGetTotalRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetTotalRewardRsp, tokenarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetTotalRewardRsp, rewardarr_),
  };
  TTreasureTokenGetTotalRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTreasureTokenGetTotalRewardRsp_descriptor_,
      TTreasureTokenGetTotalRewardRsp::default_instance_,
      TTreasureTokenGetTotalRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetTotalRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetTotalRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTreasureTokenGetTotalRewardRsp));
  TTreasureTokenPush_descriptor_ = file->message_type(4);
  static const int TTreasureTokenPush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenPush, paytime_),
  };
  TTreasureTokenPush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTreasureTokenPush_descriptor_,
      TTreasureTokenPush::default_instance_,
      TTreasureTokenPush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenPush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenPush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTreasureTokenPush));
  TTreasureTokenGetGoldRewardReq_descriptor_ = file->message_type(5);
  static const int TTreasureTokenGetGoldRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetGoldRewardReq, needgoldnum_),
  };
  TTreasureTokenGetGoldRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTreasureTokenGetGoldRewardReq_descriptor_,
      TTreasureTokenGetGoldRewardReq::default_instance_,
      TTreasureTokenGetGoldRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetGoldRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetGoldRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTreasureTokenGetGoldRewardReq));
  TTreasureTokenGetGoldRewardRsp_descriptor_ = file->message_type(6);
  static const int TTreasureTokenGetGoldRewardRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetGoldRewardRsp, tokenarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetGoldRewardRsp, rewardarr_),
  };
  TTreasureTokenGetGoldRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TTreasureTokenGetGoldRewardRsp_descriptor_,
      TTreasureTokenGetGoldRewardRsp::default_instance_,
      TTreasureTokenGetGoldRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetGoldRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TTreasureTokenGetGoldRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TTreasureTokenGetGoldRewardRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fTreasureToken_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTreasureTokenSingle_descriptor_, &TTreasureTokenSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTreasureTokenGetInfoRsp_descriptor_, &TTreasureTokenGetInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTreasureTokenGetRewardReq_descriptor_, &TTreasureTokenGetRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTreasureTokenGetTotalRewardRsp_descriptor_, &TTreasureTokenGetTotalRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTreasureTokenPush_descriptor_, &TTreasureTokenPush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTreasureTokenGetGoldRewardReq_descriptor_, &TTreasureTokenGetGoldRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TTreasureTokenGetGoldRewardRsp_descriptor_, &TTreasureTokenGetGoldRewardRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fTreasureToken_2eproto() {
  delete TTreasureTokenSingle::default_instance_;
  delete TTreasureTokenSingle_reflection_;
  delete TTreasureTokenGetInfoRsp::default_instance_;
  delete TTreasureTokenGetInfoRsp_reflection_;
  delete TTreasureTokenGetRewardReq::default_instance_;
  delete TTreasureTokenGetRewardReq_reflection_;
  delete TTreasureTokenGetTotalRewardRsp::default_instance_;
  delete TTreasureTokenGetTotalRewardRsp_reflection_;
  delete TTreasureTokenPush::default_instance_;
  delete TTreasureTokenPush_reflection_;
  delete TTreasureTokenGetGoldRewardReq::default_instance_;
  delete TTreasureTokenGetGoldRewardReq_reflection_;
  delete TTreasureTokenGetGoldRewardRsp::default_instance_;
  delete TTreasureTokenGetGoldRewardRsp_reflection_;
}

void protobuf_AddDesc_net_2fTreasureToken_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fCommonReward_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027net/TreasureToken.proto\022\002pb\032\026net/Commo"
    "nReward.proto\"a\n\024TTreasureTokenSingle\022\017\n"
    "\007LevelId\030\001 \001(\r\022\032\n\022GeneralReceiveTime\030\002 \001"
    "(\004\022\034\n\024HighOrderReceiveTime\030\003 \001(\004\"\252\001\n\030TTr"
    "easureTokenGetInfoRsp\022\016\n\006ListId\030\001 \001(\r\022\020\n"
    "\010OpenTime\030\002 \001(\004\022\017\n\007EndTime\030\003 \001(\004\022\017\n\007PayT"
    "ime\030\004 \001(\004\022*\n\010TokenArr\030\005 \003(\0132\030.pb.TTreasu"
    "reTokenSingle\022\016\n\006IsOpen\030\006 \001(\010\022\016\n\006Scores\030"
    "\007 \001(\r\"Z\n\032TTreasureTokenGetRewardReq\022\016\n\006L"
    "istId\030\001 \001(\r\022\017\n\007LevelId\030\002 \001(\r\022\033\n\023IsHighOr"
    "derRewarded\030\003 \001(\010\"s\n\037TTreasureTokenGetTo"
    "talRewardRsp\022*\n\010TokenArr\030\001 \003(\0132\030.pb.TTre"
    "asureTokenSingle\022$\n\tRewardArr\030\002 \003(\0132\021.pb"
    ".TCommonReward\"%\n\022TTreasureTokenPush\022\017\n\007"
    "PayTime\030\001 \001(\004\"5\n\036TTreasureTokenGetGoldRe"
    "wardReq\022\023\n\013NeedGoldNum\030\001 \001(\r\"r\n\036TTreasur"
    "eTokenGetGoldRewardRsp\022*\n\010TokenArr\030\001 \003(\013"
    "2\030.pb.TTreasureTokenSingle\022$\n\tRewardArr\030"
    "\002 \003(\0132\021.pb.TCommonReward", 744);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/TreasureToken.proto", &protobuf_RegisterTypes);
  TTreasureTokenSingle::default_instance_ = new TTreasureTokenSingle();
  TTreasureTokenGetInfoRsp::default_instance_ = new TTreasureTokenGetInfoRsp();
  TTreasureTokenGetRewardReq::default_instance_ = new TTreasureTokenGetRewardReq();
  TTreasureTokenGetTotalRewardRsp::default_instance_ = new TTreasureTokenGetTotalRewardRsp();
  TTreasureTokenPush::default_instance_ = new TTreasureTokenPush();
  TTreasureTokenGetGoldRewardReq::default_instance_ = new TTreasureTokenGetGoldRewardReq();
  TTreasureTokenGetGoldRewardRsp::default_instance_ = new TTreasureTokenGetGoldRewardRsp();
  TTreasureTokenSingle::default_instance_->InitAsDefaultInstance();
  TTreasureTokenGetInfoRsp::default_instance_->InitAsDefaultInstance();
  TTreasureTokenGetRewardReq::default_instance_->InitAsDefaultInstance();
  TTreasureTokenGetTotalRewardRsp::default_instance_->InitAsDefaultInstance();
  TTreasureTokenPush::default_instance_->InitAsDefaultInstance();
  TTreasureTokenGetGoldRewardReq::default_instance_->InitAsDefaultInstance();
  TTreasureTokenGetGoldRewardRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fTreasureToken_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fTreasureToken_2eproto {
  StaticDescriptorInitializer_net_2fTreasureToken_2eproto() {
    protobuf_AddDesc_net_2fTreasureToken_2eproto();
  }
} static_descriptor_initializer_net_2fTreasureToken_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TTreasureTokenSingle::kLevelIdFieldNumber;
const int TTreasureTokenSingle::kGeneralReceiveTimeFieldNumber;
const int TTreasureTokenSingle::kHighOrderReceiveTimeFieldNumber;
#endif  // !_MSC_VER

TTreasureTokenSingle::TTreasureTokenSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTreasureTokenSingle)
}

void TTreasureTokenSingle::InitAsDefaultInstance() {
}

TTreasureTokenSingle::TTreasureTokenSingle(const TTreasureTokenSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTreasureTokenSingle)
}

void TTreasureTokenSingle::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  generalreceivetime_ = GOOGLE_ULONGLONG(0);
  highorderreceivetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTreasureTokenSingle::~TTreasureTokenSingle() {
  // @@protoc_insertion_point(destructor:pb.TTreasureTokenSingle)
  SharedDtor();
}

void TTreasureTokenSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTreasureTokenSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTreasureTokenSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTreasureTokenSingle_descriptor_;
}

const TTreasureTokenSingle& TTreasureTokenSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTreasureToken_2eproto();
  return *default_instance_;
}

TTreasureTokenSingle* TTreasureTokenSingle::default_instance_ = NULL;

TTreasureTokenSingle* TTreasureTokenSingle::New() const {
  return new TTreasureTokenSingle;
}

void TTreasureTokenSingle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTreasureTokenSingle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(generalreceivetime_, levelid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTreasureTokenSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTreasureTokenSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 LevelId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_GeneralReceiveTime;
        break;
      }

      // optional uint64 GeneralReceiveTime = 2;
      case 2: {
        if (tag == 16) {
         parse_GeneralReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &generalreceivetime_)));
          set_has_generalreceivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_HighOrderReceiveTime;
        break;
      }

      // optional uint64 HighOrderReceiveTime = 3;
      case 3: {
        if (tag == 24) {
         parse_HighOrderReceiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &highorderreceivetime_)));
          set_has_highorderreceivetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTreasureTokenSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTreasureTokenSingle)
  return false;
#undef DO_
}

void TTreasureTokenSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTreasureTokenSingle)
  // optional uint32 LevelId = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  // optional uint64 GeneralReceiveTime = 2;
  if (has_generalreceivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->generalreceivetime(), output);
  }

  // optional uint64 HighOrderReceiveTime = 3;
  if (has_highorderreceivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->highorderreceivetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTreasureTokenSingle)
}

::google::protobuf::uint8* TTreasureTokenSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTreasureTokenSingle)
  // optional uint32 LevelId = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  // optional uint64 GeneralReceiveTime = 2;
  if (has_generalreceivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->generalreceivetime(), target);
  }

  // optional uint64 HighOrderReceiveTime = 3;
  if (has_highorderreceivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->highorderreceivetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTreasureTokenSingle)
  return target;
}

int TTreasureTokenSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 LevelId = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional uint64 GeneralReceiveTime = 2;
    if (has_generalreceivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->generalreceivetime());
    }

    // optional uint64 HighOrderReceiveTime = 3;
    if (has_highorderreceivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->highorderreceivetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTreasureTokenSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTreasureTokenSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTreasureTokenSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTreasureTokenSingle::MergeFrom(const TTreasureTokenSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_generalreceivetime()) {
      set_generalreceivetime(from.generalreceivetime());
    }
    if (from.has_highorderreceivetime()) {
      set_highorderreceivetime(from.highorderreceivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTreasureTokenSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTreasureTokenSingle::CopyFrom(const TTreasureTokenSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTreasureTokenSingle::IsInitialized() const {

  return true;
}

void TTreasureTokenSingle::Swap(TTreasureTokenSingle* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(generalreceivetime_, other->generalreceivetime_);
    std::swap(highorderreceivetime_, other->highorderreceivetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTreasureTokenSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTreasureTokenSingle_descriptor_;
  metadata.reflection = TTreasureTokenSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTreasureTokenGetInfoRsp::kListIdFieldNumber;
const int TTreasureTokenGetInfoRsp::kOpenTimeFieldNumber;
const int TTreasureTokenGetInfoRsp::kEndTimeFieldNumber;
const int TTreasureTokenGetInfoRsp::kPayTimeFieldNumber;
const int TTreasureTokenGetInfoRsp::kTokenArrFieldNumber;
const int TTreasureTokenGetInfoRsp::kIsOpenFieldNumber;
const int TTreasureTokenGetInfoRsp::kScoresFieldNumber;
#endif  // !_MSC_VER

TTreasureTokenGetInfoRsp::TTreasureTokenGetInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTreasureTokenGetInfoRsp)
}

void TTreasureTokenGetInfoRsp::InitAsDefaultInstance() {
}

TTreasureTokenGetInfoRsp::TTreasureTokenGetInfoRsp(const TTreasureTokenGetInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTreasureTokenGetInfoRsp)
}

void TTreasureTokenGetInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  listid_ = 0u;
  opentime_ = GOOGLE_ULONGLONG(0);
  endtime_ = GOOGLE_ULONGLONG(0);
  paytime_ = GOOGLE_ULONGLONG(0);
  isopen_ = false;
  scores_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTreasureTokenGetInfoRsp::~TTreasureTokenGetInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TTreasureTokenGetInfoRsp)
  SharedDtor();
}

void TTreasureTokenGetInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTreasureTokenGetInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTreasureTokenGetInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTreasureTokenGetInfoRsp_descriptor_;
}

const TTreasureTokenGetInfoRsp& TTreasureTokenGetInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTreasureToken_2eproto();
  return *default_instance_;
}

TTreasureTokenGetInfoRsp* TTreasureTokenGetInfoRsp::default_instance_ = NULL;

TTreasureTokenGetInfoRsp* TTreasureTokenGetInfoRsp::New() const {
  return new TTreasureTokenGetInfoRsp;
}

void TTreasureTokenGetInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTreasureTokenGetInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(opentime_, paytime_);
    scores_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tokenarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTreasureTokenGetInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTreasureTokenGetInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ListId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listid_)));
          set_has_listid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_OpenTime;
        break;
      }

      // optional uint64 OpenTime = 2;
      case 2: {
        if (tag == 16) {
         parse_OpenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }

      // optional uint64 EndTime = 3;
      case 3: {
        if (tag == 24) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_PayTime;
        break;
      }

      // optional uint64 PayTime = 4;
      case 4: {
        if (tag == 32) {
         parse_PayTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &paytime_)));
          set_has_paytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TokenArr;
        break;
      }

      // repeated .pb.TTreasureTokenSingle TokenArr = 5;
      case 5: {
        if (tag == 42) {
         parse_TokenArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokenarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_TokenArr;
        if (input->ExpectTag(48)) goto parse_IsOpen;
        break;
      }

      // optional bool IsOpen = 6;
      case 6: {
        if (tag == 48) {
         parse_IsOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_Scores;
        break;
      }

      // optional uint32 Scores = 7;
      case 7: {
        if (tag == 56) {
         parse_Scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scores_)));
          set_has_scores();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTreasureTokenGetInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTreasureTokenGetInfoRsp)
  return false;
#undef DO_
}

void TTreasureTokenGetInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTreasureTokenGetInfoRsp)
  // optional uint32 ListId = 1;
  if (has_listid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->listid(), output);
  }

  // optional uint64 OpenTime = 2;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->opentime(), output);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  // optional uint64 PayTime = 4;
  if (has_paytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->paytime(), output);
  }

  // repeated .pb.TTreasureTokenSingle TokenArr = 5;
  for (int i = 0; i < this->tokenarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tokenarr(i), output);
  }

  // optional bool IsOpen = 6;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isopen(), output);
  }

  // optional uint32 Scores = 7;
  if (has_scores()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->scores(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTreasureTokenGetInfoRsp)
}

::google::protobuf::uint8* TTreasureTokenGetInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTreasureTokenGetInfoRsp)
  // optional uint32 ListId = 1;
  if (has_listid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->listid(), target);
  }

  // optional uint64 OpenTime = 2;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->opentime(), target);
  }

  // optional uint64 EndTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  // optional uint64 PayTime = 4;
  if (has_paytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->paytime(), target);
  }

  // repeated .pb.TTreasureTokenSingle TokenArr = 5;
  for (int i = 0; i < this->tokenarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tokenarr(i), target);
  }

  // optional bool IsOpen = 6;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isopen(), target);
  }

  // optional uint32 Scores = 7;
  if (has_scores()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->scores(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTreasureTokenGetInfoRsp)
  return target;
}

int TTreasureTokenGetInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ListId = 1;
    if (has_listid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listid());
    }

    // optional uint64 OpenTime = 2;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opentime());
    }

    // optional uint64 EndTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional uint64 PayTime = 4;
    if (has_paytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->paytime());
    }

    // optional bool IsOpen = 6;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

    // optional uint32 Scores = 7;
    if (has_scores()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scores());
    }

  }
  // repeated .pb.TTreasureTokenSingle TokenArr = 5;
  total_size += 1 * this->tokenarr_size();
  for (int i = 0; i < this->tokenarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tokenarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTreasureTokenGetInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTreasureTokenGetInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTreasureTokenGetInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTreasureTokenGetInfoRsp::MergeFrom(const TTreasureTokenGetInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tokenarr_.MergeFrom(from.tokenarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listid()) {
      set_listid(from.listid());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_paytime()) {
      set_paytime(from.paytime());
    }
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
    if (from.has_scores()) {
      set_scores(from.scores());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTreasureTokenGetInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTreasureTokenGetInfoRsp::CopyFrom(const TTreasureTokenGetInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTreasureTokenGetInfoRsp::IsInitialized() const {

  return true;
}

void TTreasureTokenGetInfoRsp::Swap(TTreasureTokenGetInfoRsp* other) {
  if (other != this) {
    std::swap(listid_, other->listid_);
    std::swap(opentime_, other->opentime_);
    std::swap(endtime_, other->endtime_);
    std::swap(paytime_, other->paytime_);
    tokenarr_.Swap(&other->tokenarr_);
    std::swap(isopen_, other->isopen_);
    std::swap(scores_, other->scores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTreasureTokenGetInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTreasureTokenGetInfoRsp_descriptor_;
  metadata.reflection = TTreasureTokenGetInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTreasureTokenGetRewardReq::kListIdFieldNumber;
const int TTreasureTokenGetRewardReq::kLevelIdFieldNumber;
const int TTreasureTokenGetRewardReq::kIsHighOrderRewardedFieldNumber;
#endif  // !_MSC_VER

TTreasureTokenGetRewardReq::TTreasureTokenGetRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTreasureTokenGetRewardReq)
}

void TTreasureTokenGetRewardReq::InitAsDefaultInstance() {
}

TTreasureTokenGetRewardReq::TTreasureTokenGetRewardReq(const TTreasureTokenGetRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTreasureTokenGetRewardReq)
}

void TTreasureTokenGetRewardReq::SharedCtor() {
  _cached_size_ = 0;
  listid_ = 0u;
  levelid_ = 0u;
  ishighorderrewarded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTreasureTokenGetRewardReq::~TTreasureTokenGetRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TTreasureTokenGetRewardReq)
  SharedDtor();
}

void TTreasureTokenGetRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTreasureTokenGetRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTreasureTokenGetRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTreasureTokenGetRewardReq_descriptor_;
}

const TTreasureTokenGetRewardReq& TTreasureTokenGetRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTreasureToken_2eproto();
  return *default_instance_;
}

TTreasureTokenGetRewardReq* TTreasureTokenGetRewardReq::default_instance_ = NULL;

TTreasureTokenGetRewardReq* TTreasureTokenGetRewardReq::New() const {
  return new TTreasureTokenGetRewardReq;
}

void TTreasureTokenGetRewardReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TTreasureTokenGetRewardReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(listid_, ishighorderrewarded_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTreasureTokenGetRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTreasureTokenGetRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ListId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listid_)));
          set_has_listid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_LevelId;
        break;
      }

      // optional uint32 LevelId = 2;
      case 2: {
        if (tag == 16) {
         parse_LevelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_IsHighOrderRewarded;
        break;
      }

      // optional bool IsHighOrderRewarded = 3;
      case 3: {
        if (tag == 24) {
         parse_IsHighOrderRewarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishighorderrewarded_)));
          set_has_ishighorderrewarded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTreasureTokenGetRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTreasureTokenGetRewardReq)
  return false;
#undef DO_
}

void TTreasureTokenGetRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTreasureTokenGetRewardReq)
  // optional uint32 ListId = 1;
  if (has_listid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->listid(), output);
  }

  // optional uint32 LevelId = 2;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levelid(), output);
  }

  // optional bool IsHighOrderRewarded = 3;
  if (has_ishighorderrewarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ishighorderrewarded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTreasureTokenGetRewardReq)
}

::google::protobuf::uint8* TTreasureTokenGetRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTreasureTokenGetRewardReq)
  // optional uint32 ListId = 1;
  if (has_listid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->listid(), target);
  }

  // optional uint32 LevelId = 2;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->levelid(), target);
  }

  // optional bool IsHighOrderRewarded = 3;
  if (has_ishighorderrewarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ishighorderrewarded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTreasureTokenGetRewardReq)
  return target;
}

int TTreasureTokenGetRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ListId = 1;
    if (has_listid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listid());
    }

    // optional uint32 LevelId = 2;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

    // optional bool IsHighOrderRewarded = 3;
    if (has_ishighorderrewarded()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTreasureTokenGetRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTreasureTokenGetRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTreasureTokenGetRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTreasureTokenGetRewardReq::MergeFrom(const TTreasureTokenGetRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_listid()) {
      set_listid(from.listid());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
    if (from.has_ishighorderrewarded()) {
      set_ishighorderrewarded(from.ishighorderrewarded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTreasureTokenGetRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTreasureTokenGetRewardReq::CopyFrom(const TTreasureTokenGetRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTreasureTokenGetRewardReq::IsInitialized() const {

  return true;
}

void TTreasureTokenGetRewardReq::Swap(TTreasureTokenGetRewardReq* other) {
  if (other != this) {
    std::swap(listid_, other->listid_);
    std::swap(levelid_, other->levelid_);
    std::swap(ishighorderrewarded_, other->ishighorderrewarded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTreasureTokenGetRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTreasureTokenGetRewardReq_descriptor_;
  metadata.reflection = TTreasureTokenGetRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTreasureTokenGetTotalRewardRsp::kTokenArrFieldNumber;
const int TTreasureTokenGetTotalRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TTreasureTokenGetTotalRewardRsp::TTreasureTokenGetTotalRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTreasureTokenGetTotalRewardRsp)
}

void TTreasureTokenGetTotalRewardRsp::InitAsDefaultInstance() {
}

TTreasureTokenGetTotalRewardRsp::TTreasureTokenGetTotalRewardRsp(const TTreasureTokenGetTotalRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTreasureTokenGetTotalRewardRsp)
}

void TTreasureTokenGetTotalRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTreasureTokenGetTotalRewardRsp::~TTreasureTokenGetTotalRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TTreasureTokenGetTotalRewardRsp)
  SharedDtor();
}

void TTreasureTokenGetTotalRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTreasureTokenGetTotalRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTreasureTokenGetTotalRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTreasureTokenGetTotalRewardRsp_descriptor_;
}

const TTreasureTokenGetTotalRewardRsp& TTreasureTokenGetTotalRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTreasureToken_2eproto();
  return *default_instance_;
}

TTreasureTokenGetTotalRewardRsp* TTreasureTokenGetTotalRewardRsp::default_instance_ = NULL;

TTreasureTokenGetTotalRewardRsp* TTreasureTokenGetTotalRewardRsp::New() const {
  return new TTreasureTokenGetTotalRewardRsp;
}

void TTreasureTokenGetTotalRewardRsp::Clear() {
  tokenarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTreasureTokenGetTotalRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTreasureTokenGetTotalRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTreasureTokenSingle TokenArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TokenArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokenarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TokenArr;
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTreasureTokenGetTotalRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTreasureTokenGetTotalRewardRsp)
  return false;
#undef DO_
}

void TTreasureTokenGetTotalRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTreasureTokenGetTotalRewardRsp)
  // repeated .pb.TTreasureTokenSingle TokenArr = 1;
  for (int i = 0; i < this->tokenarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tokenarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTreasureTokenGetTotalRewardRsp)
}

::google::protobuf::uint8* TTreasureTokenGetTotalRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTreasureTokenGetTotalRewardRsp)
  // repeated .pb.TTreasureTokenSingle TokenArr = 1;
  for (int i = 0; i < this->tokenarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tokenarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTreasureTokenGetTotalRewardRsp)
  return target;
}

int TTreasureTokenGetTotalRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TTreasureTokenSingle TokenArr = 1;
  total_size += 1 * this->tokenarr_size();
  for (int i = 0; i < this->tokenarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tokenarr(i));
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTreasureTokenGetTotalRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTreasureTokenGetTotalRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTreasureTokenGetTotalRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTreasureTokenGetTotalRewardRsp::MergeFrom(const TTreasureTokenGetTotalRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tokenarr_.MergeFrom(from.tokenarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTreasureTokenGetTotalRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTreasureTokenGetTotalRewardRsp::CopyFrom(const TTreasureTokenGetTotalRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTreasureTokenGetTotalRewardRsp::IsInitialized() const {

  return true;
}

void TTreasureTokenGetTotalRewardRsp::Swap(TTreasureTokenGetTotalRewardRsp* other) {
  if (other != this) {
    tokenarr_.Swap(&other->tokenarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTreasureTokenGetTotalRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTreasureTokenGetTotalRewardRsp_descriptor_;
  metadata.reflection = TTreasureTokenGetTotalRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTreasureTokenPush::kPayTimeFieldNumber;
#endif  // !_MSC_VER

TTreasureTokenPush::TTreasureTokenPush()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTreasureTokenPush)
}

void TTreasureTokenPush::InitAsDefaultInstance() {
}

TTreasureTokenPush::TTreasureTokenPush(const TTreasureTokenPush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTreasureTokenPush)
}

void TTreasureTokenPush::SharedCtor() {
  _cached_size_ = 0;
  paytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTreasureTokenPush::~TTreasureTokenPush() {
  // @@protoc_insertion_point(destructor:pb.TTreasureTokenPush)
  SharedDtor();
}

void TTreasureTokenPush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTreasureTokenPush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTreasureTokenPush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTreasureTokenPush_descriptor_;
}

const TTreasureTokenPush& TTreasureTokenPush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTreasureToken_2eproto();
  return *default_instance_;
}

TTreasureTokenPush* TTreasureTokenPush::default_instance_ = NULL;

TTreasureTokenPush* TTreasureTokenPush::New() const {
  return new TTreasureTokenPush;
}

void TTreasureTokenPush::Clear() {
  paytime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTreasureTokenPush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTreasureTokenPush)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 PayTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &paytime_)));
          set_has_paytime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTreasureTokenPush)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTreasureTokenPush)
  return false;
#undef DO_
}

void TTreasureTokenPush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTreasureTokenPush)
  // optional uint64 PayTime = 1;
  if (has_paytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->paytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTreasureTokenPush)
}

::google::protobuf::uint8* TTreasureTokenPush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTreasureTokenPush)
  // optional uint64 PayTime = 1;
  if (has_paytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->paytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTreasureTokenPush)
  return target;
}

int TTreasureTokenPush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 PayTime = 1;
    if (has_paytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->paytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTreasureTokenPush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTreasureTokenPush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTreasureTokenPush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTreasureTokenPush::MergeFrom(const TTreasureTokenPush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paytime()) {
      set_paytime(from.paytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTreasureTokenPush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTreasureTokenPush::CopyFrom(const TTreasureTokenPush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTreasureTokenPush::IsInitialized() const {

  return true;
}

void TTreasureTokenPush::Swap(TTreasureTokenPush* other) {
  if (other != this) {
    std::swap(paytime_, other->paytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTreasureTokenPush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTreasureTokenPush_descriptor_;
  metadata.reflection = TTreasureTokenPush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTreasureTokenGetGoldRewardReq::kNeedGoldNumFieldNumber;
#endif  // !_MSC_VER

TTreasureTokenGetGoldRewardReq::TTreasureTokenGetGoldRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTreasureTokenGetGoldRewardReq)
}

void TTreasureTokenGetGoldRewardReq::InitAsDefaultInstance() {
}

TTreasureTokenGetGoldRewardReq::TTreasureTokenGetGoldRewardReq(const TTreasureTokenGetGoldRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTreasureTokenGetGoldRewardReq)
}

void TTreasureTokenGetGoldRewardReq::SharedCtor() {
  _cached_size_ = 0;
  needgoldnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTreasureTokenGetGoldRewardReq::~TTreasureTokenGetGoldRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TTreasureTokenGetGoldRewardReq)
  SharedDtor();
}

void TTreasureTokenGetGoldRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTreasureTokenGetGoldRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTreasureTokenGetGoldRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTreasureTokenGetGoldRewardReq_descriptor_;
}

const TTreasureTokenGetGoldRewardReq& TTreasureTokenGetGoldRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTreasureToken_2eproto();
  return *default_instance_;
}

TTreasureTokenGetGoldRewardReq* TTreasureTokenGetGoldRewardReq::default_instance_ = NULL;

TTreasureTokenGetGoldRewardReq* TTreasureTokenGetGoldRewardReq::New() const {
  return new TTreasureTokenGetGoldRewardReq;
}

void TTreasureTokenGetGoldRewardReq::Clear() {
  needgoldnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTreasureTokenGetGoldRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTreasureTokenGetGoldRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 NeedGoldNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needgoldnum_)));
          set_has_needgoldnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTreasureTokenGetGoldRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTreasureTokenGetGoldRewardReq)
  return false;
#undef DO_
}

void TTreasureTokenGetGoldRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTreasureTokenGetGoldRewardReq)
  // optional uint32 NeedGoldNum = 1;
  if (has_needgoldnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->needgoldnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTreasureTokenGetGoldRewardReq)
}

::google::protobuf::uint8* TTreasureTokenGetGoldRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTreasureTokenGetGoldRewardReq)
  // optional uint32 NeedGoldNum = 1;
  if (has_needgoldnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->needgoldnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTreasureTokenGetGoldRewardReq)
  return target;
}

int TTreasureTokenGetGoldRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 NeedGoldNum = 1;
    if (has_needgoldnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needgoldnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTreasureTokenGetGoldRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTreasureTokenGetGoldRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTreasureTokenGetGoldRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTreasureTokenGetGoldRewardReq::MergeFrom(const TTreasureTokenGetGoldRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_needgoldnum()) {
      set_needgoldnum(from.needgoldnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTreasureTokenGetGoldRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTreasureTokenGetGoldRewardReq::CopyFrom(const TTreasureTokenGetGoldRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTreasureTokenGetGoldRewardReq::IsInitialized() const {

  return true;
}

void TTreasureTokenGetGoldRewardReq::Swap(TTreasureTokenGetGoldRewardReq* other) {
  if (other != this) {
    std::swap(needgoldnum_, other->needgoldnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTreasureTokenGetGoldRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTreasureTokenGetGoldRewardReq_descriptor_;
  metadata.reflection = TTreasureTokenGetGoldRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TTreasureTokenGetGoldRewardRsp::kTokenArrFieldNumber;
const int TTreasureTokenGetGoldRewardRsp::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TTreasureTokenGetGoldRewardRsp::TTreasureTokenGetGoldRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TTreasureTokenGetGoldRewardRsp)
}

void TTreasureTokenGetGoldRewardRsp::InitAsDefaultInstance() {
}

TTreasureTokenGetGoldRewardRsp::TTreasureTokenGetGoldRewardRsp(const TTreasureTokenGetGoldRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TTreasureTokenGetGoldRewardRsp)
}

void TTreasureTokenGetGoldRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TTreasureTokenGetGoldRewardRsp::~TTreasureTokenGetGoldRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TTreasureTokenGetGoldRewardRsp)
  SharedDtor();
}

void TTreasureTokenGetGoldRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TTreasureTokenGetGoldRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TTreasureTokenGetGoldRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TTreasureTokenGetGoldRewardRsp_descriptor_;
}

const TTreasureTokenGetGoldRewardRsp& TTreasureTokenGetGoldRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fTreasureToken_2eproto();
  return *default_instance_;
}

TTreasureTokenGetGoldRewardRsp* TTreasureTokenGetGoldRewardRsp::default_instance_ = NULL;

TTreasureTokenGetGoldRewardRsp* TTreasureTokenGetGoldRewardRsp::New() const {
  return new TTreasureTokenGetGoldRewardRsp;
}

void TTreasureTokenGetGoldRewardRsp::Clear() {
  tokenarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TTreasureTokenGetGoldRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TTreasureTokenGetGoldRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TTreasureTokenSingle TokenArr = 1;
      case 1: {
        if (tag == 10) {
         parse_TokenArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tokenarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_TokenArr;
        if (input->ExpectTag(18)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TCommonReward RewardArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TTreasureTokenGetGoldRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TTreasureTokenGetGoldRewardRsp)
  return false;
#undef DO_
}

void TTreasureTokenGetGoldRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TTreasureTokenGetGoldRewardRsp)
  // repeated .pb.TTreasureTokenSingle TokenArr = 1;
  for (int i = 0; i < this->tokenarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tokenarr(i), output);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TTreasureTokenGetGoldRewardRsp)
}

::google::protobuf::uint8* TTreasureTokenGetGoldRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TTreasureTokenGetGoldRewardRsp)
  // repeated .pb.TTreasureTokenSingle TokenArr = 1;
  for (int i = 0; i < this->tokenarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tokenarr(i), target);
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TTreasureTokenGetGoldRewardRsp)
  return target;
}

int TTreasureTokenGetGoldRewardRsp::ByteSize() const {
  int total_size = 0;

  // repeated .pb.TTreasureTokenSingle TokenArr = 1;
  total_size += 1 * this->tokenarr_size();
  for (int i = 0; i < this->tokenarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tokenarr(i));
  }

  // repeated .pb.TCommonReward RewardArr = 2;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TTreasureTokenGetGoldRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TTreasureTokenGetGoldRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TTreasureTokenGetGoldRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TTreasureTokenGetGoldRewardRsp::MergeFrom(const TTreasureTokenGetGoldRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  tokenarr_.MergeFrom(from.tokenarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TTreasureTokenGetGoldRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTreasureTokenGetGoldRewardRsp::CopyFrom(const TTreasureTokenGetGoldRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTreasureTokenGetGoldRewardRsp::IsInitialized() const {

  return true;
}

void TTreasureTokenGetGoldRewardRsp::Swap(TTreasureTokenGetGoldRewardRsp* other) {
  if (other != this) {
    tokenarr_.Swap(&other->tokenarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TTreasureTokenGetGoldRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TTreasureTokenGetGoldRewardRsp_descriptor_;
  metadata.reflection = TTreasureTokenGetGoldRewardRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
