// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: module/PathData.proto

#ifndef PROTOBUF_module_2fPathData_2eproto__INCLUDED
#define PROTOBUF_module_2fPathData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "module/Util.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_module_2fPathData_2eproto();
void protobuf_AssignDesc_module_2fPathData_2eproto();
void protobuf_ShutdownFile_module_2fPathData_2eproto();

class AreaInfo;
class ObstacleInfo;
class MistyInfo;
class GridNode;
class PathData;

// ===================================================================

/*FOR2LUA
<Record>
	<name>AreaInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/PathData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class AreaInfo : public ::google::protobuf::Message {
 public:
  AreaInfo();
  virtual ~AreaInfo();

  AreaInfo(const AreaInfo& from);

  inline AreaInfo& operator=(const AreaInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AreaInfo& default_instance();

  void Swap(AreaInfo* other);

  // implements Message ----------------------------------------------

  AreaInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AreaInfo& from);
  void MergeFrom(const AreaInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>AreaInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 Index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>AreaInfo</name>
  	<Function>
  		<name>index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 AreaType = 3;
  inline bool has_areatype() const;
  inline void clear_areatype();
  static const int kAreaTypeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>AreaInfo</name>
  	<Function>
  		<name>areatype</name>
  		<replaceName>AreaType</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_areatype</name>
  		<replaceName>AreaType</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_areatype</name>
  		<replaceName>AreaType</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 areatype() const;
  inline void set_areatype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.AreaInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_areatype();
  inline void clear_has_areatype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 areatype_;
  friend void  protobuf_AddDesc_module_2fPathData_2eproto();
  friend void protobuf_AssignDesc_module_2fPathData_2eproto();
  friend void protobuf_ShutdownFile_module_2fPathData_2eproto();

  void InitAsDefaultInstance();
  static AreaInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>ObstacleInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/PathData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class ObstacleInfo : public ::google::protobuf::Message {
 public:
  ObstacleInfo();
  virtual ~ObstacleInfo();

  ObstacleInfo(const ObstacleInfo& from);

  inline ObstacleInfo& operator=(const ObstacleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ObstacleInfo& default_instance();

  void Swap(ObstacleInfo* other);

  // implements Message ----------------------------------------------

  ObstacleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ObstacleInfo& from);
  void MergeFrom(const ObstacleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>ObstacleInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 Index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>ObstacleInfo</name>
  	<Function>
  		<name>index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.ObstacleInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_module_2fPathData_2eproto();
  friend void protobuf_AssignDesc_module_2fPathData_2eproto();
  friend void protobuf_ShutdownFile_module_2fPathData_2eproto();

  void InitAsDefaultInstance();
  static ObstacleInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>MistyInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/PathData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class MistyInfo : public ::google::protobuf::Message {
 public:
  MistyInfo();
  virtual ~MistyInfo();

  MistyInfo(const MistyInfo& from);

  inline MistyInfo& operator=(const MistyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MistyInfo& default_instance();

  void Swap(MistyInfo* other);

  // implements Message ----------------------------------------------

  MistyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MistyInfo& from);
  void MergeFrom(const MistyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string Name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>MistyInfo</name>
  	<Function>
  		<name>name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_name</name>
  		<replaceName>Name</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 Index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>MistyInfo</name>
  	<Function>
  		<name>index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.MistyInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::int32 index_;
  friend void  protobuf_AddDesc_module_2fPathData_2eproto();
  friend void protobuf_AssignDesc_module_2fPathData_2eproto();
  friend void protobuf_ShutdownFile_module_2fPathData_2eproto();

  void InitAsDefaultInstance();
  static MistyInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>GridNode</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/PathData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class GridNode : public ::google::protobuf::Message {
 public:
  GridNode();
  virtual ~GridNode();

  GridNode(const GridNode& from);

  inline GridNode& operator=(const GridNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridNode& default_instance();

  void Swap(GridNode* other);

  // implements Message ----------------------------------------------

  GridNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridNode& from);
  void MergeFrom(const GridNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>GridNode</name>
  	<Function>
  		<name>index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_index</name>
  		<replaceName>Index</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 GridFlag = 2;
  inline bool has_gridflag() const;
  inline void clear_gridflag();
  static const int kGridFlagFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>GridNode</name>
  	<Function>
  		<name>gridflag</name>
  		<replaceName>GridFlag</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridflag</name>
  		<replaceName>GridFlag</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridflag</name>
  		<replaceName>GridFlag</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 gridflag() const;
  inline void set_gridflag(::google::protobuf::int32 value);

  // optional int32 AreaFlag = 3;
  inline bool has_areaflag() const;
  inline void clear_areaflag();
  static const int kAreaFlagFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>GridNode</name>
  	<Function>
  		<name>areaflag</name>
  		<replaceName>AreaFlag</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_areaflag</name>
  		<replaceName>AreaFlag</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_areaflag</name>
  		<replaceName>AreaFlag</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 areaflag() const;
  inline void set_areaflag(::google::protobuf::int32 value);

  // optional int32 ObstacleFlag = 4;
  inline bool has_obstacleflag() const;
  inline void clear_obstacleflag();
  static const int kObstacleFlagFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>GridNode</name>
  	<Function>
  		<name>obstacleflag</name>
  		<replaceName>ObstacleFlag</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_obstacleflag</name>
  		<replaceName>ObstacleFlag</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_obstacleflag</name>
  		<replaceName>ObstacleFlag</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 obstacleflag() const;
  inline void set_obstacleflag(::google::protobuf::int32 value);

  // optional int32 MistyFlag = 5;
  inline bool has_mistyflag() const;
  inline void clear_mistyflag();
  static const int kMistyFlagFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>GridNode</name>
  	<Function>
  		<name>mistyflag</name>
  		<replaceName>MistyFlag</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_mistyflag</name>
  		<replaceName>MistyFlag</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mistyflag</name>
  		<replaceName>MistyFlag</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 mistyflag() const;
  inline void set_mistyflag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.GridNode)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_gridflag();
  inline void clear_has_gridflag();
  inline void set_has_areaflag();
  inline void clear_has_areaflag();
  inline void set_has_obstacleflag();
  inline void clear_has_obstacleflag();
  inline void set_has_mistyflag();
  inline void clear_has_mistyflag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 gridflag_;
  ::google::protobuf::int32 areaflag_;
  ::google::protobuf::int32 obstacleflag_;
  ::google::protobuf::int32 mistyflag_;
  friend void  protobuf_AddDesc_module_2fPathData_2eproto();
  friend void protobuf_AssignDesc_module_2fPathData_2eproto();
  friend void protobuf_ShutdownFile_module_2fPathData_2eproto();

  void InitAsDefaultInstance();
  static GridNode* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>PathData</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>module/PathData.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class PathData : public ::google::protobuf::Message {
 public:
  PathData();
  virtual ~PathData();

  PathData(const PathData& from);

  inline PathData& operator=(const PathData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PathData& default_instance();

  void Swap(PathData* other);

  // implements Message ----------------------------------------------

  PathData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PathData& from);
  void MergeFrom(const PathData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.PbVector2_Int GridSize = 1;
  inline bool has_gridsize() const;
  inline void clear_gridsize();
  static const int kGridSizeFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>PathData</name>
  	<Function>
  		<name>gridsize</name>
  		<replaceName>GridSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_gridsize</name>
  		<replaceName>GridSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_gridsize</name>
  		<replaceName>GridSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridsize</name>
  		<replaceName>GridSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& gridsize() const;
  inline ::pb::PbVector2_Int* mutable_gridsize();
  inline ::pb::PbVector2_Int* release_gridsize();
  inline void set_allocated_gridsize(::pb::PbVector2_Int* gridsize);

  // optional .pb.PbVector2_Int NodeSize = 2;
  inline bool has_nodesize() const;
  inline void clear_nodesize();
  static const int kNodeSizeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>PathData</name>
  	<Function>
  		<name>nodesize</name>
  		<replaceName>NodeSize</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_nodesize</name>
  		<replaceName>NodeSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_nodesize</name>
  		<replaceName>NodeSize</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_nodesize</name>
  		<replaceName>NodeSize</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& nodesize() const;
  inline ::pb::PbVector2_Int* mutable_nodesize();
  inline ::pb::PbVector2_Int* release_nodesize();
  inline void set_allocated_nodesize(::pb::PbVector2_Int* nodesize);

  // optional .pb.PbVector2_Int Origin = 3;
  inline bool has_origin() const;
  inline void clear_origin();
  static const int kOriginFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>PathData</name>
  	<Function>
  		<name>origin</name>
  		<replaceName>Origin</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_origin</name>
  		<replaceName>Origin</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_origin</name>
  		<replaceName>Origin</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_origin</name>
  		<replaceName>Origin</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::PbVector2_Int& origin() const;
  inline ::pb::PbVector2_Int* mutable_origin();
  inline ::pb::PbVector2_Int* release_origin();
  inline void set_allocated_origin(::pb::PbVector2_Int* origin);

  // repeated .pb.AreaInfo AreaInfoArr = 4;
  inline int areainfoarr_size() const;
  inline void clear_areainfoarr();
  static const int kAreaInfoArrFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>PathData</name>
  	<Function>
  		<name>areainfoarr</name>
  		<replaceName>AreaInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_areainfoarr</name>
  		<replaceName>AreaInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_areainfoarr</name>
  		<replaceName>AreaInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_areainfoarr</name>
  		<replaceName>AreaInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>areainfoarr_size</name>
  		<replaceName>AreaInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::AreaInfo& areainfoarr(int index) const;
  inline ::pb::AreaInfo* mutable_areainfoarr(int index);
  inline ::pb::AreaInfo* add_areainfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::AreaInfo >&
      areainfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::AreaInfo >*
      mutable_areainfoarr();

  // repeated .pb.ObstacleInfo ObstacleInfoArr = 5;
  inline int obstacleinfoarr_size() const;
  inline void clear_obstacleinfoarr();
  static const int kObstacleInfoArrFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>PathData</name>
  	<Function>
  		<name>obstacleinfoarr</name>
  		<replaceName>ObstacleInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_obstacleinfoarr</name>
  		<replaceName>ObstacleInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_obstacleinfoarr</name>
  		<replaceName>ObstacleInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_obstacleinfoarr</name>
  		<replaceName>ObstacleInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>obstacleinfoarr_size</name>
  		<replaceName>ObstacleInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::ObstacleInfo& obstacleinfoarr(int index) const;
  inline ::pb::ObstacleInfo* mutable_obstacleinfoarr(int index);
  inline ::pb::ObstacleInfo* add_obstacleinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::ObstacleInfo >&
      obstacleinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::ObstacleInfo >*
      mutable_obstacleinfoarr();

  // repeated .pb.GridNode GridNodeArr = 6;
  inline int gridnodearr_size() const;
  inline void clear_gridnodearr();
  static const int kGridNodeArrFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>PathData</name>
  	<Function>
  		<name>gridnodearr</name>
  		<replaceName>GridNodeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_gridnodearr</name>
  		<replaceName>GridNodeArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_gridnodearr</name>
  		<replaceName>GridNodeArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_gridnodearr</name>
  		<replaceName>GridNodeArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>gridnodearr_size</name>
  		<replaceName>GridNodeArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::GridNode& gridnodearr(int index) const;
  inline ::pb::GridNode* mutable_gridnodearr(int index);
  inline ::pb::GridNode* add_gridnodearr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::GridNode >&
      gridnodearr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::GridNode >*
      mutable_gridnodearr();

  // repeated .pb.MistyInfo MistyInfoArr = 7;
  inline int mistyinfoarr_size() const;
  inline void clear_mistyinfoarr();
  static const int kMistyInfoArrFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>PathData</name>
  	<Function>
  		<name>mistyinfoarr</name>
  		<replaceName>MistyInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_mistyinfoarr</name>
  		<replaceName>MistyInfoArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_mistyinfoarr</name>
  		<replaceName>MistyInfoArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_mistyinfoarr</name>
  		<replaceName>MistyInfoArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mistyinfoarr_size</name>
  		<replaceName>MistyInfoArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::MistyInfo& mistyinfoarr(int index) const;
  inline ::pb::MistyInfo* mutable_mistyinfoarr(int index);
  inline ::pb::MistyInfo* add_mistyinfoarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::MistyInfo >&
      mistyinfoarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::MistyInfo >*
      mutable_mistyinfoarr();

  // @@protoc_insertion_point(class_scope:pb.PathData)
 private:
  inline void set_has_gridsize();
  inline void clear_has_gridsize();
  inline void set_has_nodesize();
  inline void clear_has_nodesize();
  inline void set_has_origin();
  inline void clear_has_origin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::PbVector2_Int* gridsize_;
  ::pb::PbVector2_Int* nodesize_;
  ::pb::PbVector2_Int* origin_;
  ::google::protobuf::RepeatedPtrField< ::pb::AreaInfo > areainfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::ObstacleInfo > obstacleinfoarr_;
  ::google::protobuf::RepeatedPtrField< ::pb::GridNode > gridnodearr_;
  ::google::protobuf::RepeatedPtrField< ::pb::MistyInfo > mistyinfoarr_;
  friend void  protobuf_AddDesc_module_2fPathData_2eproto();
  friend void protobuf_AssignDesc_module_2fPathData_2eproto();
  friend void protobuf_ShutdownFile_module_2fPathData_2eproto();

  void InitAsDefaultInstance();
  static PathData* default_instance_;
};
// ===================================================================


// ===================================================================

// AreaInfo

// optional string Name = 1;
inline bool AreaInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AreaInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AreaInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AreaInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& AreaInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.AreaInfo.Name)
  return *name_;
}
inline void AreaInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.AreaInfo.Name)
}
inline void AreaInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.AreaInfo.Name)
}
inline void AreaInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.AreaInfo.Name)
}
inline ::std::string* AreaInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.AreaInfo.Name)
  return name_;
}
inline ::std::string* AreaInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AreaInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.AreaInfo.Name)
}

// optional int32 Index = 2;
inline bool AreaInfo::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AreaInfo::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AreaInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AreaInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 AreaInfo::index() const {
  // @@protoc_insertion_point(field_get:pb.AreaInfo.Index)
  return index_;
}
inline void AreaInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.AreaInfo.Index)
}

// optional int32 AreaType = 3;
inline bool AreaInfo::has_areatype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AreaInfo::set_has_areatype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AreaInfo::clear_has_areatype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AreaInfo::clear_areatype() {
  areatype_ = 0;
  clear_has_areatype();
}
inline ::google::protobuf::int32 AreaInfo::areatype() const {
  // @@protoc_insertion_point(field_get:pb.AreaInfo.AreaType)
  return areatype_;
}
inline void AreaInfo::set_areatype(::google::protobuf::int32 value) {
  set_has_areatype();
  areatype_ = value;
  // @@protoc_insertion_point(field_set:pb.AreaInfo.AreaType)
}

// -------------------------------------------------------------------

// ObstacleInfo

// optional string Name = 1;
inline bool ObstacleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObstacleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObstacleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObstacleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ObstacleInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.ObstacleInfo.Name)
  return *name_;
}
inline void ObstacleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.ObstacleInfo.Name)
}
inline void ObstacleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.ObstacleInfo.Name)
}
inline void ObstacleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.ObstacleInfo.Name)
}
inline ::std::string* ObstacleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.ObstacleInfo.Name)
  return name_;
}
inline ::std::string* ObstacleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ObstacleInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.ObstacleInfo.Name)
}

// optional int32 Index = 2;
inline bool ObstacleInfo::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObstacleInfo::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObstacleInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObstacleInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 ObstacleInfo::index() const {
  // @@protoc_insertion_point(field_get:pb.ObstacleInfo.Index)
  return index_;
}
inline void ObstacleInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.ObstacleInfo.Index)
}

// -------------------------------------------------------------------

// MistyInfo

// optional string Name = 1;
inline bool MistyInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MistyInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MistyInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MistyInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MistyInfo::name() const {
  // @@protoc_insertion_point(field_get:pb.MistyInfo.Name)
  return *name_;
}
inline void MistyInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:pb.MistyInfo.Name)
}
inline void MistyInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.MistyInfo.Name)
}
inline void MistyInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.MistyInfo.Name)
}
inline ::std::string* MistyInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.MistyInfo.Name)
  return name_;
}
inline ::std::string* MistyInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MistyInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.MistyInfo.Name)
}

// optional int32 Index = 2;
inline bool MistyInfo::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MistyInfo::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MistyInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MistyInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 MistyInfo::index() const {
  // @@protoc_insertion_point(field_get:pb.MistyInfo.Index)
  return index_;
}
inline void MistyInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.MistyInfo.Index)
}

// -------------------------------------------------------------------

// GridNode

// optional int32 Index = 1;
inline bool GridNode::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GridNode::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GridNode::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GridNode::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 GridNode::index() const {
  // @@protoc_insertion_point(field_get:pb.GridNode.Index)
  return index_;
}
inline void GridNode::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:pb.GridNode.Index)
}

// optional int32 GridFlag = 2;
inline bool GridNode::has_gridflag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GridNode::set_has_gridflag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GridNode::clear_has_gridflag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GridNode::clear_gridflag() {
  gridflag_ = 0;
  clear_has_gridflag();
}
inline ::google::protobuf::int32 GridNode::gridflag() const {
  // @@protoc_insertion_point(field_get:pb.GridNode.GridFlag)
  return gridflag_;
}
inline void GridNode::set_gridflag(::google::protobuf::int32 value) {
  set_has_gridflag();
  gridflag_ = value;
  // @@protoc_insertion_point(field_set:pb.GridNode.GridFlag)
}

// optional int32 AreaFlag = 3;
inline bool GridNode::has_areaflag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GridNode::set_has_areaflag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GridNode::clear_has_areaflag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GridNode::clear_areaflag() {
  areaflag_ = 0;
  clear_has_areaflag();
}
inline ::google::protobuf::int32 GridNode::areaflag() const {
  // @@protoc_insertion_point(field_get:pb.GridNode.AreaFlag)
  return areaflag_;
}
inline void GridNode::set_areaflag(::google::protobuf::int32 value) {
  set_has_areaflag();
  areaflag_ = value;
  // @@protoc_insertion_point(field_set:pb.GridNode.AreaFlag)
}

// optional int32 ObstacleFlag = 4;
inline bool GridNode::has_obstacleflag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GridNode::set_has_obstacleflag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GridNode::clear_has_obstacleflag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GridNode::clear_obstacleflag() {
  obstacleflag_ = 0;
  clear_has_obstacleflag();
}
inline ::google::protobuf::int32 GridNode::obstacleflag() const {
  // @@protoc_insertion_point(field_get:pb.GridNode.ObstacleFlag)
  return obstacleflag_;
}
inline void GridNode::set_obstacleflag(::google::protobuf::int32 value) {
  set_has_obstacleflag();
  obstacleflag_ = value;
  // @@protoc_insertion_point(field_set:pb.GridNode.ObstacleFlag)
}

// optional int32 MistyFlag = 5;
inline bool GridNode::has_mistyflag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GridNode::set_has_mistyflag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GridNode::clear_has_mistyflag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GridNode::clear_mistyflag() {
  mistyflag_ = 0;
  clear_has_mistyflag();
}
inline ::google::protobuf::int32 GridNode::mistyflag() const {
  // @@protoc_insertion_point(field_get:pb.GridNode.MistyFlag)
  return mistyflag_;
}
inline void GridNode::set_mistyflag(::google::protobuf::int32 value) {
  set_has_mistyflag();
  mistyflag_ = value;
  // @@protoc_insertion_point(field_set:pb.GridNode.MistyFlag)
}

// -------------------------------------------------------------------

// PathData

// optional .pb.PbVector2_Int GridSize = 1;
inline bool PathData::has_gridsize() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PathData::set_has_gridsize() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PathData::clear_has_gridsize() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PathData::clear_gridsize() {
  if (gridsize_ != NULL) gridsize_->::pb::PbVector2_Int::Clear();
  clear_has_gridsize();
}
inline const ::pb::PbVector2_Int& PathData::gridsize() const {
  // @@protoc_insertion_point(field_get:pb.PathData.GridSize)
  return gridsize_ != NULL ? *gridsize_ : *default_instance_->gridsize_;
}
inline ::pb::PbVector2_Int* PathData::mutable_gridsize() {
  set_has_gridsize();
  if (gridsize_ == NULL) gridsize_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.PathData.GridSize)
  return gridsize_;
}
inline ::pb::PbVector2_Int* PathData::release_gridsize() {
  clear_has_gridsize();
  ::pb::PbVector2_Int* temp = gridsize_;
  gridsize_ = NULL;
  return temp;
}
inline void PathData::set_allocated_gridsize(::pb::PbVector2_Int* gridsize) {
  delete gridsize_;
  gridsize_ = gridsize;
  if (gridsize) {
    set_has_gridsize();
  } else {
    clear_has_gridsize();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PathData.GridSize)
}

// optional .pb.PbVector2_Int NodeSize = 2;
inline bool PathData::has_nodesize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PathData::set_has_nodesize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PathData::clear_has_nodesize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PathData::clear_nodesize() {
  if (nodesize_ != NULL) nodesize_->::pb::PbVector2_Int::Clear();
  clear_has_nodesize();
}
inline const ::pb::PbVector2_Int& PathData::nodesize() const {
  // @@protoc_insertion_point(field_get:pb.PathData.NodeSize)
  return nodesize_ != NULL ? *nodesize_ : *default_instance_->nodesize_;
}
inline ::pb::PbVector2_Int* PathData::mutable_nodesize() {
  set_has_nodesize();
  if (nodesize_ == NULL) nodesize_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.PathData.NodeSize)
  return nodesize_;
}
inline ::pb::PbVector2_Int* PathData::release_nodesize() {
  clear_has_nodesize();
  ::pb::PbVector2_Int* temp = nodesize_;
  nodesize_ = NULL;
  return temp;
}
inline void PathData::set_allocated_nodesize(::pb::PbVector2_Int* nodesize) {
  delete nodesize_;
  nodesize_ = nodesize;
  if (nodesize) {
    set_has_nodesize();
  } else {
    clear_has_nodesize();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PathData.NodeSize)
}

// optional .pb.PbVector2_Int Origin = 3;
inline bool PathData::has_origin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PathData::set_has_origin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PathData::clear_has_origin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PathData::clear_origin() {
  if (origin_ != NULL) origin_->::pb::PbVector2_Int::Clear();
  clear_has_origin();
}
inline const ::pb::PbVector2_Int& PathData::origin() const {
  // @@protoc_insertion_point(field_get:pb.PathData.Origin)
  return origin_ != NULL ? *origin_ : *default_instance_->origin_;
}
inline ::pb::PbVector2_Int* PathData::mutable_origin() {
  set_has_origin();
  if (origin_ == NULL) origin_ = new ::pb::PbVector2_Int;
  // @@protoc_insertion_point(field_mutable:pb.PathData.Origin)
  return origin_;
}
inline ::pb::PbVector2_Int* PathData::release_origin() {
  clear_has_origin();
  ::pb::PbVector2_Int* temp = origin_;
  origin_ = NULL;
  return temp;
}
inline void PathData::set_allocated_origin(::pb::PbVector2_Int* origin) {
  delete origin_;
  origin_ = origin;
  if (origin) {
    set_has_origin();
  } else {
    clear_has_origin();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.PathData.Origin)
}

// repeated .pb.AreaInfo AreaInfoArr = 4;
inline int PathData::areainfoarr_size() const {
  return areainfoarr_.size();
}
inline void PathData::clear_areainfoarr() {
  areainfoarr_.Clear();
}
inline const ::pb::AreaInfo& PathData::areainfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.PathData.AreaInfoArr)
  return areainfoarr_.Get(index);
}
inline ::pb::AreaInfo* PathData::mutable_areainfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PathData.AreaInfoArr)
  return areainfoarr_.Mutable(index);
}
inline ::pb::AreaInfo* PathData::add_areainfoarr() {
  // @@protoc_insertion_point(field_add:pb.PathData.AreaInfoArr)
  return areainfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::AreaInfo >&
PathData::areainfoarr() const {
  // @@protoc_insertion_point(field_list:pb.PathData.AreaInfoArr)
  return areainfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::AreaInfo >*
PathData::mutable_areainfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.PathData.AreaInfoArr)
  return &areainfoarr_;
}

// repeated .pb.ObstacleInfo ObstacleInfoArr = 5;
inline int PathData::obstacleinfoarr_size() const {
  return obstacleinfoarr_.size();
}
inline void PathData::clear_obstacleinfoarr() {
  obstacleinfoarr_.Clear();
}
inline const ::pb::ObstacleInfo& PathData::obstacleinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.PathData.ObstacleInfoArr)
  return obstacleinfoarr_.Get(index);
}
inline ::pb::ObstacleInfo* PathData::mutable_obstacleinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PathData.ObstacleInfoArr)
  return obstacleinfoarr_.Mutable(index);
}
inline ::pb::ObstacleInfo* PathData::add_obstacleinfoarr() {
  // @@protoc_insertion_point(field_add:pb.PathData.ObstacleInfoArr)
  return obstacleinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::ObstacleInfo >&
PathData::obstacleinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.PathData.ObstacleInfoArr)
  return obstacleinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::ObstacleInfo >*
PathData::mutable_obstacleinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.PathData.ObstacleInfoArr)
  return &obstacleinfoarr_;
}

// repeated .pb.GridNode GridNodeArr = 6;
inline int PathData::gridnodearr_size() const {
  return gridnodearr_.size();
}
inline void PathData::clear_gridnodearr() {
  gridnodearr_.Clear();
}
inline const ::pb::GridNode& PathData::gridnodearr(int index) const {
  // @@protoc_insertion_point(field_get:pb.PathData.GridNodeArr)
  return gridnodearr_.Get(index);
}
inline ::pb::GridNode* PathData::mutable_gridnodearr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PathData.GridNodeArr)
  return gridnodearr_.Mutable(index);
}
inline ::pb::GridNode* PathData::add_gridnodearr() {
  // @@protoc_insertion_point(field_add:pb.PathData.GridNodeArr)
  return gridnodearr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::GridNode >&
PathData::gridnodearr() const {
  // @@protoc_insertion_point(field_list:pb.PathData.GridNodeArr)
  return gridnodearr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::GridNode >*
PathData::mutable_gridnodearr() {
  // @@protoc_insertion_point(field_mutable_list:pb.PathData.GridNodeArr)
  return &gridnodearr_;
}

// repeated .pb.MistyInfo MistyInfoArr = 7;
inline int PathData::mistyinfoarr_size() const {
  return mistyinfoarr_.size();
}
inline void PathData::clear_mistyinfoarr() {
  mistyinfoarr_.Clear();
}
inline const ::pb::MistyInfo& PathData::mistyinfoarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.PathData.MistyInfoArr)
  return mistyinfoarr_.Get(index);
}
inline ::pb::MistyInfo* PathData::mutable_mistyinfoarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.PathData.MistyInfoArr)
  return mistyinfoarr_.Mutable(index);
}
inline ::pb::MistyInfo* PathData::add_mistyinfoarr() {
  // @@protoc_insertion_point(field_add:pb.PathData.MistyInfoArr)
  return mistyinfoarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::MistyInfo >&
PathData::mistyinfoarr() const {
  // @@protoc_insertion_point(field_list:pb.PathData.MistyInfoArr)
  return mistyinfoarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::MistyInfo >*
PathData::mutable_mistyinfoarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.PathData.MistyInfoArr)
  return &mistyinfoarr_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_module_2fPathData_2eproto__INCLUDED
