// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/CrossActImperialWar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/CrossActImperialWar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TActImperialWarMoveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarMoveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarAttackReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarAttackReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarTouchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarTouchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarSetUserOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarSetUserOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarSetArmyOptReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarSetArmyOptReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarGetRankListReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarGetRankListReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarGetRankListRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarGetRankListRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarBaseUserInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarBaseUserInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TActImperialWarBaseUserInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TActImperialWarBaseUserInfoRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto() {
  protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/CrossActImperialWar.proto");
  GOOGLE_CHECK(file != NULL);
  TActImperialWarMoveReq_descriptor_ = file->message_type(0);
  static const int TActImperialWarMoveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarMoveReq, targetpos_),
  };
  TActImperialWarMoveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarMoveReq_descriptor_,
      TActImperialWarMoveReq::default_instance_,
      TActImperialWarMoveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarMoveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarMoveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarMoveReq));
  TActImperialWarAttackReq_descriptor_ = file->message_type(1);
  static const int TActImperialWarAttackReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarAttackReq, targetid_),
  };
  TActImperialWarAttackReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarAttackReq_descriptor_,
      TActImperialWarAttackReq::default_instance_,
      TActImperialWarAttackReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarAttackReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarAttackReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarAttackReq));
  TActImperialWarTouchReq_descriptor_ = file->message_type(2);
  static const int TActImperialWarTouchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTouchReq, targetbid_),
  };
  TActImperialWarTouchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarTouchReq_descriptor_,
      TActImperialWarTouchReq::default_instance_,
      TActImperialWarTouchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTouchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarTouchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarTouchReq));
  TActImperialWarSetUserOptReq_descriptor_ = file->message_type(3);
  static const int TActImperialWarSetUserOptReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarSetUserOptReq, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarSetUserOptReq, autoattack_),
  };
  TActImperialWarSetUserOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarSetUserOptReq_descriptor_,
      TActImperialWarSetUserOptReq::default_instance_,
      TActImperialWarSetUserOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarSetUserOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarSetUserOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarSetUserOptReq));
  TActImperialWarSetArmyOptReq_descriptor_ = file->message_type(4);
  static const int TActImperialWarSetArmyOptReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarSetArmyOptReq, goalid_),
  };
  TActImperialWarSetArmyOptReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarSetArmyOptReq_descriptor_,
      TActImperialWarSetArmyOptReq::default_instance_,
      TActImperialWarSetArmyOptReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarSetArmyOptReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarSetArmyOptReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarSetArmyOptReq));
  TActImperialWarRankInfo_descriptor_ = file->message_type(5);
  static const int TActImperialWarRankInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarRankInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarRankInfo, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarRankInfo, imagehtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarRankInfo, imageframetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarRankInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarRankInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarRankInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarRankInfo, killcnt_),
  };
  TActImperialWarRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarRankInfo_descriptor_,
      TActImperialWarRankInfo::default_instance_,
      TActImperialWarRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarRankInfo));
  TActImperialWarGetRankListReq_descriptor_ = file->message_type(6);
  static const int TActImperialWarGetRankListReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetRankListReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetRankListReq, limit_),
  };
  TActImperialWarGetRankListReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarGetRankListReq_descriptor_,
      TActImperialWarGetRankListReq::default_instance_,
      TActImperialWarGetRankListReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetRankListReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetRankListReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarGetRankListReq));
  TActImperialWarGetRankListRsp_descriptor_ = file->message_type(7);
  static const int TActImperialWarGetRankListRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetRankListRsp, rankarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetRankListRsp, myrank_),
  };
  TActImperialWarGetRankListRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarGetRankListRsp_descriptor_,
      TActImperialWarGetRankListRsp::default_instance_,
      TActImperialWarGetRankListRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetRankListRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarGetRankListRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarGetRankListRsp));
  TActImperialWarBaseUserInfoReq_descriptor_ = file->message_type(8);
  static const int TActImperialWarBaseUserInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBaseUserInfoReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBaseUserInfoReq, serverid_),
  };
  TActImperialWarBaseUserInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarBaseUserInfoReq_descriptor_,
      TActImperialWarBaseUserInfoReq::default_instance_,
      TActImperialWarBaseUserInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBaseUserInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBaseUserInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarBaseUserInfoReq));
  TActImperialWarBaseUserInfoRsp_descriptor_ = file->message_type(9);
  static const int TActImperialWarBaseUserInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBaseUserInfoRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBaseUserInfoRsp, my7rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBaseUserInfoRsp, masteruid_),
  };
  TActImperialWarBaseUserInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TActImperialWarBaseUserInfoRsp_descriptor_,
      TActImperialWarBaseUserInfoRsp::default_instance_,
      TActImperialWarBaseUserInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBaseUserInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TActImperialWarBaseUserInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TActImperialWarBaseUserInfoRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fCrossActImperialWar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarMoveReq_descriptor_, &TActImperialWarMoveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarAttackReq_descriptor_, &TActImperialWarAttackReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarTouchReq_descriptor_, &TActImperialWarTouchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarSetUserOptReq_descriptor_, &TActImperialWarSetUserOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarSetArmyOptReq_descriptor_, &TActImperialWarSetArmyOptReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarRankInfo_descriptor_, &TActImperialWarRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarGetRankListReq_descriptor_, &TActImperialWarGetRankListReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarGetRankListRsp_descriptor_, &TActImperialWarGetRankListRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarBaseUserInfoReq_descriptor_, &TActImperialWarBaseUserInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TActImperialWarBaseUserInfoRsp_descriptor_, &TActImperialWarBaseUserInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto() {
  delete TActImperialWarMoveReq::default_instance_;
  delete TActImperialWarMoveReq_reflection_;
  delete TActImperialWarAttackReq::default_instance_;
  delete TActImperialWarAttackReq_reflection_;
  delete TActImperialWarTouchReq::default_instance_;
  delete TActImperialWarTouchReq_reflection_;
  delete TActImperialWarSetUserOptReq::default_instance_;
  delete TActImperialWarSetUserOptReq_reflection_;
  delete TActImperialWarSetArmyOptReq::default_instance_;
  delete TActImperialWarSetArmyOptReq_reflection_;
  delete TActImperialWarRankInfo::default_instance_;
  delete TActImperialWarRankInfo_reflection_;
  delete TActImperialWarGetRankListReq::default_instance_;
  delete TActImperialWarGetRankListReq_reflection_;
  delete TActImperialWarGetRankListRsp::default_instance_;
  delete TActImperialWarGetRankListRsp_reflection_;
  delete TActImperialWarBaseUserInfoReq::default_instance_;
  delete TActImperialWarBaseUserInfoReq_reflection_;
  delete TActImperialWarBaseUserInfoRsp::default_instance_;
  delete TActImperialWarBaseUserInfoRsp_reflection_;
}

void protobuf_AddDesc_net_2fCrossActImperialWar_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_module_2fUtil_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035net/CrossActImperialWar.proto\022\002pb\032\021mod"
    "ule/Util.proto\">\n\026TActImperialWarMoveReq"
    "\022$\n\tTargetPos\030\001 \001(\0132\021.pb.PbVector2_Int\","
    "\n\030TActImperialWarAttackReq\022\020\n\010TargetId\030\001"
    " \001(\004\",\n\027TActImperialWarTouchReq\022\021\n\tTarge"
    "tBid\030\001 \001(\004\"D\n\034TActImperialWarSetUserOptR"
    "eq\022\020\n\010TargetId\030\001 \001(\004\022\022\n\nAutoAttack\030\002 \001(\010"
    "\".\n\034TActImperialWarSetArmyOptReq\022\016\n\006Goal"
    "Id\030\001 \001(\r\"\234\001\n\027TActImperialWarRankInfo\022\013\n\003"
    "Uid\030\001 \001(\004\022\r\n\005Uname\030\002 \001(\t\022\021\n\tImageHtid\030\003 "
    "\001(\r\022\025\n\rImageFrameTid\030\004 \001(\r\022\r\n\005Title\030\005 \001("
    "\r\022\014\n\004Rank\030\n \001(\r\022\r\n\005Score\030\013 \001(\r\022\017\n\007KillCn"
    "t\030\014 \001(\r\">\n\035TActImperialWarGetRankListReq"
    "\022\016\n\006Offset\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"]\n\035TActI"
    "mperialWarGetRankListRsp\022,\n\007RankArr\030\001 \003("
    "\0132\033.pb.TActImperialWarRankInfo\022\016\n\006MyRank"
    "\030\002 \001(\005\"\?\n\036TActImperialWarBaseUserInfoReq"
    "\022\013\n\003Uid\030\001 \001(\004\022\020\n\010serverId\030\002 \001(\t\"Q\n\036TActI"
    "mperialWarBaseUserInfoRsp\022\013\n\003Uid\030\001 \001(\004\022\017"
    "\n\007My7Rank\030\002 \001(\r\022\021\n\tMasterUid\030\003 \001(\004", 794);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/CrossActImperialWar.proto", &protobuf_RegisterTypes);
  TActImperialWarMoveReq::default_instance_ = new TActImperialWarMoveReq();
  TActImperialWarAttackReq::default_instance_ = new TActImperialWarAttackReq();
  TActImperialWarTouchReq::default_instance_ = new TActImperialWarTouchReq();
  TActImperialWarSetUserOptReq::default_instance_ = new TActImperialWarSetUserOptReq();
  TActImperialWarSetArmyOptReq::default_instance_ = new TActImperialWarSetArmyOptReq();
  TActImperialWarRankInfo::default_instance_ = new TActImperialWarRankInfo();
  TActImperialWarGetRankListReq::default_instance_ = new TActImperialWarGetRankListReq();
  TActImperialWarGetRankListRsp::default_instance_ = new TActImperialWarGetRankListRsp();
  TActImperialWarBaseUserInfoReq::default_instance_ = new TActImperialWarBaseUserInfoReq();
  TActImperialWarBaseUserInfoRsp::default_instance_ = new TActImperialWarBaseUserInfoRsp();
  TActImperialWarMoveReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarAttackReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarTouchReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarSetUserOptReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarSetArmyOptReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarRankInfo::default_instance_->InitAsDefaultInstance();
  TActImperialWarGetRankListReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarGetRankListRsp::default_instance_->InitAsDefaultInstance();
  TActImperialWarBaseUserInfoReq::default_instance_->InitAsDefaultInstance();
  TActImperialWarBaseUserInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fCrossActImperialWar_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fCrossActImperialWar_2eproto {
  StaticDescriptorInitializer_net_2fCrossActImperialWar_2eproto() {
    protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  }
} static_descriptor_initializer_net_2fCrossActImperialWar_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarMoveReq::kTargetPosFieldNumber;
#endif  // !_MSC_VER

TActImperialWarMoveReq::TActImperialWarMoveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarMoveReq)
}

void TActImperialWarMoveReq::InitAsDefaultInstance() {
  targetpos_ = const_cast< ::pb::PbVector2_Int*>(&::pb::PbVector2_Int::default_instance());
}

TActImperialWarMoveReq::TActImperialWarMoveReq(const TActImperialWarMoveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarMoveReq)
}

void TActImperialWarMoveReq::SharedCtor() {
  _cached_size_ = 0;
  targetpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarMoveReq::~TActImperialWarMoveReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarMoveReq)
  SharedDtor();
}

void TActImperialWarMoveReq::SharedDtor() {
  if (this != default_instance_) {
    delete targetpos_;
  }
}

void TActImperialWarMoveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarMoveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarMoveReq_descriptor_;
}

const TActImperialWarMoveReq& TActImperialWarMoveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarMoveReq* TActImperialWarMoveReq::default_instance_ = NULL;

TActImperialWarMoveReq* TActImperialWarMoveReq::New() const {
  return new TActImperialWarMoveReq;
}

void TActImperialWarMoveReq::Clear() {
  if (has_targetpos()) {
    if (targetpos_ != NULL) targetpos_->::pb::PbVector2_Int::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarMoveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarMoveReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .pb.PbVector2_Int TargetPos = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarMoveReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarMoveReq)
  return false;
#undef DO_
}

void TActImperialWarMoveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarMoveReq)
  // optional .pb.PbVector2_Int TargetPos = 1;
  if (has_targetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->targetpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarMoveReq)
}

::google::protobuf::uint8* TActImperialWarMoveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarMoveReq)
  // optional .pb.PbVector2_Int TargetPos = 1;
  if (has_targetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->targetpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarMoveReq)
  return target;
}

int TActImperialWarMoveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .pb.PbVector2_Int TargetPos = 1;
    if (has_targetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->targetpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarMoveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarMoveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarMoveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarMoveReq::MergeFrom(const TActImperialWarMoveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetpos()) {
      mutable_targetpos()->::pb::PbVector2_Int::MergeFrom(from.targetpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarMoveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarMoveReq::CopyFrom(const TActImperialWarMoveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarMoveReq::IsInitialized() const {

  return true;
}

void TActImperialWarMoveReq::Swap(TActImperialWarMoveReq* other) {
  if (other != this) {
    std::swap(targetpos_, other->targetpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarMoveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarMoveReq_descriptor_;
  metadata.reflection = TActImperialWarMoveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarAttackReq::kTargetIdFieldNumber;
#endif  // !_MSC_VER

TActImperialWarAttackReq::TActImperialWarAttackReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarAttackReq)
}

void TActImperialWarAttackReq::InitAsDefaultInstance() {
}

TActImperialWarAttackReq::TActImperialWarAttackReq(const TActImperialWarAttackReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarAttackReq)
}

void TActImperialWarAttackReq::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarAttackReq::~TActImperialWarAttackReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarAttackReq)
  SharedDtor();
}

void TActImperialWarAttackReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarAttackReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarAttackReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarAttackReq_descriptor_;
}

const TActImperialWarAttackReq& TActImperialWarAttackReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarAttackReq* TActImperialWarAttackReq::default_instance_ = NULL;

TActImperialWarAttackReq* TActImperialWarAttackReq::New() const {
  return new TActImperialWarAttackReq;
}

void TActImperialWarAttackReq::Clear() {
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarAttackReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarAttackReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TargetId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarAttackReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarAttackReq)
  return false;
#undef DO_
}

void TActImperialWarAttackReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarAttackReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarAttackReq)
}

::google::protobuf::uint8* TActImperialWarAttackReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarAttackReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarAttackReq)
  return target;
}

int TActImperialWarAttackReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TargetId = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarAttackReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarAttackReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarAttackReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarAttackReq::MergeFrom(const TActImperialWarAttackReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarAttackReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarAttackReq::CopyFrom(const TActImperialWarAttackReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarAttackReq::IsInitialized() const {

  return true;
}

void TActImperialWarAttackReq::Swap(TActImperialWarAttackReq* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarAttackReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarAttackReq_descriptor_;
  metadata.reflection = TActImperialWarAttackReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarTouchReq::kTargetBidFieldNumber;
#endif  // !_MSC_VER

TActImperialWarTouchReq::TActImperialWarTouchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarTouchReq)
}

void TActImperialWarTouchReq::InitAsDefaultInstance() {
}

TActImperialWarTouchReq::TActImperialWarTouchReq(const TActImperialWarTouchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarTouchReq)
}

void TActImperialWarTouchReq::SharedCtor() {
  _cached_size_ = 0;
  targetbid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarTouchReq::~TActImperialWarTouchReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarTouchReq)
  SharedDtor();
}

void TActImperialWarTouchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarTouchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarTouchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarTouchReq_descriptor_;
}

const TActImperialWarTouchReq& TActImperialWarTouchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarTouchReq* TActImperialWarTouchReq::default_instance_ = NULL;

TActImperialWarTouchReq* TActImperialWarTouchReq::New() const {
  return new TActImperialWarTouchReq;
}

void TActImperialWarTouchReq::Clear() {
  targetbid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarTouchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarTouchReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TargetBid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetbid_)));
          set_has_targetbid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarTouchReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarTouchReq)
  return false;
#undef DO_
}

void TActImperialWarTouchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarTouchReq)
  // optional uint64 TargetBid = 1;
  if (has_targetbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetbid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarTouchReq)
}

::google::protobuf::uint8* TActImperialWarTouchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarTouchReq)
  // optional uint64 TargetBid = 1;
  if (has_targetbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetbid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarTouchReq)
  return target;
}

int TActImperialWarTouchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TargetBid = 1;
    if (has_targetbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetbid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarTouchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarTouchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarTouchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarTouchReq::MergeFrom(const TActImperialWarTouchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetbid()) {
      set_targetbid(from.targetbid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarTouchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarTouchReq::CopyFrom(const TActImperialWarTouchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarTouchReq::IsInitialized() const {

  return true;
}

void TActImperialWarTouchReq::Swap(TActImperialWarTouchReq* other) {
  if (other != this) {
    std::swap(targetbid_, other->targetbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarTouchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarTouchReq_descriptor_;
  metadata.reflection = TActImperialWarTouchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarSetUserOptReq::kTargetIdFieldNumber;
const int TActImperialWarSetUserOptReq::kAutoAttackFieldNumber;
#endif  // !_MSC_VER

TActImperialWarSetUserOptReq::TActImperialWarSetUserOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarSetUserOptReq)
}

void TActImperialWarSetUserOptReq::InitAsDefaultInstance() {
}

TActImperialWarSetUserOptReq::TActImperialWarSetUserOptReq(const TActImperialWarSetUserOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarSetUserOptReq)
}

void TActImperialWarSetUserOptReq::SharedCtor() {
  _cached_size_ = 0;
  targetid_ = GOOGLE_ULONGLONG(0);
  autoattack_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarSetUserOptReq::~TActImperialWarSetUserOptReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarSetUserOptReq)
  SharedDtor();
}

void TActImperialWarSetUserOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarSetUserOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarSetUserOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarSetUserOptReq_descriptor_;
}

const TActImperialWarSetUserOptReq& TActImperialWarSetUserOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarSetUserOptReq* TActImperialWarSetUserOptReq::default_instance_ = NULL;

TActImperialWarSetUserOptReq* TActImperialWarSetUserOptReq::New() const {
  return new TActImperialWarSetUserOptReq;
}

void TActImperialWarSetUserOptReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarSetUserOptReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(targetid_, autoattack_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarSetUserOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarSetUserOptReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 TargetId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_AutoAttack;
        break;
      }

      // optional bool AutoAttack = 2;
      case 2: {
        if (tag == 16) {
         parse_AutoAttack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autoattack_)));
          set_has_autoattack();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarSetUserOptReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarSetUserOptReq)
  return false;
#undef DO_
}

void TActImperialWarSetUserOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarSetUserOptReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->targetid(), output);
  }

  // optional bool AutoAttack = 2;
  if (has_autoattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->autoattack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarSetUserOptReq)
}

::google::protobuf::uint8* TActImperialWarSetUserOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarSetUserOptReq)
  // optional uint64 TargetId = 1;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->targetid(), target);
  }

  // optional bool AutoAttack = 2;
  if (has_autoattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->autoattack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarSetUserOptReq)
  return target;
}

int TActImperialWarSetUserOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 TargetId = 1;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional bool AutoAttack = 2;
    if (has_autoattack()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarSetUserOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarSetUserOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarSetUserOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarSetUserOptReq::MergeFrom(const TActImperialWarSetUserOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_autoattack()) {
      set_autoattack(from.autoattack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarSetUserOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarSetUserOptReq::CopyFrom(const TActImperialWarSetUserOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarSetUserOptReq::IsInitialized() const {

  return true;
}

void TActImperialWarSetUserOptReq::Swap(TActImperialWarSetUserOptReq* other) {
  if (other != this) {
    std::swap(targetid_, other->targetid_);
    std::swap(autoattack_, other->autoattack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarSetUserOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarSetUserOptReq_descriptor_;
  metadata.reflection = TActImperialWarSetUserOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarSetArmyOptReq::kGoalIdFieldNumber;
#endif  // !_MSC_VER

TActImperialWarSetArmyOptReq::TActImperialWarSetArmyOptReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarSetArmyOptReq)
}

void TActImperialWarSetArmyOptReq::InitAsDefaultInstance() {
}

TActImperialWarSetArmyOptReq::TActImperialWarSetArmyOptReq(const TActImperialWarSetArmyOptReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarSetArmyOptReq)
}

void TActImperialWarSetArmyOptReq::SharedCtor() {
  _cached_size_ = 0;
  goalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarSetArmyOptReq::~TActImperialWarSetArmyOptReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarSetArmyOptReq)
  SharedDtor();
}

void TActImperialWarSetArmyOptReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarSetArmyOptReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarSetArmyOptReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarSetArmyOptReq_descriptor_;
}

const TActImperialWarSetArmyOptReq& TActImperialWarSetArmyOptReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarSetArmyOptReq* TActImperialWarSetArmyOptReq::default_instance_ = NULL;

TActImperialWarSetArmyOptReq* TActImperialWarSetArmyOptReq::New() const {
  return new TActImperialWarSetArmyOptReq;
}

void TActImperialWarSetArmyOptReq::Clear() {
  goalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarSetArmyOptReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarSetArmyOptReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 GoalId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goalid_)));
          set_has_goalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarSetArmyOptReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarSetArmyOptReq)
  return false;
#undef DO_
}

void TActImperialWarSetArmyOptReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarSetArmyOptReq)
  // optional uint32 GoalId = 1;
  if (has_goalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarSetArmyOptReq)
}

::google::protobuf::uint8* TActImperialWarSetArmyOptReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarSetArmyOptReq)
  // optional uint32 GoalId = 1;
  if (has_goalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarSetArmyOptReq)
  return target;
}

int TActImperialWarSetArmyOptReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 GoalId = 1;
    if (has_goalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarSetArmyOptReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarSetArmyOptReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarSetArmyOptReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarSetArmyOptReq::MergeFrom(const TActImperialWarSetArmyOptReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goalid()) {
      set_goalid(from.goalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarSetArmyOptReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarSetArmyOptReq::CopyFrom(const TActImperialWarSetArmyOptReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarSetArmyOptReq::IsInitialized() const {

  return true;
}

void TActImperialWarSetArmyOptReq::Swap(TActImperialWarSetArmyOptReq* other) {
  if (other != this) {
    std::swap(goalid_, other->goalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarSetArmyOptReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarSetArmyOptReq_descriptor_;
  metadata.reflection = TActImperialWarSetArmyOptReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarRankInfo::kUidFieldNumber;
const int TActImperialWarRankInfo::kUnameFieldNumber;
const int TActImperialWarRankInfo::kImageHtidFieldNumber;
const int TActImperialWarRankInfo::kImageFrameTidFieldNumber;
const int TActImperialWarRankInfo::kTitleFieldNumber;
const int TActImperialWarRankInfo::kRankFieldNumber;
const int TActImperialWarRankInfo::kScoreFieldNumber;
const int TActImperialWarRankInfo::kKillCntFieldNumber;
#endif  // !_MSC_VER

TActImperialWarRankInfo::TActImperialWarRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarRankInfo)
}

void TActImperialWarRankInfo::InitAsDefaultInstance() {
}

TActImperialWarRankInfo::TActImperialWarRankInfo(const TActImperialWarRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarRankInfo)
}

void TActImperialWarRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagehtid_ = 0u;
  imageframetid_ = 0u;
  title_ = 0u;
  rank_ = 0u;
  score_ = 0u;
  killcnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarRankInfo::~TActImperialWarRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarRankInfo)
  SharedDtor();
}

void TActImperialWarRankInfo::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TActImperialWarRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarRankInfo_descriptor_;
}

const TActImperialWarRankInfo& TActImperialWarRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarRankInfo* TActImperialWarRankInfo::default_instance_ = NULL;

TActImperialWarRankInfo* TActImperialWarRankInfo::New() const {
  return new TActImperialWarRankInfo;
}

void TActImperialWarRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(imagehtid_, killcnt_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ImageHtid;
        break;
      }

      // optional uint32 ImageHtid = 3;
      case 3: {
        if (tag == 24) {
         parse_ImageHtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imagehtid_)));
          set_has_imagehtid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ImageFrameTid;
        break;
      }

      // optional uint32 ImageFrameTid = 4;
      case 4: {
        if (tag == 32) {
         parse_ImageFrameTid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &imageframetid_)));
          set_has_imageframetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_Title;
        break;
      }

      // optional uint32 Title = 5;
      case 5: {
        if (tag == 40) {
         parse_Title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_Rank;
        break;
      }

      // optional uint32 Rank = 10;
      case 10: {
        if (tag == 80) {
         parse_Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_Score;
        break;
      }

      // optional uint32 Score = 11;
      case 11: {
        if (tag == 88) {
         parse_Score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_KillCnt;
        break;
      }

      // optional uint32 KillCnt = 12;
      case 12: {
        if (tag == 96) {
         parse_KillCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcnt_)));
          set_has_killcnt();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarRankInfo)
  return false;
#undef DO_
}

void TActImperialWarRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarRankInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint32 ImageHtid = 3;
  if (has_imagehtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->imagehtid(), output);
  }

  // optional uint32 ImageFrameTid = 4;
  if (has_imageframetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->imageframetid(), output);
  }

  // optional uint32 Title = 5;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->title(), output);
  }

  // optional uint32 Rank = 10;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->rank(), output);
  }

  // optional uint32 Score = 11;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->score(), output);
  }

  // optional uint32 KillCnt = 12;
  if (has_killcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->killcnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarRankInfo)
}

::google::protobuf::uint8* TActImperialWarRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarRankInfo)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional uint32 ImageHtid = 3;
  if (has_imagehtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->imagehtid(), target);
  }

  // optional uint32 ImageFrameTid = 4;
  if (has_imageframetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->imageframetid(), target);
  }

  // optional uint32 Title = 5;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->title(), target);
  }

  // optional uint32 Rank = 10;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->rank(), target);
  }

  // optional uint32 Score = 11;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->score(), target);
  }

  // optional uint32 KillCnt = 12;
  if (has_killcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->killcnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarRankInfo)
  return target;
}

int TActImperialWarRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint32 ImageHtid = 3;
    if (has_imagehtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imagehtid());
    }

    // optional uint32 ImageFrameTid = 4;
    if (has_imageframetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->imageframetid());
    }

    // optional uint32 Title = 5;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint32 Rank = 10;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 Score = 11;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 KillCnt = 12;
    if (has_killcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarRankInfo::MergeFrom(const TActImperialWarRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_imagehtid()) {
      set_imagehtid(from.imagehtid());
    }
    if (from.has_imageframetid()) {
      set_imageframetid(from.imageframetid());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_killcnt()) {
      set_killcnt(from.killcnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarRankInfo::CopyFrom(const TActImperialWarRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarRankInfo::IsInitialized() const {

  return true;
}

void TActImperialWarRankInfo::Swap(TActImperialWarRankInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(imagehtid_, other->imagehtid_);
    std::swap(imageframetid_, other->imageframetid_);
    std::swap(title_, other->title_);
    std::swap(rank_, other->rank_);
    std::swap(score_, other->score_);
    std::swap(killcnt_, other->killcnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarRankInfo_descriptor_;
  metadata.reflection = TActImperialWarRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarGetRankListReq::kOffsetFieldNumber;
const int TActImperialWarGetRankListReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TActImperialWarGetRankListReq::TActImperialWarGetRankListReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarGetRankListReq)
}

void TActImperialWarGetRankListReq::InitAsDefaultInstance() {
}

TActImperialWarGetRankListReq::TActImperialWarGetRankListReq(const TActImperialWarGetRankListReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarGetRankListReq)
}

void TActImperialWarGetRankListReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarGetRankListReq::~TActImperialWarGetRankListReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarGetRankListReq)
  SharedDtor();
}

void TActImperialWarGetRankListReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarGetRankListReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarGetRankListReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarGetRankListReq_descriptor_;
}

const TActImperialWarGetRankListReq& TActImperialWarGetRankListReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarGetRankListReq* TActImperialWarGetRankListReq::default_instance_ = NULL;

TActImperialWarGetRankListReq* TActImperialWarGetRankListReq::New() const {
  return new TActImperialWarGetRankListReq;
}

void TActImperialWarGetRankListReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarGetRankListReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarGetRankListReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarGetRankListReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarGetRankListReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarGetRankListReq)
  return false;
#undef DO_
}

void TActImperialWarGetRankListReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarGetRankListReq)
}

::google::protobuf::uint8* TActImperialWarGetRankListReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarGetRankListReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarGetRankListReq)
  return target;
}

int TActImperialWarGetRankListReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarGetRankListReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarGetRankListReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarGetRankListReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarGetRankListReq::MergeFrom(const TActImperialWarGetRankListReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarGetRankListReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarGetRankListReq::CopyFrom(const TActImperialWarGetRankListReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarGetRankListReq::IsInitialized() const {

  return true;
}

void TActImperialWarGetRankListReq::Swap(TActImperialWarGetRankListReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarGetRankListReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarGetRankListReq_descriptor_;
  metadata.reflection = TActImperialWarGetRankListReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarGetRankListRsp::kRankArrFieldNumber;
const int TActImperialWarGetRankListRsp::kMyRankFieldNumber;
#endif  // !_MSC_VER

TActImperialWarGetRankListRsp::TActImperialWarGetRankListRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarGetRankListRsp)
}

void TActImperialWarGetRankListRsp::InitAsDefaultInstance() {
}

TActImperialWarGetRankListRsp::TActImperialWarGetRankListRsp(const TActImperialWarGetRankListRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarGetRankListRsp)
}

void TActImperialWarGetRankListRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarGetRankListRsp::~TActImperialWarGetRankListRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarGetRankListRsp)
  SharedDtor();
}

void TActImperialWarGetRankListRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarGetRankListRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarGetRankListRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarGetRankListRsp_descriptor_;
}

const TActImperialWarGetRankListRsp& TActImperialWarGetRankListRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarGetRankListRsp* TActImperialWarGetRankListRsp::default_instance_ = NULL;

TActImperialWarGetRankListRsp* TActImperialWarGetRankListRsp::New() const {
  return new TActImperialWarGetRankListRsp;
}

void TActImperialWarGetRankListRsp::Clear() {
  myrank_ = 0;
  rankarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarGetRankListRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarGetRankListRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TActImperialWarRankInfo RankArr = 1;
      case 1: {
        if (tag == 10) {
         parse_RankArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_RankArr;
        if (input->ExpectTag(16)) goto parse_MyRank;
        break;
      }

      // optional int32 MyRank = 2;
      case 2: {
        if (tag == 16) {
         parse_MyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarGetRankListRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarGetRankListRsp)
  return false;
#undef DO_
}

void TActImperialWarGetRankListRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarGetRankListRsp)
  // repeated .pb.TActImperialWarRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankarr(i), output);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarGetRankListRsp)
}

::google::protobuf::uint8* TActImperialWarGetRankListRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarGetRankListRsp)
  // repeated .pb.TActImperialWarRankInfo RankArr = 1;
  for (int i = 0; i < this->rankarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankarr(i), target);
  }

  // optional int32 MyRank = 2;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarGetRankListRsp)
  return target;
}

int TActImperialWarGetRankListRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 MyRank = 2;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TActImperialWarRankInfo RankArr = 1;
  total_size += 1 * this->rankarr_size();
  for (int i = 0; i < this->rankarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarGetRankListRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarGetRankListRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarGetRankListRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarGetRankListRsp::MergeFrom(const TActImperialWarGetRankListRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarr_.MergeFrom(from.rankarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarGetRankListRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarGetRankListRsp::CopyFrom(const TActImperialWarGetRankListRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarGetRankListRsp::IsInitialized() const {

  return true;
}

void TActImperialWarGetRankListRsp::Swap(TActImperialWarGetRankListRsp* other) {
  if (other != this) {
    rankarr_.Swap(&other->rankarr_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarGetRankListRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarGetRankListRsp_descriptor_;
  metadata.reflection = TActImperialWarGetRankListRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarBaseUserInfoReq::kUidFieldNumber;
const int TActImperialWarBaseUserInfoReq::kServerIdFieldNumber;
#endif  // !_MSC_VER

TActImperialWarBaseUserInfoReq::TActImperialWarBaseUserInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarBaseUserInfoReq)
}

void TActImperialWarBaseUserInfoReq::InitAsDefaultInstance() {
}

TActImperialWarBaseUserInfoReq::TActImperialWarBaseUserInfoReq(const TActImperialWarBaseUserInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarBaseUserInfoReq)
}

void TActImperialWarBaseUserInfoReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarBaseUserInfoReq::~TActImperialWarBaseUserInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarBaseUserInfoReq)
  SharedDtor();
}

void TActImperialWarBaseUserInfoReq::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete serverid_;
  }
  if (this != default_instance_) {
  }
}

void TActImperialWarBaseUserInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarBaseUserInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarBaseUserInfoReq_descriptor_;
}

const TActImperialWarBaseUserInfoReq& TActImperialWarBaseUserInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarBaseUserInfoReq* TActImperialWarBaseUserInfoReq::default_instance_ = NULL;

TActImperialWarBaseUserInfoReq* TActImperialWarBaseUserInfoReq::New() const {
  return new TActImperialWarBaseUserInfoReq;
}

void TActImperialWarBaseUserInfoReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        serverid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarBaseUserInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarBaseUserInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_serverId;
        break;
      }

      // optional string serverId = 2;
      case 2: {
        if (tag == 18) {
         parse_serverId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "serverid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarBaseUserInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarBaseUserInfoReq)
  return false;
#undef DO_
}

void TActImperialWarBaseUserInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarBaseUserInfoReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string serverId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarBaseUserInfoReq)
}

::google::protobuf::uint8* TActImperialWarBaseUserInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarBaseUserInfoReq)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string serverId = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "serverid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarBaseUserInfoReq)
  return target;
}

int TActImperialWarBaseUserInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string serverId = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarBaseUserInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarBaseUserInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarBaseUserInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarBaseUserInfoReq::MergeFrom(const TActImperialWarBaseUserInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarBaseUserInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarBaseUserInfoReq::CopyFrom(const TActImperialWarBaseUserInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarBaseUserInfoReq::IsInitialized() const {

  return true;
}

void TActImperialWarBaseUserInfoReq::Swap(TActImperialWarBaseUserInfoReq* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarBaseUserInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarBaseUserInfoReq_descriptor_;
  metadata.reflection = TActImperialWarBaseUserInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TActImperialWarBaseUserInfoRsp::kUidFieldNumber;
const int TActImperialWarBaseUserInfoRsp::kMy7RankFieldNumber;
const int TActImperialWarBaseUserInfoRsp::kMasterUidFieldNumber;
#endif  // !_MSC_VER

TActImperialWarBaseUserInfoRsp::TActImperialWarBaseUserInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TActImperialWarBaseUserInfoRsp)
}

void TActImperialWarBaseUserInfoRsp::InitAsDefaultInstance() {
}

TActImperialWarBaseUserInfoRsp::TActImperialWarBaseUserInfoRsp(const TActImperialWarBaseUserInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TActImperialWarBaseUserInfoRsp)
}

void TActImperialWarBaseUserInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  my7rank_ = 0u;
  masteruid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TActImperialWarBaseUserInfoRsp::~TActImperialWarBaseUserInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TActImperialWarBaseUserInfoRsp)
  SharedDtor();
}

void TActImperialWarBaseUserInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TActImperialWarBaseUserInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TActImperialWarBaseUserInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TActImperialWarBaseUserInfoRsp_descriptor_;
}

const TActImperialWarBaseUserInfoRsp& TActImperialWarBaseUserInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fCrossActImperialWar_2eproto();
  return *default_instance_;
}

TActImperialWarBaseUserInfoRsp* TActImperialWarBaseUserInfoRsp::default_instance_ = NULL;

TActImperialWarBaseUserInfoRsp* TActImperialWarBaseUserInfoRsp::New() const {
  return new TActImperialWarBaseUserInfoRsp;
}

void TActImperialWarBaseUserInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TActImperialWarBaseUserInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(uid_, my7rank_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TActImperialWarBaseUserInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TActImperialWarBaseUserInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_My7Rank;
        break;
      }

      // optional uint32 My7Rank = 2;
      case 2: {
        if (tag == 16) {
         parse_My7Rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &my7rank_)));
          set_has_my7rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_MasterUid;
        break;
      }

      // optional uint64 MasterUid = 3;
      case 3: {
        if (tag == 24) {
         parse_MasterUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masteruid_)));
          set_has_masteruid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TActImperialWarBaseUserInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TActImperialWarBaseUserInfoRsp)
  return false;
#undef DO_
}

void TActImperialWarBaseUserInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TActImperialWarBaseUserInfoRsp)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional uint32 My7Rank = 2;
  if (has_my7rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->my7rank(), output);
  }

  // optional uint64 MasterUid = 3;
  if (has_masteruid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masteruid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TActImperialWarBaseUserInfoRsp)
}

::google::protobuf::uint8* TActImperialWarBaseUserInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TActImperialWarBaseUserInfoRsp)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional uint32 My7Rank = 2;
  if (has_my7rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->my7rank(), target);
  }

  // optional uint64 MasterUid = 3;
  if (has_masteruid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masteruid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TActImperialWarBaseUserInfoRsp)
  return target;
}

int TActImperialWarBaseUserInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional uint32 My7Rank = 2;
    if (has_my7rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->my7rank());
    }

    // optional uint64 MasterUid = 3;
    if (has_masteruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masteruid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TActImperialWarBaseUserInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TActImperialWarBaseUserInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TActImperialWarBaseUserInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TActImperialWarBaseUserInfoRsp::MergeFrom(const TActImperialWarBaseUserInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_my7rank()) {
      set_my7rank(from.my7rank());
    }
    if (from.has_masteruid()) {
      set_masteruid(from.masteruid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TActImperialWarBaseUserInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TActImperialWarBaseUserInfoRsp::CopyFrom(const TActImperialWarBaseUserInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TActImperialWarBaseUserInfoRsp::IsInitialized() const {

  return true;
}

void TActImperialWarBaseUserInfoRsp::Swap(TActImperialWarBaseUserInfoRsp* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(my7rank_, other->my7rank_);
    std::swap(masteruid_, other->masteruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TActImperialWarBaseUserInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TActImperialWarBaseUserInfoRsp_descriptor_;
  metadata.reflection = TActImperialWarBaseUserInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
