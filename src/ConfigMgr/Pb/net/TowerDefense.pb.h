// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/TowerDefense.proto

#ifndef PROTOBUF_net_2fTowerDefense_2eproto__INCLUDED
#define PROTOBUF_net_2fTowerDefense_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "net/Battle.pb.h"
#include "net/CommonReward.pb.h"
#include "net/User.pb.h"
// @@protoc_insertion_point(includes)

namespace pb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

class TTowerDefenseAchievementInfo;
class TTowerDefenseWaveDropInfo;
class TTowerDefenseGetInfoRsp;
class TTowerDefenseSetFormationReq;
class TTowerDefenseDoBattleReq;
class TTowerDefenseDoBattleRsp;
class TTowerDefenseReportBattleReq;
class TTowerDefenseReportBattleRsp;
class TTowerDefenseEndBattleRsp;
class TTowerDefenseReceiveAchievementRewardReq;
class TTowerDefenseReceiveAchievementRewardRsp;
class TTowerDefenseReceiveAllAchievementRewardRsp;
class TTowerDefenseWaveRankInfo;
class TTowerDefenseGetWaveRankReq;
class TTowerDefenseGetWaveRankRsp;

// ===================================================================

/*FOR2LUA
<Record>
	<name>TTowerDefenseAchievementInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseAchievementInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseAchievementInfo();
  virtual ~TTowerDefenseAchievementInfo();

  TTowerDefenseAchievementInfo(const TTowerDefenseAchievementInfo& from);

  inline TTowerDefenseAchievementInfo& operator=(const TTowerDefenseAchievementInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseAchievementInfo& default_instance();

  void Swap(TTowerDefenseAchievementInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseAchievementInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseAchievementInfo& from);
  void MergeFrom(const TTowerDefenseAchievementInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseAchievementInfo</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint64 RewardTime = 2;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseAchievementInfo</name>
  	<Function>
  		<name>rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rewardtime</name>
  		<replaceName>RewardTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseAchievementInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 rewardtime_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseAchievementInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseWaveDropInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseWaveDropInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseWaveDropInfo();
  virtual ~TTowerDefenseWaveDropInfo();

  TTowerDefenseWaveDropInfo(const TTowerDefenseWaveDropInfo& from);

  inline TTowerDefenseWaveDropInfo& operator=(const TTowerDefenseWaveDropInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseWaveDropInfo& default_instance();

  void Swap(TTowerDefenseWaveDropInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseWaveDropInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseWaveDropInfo& from);
  void MergeFrom(const TTowerDefenseWaveDropInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 WaveNum = 1;
  inline bool has_wavenum() const;
  inline void clear_wavenum();
  static const int kWaveNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseWaveDropInfo</name>
  	<Function>
  		<name>wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 wavenum() const;
  inline void set_wavenum(::google::protobuf::uint32 value);

  // repeated .pb.TCommonReward DropArray = 2;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseWaveDropInfo</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseWaveDropInfo)
 private:
  inline void set_has_wavenum();
  inline void clear_has_wavenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  ::google::protobuf::uint32 wavenum_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseWaveDropInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseGetInfoRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseGetInfoRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseGetInfoRsp();
  virtual ~TTowerDefenseGetInfoRsp();

  TTowerDefenseGetInfoRsp(const TTowerDefenseGetInfoRsp& from);

  inline TTowerDefenseGetInfoRsp& operator=(const TTowerDefenseGetInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseGetInfoRsp& default_instance();

  void Swap(TTowerDefenseGetInfoRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseGetInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseGetInfoRsp& from);
  void MergeFrom(const TTowerDefenseGetInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 MaxWaveNum = 1;
  inline bool has_maxwavenum() const;
  inline void clear_maxwavenum();
  static const int kMaxWaveNumFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>maxwavenum</name>
  		<replaceName>MaxWaveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxwavenum</name>
  		<replaceName>MaxWaveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxwavenum</name>
  		<replaceName>MaxWaveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxwavenum() const;
  inline void set_maxwavenum(::google::protobuf::uint32 value);

  // optional uint32 MaxRoundNum = 2;
  inline bool has_maxroundnum() const;
  inline void clear_maxroundnum();
  static const int kMaxRoundNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>maxroundnum</name>
  		<replaceName>MaxRoundNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_maxroundnum</name>
  		<replaceName>MaxRoundNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_maxroundnum</name>
  		<replaceName>MaxRoundNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 maxroundnum() const;
  inline void set_maxroundnum(::google::protobuf::uint32 value);

  // optional uint32 ChallengeNum = 3;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_challengenum</name>
  		<replaceName>ChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 IncChallengeNum = 12;
  inline bool has_incchallengenum() const;
  inline void clear_incchallengenum();
  static const int kIncChallengeNumFieldNumber = 12;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>incchallengenum</name>
  		<replaceName>IncChallengeNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_incchallengenum</name>
  		<replaceName>IncChallengeNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_incchallengenum</name>
  		<replaceName>IncChallengeNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 incchallengenum() const;
  inline void set_incchallengenum(::google::protobuf::uint32 value);

  // optional uint64 RefreshTime = 4;
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshTimeFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_refreshtime</name>
  		<replaceName>RefreshTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint64 value);

  // optional uint64 PlotEndTime = 5;
  inline bool has_plotendtime() const;
  inline void clear_plotendtime();
  static const int kPlotEndTimeFieldNumber = 5;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>plotendtime</name>
  		<replaceName>PlotEndTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_plotendtime</name>
  		<replaceName>PlotEndTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_plotendtime</name>
  		<replaceName>PlotEndTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 plotendtime() const;
  inline void set_plotendtime(::google::protobuf::uint64 value);

  // repeated .pb.TUnitFormation ArrFormation = 6;
  inline int arrformation_size() const;
  inline void clear_arrformation();
  static const int kArrFormationFieldNumber = 6;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrformation_size</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitFormation& arrformation(int index) const;
  inline ::pb::TUnitFormation* mutable_arrformation(int index);
  inline ::pb::TUnitFormation* add_arrformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
      arrformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
      mutable_arrformation();

  // repeated .pb.TTowerDefenseAchievementInfo ArrAchievementInfo = 7;
  inline int arrachievementinfo_size() const;
  inline void clear_arrachievementinfo();
  static const int kArrAchievementInfoFieldNumber = 7;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>arrachievementinfo</name>
  		<replaceName>ArrAchievementInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrachievementinfo</name>
  		<replaceName>ArrAchievementInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrachievementinfo</name>
  		<replaceName>ArrAchievementInfo</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrachievementinfo</name>
  		<replaceName>ArrAchievementInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrachievementinfo_size</name>
  		<replaceName>ArrAchievementInfo</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseAchievementInfo& arrachievementinfo(int index) const;
  inline ::pb::TTowerDefenseAchievementInfo* mutable_arrachievementinfo(int index);
  inline ::pb::TTowerDefenseAchievementInfo* add_arrachievementinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseAchievementInfo >&
      arrachievementinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseAchievementInfo >*
      mutable_arrachievementinfo();

  // optional uint32 AchievementWaveNum = 8;
  inline bool has_achievementwavenum() const;
  inline void clear_achievementwavenum();
  static const int kAchievementWaveNumFieldNumber = 8;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>achievementwavenum</name>
  		<replaceName>AchievementWaveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_achievementwavenum</name>
  		<replaceName>AchievementWaveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_achievementwavenum</name>
  		<replaceName>AchievementWaveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 achievementwavenum() const;
  inline void set_achievementwavenum(::google::protobuf::uint32 value);

  // optional uint32 CurRoundNum = 9;
  inline bool has_curroundnum() const;
  inline void clear_curroundnum();
  static const int kCurRoundNumFieldNumber = 9;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>curroundnum</name>
  		<replaceName>CurRoundNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curroundnum</name>
  		<replaceName>CurRoundNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curroundnum</name>
  		<replaceName>CurRoundNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 curroundnum() const;
  inline void set_curroundnum(::google::protobuf::uint32 value);

  // optional .pb.TBattleArgs CurBattleArgs = 10;
  inline bool has_curbattleargs() const;
  inline void clear_curbattleargs();
  static const int kCurBattleArgsFieldNumber = 10;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>curbattleargs</name>
  		<replaceName>CurBattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_curbattleargs</name>
  		<replaceName>CurBattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_curbattleargs</name>
  		<replaceName>CurBattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_curbattleargs</name>
  		<replaceName>CurBattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& curbattleargs() const;
  inline ::pb::TBattleArgs* mutable_curbattleargs();
  inline ::pb::TBattleArgs* release_curbattleargs();
  inline void set_allocated_curbattleargs(::pb::TBattleArgs* curbattleargs);

  // repeated uint32 ArrDeadHid = 11;
  inline int arrdeadhid_size() const;
  inline void clear_arrdeadhid();
  static const int kArrDeadHidFieldNumber = 11;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetInfoRsp</name>
  	<Function>
  		<name>arrdeadhid</name>
  		<replaceName>ArrDeadHid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrdeadhid</name>
  		<replaceName>ArrDeadHid</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrdeadhid</name>
  		<replaceName>ArrDeadHid</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrdeadhid</name>
  		<replaceName>ArrDeadHid</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrdeadhid_size</name>
  		<replaceName>ArrDeadHid</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 arrdeadhid(int index) const;
  inline void set_arrdeadhid(int index, ::google::protobuf::uint32 value);
  inline void add_arrdeadhid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      arrdeadhid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_arrdeadhid();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseGetInfoRsp)
 private:
  inline void set_has_maxwavenum();
  inline void clear_has_maxwavenum();
  inline void set_has_maxroundnum();
  inline void clear_has_maxroundnum();
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_incchallengenum();
  inline void clear_has_incchallengenum();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_plotendtime();
  inline void clear_has_plotendtime();
  inline void set_has_achievementwavenum();
  inline void clear_has_achievementwavenum();
  inline void set_has_curroundnum();
  inline void clear_has_curroundnum();
  inline void set_has_curbattleargs();
  inline void clear_has_curbattleargs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 maxwavenum_;
  ::google::protobuf::uint32 maxroundnum_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 incchallengenum_;
  ::google::protobuf::uint64 refreshtime_;
  ::google::protobuf::uint64 plotendtime_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation > arrformation_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseAchievementInfo > arrachievementinfo_;
  ::google::protobuf::uint32 achievementwavenum_;
  ::google::protobuf::uint32 curroundnum_;
  ::pb::TBattleArgs* curbattleargs_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > arrdeadhid_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseGetInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseSetFormationReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseSetFormationReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseSetFormationReq();
  virtual ~TTowerDefenseSetFormationReq();

  TTowerDefenseSetFormationReq(const TTowerDefenseSetFormationReq& from);

  inline TTowerDefenseSetFormationReq& operator=(const TTowerDefenseSetFormationReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseSetFormationReq& default_instance();

  void Swap(TTowerDefenseSetFormationReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseSetFormationReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseSetFormationReq& from);
  void MergeFrom(const TTowerDefenseSetFormationReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TUnitFormation ArrFormation = 1;
  inline int arrformation_size() const;
  inline void clear_arrformation();
  static const int kArrFormationFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseSetFormationReq</name>
  	<Function>
  		<name>arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_arrformation</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>arrformation_size</name>
  		<replaceName>ArrFormation</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUnitFormation& arrformation(int index) const;
  inline ::pb::TUnitFormation* mutable_arrformation(int index);
  inline ::pb::TUnitFormation* add_arrformation();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
      arrformation() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
      mutable_arrformation();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseSetFormationReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation > arrformation_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseSetFormationReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseDoBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseDoBattleReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseDoBattleReq();
  virtual ~TTowerDefenseDoBattleReq();

  TTowerDefenseDoBattleReq(const TTowerDefenseDoBattleReq& from);

  inline TTowerDefenseDoBattleReq& operator=(const TTowerDefenseDoBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseDoBattleReq& default_instance();

  void Swap(TTowerDefenseDoBattleReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseDoBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseDoBattleReq& from);
  void MergeFrom(const TTowerDefenseDoBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TBattleCheckParam BattleCheckParam = 4;
  inline bool has_battlecheckparam() const;
  inline void clear_battlecheckparam();
  static const int kBattleCheckParamFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseDoBattleReq</name>
  	<Function>
  		<name>battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battlecheckparam</name>
  		<replaceName>BattleCheckParam</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleCheckParam& battlecheckparam() const;
  inline ::pb::TBattleCheckParam* mutable_battlecheckparam();
  inline ::pb::TBattleCheckParam* release_battlecheckparam();
  inline void set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam);

  // optional uint32 RoundNum = 2;
  inline bool has_roundnum() const;
  inline void clear_roundnum();
  static const int kRoundNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseDoBattleReq</name>
  	<Function>
  		<name>roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 roundnum() const;
  inline void set_roundnum(::google::protobuf::uint32 value);

  // optional bool IsHalfwayStart = 3;
  inline bool has_ishalfwaystart() const;
  inline void clear_ishalfwaystart();
  static const int kIsHalfwayStartFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseDoBattleReq</name>
  	<Function>
  		<name>ishalfwaystart</name>
  		<replaceName>IsHalfwayStart</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_ishalfwaystart</name>
  		<replaceName>IsHalfwayStart</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_ishalfwaystart</name>
  		<replaceName>IsHalfwayStart</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline bool ishalfwaystart() const;
  inline void set_ishalfwaystart(bool value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseDoBattleReq)
 private:
  inline void set_has_battlecheckparam();
  inline void clear_has_battlecheckparam();
  inline void set_has_roundnum();
  inline void clear_has_roundnum();
  inline void set_has_ishalfwaystart();
  inline void clear_has_ishalfwaystart();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TBattleCheckParam* battlecheckparam_;
  ::google::protobuf::uint32 roundnum_;
  bool ishalfwaystart_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseDoBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseDoBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseDoBattleRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseDoBattleRsp();
  virtual ~TTowerDefenseDoBattleRsp();

  TTowerDefenseDoBattleRsp(const TTowerDefenseDoBattleRsp& from);

  inline TTowerDefenseDoBattleRsp& operator=(const TTowerDefenseDoBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseDoBattleRsp& default_instance();

  void Swap(TTowerDefenseDoBattleRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseDoBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseDoBattleRsp& from);
  void MergeFrom(const TTowerDefenseDoBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTowerDefenseWaveDropInfo WavesDropArray = 1;
  inline int wavesdroparray_size() const;
  inline void clear_wavesdroparray();
  static const int kWavesDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseDoBattleRsp</name>
  	<Function>
  		<name>wavesdroparray</name>
  		<replaceName>WavesDropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_wavesdroparray</name>
  		<replaceName>WavesDropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_wavesdroparray</name>
  		<replaceName>WavesDropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wavesdroparray</name>
  		<replaceName>WavesDropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>wavesdroparray_size</name>
  		<replaceName>WavesDropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseWaveDropInfo& wavesdroparray(int index) const;
  inline ::pb::TTowerDefenseWaveDropInfo* mutable_wavesdroparray(int index);
  inline ::pb::TTowerDefenseWaveDropInfo* add_wavesdroparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseWaveDropInfo >&
      wavesdroparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseWaveDropInfo >*
      mutable_wavesdroparray();

  // optional .pb.TBattleArgs BattleArgs = 2;
  inline bool has_battleargs() const;
  inline void clear_battleargs();
  static const int kBattleArgsFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseDoBattleRsp</name>
  	<Function>
  		<name>battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleargs</name>
  		<replaceName>BattleArgs</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TBattleArgs& battleargs() const;
  inline ::pb::TBattleArgs* mutable_battleargs();
  inline ::pb::TBattleArgs* release_battleargs();
  inline void set_allocated_battleargs(::pb::TBattleArgs* battleargs);

  // optional uint32 RoundNum = 3;
  inline bool has_roundnum() const;
  inline void clear_roundnum();
  static const int kRoundNumFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseDoBattleRsp</name>
  	<Function>
  		<name>roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 roundnum() const;
  inline void set_roundnum(::google::protobuf::uint32 value);

  // optional uint32 BattleId = 4;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleIdFieldNumber = 4;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseDoBattleRsp</name>
  	<Function>
  		<name>battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleid() const;
  inline void set_battleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseDoBattleRsp)
 private:
  inline void set_has_battleargs();
  inline void clear_has_battleargs();
  inline void set_has_roundnum();
  inline void clear_has_roundnum();
  inline void set_has_battleid();
  inline void clear_has_battleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseWaveDropInfo > wavesdroparray_;
  ::pb::TBattleArgs* battleargs_;
  ::google::protobuf::uint32 roundnum_;
  ::google::protobuf::uint32 battleid_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseDoBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseReportBattleReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseReportBattleReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseReportBattleReq();
  virtual ~TTowerDefenseReportBattleReq();

  TTowerDefenseReportBattleReq(const TTowerDefenseReportBattleReq& from);

  inline TTowerDefenseReportBattleReq& operator=(const TTowerDefenseReportBattleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseReportBattleReq& default_instance();

  void Swap(TTowerDefenseReportBattleReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseReportBattleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseReportBattleReq& from);
  void MergeFrom(const TTowerDefenseReportBattleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes BattleResultBytes = 1;
  inline bool has_battleresultbytes() const;
  inline void clear_battleresultbytes();
  static const int kBattleResultBytesFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseReportBattleReq</name>
  	<Function>
  		<name>battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleresultbytes</name>
  		<replaceName>BattleResultBytes</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::std::string& battleresultbytes() const;
  inline void set_battleresultbytes(const ::std::string& value);
  inline void set_battleresultbytes(const char* value);
  inline void set_battleresultbytes(const void* value, size_t size);
  inline ::std::string* mutable_battleresultbytes();
  inline ::std::string* release_battleresultbytes();
  inline void set_allocated_battleresultbytes(::std::string* battleresultbytes);

  // optional uint32 RoundNum = 2;
  inline bool has_roundnum() const;
  inline void clear_roundnum();
  static const int kRoundNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseReportBattleReq</name>
  	<Function>
  		<name>roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_roundnum</name>
  		<replaceName>RoundNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 roundnum() const;
  inline void set_roundnum(::google::protobuf::uint32 value);

  // optional uint32 BattleId = 3;
  inline bool has_battleid() const;
  inline void clear_battleid();
  static const int kBattleIdFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseReportBattleReq</name>
  	<Function>
  		<name>battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_battleid</name>
  		<replaceName>BattleId</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 battleid() const;
  inline void set_battleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseReportBattleReq)
 private:
  inline void set_has_battleresultbytes();
  inline void clear_has_battleresultbytes();
  inline void set_has_roundnum();
  inline void clear_has_roundnum();
  inline void set_has_battleid();
  inline void clear_has_battleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* battleresultbytes_;
  ::google::protobuf::uint32 roundnum_;
  ::google::protobuf::uint32 battleid_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseReportBattleReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseReportBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseReportBattleRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseReportBattleRsp();
  virtual ~TTowerDefenseReportBattleRsp();

  TTowerDefenseReportBattleRsp(const TTowerDefenseReportBattleRsp& from);

  inline TTowerDefenseReportBattleRsp& operator=(const TTowerDefenseReportBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseReportBattleRsp& default_instance();

  void Swap(TTowerDefenseReportBattleRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseReportBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseReportBattleRsp& from);
  void MergeFrom(const TTowerDefenseReportBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseReportBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseReportBattleRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseReportBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseEndBattleRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseEndBattleRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseEndBattleRsp();
  virtual ~TTowerDefenseEndBattleRsp();

  TTowerDefenseEndBattleRsp(const TTowerDefenseEndBattleRsp& from);

  inline TTowerDefenseEndBattleRsp& operator=(const TTowerDefenseEndBattleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseEndBattleRsp& default_instance();

  void Swap(TTowerDefenseEndBattleRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseEndBattleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseEndBattleRsp& from);
  void MergeFrom(const TTowerDefenseEndBattleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseEndBattleRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseEndBattleRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseEndBattleRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseReceiveAchievementRewardReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseReceiveAchievementRewardReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseReceiveAchievementRewardReq();
  virtual ~TTowerDefenseReceiveAchievementRewardReq();

  TTowerDefenseReceiveAchievementRewardReq(const TTowerDefenseReceiveAchievementRewardReq& from);

  inline TTowerDefenseReceiveAchievementRewardReq& operator=(const TTowerDefenseReceiveAchievementRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseReceiveAchievementRewardReq& default_instance();

  void Swap(TTowerDefenseReceiveAchievementRewardReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseReceiveAchievementRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseReceiveAchievementRewardReq& from);
  void MergeFrom(const TTowerDefenseReceiveAchievementRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseReceiveAchievementRewardReq</name>
  	<Function>
  		<name>id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_id</name>
  		<replaceName>Id</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseReceiveAchievementRewardReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseReceiveAchievementRewardReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseReceiveAchievementRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseReceiveAchievementRewardRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseReceiveAchievementRewardRsp();
  virtual ~TTowerDefenseReceiveAchievementRewardRsp();

  TTowerDefenseReceiveAchievementRewardRsp(const TTowerDefenseReceiveAchievementRewardRsp& from);

  inline TTowerDefenseReceiveAchievementRewardRsp& operator=(const TTowerDefenseReceiveAchievementRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseReceiveAchievementRewardRsp& default_instance();

  void Swap(TTowerDefenseReceiveAchievementRewardRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseReceiveAchievementRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseReceiveAchievementRewardRsp& from);
  void MergeFrom(const TTowerDefenseReceiveAchievementRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseReceiveAchievementRewardRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseReceiveAchievementRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseReceiveAchievementRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseReceiveAllAchievementRewardRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseReceiveAllAchievementRewardRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseReceiveAllAchievementRewardRsp();
  virtual ~TTowerDefenseReceiveAllAchievementRewardRsp();

  TTowerDefenseReceiveAllAchievementRewardRsp(const TTowerDefenseReceiveAllAchievementRewardRsp& from);

  inline TTowerDefenseReceiveAllAchievementRewardRsp& operator=(const TTowerDefenseReceiveAllAchievementRewardRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseReceiveAllAchievementRewardRsp& default_instance();

  void Swap(TTowerDefenseReceiveAllAchievementRewardRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseReceiveAllAchievementRewardRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseReceiveAllAchievementRewardRsp& from);
  void MergeFrom(const TTowerDefenseReceiveAllAchievementRewardRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TCommonReward DropArray = 1;
  inline int droparray_size() const;
  inline void clear_droparray();
  static const int kDropArrayFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseReceiveAllAchievementRewardRsp</name>
  	<Function>
  		<name>droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_droparray</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>droparray_size</name>
  		<replaceName>DropArray</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TCommonReward& droparray(int index) const;
  inline ::pb::TCommonReward* mutable_droparray(int index);
  inline ::pb::TCommonReward* add_droparray();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
      droparray() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
      mutable_droparray();

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseReceiveAllAchievementRewardRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward > droparray_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseReceiveAllAchievementRewardRsp* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseWaveRankInfo</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseWaveRankInfo : public ::google::protobuf::Message {
 public:
  TTowerDefenseWaveRankInfo();
  virtual ~TTowerDefenseWaveRankInfo();

  TTowerDefenseWaveRankInfo(const TTowerDefenseWaveRankInfo& from);

  inline TTowerDefenseWaveRankInfo& operator=(const TTowerDefenseWaveRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseWaveRankInfo& default_instance();

  void Swap(TTowerDefenseWaveRankInfo* other);

  // implements Message ----------------------------------------------

  TTowerDefenseWaveRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseWaveRankInfo& from);
  void MergeFrom(const TTowerDefenseWaveRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .pb.TUserSimpleInfo UserInfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseWaveRankInfo</name>
  	<Function>
  		<name>userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_allocated_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_set_message_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_userinfo</name>
  		<replaceName>UserInfo</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TUserSimpleInfo& userinfo() const;
  inline ::pb::TUserSimpleInfo* mutable_userinfo();
  inline ::pb::TUserSimpleInfo* release_userinfo();
  inline void set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo);

  // optional uint32 WaveNum = 2;
  inline bool has_wavenum() const;
  inline void clear_wavenum();
  static const int kWaveNumFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseWaveRankInfo</name>
  	<Function>
  		<name>wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_wavenum</name>
  		<replaceName>WaveNum</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 wavenum() const;
  inline void set_wavenum(::google::protobuf::uint32 value);

  // optional uint64 UpdateTime = 3;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 3;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseWaveRankInfo</name>
  	<Function>
  		<name>updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_updatetime</name>
  		<replaceName>UpdateTime</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint64 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseWaveRankInfo)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_wavenum();
  inline void clear_has_wavenum();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::pb::TUserSimpleInfo* userinfo_;
  ::google::protobuf::uint64 updatetime_;
  ::google::protobuf::uint32 wavenum_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseWaveRankInfo* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseGetWaveRankReq</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseGetWaveRankReq : public ::google::protobuf::Message {
 public:
  TTowerDefenseGetWaveRankReq();
  virtual ~TTowerDefenseGetWaveRankReq();

  TTowerDefenseGetWaveRankReq(const TTowerDefenseGetWaveRankReq& from);

  inline TTowerDefenseGetWaveRankReq& operator=(const TTowerDefenseGetWaveRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseGetWaveRankReq& default_instance();

  void Swap(TTowerDefenseGetWaveRankReq* other);

  // implements Message ----------------------------------------------

  TTowerDefenseGetWaveRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseGetWaveRankReq& from);
  void MergeFrom(const TTowerDefenseGetWaveRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 Offset = 1;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetWaveRankReq</name>
  	<Function>
  		<name>offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_offset</name>
  		<replaceName>Offset</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 offset() const;
  inline void set_offset(::google::protobuf::uint32 value);

  // optional uint32 Limit = 2;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetWaveRankReq</name>
  	<Function>
  		<name>limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_limit</name>
  		<replaceName>Limit</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::uint32 limit() const;
  inline void set_limit(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseGetWaveRankReq)
 private:
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 offset_;
  ::google::protobuf::uint32 limit_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseGetWaveRankReq* default_instance_;
};
// -------------------------------------------------------------------

/*FOR2LUA
<Record>
	<name>TTowerDefenseGetWaveRankRsp</name>
	<Function>
		<name>CopyFrom</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_copyfrom_cpp()</handler>
	</Function>
	<Function>
		<name>operator_equal</name>
		<replaceName>MergeFrom</replaceName>
		<handler>descripter = pb_operator_equal_cpp()</handler>
	</Function>
	<Function>
		<name>new</name>
		<replaceName>net/TowerDefense.proto</replaceName>
		<handler>descripter = pb_new_cpp()</handler>
	</Function>
	<Function>
		<name>ParsePartialFromArray</name>
		<replaceName>ParseFromString</replaceName>
		<handler>descripter = pb_decode_cpp()</handler>
	</Function>
	<Function>
		<name>SerializePartialToArray</name>
		<replaceName>SerializeToString</replaceName>
		<handler>descripter = pb_encode_cpp()</handler>
	</Function>
</Record>
FOR2LUA*/
class TTowerDefenseGetWaveRankRsp : public ::google::protobuf::Message {
 public:
  TTowerDefenseGetWaveRankRsp();
  virtual ~TTowerDefenseGetWaveRankRsp();

  TTowerDefenseGetWaveRankRsp(const TTowerDefenseGetWaveRankRsp& from);

  inline TTowerDefenseGetWaveRankRsp& operator=(const TTowerDefenseGetWaveRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TTowerDefenseGetWaveRankRsp& default_instance();

  void Swap(TTowerDefenseGetWaveRankRsp* other);

  // implements Message ----------------------------------------------

  TTowerDefenseGetWaveRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TTowerDefenseGetWaveRankRsp& from);
  void MergeFrom(const TTowerDefenseGetWaveRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .pb.TTowerDefenseWaveRankInfo RankArr = 1;
  inline int rankarr_size() const;
  inline void clear_rankarr();
  static const int kRankArrFieldNumber = 1;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetWaveRankRsp</name>
  	<Function>
  		<name>rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>mutable_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>add_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_add_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_rankarr</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  	<Function>
  		<name>rankarr_size</name>
  		<replaceName>RankArr</replaceName>
  		<handler>descripter = pb_repeated_size_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline const ::pb::TTowerDefenseWaveRankInfo& rankarr(int index) const;
  inline ::pb::TTowerDefenseWaveRankInfo* mutable_rankarr(int index);
  inline ::pb::TTowerDefenseWaveRankInfo* add_rankarr();
  inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseWaveRankInfo >&
      rankarr() const;
  inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseWaveRankInfo >*
      mutable_rankarr();

  // optional int32 MyRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  /*FOR2LUA
  <Record>
  	<name>TTowerDefenseGetWaveRankRsp</name>
  	<Function>
  		<name>myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_cpp()</handler>
  	</Function>
  	<Function>
  		<name>set_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_set_cpp()</handler>
  	</Function>
  	<Function>
  		<name>has_myrank</name>
  		<replaceName>MyRank</replaceName>
  		<handler>descripter = pb_has_cpp()</handler>
  	</Function>
  </Record>
  FOR2LUA*/
  inline ::google::protobuf::int32 myrank() const;
  inline void set_myrank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:pb.TTowerDefenseGetWaveRankRsp)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseWaveRankInfo > rankarr_;
  ::google::protobuf::int32 myrank_;
  friend void  protobuf_AddDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_AssignDesc_net_2fTowerDefense_2eproto();
  friend void protobuf_ShutdownFile_net_2fTowerDefense_2eproto();

  void InitAsDefaultInstance();
  static TTowerDefenseGetWaveRankRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// TTowerDefenseAchievementInfo

// optional uint32 Id = 1;
inline bool TTowerDefenseAchievementInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseAchievementInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseAchievementInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseAchievementInfo::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TTowerDefenseAchievementInfo::id() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseAchievementInfo.Id)
  return id_;
}
inline void TTowerDefenseAchievementInfo::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseAchievementInfo.Id)
}

// optional uint64 RewardTime = 2;
inline bool TTowerDefenseAchievementInfo::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseAchievementInfo::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseAchievementInfo::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseAchievementInfo::clear_rewardtime() {
  rewardtime_ = GOOGLE_ULONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::uint64 TTowerDefenseAchievementInfo::rewardtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseAchievementInfo.RewardTime)
  return rewardtime_;
}
inline void TTowerDefenseAchievementInfo::set_rewardtime(::google::protobuf::uint64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseAchievementInfo.RewardTime)
}

// -------------------------------------------------------------------

// TTowerDefenseWaveDropInfo

// optional uint32 WaveNum = 1;
inline bool TTowerDefenseWaveDropInfo::has_wavenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseWaveDropInfo::set_has_wavenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseWaveDropInfo::clear_has_wavenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseWaveDropInfo::clear_wavenum() {
  wavenum_ = 0u;
  clear_has_wavenum();
}
inline ::google::protobuf::uint32 TTowerDefenseWaveDropInfo::wavenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseWaveDropInfo.WaveNum)
  return wavenum_;
}
inline void TTowerDefenseWaveDropInfo::set_wavenum(::google::protobuf::uint32 value) {
  set_has_wavenum();
  wavenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseWaveDropInfo.WaveNum)
}

// repeated .pb.TCommonReward DropArray = 2;
inline int TTowerDefenseWaveDropInfo::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseWaveDropInfo::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseWaveDropInfo::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseWaveDropInfo.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseWaveDropInfo::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseWaveDropInfo.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseWaveDropInfo::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseWaveDropInfo.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseWaveDropInfo::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseWaveDropInfo.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseWaveDropInfo::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseWaveDropInfo.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TTowerDefenseGetInfoRsp

// optional uint32 MaxWaveNum = 1;
inline bool TTowerDefenseGetInfoRsp::has_maxwavenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseGetInfoRsp::set_has_maxwavenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseGetInfoRsp::clear_has_maxwavenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseGetInfoRsp::clear_maxwavenum() {
  maxwavenum_ = 0u;
  clear_has_maxwavenum();
}
inline ::google::protobuf::uint32 TTowerDefenseGetInfoRsp::maxwavenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.MaxWaveNum)
  return maxwavenum_;
}
inline void TTowerDefenseGetInfoRsp::set_maxwavenum(::google::protobuf::uint32 value) {
  set_has_maxwavenum();
  maxwavenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetInfoRsp.MaxWaveNum)
}

// optional uint32 MaxRoundNum = 2;
inline bool TTowerDefenseGetInfoRsp::has_maxroundnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseGetInfoRsp::set_has_maxroundnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseGetInfoRsp::clear_has_maxroundnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseGetInfoRsp::clear_maxroundnum() {
  maxroundnum_ = 0u;
  clear_has_maxroundnum();
}
inline ::google::protobuf::uint32 TTowerDefenseGetInfoRsp::maxroundnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.MaxRoundNum)
  return maxroundnum_;
}
inline void TTowerDefenseGetInfoRsp::set_maxroundnum(::google::protobuf::uint32 value) {
  set_has_maxroundnum();
  maxroundnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetInfoRsp.MaxRoundNum)
}

// optional uint32 ChallengeNum = 3;
inline bool TTowerDefenseGetInfoRsp::has_challengenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseGetInfoRsp::set_has_challengenum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseGetInfoRsp::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseGetInfoRsp::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 TTowerDefenseGetInfoRsp::challengenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.ChallengeNum)
  return challengenum_;
}
inline void TTowerDefenseGetInfoRsp::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetInfoRsp.ChallengeNum)
}

// optional uint32 IncChallengeNum = 12;
inline bool TTowerDefenseGetInfoRsp::has_incchallengenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTowerDefenseGetInfoRsp::set_has_incchallengenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTowerDefenseGetInfoRsp::clear_has_incchallengenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTowerDefenseGetInfoRsp::clear_incchallengenum() {
  incchallengenum_ = 0u;
  clear_has_incchallengenum();
}
inline ::google::protobuf::uint32 TTowerDefenseGetInfoRsp::incchallengenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.IncChallengeNum)
  return incchallengenum_;
}
inline void TTowerDefenseGetInfoRsp::set_incchallengenum(::google::protobuf::uint32 value) {
  set_has_incchallengenum();
  incchallengenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetInfoRsp.IncChallengeNum)
}

// optional uint64 RefreshTime = 4;
inline bool TTowerDefenseGetInfoRsp::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TTowerDefenseGetInfoRsp::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TTowerDefenseGetInfoRsp::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TTowerDefenseGetInfoRsp::clear_refreshtime() {
  refreshtime_ = GOOGLE_ULONGLONG(0);
  clear_has_refreshtime();
}
inline ::google::protobuf::uint64 TTowerDefenseGetInfoRsp::refreshtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.RefreshTime)
  return refreshtime_;
}
inline void TTowerDefenseGetInfoRsp::set_refreshtime(::google::protobuf::uint64 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetInfoRsp.RefreshTime)
}

// optional uint64 PlotEndTime = 5;
inline bool TTowerDefenseGetInfoRsp::has_plotendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TTowerDefenseGetInfoRsp::set_has_plotendtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TTowerDefenseGetInfoRsp::clear_has_plotendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TTowerDefenseGetInfoRsp::clear_plotendtime() {
  plotendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_plotendtime();
}
inline ::google::protobuf::uint64 TTowerDefenseGetInfoRsp::plotendtime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.PlotEndTime)
  return plotendtime_;
}
inline void TTowerDefenseGetInfoRsp::set_plotendtime(::google::protobuf::uint64 value) {
  set_has_plotendtime();
  plotendtime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetInfoRsp.PlotEndTime)
}

// repeated .pb.TUnitFormation ArrFormation = 6;
inline int TTowerDefenseGetInfoRsp::arrformation_size() const {
  return arrformation_.size();
}
inline void TTowerDefenseGetInfoRsp::clear_arrformation() {
  arrformation_.Clear();
}
inline const ::pb::TUnitFormation& TTowerDefenseGetInfoRsp::arrformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.ArrFormation)
  return arrformation_.Get(index);
}
inline ::pb::TUnitFormation* TTowerDefenseGetInfoRsp::mutable_arrformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseGetInfoRsp.ArrFormation)
  return arrformation_.Mutable(index);
}
inline ::pb::TUnitFormation* TTowerDefenseGetInfoRsp::add_arrformation() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseGetInfoRsp.ArrFormation)
  return arrformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
TTowerDefenseGetInfoRsp::arrformation() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseGetInfoRsp.ArrFormation)
  return arrformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
TTowerDefenseGetInfoRsp::mutable_arrformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseGetInfoRsp.ArrFormation)
  return &arrformation_;
}

// repeated .pb.TTowerDefenseAchievementInfo ArrAchievementInfo = 7;
inline int TTowerDefenseGetInfoRsp::arrachievementinfo_size() const {
  return arrachievementinfo_.size();
}
inline void TTowerDefenseGetInfoRsp::clear_arrachievementinfo() {
  arrachievementinfo_.Clear();
}
inline const ::pb::TTowerDefenseAchievementInfo& TTowerDefenseGetInfoRsp::arrachievementinfo(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.ArrAchievementInfo)
  return arrachievementinfo_.Get(index);
}
inline ::pb::TTowerDefenseAchievementInfo* TTowerDefenseGetInfoRsp::mutable_arrachievementinfo(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseGetInfoRsp.ArrAchievementInfo)
  return arrachievementinfo_.Mutable(index);
}
inline ::pb::TTowerDefenseAchievementInfo* TTowerDefenseGetInfoRsp::add_arrachievementinfo() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseGetInfoRsp.ArrAchievementInfo)
  return arrachievementinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseAchievementInfo >&
TTowerDefenseGetInfoRsp::arrachievementinfo() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseGetInfoRsp.ArrAchievementInfo)
  return arrachievementinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseAchievementInfo >*
TTowerDefenseGetInfoRsp::mutable_arrachievementinfo() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseGetInfoRsp.ArrAchievementInfo)
  return &arrachievementinfo_;
}

// optional uint32 AchievementWaveNum = 8;
inline bool TTowerDefenseGetInfoRsp::has_achievementwavenum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TTowerDefenseGetInfoRsp::set_has_achievementwavenum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TTowerDefenseGetInfoRsp::clear_has_achievementwavenum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TTowerDefenseGetInfoRsp::clear_achievementwavenum() {
  achievementwavenum_ = 0u;
  clear_has_achievementwavenum();
}
inline ::google::protobuf::uint32 TTowerDefenseGetInfoRsp::achievementwavenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.AchievementWaveNum)
  return achievementwavenum_;
}
inline void TTowerDefenseGetInfoRsp::set_achievementwavenum(::google::protobuf::uint32 value) {
  set_has_achievementwavenum();
  achievementwavenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetInfoRsp.AchievementWaveNum)
}

// optional uint32 CurRoundNum = 9;
inline bool TTowerDefenseGetInfoRsp::has_curroundnum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TTowerDefenseGetInfoRsp::set_has_curroundnum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TTowerDefenseGetInfoRsp::clear_has_curroundnum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TTowerDefenseGetInfoRsp::clear_curroundnum() {
  curroundnum_ = 0u;
  clear_has_curroundnum();
}
inline ::google::protobuf::uint32 TTowerDefenseGetInfoRsp::curroundnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.CurRoundNum)
  return curroundnum_;
}
inline void TTowerDefenseGetInfoRsp::set_curroundnum(::google::protobuf::uint32 value) {
  set_has_curroundnum();
  curroundnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetInfoRsp.CurRoundNum)
}

// optional .pb.TBattleArgs CurBattleArgs = 10;
inline bool TTowerDefenseGetInfoRsp::has_curbattleargs() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TTowerDefenseGetInfoRsp::set_has_curbattleargs() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TTowerDefenseGetInfoRsp::clear_has_curbattleargs() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TTowerDefenseGetInfoRsp::clear_curbattleargs() {
  if (curbattleargs_ != NULL) curbattleargs_->::pb::TBattleArgs::Clear();
  clear_has_curbattleargs();
}
inline const ::pb::TBattleArgs& TTowerDefenseGetInfoRsp::curbattleargs() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.CurBattleArgs)
  return curbattleargs_ != NULL ? *curbattleargs_ : *default_instance_->curbattleargs_;
}
inline ::pb::TBattleArgs* TTowerDefenseGetInfoRsp::mutable_curbattleargs() {
  set_has_curbattleargs();
  if (curbattleargs_ == NULL) curbattleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseGetInfoRsp.CurBattleArgs)
  return curbattleargs_;
}
inline ::pb::TBattleArgs* TTowerDefenseGetInfoRsp::release_curbattleargs() {
  clear_has_curbattleargs();
  ::pb::TBattleArgs* temp = curbattleargs_;
  curbattleargs_ = NULL;
  return temp;
}
inline void TTowerDefenseGetInfoRsp::set_allocated_curbattleargs(::pb::TBattleArgs* curbattleargs) {
  delete curbattleargs_;
  curbattleargs_ = curbattleargs;
  if (curbattleargs) {
    set_has_curbattleargs();
  } else {
    clear_has_curbattleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseGetInfoRsp.CurBattleArgs)
}

// repeated uint32 ArrDeadHid = 11;
inline int TTowerDefenseGetInfoRsp::arrdeadhid_size() const {
  return arrdeadhid_.size();
}
inline void TTowerDefenseGetInfoRsp::clear_arrdeadhid() {
  arrdeadhid_.Clear();
}
inline ::google::protobuf::uint32 TTowerDefenseGetInfoRsp::arrdeadhid(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetInfoRsp.ArrDeadHid)
  return arrdeadhid_.Get(index);
}
inline void TTowerDefenseGetInfoRsp::set_arrdeadhid(int index, ::google::protobuf::uint32 value) {
  arrdeadhid_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetInfoRsp.ArrDeadHid)
}
inline void TTowerDefenseGetInfoRsp::add_arrdeadhid(::google::protobuf::uint32 value) {
  arrdeadhid_.Add(value);
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseGetInfoRsp.ArrDeadHid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
TTowerDefenseGetInfoRsp::arrdeadhid() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseGetInfoRsp.ArrDeadHid)
  return arrdeadhid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
TTowerDefenseGetInfoRsp::mutable_arrdeadhid() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseGetInfoRsp.ArrDeadHid)
  return &arrdeadhid_;
}

// -------------------------------------------------------------------

// TTowerDefenseSetFormationReq

// repeated .pb.TUnitFormation ArrFormation = 1;
inline int TTowerDefenseSetFormationReq::arrformation_size() const {
  return arrformation_.size();
}
inline void TTowerDefenseSetFormationReq::clear_arrformation() {
  arrformation_.Clear();
}
inline const ::pb::TUnitFormation& TTowerDefenseSetFormationReq::arrformation(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseSetFormationReq.ArrFormation)
  return arrformation_.Get(index);
}
inline ::pb::TUnitFormation* TTowerDefenseSetFormationReq::mutable_arrformation(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseSetFormationReq.ArrFormation)
  return arrformation_.Mutable(index);
}
inline ::pb::TUnitFormation* TTowerDefenseSetFormationReq::add_arrformation() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseSetFormationReq.ArrFormation)
  return arrformation_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >&
TTowerDefenseSetFormationReq::arrformation() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseSetFormationReq.ArrFormation)
  return arrformation_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TUnitFormation >*
TTowerDefenseSetFormationReq::mutable_arrformation() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseSetFormationReq.ArrFormation)
  return &arrformation_;
}

// -------------------------------------------------------------------

// TTowerDefenseDoBattleReq

// optional .pb.TBattleCheckParam BattleCheckParam = 4;
inline bool TTowerDefenseDoBattleReq::has_battlecheckparam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseDoBattleReq::set_has_battlecheckparam() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseDoBattleReq::clear_has_battlecheckparam() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseDoBattleReq::clear_battlecheckparam() {
  if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
  clear_has_battlecheckparam();
}
inline const ::pb::TBattleCheckParam& TTowerDefenseDoBattleReq::battlecheckparam() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseDoBattleReq.BattleCheckParam)
  return battlecheckparam_ != NULL ? *battlecheckparam_ : *default_instance_->battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TTowerDefenseDoBattleReq::mutable_battlecheckparam() {
  set_has_battlecheckparam();
  if (battlecheckparam_ == NULL) battlecheckparam_ = new ::pb::TBattleCheckParam;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseDoBattleReq.BattleCheckParam)
  return battlecheckparam_;
}
inline ::pb::TBattleCheckParam* TTowerDefenseDoBattleReq::release_battlecheckparam() {
  clear_has_battlecheckparam();
  ::pb::TBattleCheckParam* temp = battlecheckparam_;
  battlecheckparam_ = NULL;
  return temp;
}
inline void TTowerDefenseDoBattleReq::set_allocated_battlecheckparam(::pb::TBattleCheckParam* battlecheckparam) {
  delete battlecheckparam_;
  battlecheckparam_ = battlecheckparam;
  if (battlecheckparam) {
    set_has_battlecheckparam();
  } else {
    clear_has_battlecheckparam();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseDoBattleReq.BattleCheckParam)
}

// optional uint32 RoundNum = 2;
inline bool TTowerDefenseDoBattleReq::has_roundnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseDoBattleReq::set_has_roundnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseDoBattleReq::clear_has_roundnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseDoBattleReq::clear_roundnum() {
  roundnum_ = 0u;
  clear_has_roundnum();
}
inline ::google::protobuf::uint32 TTowerDefenseDoBattleReq::roundnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseDoBattleReq.RoundNum)
  return roundnum_;
}
inline void TTowerDefenseDoBattleReq::set_roundnum(::google::protobuf::uint32 value) {
  set_has_roundnum();
  roundnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseDoBattleReq.RoundNum)
}

// optional bool IsHalfwayStart = 3;
inline bool TTowerDefenseDoBattleReq::has_ishalfwaystart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseDoBattleReq::set_has_ishalfwaystart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseDoBattleReq::clear_has_ishalfwaystart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseDoBattleReq::clear_ishalfwaystart() {
  ishalfwaystart_ = false;
  clear_has_ishalfwaystart();
}
inline bool TTowerDefenseDoBattleReq::ishalfwaystart() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseDoBattleReq.IsHalfwayStart)
  return ishalfwaystart_;
}
inline void TTowerDefenseDoBattleReq::set_ishalfwaystart(bool value) {
  set_has_ishalfwaystart();
  ishalfwaystart_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseDoBattleReq.IsHalfwayStart)
}

// -------------------------------------------------------------------

// TTowerDefenseDoBattleRsp

// repeated .pb.TTowerDefenseWaveDropInfo WavesDropArray = 1;
inline int TTowerDefenseDoBattleRsp::wavesdroparray_size() const {
  return wavesdroparray_.size();
}
inline void TTowerDefenseDoBattleRsp::clear_wavesdroparray() {
  wavesdroparray_.Clear();
}
inline const ::pb::TTowerDefenseWaveDropInfo& TTowerDefenseDoBattleRsp::wavesdroparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseDoBattleRsp.WavesDropArray)
  return wavesdroparray_.Get(index);
}
inline ::pb::TTowerDefenseWaveDropInfo* TTowerDefenseDoBattleRsp::mutable_wavesdroparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseDoBattleRsp.WavesDropArray)
  return wavesdroparray_.Mutable(index);
}
inline ::pb::TTowerDefenseWaveDropInfo* TTowerDefenseDoBattleRsp::add_wavesdroparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseDoBattleRsp.WavesDropArray)
  return wavesdroparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseWaveDropInfo >&
TTowerDefenseDoBattleRsp::wavesdroparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseDoBattleRsp.WavesDropArray)
  return wavesdroparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseWaveDropInfo >*
TTowerDefenseDoBattleRsp::mutable_wavesdroparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseDoBattleRsp.WavesDropArray)
  return &wavesdroparray_;
}

// optional .pb.TBattleArgs BattleArgs = 2;
inline bool TTowerDefenseDoBattleRsp::has_battleargs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseDoBattleRsp::set_has_battleargs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseDoBattleRsp::clear_has_battleargs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseDoBattleRsp::clear_battleargs() {
  if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
  clear_has_battleargs();
}
inline const ::pb::TBattleArgs& TTowerDefenseDoBattleRsp::battleargs() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseDoBattleRsp.BattleArgs)
  return battleargs_ != NULL ? *battleargs_ : *default_instance_->battleargs_;
}
inline ::pb::TBattleArgs* TTowerDefenseDoBattleRsp::mutable_battleargs() {
  set_has_battleargs();
  if (battleargs_ == NULL) battleargs_ = new ::pb::TBattleArgs;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseDoBattleRsp.BattleArgs)
  return battleargs_;
}
inline ::pb::TBattleArgs* TTowerDefenseDoBattleRsp::release_battleargs() {
  clear_has_battleargs();
  ::pb::TBattleArgs* temp = battleargs_;
  battleargs_ = NULL;
  return temp;
}
inline void TTowerDefenseDoBattleRsp::set_allocated_battleargs(::pb::TBattleArgs* battleargs) {
  delete battleargs_;
  battleargs_ = battleargs;
  if (battleargs) {
    set_has_battleargs();
  } else {
    clear_has_battleargs();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseDoBattleRsp.BattleArgs)
}

// optional uint32 RoundNum = 3;
inline bool TTowerDefenseDoBattleRsp::has_roundnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseDoBattleRsp::set_has_roundnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseDoBattleRsp::clear_has_roundnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseDoBattleRsp::clear_roundnum() {
  roundnum_ = 0u;
  clear_has_roundnum();
}
inline ::google::protobuf::uint32 TTowerDefenseDoBattleRsp::roundnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseDoBattleRsp.RoundNum)
  return roundnum_;
}
inline void TTowerDefenseDoBattleRsp::set_roundnum(::google::protobuf::uint32 value) {
  set_has_roundnum();
  roundnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseDoBattleRsp.RoundNum)
}

// optional uint32 BattleId = 4;
inline bool TTowerDefenseDoBattleRsp::has_battleid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TTowerDefenseDoBattleRsp::set_has_battleid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TTowerDefenseDoBattleRsp::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TTowerDefenseDoBattleRsp::clear_battleid() {
  battleid_ = 0u;
  clear_has_battleid();
}
inline ::google::protobuf::uint32 TTowerDefenseDoBattleRsp::battleid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseDoBattleRsp.BattleId)
  return battleid_;
}
inline void TTowerDefenseDoBattleRsp::set_battleid(::google::protobuf::uint32 value) {
  set_has_battleid();
  battleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseDoBattleRsp.BattleId)
}

// -------------------------------------------------------------------

// TTowerDefenseReportBattleReq

// optional bytes BattleResultBytes = 1;
inline bool TTowerDefenseReportBattleReq::has_battleresultbytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseReportBattleReq::set_has_battleresultbytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseReportBattleReq::clear_has_battleresultbytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseReportBattleReq::clear_battleresultbytes() {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_->clear();
  }
  clear_has_battleresultbytes();
}
inline const ::std::string& TTowerDefenseReportBattleReq::battleresultbytes() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseReportBattleReq.BattleResultBytes)
  return *battleresultbytes_;
}
inline void TTowerDefenseReportBattleReq::set_battleresultbytes(const ::std::string& value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseReportBattleReq.BattleResultBytes)
}
inline void TTowerDefenseReportBattleReq::set_battleresultbytes(const char* value) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(value);
  // @@protoc_insertion_point(field_set_char:pb.TTowerDefenseReportBattleReq.BattleResultBytes)
}
inline void TTowerDefenseReportBattleReq::set_battleresultbytes(const void* value, size_t size) {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  battleresultbytes_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pb.TTowerDefenseReportBattleReq.BattleResultBytes)
}
inline ::std::string* TTowerDefenseReportBattleReq::mutable_battleresultbytes() {
  set_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    battleresultbytes_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseReportBattleReq.BattleResultBytes)
  return battleresultbytes_;
}
inline ::std::string* TTowerDefenseReportBattleReq::release_battleresultbytes() {
  clear_has_battleresultbytes();
  if (battleresultbytes_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = battleresultbytes_;
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TTowerDefenseReportBattleReq::set_allocated_battleresultbytes(::std::string* battleresultbytes) {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresultbytes_;
  }
  if (battleresultbytes) {
    set_has_battleresultbytes();
    battleresultbytes_ = battleresultbytes;
  } else {
    clear_has_battleresultbytes();
    battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseReportBattleReq.BattleResultBytes)
}

// optional uint32 RoundNum = 2;
inline bool TTowerDefenseReportBattleReq::has_roundnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseReportBattleReq::set_has_roundnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseReportBattleReq::clear_has_roundnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseReportBattleReq::clear_roundnum() {
  roundnum_ = 0u;
  clear_has_roundnum();
}
inline ::google::protobuf::uint32 TTowerDefenseReportBattleReq::roundnum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseReportBattleReq.RoundNum)
  return roundnum_;
}
inline void TTowerDefenseReportBattleReq::set_roundnum(::google::protobuf::uint32 value) {
  set_has_roundnum();
  roundnum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseReportBattleReq.RoundNum)
}

// optional uint32 BattleId = 3;
inline bool TTowerDefenseReportBattleReq::has_battleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseReportBattleReq::set_has_battleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseReportBattleReq::clear_has_battleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseReportBattleReq::clear_battleid() {
  battleid_ = 0u;
  clear_has_battleid();
}
inline ::google::protobuf::uint32 TTowerDefenseReportBattleReq::battleid() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseReportBattleReq.BattleId)
  return battleid_;
}
inline void TTowerDefenseReportBattleReq::set_battleid(::google::protobuf::uint32 value) {
  set_has_battleid();
  battleid_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseReportBattleReq.BattleId)
}

// -------------------------------------------------------------------

// TTowerDefenseReportBattleRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TTowerDefenseReportBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseReportBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseReportBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseReportBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseReportBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseReportBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseReportBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseReportBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseReportBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseReportBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseReportBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseReportBattleRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TTowerDefenseEndBattleRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TTowerDefenseEndBattleRsp::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseEndBattleRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseEndBattleRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseEndBattleRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseEndBattleRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseEndBattleRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseEndBattleRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseEndBattleRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseEndBattleRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseEndBattleRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseEndBattleRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseEndBattleRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TTowerDefenseReceiveAchievementRewardReq

// optional uint32 Id = 1;
inline bool TTowerDefenseReceiveAchievementRewardReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseReceiveAchievementRewardReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseReceiveAchievementRewardReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseReceiveAchievementRewardReq::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 TTowerDefenseReceiveAchievementRewardReq::id() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseReceiveAchievementRewardReq.Id)
  return id_;
}
inline void TTowerDefenseReceiveAchievementRewardReq::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseReceiveAchievementRewardReq.Id)
}

// -------------------------------------------------------------------

// TTowerDefenseReceiveAchievementRewardRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TTowerDefenseReceiveAchievementRewardRsp::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseReceiveAchievementRewardRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseReceiveAchievementRewardRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseReceiveAchievementRewardRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseReceiveAchievementRewardRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseReceiveAchievementRewardRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseReceiveAchievementRewardRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseReceiveAchievementRewardRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseReceiveAchievementRewardRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseReceiveAchievementRewardRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseReceiveAchievementRewardRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseReceiveAchievementRewardRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TTowerDefenseReceiveAllAchievementRewardRsp

// repeated .pb.TCommonReward DropArray = 1;
inline int TTowerDefenseReceiveAllAchievementRewardRsp::droparray_size() const {
  return droparray_.size();
}
inline void TTowerDefenseReceiveAllAchievementRewardRsp::clear_droparray() {
  droparray_.Clear();
}
inline const ::pb::TCommonReward& TTowerDefenseReceiveAllAchievementRewardRsp::droparray(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseReceiveAllAchievementRewardRsp.DropArray)
  return droparray_.Get(index);
}
inline ::pb::TCommonReward* TTowerDefenseReceiveAllAchievementRewardRsp::mutable_droparray(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseReceiveAllAchievementRewardRsp.DropArray)
  return droparray_.Mutable(index);
}
inline ::pb::TCommonReward* TTowerDefenseReceiveAllAchievementRewardRsp::add_droparray() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseReceiveAllAchievementRewardRsp.DropArray)
  return droparray_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >&
TTowerDefenseReceiveAllAchievementRewardRsp::droparray() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseReceiveAllAchievementRewardRsp.DropArray)
  return droparray_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TCommonReward >*
TTowerDefenseReceiveAllAchievementRewardRsp::mutable_droparray() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseReceiveAllAchievementRewardRsp.DropArray)
  return &droparray_;
}

// -------------------------------------------------------------------

// TTowerDefenseWaveRankInfo

// optional .pb.TUserSimpleInfo UserInfo = 1;
inline bool TTowerDefenseWaveRankInfo::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseWaveRankInfo::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseWaveRankInfo::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseWaveRankInfo::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::pb::TUserSimpleInfo::Clear();
  clear_has_userinfo();
}
inline const ::pb::TUserSimpleInfo& TTowerDefenseWaveRankInfo::userinfo() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseWaveRankInfo.UserInfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::pb::TUserSimpleInfo* TTowerDefenseWaveRankInfo::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::pb::TUserSimpleInfo;
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseWaveRankInfo.UserInfo)
  return userinfo_;
}
inline ::pb::TUserSimpleInfo* TTowerDefenseWaveRankInfo::release_userinfo() {
  clear_has_userinfo();
  ::pb::TUserSimpleInfo* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void TTowerDefenseWaveRankInfo::set_allocated_userinfo(::pb::TUserSimpleInfo* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:pb.TTowerDefenseWaveRankInfo.UserInfo)
}

// optional uint32 WaveNum = 2;
inline bool TTowerDefenseWaveRankInfo::has_wavenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseWaveRankInfo::set_has_wavenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseWaveRankInfo::clear_has_wavenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseWaveRankInfo::clear_wavenum() {
  wavenum_ = 0u;
  clear_has_wavenum();
}
inline ::google::protobuf::uint32 TTowerDefenseWaveRankInfo::wavenum() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseWaveRankInfo.WaveNum)
  return wavenum_;
}
inline void TTowerDefenseWaveRankInfo::set_wavenum(::google::protobuf::uint32 value) {
  set_has_wavenum();
  wavenum_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseWaveRankInfo.WaveNum)
}

// optional uint64 UpdateTime = 3;
inline bool TTowerDefenseWaveRankInfo::has_updatetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TTowerDefenseWaveRankInfo::set_has_updatetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TTowerDefenseWaveRankInfo::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TTowerDefenseWaveRankInfo::clear_updatetime() {
  updatetime_ = GOOGLE_ULONGLONG(0);
  clear_has_updatetime();
}
inline ::google::protobuf::uint64 TTowerDefenseWaveRankInfo::updatetime() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseWaveRankInfo.UpdateTime)
  return updatetime_;
}
inline void TTowerDefenseWaveRankInfo::set_updatetime(::google::protobuf::uint64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseWaveRankInfo.UpdateTime)
}

// -------------------------------------------------------------------

// TTowerDefenseGetWaveRankReq

// optional uint32 Offset = 1;
inline bool TTowerDefenseGetWaveRankReq::has_offset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TTowerDefenseGetWaveRankReq::set_has_offset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TTowerDefenseGetWaveRankReq::clear_has_offset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TTowerDefenseGetWaveRankReq::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
inline ::google::protobuf::uint32 TTowerDefenseGetWaveRankReq::offset() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetWaveRankReq.Offset)
  return offset_;
}
inline void TTowerDefenseGetWaveRankReq::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetWaveRankReq.Offset)
}

// optional uint32 Limit = 2;
inline bool TTowerDefenseGetWaveRankReq::has_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseGetWaveRankReq::set_has_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseGetWaveRankReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseGetWaveRankReq::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
inline ::google::protobuf::uint32 TTowerDefenseGetWaveRankReq::limit() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetWaveRankReq.Limit)
  return limit_;
}
inline void TTowerDefenseGetWaveRankReq::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetWaveRankReq.Limit)
}

// -------------------------------------------------------------------

// TTowerDefenseGetWaveRankRsp

// repeated .pb.TTowerDefenseWaveRankInfo RankArr = 1;
inline int TTowerDefenseGetWaveRankRsp::rankarr_size() const {
  return rankarr_.size();
}
inline void TTowerDefenseGetWaveRankRsp::clear_rankarr() {
  rankarr_.Clear();
}
inline const ::pb::TTowerDefenseWaveRankInfo& TTowerDefenseGetWaveRankRsp::rankarr(int index) const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetWaveRankRsp.RankArr)
  return rankarr_.Get(index);
}
inline ::pb::TTowerDefenseWaveRankInfo* TTowerDefenseGetWaveRankRsp::mutable_rankarr(int index) {
  // @@protoc_insertion_point(field_mutable:pb.TTowerDefenseGetWaveRankRsp.RankArr)
  return rankarr_.Mutable(index);
}
inline ::pb::TTowerDefenseWaveRankInfo* TTowerDefenseGetWaveRankRsp::add_rankarr() {
  // @@protoc_insertion_point(field_add:pb.TTowerDefenseGetWaveRankRsp.RankArr)
  return rankarr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseWaveRankInfo >&
TTowerDefenseGetWaveRankRsp::rankarr() const {
  // @@protoc_insertion_point(field_list:pb.TTowerDefenseGetWaveRankRsp.RankArr)
  return rankarr_;
}
inline ::google::protobuf::RepeatedPtrField< ::pb::TTowerDefenseWaveRankInfo >*
TTowerDefenseGetWaveRankRsp::mutable_rankarr() {
  // @@protoc_insertion_point(field_mutable_list:pb.TTowerDefenseGetWaveRankRsp.RankArr)
  return &rankarr_;
}

// optional int32 MyRank = 2;
inline bool TTowerDefenseGetWaveRankRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TTowerDefenseGetWaveRankRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TTowerDefenseGetWaveRankRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TTowerDefenseGetWaveRankRsp::clear_myrank() {
  myrank_ = 0;
  clear_has_myrank();
}
inline ::google::protobuf::int32 TTowerDefenseGetWaveRankRsp::myrank() const {
  // @@protoc_insertion_point(field_get:pb.TTowerDefenseGetWaveRankRsp.MyRank)
  return myrank_;
}
inline void TTowerDefenseGetWaveRankRsp::set_myrank(::google::protobuf::int32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:pb.TTowerDefenseGetWaveRankRsp.MyRank)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_net_2fTowerDefense_2eproto__INCLUDED
