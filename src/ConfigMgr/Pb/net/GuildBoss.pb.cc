// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: net/GuildBoss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "net/GuildBoss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace pb {

namespace {

const ::google::protobuf::Descriptor* TGuildBossUnit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossUnit_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossPassReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossPassReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossSingle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossSingle_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossUserRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossUserRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossGetGuildBossInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossGetGuildBossInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossGetGuildBossSimpleInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossGetGuildBossSimpleInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossStartBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossStartBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossStartBattleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossStartBattleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossReportBattleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossReportBattleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossReceiveRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossReceiveRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossReceiveRewardRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossReceiveRewardRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossReceiveDamageRewardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossReceiveDamageRewardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossGetGuildBossRankInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossGetGuildBossRankInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossGetGuildBossRankInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossGetGuildBossRankInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TGuildBossInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TGuildBossInfoNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_net_2fGuildBoss_2eproto() {
  protobuf_AddDesc_net_2fGuildBoss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "net/GuildBoss.proto");
  GOOGLE_CHECK(file != NULL);
  TGuildBossUnit_descriptor_ = file->message_type(0);
  static const int TGuildBossUnit_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUnit, hid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUnit, htid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUnit, currenthp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUnit, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUnit, battlepos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUnit, screennum_),
  };
  TGuildBossUnit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossUnit_descriptor_,
      TGuildBossUnit::default_instance_,
      TGuildBossUnit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUnit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUnit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossUnit));
  TGuildBossPassReward_descriptor_ = file->message_type(1);
  static const int TGuildBossPassReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossPassReward, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossPassReward, rewarduid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossPassReward, rewarduname_),
  };
  TGuildBossPassReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossPassReward_descriptor_,
      TGuildBossPassReward::default_instance_,
      TGuildBossPassReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossPassReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossPassReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossPassReward));
  TGuildBossSingle_descriptor_ = file->message_type(2);
  static const int TGuildBossSingle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossSingle, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossSingle, passtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossSingle, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossSingle, rewardarr_),
  };
  TGuildBossSingle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossSingle_descriptor_,
      TGuildBossSingle::default_instance_,
      TGuildBossSingle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossSingle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossSingle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossSingle));
  TGuildBossUserRecord_descriptor_ = file->message_type(3);
  static const int TGuildBossUserRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUserRecord, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUserRecord, uname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUserRecord, totaldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUserRecord, damagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUserRecord, fightforce_),
  };
  TGuildBossUserRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossUserRecord_descriptor_,
      TGuildBossUserRecord::default_instance_,
      TGuildBossUserRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUserRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossUserRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossUserRecord));
  TGuildBossGetGuildBossInfoRsp_descriptor_ = file->message_type(4);
  static const int TGuildBossGetGuildBossInfoRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossInfoRsp, dailyatknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossInfoRsp, bosslv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossInfoRsp, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossInfoRsp, bossarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossInfoRsp, userrecordarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossInfoRsp, totaldamage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossInfoRsp, damagerewardarr_),
  };
  TGuildBossGetGuildBossInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossGetGuildBossInfoRsp_descriptor_,
      TGuildBossGetGuildBossInfoRsp::default_instance_,
      TGuildBossGetGuildBossInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossGetGuildBossInfoRsp));
  TGuildBossGetGuildBossSimpleInfoRsp_descriptor_ = file->message_type(5);
  static const int TGuildBossGetGuildBossSimpleInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossSimpleInfoRsp, remainerrewardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossSimpleInfoRsp, remaineratknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossSimpleInfoRsp, bossid_),
  };
  TGuildBossGetGuildBossSimpleInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossGetGuildBossSimpleInfoRsp_descriptor_,
      TGuildBossGetGuildBossSimpleInfoRsp::default_instance_,
      TGuildBossGetGuildBossSimpleInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossSimpleInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossSimpleInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossGetGuildBossSimpleInfoRsp));
  TGuildBossStartBattleReq_descriptor_ = file->message_type(6);
  static const int TGuildBossStartBattleReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossStartBattleReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossStartBattleReq, bosslv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossStartBattleReq, battlecheckparam_),
  };
  TGuildBossStartBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossStartBattleReq_descriptor_,
      TGuildBossStartBattleReq::default_instance_,
      TGuildBossStartBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossStartBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossStartBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossStartBattleReq));
  TGuildBossStartBattleRsp_descriptor_ = file->message_type(7);
  static const int TGuildBossStartBattleRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossStartBattleRsp, unitarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossStartBattleRsp, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossStartBattleRsp, battleargs_),
  };
  TGuildBossStartBattleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossStartBattleRsp_descriptor_,
      TGuildBossStartBattleRsp::default_instance_,
      TGuildBossStartBattleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossStartBattleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossStartBattleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossStartBattleRsp));
  TGuildBossReportBattleReq_descriptor_ = file->message_type(8);
  static const int TGuildBossReportBattleReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReportBattleReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReportBattleReq, bosslv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReportBattleReq, battleret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReportBattleReq, battleresultbytes_),
  };
  TGuildBossReportBattleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossReportBattleReq_descriptor_,
      TGuildBossReportBattleReq::default_instance_,
      TGuildBossReportBattleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReportBattleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReportBattleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossReportBattleReq));
  TGuildBossReceiveRewardReq_descriptor_ = file->message_type(9);
  static const int TGuildBossReceiveRewardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReceiveRewardReq, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReceiveRewardReq, bosslv_),
  };
  TGuildBossReceiveRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossReceiveRewardReq_descriptor_,
      TGuildBossReceiveRewardReq::default_instance_,
      TGuildBossReceiveRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReceiveRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReceiveRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossReceiveRewardReq));
  TGuildBossReceiveRewardRsp_descriptor_ = file->message_type(10);
  static const int TGuildBossReceiveRewardRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReceiveRewardRsp, rewardid_),
  };
  TGuildBossReceiveRewardRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossReceiveRewardRsp_descriptor_,
      TGuildBossReceiveRewardRsp::default_instance_,
      TGuildBossReceiveRewardRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReceiveRewardRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReceiveRewardRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossReceiveRewardRsp));
  TGuildBossReceiveDamageRewardReq_descriptor_ = file->message_type(11);
  static const int TGuildBossReceiveDamageRewardReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReceiveDamageRewardReq, rewardid_),
  };
  TGuildBossReceiveDamageRewardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossReceiveDamageRewardReq_descriptor_,
      TGuildBossReceiveDamageRewardReq::default_instance_,
      TGuildBossReceiveDamageRewardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReceiveDamageRewardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossReceiveDamageRewardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossReceiveDamageRewardReq));
  TGuildBossRankInfo_descriptor_ = file->message_type(12);
  static const int TGuildBossRankInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossRankInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossRankInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossRankInfo, bannername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossRankInfo, bannerbase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossRankInfo, fightforce_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossRankInfo, bosslv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossRankInfo, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossRankInfo, bosstime_),
  };
  TGuildBossRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossRankInfo_descriptor_,
      TGuildBossRankInfo::default_instance_,
      TGuildBossRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossRankInfo));
  TGuildBossGetGuildBossRankInfoReq_descriptor_ = file->message_type(13);
  static const int TGuildBossGetGuildBossRankInfoReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossRankInfoReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossRankInfoReq, limit_),
  };
  TGuildBossGetGuildBossRankInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossGetGuildBossRankInfoReq_descriptor_,
      TGuildBossGetGuildBossRankInfoReq::default_instance_,
      TGuildBossGetGuildBossRankInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossRankInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossRankInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossGetGuildBossRankInfoReq));
  TGuildBossGetGuildBossRankInfoRsp_descriptor_ = file->message_type(14);
  static const int TGuildBossGetGuildBossRankInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossRankInfoRsp, myrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossRankInfoRsp, rankinfoarr_),
  };
  TGuildBossGetGuildBossRankInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossGetGuildBossRankInfoRsp_descriptor_,
      TGuildBossGetGuildBossRankInfoRsp::default_instance_,
      TGuildBossGetGuildBossRankInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossRankInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossGetGuildBossRankInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossGetGuildBossRankInfoRsp));
  TGuildBossInfoNotify_descriptor_ = file->message_type(15);
  static const int TGuildBossInfoNotify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossInfoNotify, isreset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossInfoNotify, bosslv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossInfoNotify, refreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossInfoNotify, bossarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossInfoNotify, userrecordarr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossInfoNotify, updatetime_),
  };
  TGuildBossInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TGuildBossInfoNotify_descriptor_,
      TGuildBossInfoNotify::default_instance_,
      TGuildBossInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TGuildBossInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TGuildBossInfoNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_net_2fGuildBoss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossUnit_descriptor_, &TGuildBossUnit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossPassReward_descriptor_, &TGuildBossPassReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossSingle_descriptor_, &TGuildBossSingle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossUserRecord_descriptor_, &TGuildBossUserRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossGetGuildBossInfoRsp_descriptor_, &TGuildBossGetGuildBossInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossGetGuildBossSimpleInfoRsp_descriptor_, &TGuildBossGetGuildBossSimpleInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossStartBattleReq_descriptor_, &TGuildBossStartBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossStartBattleRsp_descriptor_, &TGuildBossStartBattleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossReportBattleReq_descriptor_, &TGuildBossReportBattleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossReceiveRewardReq_descriptor_, &TGuildBossReceiveRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossReceiveRewardRsp_descriptor_, &TGuildBossReceiveRewardRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossReceiveDamageRewardReq_descriptor_, &TGuildBossReceiveDamageRewardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossRankInfo_descriptor_, &TGuildBossRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossGetGuildBossRankInfoReq_descriptor_, &TGuildBossGetGuildBossRankInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossGetGuildBossRankInfoRsp_descriptor_, &TGuildBossGetGuildBossRankInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TGuildBossInfoNotify_descriptor_, &TGuildBossInfoNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_net_2fGuildBoss_2eproto() {
  delete TGuildBossUnit::default_instance_;
  delete TGuildBossUnit_reflection_;
  delete TGuildBossPassReward::default_instance_;
  delete TGuildBossPassReward_reflection_;
  delete TGuildBossSingle::default_instance_;
  delete TGuildBossSingle_reflection_;
  delete TGuildBossUserRecord::default_instance_;
  delete TGuildBossUserRecord_reflection_;
  delete TGuildBossGetGuildBossInfoRsp::default_instance_;
  delete TGuildBossGetGuildBossInfoRsp_reflection_;
  delete TGuildBossGetGuildBossSimpleInfoRsp::default_instance_;
  delete TGuildBossGetGuildBossSimpleInfoRsp_reflection_;
  delete TGuildBossStartBattleReq::default_instance_;
  delete TGuildBossStartBattleReq_reflection_;
  delete TGuildBossStartBattleRsp::default_instance_;
  delete TGuildBossStartBattleRsp_reflection_;
  delete TGuildBossReportBattleReq::default_instance_;
  delete TGuildBossReportBattleReq_reflection_;
  delete TGuildBossReceiveRewardReq::default_instance_;
  delete TGuildBossReceiveRewardReq_reflection_;
  delete TGuildBossReceiveRewardRsp::default_instance_;
  delete TGuildBossReceiveRewardRsp_reflection_;
  delete TGuildBossReceiveDamageRewardReq::default_instance_;
  delete TGuildBossReceiveDamageRewardReq_reflection_;
  delete TGuildBossRankInfo::default_instance_;
  delete TGuildBossRankInfo_reflection_;
  delete TGuildBossGetGuildBossRankInfoReq::default_instance_;
  delete TGuildBossGetGuildBossRankInfoReq_reflection_;
  delete TGuildBossGetGuildBossRankInfoRsp::default_instance_;
  delete TGuildBossGetGuildBossRankInfoRsp_reflection_;
  delete TGuildBossInfoNotify::default_instance_;
  delete TGuildBossInfoNotify_reflection_;
}

void protobuf_AddDesc_net_2fGuildBoss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pb::protobuf_AddDesc_net_2fBattle_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023net/GuildBoss.proto\022\002pb\032\020net/Battle.pr"
    "oto\"s\n\016TGuildBossUnit\022\013\n\003Hid\030\001 \001(\r\022\014\n\004Ht"
    "id\030\002 \001(\r\022\021\n\tCurrentHp\030\003 \001(\004\022\r\n\005MaxHp\030\004 \001"
    "(\004\022\021\n\tBattlePos\030\005 \001(\r\022\021\n\tScreenNum\030\006 \001(\r"
    "\"P\n\024TGuildBossPassReward\022\020\n\010RewardId\030\001 \001"
    "(\r\022\021\n\tRewardUid\030\002 \001(\004\022\023\n\013RewardUname\030\003 \001"
    "(\t\"\206\001\n\020TGuildBossSingle\022\016\n\006BossId\030\001 \001(\r\022"
    "\020\n\010PassTime\030\002 \001(\004\022#\n\007UnitArr\030\003 \003(\0132\022.pb."
    "TGuildBossUnit\022+\n\tRewardArr\030\004 \003(\0132\030.pb.T"
    "GuildBossPassReward\"o\n\024TGuildBossUserRec"
    "ord\022\013\n\003Uid\030\001 \001(\004\022\r\n\005Uname\030\002 \001(\t\022\023\n\013Total"
    "Damage\030\003 \001(\004\022\022\n\nDamageTime\030\004 \001(\004\022\022\n\nFigh"
    "tForce\030\005 \001(\004\"\337\001\n\035TGuildBossGetGuildBossI"
    "nfoRsp\022\023\n\013DailyAtkNum\030\001 \001(\r\022\016\n\006BossLv\030\002 "
    "\001(\r\022\023\n\013RefreshTime\030\003 \001(\004\022%\n\007BossArr\030\004 \003("
    "\0132\024.pb.TGuildBossSingle\022/\n\rUserRecordArr"
    "\030\005 \003(\0132\030.pb.TGuildBossUserRecord\022\023\n\013Tota"
    "lDamage\030\006 \001(\004\022\027\n\017DamageRewardArr\030\007 \003(\r\"h"
    "\n#TGuildBossGetGuildBossSimpleInfoRsp\022\031\n"
    "\021RemainerRewardNum\030\001 \001(\r\022\026\n\016RemainerAtkN"
    "um\030\002 \001(\r\022\016\n\006BossId\030\003 \001(\r\"k\n\030TGuildBossSt"
    "artBattleReq\022\016\n\006BossId\030\001 \001(\r\022\016\n\006BossLv\030\002"
    " \001(\r\022/\n\020BattleCheckParam\030\003 \001(\0132\025.pb.TBat"
    "tleCheckParam\"x\n\030TGuildBossStartBattleRs"
    "p\022#\n\007UnitArr\030\001 \003(\0132\022.pb.TGuildBossUnit\022\022"
    "\n\nUpdateTime\030\002 \001(\004\022#\n\nBattleArgs\030\003 \001(\0132\017"
    ".pb.TBattleArgs\"|\n\031TGuildBossReportBattl"
    "eReq\022\016\n\006BossId\030\001 \001(\r\022\016\n\006BossLv\030\002 \001(\r\022$\n\t"
    "BattleRet\030\003 \001(\0132\021.pb.TBattleResult\022\031\n\021Ba"
    "ttleResultBytes\030\004 \001(\014\"<\n\032TGuildBossRecei"
    "veRewardReq\022\016\n\006BossId\030\001 \001(\r\022\016\n\006BossLv\030\002 "
    "\001(\r\".\n\032TGuildBossReceiveRewardRsp\022\020\n\010Rew"
    "ardId\030\001 \001(\r\"4\n TGuildBossReceiveDamageRe"
    "wardReq\022\020\n\010RewardId\030\001 \001(\r\"\246\001\n\022TGuildBoss"
    "RankInfo\022\017\n\007GuildId\030\001 \001(\004\022\021\n\tGuildName\030\002"
    " \001(\t\022\022\n\nBannerName\030\003 \001(\t\022\022\n\nBannerBase\030\004"
    " \001(\r\022\022\n\nFightForce\030\005 \001(\004\022\016\n\006BossLv\030\006 \001(\r"
    "\022\016\n\006BossId\030\007 \001(\r\022\020\n\010BossTime\030\010 \001(\004\"B\n!TG"
    "uildBossGetGuildBossRankInfoReq\022\016\n\006Offse"
    "t\030\001 \001(\r\022\r\n\005Limit\030\002 \001(\r\"`\n!TGuildBossGetG"
    "uildBossRankInfoRsp\022\016\n\006MyRank\030\001 \001(\005\022+\n\013R"
    "ankInfoArr\030\002 \003(\0132\026.pb.TGuildBossRankInfo"
    "\"\270\001\n\024TGuildBossInfoNotify\022\017\n\007IsReset\030\001 \001"
    "(\r\022\016\n\006BossLv\030\002 \001(\r\022\023\n\013RefreshTime\030\003 \001(\004\022"
    "%\n\007BossArr\030\004 \003(\0132\024.pb.TGuildBossSingle\022/"
    "\n\rUserRecordArr\030\005 \003(\0132\030.pb.TGuildBossUse"
    "rRecord\022\022\n\nUpdateTime\030\006 \001(\004", 1867);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "net/GuildBoss.proto", &protobuf_RegisterTypes);
  TGuildBossUnit::default_instance_ = new TGuildBossUnit();
  TGuildBossPassReward::default_instance_ = new TGuildBossPassReward();
  TGuildBossSingle::default_instance_ = new TGuildBossSingle();
  TGuildBossUserRecord::default_instance_ = new TGuildBossUserRecord();
  TGuildBossGetGuildBossInfoRsp::default_instance_ = new TGuildBossGetGuildBossInfoRsp();
  TGuildBossGetGuildBossSimpleInfoRsp::default_instance_ = new TGuildBossGetGuildBossSimpleInfoRsp();
  TGuildBossStartBattleReq::default_instance_ = new TGuildBossStartBattleReq();
  TGuildBossStartBattleRsp::default_instance_ = new TGuildBossStartBattleRsp();
  TGuildBossReportBattleReq::default_instance_ = new TGuildBossReportBattleReq();
  TGuildBossReceiveRewardReq::default_instance_ = new TGuildBossReceiveRewardReq();
  TGuildBossReceiveRewardRsp::default_instance_ = new TGuildBossReceiveRewardRsp();
  TGuildBossReceiveDamageRewardReq::default_instance_ = new TGuildBossReceiveDamageRewardReq();
  TGuildBossRankInfo::default_instance_ = new TGuildBossRankInfo();
  TGuildBossGetGuildBossRankInfoReq::default_instance_ = new TGuildBossGetGuildBossRankInfoReq();
  TGuildBossGetGuildBossRankInfoRsp::default_instance_ = new TGuildBossGetGuildBossRankInfoRsp();
  TGuildBossInfoNotify::default_instance_ = new TGuildBossInfoNotify();
  TGuildBossUnit::default_instance_->InitAsDefaultInstance();
  TGuildBossPassReward::default_instance_->InitAsDefaultInstance();
  TGuildBossSingle::default_instance_->InitAsDefaultInstance();
  TGuildBossUserRecord::default_instance_->InitAsDefaultInstance();
  TGuildBossGetGuildBossInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildBossGetGuildBossSimpleInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildBossStartBattleReq::default_instance_->InitAsDefaultInstance();
  TGuildBossStartBattleRsp::default_instance_->InitAsDefaultInstance();
  TGuildBossReportBattleReq::default_instance_->InitAsDefaultInstance();
  TGuildBossReceiveRewardReq::default_instance_->InitAsDefaultInstance();
  TGuildBossReceiveRewardRsp::default_instance_->InitAsDefaultInstance();
  TGuildBossReceiveDamageRewardReq::default_instance_->InitAsDefaultInstance();
  TGuildBossRankInfo::default_instance_->InitAsDefaultInstance();
  TGuildBossGetGuildBossRankInfoReq::default_instance_->InitAsDefaultInstance();
  TGuildBossGetGuildBossRankInfoRsp::default_instance_->InitAsDefaultInstance();
  TGuildBossInfoNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_net_2fGuildBoss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_net_2fGuildBoss_2eproto {
  StaticDescriptorInitializer_net_2fGuildBoss_2eproto() {
    protobuf_AddDesc_net_2fGuildBoss_2eproto();
  }
} static_descriptor_initializer_net_2fGuildBoss_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TGuildBossUnit::kHidFieldNumber;
const int TGuildBossUnit::kHtidFieldNumber;
const int TGuildBossUnit::kCurrentHpFieldNumber;
const int TGuildBossUnit::kMaxHpFieldNumber;
const int TGuildBossUnit::kBattlePosFieldNumber;
const int TGuildBossUnit::kScreenNumFieldNumber;
#endif  // !_MSC_VER

TGuildBossUnit::TGuildBossUnit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossUnit)
}

void TGuildBossUnit::InitAsDefaultInstance() {
}

TGuildBossUnit::TGuildBossUnit(const TGuildBossUnit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossUnit)
}

void TGuildBossUnit::SharedCtor() {
  _cached_size_ = 0;
  hid_ = 0u;
  htid_ = 0u;
  currenthp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  battlepos_ = 0u;
  screennum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossUnit::~TGuildBossUnit() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossUnit)
  SharedDtor();
}

void TGuildBossUnit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildBossUnit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossUnit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossUnit_descriptor_;
}

const TGuildBossUnit& TGuildBossUnit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossUnit* TGuildBossUnit::default_instance_ = NULL;

TGuildBossUnit* TGuildBossUnit::New() const {
  return new TGuildBossUnit;
}

void TGuildBossUnit::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildBossUnit*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(hid_, screennum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossUnit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossUnit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Hid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hid_)));
          set_has_hid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Htid;
        break;
      }

      // optional uint32 Htid = 2;
      case 2: {
        if (tag == 16) {
         parse_Htid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &htid_)));
          set_has_htid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_CurrentHp;
        break;
      }

      // optional uint64 CurrentHp = 3;
      case 3: {
        if (tag == 24) {
         parse_CurrentHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &currenthp_)));
          set_has_currenthp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_MaxHp;
        break;
      }

      // optional uint64 MaxHp = 4;
      case 4: {
        if (tag == 32) {
         parse_MaxHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_BattlePos;
        break;
      }

      // optional uint32 BattlePos = 5;
      case 5: {
        if (tag == 40) {
         parse_BattlePos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepos_)));
          set_has_battlepos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ScreenNum;
        break;
      }

      // optional uint32 ScreenNum = 6;
      case 6: {
        if (tag == 48) {
         parse_ScreenNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &screennum_)));
          set_has_screennum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossUnit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossUnit)
  return false;
#undef DO_
}

void TGuildBossUnit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossUnit)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hid(), output);
  }

  // optional uint32 Htid = 2;
  if (has_htid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->htid(), output);
  }

  // optional uint64 CurrentHp = 3;
  if (has_currenthp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->currenthp(), output);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxhp(), output);
  }

  // optional uint32 BattlePos = 5;
  if (has_battlepos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->battlepos(), output);
  }

  // optional uint32 ScreenNum = 6;
  if (has_screennum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->screennum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossUnit)
}

::google::protobuf::uint8* TGuildBossUnit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossUnit)
  // optional uint32 Hid = 1;
  if (has_hid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hid(), target);
  }

  // optional uint32 Htid = 2;
  if (has_htid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->htid(), target);
  }

  // optional uint64 CurrentHp = 3;
  if (has_currenthp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->currenthp(), target);
  }

  // optional uint64 MaxHp = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxhp(), target);
  }

  // optional uint32 BattlePos = 5;
  if (has_battlepos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->battlepos(), target);
  }

  // optional uint32 ScreenNum = 6;
  if (has_screennum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->screennum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossUnit)
  return target;
}

int TGuildBossUnit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Hid = 1;
    if (has_hid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hid());
    }

    // optional uint32 Htid = 2;
    if (has_htid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->htid());
    }

    // optional uint64 CurrentHp = 3;
    if (has_currenthp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->currenthp());
    }

    // optional uint64 MaxHp = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

    // optional uint32 BattlePos = 5;
    if (has_battlepos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepos());
    }

    // optional uint32 ScreenNum = 6;
    if (has_screennum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->screennum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossUnit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossUnit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossUnit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossUnit::MergeFrom(const TGuildBossUnit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hid()) {
      set_hid(from.hid());
    }
    if (from.has_htid()) {
      set_htid(from.htid());
    }
    if (from.has_currenthp()) {
      set_currenthp(from.currenthp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_battlepos()) {
      set_battlepos(from.battlepos());
    }
    if (from.has_screennum()) {
      set_screennum(from.screennum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossUnit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossUnit::CopyFrom(const TGuildBossUnit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossUnit::IsInitialized() const {

  return true;
}

void TGuildBossUnit::Swap(TGuildBossUnit* other) {
  if (other != this) {
    std::swap(hid_, other->hid_);
    std::swap(htid_, other->htid_);
    std::swap(currenthp_, other->currenthp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(battlepos_, other->battlepos_);
    std::swap(screennum_, other->screennum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossUnit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossUnit_descriptor_;
  metadata.reflection = TGuildBossUnit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossPassReward::kRewardIdFieldNumber;
const int TGuildBossPassReward::kRewardUidFieldNumber;
const int TGuildBossPassReward::kRewardUnameFieldNumber;
#endif  // !_MSC_VER

TGuildBossPassReward::TGuildBossPassReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossPassReward)
}

void TGuildBossPassReward::InitAsDefaultInstance() {
}

TGuildBossPassReward::TGuildBossPassReward(const TGuildBossPassReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossPassReward)
}

void TGuildBossPassReward::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  rewardid_ = 0u;
  rewarduid_ = GOOGLE_ULONGLONG(0);
  rewarduname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossPassReward::~TGuildBossPassReward() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossPassReward)
  SharedDtor();
}

void TGuildBossPassReward::SharedDtor() {
  if (rewarduname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rewarduname_;
  }
  if (this != default_instance_) {
  }
}

void TGuildBossPassReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossPassReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossPassReward_descriptor_;
}

const TGuildBossPassReward& TGuildBossPassReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossPassReward* TGuildBossPassReward::default_instance_ = NULL;

TGuildBossPassReward* TGuildBossPassReward::New() const {
  return new TGuildBossPassReward;
}

void TGuildBossPassReward::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    rewardid_ = 0u;
    rewarduid_ = GOOGLE_ULONGLONG(0);
    if (has_rewarduname()) {
      if (rewarduname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        rewarduname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossPassReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossPassReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RewardUid;
        break;
      }

      // optional uint64 RewardUid = 2;
      case 2: {
        if (tag == 16) {
         parse_RewardUid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &rewarduid_)));
          set_has_rewarduid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_RewardUname;
        break;
      }

      // optional string RewardUname = 3;
      case 3: {
        if (tag == 26) {
         parse_RewardUname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rewarduname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->rewarduname().data(), this->rewarduname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "rewarduname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossPassReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossPassReward)
  return false;
#undef DO_
}

void TGuildBossPassReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossPassReward)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardid(), output);
  }

  // optional uint64 RewardUid = 2;
  if (has_rewarduid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->rewarduid(), output);
  }

  // optional string RewardUname = 3;
  if (has_rewarduname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewarduname().data(), this->rewarduname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewarduname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->rewarduname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossPassReward)
}

::google::protobuf::uint8* TGuildBossPassReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossPassReward)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardid(), target);
  }

  // optional uint64 RewardUid = 2;
  if (has_rewarduid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->rewarduid(), target);
  }

  // optional string RewardUname = 3;
  if (has_rewarduname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->rewarduname().data(), this->rewarduname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "rewarduname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->rewarduname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossPassReward)
  return target;
}

int TGuildBossPassReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardId = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

    // optional uint64 RewardUid = 2;
    if (has_rewarduid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->rewarduid());
    }

    // optional string RewardUname = 3;
    if (has_rewarduname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rewarduname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossPassReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossPassReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossPassReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossPassReward::MergeFrom(const TGuildBossPassReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_rewarduid()) {
      set_rewarduid(from.rewarduid());
    }
    if (from.has_rewarduname()) {
      set_rewarduname(from.rewarduname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossPassReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossPassReward::CopyFrom(const TGuildBossPassReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossPassReward::IsInitialized() const {

  return true;
}

void TGuildBossPassReward::Swap(TGuildBossPassReward* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(rewarduid_, other->rewarduid_);
    std::swap(rewarduname_, other->rewarduname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossPassReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossPassReward_descriptor_;
  metadata.reflection = TGuildBossPassReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossSingle::kBossIdFieldNumber;
const int TGuildBossSingle::kPassTimeFieldNumber;
const int TGuildBossSingle::kUnitArrFieldNumber;
const int TGuildBossSingle::kRewardArrFieldNumber;
#endif  // !_MSC_VER

TGuildBossSingle::TGuildBossSingle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossSingle)
}

void TGuildBossSingle::InitAsDefaultInstance() {
}

TGuildBossSingle::TGuildBossSingle(const TGuildBossSingle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossSingle)
}

void TGuildBossSingle::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  passtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossSingle::~TGuildBossSingle() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossSingle)
  SharedDtor();
}

void TGuildBossSingle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildBossSingle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossSingle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossSingle_descriptor_;
}

const TGuildBossSingle& TGuildBossSingle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossSingle* TGuildBossSingle::default_instance_ = NULL;

TGuildBossSingle* TGuildBossSingle::New() const {
  return new TGuildBossSingle;
}

void TGuildBossSingle::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    bossid_ = 0u;
    passtime_ = GOOGLE_ULONGLONG(0);
  }
  unitarr_.Clear();
  rewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossSingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossSingle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_PassTime;
        break;
      }

      // optional uint64 PassTime = 2;
      case 2: {
        if (tag == 16) {
         parse_PassTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &passtime_)));
          set_has_passtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UnitArr;
        break;
      }

      // repeated .pb.TGuildBossUnit UnitArr = 3;
      case 3: {
        if (tag == 26) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_UnitArr;
        if (input->ExpectTag(34)) goto parse_RewardArr;
        break;
      }

      // repeated .pb.TGuildBossPassReward RewardArr = 4;
      case 4: {
        if (tag == 34) {
         parse_RewardArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_RewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossSingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossSingle)
  return false;
#undef DO_
}

void TGuildBossSingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossSingle)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint64 PassTime = 2;
  if (has_passtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->passtime(), output);
  }

  // repeated .pb.TGuildBossUnit UnitArr = 3;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->unitarr(i), output);
  }

  // repeated .pb.TGuildBossPassReward RewardArr = 4;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossSingle)
}

::google::protobuf::uint8* TGuildBossSingle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossSingle)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint64 PassTime = 2;
  if (has_passtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->passtime(), target);
  }

  // repeated .pb.TGuildBossUnit UnitArr = 3;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->unitarr(i), target);
  }

  // repeated .pb.TGuildBossPassReward RewardArr = 4;
  for (int i = 0; i < this->rewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossSingle)
  return target;
}

int TGuildBossSingle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint64 PassTime = 2;
    if (has_passtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->passtime());
    }

  }
  // repeated .pb.TGuildBossUnit UnitArr = 3;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  // repeated .pb.TGuildBossPassReward RewardArr = 4;
  total_size += 1 * this->rewardarr_size();
  for (int i = 0; i < this->rewardarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossSingle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossSingle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossSingle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossSingle::MergeFrom(const TGuildBossSingle& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  rewardarr_.MergeFrom(from.rewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_passtime()) {
      set_passtime(from.passtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossSingle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossSingle::CopyFrom(const TGuildBossSingle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossSingle::IsInitialized() const {

  return true;
}

void TGuildBossSingle::Swap(TGuildBossSingle* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(passtime_, other->passtime_);
    unitarr_.Swap(&other->unitarr_);
    rewardarr_.Swap(&other->rewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossSingle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossSingle_descriptor_;
  metadata.reflection = TGuildBossSingle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossUserRecord::kUidFieldNumber;
const int TGuildBossUserRecord::kUnameFieldNumber;
const int TGuildBossUserRecord::kTotalDamageFieldNumber;
const int TGuildBossUserRecord::kDamageTimeFieldNumber;
const int TGuildBossUserRecord::kFightForceFieldNumber;
#endif  // !_MSC_VER

TGuildBossUserRecord::TGuildBossUserRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossUserRecord)
}

void TGuildBossUserRecord::InitAsDefaultInstance() {
}

TGuildBossUserRecord::TGuildBossUserRecord(const TGuildBossUserRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossUserRecord)
}

void TGuildBossUserRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_ULONGLONG(0);
  uname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  totaldamage_ = GOOGLE_ULONGLONG(0);
  damagetime_ = GOOGLE_ULONGLONG(0);
  fightforce_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossUserRecord::~TGuildBossUserRecord() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossUserRecord)
  SharedDtor();
}

void TGuildBossUserRecord::SharedDtor() {
  if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uname_;
  }
  if (this != default_instance_) {
  }
}

void TGuildBossUserRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossUserRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossUserRecord_descriptor_;
}

const TGuildBossUserRecord& TGuildBossUserRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossUserRecord* TGuildBossUserRecord::default_instance_ = NULL;

TGuildBossUserRecord* TGuildBossUserRecord::New() const {
  return new TGuildBossUserRecord;
}

void TGuildBossUserRecord::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildBossUserRecord*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(totaldamage_, fightforce_);
    uid_ = GOOGLE_ULONGLONG(0);
    if (has_uname()) {
      if (uname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossUserRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossUserRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 Uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Uname;
        break;
      }

      // optional string Uname = 2;
      case 2: {
        if (tag == 18) {
         parse_Uname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uname().data(), this->uname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_TotalDamage;
        break;
      }

      // optional uint64 TotalDamage = 3;
      case 3: {
        if (tag == 24) {
         parse_TotalDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totaldamage_)));
          set_has_totaldamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_DamageTime;
        break;
      }

      // optional uint64 DamageTime = 4;
      case 4: {
        if (tag == 32) {
         parse_DamageTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &damagetime_)));
          set_has_damagetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 5;
      case 5: {
        if (tag == 40) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossUserRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossUserRecord)
  return false;
#undef DO_
}

void TGuildBossUserRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossUserRecord)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->uid(), output);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->uname(), output);
  }

  // optional uint64 TotalDamage = 3;
  if (has_totaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->totaldamage(), output);
  }

  // optional uint64 DamageTime = 4;
  if (has_damagetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->damagetime(), output);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fightforce(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossUserRecord)
}

::google::protobuf::uint8* TGuildBossUserRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossUserRecord)
  // optional uint64 Uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->uid(), target);
  }

  // optional string Uname = 2;
  if (has_uname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uname().data(), this->uname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uname(), target);
  }

  // optional uint64 TotalDamage = 3;
  if (has_totaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->totaldamage(), target);
  }

  // optional uint64 DamageTime = 4;
  if (has_damagetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->damagetime(), target);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fightforce(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossUserRecord)
  return target;
}

int TGuildBossUserRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 Uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uid());
    }

    // optional string Uname = 2;
    if (has_uname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uname());
    }

    // optional uint64 TotalDamage = 3;
    if (has_totaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totaldamage());
    }

    // optional uint64 DamageTime = 4;
    if (has_damagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->damagetime());
    }

    // optional uint64 FightForce = 5;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossUserRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossUserRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossUserRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossUserRecord::MergeFrom(const TGuildBossUserRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_uname()) {
      set_uname(from.uname());
    }
    if (from.has_totaldamage()) {
      set_totaldamage(from.totaldamage());
    }
    if (from.has_damagetime()) {
      set_damagetime(from.damagetime());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossUserRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossUserRecord::CopyFrom(const TGuildBossUserRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossUserRecord::IsInitialized() const {

  return true;
}

void TGuildBossUserRecord::Swap(TGuildBossUserRecord* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(uname_, other->uname_);
    std::swap(totaldamage_, other->totaldamage_);
    std::swap(damagetime_, other->damagetime_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossUserRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossUserRecord_descriptor_;
  metadata.reflection = TGuildBossUserRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossGetGuildBossInfoRsp::kDailyAtkNumFieldNumber;
const int TGuildBossGetGuildBossInfoRsp::kBossLvFieldNumber;
const int TGuildBossGetGuildBossInfoRsp::kRefreshTimeFieldNumber;
const int TGuildBossGetGuildBossInfoRsp::kBossArrFieldNumber;
const int TGuildBossGetGuildBossInfoRsp::kUserRecordArrFieldNumber;
const int TGuildBossGetGuildBossInfoRsp::kTotalDamageFieldNumber;
const int TGuildBossGetGuildBossInfoRsp::kDamageRewardArrFieldNumber;
#endif  // !_MSC_VER

TGuildBossGetGuildBossInfoRsp::TGuildBossGetGuildBossInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossGetGuildBossInfoRsp)
}

void TGuildBossGetGuildBossInfoRsp::InitAsDefaultInstance() {
}

TGuildBossGetGuildBossInfoRsp::TGuildBossGetGuildBossInfoRsp(const TGuildBossGetGuildBossInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossGetGuildBossInfoRsp)
}

void TGuildBossGetGuildBossInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  dailyatknum_ = 0u;
  bosslv_ = 0u;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  totaldamage_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossGetGuildBossInfoRsp::~TGuildBossGetGuildBossInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossGetGuildBossInfoRsp)
  SharedDtor();
}

void TGuildBossGetGuildBossInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildBossGetGuildBossInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossGetGuildBossInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossGetGuildBossInfoRsp_descriptor_;
}

const TGuildBossGetGuildBossInfoRsp& TGuildBossGetGuildBossInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossGetGuildBossInfoRsp* TGuildBossGetGuildBossInfoRsp::default_instance_ = NULL;

TGuildBossGetGuildBossInfoRsp* TGuildBossGetGuildBossInfoRsp::New() const {
  return new TGuildBossGetGuildBossInfoRsp;
}

void TGuildBossGetGuildBossInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildBossGetGuildBossInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 39) {
    ZR_(dailyatknum_, refreshtime_);
    totaldamage_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bossarr_.Clear();
  userrecordarr_.Clear();
  damagerewardarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossGetGuildBossInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossGetGuildBossInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 DailyAtkNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailyatknum_)));
          set_has_dailyatknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BossLv;
        break;
      }

      // optional uint32 BossLv = 2;
      case 2: {
        if (tag == 16) {
         parse_BossLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosslv_)));
          set_has_bosslv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 3;
      case 3: {
        if (tag == 24) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BossArr;
        break;
      }

      // repeated .pb.TGuildBossSingle BossArr = 4;
      case 4: {
        if (tag == 34) {
         parse_BossArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BossArr;
        if (input->ExpectTag(42)) goto parse_UserRecordArr;
        break;
      }

      // repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
      case 5: {
        if (tag == 42) {
         parse_UserRecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrecordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UserRecordArr;
        if (input->ExpectTag(48)) goto parse_TotalDamage;
        break;
      }

      // optional uint64 TotalDamage = 6;
      case 6: {
        if (tag == 48) {
         parse_TotalDamage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &totaldamage_)));
          set_has_totaldamage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DamageRewardArr;
        break;
      }

      // repeated uint32 DamageRewardArr = 7;
      case 7: {
        if (tag == 56) {
         parse_DamageRewardArr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_damagerewardarr())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_damagerewardarr())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_DamageRewardArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossGetGuildBossInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossGetGuildBossInfoRsp)
  return false;
#undef DO_
}

void TGuildBossGetGuildBossInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossGetGuildBossInfoRsp)
  // optional uint32 DailyAtkNum = 1;
  if (has_dailyatknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dailyatknum(), output);
  }

  // optional uint32 BossLv = 2;
  if (has_bosslv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bosslv(), output);
  }

  // optional uint64 RefreshTime = 3;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->refreshtime(), output);
  }

  // repeated .pb.TGuildBossSingle BossArr = 4;
  for (int i = 0; i < this->bossarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bossarr(i), output);
  }

  // repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userrecordarr(i), output);
  }

  // optional uint64 TotalDamage = 6;
  if (has_totaldamage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->totaldamage(), output);
  }

  // repeated uint32 DamageRewardArr = 7;
  for (int i = 0; i < this->damagerewardarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->damagerewardarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossGetGuildBossInfoRsp)
}

::google::protobuf::uint8* TGuildBossGetGuildBossInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossGetGuildBossInfoRsp)
  // optional uint32 DailyAtkNum = 1;
  if (has_dailyatknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dailyatknum(), target);
  }

  // optional uint32 BossLv = 2;
  if (has_bosslv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bosslv(), target);
  }

  // optional uint64 RefreshTime = 3;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->refreshtime(), target);
  }

  // repeated .pb.TGuildBossSingle BossArr = 4;
  for (int i = 0; i < this->bossarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bossarr(i), target);
  }

  // repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userrecordarr(i), target);
  }

  // optional uint64 TotalDamage = 6;
  if (has_totaldamage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->totaldamage(), target);
  }

  // repeated uint32 DamageRewardArr = 7;
  for (int i = 0; i < this->damagerewardarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->damagerewardarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossGetGuildBossInfoRsp)
  return target;
}

int TGuildBossGetGuildBossInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 DailyAtkNum = 1;
    if (has_dailyatknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailyatknum());
    }

    // optional uint32 BossLv = 2;
    if (has_bosslv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosslv());
    }

    // optional uint64 RefreshTime = 3;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

    // optional uint64 TotalDamage = 6;
    if (has_totaldamage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->totaldamage());
    }

  }
  // repeated .pb.TGuildBossSingle BossArr = 4;
  total_size += 1 * this->bossarr_size();
  for (int i = 0; i < this->bossarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossarr(i));
  }

  // repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
  total_size += 1 * this->userrecordarr_size();
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrecordarr(i));
  }

  // repeated uint32 DamageRewardArr = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->damagerewardarr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->damagerewardarr(i));
    }
    total_size += 1 * this->damagerewardarr_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossGetGuildBossInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossGetGuildBossInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossGetGuildBossInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossGetGuildBossInfoRsp::MergeFrom(const TGuildBossGetGuildBossInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossarr_.MergeFrom(from.bossarr_);
  userrecordarr_.MergeFrom(from.userrecordarr_);
  damagerewardarr_.MergeFrom(from.damagerewardarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dailyatknum()) {
      set_dailyatknum(from.dailyatknum());
    }
    if (from.has_bosslv()) {
      set_bosslv(from.bosslv());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_totaldamage()) {
      set_totaldamage(from.totaldamage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossGetGuildBossInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossGetGuildBossInfoRsp::CopyFrom(const TGuildBossGetGuildBossInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossGetGuildBossInfoRsp::IsInitialized() const {

  return true;
}

void TGuildBossGetGuildBossInfoRsp::Swap(TGuildBossGetGuildBossInfoRsp* other) {
  if (other != this) {
    std::swap(dailyatknum_, other->dailyatknum_);
    std::swap(bosslv_, other->bosslv_);
    std::swap(refreshtime_, other->refreshtime_);
    bossarr_.Swap(&other->bossarr_);
    userrecordarr_.Swap(&other->userrecordarr_);
    std::swap(totaldamage_, other->totaldamage_);
    damagerewardarr_.Swap(&other->damagerewardarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossGetGuildBossInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossGetGuildBossInfoRsp_descriptor_;
  metadata.reflection = TGuildBossGetGuildBossInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossGetGuildBossSimpleInfoRsp::kRemainerRewardNumFieldNumber;
const int TGuildBossGetGuildBossSimpleInfoRsp::kRemainerAtkNumFieldNumber;
const int TGuildBossGetGuildBossSimpleInfoRsp::kBossIdFieldNumber;
#endif  // !_MSC_VER

TGuildBossGetGuildBossSimpleInfoRsp::TGuildBossGetGuildBossSimpleInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossGetGuildBossSimpleInfoRsp)
}

void TGuildBossGetGuildBossSimpleInfoRsp::InitAsDefaultInstance() {
}

TGuildBossGetGuildBossSimpleInfoRsp::TGuildBossGetGuildBossSimpleInfoRsp(const TGuildBossGetGuildBossSimpleInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossGetGuildBossSimpleInfoRsp)
}

void TGuildBossGetGuildBossSimpleInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  remainerrewardnum_ = 0u;
  remaineratknum_ = 0u;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossGetGuildBossSimpleInfoRsp::~TGuildBossGetGuildBossSimpleInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossGetGuildBossSimpleInfoRsp)
  SharedDtor();
}

void TGuildBossGetGuildBossSimpleInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildBossGetGuildBossSimpleInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossGetGuildBossSimpleInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossGetGuildBossSimpleInfoRsp_descriptor_;
}

const TGuildBossGetGuildBossSimpleInfoRsp& TGuildBossGetGuildBossSimpleInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossGetGuildBossSimpleInfoRsp* TGuildBossGetGuildBossSimpleInfoRsp::default_instance_ = NULL;

TGuildBossGetGuildBossSimpleInfoRsp* TGuildBossGetGuildBossSimpleInfoRsp::New() const {
  return new TGuildBossGetGuildBossSimpleInfoRsp;
}

void TGuildBossGetGuildBossSimpleInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildBossGetGuildBossSimpleInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(remainerrewardnum_, bossid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossGetGuildBossSimpleInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossGetGuildBossSimpleInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RemainerRewardNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainerrewardnum_)));
          set_has_remainerrewardnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_RemainerAtkNum;
        break;
      }

      // optional uint32 RemainerAtkNum = 2;
      case 2: {
        if (tag == 16) {
         parse_RemainerAtkNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaineratknum_)));
          set_has_remaineratknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_BossId;
        break;
      }

      // optional uint32 BossId = 3;
      case 3: {
        if (tag == 24) {
         parse_BossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossGetGuildBossSimpleInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossGetGuildBossSimpleInfoRsp)
  return false;
#undef DO_
}

void TGuildBossGetGuildBossSimpleInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossGetGuildBossSimpleInfoRsp)
  // optional uint32 RemainerRewardNum = 1;
  if (has_remainerrewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remainerrewardnum(), output);
  }

  // optional uint32 RemainerAtkNum = 2;
  if (has_remaineratknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remaineratknum(), output);
  }

  // optional uint32 BossId = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossGetGuildBossSimpleInfoRsp)
}

::google::protobuf::uint8* TGuildBossGetGuildBossSimpleInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossGetGuildBossSimpleInfoRsp)
  // optional uint32 RemainerRewardNum = 1;
  if (has_remainerrewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remainerrewardnum(), target);
  }

  // optional uint32 RemainerAtkNum = 2;
  if (has_remaineratknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remaineratknum(), target);
  }

  // optional uint32 BossId = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossGetGuildBossSimpleInfoRsp)
  return target;
}

int TGuildBossGetGuildBossSimpleInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RemainerRewardNum = 1;
    if (has_remainerrewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainerrewardnum());
    }

    // optional uint32 RemainerAtkNum = 2;
    if (has_remaineratknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaineratknum());
    }

    // optional uint32 BossId = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossGetGuildBossSimpleInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossGetGuildBossSimpleInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossGetGuildBossSimpleInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossGetGuildBossSimpleInfoRsp::MergeFrom(const TGuildBossGetGuildBossSimpleInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remainerrewardnum()) {
      set_remainerrewardnum(from.remainerrewardnum());
    }
    if (from.has_remaineratknum()) {
      set_remaineratknum(from.remaineratknum());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossGetGuildBossSimpleInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossGetGuildBossSimpleInfoRsp::CopyFrom(const TGuildBossGetGuildBossSimpleInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossGetGuildBossSimpleInfoRsp::IsInitialized() const {

  return true;
}

void TGuildBossGetGuildBossSimpleInfoRsp::Swap(TGuildBossGetGuildBossSimpleInfoRsp* other) {
  if (other != this) {
    std::swap(remainerrewardnum_, other->remainerrewardnum_);
    std::swap(remaineratknum_, other->remaineratknum_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossGetGuildBossSimpleInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossGetGuildBossSimpleInfoRsp_descriptor_;
  metadata.reflection = TGuildBossGetGuildBossSimpleInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossStartBattleReq::kBossIdFieldNumber;
const int TGuildBossStartBattleReq::kBossLvFieldNumber;
const int TGuildBossStartBattleReq::kBattleCheckParamFieldNumber;
#endif  // !_MSC_VER

TGuildBossStartBattleReq::TGuildBossStartBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossStartBattleReq)
}

void TGuildBossStartBattleReq::InitAsDefaultInstance() {
  battlecheckparam_ = const_cast< ::pb::TBattleCheckParam*>(&::pb::TBattleCheckParam::default_instance());
}

TGuildBossStartBattleReq::TGuildBossStartBattleReq(const TGuildBossStartBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossStartBattleReq)
}

void TGuildBossStartBattleReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  bosslv_ = 0u;
  battlecheckparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossStartBattleReq::~TGuildBossStartBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossStartBattleReq)
  SharedDtor();
}

void TGuildBossStartBattleReq::SharedDtor() {
  if (this != default_instance_) {
    delete battlecheckparam_;
  }
}

void TGuildBossStartBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossStartBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossStartBattleReq_descriptor_;
}

const TGuildBossStartBattleReq& TGuildBossStartBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossStartBattleReq* TGuildBossStartBattleReq::default_instance_ = NULL;

TGuildBossStartBattleReq* TGuildBossStartBattleReq::New() const {
  return new TGuildBossStartBattleReq;
}

void TGuildBossStartBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildBossStartBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(bossid_, bosslv_);
    if (has_battlecheckparam()) {
      if (battlecheckparam_ != NULL) battlecheckparam_->::pb::TBattleCheckParam::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossStartBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossStartBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BossLv;
        break;
      }

      // optional uint32 BossLv = 2;
      case 2: {
        if (tag == 16) {
         parse_BossLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosslv_)));
          set_has_bosslv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleCheckParam;
        break;
      }

      // optional .pb.TBattleCheckParam BattleCheckParam = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleCheckParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battlecheckparam()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossStartBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossStartBattleReq)
  return false;
#undef DO_
}

void TGuildBossStartBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossStartBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint32 BossLv = 2;
  if (has_bosslv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bosslv(), output);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battlecheckparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossStartBattleReq)
}

::google::protobuf::uint8* TGuildBossStartBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossStartBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint32 BossLv = 2;
  if (has_bosslv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bosslv(), target);
  }

  // optional .pb.TBattleCheckParam BattleCheckParam = 3;
  if (has_battlecheckparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battlecheckparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossStartBattleReq)
  return target;
}

int TGuildBossStartBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint32 BossLv = 2;
    if (has_bosslv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosslv());
    }

    // optional .pb.TBattleCheckParam BattleCheckParam = 3;
    if (has_battlecheckparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battlecheckparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossStartBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossStartBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossStartBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossStartBattleReq::MergeFrom(const TGuildBossStartBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_bosslv()) {
      set_bosslv(from.bosslv());
    }
    if (from.has_battlecheckparam()) {
      mutable_battlecheckparam()->::pb::TBattleCheckParam::MergeFrom(from.battlecheckparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossStartBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossStartBattleReq::CopyFrom(const TGuildBossStartBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossStartBattleReq::IsInitialized() const {

  return true;
}

void TGuildBossStartBattleReq::Swap(TGuildBossStartBattleReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(bosslv_, other->bosslv_);
    std::swap(battlecheckparam_, other->battlecheckparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossStartBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossStartBattleReq_descriptor_;
  metadata.reflection = TGuildBossStartBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossStartBattleRsp::kUnitArrFieldNumber;
const int TGuildBossStartBattleRsp::kUpdateTimeFieldNumber;
const int TGuildBossStartBattleRsp::kBattleArgsFieldNumber;
#endif  // !_MSC_VER

TGuildBossStartBattleRsp::TGuildBossStartBattleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossStartBattleRsp)
}

void TGuildBossStartBattleRsp::InitAsDefaultInstance() {
  battleargs_ = const_cast< ::pb::TBattleArgs*>(&::pb::TBattleArgs::default_instance());
}

TGuildBossStartBattleRsp::TGuildBossStartBattleRsp(const TGuildBossStartBattleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossStartBattleRsp)
}

void TGuildBossStartBattleRsp::SharedCtor() {
  _cached_size_ = 0;
  updatetime_ = GOOGLE_ULONGLONG(0);
  battleargs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossStartBattleRsp::~TGuildBossStartBattleRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossStartBattleRsp)
  SharedDtor();
}

void TGuildBossStartBattleRsp::SharedDtor() {
  if (this != default_instance_) {
    delete battleargs_;
  }
}

void TGuildBossStartBattleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossStartBattleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossStartBattleRsp_descriptor_;
}

const TGuildBossStartBattleRsp& TGuildBossStartBattleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossStartBattleRsp* TGuildBossStartBattleRsp::default_instance_ = NULL;

TGuildBossStartBattleRsp* TGuildBossStartBattleRsp::New() const {
  return new TGuildBossStartBattleRsp;
}

void TGuildBossStartBattleRsp::Clear() {
  if (_has_bits_[0 / 32] & 6) {
    updatetime_ = GOOGLE_ULONGLONG(0);
    if (has_battleargs()) {
      if (battleargs_ != NULL) battleargs_->::pb::TBattleArgs::Clear();
    }
  }
  unitarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossStartBattleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossStartBattleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .pb.TGuildBossUnit UnitArr = 1;
      case 1: {
        if (tag == 10) {
         parse_UnitArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_UnitArr;
        if (input->ExpectTag(16)) goto parse_UpdateTime;
        break;
      }

      // optional uint64 UpdateTime = 2;
      case 2: {
        if (tag == 16) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleArgs;
        break;
      }

      // optional .pb.TBattleArgs BattleArgs = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleArgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleargs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossStartBattleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossStartBattleRsp)
  return false;
#undef DO_
}

void TGuildBossStartBattleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossStartBattleRsp)
  // repeated .pb.TGuildBossUnit UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unitarr(i), output);
  }

  // optional uint64 UpdateTime = 2;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->updatetime(), output);
  }

  // optional .pb.TBattleArgs BattleArgs = 3;
  if (has_battleargs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battleargs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossStartBattleRsp)
}

::google::protobuf::uint8* TGuildBossStartBattleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossStartBattleRsp)
  // repeated .pb.TGuildBossUnit UnitArr = 1;
  for (int i = 0; i < this->unitarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unitarr(i), target);
  }

  // optional uint64 UpdateTime = 2;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->updatetime(), target);
  }

  // optional .pb.TBattleArgs BattleArgs = 3;
  if (has_battleargs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battleargs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossStartBattleRsp)
  return target;
}

int TGuildBossStartBattleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 UpdateTime = 2;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

    // optional .pb.TBattleArgs BattleArgs = 3;
    if (has_battleargs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleargs());
    }

  }
  // repeated .pb.TGuildBossUnit UnitArr = 1;
  total_size += 1 * this->unitarr_size();
  for (int i = 0; i < this->unitarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossStartBattleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossStartBattleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossStartBattleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossStartBattleRsp::MergeFrom(const TGuildBossStartBattleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  unitarr_.MergeFrom(from.unitarr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_battleargs()) {
      mutable_battleargs()->::pb::TBattleArgs::MergeFrom(from.battleargs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossStartBattleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossStartBattleRsp::CopyFrom(const TGuildBossStartBattleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossStartBattleRsp::IsInitialized() const {

  if (has_battleargs()) {
    if (!this->battleargs().IsInitialized()) return false;
  }
  return true;
}

void TGuildBossStartBattleRsp::Swap(TGuildBossStartBattleRsp* other) {
  if (other != this) {
    unitarr_.Swap(&other->unitarr_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(battleargs_, other->battleargs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossStartBattleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossStartBattleRsp_descriptor_;
  metadata.reflection = TGuildBossStartBattleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossReportBattleReq::kBossIdFieldNumber;
const int TGuildBossReportBattleReq::kBossLvFieldNumber;
const int TGuildBossReportBattleReq::kBattleRetFieldNumber;
const int TGuildBossReportBattleReq::kBattleResultBytesFieldNumber;
#endif  // !_MSC_VER

TGuildBossReportBattleReq::TGuildBossReportBattleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossReportBattleReq)
}

void TGuildBossReportBattleReq::InitAsDefaultInstance() {
  battleret_ = const_cast< ::pb::TBattleResult*>(&::pb::TBattleResult::default_instance());
}

TGuildBossReportBattleReq::TGuildBossReportBattleReq(const TGuildBossReportBattleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossReportBattleReq)
}

void TGuildBossReportBattleReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bossid_ = 0u;
  bosslv_ = 0u;
  battleret_ = NULL;
  battleresultbytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossReportBattleReq::~TGuildBossReportBattleReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossReportBattleReq)
  SharedDtor();
}

void TGuildBossReportBattleReq::SharedDtor() {
  if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete battleresultbytes_;
  }
  if (this != default_instance_) {
    delete battleret_;
  }
}

void TGuildBossReportBattleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossReportBattleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossReportBattleReq_descriptor_;
}

const TGuildBossReportBattleReq& TGuildBossReportBattleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossReportBattleReq* TGuildBossReportBattleReq::default_instance_ = NULL;

TGuildBossReportBattleReq* TGuildBossReportBattleReq::New() const {
  return new TGuildBossReportBattleReq;
}

void TGuildBossReportBattleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildBossReportBattleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(bossid_, bosslv_);
    if (has_battleret()) {
      if (battleret_ != NULL) battleret_->::pb::TBattleResult::Clear();
    }
    if (has_battleresultbytes()) {
      if (battleresultbytes_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        battleresultbytes_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossReportBattleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossReportBattleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BossLv;
        break;
      }

      // optional uint32 BossLv = 2;
      case 2: {
        if (tag == 16) {
         parse_BossLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosslv_)));
          set_has_bosslv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BattleRet;
        break;
      }

      // optional .pb.TBattleResult BattleRet = 3;
      case 3: {
        if (tag == 26) {
         parse_BattleRet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BattleResultBytes;
        break;
      }

      // optional bytes BattleResultBytes = 4;
      case 4: {
        if (tag == 34) {
         parse_BattleResultBytes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_battleresultbytes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossReportBattleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossReportBattleReq)
  return false;
#undef DO_
}

void TGuildBossReportBattleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossReportBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint32 BossLv = 2;
  if (has_bosslv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bosslv(), output);
  }

  // optional .pb.TBattleResult BattleRet = 3;
  if (has_battleret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battleret(), output);
  }

  // optional bytes BattleResultBytes = 4;
  if (has_battleresultbytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->battleresultbytes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossReportBattleReq)
}

::google::protobuf::uint8* TGuildBossReportBattleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossReportBattleReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint32 BossLv = 2;
  if (has_bosslv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bosslv(), target);
  }

  // optional .pb.TBattleResult BattleRet = 3;
  if (has_battleret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battleret(), target);
  }

  // optional bytes BattleResultBytes = 4;
  if (has_battleresultbytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->battleresultbytes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossReportBattleReq)
  return target;
}

int TGuildBossReportBattleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint32 BossLv = 2;
    if (has_bosslv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosslv());
    }

    // optional .pb.TBattleResult BattleRet = 3;
    if (has_battleret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleret());
    }

    // optional bytes BattleResultBytes = 4;
    if (has_battleresultbytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->battleresultbytes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossReportBattleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossReportBattleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossReportBattleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossReportBattleReq::MergeFrom(const TGuildBossReportBattleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_bosslv()) {
      set_bosslv(from.bosslv());
    }
    if (from.has_battleret()) {
      mutable_battleret()->::pb::TBattleResult::MergeFrom(from.battleret());
    }
    if (from.has_battleresultbytes()) {
      set_battleresultbytes(from.battleresultbytes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossReportBattleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossReportBattleReq::CopyFrom(const TGuildBossReportBattleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossReportBattleReq::IsInitialized() const {

  if (has_battleret()) {
    if (!this->battleret().IsInitialized()) return false;
  }
  return true;
}

void TGuildBossReportBattleReq::Swap(TGuildBossReportBattleReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(bosslv_, other->bosslv_);
    std::swap(battleret_, other->battleret_);
    std::swap(battleresultbytes_, other->battleresultbytes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossReportBattleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossReportBattleReq_descriptor_;
  metadata.reflection = TGuildBossReportBattleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossReceiveRewardReq::kBossIdFieldNumber;
const int TGuildBossReceiveRewardReq::kBossLvFieldNumber;
#endif  // !_MSC_VER

TGuildBossReceiveRewardReq::TGuildBossReceiveRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossReceiveRewardReq)
}

void TGuildBossReceiveRewardReq::InitAsDefaultInstance() {
}

TGuildBossReceiveRewardReq::TGuildBossReceiveRewardReq(const TGuildBossReceiveRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossReceiveRewardReq)
}

void TGuildBossReceiveRewardReq::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  bosslv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossReceiveRewardReq::~TGuildBossReceiveRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossReceiveRewardReq)
  SharedDtor();
}

void TGuildBossReceiveRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildBossReceiveRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossReceiveRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossReceiveRewardReq_descriptor_;
}

const TGuildBossReceiveRewardReq& TGuildBossReceiveRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossReceiveRewardReq* TGuildBossReceiveRewardReq::default_instance_ = NULL;

TGuildBossReceiveRewardReq* TGuildBossReceiveRewardReq::New() const {
  return new TGuildBossReceiveRewardReq;
}

void TGuildBossReceiveRewardReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildBossReceiveRewardReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(bossid_, bosslv_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossReceiveRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossReceiveRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 BossId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BossLv;
        break;
      }

      // optional uint32 BossLv = 2;
      case 2: {
        if (tag == 16) {
         parse_BossLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosslv_)));
          set_has_bosslv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossReceiveRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossReceiveRewardReq)
  return false;
#undef DO_
}

void TGuildBossReceiveRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossReceiveRewardReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  // optional uint32 BossLv = 2;
  if (has_bosslv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bosslv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossReceiveRewardReq)
}

::google::protobuf::uint8* TGuildBossReceiveRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossReceiveRewardReq)
  // optional uint32 BossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  // optional uint32 BossLv = 2;
  if (has_bosslv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bosslv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossReceiveRewardReq)
  return target;
}

int TGuildBossReceiveRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 BossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint32 BossLv = 2;
    if (has_bosslv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosslv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossReceiveRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossReceiveRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossReceiveRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossReceiveRewardReq::MergeFrom(const TGuildBossReceiveRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_bosslv()) {
      set_bosslv(from.bosslv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossReceiveRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossReceiveRewardReq::CopyFrom(const TGuildBossReceiveRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossReceiveRewardReq::IsInitialized() const {

  return true;
}

void TGuildBossReceiveRewardReq::Swap(TGuildBossReceiveRewardReq* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(bosslv_, other->bosslv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossReceiveRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossReceiveRewardReq_descriptor_;
  metadata.reflection = TGuildBossReceiveRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossReceiveRewardRsp::kRewardIdFieldNumber;
#endif  // !_MSC_VER

TGuildBossReceiveRewardRsp::TGuildBossReceiveRewardRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossReceiveRewardRsp)
}

void TGuildBossReceiveRewardRsp::InitAsDefaultInstance() {
}

TGuildBossReceiveRewardRsp::TGuildBossReceiveRewardRsp(const TGuildBossReceiveRewardRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossReceiveRewardRsp)
}

void TGuildBossReceiveRewardRsp::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossReceiveRewardRsp::~TGuildBossReceiveRewardRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossReceiveRewardRsp)
  SharedDtor();
}

void TGuildBossReceiveRewardRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildBossReceiveRewardRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossReceiveRewardRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossReceiveRewardRsp_descriptor_;
}

const TGuildBossReceiveRewardRsp& TGuildBossReceiveRewardRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossReceiveRewardRsp* TGuildBossReceiveRewardRsp::default_instance_ = NULL;

TGuildBossReceiveRewardRsp* TGuildBossReceiveRewardRsp::New() const {
  return new TGuildBossReceiveRewardRsp;
}

void TGuildBossReceiveRewardRsp::Clear() {
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossReceiveRewardRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossReceiveRewardRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossReceiveRewardRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossReceiveRewardRsp)
  return false;
#undef DO_
}

void TGuildBossReceiveRewardRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossReceiveRewardRsp)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossReceiveRewardRsp)
}

::google::protobuf::uint8* TGuildBossReceiveRewardRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossReceiveRewardRsp)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossReceiveRewardRsp)
  return target;
}

int TGuildBossReceiveRewardRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardId = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossReceiveRewardRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossReceiveRewardRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossReceiveRewardRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossReceiveRewardRsp::MergeFrom(const TGuildBossReceiveRewardRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossReceiveRewardRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossReceiveRewardRsp::CopyFrom(const TGuildBossReceiveRewardRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossReceiveRewardRsp::IsInitialized() const {

  return true;
}

void TGuildBossReceiveRewardRsp::Swap(TGuildBossReceiveRewardRsp* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossReceiveRewardRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossReceiveRewardRsp_descriptor_;
  metadata.reflection = TGuildBossReceiveRewardRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossReceiveDamageRewardReq::kRewardIdFieldNumber;
#endif  // !_MSC_VER

TGuildBossReceiveDamageRewardReq::TGuildBossReceiveDamageRewardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossReceiveDamageRewardReq)
}

void TGuildBossReceiveDamageRewardReq::InitAsDefaultInstance() {
}

TGuildBossReceiveDamageRewardReq::TGuildBossReceiveDamageRewardReq(const TGuildBossReceiveDamageRewardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossReceiveDamageRewardReq)
}

void TGuildBossReceiveDamageRewardReq::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossReceiveDamageRewardReq::~TGuildBossReceiveDamageRewardReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossReceiveDamageRewardReq)
  SharedDtor();
}

void TGuildBossReceiveDamageRewardReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildBossReceiveDamageRewardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossReceiveDamageRewardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossReceiveDamageRewardReq_descriptor_;
}

const TGuildBossReceiveDamageRewardReq& TGuildBossReceiveDamageRewardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossReceiveDamageRewardReq* TGuildBossReceiveDamageRewardReq::default_instance_ = NULL;

TGuildBossReceiveDamageRewardReq* TGuildBossReceiveDamageRewardReq::New() const {
  return new TGuildBossReceiveDamageRewardReq;
}

void TGuildBossReceiveDamageRewardReq::Clear() {
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossReceiveDamageRewardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossReceiveDamageRewardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 RewardId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossReceiveDamageRewardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossReceiveDamageRewardReq)
  return false;
#undef DO_
}

void TGuildBossReceiveDamageRewardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossReceiveDamageRewardReq)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossReceiveDamageRewardReq)
}

::google::protobuf::uint8* TGuildBossReceiveDamageRewardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossReceiveDamageRewardReq)
  // optional uint32 RewardId = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossReceiveDamageRewardReq)
  return target;
}

int TGuildBossReceiveDamageRewardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 RewardId = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossReceiveDamageRewardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossReceiveDamageRewardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossReceiveDamageRewardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossReceiveDamageRewardReq::MergeFrom(const TGuildBossReceiveDamageRewardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossReceiveDamageRewardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossReceiveDamageRewardReq::CopyFrom(const TGuildBossReceiveDamageRewardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossReceiveDamageRewardReq::IsInitialized() const {

  return true;
}

void TGuildBossReceiveDamageRewardReq::Swap(TGuildBossReceiveDamageRewardReq* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossReceiveDamageRewardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossReceiveDamageRewardReq_descriptor_;
  metadata.reflection = TGuildBossReceiveDamageRewardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossRankInfo::kGuildIdFieldNumber;
const int TGuildBossRankInfo::kGuildNameFieldNumber;
const int TGuildBossRankInfo::kBannerNameFieldNumber;
const int TGuildBossRankInfo::kBannerBaseFieldNumber;
const int TGuildBossRankInfo::kFightForceFieldNumber;
const int TGuildBossRankInfo::kBossLvFieldNumber;
const int TGuildBossRankInfo::kBossIdFieldNumber;
const int TGuildBossRankInfo::kBossTimeFieldNumber;
#endif  // !_MSC_VER

TGuildBossRankInfo::TGuildBossRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossRankInfo)
}

void TGuildBossRankInfo::InitAsDefaultInstance() {
}

TGuildBossRankInfo::TGuildBossRankInfo(const TGuildBossRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossRankInfo)
}

void TGuildBossRankInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bannerbase_ = 0u;
  fightforce_ = GOOGLE_ULONGLONG(0);
  bosslv_ = 0u;
  bossid_ = 0u;
  bosstime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossRankInfo::~TGuildBossRankInfo() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossRankInfo)
  SharedDtor();
}

void TGuildBossRankInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bannername_;
  }
  if (this != default_instance_) {
  }
}

void TGuildBossRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossRankInfo_descriptor_;
}

const TGuildBossRankInfo& TGuildBossRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossRankInfo* TGuildBossRankInfo::default_instance_ = NULL;

TGuildBossRankInfo* TGuildBossRankInfo::New() const {
  return new TGuildBossRankInfo;
}

void TGuildBossRankInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildBossRankInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(fightforce_, bossid_);
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_bannername()) {
      if (bannername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bannername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossRankInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 GuildId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GuildName;
        break;
      }

      // optional string GuildName = 2;
      case 2: {
        if (tag == 18) {
         parse_GuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_BannerName;
        break;
      }

      // optional string BannerName = 3;
      case 3: {
        if (tag == 26) {
         parse_BannerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bannername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bannername().data(), this->bannername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bannername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_BannerBase;
        break;
      }

      // optional uint32 BannerBase = 4;
      case 4: {
        if (tag == 32) {
         parse_BannerBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bannerbase_)));
          set_has_bannerbase();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_FightForce;
        break;
      }

      // optional uint64 FightForce = 5;
      case 5: {
        if (tag == 40) {
         parse_FightForce:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightforce_)));
          set_has_fightforce();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_BossLv;
        break;
      }

      // optional uint32 BossLv = 6;
      case 6: {
        if (tag == 48) {
         parse_BossLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosslv_)));
          set_has_bosslv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_BossId;
        break;
      }

      // optional uint32 BossId = 7;
      case 7: {
        if (tag == 56) {
         parse_BossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_BossTime;
        break;
      }

      // optional uint64 BossTime = 8;
      case 8: {
        if (tag == 64) {
         parse_BossTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &bosstime_)));
          set_has_bosstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossRankInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossRankInfo)
  return false;
#undef DO_
}

void TGuildBossRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossRankInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->guildid(), output);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->guildname(), output);
  }

  // optional string BannerName = 3;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bannername(), output);
  }

  // optional uint32 BannerBase = 4;
  if (has_bannerbase()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bannerbase(), output);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fightforce(), output);
  }

  // optional uint32 BossLv = 6;
  if (has_bosslv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->bosslv(), output);
  }

  // optional uint32 BossId = 7;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bossid(), output);
  }

  // optional uint64 BossTime = 8;
  if (has_bosstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->bosstime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossRankInfo)
}

::google::protobuf::uint8* TGuildBossRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossRankInfo)
  // optional uint64 GuildId = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->guildid(), target);
  }

  // optional string GuildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional string BannerName = 3;
  if (has_bannername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bannername().data(), this->bannername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bannername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bannername(), target);
  }

  // optional uint32 BannerBase = 4;
  if (has_bannerbase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bannerbase(), target);
  }

  // optional uint64 FightForce = 5;
  if (has_fightforce()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fightforce(), target);
  }

  // optional uint32 BossLv = 6;
  if (has_bosslv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->bosslv(), target);
  }

  // optional uint32 BossId = 7;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bossid(), target);
  }

  // optional uint64 BossTime = 8;
  if (has_bosstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->bosstime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossRankInfo)
  return target;
}

int TGuildBossRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 GuildId = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string GuildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string BannerName = 3;
    if (has_bannername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bannername());
    }

    // optional uint32 BannerBase = 4;
    if (has_bannerbase()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bannerbase());
    }

    // optional uint64 FightForce = 5;
    if (has_fightforce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightforce());
    }

    // optional uint32 BossLv = 6;
    if (has_bosslv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosslv());
    }

    // optional uint32 BossId = 7;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint64 BossTime = 8;
    if (has_bosstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->bosstime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossRankInfo::MergeFrom(const TGuildBossRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_bannername()) {
      set_bannername(from.bannername());
    }
    if (from.has_bannerbase()) {
      set_bannerbase(from.bannerbase());
    }
    if (from.has_fightforce()) {
      set_fightforce(from.fightforce());
    }
    if (from.has_bosslv()) {
      set_bosslv(from.bosslv());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_bosstime()) {
      set_bosstime(from.bosstime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossRankInfo::CopyFrom(const TGuildBossRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossRankInfo::IsInitialized() const {

  return true;
}

void TGuildBossRankInfo::Swap(TGuildBossRankInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(bannername_, other->bannername_);
    std::swap(bannerbase_, other->bannerbase_);
    std::swap(fightforce_, other->fightforce_);
    std::swap(bosslv_, other->bosslv_);
    std::swap(bossid_, other->bossid_);
    std::swap(bosstime_, other->bosstime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossRankInfo_descriptor_;
  metadata.reflection = TGuildBossRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossGetGuildBossRankInfoReq::kOffsetFieldNumber;
const int TGuildBossGetGuildBossRankInfoReq::kLimitFieldNumber;
#endif  // !_MSC_VER

TGuildBossGetGuildBossRankInfoReq::TGuildBossGetGuildBossRankInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossGetGuildBossRankInfoReq)
}

void TGuildBossGetGuildBossRankInfoReq::InitAsDefaultInstance() {
}

TGuildBossGetGuildBossRankInfoReq::TGuildBossGetGuildBossRankInfoReq(const TGuildBossGetGuildBossRankInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossGetGuildBossRankInfoReq)
}

void TGuildBossGetGuildBossRankInfoReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossGetGuildBossRankInfoReq::~TGuildBossGetGuildBossRankInfoReq() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossGetGuildBossRankInfoReq)
  SharedDtor();
}

void TGuildBossGetGuildBossRankInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildBossGetGuildBossRankInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossGetGuildBossRankInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossGetGuildBossRankInfoReq_descriptor_;
}

const TGuildBossGetGuildBossRankInfoReq& TGuildBossGetGuildBossRankInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossGetGuildBossRankInfoReq* TGuildBossGetGuildBossRankInfoReq::default_instance_ = NULL;

TGuildBossGetGuildBossRankInfoReq* TGuildBossGetGuildBossRankInfoReq::New() const {
  return new TGuildBossGetGuildBossRankInfoReq;
}

void TGuildBossGetGuildBossRankInfoReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildBossGetGuildBossRankInfoReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(offset_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossGetGuildBossRankInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossGetGuildBossRankInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 Offset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_Limit;
        break;
      }

      // optional uint32 Limit = 2;
      case 2: {
        if (tag == 16) {
         parse_Limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossGetGuildBossRankInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossGetGuildBossRankInfoReq)
  return false;
#undef DO_
}

void TGuildBossGetGuildBossRankInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossGetGuildBossRankInfoReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->offset(), output);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossGetGuildBossRankInfoReq)
}

::google::protobuf::uint8* TGuildBossGetGuildBossRankInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossGetGuildBossRankInfoReq)
  // optional uint32 Offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->offset(), target);
  }

  // optional uint32 Limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossGetGuildBossRankInfoReq)
  return target;
}

int TGuildBossGetGuildBossRankInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 Offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional uint32 Limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossGetGuildBossRankInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossGetGuildBossRankInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossGetGuildBossRankInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossGetGuildBossRankInfoReq::MergeFrom(const TGuildBossGetGuildBossRankInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossGetGuildBossRankInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossGetGuildBossRankInfoReq::CopyFrom(const TGuildBossGetGuildBossRankInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossGetGuildBossRankInfoReq::IsInitialized() const {

  return true;
}

void TGuildBossGetGuildBossRankInfoReq::Swap(TGuildBossGetGuildBossRankInfoReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossGetGuildBossRankInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossGetGuildBossRankInfoReq_descriptor_;
  metadata.reflection = TGuildBossGetGuildBossRankInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossGetGuildBossRankInfoRsp::kMyRankFieldNumber;
const int TGuildBossGetGuildBossRankInfoRsp::kRankInfoArrFieldNumber;
#endif  // !_MSC_VER

TGuildBossGetGuildBossRankInfoRsp::TGuildBossGetGuildBossRankInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossGetGuildBossRankInfoRsp)
}

void TGuildBossGetGuildBossRankInfoRsp::InitAsDefaultInstance() {
}

TGuildBossGetGuildBossRankInfoRsp::TGuildBossGetGuildBossRankInfoRsp(const TGuildBossGetGuildBossRankInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossGetGuildBossRankInfoRsp)
}

void TGuildBossGetGuildBossRankInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  myrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossGetGuildBossRankInfoRsp::~TGuildBossGetGuildBossRankInfoRsp() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossGetGuildBossRankInfoRsp)
  SharedDtor();
}

void TGuildBossGetGuildBossRankInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildBossGetGuildBossRankInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossGetGuildBossRankInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossGetGuildBossRankInfoRsp_descriptor_;
}

const TGuildBossGetGuildBossRankInfoRsp& TGuildBossGetGuildBossRankInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossGetGuildBossRankInfoRsp* TGuildBossGetGuildBossRankInfoRsp::default_instance_ = NULL;

TGuildBossGetGuildBossRankInfoRsp* TGuildBossGetGuildBossRankInfoRsp::New() const {
  return new TGuildBossGetGuildBossRankInfoRsp;
}

void TGuildBossGetGuildBossRankInfoRsp::Clear() {
  myrank_ = 0;
  rankinfoarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossGetGuildBossRankInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossGetGuildBossRankInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 MyRank = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankInfoArr;
        break;
      }

      // repeated .pb.TGuildBossRankInfo RankInfoArr = 2;
      case 2: {
        if (tag == 18) {
         parse_RankInfoArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankinfoarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_RankInfoArr;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossGetGuildBossRankInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossGetGuildBossRankInfoRsp)
  return false;
#undef DO_
}

void TGuildBossGetGuildBossRankInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossGetGuildBossRankInfoRsp)
  // optional int32 MyRank = 1;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->myrank(), output);
  }

  // repeated .pb.TGuildBossRankInfo RankInfoArr = 2;
  for (int i = 0; i < this->rankinfoarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rankinfoarr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossGetGuildBossRankInfoRsp)
}

::google::protobuf::uint8* TGuildBossGetGuildBossRankInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossGetGuildBossRankInfoRsp)
  // optional int32 MyRank = 1;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->myrank(), target);
  }

  // repeated .pb.TGuildBossRankInfo RankInfoArr = 2;
  for (int i = 0; i < this->rankinfoarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rankinfoarr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossGetGuildBossRankInfoRsp)
  return target;
}

int TGuildBossGetGuildBossRankInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 MyRank = 1;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->myrank());
    }

  }
  // repeated .pb.TGuildBossRankInfo RankInfoArr = 2;
  total_size += 1 * this->rankinfoarr_size();
  for (int i = 0; i < this->rankinfoarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankinfoarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossGetGuildBossRankInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossGetGuildBossRankInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossGetGuildBossRankInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossGetGuildBossRankInfoRsp::MergeFrom(const TGuildBossGetGuildBossRankInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankinfoarr_.MergeFrom(from.rankinfoarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossGetGuildBossRankInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossGetGuildBossRankInfoRsp::CopyFrom(const TGuildBossGetGuildBossRankInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossGetGuildBossRankInfoRsp::IsInitialized() const {

  return true;
}

void TGuildBossGetGuildBossRankInfoRsp::Swap(TGuildBossGetGuildBossRankInfoRsp* other) {
  if (other != this) {
    std::swap(myrank_, other->myrank_);
    rankinfoarr_.Swap(&other->rankinfoarr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossGetGuildBossRankInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossGetGuildBossRankInfoRsp_descriptor_;
  metadata.reflection = TGuildBossGetGuildBossRankInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TGuildBossInfoNotify::kIsResetFieldNumber;
const int TGuildBossInfoNotify::kBossLvFieldNumber;
const int TGuildBossInfoNotify::kRefreshTimeFieldNumber;
const int TGuildBossInfoNotify::kBossArrFieldNumber;
const int TGuildBossInfoNotify::kUserRecordArrFieldNumber;
const int TGuildBossInfoNotify::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

TGuildBossInfoNotify::TGuildBossInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pb.TGuildBossInfoNotify)
}

void TGuildBossInfoNotify::InitAsDefaultInstance() {
}

TGuildBossInfoNotify::TGuildBossInfoNotify(const TGuildBossInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:pb.TGuildBossInfoNotify)
}

void TGuildBossInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  isreset_ = 0u;
  bosslv_ = 0u;
  refreshtime_ = GOOGLE_ULONGLONG(0);
  updatetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TGuildBossInfoNotify::~TGuildBossInfoNotify() {
  // @@protoc_insertion_point(destructor:pb.TGuildBossInfoNotify)
  SharedDtor();
}

void TGuildBossInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TGuildBossInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TGuildBossInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TGuildBossInfoNotify_descriptor_;
}

const TGuildBossInfoNotify& TGuildBossInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_net_2fGuildBoss_2eproto();
  return *default_instance_;
}

TGuildBossInfoNotify* TGuildBossInfoNotify::default_instance_ = NULL;

TGuildBossInfoNotify* TGuildBossInfoNotify::New() const {
  return new TGuildBossInfoNotify;
}

void TGuildBossInfoNotify::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TGuildBossInfoNotify*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 39) {
    ZR_(isreset_, refreshtime_);
    updatetime_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  bossarr_.Clear();
  userrecordarr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TGuildBossInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:pb.TGuildBossInfoNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 IsReset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isreset_)));
          set_has_isreset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_BossLv;
        break;
      }

      // optional uint32 BossLv = 2;
      case 2: {
        if (tag == 16) {
         parse_BossLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosslv_)));
          set_has_bosslv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_RefreshTime;
        break;
      }

      // optional uint64 RefreshTime = 3;
      case 3: {
        if (tag == 24) {
         parse_RefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BossArr;
        break;
      }

      // repeated .pb.TGuildBossSingle BossArr = 4;
      case 4: {
        if (tag == 34) {
         parse_BossArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_BossArr;
        if (input->ExpectTag(42)) goto parse_UserRecordArr;
        break;
      }

      // repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
      case 5: {
        if (tag == 42) {
         parse_UserRecordArr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userrecordarr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_UserRecordArr;
        if (input->ExpectTag(48)) goto parse_UpdateTime;
        break;
      }

      // optional uint64 UpdateTime = 6;
      case 6: {
        if (tag == 48) {
         parse_UpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:pb.TGuildBossInfoNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:pb.TGuildBossInfoNotify)
  return false;
#undef DO_
}

void TGuildBossInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:pb.TGuildBossInfoNotify)
  // optional uint32 IsReset = 1;
  if (has_isreset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->isreset(), output);
  }

  // optional uint32 BossLv = 2;
  if (has_bosslv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bosslv(), output);
  }

  // optional uint64 RefreshTime = 3;
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->refreshtime(), output);
  }

  // repeated .pb.TGuildBossSingle BossArr = 4;
  for (int i = 0; i < this->bossarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bossarr(i), output);
  }

  // repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userrecordarr(i), output);
  }

  // optional uint64 UpdateTime = 6;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:pb.TGuildBossInfoNotify)
}

::google::protobuf::uint8* TGuildBossInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:pb.TGuildBossInfoNotify)
  // optional uint32 IsReset = 1;
  if (has_isreset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->isreset(), target);
  }

  // optional uint32 BossLv = 2;
  if (has_bosslv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bosslv(), target);
  }

  // optional uint64 RefreshTime = 3;
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->refreshtime(), target);
  }

  // repeated .pb.TGuildBossSingle BossArr = 4;
  for (int i = 0; i < this->bossarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bossarr(i), target);
  }

  // repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userrecordarr(i), target);
  }

  // optional uint64 UpdateTime = 6;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pb.TGuildBossInfoNotify)
  return target;
}

int TGuildBossInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 IsReset = 1;
    if (has_isreset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isreset());
    }

    // optional uint32 BossLv = 2;
    if (has_bosslv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosslv());
    }

    // optional uint64 RefreshTime = 3;
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refreshtime());
    }

    // optional uint64 UpdateTime = 6;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

  }
  // repeated .pb.TGuildBossSingle BossArr = 4;
  total_size += 1 * this->bossarr_size();
  for (int i = 0; i < this->bossarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossarr(i));
  }

  // repeated .pb.TGuildBossUserRecord UserRecordArr = 5;
  total_size += 1 * this->userrecordarr_size();
  for (int i = 0; i < this->userrecordarr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userrecordarr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TGuildBossInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TGuildBossInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TGuildBossInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TGuildBossInfoNotify::MergeFrom(const TGuildBossInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  bossarr_.MergeFrom(from.bossarr_);
  userrecordarr_.MergeFrom(from.userrecordarr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isreset()) {
      set_isreset(from.isreset());
    }
    if (from.has_bosslv()) {
      set_bosslv(from.bosslv());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TGuildBossInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TGuildBossInfoNotify::CopyFrom(const TGuildBossInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TGuildBossInfoNotify::IsInitialized() const {

  return true;
}

void TGuildBossInfoNotify::Swap(TGuildBossInfoNotify* other) {
  if (other != this) {
    std::swap(isreset_, other->isreset_);
    std::swap(bosslv_, other->bosslv_);
    std::swap(refreshtime_, other->refreshtime_);
    bossarr_.Swap(&other->bossarr_);
    userrecordarr_.Swap(&other->userrecordarr_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TGuildBossInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TGuildBossInfoNotify_descriptor_;
  metadata.reflection = TGuildBossInfoNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)
